<SUBSECTION>
  
  <NAME>表示队列</NAME>


  <LABEL NAME="sec:queues"></LABEL>
   <INDEX>队列<OPEN></OPEN></INDEX> 

   <TEXT>
    突变子
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-car!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>set_head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-cdr!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>set_tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    使我们能够使用对来构造那些仅靠
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    无法构造的数据结构。  本节展示了如何使用对来表示一种称为队列的数据结构。  第<SPACE></SPACE><REF NAME="sec:tables"></REF>节将展示如何表示称为表的数据结构。
  </TEXT> 

   <TEXT>
    一个<EM>队列</EM>是一个序列，其中项目在一端插入（称为
    <INDEX>queue<SUBINDEX>rear of</SUBINDEX></INDEX>
    <EM>尾部</EM>）并从另一端删除（称为
    <INDEX>queue<SUBINDEX>front of</SUBINDEX></INDEX>
    <EM>头部</EM>）。
    <SPLITINLINE>
      <SCHEME>图<SPACE></SPACE><REF NAME="fig:queue-ops_scheme"></REF></SCHEME>
      <JAVASCRIPT>图<SPACE></SPACE><REF NAME="fig:queue-ops"></REF></JAVASCRIPT>
    </SPLITINLINE>
    显示了一个最初为空的队列，其中插入了项目
    <SCHEMEINLINE>a</SCHEMEINLINE>和<SCHEMEINLINE>b</SCHEMEINLINE>。随后<SCHEMEINLINE>a</SCHEMEINLINE>被移除，插入了<SCHEMEINLINE>c</SCHEMEINLINE>和<SCHEMEINLINE>d</SCHEMEINLINE>，并移除了<SCHEMEINLINE>b</SCHEMEINLINE>。由于项目总是按照插入顺序被删除，队列有时也称为
    <INDEX>FIFO缓冲区</INDEX>
    <EM>FIFO</EM>（先进先出）缓冲区。
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE SRC="img_original/ch3.18.svg"></FIGURE>
          <CAPTION>队列操作。</CAPTION>
          <LABEL NAME="fig:queue-ops_scheme"></LABEL>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
	  <TABLE>
	    <TR>
	      <TD>
		操作
	      </TD>
	      <TD>
		结果队列
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>const q = make_queue();</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>insert_queue(q, &quot;a&quot;);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>a</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>insert_queue(q, &quot;b&quot;);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>a  b</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>delete_queue(q);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>b</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>insert_queue(q, &quot;c&quot;);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>b c</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>insert_queue(q, &quot;d&quot;);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>b c d</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<JAVASCRIPTINLINE>delete_queue(q);</JAVASCRIPTINLINE>
	      </TD>
	      <TD>
		<JAVASCRIPTINLINE>c d</JAVASCRIPTINLINE>
	      </TD>
	    </TR>
	  </TABLE>
          <CAPTION>队列操作。</CAPTION>
          <LABEL NAME="fig:queue-ops"></LABEL>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT> 

  
  <SHORT_PAGE LINES="2"></SHORT_PAGE>

  
  <TEXT>
    从
    <INDEX>数据抽象<SUBINDEX>用于队列</SUBINDEX></INDEX>
    <INDEX>队列<SUBINDEX>的操作</SUBINDEX></INDEX>
    数据抽象的角度来看，我们可以将队列视为由下列一组操作定义：
    <UL>
      <LI>
        一个构造函数：
        <BR></BR>
        <INDEX><USE>make_queue</USE></INDEX>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(make-queue)</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>make_queue()</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  <BR></BR>
          返回一个空队列（即不包含任何项的队列）。
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        一个谓词：
        <BR></BR>
        <INDEX><USE>is_empty_queue</USE></INDEX>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(empty-queue? queue)</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT>
	      <JAVASCRIPTINLINE>is_empty_queue(</JAVASCRIPTINLINE><META>queue</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  <BR></BR>
          用于测试队列是否为空。
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        一个选择器：
        <BR></BR>
          <INDEX><USE>front_queue</USE></INDEX>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(front-queue queue)</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT>
	      <JAVASCRIPTINLINE>front_queue(</JAVASCRIPTINLINE><META>queue</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  <BR></BR>
          返回队列前端的对象；如果队列为空则发出错误信号，并且不修改队列。
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        两个变异操作：
	<BR></BR>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(insert-queue! queue item)</SCHEMEINLINE>
	    </SCHEME>
	    <JAVASCRIPT>
	      <JAVASCRIPTINLINE>insert_queue(</JAVASCRIPTINLINE><META>queue</META><JAVASCRIPTINLINE>, </JAVASCRIPTINLINE><META>item</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  <BR></BR>
          在队列尾部插入
          <INDEX><USE>insert_queue</USE></INDEX>
	  项，并返回修改后的队列作为其值。<PDF_ONLY>\\[4pt]</PDF_ONLY><WEB_ONLY><BR></BR></WEB_ONLY>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(delete-queue! queue)</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>delete_queue(</JAVASCRIPTINLINE><META>queue</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  <BR></BR>
          移除队列前端的
          <INDEX><USE>delete_queue</USE></INDEX>
	  项，并返回修改后的队列作为其值；如果删除前队列为空，则发出错误信号。
      </LI>
    </UL>
  </TEXT>


  
  <TEXT>
    由于队列是项目的序列，我们当然可以将其表示为普通列表；队列的前端将是列表的 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，在队列中插入一个项目等同于在列表末尾追加一个新元素，而从队列中删除一个项目则相当于取出列表的 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    。然而，这种表示方法效率不高，因为为了插入一个项目，我们必须遍历列表直到到达末尾。由于我们遍历列表的唯一方法是通过连续的 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    操作，因此对于包含 <LATEXINLINE>$n$</LATEXINLINE> 个项目的列表，这种遍历需要 <LATEXINLINE>$\Theta(n)$</LATEXINLINE> 个步骤。对列表表示方法进行简单修改可以克服这一缺陷，使得队列操作的实现只需 <LATEXINLINE>$\Theta(1)$</LATEXINLINE> 个步骤；也就是说，所需步骤的数量与队列的长度无关。
  </TEXT>


  
  <TEXT>
    列表表示方法的问题在于需要扫描以查找列表的末尾。需要扫描的原因在于，尽管将列表表示为一系列对的链这一标准方法能够为我们提供一个指向列表开头的指针，但它却无法提供一个易于访问的指向列表末尾的指针。克服这一缺点的修改方法是将队列表示为一个列表，并附加一个额外的指针，该指针指示列表中的最后一对。这样，在插入项目时，我们就可以查阅尾部指针，从而避免扫描整个列表。
  </TEXT>


  
  <TEXT>
    队列因此被表示为一对指针，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-ptr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>front_ptr</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    以及
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-ptr</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rear_ptr</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    它们分别指示普通列表中的第一对和最后一对。
    由于我们希望队列是一个可识别的对象，因此可以使用
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    来将这两个指针组合起来。于是，队列本身将是这两个指针的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
   。
    <SPLITINLINE>
      <SCHEME>Figure<SPACE></SPACE><REF NAME="fig:queue-pointers_scheme"></REF></SCHEME>
      <JAVASCRIPT>Figure<SPACE></SPACE><REF NAME="fig:queue-pointers"></REF></JAVASCRIPT>
    </SPLITINLINE>
    说明了这种表示方法。
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-19.svg"></FIGURE>
          <CAPTION>
	    使用前、后指针将队列作为一个列表实现。
	  </CAPTION>
          <LABEL NAME="fig:queue-pointers_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-19.svg"></FIGURE>
          <CAPTION>
	    使用前、后指针将队列作为一个列表实现。
	  </CAPTION>
          <LABEL NAME="fig:queue-pointers"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>


  
  <TEXT>
    为了定义队列操作，我们使用下面的
    <SPLITINLINE>
      <SCHEME>程序,</SCHEME><JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    这使我们能够选择并修改队列的前指针和后指针：
    <SNIPPET HIDE="yes">
      <NAME>modify_pointers_example</NAME>
      <JAVASCRIPT>
const q = pair(1, 2);
set_front_ptr(q, 42);	
front_ptr(q);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>front_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>rear_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>set_front_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>set_rear_ptr</DECLARATION></INDEX> 
      <NAME>modify_pointers</NAME>
      <EXAMPLE>modify_pointers_example</EXAMPLE>
      <EXPECTED>42</EXPECTED>
      <SCHEME>
(define (front-ptr queue) (car queue))

(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item) (set-car! queue item))

(define (set-rear-ptr! queue item) (set-cdr! queue item))
      </SCHEME>
      <JAVASCRIPT>
function front_ptr(queue) { return head(queue); }
<SHORT_SPACE></SHORT_SPACE>
function rear_ptr(queue) { return tail(queue); }
<SHORT_SPACE></SHORT_SPACE>
function set_front_ptr(queue, item) { set_head(queue, item); }
<SHORT_SPACE></SHORT_SPACE>
function set_rear_ptr(queue, item) { set_tail(queue, item); }
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  
  <TEXT>
    现在我们可以实现实际的队列操作。我们将认为队列为空当且仅当其前指针为空列表：
    <SNIPPET HIDE="yes">
      <NAME>is_empty_queue_example</NAME>
      <JAVASCRIPT>
const q = pair(null, 2);
is_empty_queue(q);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>is_empty_queue</DECLARATION></INDEX> 
      <REQUIRES>modify_pointers</REQUIRES>
      <NAME>is_empty_queue</NAME>
      <EXAMPLE>is_empty_queue_example</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define (empty-queue? queue) (null? (front-ptr queue)))
      </SCHEME>
      <JAVASCRIPT>
function is_empty_queue(queue) { return is_null(front_ptr(queue)); }
      </JAVASCRIPT>
    </SNIPPET>
    构造函数
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    返回一个初始为空的队列，该队列是一个对偶，其中的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    均为空列表：
    <SNIPPET HIDE="yes">
      <NAME>make_queue_example</NAME>
      <REQUIRES>modify_pointers</REQUIRES>
      <JAVASCRIPT>
const q = make_queue();
front_ptr(q);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_queue</DECLARATION></INDEX> 
      <NAME>make_queue</NAME>
      <EXAMPLE>make_queue_example</EXAMPLE>
      <EXPECTED>null</EXPECTED>
      <SCHEME>
(define (make-queue) (cons &apos;() &apos;()))
      </SCHEME>
      <JAVASCRIPT>
function make_queue() { return pair(null, null); }
      </JAVASCRIPT>
    </SNIPPET>
    为了选择队列前部的元素，我们返回由前指针指示的对偶的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ：
    <SNIPPET HIDE="yes">
      <NAME>front_queue_example</NAME>
      <JAVASCRIPT>
const q = pair(pair(1, 2), 3);
front_queue(q);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>front_queue</DECLARATION></INDEX> 
      <NAME>front_queue</NAME>
      <REQUIRES>is_empty_queue</REQUIRES>
      <EXAMPLE>front_queue_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (front-queue queue)
  (if (empty-queue? queue)
      (error &quot;FRONT called with an empty queue&quot; queue)
      (car (front-ptr queue))))
      </SCHEME>
      <JAVASCRIPT>
function front_queue(queue) {
    return is_empty_queue(queue)
           ? error(queue, &quot;front_queue called with an empty queue&quot;)
           : head(front_ptr(queue));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  
  <TEXT>
    要在队列中插入一项，我们遵循的方法，其结果在
    <SPLITINLINE>
      <SCHEME>图<SPACE></SPACE><REF NAME="fig:queue-insert"></REF>中所示。</SCHEME>
      <JAVASCRIPT>图<SPACE></SPACE><REF NAME="fig:queue-insert"></REF>中所示。</JAVASCRIPT>
    </SPLITINLINE>
    首先创建一个新的对偶，其
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    为要插入的项，其
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    为空列表。如果队列最初为空，则将队列的前指针和后指针都设为这个新对偶；否则，我们修改队列中最后一个对偶，使其指向新对偶，并将后指针也更新为该新对偶。
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-20.svg"></FIGURE>
          <CAPTION>
	    使用<SCHEMEINLINE>(insert-queue! q &apos;d)</SCHEMEINLINE>对图<SPACE></SPACE><REF NAME="fig:queue-pointers_scheme"></REF>中的队列进行操作的结果。
	  </CAPTION>
          <LABEL NAME="fig:queue-insert_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SPLIT_SCALE="1" WEB_SCALE="0.8" SRC="img_javascript/ch3-Z-G-20.svg"></FIGURE>
          <CAPTION>
	    使用<JAVASCRIPTINLINE>insert_queue(q, &quot;d&quot;)</JAVASCRIPTINLINE>对图<SPACE></SPACE><REF NAME="fig:queue-pointers"></REF>中的队列进行操作的结果。
	  </CAPTION>
          <LABEL NAME="fig:queue-insert"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET HIDE="yes" PAGE="265">
      <NAME>print_queue_example</NAME>
      <REQUIRES>make_queue</REQUIRES>
      <REQUIRES>insert_queue</REQUIRES>
      <REQUIRES>delete_queue</REQUIRES>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
const q1 = make_queue();
insert_queue(q1, &quot;a&quot;);    
insert_queue(q1, &quot;b&quot;);    
delete_queue(q1);
delete_queue(q1);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>insert_queue</DECLARATION></INDEX> 
      <NAME>insert_queue</NAME>
      <REQUIRES>modify_pointers</REQUIRES>
      <REQUIRES>is_empty_queue</REQUIRES>
      <EXAMPLE>print_queue_example</EXAMPLE>
      <EXPECTED>[ null, [ &apos;b&apos;, null ] ]</EXPECTED>
      <SCHEME>
(define (insert-queue! queue item)
  (let ((new-pair (cons item &apos;())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
      </SCHEME>
      <JAVASCRIPT>
function insert_queue(queue, item) {
    const new_pair = pair(item, null);
    if (is_empty_queue(queue)) {
        set_front_ptr(queue, new_pair);
        set_rear_ptr(queue, new_pair);
    } else {
        set_tail(rear_ptr(queue), new_pair);
        set_rear_ptr(queue, new_pair);
    }
    return queue;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  
  <TEXT>
    为了删除队列首部的项，我们只需修改前指针，使其现在指向队列中的第二项，这可以通过沿着第一个项的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    指针找到（参见
    <SPLITINLINE><SCHEME>图<SPACE></SPACE><REF NAME="fig:queue-delete_scheme"></REF></SCHEME><JAVASCRIPT>图<SPACE></SPACE><REF NAME="fig:queue-delete"></REF></JAVASCRIPT></SPLITINLINE>）：<FOOTNOTE>如果第一个项是队列中的最后一项，则删除后前指针将变为空列表，从而标志该队列为空；我们不必担心更新后指针，因为它仍指向已删除的项，而
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>empty-queue?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_empty_queue</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    仅检查前指针。</FOOTNOTE>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-21.svg"></FIGURE>
          <CAPTION>
	    对图<SPACE></SPACE><REF NAME="fig:queue-insert_scheme"></REF>中的队列使用<SCHEMEINLINE>(delete-queue! q)</SCHEMEINLINE>操作的结果。
	  </CAPTION>
          <LABEL NAME="fig:queue-delete_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SPLIT_SCALE="1" WEB_SCALE="0.8" SRC="img_javascript/ch3-Z-G-21.svg"></FIGURE>
          <CAPTION>
	    对图<SPACE></SPACE><REF NAME="fig:queue-insert"></REF>中的队列使用<JAVASCRIPTINLINE>delete_queue(q)</JAVASCRIPTINLINE>操作的结果。
	  </CAPTION>
          <LABEL NAME="fig:queue-delete"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <INDEX><DECLARATION>delete_queue</DECLARATION></INDEX> 
      <NAME>delete_queue</NAME>
      <REQUIRES>is_empty_queue</REQUIRES>
      <REQUIRES>modify_pointers</REQUIRES>
      <EXAMPLE>print_queue_example</EXAMPLE>
      <EXPECTED>[ null, [ &apos;b&apos;, null ] ]</EXPECTED>
      <SCHEME>
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error &quot;DELETE! called with an empty queue&quot; queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
      </SCHEME>
      <JAVASCRIPT>
function delete_queue(queue) {
    if (is_empty_queue(queue)) {
        error(queue, &quot;delete_queue called with an empty queue&quot;);
    } else {
        set_front_ptr(queue, tail(front_ptr(queue)));
        return queue;
    }
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  
  <EXERCISE>
    Ben Bitdiddle 决定测试上面描述的队列实现。他在
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    中输入这些过程/函数到
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    解释器，并开始尝试它们：
    <SNIPPET EVAL="yes">
      <NAME>make_queue_example1</NAME>
      <REQUIRES>make_queue</REQUIRES>
      <SCHEME>
(define q1 (make-queue))
      </SCHEME>
      <JAVASCRIPT>
const q1 = make_queue();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>insert_queue_example1</NAME>
      <REQUIRES>insert_queue</REQUIRES>
      <REQUIRES>make_queue_example1</REQUIRES>
      <SCHEME>
(insert-queue! q1 &apos;a)
      </SCHEME>
      <JAVASCRIPT>
insert_queue(q1, &quot;a&quot;);
      </JAVASCRIPT>
      <SCHEMEOUTPUT>
            ((a) a)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
[[&quot;a&quot;, null], [&quot;a&quot;, null]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>insert_queue_example2</NAME>
      <REQUIRES>insert_queue_example1</REQUIRES>
      <SCHEME>
(insert-queue! q1 &apos;b)
      </SCHEME>
      <JAVASCRIPT>
insert_queue(q1, &quot;b&quot;);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[[&quot;a&quot;, [&quot;b&quot;, null]], [&quot;b&quot;, null]]
      </JAVASCRIPT_OUTPUT>
      <SCHEMEOUTPUT>
            ((a b) b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>insert_queue_example2</REQUIRES>
      <REQUIRES>delete_queue</REQUIRES>
      <NAME>delete_queue_example1</NAME>
      <SCHEME>
(delete-queue! q1)
      </SCHEME>
      <JAVASCRIPT>
delete_queue(q1);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[[&quot;b&quot;, null], [&quot;b&quot;, null]]
      </JAVASCRIPT_OUTPUT>
      <SCHEMEOUTPUT>
            ((b) b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>delete_queue_example2</NAME>
      <REQUIRES>delete_queue_example1</REQUIRES>
      <SCHEME>
(delete-queue! q1)
      </SCHEME>
      <JAVASCRIPT>
delete_queue(q1);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[null, [&quot;b&quot;, null]]
      </JAVASCRIPT_OUTPUT>
      <SCHEMEOUTPUT>
            (() b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <QUOTE>It<APOS></APOS>s all wrong!</QUOTE> 他抱怨道。
    <QUOTE>The interpreter<APOS></APOS>s response shows that the last item is inserted
    into the queue twice.  And when I delete both items, the second
    <SCHEMEINLINE>b</SCHEMEINLINE> is still there, so the queue isn<APOS></APOS>t
    empty, even though it<APOS></APOS>s supposed to be.</QUOTE>
    Eva Lu Ator 认为 Ben 对正在发生的事情理解有误。
    <QUOTE>It<APOS></APOS>s not that the
    items are going into the queue twice,</QUOTE> 她解释道。
    <QUOTE>It<APOS></APOS>s just that the standard
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    printer doesn<APOS></APOS>t know how to make sense of the queue representation.
    If you want to see the queue printed correctly, you<APOS></APOS>ll have to define
    your own print
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for queues.</QUOTE>
    解释 Eva Lu 所说的内容。具体来说，展示为什么 Ben 的示例会产生如此的打印结果。
    定义一个
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>print_queue</USE></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-queue</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_queue</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，它接受一个队列作为输入，并打印队列中项的序列。
    <LABEL NAME="ex:3_21"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>make_queue</REQUIRES>
	<REQUIRES>modify_pointers</REQUIRES>
	<REQUIRES>insert_queue</REQUIRES>
	<REQUIRES>is_empty_queue</REQUIRES>
	<REQUIRES>delete_queue</REQUIRES>
	<EXAMPLE>ex_3_21_solution_example</EXAMPLE>
	<JAVASCRIPT>
function print_queue(q) {
    return display(head(q));
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>ex_3_21_solution_example</NAME>
	<JAVASCRIPT>
const q1 = make_queue();
print_queue(q1); // prints: null
insert_queue(q1, &quot;a&quot;);
print_queue(q1); // prints: [&quot;a&quot;, null]
insert_queue(q1, &quot;b&quot;);
print_queue(q1); // prints: [&quot;a&quot;, [&quot;b&quot;, null]]
delete_queue(q1);
print_queue(q1); // prints: [&quot;b&quot;, null]
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    除了用一对指针来表示队列，我们还可以构建一个具有局部状态的队列，这种队列是一种
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>队列<SUBINDEX>函数式实现</SUBINDEX></INDEX>。局部状态将由指向普通列表开头和末尾的指针组成。因此，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    将具有如下形式：
    <SNIPPET LATEX="yes">
      <SCHEME>
(define (make-queue)
  (let ((front-ptr $\ldots$ )
        (rear-ptr $\ldots$ ))
    internal procedures 的定义
    (define (dispatch m) $\ldots$)
    dispatch))
      </SCHEME>
      <JAVASCRIPT>
function make_queue() {
    let front_ptr = $\ldots$;
    let rear_ptr = $\ldots$;
    <METAPHRASE>内部函数的声明</METAPHRASE>
    function dispatch(m) {$\ldots$}
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
    完成
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的定义，并使用这种表示法给出队列操作的实现。
    <LABEL NAME="ex:3_22"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>ex_3_22_example</EXAMPLE>
	<JAVASCRIPT>
// 由 GitHub 用户 devinryu 提供
	  
function make_queue() {
    let front_ptr = null;
    let rear_ptr = null;
    function is_empty_queue() {
        return is_null(front_ptr);
    }
    function insert_queue(item) {
        let new_pair = pair(item, null);
        if (is_empty_queue()) {
            front_ptr = new_pair;
            rear_ptr = new_pair;
        } else {
            set_tail(rear_ptr, new_pair);
            rear_ptr = new_pair;
        }
    }
    function delete_queue() {
        if (is_empty_queue()) {
            error(&quot;FRONT called with an empty queue&quot;);
        } else {
            front_ptr = tail(front_ptr);
        }
    }
    function print_queue() {
        display(front_ptr);
    }
    function dispatch(m) {
        return m === &quot;insert_queue&quot;
        ? insert_queue
        : m === &quot;delete_queue&quot;
        ? delete_queue
        : m === &quot;is_empty_queue&quot;
        ? is_empty_queue
        : m === &quot;print_queue&quot;
        ? print_queue
        : error(m, &quot;Unknow operation -- DISPATCH&quot;);
    }
    return dispatch;
}
function insert_queue(queue, item) {
    return queue(&quot;insert_queue&quot;)(item);
}
function delete_queue(queue) {
    return queue(&quot;delete_queue&quot;)();
}
function print_queue(queue) {
    return queue(&quot;print_queue&quot;)();
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>ex_3_22_example</NAME>
	<JAVASCRIPT>
const q = make_queue();
print_queue(q); // 输出: null
insert_queue(q, &quot;a&quot;);
print_queue(q); // 输出: [&quot;a&quot;, null]
insert_queue(q, &quot;b&quot;);
print_queue(q); // 输出: [&quot;a&quot;, [&quot;b&quot;, null]]
delete_queue(q);
print_queue(q); // 输出: [&quot;b&quot;, null]
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    一个<EM>双端队列</EM>
    <INDEX>队列<SUBINDEX>双端</SUBINDEX></INDEX>
    <INDEX>双端队列</INDEX>
    (<QUOTE>双端队列</QUOTE>) 是一种序列，在这种序列中可以在
    <SPLITINLINE>
      <SCHEME>
	在前端或
      </SCHEME>
      <JAVASCRIPT>
	在前端或在
      </JAVASCRIPT>
    </SPLITINLINE>
    后端插入和删除元素。
    双端队列的操作包括构造函数
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-deque</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_deque</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    谓词
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>empty-deque</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_empty_deque</JAVASCRIPTINLINE>,
    </JAVASCRIPT>
    </SPLITINLINE>
    选择器
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-deque</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>front_deque</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-deque</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rear_deque</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    以及修改操作
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-insert-deque!</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>front_insert_deque</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-delete-deque!</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>front_delete_deque</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-insert-deque!</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rear_insert_deque</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-delete-deque</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rear_delete_@deque</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    请展示如何使用对偶（pair）表示法表示双端队列，并给出这些操作的具体实现。<FOOTNOTE>注意不要使解释器尝试打印包含循环结构的数据。（参见练习<SPACE></SPACE><REF NAME="ex:make-cycle"></REF>。）</FOOTNOTE>
    所有操作均应在
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE>
    步内完成。
    <LABEL NAME="ex:deque"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<JAVASCRIPT>
// 解决方案由 GitHub 用户 clean99 提供
function make_deque() {
    return pair(null, null);
}

function front_ptr(deque) {
    return head(deque);
}

function rear_ptr(deque) {
    return tail(deque);
}

function set_front_ptr(deque, item) {
    set_head(deque, item);
}

function set_rear_ptr(deque, item) {
    set_tail(deque, item);
}

function is_empty_deque(deque) {
    return is_null(front_ptr(deque))
           ? true
  	   : is_null(rear_ptr(deque))
  	   ? true
  	   : false;
}

function is_one_item_deque(deque) {
    return front_ptr(deque) === rear_ptr(deque);
}

function front_insert_deque(deque, item) {
    // 使用另一个对偶存储前向指针
    const new_pair = pair(pair(item, null), null);
    if (is_empty_deque(deque)) {
        set_front_ptr(deque, new_pair);
        set_rear_ptr(deque, new_pair);
    } else {
        set_tail(new_pair, front_ptr(deque));
        // 将前向指针设置为 new_pair
        set_tail(head(front_ptr(deque)), new_pair);
        set_front_ptr(deque, new_pair);
    }
}

function front_delete_deque(deque) {
    if (is_empty_deque(deque)) {
        error(deque, &quot;front_delete_deque 被空的双端队列调用&quot;);
    } else if(is_one_item_deque(deque)) {
        set_front_ptr(deque, null);
        set_rear_ptr(deque, null);
        return deque;
    } else {
        set_front_ptr(deque, tail(front_ptr(deque)));
        return deque;
    }
}

function rear_insert_deque(deque, item) {
    if (is_empty_deque(deque)) {
        const new_pair = pair(pair(item, null), null);
        set_front_ptr(deque, new_pair);
        set_rear_ptr(deque, new_pair);
    } else {
        // 将 new_pair 的前向指针设置为最后一个元素
        const new_pair = pair(pair(item, rear_ptr(deque)), null);
        set_tail(rear_ptr(deque), new_pair);
        set_rear_ptr(deque, new_pair);
    }
}

function rear_delete_deque(deque) {
    if (is_empty_deque(deque)) {
        error(deque, &quot;rear_delete_deque 被空的双端队列调用&quot;);
    } else if(is_one_item_deque(deque)) {
        set_front_ptr(deque, null);
        set_rear_ptr(deque, null);
        return deque;
    } else {
        // 更新 rear_ptr 为最后一个元素的前向指针
        set_rear_ptr(deque, tail(head(rear_ptr(deque))));
        return deque;
    }
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  
  <INDEX>队列<CLOSE></CLOSE></INDEX>

</SUBSECTION>
