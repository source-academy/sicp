<SUBSECTION>
  <NAME>
    Instruction Summary
  </NAME>

  <LABEL NAME="sec:instruction-summary"/>
  
  <INDEX>register-machine language<SUBINDEX>instructions</SUBINDEX></INDEX>
  <INDEX>register-machine language<OPEN/></INDEX>
  
  <TEXT>
    A controller instruction in our register-machine language
    has one of the following forms, where each
    <META>input</META><LATEXINLINE>$_i$</LATEXINLINE> is
    <SPLITINLINE>
      <SCHEME>
	either
      </SCHEME>
    </SPLITINLINE>
    <INDEX>register-machine language<SUBINDEX><USE>reg</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>constant</USE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(reg register-name)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>reg(</JAVASCRIPTINLINE><META>register-name</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(const constant-value)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant(</JAVASCRIPTINLINE><META>constant-value</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
      </SPLITINLINE>
  </TEXT>

  <TEXT>
    These instructions were introduced in
    section<SPACE/><REF NAME="sec:register-machine-language"/>:
    <SPLITINLINE>
      <SCHEME>
	<INDEX>register-machine language<SUBINDEX><USE>goto</USE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>register-machine language<SUBINDEX><USE>go_to</USE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes">
      <INDEX>register-machine language<SUBINDEX><USE>assign</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>op</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>perform</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>test</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>branch</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>label</USE></SUBINDEX></INDEX>
      <SCHEME>
(assign $register-name$ (reg $register-name$))

(assign $register-name$ (const $constant-value$))

(assign $register-name$ (op $operation-name$) $input_{1}$ $\ldots$ $input_{n}$)

(perform (op $operation-name$) $input_{1}$ $\ldots$ $input_{n}$)

(test (op $operation-name$) $input_{1}$ $\ldots$ $input_{n}$)

(branch (label $label-name$))

(goto (label $label-name$))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>register-name</META>, reg(<META>register-name</META>))

assign(<META>register-name</META>, constant(<META>constant-value</META>))

assign(<META>register-name</META>, list(op(<META>operation-name</META>), <META>input</META>$_1$, $\ldots$, <META>input</META>$_n$))

perform(list(op(<META>operation-name</META>), <META>input</META>$_1$, $\ldots$, <META>input</META>$_n$))

test(list(op(<META>operation-name</META>), <META>input</META>$_1$, $\ldots$, <META>input</META>$_n$))

branch(label(<META>label-name</META>))

go_to(label(<META>label-name</META>))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The use of registers to hold labels was introduced in
    section<SPACE/><REF NAME="sec:subroutines"/>:
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign $register-name$ (label $label-name$))

(goto (reg $register-name$))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>register-name</META>, label(<META>label-name</META>))

go_to(reg(<META>register-name</META>))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Instructions to use the stack were introduced in
    section<SPACE/><REF NAME="sec:stack-recursion"/>:
    <SNIPPET EVAL="no" LATEX="yes">
      <INDEX>register-machine language<SUBINDEX><USE>save</USE></SUBINDEX></INDEX>
      <INDEX>register-machine language<SUBINDEX><USE>restore</USE></SUBINDEX></INDEX>
      <SCHEME>
(save $register-name$)

(restore $register-name$)
      </SCHEME>
      <JAVASCRIPT>
save(<META>register-name</META>)

restore(<META>register-name</META>)
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The only kind of
    <INDEX>register-machine language<SUBINDEX><USE>constant</USE></SUBINDEX></INDEX>
    <INDEX><USE>constant</USE> (in register machine)<SUBINDEX>syntax of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<LATEXINLINE>$\langle constant-value \rangle$</LATEXINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<META>constant-value</META>
      </JAVASCRIPT>
    </SPLITINLINE>
    we have seen so far is a number, but later we will 
    <SPLITINLINE>
      <SCHEME>use strings, symbols,</SCHEME>
      <JAVASCRIPT>also use strings</JAVASCRIPT>
    </SPLITINLINE>
    and lists.
    <SPLIT>
      <SCHEME>
	For example,
	<SCHEMEINLINE>(const "abc")</SCHEMEINLINE> is the string
	<SCHEMEINLINE>"abc"</SCHEMEINLINE>,
	<SCHEMEINLINE>(const abc)</SCHEMEINLINE> is the symbol
	<SCHEMEINLINE>abc</SCHEMEINLINE>,
	<SCHEMEINLINE>(const (a b c))</SCHEMEINLINE>
	is the list
	<SCHEMEINLINE>(a b c)</SCHEMEINLINE>,
	and
	<SCHEMEINLINE>(const ())</SCHEMEINLINE>
	is the empty list.
      </SCHEME>
      <JAVASCRIPT>
	For example,
	<JAVASCRIPTINLINE>constant("abc")</JAVASCRIPTINLINE>
	is the string <SCHEMEINLINE>"abc"</SCHEMEINLINE>,
	<JAVASCRIPTINLINE>constant(null)</JAVASCRIPTINLINE>
	is the empty list, and
	<JAVASCRIPTINLINE>constant(list("a", "b", "c"))</JAVASCRIPTINLINE>
	is the list
	<JAVASCRIPTINLINE>list("a", "b", "c")</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <INDEX>register machine<SUBINDEX>design of<CLOSE/></SUBINDEX></INDEX>
  <INDEX>register-machine language<CLOSE/></INDEX>


</SUBSECTION>
