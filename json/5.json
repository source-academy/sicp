[{"id":"/sicpjs/5","tag":"TITLE","body":"5  Computing with Register Machines"},{"tag":"EPIGRAPH","child":[{"body":"\n\n    My aim is to show that the heavenly machine is not a kind of divine,\n    live being, but a kind of clockwork (and he who believes that a clock\n    has soul attributes the maker","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s glory to the work), insofar as nearly\n    all the manifold motions are caused by a most simple and material\n    force, just as all motions of the clock are caused by a single weight.\n\n    ","tag":"#text"},{},{}],"author":" Johannes Kepler","date":" (letter to Herwart von Hohenburg, 1605)"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We began this book by studying processes and by describing processes\n    in terms of\n    functions\n    written in\n    JavaScript.\n    To explain the meanings of these\n    functions,\n    we used a succession of models of evaluation: the\n    substitution model of chapter ","tag":"#text"},{"tag":"REF","body":"1","href":"/sicpjs/1"},{"body":", the environment model of\n    chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":", and the metacircular evaluator of chapter ","tag":"#text"},{"tag":"REF","body":"4","href":"/sicpjs/4"},{"body":".  Our\n    examination of the metacircular evaluator, in particular, dispelled much of\n    the mystery of how\n    JavaScript-like languages are interpreted.\n    But even the metacircular evaluator leaves important questions\n    unanswered, because it fails to elucidate the mechanisms of control in a\n    JavaScript\n    system.  For instance, the evaluator does not explain how the\n    evaluation of a subexpression manages to return a value to the\n    expression that uses this value.\n    \n        Also, the evaluator does not explain how some recursive\n        functions can generate iterative processes (that is, be\n        evaluated using constant space) whereas other recursive\n        functions will generate recursive processes.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/5#footnote-1"},{"body":"\n      This chapter addresses both of these issues.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n        We\n      \n    will describe processes in terms of the step-by-step\n    operation of a traditional computer.  Such a computer, or \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"register machine","tag":"#text"}]},{"body":", sequentially executes \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"instructions","tag":"#text"}]},{"body":" that\n    manipulate the contents of a fixed set of storage elements called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"registers","tag":"#text"}]},{"body":".  A typical register-machine instruction applies a\n    primitive operation to the contents of some registers and assigns the\n    result to another register.  Our descriptions of processes executed by\n    register machines will look very much like \"","tag":"#text"},{"body":"machine-language","tag":"#text"},{"body":"\"\n    programs for traditional computers.  However, instead of focusing on\n    the machine language of any particular computer, we will examine\n    several\n    JavaScriptfunctions\n    and design a specific register machine to\n    execute each\n    function.\n    Thus, we will approach our task from the\n    perspective of a hardware architect rather than that of a\n    machine-language computer programmer.  In designing register machines,\n    we will develop mechanisms for implementing important programming\n    constructs such as recursion.  We will also present a language for\n    describing designs for register machines.  In\n    section ","tag":"#text"},{"tag":"REF","body":"5.2","href":"/sicpjs/5.2"},{"body":" we will\n    implement a\n    JavaScript\n    program that uses these descriptions to simulate the machines we design.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Most of the primitive operations of our register machines are very\n    simple.  For example, an operation might add the numbers fetched from\n    two registers, producing a result to be stored into a third register.\n    Such an operation can be performed by easily described hardware.  In\n    order to deal with list structure, however, we will also use the\n    memory operations\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",\n    which require an elaborate storage-allocation mechanism.  In\n    section ","tag":"#text"},{"tag":"REF","body":"5.3","href":"/sicpjs/5.3"},{"body":" we study their\n    implementation in terms of more elementary operations.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    In section ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.4"},{"body":", after we have accumulated\n    experience formulating simple\n    functions\n    as register machines, we will design a\n    machine that carries out the algorithm described by the metacircular\n    evaluator of section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":".  This will fill in\n    the gap in our understanding of how\n    JavaScript programs\n    are interpreted, by providing an explicit model for the mechanisms of\n    control in the evaluator.\n    In section ","tag":"#text"},{"tag":"REF","body":"5.5","href":"/sicpjs/5.5"},{"body":" we will study a simple\n    compiler that translates\n    JavaScript\n    programs into sequences of instructions that can be executed directly with\n    the registers and operations of the evaluator register machine.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/5#footnote-link-1","child":[{"body":"\n\tWith our metacircular evaluator, a recursive function\n\talways gives rise to a recursive process, even when\n\tthe process should be iterative according to the \n\tdistinction of section ","tag":"#text"},{"tag":"REF","body":"1.2.1","href":"/sicpjs/1.2.1"},{"body":".\n        See footnote ","tag":"#text"},{"tag":"REF","body":2,"href":"/sicpjs/4.1.1#footnote-2"},{"body":" in\n        section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".\n      ","tag":"#text"}]}]