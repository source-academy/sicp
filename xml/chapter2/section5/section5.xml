<SECTION>
  <NAME>Systems with Generic Operations</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:generic-operators"/>
  <TEXT>
    In the previous section, we saw how to design systems in which data
    objects can be represented in more than one way.  The key idea is to
    link the code that specifies the data operations to the several
    representations by means of generic interface
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
    <JAVASCRIPT>functions.</JAVASCRIPT></SPLITINLINE>
    Now we will see how to use this same idea not only to define operations
    that are generic over different representations but also to define
    operations that are
    <INDEX>arithmetic<SUBINDEX>generic</SUBINDEX></INDEX>
    generic over different kinds of arguments.  We have
    already seen several different packages of arithmetic operations: the
    primitive arithmetic (<SCHEMEINLINE>+</SCHEMEINLINE>,
    <SCHEMEINLINE>-</SCHEMEINLINE>, <SCHEMEINLINE>*</SCHEMEINLINE>,
    <SCHEMEINLINE>/</SCHEMEINLINE>) built into our language, the
    rational-number arithmetic
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-rat</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:rationals"/>, and the complex-number
    arithmetic that we implemented in
    section<SPACE/><REF NAME="sec:data-directed"/>.  We will now use
    data-directed techniques to construct a package of arithmetic operations
    that incorporates all the arithmetic packages we have already constructed.
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:generic-system_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:generic-system"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the structure of the system we
    shall build.  Notice the 
    <INDEX>abstraction barriers<SUBINDEX>in generic arithmetic system</SUBINDEX></INDEX>
    abstraction barriers.  From the perspective
    of someone using <QUOTE>numbers,</QUOTE> there is a single
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>add</SCHEMEINLINE> that operates on whatever numbers are
    supplied.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Add</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>add</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is part of a generic interface that allows the separate ordinary-arithmetic,
    rational-arithmetic, and complex-arithmetic packages to be accessed
    uniformly by programs that use numbers.  Any individual arithmetic package
    (such as the complex package) may itself be accessed through generic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    that combine packages designed for different representations (such as
    rectangular and polar).  Moreover, the structure of the system is additive,
    so that one can design the individual arithmetic packages separately and
    combine them to produce a generic arithmetic system.
    <INDEX>message passing<CLOSE/></INDEX>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch2-Z-G-64.svg"></FIGURE>
          <CAPTION>Generic arithmetic system.</CAPTION>
          <LABEL NAME="fig:generic-system_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE scale="0.55" src="img_javascript/ch2-Z-G-64.svg"></FIGURE>
          <CAPTION>
	    Generic
	    <INDEX>generic arithmetic operations<SUBINDEX>structure of system</SUBINDEX></INDEX>
	    arithmetic system.
	  </CAPTION>
          <LABEL NAME="fig:generic-system"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <!-- Subsection 1 : Generic Arithmetic Operations -->
  &amp;subsection2.5.1;

  <!-- Subsection 2 : Combining Data of Different Types -->
  &amp;subsection2.5.2;

  <!-- Example: Symbolic Algebra -->
  &amp;subsection2.5.3;

</SECTION>
