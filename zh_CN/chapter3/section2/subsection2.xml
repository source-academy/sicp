<SUBSECTION> 
   
  <NAME>
    应用简单
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
  </NAME> 


  <LABEL NAME="sec:env-apply-proc"></LABEL>
   
  <INDEX>求值环境模型
    <SUBINDEX>
      <SPLITINLINE>
        <SCHEME>过程</SCHEME>
        <JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      -应用实例
      <OPEN></OPEN>
    </SUBINDEX>
  </INDEX> 

  
  <INDEX>函数应用
    <SUBINDEX>环境模型的<OPEN></OPEN></SUBINDEX>
  </INDEX>


  
  <TEXT>
    <INDEX><USE>sum_of_squares</USE><SUBINDEX><ORDER>environment</ORDER>在环境模型中<OPEN></OPEN></SUBINDEX></INDEX>
    当我们在<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节中介绍替换模型时，我们展示了如何通过
    <SPLITINLINE>
      <SCHEME>组合 <SCHEMEINLINE>(f 5)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>调用
      <JAVASCRIPTINLINE>f(5)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    计算出136，给定如下
    <SPLITINLINE>
      <SCHEME>过程定义:</SCHEME>
      <JAVASCRIPT>函数声明:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <EXAMPLE>f_example</EXAMPLE>
      <EXPECTED>136</EXPECTED>
      <SCHEME>
(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
function sum_of_squares(x, y) {
    return square(x) + square(y);
}
function f(a) {
    return sum_of_squares(a + 1, a * 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    我们可以使用环境模型来分析这个例子。
    图<SPACE></SPACE><REF NAME="fig:sum-squares"></REF>显示了通过计算
    <SPLITINLINE><SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>f</SCHEMEINLINE>、<SCHEMEINLINE>square</SCHEMEINLINE>以及
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的定义在
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    环境中创建的三个对象。每个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象都由一些代码和指向
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    环境的指针组成。
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.9" SRC="img_original/ch3-Z-G-5.svg"></FIGURE>
          <LABEL NAME="fig:sum-squares_scheme"></LABEL>
          <CAPTION>全局环境中的过程对象。</CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-5.svg"></FIGURE>
          <LABEL NAME="fig:sum-squares"></LABEL>
          <CAPTION>程序环境中的函数对象。</CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>


  
  <TEXT>
    <WEB_ONLY>
      &lt;!-- 图已移动至后文以适应 SICP JS 分页  --&gt;
      &lt;!-- 该图的代码在本文件后面的 PDF_ONLY 部分重复出现  --&gt;
      <SPLIT>
        <SCHEME>
	<FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval_scheme"></LABEL>
          <CAPTION>
	    通过求值
	    <SCHEMEINLINE>(f 5)</SCHEMEINLINE>
	    并使用图<SPACE></SPACE><REF NAME="fig:sum-squares_scheme"></REF>中所示的过程创建的环境。
	  </CAPTION>
	</FIGURE>
        </SCHEME>
        <JAVASCRIPT>
	<FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval"></LABEL>
          <CAPTION>
	    通过求值
	    <JAVASCRIPTINLINE>f(5)</JAVASCRIPTINLINE>
	    并使用图<SPACE></SPACE><REF NAME="fig:sum-squares"></REF>中所示的函数创建的环境。
	  </CAPTION>
	</FIGURE>
        </JAVASCRIPT>
      </SPLIT>
    </WEB_ONLY>

    在<SPLITINLINE>
      <SCHEME>图<SPACE></SPACE><REF NAME="fig:f5-eval_scheme"></REF></SCHEME>
      <JAVASCRIPT>图<SPACE></SPACE><REF NAME="fig:f5-eval"></REF></JAVASCRIPT>
    </SPLITINLINE>
    中，我们可以看到通过求值表达式
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(f 5)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>f(5)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    所创建的环境结构。对 <SCHEMEINLINE>f</SCHEMEINLINE> 的调用创建了一个新的环境 E1，该环境以一个包含绑定了实参 5 的框架开始，其中 <SCHEMEINLINE>a</SCHEMEINLINE> 是 <SPLITINLINE><SCHEME>形式</SCHEME></SPLITINLINE>参数。 在 E1 中，我们求值 <SCHEMEINLINE>f</SCHEMEINLINE> 的函数体：
    <SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ a 1) (* a 2))
      </SCHEME>
      <JAVASCRIPT>
return sum_of_squares(a + 1, a * 2);
      </JAVASCRIPT>
    </SNIPPET>
    <SHORT_PAGE LINES="2"></SHORT_PAGE>为了求值
    <SPLITINLINE>
      <SCHEME>
    这个组合，我们首先计算子表达式。
      </SCHEME>
      <JAVASCRIPT>
	对于 return 语句，我们首先计算返回表达式的子表达式。
      </JAVASCRIPT>
    </SPLITINLINE>
    第一个子表达式，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    的值是一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象。（注意这个值是如何被找到的：我们首先在 E1 的第一个框架中查找，其中没有 <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    的绑定。然后，我们进入封闭的环境，即
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    环境，在
    <SPLITINLINE>
      <SCHEME>
        图<SPACE></SPACE><REF NAME="fig:sum-squares_scheme"></REF>.)
      </SCHEME>
      <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:sum-squares"></REF>.)
      </JAVASCRIPT>
    </SPLITINLINE>
    中找到该绑定。
    另外两个子表达式通过应用基本运算 <SCHEMEINLINE>+</SCHEMEINLINE> 和 <SCHEMEINLINE>*</SCHEMEINLINE>
    来计算两个组合
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ a 1)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>a + 1</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* a 2)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>a * 2</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    分别得到 6 和 10。
  </TEXT>


  
  <TEXT>
    现在我们应用<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象<SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    到实参6和10。这会产生一个新环境E2，在该环境中，
    形式参数<SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE>
    <SCHEMEINLINE>x</SCHEMEINLINE>和<SCHEMEINLINE>y</SCHEMEINLINE>被绑定到这些实参上。在E2中，我们求值
    <SPLITINLINE>
      <SCHEME>
	      组合
	      <SCHEMEINLINE>(+ (square x) (square y))</SCHEMEINLINE>。
      </SCHEME>
      <JAVASCRIPT>
	      语句
	      <SNIPPET EVAL="no">
	        <JAVASCRIPT>
return square(x) + square(y);
	        </JAVASCRIPT>
	      </SNIPPET>
      </JAVASCRIPT>
    </SPLITINLINE>
    这使得我们必须求值
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(square x)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square(x)</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    其中<SCHEMEINLINE>square</SCHEMEINLINE>是在
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    框架中找到的，而<SCHEMEINLINE>x</SCHEMEINLINE>的值为6。 再次，我们建立一个新环境E3，在该环境中<SCHEMEINLINE>x</SCHEMEINLINE>被绑定为6，并在该环境中求值<SCHEMEINLINE>square</SCHEMEINLINE>的主体，即
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    同时，在应用<SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    的过程中，我们必须求值子表达式
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(square y)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square(y)</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    其中<SCHEMEINLINE>y</SCHEMEINLINE>的值为10。对<SCHEMEINLINE>square</SCHEMEINLINE>的第二次调用创建了另一个环境E4，在该环境中，
    <SCHEMEINLINE>x</SCHEMEINLINE>，即<SCHEME>形式</SCHEME>
    参数<SCHEMEINLINE>square</SCHEMEINLINE>的绑定，被设为10。在E4中，我们必须求值
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>


  
  <TEXT>
    需要注意的重要一点是，每次调用
    <SCHEMEINLINE>square</SCHEMEINLINE>
    都会创建一个包含<SCHEMEINLINE>x</SCHEMEINLINE>
    的绑定的新环境。我们可以看到，不同的帧如何将所有名为
    <SCHEMEINLINE>x</SCHEMEINLINE>
    的局部变量分开。请注意，每个由
    <SCHEMEINLINE>square</SCHEMEINLINE>
    创建的帧都指向
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    环境，因为这是由
    <SCHEMEINLINE>square</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    对象所指示的环境。
  </TEXT>


  
  <TEXT>
    子表达式求值后，其结果被返回。由对 <SCHEMEINLINE>square</SCHEMEINLINE> 的两次调用生成的值通过 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>, 
      </JAVASCRIPT>
    </SPLITINLINE>
    相加，并且该结果由 <SCHEMEINLINE>f</SCHEMEINLINE> 返回。由于我们在此的重点是环境结构，因此不详细讨论这些返回值如何在调用之间传递；然而，这也是求值过程中的一个重要方面，我们将在第<SPACE></SPACE><REF NAME="chap:reg"></REF>章中详细讨论.
    <INDEX><USE>sum_of_squares</USE><SUBINDEX><ORDER>environment</ORDER>在环境模型中<CLOSE></CLOSE></SUBINDEX></INDEX>
  </TEXT>


  
  <EXERCISE>
    <LABEL NAME="ex:factorial-env-model"></LABEL>
    在<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>一节中，
    我们使用替换模型来分析两种
    <INDEX>递归过程<SUBINDEX>与迭代过程对比</SUBINDEX></INDEX>
    <INDEX>迭代过程<SUBINDEX>与递归过程对比</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算
    <INDEX><USE>factorial</USE><SUBINDEX>求值中的环境结构</SUBINDEX></INDEX>
    阶乘，一个递归版本
    <SNIPPET EVAL="yes">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    和一个迭代版本
    <SNIPPET EVAL="yes">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return fact_iter(1, 1, n);
}
function fact_iter(product, counter, max_count) {
    return counter &gt; max_count
           ? product
           : fact_iter(counter * product, 
                       counter + 1, 
                       max_count);
}
      </JAVASCRIPT>
    </SNIPPET>
    展示使用每个版本的 <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    求值
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(factorial 6)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>factorial(6)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    时创建的环境结构。<FOOTNOTE>
    环境模型不会阐明我们在<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>一节中提出的声明，
    即解释器可以通过尾递归在常量空间内执行
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ——例如
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>。当我们在<SPACE></SPACE><REF NAME="sec:eceval"></REF>一节中讨论解释器的控制结构时，
    我们将讨论
    <INDEX>求值环境模型<SUBINDEX>与尾递归相关</SUBINDEX></INDEX>
    <INDEX>尾递归<SUBINDEX>与求值环境模型相关</SUBINDEX></INDEX>
    的内容。</FOOTNOTE>
  </EXERCISE>


  
  <INDEX>求值环境模型<SUBINDEX><SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>-应用实例<CLOSE></CLOSE></SUBINDEX></INDEX>

   <INDEX>函数应用<SUBINDEX>环境模型的<CLOSE></CLOSE></SUBINDEX></INDEX> 

   <PDF_ONLY>
    &lt;!-- 图形为了 SICP JS 分页而从前面移至此处 --&gt;
    &lt;!-- 图形代码是此文件中 WEB_ONLY 部分早期代码的副本 --&gt;
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval_scheme"></LABEL>
          <CAPTION>
	    通过求值生成的环境
	    <SCHEMEINLINE>(f 5)</SCHEMEINLINE>，
	    使用图<SPACE></SPACE><REF NAME="fig:sum-squares_scheme"></REF>中的过程。
	  </CAPTION>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval"></LABEL>
          <CAPTION>
	    通过求值生成的环境
	    <JAVASCRIPTINLINE>f(5)</JAVASCRIPTINLINE>，
	    使用图<SPACE></SPACE><REF NAME="fig:sum-squares"></REF>中的函数。
	  </CAPTION>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </PDF_ONLY> 

</SUBSECTION>
