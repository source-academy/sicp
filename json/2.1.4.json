[{"id":"/sicpjs/2.1.4","tag":"TITLE","body":"2.1.4  \n    Extended Exercise: Interval Arithmetic"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Alyssa P. Hacker is designing a system to help people solve\n    engineering problems.  One feature she wants to provide in her system\n    is the ability to manipulate inexact quantities (such as measured\n    parameters of physical devices) with known precision, so that when\n    computations are done with such approximate quantities the results\n    will be numbers of known precision.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Electrical engineers will be using Alyssa's system to compute\n    electrical quantities.  It is sometimes necessary for them to compute\n    the value of a parallel equivalent resistance\n    ","tag":"#text"},{"body":"$R_{p}$","tag":"LATEX"},{"body":" of two resistors\n    ","tag":"#text"},{"body":"$R_{1}$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$R_{2}$","tag":"LATEX"},{"body":"\n    using the formula\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      R_{p} & = & \\dfrac{1}{1/R_{1}+1/R_{2}}\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    Resistance values are usually known only up to some \n    \n    tolerance guaranteed by the manufacturer of the resistor.  For example, if\n    you buy a resistor labeled \"","tag":"#text"},{"body":"6.8 ohms with 10% tolerance","tag":"#text"},{"body":"\" you can\n    only be sure that the resistor has a resistance between\n    ","tag":"#text"},{"body":"$6.8-0.68=6.12$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$6.8+0.68=7.48$","tag":"LATEX"},{"body":" ohms.  Thus, if you have a\n    6.8-ohm 10% resistor in parallel with a 4.7-ohm\n    5% resistor, the resistance of the combination can range from about\n    2.58 ohms (if the two resistors are at the lower bounds) to about 2.97 ohms\n    (if the two resistors are at the upper bounds).\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Alyssa's idea is to implement \"","tag":"#text"},{"body":"interval arithmetic","tag":"#text"},{"body":"\" as a\n    set of arithmetic operations for combining \"","tag":"#text"},{"body":"intervals","tag":"#text"},{"body":"\" (objects\n    that represent the range of possible values of an inexact quantity). The\n    result of adding, subtracting, multiplying, or dividing two intervals is\n    itself an interval, representing the range of the result.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Alyssa postulates the existence of an abstract object called an\n    \"","tag":"#text"},{"body":"interval","tag":"#text"},{"body":"\" that has two endpoints: a lower bound and an upper bound.\n    She also presumes that, given the endpoints of an interval, she can\n    construct the interval using the data constructor \n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_interval"},{"body":".\n      \n    Alyssa first writes a\n    function\n    for adding two intervals.  She reasons that the minimum value the sum could\n    be is the sum of the two lower bounds and the maximum value it could be is\n    the sum of the two upper bounds:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":20,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-BBQPT5uahIAc1AKCNBa-iFhVvo6NlBhbl7NAEciIzYAZ1BxmgZe8YoahtxK5hIqPSJhJiSSAC4phe56qgIZJsLJplASIgY3fi6KGlAr+cXG5bAmEi8mlpp0nxtjQ+KAANSgMjfUD3F5pfpsX5PA7vSYEEGfFFHSF0KG8Ejbew2RL2KqLChcHjtETZJSBNTBQqgABEAG0WWoIW8jicZKJHC4+O5PD9sgoIfS8nlmaBpDKuYcGrzRKlAcKsn5xRyALrM2LWYl2ZJRLyU3iCGlSWT+SWM0LMdhm6liAUZEU+cRa11CzKi+SSSVSoPB9Sqt1ZT3glJpcN+uRyfX4aq1J0WsQm1MdUQOzhtNOiDDSFByaSBkPloM5zM0gDM0gArPGE0A","body":"function add_interval(x, y) {\n    return make_interval(lower_bound(x) + lower_bound(y),\n                         upper_bound(x) + upper_bound(y));\n} "},{"body":"\n    Alyssa also works out the product of two intervals by finding the\n    minimum and the maximum of the products of the bounds and using them\n    as the bounds of the resulting interval.\n    (The functions ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_min"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_max"},{"body":"\n    are\n    primitives that find the minimum or maximum of any number of arguments.)\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":20,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-BBQPT5uahIAc1AKCNBa-iFhVvo6NlBhbl7NAEciIzYAZ1BxmgZe8YoahtxK5hIqPSJhJiSSAC4phe56qgIZJsLJplASIgY3fi6KGlAr+cXG5bAmEi8mlpp0nxtjQ+KAANSgMjfUD3F5pfpsX5PA7vSYEEGfFFHSF0KG8Ejbew2RL2KqLChcHjtETZJSBNTBQqgABEAG0WWoIW8jicZKJHC4+O5PD9sgoIfS8nlmaBpDKuYcGrzRKlAcKsn5xRyALrM2LWYl2ZIMTaU3iCGlSWT+SVkOjzKoYUAAXj6zgyIp84gUACo3YL1aLzLb7RQqigXf6PVlvaA-aro0G5LE8naSA69ABmSMJoWZUWxv0CxM+YOp0NVbA5tIliS+lI1vOe0RloIFULMdhm6liZjNDgMbiiPQYaR6FBjzNj7BySSSqULxfqPthAdMcTD0fhyfTuTJ8q4aq1bsW3umtqn0SdzgXjqiLcoWe5Jcv1-Xk93qegACse+TQA","body":"function mul_interval(x, y) {\n    const p1 = lower_bound(x) * lower_bound(y);\n    const p2 = lower_bound(x) * upper_bound(y);\n    const p3 = upper_bound(x) * lower_bound(y);\n    const p4 = upper_bound(x) * upper_bound(y);\n    return make_interval(math_min(p1, p2, p3, p4),\n                         math_max(p1, p2, p3, p4));\n} "},{"body":"\n    To divide two intervals, Alyssa multiplies the first by the reciprocal of\n    the second.  Note that the bounds of the reciprocal interval are\n    the reciprocal of the upper bound and the reciprocal of the lower bound, in\n    that order.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":29,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-BBQPT5uahIAc1AKCNBa-iFhVvo6NlBhbl7NAEciIzYAZ1BxmgZe8YoahtxK5hIqPSJhJiSSAC4phe56qgIZJsLJplASIgY3fi6KGlAr+cXG5bAmEi8mlpp0nxtjQ+KAANSgMjfUD3F5pfpsX5PA7vSYEEGfFFHSF0KG8Ejbew2RL2KqLChcHjtETZJSBNTBQqgABEAG0WWoIW8jicZKJHC4+O5PD9sgoIfS8nlmaBpDKuYcGrzRKlAcKsn5xRyALrM2LWYl2ZIMTaU3iCGlSWT+SVkOjzKoYUAAXj6zgyIp84gUACo3YL1aLzLb7RQqigXf6PVlvaA-aro0G5LE8naSA69ABmSMJoWZUWxv0CxM+YOp0NVbA5tIliS+lI1vOe0RloIFULMdhm6liZjNDgMbiiPQYaR6FBjzNj7BySSSqULxfqPthAdMcTD0fhyfTuTJ8qGnagLxUATdi1iK3yOl5Rkd01tC8mRisTiPjqiJ1gXOB0uz+dLoBQGAV+UZNlk8h7vq+DVLU54fieZ7vjSnZvlST5bigs65MBuF5Kh8E0lOoAAKx7smQA","body":"function div_interval(x, y) {\n    return mul_interval(x, make_interval(1 / upper_bound(y),\n                                         1 / lower_bound(y)));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.7","id":"#ex-2.7","child":[{"body":"\n    Alyssa's program is incomplete because she has not specified the\n    implementation of the interval abstraction.  Here is a definition of\n    the interval constructor:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function make_interval(x, y) { return pair(x, y); }"},{"body":"\n    Define selectors \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"upper_bound"},{"body":"\n    and \n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lower_bound"},{"body":"\n    to complete the implementation.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":5,"eval":false,"body":"function make_interval(x, y) {\n    return pair(x, y);\n}\nfunction lower_bound(x) { \n    return head(x); \n}\nfunction upper_bound(x) { \n    return tail(x); \n}"}]},{"tag":"EXERCISE","title":"Exercise 2.8","id":"#ex-2.8","child":[{"body":" \n    Using reasoning analogous to Alyssa's, describe how the difference\n    of two intervals may be computed.  Define a corresponding subtraction\n    function,\n    called \n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sub_interval"},{"body":".","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":20,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-BBQPT5uahIAc1AKCNBa-iFhVvo6NlBhbl7NAEciIzYAZ1BxmgZe8YoahtxK5hIqPSJhJiSSAC4phe56qgIZJsLJplASIgY3fi6KGlAr+cXG5bAmEi8mlpp0nxtjQ+KAANSgMjfUD3F5pfpsX5PA7vSYEEGfFFHSF0KG8Ejbew2RL2KqLChcHjtETZJSBNTBQqgABEAG0WWoIW8jicZKJHC4+O5PD9sgoIfS8nlmaBpDKuYcGrzRKlAcKsn5xRyALrM2LWYl2ZLjIhuSm8QQ0qSyfySxmhZjsc3UsQCjIinziBQAWhSaXdWXkkklUtDYfUqoDoq9oF9bqFmVF8jk+vw1VqzstYhNZraWdEjs4eY6ogADNIMHJpCHw7XQ4XMyXS2gAGwVtAAVjk3bMQA","body":"function sub_interval(x, y) {\n    return make_interval(lower_bound(x) - upper_bound(y),\n                         upper_bound(x) - lower_bound(y));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.9","id":"#ex-2.9","child":[{"body":" \n    The\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"width","tag":"#text"}]},{"body":" of an interval is half of the difference between its\n    upper and lower bounds.  The width is a measure of the uncertainty of\n    the number specified by the interval.  For some arithmetic operations\n    the width of the result of combining two intervals is a function only\n    of the widths of the argument intervals, whereas for others the width\n    of the combination is not a function of the widths of the argument\n    intervals.  Show that the width of the sum (or difference) of two\n    intervals is a function only of the widths of the intervals being\n    added (or subtracted).  Give examples to show that this is not true\n    for multiplication or division.\n    ","tag":"#text"}],"solution":[{"body":"\n      Let us denote the width of interval ","tag":"#text"},{"body":"$i$","tag":"LATEX"},{"body":"\n      with ","tag":"#text"},{"body":"$W(i)$","tag":"LATEX"},{"body":", and its lower and upper\n      bound with ","tag":"#text"},{"body":"$L(i)$","tag":"LATEX"},{"body":" and\n      ","tag":"#text"},{"body":"$U(i)$","tag":"LATEX"},{"body":", respectively. Two\n      intervals ","tag":"#text"},{"body":"$i_1$","tag":"LATEX"},{"body":" and\n      ","tag":"#text"},{"body":"$i_2$","tag":"LATEX"},{"body":" have by definition widths of\n      ","tag":"#text"},{"body":"$(U(i_1) - L(i_1))/2$","tag":"LATEX"},{"body":" and\n      ","tag":"#text"},{"body":"$(U(i_2) - L(i_2))/2$","tag":"LATEX"},{"body":", respectively.\n      Adding the two intervals\n      leads to the interval\n      ","tag":"#text"},{"body":"$[ L(i_1) + L(i_2), U(i_1) + U(i_2)]$","tag":"LATEX"},{"body":",\n      whose width is\n      ","tag":"#text"},{"body":"\\[(U(i_1) + U(i_2) - (L(i_1) + L(i_2)))/2\\]","tag":"LATEX"},{"body":"\\[= (U(i_1) - L(i_1))/2 + (U(i_2) - L(i_2))/2\\]","tag":"LATEX"},{"body":"\\[= W(i_1) + W(i_2)\\]","tag":"LATEX"},{"body":"\n      The argument for subtraction is similar.\n      \n      The widths of the result of multiplying intervals does not have\n      such a nice property. For example, multiplying any interval\n      with the zero-width interval \n      ","tag":"#text"},{"body":"$[ 0, 0 ]$","tag":"LATEX"},{"body":" yields a zero-width interval\n      whereas multiplying any interval\n      ","tag":"#text"},{"body":"$i$","tag":"LATEX"},{"body":"\n      with the zero-width interval \n      ","tag":"#text"},{"body":"$[ 1, 1 ]$","tag":"LATEX"},{"body":" yields an interval with width\n      ","tag":"#text"},{"body":"$W(i)$","tag":"LATEX"},{"body":".\n      The argument for division is similar.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.10","id":"#ex-2.10","child":[{"body":"\n    Ben Bitdiddle, an expert systems programmer, looks over Alyssa's\n    shoulder and comments that it is not clear what it means to\n    \n    divide by an interval that spans zero.  Modify Alyssa's program to\n    check for this condition and to signal an error if it occurs.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":29,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN65Qq0HzYUifegAcmVPhOnyA3LgC+hUpVr1hNAO78OAIxqkAJhIWLQKtQ0tHVAACzYmb3E5U38rYnJqOlAiXV0Xdy8fJX81dU1tegoDMWjYy3wE22SGImEuHn4hUpNfANUyOgBnClBdDFAAXlAHZz43DxIohQAqEacMye8zdtBOkh6+lCH5sYms6NA51PTxzKnRFbz1zd0AZh2TxYPZ3eeLq7Ub3t1sR7T3tMjikAWclpcYqsgoVGKxONxeIIRKJmBRQhwGNxRP1pLoULi7rjsHJJKs8uSKRTUejmOJsRhcfi+oS+sTIVZcCA+nwEdwAOagNFsUAIpoiEX0OjC4TcYUaACOREMbC6oC6NAYwp6PJIfM5YGYJCoujqTCSJAAXGqKDq+VQCDJBYVVUxQCQiAxXPwJRQaKBXdr+f4uUwpoLwqAaKczTQ+KAANRrUOgL3+tIytieQV+wO61UEWP6622tZ0MhmtgkM12ayJOzchENRHNURUNp5aEhABEAG1QF3VInc3aHaJRoDW3IFImyRSB9IB0Obfz7TJRE8wVk29P+6AALpd8wcqrm0CeKgCJtilqyduBAohcebj4KAA8wwADKAAGTfkGnfYX1AAA+T9Z1UAB+UB+D4WNRC7c8BCoLp6xg2NQFbRokWENV9A2UAPzkLs5HA0ArVqepRWw4xYXYK9qIGMAN0A5YSVIykOM4jjGLeZ9WKnI98F0HUKHoltELE5FmDoqiWwZVASVyLjlKpOFJLEFkAFYpxiIA","body":"function div_interval(x, y) {\n    return lower_bound(y) <= 0 && upper_bound(y) >= 0\n        ? error(\"division error (interval spans 0)\")\n        : mul_interval(x, make_interval(1 / upper_bound(y),\n                                        1 / lower_bound(y)));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.11","id":"#ex-2.11","child":[{"body":"\n    In passing, Ben also cryptically comments: \"","tag":"#text"},{"body":"By testing the signs of\n    the endpoints of the intervals, it is possible to break\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mul_interval"},{"body":"\n    into nine cases, only one of which requires more than two\n    multiplications.","tag":"#text"},{"body":"\"  Rewrite this\n    function\n    using Ben's suggestion.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":20,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN65Qq0HzYUifegAcmVPhOnyA3LgC+hUpVr1hNAO78OAIxqkAJhIWLQKtQ0tHVAACzYmb3E5U38rYnJqOlAiXV0Xdy8fJX81dU1tegoDMWjYy3wQUF0+bmoSAHNQCnDQOv4hYTb6OjZQYW4+jQBHIkM2AGdQCZoGPomKWsbcKuYSKl0iYSYkkgAuacXuBqoCGWbCqaZQEiIGV35uihpQa4WlppWwJhJPZtaaOk+DsaHxQABqUBkH6gB6vNIDNh-Z6HD5TAigr6o45QujQ3gkHZ2ayJOzVJYULg8DoiURUXwBVRBQqgABEAG02apIe9jqcZKIHM4+G4PL86XIFJDGXk8qzQNJ5Tyjo1+aJUkDRVl6VKuQBdVnmKwk2zJXSiEgMvLMkL0AB8AF5QAAGI0m3Y3C1WwIFEIAQmqXrdCVNRXCHEWHlcwk4zHYRnEwmk4iIJiTsiI3tUZDoC2qGFATsToAAVLJhOY8jmSHndChC6Bi2WZERK2pq7WAMwNlOl8tt7O5ijVbA9oh9lsD-LBehxzjtQS05gtDgMbiiXQYaR17ed7fYOSSGWyk9qZehVdMcQbrfVFC7-eS4M2D0MLZU3iL0omXyqGUd4diydIUMjFKIYn-IdG3HJ0NVArIykgmthxkLpgKceDxTMJC8xbBs4JFTIsIg61fT0CRhAUAAyKjAxTajaPNVCGMDFsFFyU81AAfkYVh52pL8KIndNe2bTNjxPA5zUTFjpMzUAaM9ZiFMY0Q2L-TjuN49gPxpUpx2bESDIzOQJNlKSKNkiR5MUkg1MolSlPkjjNJ4uddME0Ty2TLoxNMzTVAOOyZMcuSrOUxSmOcsy8jcviPM6ISxOTYy2JitQgss0LrJYuyItovLooC0A4p0hdEq81CfOE-yAsykLbJy7L8tYoqAtK-jPwq3yMxSmr0sCz0GoKprGpaqL2IGkrtM6vSkt6xseuYqb6ocxr6McvK1pG9SXM4jqEtpSrU0W-ritWqyNrG7bWsm4qeJaThIyIaNYz4hMjLTExxPO0B+D4UFRFZECwW2PgGkeFoYQI1kIONGo6kOsQ32EJHRHc8raVvFBDz24r8ZmtG91AABWSUYiAA","body":"function p(n) {\n    return n >= 0;\n}\nfunction n(n) {\n    return ! p(n);\n}\nfunction the_trouble_maker(xl, xu, yl, yu) {\n    const p1 = xl * yl;\n    const p2 = xl * yu;\n    const p3 = xu * yl;\n    const p4 = xu * yu;\n    return make_interval(math_min(p1, p2, p3, p4),\n                  math_max(p1, p2, p3, p4));\n}\nfunction mul_interval(x, y) {  \n    const xl = lower_bound(x);\n    const xu = upper_bound(x);\n    const yl = lower_bound(y);\n    const yu = upper_bound(y);\n    return p(xl) && p(xu) && p(yl) && p(yu)  \n           ? make_interval(xl * yl, xu * yu)\n           : p(xl) && p(xu) && n(yl) && p(yu)  \n           ? make_interval(xu * yl, xu * yu)\n           : p(xl) && p(xu) && n(yl) && n(yu)  \n           ? make_interval(xu * yl, xl * yu)\n           : n(xl) && p(xu) && p(yl) && p(yu)  \n           ? make_interval(xl * yu, xu * yu)\n           : n(xl) && p(xu) && n(yl) && n(yu)  \n           ? make_interval(xu * yl, xl * yl)\n           : n(xl) && n(xu) && p(yl) && p(yu)  \n           ? make_interval(xl * yu, xu * yl)\n           : n(xl) && n(xu) && n(yl) && p(yu)  \n           ? make_interval(xl * yu, xl * yl)\n           : n(xl) && n(xu) && n(yl) && n(yu)  \n           ? make_interval(xu * yu, xl * yl)\n           : n(xl) && p(xu) && n(yl) && p(yu)  \n           ? the_trouble_maker(xl, xu, yl, yu)\n           : error(\"lower larger than upper\");\n} "}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    After debugging her program, Alyssa shows it to a potential user, who\n    complains that her program solves the wrong problem.  He wants a program\n    that can deal with numbers represented as a center value and an additive\n    tolerance; for example, he wants to work with intervals such as\n    ","tag":"#text"},{"body":"$3.5\\pm 0.15$","tag":"LATEX"},{"body":" rather than\n    ","tag":"#text"},{"body":"$[3.35, 3.65]$","tag":"LATEX"},{"body":". Alyssa returns to her desk and\n    fixes this problem by supplying an alternate constructor and alternate\n    selectors:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-AS7ZOZ2DjI2HlcnKi8KMNEyaSd-QLVgwsZWTm5eQREO0ABaUCdpMlAAahm5WPjbJPp6xuM-JV78kPpRRxc+d08SaIUl1PSzzMvshTAUVZtE+xmWtuy9vP7QqJbhkLlcpqATiCsn5nqg3rgyHQAM4URgyLjbITCUAAXkGtS2ow4zVa7Qw0gADGgAKwrXAkn4MdEjfhYlZAA","body":"function make_center_width(c, w) {\n    return make_interval(c - w, c + w);\n}\nfunction center(i) {\n    return (lower_bound(i) + upper_bound(i)) / 2;\n}\nfunction width(i) {\n    return (upper_bound(i) - lower_bound(i)) / 2;\n} "}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Unfortunately, most of Alyssa's users are engineers.  Real engineering\n    situations usually involve measurements with only a small uncertainty,\n    measured as the ratio of the width of the interval to the midpoint of the\n    interval.  Engineers usually specify percentage tolerances on the parameters\n    of devices, as in the resistor specifications given earlier.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.12","id":"#ex-2.12","child":[{"body":"\n    Define a constructor \n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_center_percent"},{"body":"\n    that takes a center and a percentage tolerance and produces the desired\n    interval.  You must also define a selector\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"percent"},{"body":" that produces the percentage tolerance\n    for a given interval.  The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"center"},{"body":" selector is\n    the same as the one shown above.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":21,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-AS7ZOZ2DjI2HlcnKi8KMNEyaSd-QLVgwsZWTm5eQREO0ABaUCdpMlAAahm5WPjbJPp6xuM-JV78kPpRRxc+d08SaIUl1PSzzMvshTAUVZtE+xmWtuy9vP7QqJbhkLlcpqATiCsn5nqg3u8qvQapwtqMOHdUR0GqNpBjsT08mQ6ABnChfVphUAAXlAqP4oAAVKBRHieKAwBgAAyclb7AFIoZ1bFNb7tOl8Lqi3lrD7JVkUX6KPkFQHNCm-MDip6M0BcznwokkUmMGRcbZCYTUwa1cXo-iYgBsaE50i5vPlogYppG-AtKyAA","body":"function make_center_percent(center, percent) {\n    const width = center * (percent / 100);\n    return make_center_width(center, width);\n}\nfunction percent(i) {\n    return (width(i) / center(i)) * 100;\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.13","id":"#ex-2.13","child":[{"body":" \n    Show that under the assumption of small percentage tolerances there is\n    a simple formula for the approximate percentage tolerance of the\n    product of two intervals in terms of the tolerances of the factors.\n    You may simplify the problem by assuming that all numbers are\n    positive.\n    ","tag":"#text"}],"solution":[{"body":"\n      Let us denote the maximal error of an interval with center\n      ","tag":"#text"},{"body":"$i$","tag":"LATEX"},{"body":" by\n      ","tag":"#text"},{"body":"$\\Delta i$","tag":"LATEX"},{"body":"\n      the maximal error of  an interval with center\n      ","tag":"#text"},{"body":"$j$","tag":"LATEX"},{"body":" by\n      ","tag":"#text"},{"body":"$\\Delta j$","tag":"LATEX"},{"body":", and\n      the maximal error of the multiplication result with center\n      ","tag":"#text"},{"body":"$k$","tag":"LATEX"},{"body":" by\n      ","tag":"#text"},{"body":"$\\Delta k$","tag":"LATEX"},{"body":". Then:\n      ","tag":"#text"},{"body":"\\[ k + \\Delta k = (i+\\Delta i) * (j+\\Delta j)\n      =  ij + j \\Delta i + i\\Delta j + \\Delta i \\Delta j \\]","tag":"LATEX"},{"body":"\n      Since ","tag":"#text"},{"body":"$k = i j$","tag":"LATEX"},{"body":"\\[ \\Delta k = j\\Delta i + i \\Delta j + \\Delta i\\Delta j \\] ","tag":"LATEX"},{"body":"\n      Since we assume that\n      ","tag":"#text"},{"body":"$\\Delta i \\ll i$","tag":"LATEX"},{"body":" and\n      ","tag":"#text"},{"body":"$\\Delta j \\ll j$","tag":"LATEX"},{"body":", we can neglect\n      the term\n      ","tag":"#text"},{"body":"$\\Delta i \\Delta j$","tag":"LATEX"},{"body":" and obtain\n      ","tag":"#text"},{"body":"\\[ \\Delta k = j \\Delta i + i \\Delta j \\]","tag":"LATEX"},{"body":"\n      Expressed in tolerances, we obtain:\n      ","tag":"#text"},{"body":"\\[ \\Delta k / k\n      = (j \\Delta i + i \\Delta j) / ij = \\Delta i/i + \\Delta j/j \\] ","tag":"LATEX"},{"body":"\n      Thus, the tolerance of the result of an interval multiplication\n      is (roughly) the sum of the tolerances of its arguments.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    After considerable work, Alyssa P. Hacker delivers her finished\n    system.  Several years later, after she has forgotten all about it, she\n    gets a frenzied call from an irate user,  Lem E. Tweakit.\n    It seems that Lem has\n    noticed that the\n    \n    formula for parallel resistors can be written in two\n    algebraically equivalent ways:\n    ","tag":"#text"},{"body":"\n      \\[\n      \\dfrac{R_{1}R_{2}}{R_{1}+R_{2}}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    and\n    ","tag":"#text"},{"body":"\n      \\[\n      \\dfrac{1}{1/R_{1}+1/R_{2}}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    He has written the following two programs, each of which computes the\n    parallel-resistors formula differently:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":39,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0qSK2AnAG5MANgAoAHgBpQATwCUoAN6hcoNaD5sKRPvQAOTKnwnT5AbhUBfQqUq16wmgHd+HAEY1SAE1FUFy1XVNbV1QAAs2Jh8-M1xrYnJqOlAiPT1XD29ffxV1DS0degpDMRi4-BBQPT5uahIAc1AKCNBa-iFhVvo6NlBhbl7NAEciIzYAZ1BxmgZe8YoahtxK5hIqPSJhJiSSAC4phe56qgIZJsLJplASIgY3fi6KGlAr+cXG5bAmEi8mlpp0nxtjQ+KAANSgMjfUD3F5pfpsX5PA7vSYEEGfFFHSF0KG8Ejbew2RL2KqLChcHjtETZJSBNTBQqgABEAG0WWoIW8jicZKJHC4+O5PD9sgoIfS8nlmaBpDKuYcGrzRKlAcKsn5xRyALrM2LWYl2ZJRLyU3iCGlSWT+SWM0LMdhm6liAUZEU+cRa11CzKi+SSSVSoPB9Sqt1ZT3glJpcN+uRyfX4BJG+gMTZOi1iK3yOl5Mh0eZVDCgAC8fWcsY9CgAVOXBeq47E8wWKFUUKW65WJDXo2rfT5zJL8yRC3oAMwdsM+93d0C170NgcJoctqrYScx6cRntTxeiQd5O2p1icNqZ0TMZocBjcUR6DDSPQoR9jx-YOQBkNfkOXsLXpjiHeD5ti+b7xomho7KAXhUAIGYdCY1q5kEBT2umZ4IVaDqnlS57FmAu79vuH6Bt+ZHkeo+GdlucbgeUkGkgYfAYKIzHSHwKA2oeqH0DBcEYTSabCPBNJsRonGfhR34miJYhiRxdHxLYUFMSgrHAQpyFqMOhY9B22GyaIwEYMu3EhLxsGGT0klSSGMkCWIfFWSQbDsSZNm2Z56hOQ5ojWeJ8bLgaMHjHoWx8tUtSGUxLEGEYojYNIABsH5VIYxgAOzSAAHIFy64CFYVMBF5LRUwHF3ulCXJalcWZTleVmEAA","body":"function par1(r1, r2) {\n    return div_interval(mul_interval(r1, r2),\n                        add_interval(r1, r2));\n}\nfunction par2(r1, r2) {\n    const one = make_interval(1, 1);\n    return div_interval(one,\n                        add_interval(div_interval(one, r1),\n                                     div_interval(one, r2)));\n} "},{"body":"\n    Lem complains that Alyssa's program gives different answers for\n    the two ways of computing. This is a serious complaint.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.14","id":"#ex-2.14","child":[{"body":" \n    Demonstrate that Lem is right. Investigate the behavior of the\n    system on a variety of arithmetic expressions. Make some intervals\n    ","tag":"#text"},{"body":"$A$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$B$","tag":"LATEX"},{"body":",\n    and use them in computing the expressions ","tag":"#text"},{"body":"$A/A$","tag":"LATEX"},{"body":"\n    and ","tag":"#text"},{"body":"$A/B$","tag":"LATEX"},{"body":".  You will get the most insight by\n    using intervals whose width is a small percentage of the center value.\n    Examine the results of the computation in center-percent form (see\n    exercise ","tag":"#text"},{"tag":"REF","body":"2.12","href":"/sicpjs/2.1.4#ex-2.12"},{"body":").\n    ","tag":"#text"}],"solution":[{"body":"\n      The expression ","tag":"#text"},{"body":"$A/A$","tag":"LATEX"},{"body":" is interesting, because if\n      the interval is meant to represent a specific (albeit imprecisely known)\n      value, the result should be exactly 1 (width 0), whereas the interval\n      division will result in an interval with positive width. Multiple\n      occurrences of the same term are not recognized as such in the approaches\n      above and thus they will suffer from this problem.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.15","id":"#ex-2.15","child":[{"body":"\n    Eva Lu Ator, another user, has also noticed the different intervals\n    computed by different but algebraically equivalent expressions. She\n    says that a formula to compute with intervals using Alyssa's system\n    will produce tighter error bounds if it can be written in such a form\n    that no\n    \n\tname\n      \n    that represents an uncertain number is repeated. Thus, she says,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"par2"},{"body":" is a \"","tag":"#text"},{"body":"better","tag":"#text"},{"body":"\" program for\n    parallel resistances than ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"par1"},{"body":".  Is she right?\n    Why?\n    ","tag":"#text"}],"solution":[{"body":"\n      She is right. The so-called ","tag":"#text"},{"tag":"EM","child":[{"body":"dependency problem","tag":"#text"}]},{"body":" in interval\n      arithmetic arises when the same input values (or intermediate terms)\n      appear in a function on intervals. The second formulation is better\n      because each input occurs only once, and therefore the result of a naive\n      interval calculation is optimal.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.16","id":"#ex-2.16","child":[{"body":"\n    Explain, in general, why equivalent algebraic expressions may lead to\n    different answers.  Can you devise an interval-arithmetic package that\n    does not have this shortcoming, or is this task impossible?  (Warning:\n    This problem is very difficult.)\n\n    ","tag":"#text"}],"solution":[{"body":"\n      The dependency problem in interval arithmetic is solved using linear\n      and polynomial approximations, leading to affine arithmetic and\n      Taylor series methods, respectively.\n    ","tag":"#text"}]}]