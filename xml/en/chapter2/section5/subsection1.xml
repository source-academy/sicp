
<SUBSECTION>
  <NAME>
    Generic Arithmetic Operations
  </NAME>

  <LABEL NAME="sec:generic-arithmetic-operators"/>
  <INDEX>generic arithmetic operations<OPEN/></INDEX>
  <TEXT>
    The task of designing generic arithmetic operations is analogous to that of
    designing the generic complex-number operations.  We would like, for
    instance, to have a generic addition
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>add</SCHEMEINLINE> that acts like ordinary primitive addition
    <SCHEMEINLINE>+</SCHEMEINLINE> on ordinary numbers, like
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    on rational numbers, and like
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    on complex numbers.  We can implement <SCHEMEINLINE>add</SCHEMEINLINE>, and
    the other generic arithmetic operations, by<DO_BREAK_PAGE/> following the same strategy we
    used in section<SPACE/><REF NAME="sec:data-directed"/> to implement the
    generic selectors for complex numbers.  We will attach a type tag to each
    kind of number and cause the generic
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to dispatch to an appropriate package according to the data type of its
    arguments.
  </TEXT>
  <TEXT>
    The generic arithmetic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are defined as follows:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>add</DECLARATION> (generic)</INDEX>
      <INDEX><DECLARATION>sub</DECLARATION> (generic)</INDEX>
      <INDEX><DECLARATION>mul</DECLARATION> (generic)</INDEX>
      <INDEX><DECLARATION>div</DECLARATION> (generic)</INDEX>
      <NAME>ops</NAME>
      <REQUIRES>apply_generic</REQUIRES>
      <SCHEME>
(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
      </SCHEME>
      <JAVASCRIPT>
function add(x, y) { return apply_generic("add", list(x, y)); }
<SHORT_SPACE/>
function sub(x, y) { return apply_generic("sub", list(x, y)); }
<SHORT_SPACE/>
function mul(x, y) { return apply_generic("mul", list(x, y)); }
<SHORT_SPACE/>
function div(x, y) { return apply_generic("div", list(x, y)); }
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    We begin
    by installing a package for handling
    <INDEX>number(s)<SUBINDEX><ORDER>generic</ORDER>in generic arithmetic system</SUBINDEX></INDEX>
    <INDEX>ordinary numbers (in generic arithmetic system)</INDEX>
    <EM>ordinary</EM> numbers,
    that is, the primitive numbers of our language.  We
    <SPLITINLINE>
      <SCHEME>
	will
      </SCHEME>
    </SPLITINLINE>
    tag these
    with the 
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>scheme-number</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	string <JAVASCRIPTINLINE>"javascript_number"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The arithmetic operations in this package are the primitive arithmetic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (so there is no need to define extra
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to handle the untagged numbers).  Since these operations each take two
    arguments, they are installed in the table keyed by the list
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>(scheme-number scheme-number)</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>list("javascript_number", "javascript_number")</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>JavaScript-number</SUBINDEX></INDEX>
      <INDEX><USE>javascript_number</USE> package</INDEX>
      <INDEX><DECLARATION>install_javascript_number_package</DECLARATION></INDEX> 
      <NAME>install_javascript_number_package</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <SCHEME>
(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))    
  (put 'add '(scheme-number scheme-number)
    (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
    (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
    (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
    (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
    (lambda (x) (tag x)))
  'done)
      </SCHEME>
      <JAVASCRIPT>
function install_javascript_number_package() {
    function tag(x) {
        return attach_tag("javascript_number", x);
    }
    put("add", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x + y));
    put("sub", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x - y));
    put("mul", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x * y));
    put("div", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x / y));
    put("make", "javascript_number", 
        x => tag(x));
    return "done";
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Users of the
    <SPLITINLINE>
      <SCHEME>Scheme-number package</SCHEME>
      <JAVASCRIPT>JavaScript-number package</JAVASCRIPT>
    </SPLITINLINE>
    will create (tagged) ordinary numbers by means of the
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>actually_install_javascript_number_package</NAME>
      <JAVASCRIPT>
install_javascript_number_package();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <INDEX><DECLARATION>make_javascript_number</DECLARATION></INDEX> 
      <NAME>install_javascript_number_package_usage</NAME>
      <REQUIRES>install_javascript_number_package</REQUIRES>
      <REQUIRES>actually_install_javascript_number_package</REQUIRES>
      <EXAMPLE>install_javascript_number_package_usage_example</EXAMPLE>
      <EXPECTED>[ 'javascript_number', 9 ]</EXPECTED>
      <SCHEME>
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
      </SCHEME>
      <JAVASCRIPT>
function make_javascript_number(n) {
    return get("make", "javascript_number")(n);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>install_javascript_number_package_usage_example</NAME>
      <JAVASCRIPT>
const n1 = make_javascript_number(4);
const n2 = make_javascript_number(5);

add(n1, n2);
      </JAVASCRIPT>
    </SNIPPET>
    
  </TEXT>
  <TEXT>
    Now that the framework of the generic arithmetic system is in place,
    we can readily include new kinds of numbers.  Here is a package that
    performs rational arithmetic.  Notice that, as a benefit of
    additivity, we can use without modification the rational-number code
    from section<SPACE/><REF NAME="sec:rationals"/> as the internal
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in the package:
    <SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>rational-number</SUBINDEX></INDEX>
      <INDEX><USE>rational</USE> package</INDEX>
      <INDEX>rational-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>
      <INDEX><DECLARATION>install_rational_package</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_rational</DECLARATION></INDEX> 
      <NAME>benefit_of_additivity</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>benefit_of_additivity_example</EXAMPLE>
      <EXPECTED>[ 'rational', [ 11, 15 ] ]</EXPECTED>
      <SCHEME>
(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))

  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
    (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
    (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
    (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
    (lambda (x y) (tag (div-rat x y))))

  (put 'make 'rational
    (lambda (n d) (tag (make-rat n d))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))
      </SCHEME>
      <JAVASCRIPT>
function install_rational_package() {
    // internal functions
    function numer(x) { return head(x); }
    function denom(x) { return tail(x); }
    function make_rat(n, d) {
        const g = gcd(n, d);
        return pair(n / g, d / g);
    }
    function add_rat(x, y) {
        return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function sub_rat(x, y) {
        return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function mul_rat(x, y) {
        return make_rat(numer(x) * numer(y),
                        denom(x) * denom(y));
    }
    function div_rat(x, y) {
        return make_rat(numer(x) * denom(y),
                        denom(x) * numer(y));
    }
    // interface to rest of the system
    function tag(x) {
        return attach_tag("rational", x);
    }
    put("add", list("rational", "rational"),
        (x, y) => tag(add_rat(x, y)));
    put("sub", list("rational", "rational"),
        (x, y) => tag(sub_rat(x, y)));
    put("mul", list("rational", "rational"),
        (x, y) => tag(mul_rat(x, y)));
    put("div", list("rational", "rational"),
        (x, y) => tag(div_rat(x, y)));
    put("make", "rational",
        (n, d) => tag(make_rat(n, d)));
    return "done";  
}

function make_rational(n, d) {
    return get("make", "rational")(n, d);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>benefit_of_additivity_example</NAME>
      <JAVASCRIPT>
install_rational_package();

const r1 = make_rational(1, 3);
const r2 = make_rational(2, 5);

add(r1, r2);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    We can install a similar package to handle complex numbers, using the tag
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In<SPACE/>creating the package, we extract from the table the operations
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-mag-ang</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_mag_ang</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that were defined by the rectangular and polar packages.  
    <INDEX>additivity</INDEX>
    Additivity permits us to use, as the internal operations, the same
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:representations-complex-numbers"/>.
    <SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>complex-number</SUBINDEX></INDEX>
      <INDEX><USE>complex</USE> package</INDEX>
      <INDEX>complex-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>
      <INDEX><DECLARATION>install_complex_package</DECLARATION></INDEX> 
      <NAME>install_complex_package</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>generic_selectors</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>install_rectangular_package</REQUIRES>
      <REQUIRES>install_rectangular_package_usage</REQUIRES>
      <REQUIRES>install_polar_package_usage</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <EXAMPLE>actually_install_complex_package</EXAMPLE>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))

  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
    (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
    (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
    (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
    (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
    (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
    (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
      </SCHEME>
      <JAVASCRIPT>
function install_complex_package() {
    // imported functions from rectangular and polar packages
    function make_from_real_imag(x, y) {
        return get("make_from_real_imag", "rectangular")(x, y);
    }
    function make_from_mag_ang(r, a) {
        return get("make_from_mag_ang", "polar")(r, a);
    }
    // internal functions
    function add_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) + real_part(z2),
                                   imag_part(z1) + imag_part(z2));
    }
    function sub_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) - real_part(z2),
                                   imag_part(z1) - imag_part(z2));
    }
    function mul_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) * magnitude(z2),
                                 angle(z1) + angle(z2));
    }
    function div_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) / magnitude(z2),
                                 angle(z1) - angle(z2));
    }
    // interface to rest of the system
    function tag(z) { return attach_tag("complex", z); }
    put("add", list("complex", "complex"), 
        (z1, z2) => tag(add_complex(z1, z2)));
    put("sub", list("complex", "complex"), 
        (z1, z2) => tag(sub_complex(z1, z2)));
    put("mul", list("complex", "complex"), 
        (z1, z2) => tag(mul_complex(z1, z2)));
    put("div", list("complex", "complex"), 
        (z1, z2) => tag(div_complex(z1, z2)));
    put("make_from_real_imag", "complex", 
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "complex", 
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";    
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Programs outside the complex-number package can construct complex
    numbers either from real and imaginary parts or from magnitudes and
    angles.  Notice how the underlying
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    originally defined in the rectangular and polar packages, are exported to
    the complex package, and exported from there to the outside world.
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>actually_install_complex_package</NAME>
      <JAVASCRIPT>
install_complex_package();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <INDEX><DECLARATION>make_complex_from_real_imag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_complex_from_mag_ang</DECLARATION></INDEX> 
      <NAME>install_complex_package_usage</NAME>
      <REQUIRES>install_complex_package</REQUIRES>
      <REQUIRES>actually_install_complex_package</REQUIRES>
      <EXPECTED>[ 'rectangular', [ 8.387912809451864, 5.397127693021015 ] ]</EXPECTED>
      <EXAMPLE>install_complex_package_example</EXAMPLE>
      <SCHEME>
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))

(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
      </SCHEME>
      <JAVASCRIPT>
function make_complex_from_real_imag(x, y){
   return get("make_from_real_imag", "complex")(x, y);
}
function make_complex_from_mag_ang(r, a){
   return get("make_from_mag_ang", "complex")(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>install_complex_package_example</NAME>
      <JAVASCRIPT>
const r = make_complex_from_real_imag(4, 3);
const p = make_complex_from_mag_ang(5, 0.5);

add(r, p);    // results in a complex number in rectangular coordinates
// mul(r, p); // results in a complex number in polar coordinates
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const r = make_complex_from_real_imag(4, 3);
const p = make_complex_from_mag_ang(5, 0.5);
tail(add(r, p));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>
  <TEXT>
    What we have here is a
    <INDEX>type tag<SUBINDEX>two-level</SUBINDEX></INDEX>
    two-level tag system.  A typical complex number,
    such as <LATEXINLINE>$3+4i$</LATEXINLINE> in rectangular form, would be
    represented as shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:complex-number-structure_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:complex-number-structure"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
      The outer tag
    <SPLITINLINE><SCHEME>(<SCHEMEINLINE>complex</SCHEMEINLINE>)</SCHEME>
    <JAVASCRIPT>(<JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    is used to direct the number to the complex package.  Once within the
    complex package, the next tag
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>rectangular</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    is used to direct the number to the rectangular package. In a large and
    complicated system there might be many levels, each interfaced with the
    next by means of generic operations.  As a data object is passed
    <QUOTE>downward,</QUOTE> the outer tag that is used to direct it to the
    appropriate package is stripped off (by applying
    <SCHEMEINLINE>contents</SCHEMEINLINE>) and the next level of tag (if any)
    becomes visible to be used for further dispatching.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE split_scale="0.7" src="img_original/ch2-Z-G-65.svg"></FIGURE>
          <CAPTION>
	    Representation of <LATEXINLINE>$3+4i$</LATEXINLINE> in
	    rectangular form.
	  </CAPTION>
          <LABEL NAME="fig:complex-number-structure_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch2-Z-G-65.svg"></FIGURE>
          <CAPTION>
	    Representation of <LATEXINLINE>$3+4i$</LATEXINLINE> in
	    rectangular form.
	  </CAPTION>
          <LABEL NAME="fig:complex-number-structure"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    In the above packages, we used
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    and the other arithmetic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    exactly as originally written. Once these declarations are internal to
    different installation
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    however, they no longer need names that are distinct from each other:
    we could simply name them <SCHEMEINLINE>add</SCHEMEINLINE>,
    <SCHEMEINLINE>sub</SCHEMEINLINE>, <SCHEMEINLINE>mul</SCHEMEINLINE>, and
    <SCHEMEINLINE>div</SCHEMEINLINE> in both packages.
  </TEXT>
  <EXERCISE> 
    Louis Reasoner tries to evaluate the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    where
    <SCHEMEINLINE>z</SCHEMEINLINE> is the object shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:complex-number-structure_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:complex-number-structure"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    To his surprise, instead of the answer <LATEXINLINE>$5$</LATEXINLINE>
    he gets an error message from
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    saying there is no method for the operation
    <SCHEMEINLINE>magnitude</SCHEMEINLINE> on the types
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(complex)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list("complex")</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    He shows this interaction to Alyssa P. Hacker, who says <QUOTE>The problem
    is that the complex-number selectors were never defined for
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    numbers, just for
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>polar</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"polar"</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rectangular</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    numbers.  All you have to do to make this work is add the following to the
    <SCHEMEINLINE>complex</SCHEMEINLINE> package:</QUOTE>
    <SNIPPET CHAP="4">
      <NAME>use_generic_magnitude</NAME>
      <REQUIRES>install_complex_package_usage</REQUIRES>
      <REQUIRES>actually_install_complex_package</REQUIRES>
      <EXAMPLE>use_generic_magnitude_example</EXAMPLE>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(put 'real-part '(complex) real-part)
(put 'imag-part '(complex) imag-part)
(put 'magnitude '(complex) magnitude)
(put 'angle '(complex) angle)
      </SCHEME>
      <JAVASCRIPT>
put("real_part", list("complex"), real_part);
put("imag_part", list("complex"), imag_part);
put("magnitude", list("complex"), magnitude);
put("angle",     list("complex"), angle);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>use_generic_magnitude_example</NAME>
      <EXAMPLE>use_generic_magnitude_example</EXAMPLE>
      <JAVASCRIPT>
const z = make_complex_from_real_imag(3, 4);

magnitude(z);
      </JAVASCRIPT>
    </SNIPPET>
    Describe in detail why this works.  As an example, trace through all the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    called in evaluating the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    where <SCHEMEINLINE>z</SCHEMEINLINE> is the object shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:complex-number-structure_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:complex-number-structure"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In particular, how many times is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    invoked?  What
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is dispatched to in each case?
    <SOLUTION>
      Putting the above lines to the package will open up
      <SCHEMEINLINE>z</SCHEMEINLINE>, and those lines act as a pass-through.
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      will be invoked twice. We shall trace with substitution model how the
      program evaluates.
      <SNIPPET EVAL="no">
        <JAVASCRIPT>
magnitude(z);
apply_generic("magnitude", list(z));
// In this case:
// type_tags = map(type_tag, list(z))
// Which evaluates to:
// type_tags = list("complex");
// and
// fun = get("magnitude", list("complex"));
// which, due to the addition of
// put("magnitude", list("complex"), magnitude);
// fun = magnitude;
apply(magnitude, map(contents, list(z)));
apply(magnitude, pair("rectangular", pair(3, 4)));
magnitude(pair("rectangular"), pair(3, 4));
apply_generic("magnitude", list(pair("rectangular"), pair(3, 4)));
// type_tags = map(type_tag, list(z)) evaluates to list("rectangular")
// fun = get("magnitude", list("rectangular")) which evaluates to
// z => math_sqrt(square(real_part(z)) + square(imag_part(z)))
// z => math_sqrt(square(head(z)) + square(tail(z)))
apply(fun, map(contents, list(pair("rectangular"), pair(3, 4))))
apply(fun, pair(3, 4))
(z => math_sqrt(square(head(z)) + square(tail(z))))(pair(3, 4));
math_sqrt(square(head(pair(3, 4))) + square(tail(pair(3, 4))))
...
math_sqrt(square(3) + square(4));
...
math_sqrt(9 + 16);
math_sqrt(25);
5
        </JAVASCRIPT>
        <SCHEME>
;;*** Use substitution rule:
(magnitude z)

;;** First apply-generic:
(apply-generic 'magnitude z)
;; where z is the whole object including symbol 'complex.

;;recall
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
            "No method for these types -- APPLY-GENERIC"
            (list op type-tags))))))
;; substitution
(let ((type-tags '(complex))  ... ))
(let ((proc (get op '(complex))) ... ))
(let ((proc magnitude) ... ))
(if proc...  ;; true
(apply magnitude (contents z))
(magnitude z-prime) ;; where z-prime is the contents (the cdr) of the original
                    ;; object, that is, with the 'complex stripped off.

;;** Second apply-generic:
(let ((type-tags '(rectangular)) ... ))
(let ((proc (get op '(rectangular))) ... ))
(let ((proc (get 'magnitude '(rectangular))) ... ))
(let ((proc (lambda (z) (sqrt (+ (square (real-part z))
                                 (square (imag-part z))))))  ...  )))

(if proc... ;; true
(apply (lambda (z) (sqrt (+ (square (real-part z))
                            (square (imag-part z))))) (contents z-prime))
(sqrt (+ (square 3) (square 4)))
5
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_77"/>
  </EXERCISE>

  <EXERCISE> 
    The internal
    <INDEX>JavaScript<SUBINDEX>internal type system</SUBINDEX></INDEX>
    <INDEX>data types<SUBINDEX>in JavaScript</SUBINDEX></INDEX>
    <INDEX><USE>is_number</USE> (primitive function)<SUBINDEX>data types and</SUBINDEX></INDEX>
    <INDEX><USE>is_string</USE> (primitive function)<SUBINDEX>data types and</SUBINDEX></INDEX>
    <INDEX><USE>attach_tag</USE><SUBINDEX>using JavaScript data types</SUBINDEX></INDEX>
    <INDEX><USE>type_tag</USE><SUBINDEX>using JavaScript data types</SUBINDEX></INDEX>
    <INDEX><USE>contents</USE><SUBINDEX>using JavaScript data types</SUBINDEX></INDEX>
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>javascript_number</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    package are essentially nothing more than calls to the primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>+</SCHEMEINLINE>, <SCHEMEINLINE>-</SCHEMEINLINE>, etc.  It
    was not possible to use the primitives of the language directly because our
    type-tag system requires that each data object have a type attached to it.
    In fact, however, all
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    implementations do have a type system, which they use internally. Primitive
    predicates such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>symbol?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_string</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    determine whether data objects have particular types.  Modify the
    definitions of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>type-tag</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>contents</SCHEMEINLINE>, and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>attach-tag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>attach_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:manifest-types"/> so that our generic
    system takes advantage of
    <SPLITINLINE><SCHEME>Scheme<APOS/>s</SCHEME>
    <JAVASCRIPT>JavaScript<APOS/>s</JAVASCRIPT>
    </SPLITINLINE>
    internal type system.  That is to say, the system should work as before
    except that ordinary numbers should be represented simply as
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    numbers rather than as pairs whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>scheme-number</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	string <JAVASCRIPTINLINE>"javascript_number"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:internal-type-system"/>
    <SOLUTION>
      The following modifications will take advantage of the JavaScript number
      implementation:
      <SNIPPET>
        <JAVASCRIPT>
function attach_tag(type_tag, contents) {
  return is_number(contents) 
    ? pair("javascript_number", contents)
    : pair(type_tag, contents);
}
function type_tag(datum) {
  return is_number(datum)
    ? "javascript_number"
    : is_pair(datum)
      ? head(datum)
      : error(datum, "bad tagged datum -- type_tag");
}
function contents(datum) {
  return is_number(datum)
    ? datum
    : is_pair(datum)
      ? tail(datum)
      : error(datum, "bad tagged datum -- contents");
}
        </JAVASCRIPT>
        <SCHEME>
(define (attach-tag type-tag contents) 
  (if (number? contents) 
      contents 
      (cons type-tag contents))) 

(define (type-tag datum) 
(cond ((number? datum) 'scheme-number) 
    ((pair? datum) (car datum)) 
    (else (error "Wrong datum -- TYPE-TAG" datum)))) 

(define (contents datum) 
(cond ((number? datum) datum) 
    ((pair? datum) (cdr datum)) 
    (else (error "Wrong datum -- CONTENTS" datum)))) 
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE> 
    Define a generic equality predicate
    <INDEX><USE>is_equal</USE> (generic predicate)</INDEX>
    <INDEX>equality<SUBINDEX><ORDER>generic</ORDER>in generic arithmetic system</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equ?</SCHEMEINLINE></SCHEME><JAVASCRIPT>
      <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that tests the equality of two numbers, and install it in the generic
    arithmetic package.  This operation should work for ordinary numbers,
    rational numbers, and complex numbers.
    <LABEL NAME="ex:equ?"/>
    <SOLUTION>
      <SNIPPET EVAL="no">
	<JAVASCRIPT>
// provided by GitHub user clean99

function is_equal(x, y) {
    return apply_generic("is_equal", list(x, y));
}

function install_javascript_number_package() {
    // ...

    put("is_equal", list("javascript_number", "javascript_number"),
           (x, y) => x === y);

    // ...
}

function install_rational_package() {
    // ...

    function is_equal(x, y) {
        return numer(x) * denom(y) === numer(y) * denom(x);
    }

    put("is_equal", list("rational", "rational"), is_equal);

    // ...
}

function install_complex_package() {
    // ...

    function is_equal(z1, z2) {
        return real_part(z1) === real_part(z2)
               ? imag_part(z1) === imag_part(z2)
               : false;
    }

    put("is_equal", list("complex", "complex"),
            is_equal);

    //...
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
</EXERCISE>

  <EXERCISE>
    Define a generic predicate
    <INDEX><USE>is_equal_to_zero</USE> (generic)</INDEX>
    <INDEX>zero test (generic)</INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>=zero?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_equal_to_zero</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that tests if its argument is zero, and install it in the generic
    arithmetic package.  This operation should work for ordinary numbers,
    rational numbers, and complex numbers.
    <LABEL NAME="ex:=zero?"/>
    <SOLUTION>
      <SNIPPET EVAL="no">
	<JAVASCRIPT>
// provided by GitHub user clean99

function is_equal_to_zero(x) {
    return apply_generic("is_equal_to_zero", list(x));
}

function install_javascript_number_package() {
    // ...

    put("is_equal_to_zero", "javascript_number",
          x => x === 0);

    // ...
}

function install_rational_package() {
    // ...

    function is_equal_to_zero(x) {
        return numer(x) === 0;
    }

    put("is_equal_to_zero", "rational",
           is_equal_to_zero);

    // ...
}

function install_complex_package() {
    // ...

    function is_equal_to_zero(z) {
        return real_part(z) === 0
               ? imag_part(z) === 0
               : false;
    }

    put("is_equal_to_zero", "complex",
            is_equal_to_zero);

    //...
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <INDEX>generic arithmetic operations<CLOSE/></INDEX>
</SUBSECTION>
