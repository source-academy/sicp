[{"id":"/sicpjs/4","tag":"TITLE","body":"4  Metalinguistic Abstraction"},{"tag":"EPIGRAPH","child":[{},{"body":"…","tag":"#text"},{"body":"It","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s in words that the magic\n      is","tag":"#text"},{"body":"—","tag":"#text"},{"body":"Abracadabra, Open Sesame, and the rest","tag":"#text"},{"body":"—","tag":"#text"},{"body":"but the magic \n      words in one story aren","tag":"#text"},{"body":"'","tag":"#text"},{"body":"t magical in the next.  The real magic is to \n      understand which words work, and when, and for what; the trick is to learn \n      the trick.\n      ","tag":"#text"},{},{},{"body":"…","tag":"#text"},{"body":"And those words are made from the letters of our\n      alphabet: a couple-dozen squiggles we can draw with the pen.  This is\n      the key!  And the treasure, too, if we can only get our hands on it!\n      It","tag":"#text"},{"body":"'","tag":"#text"},{"body":"s as if","tag":"#text"},{"body":"—","tag":"#text"},{"body":"as if the key to the treasure ","tag":"#text"},{"tag":"EM","child":[{"body":"is","tag":"#text"}]},{"body":" \n      the treasure!\n      ","tag":"#text"},{},{}],"author":" John Barth, ","title":"Chimera"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In our study of program design, we have seen that expert programmers\n    control the complexity of their designs with the same general\n    techniques used by designers of all complex systems.  They combine\n    primitive elements to form compound objects, they abstract compound\n    objects to form higher-level building blocks, and they preserve\n    modularity by adopting appropriate large-scale views of system\n    structure.  In illustrating these techniques, we have used \n    JavaScript\n    as a language for describing processes and for constructing computational\n    data objects and processes to model complex phenomena in the real world.\n    However, as we confront increasingly complex problems, we will find that\n    JavaScript,\n    or indeed any fixed programming language, is not sufficient for our needs.\n    We must constantly turn to new languages in order to express our ideas more\n    effectively.  Establishing new languages is a powerful strategy for\n    controlling complexity in engineering design; we can often enhance our\n    ability to deal with a complex problem by adopting a new language that\n    enables us to describe (and hence to think about) the problem in a different\n    way, using primitives, means of combination, and means of abstraction that\n    are particularly well suited to the problem at hand.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4#footnote-1"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Programming is endowed with a multitude of languages.  There are\n    physical languages, such as the\n    \n    machine languages for particular\n    computers.  These languages are concerned with the representation of\n    data and control in terms of individual bits of storage and primitive\n    machine instructions.  The machine-language programmer is concerned\n    with using the given hardware to erect systems and utilities for the\n    efficient implementation of resource-limited computations.  High-level\n    languages, erected on a machine-language substrate, hide concerns\n    about the representation of data as collections of bits and the\n    representation of programs as sequences of primitive instructions.\n    These languages have means of combination and abstraction, such as\n    function declaration,\n    that are appropriate to the larger-scale organization of systems.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"tag":"EM","child":[{"body":"Metalinguistic abstraction","tag":"#text"}]},{"body":"—establishing\n    \n    new languages—plays an important role in all branches of engineering\n    design.  It is particularly important to computer programming, because\n    in programming not only can we formulate new languages but we can also\n    implement these languages by constructing evaluators.  An \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"evaluator","tag":"#text"}]},{"body":" (or ","tag":"#text"},{"tag":"EM","child":[{"body":"interpreter","tag":"#text"}]},{"body":") for a programming language is a\n      function\n      that, when applied to\n      a statement or expression\n      of the language, performs the actions required to evaluate that\n      statement or\n      expression.\n    It is no exaggeration to regard this as the most fundamental idea in\n    programming:\n    ","tag":"#text"},{"tag":"EPIGRAPH","child":[{"body":"\n      The evaluator, which determines the meaning of\n      ","tag":"#text"},{"child":[{"body":"statements and","tag":"#text"}]},{"body":"\n      expressions in a programming language, is just another program.\n    ","tag":"#text"}]},{"body":"\n    To appreciate this point is to change our images of ourselves as\n    programmers.  We come to see ourselves as designers of languages,\n    rather than only users of languages designed by others.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    In fact, we can regard almost any program as the evaluator for some\n    language.  For instance, the polynomial manipulation system of\n    section ","tag":"#text"},{"tag":"REF","body":"2.5.3","href":"/sicpjs/2.5.3"},{"body":" embodies the rules of\n    polynomial arithmetic and implements them in terms of operations on\n    list-structured data.  If we augment this system with\n    functions\n    to read and print polynomial expressions, we have the core of a\n    special-purpose language for dealing with problems in symbolic mathematics.\n    The digital-logic simulator of\n    section ","tag":"#text"},{"tag":"REF","body":"3.3.4","href":"/sicpjs/3.3.4"},{"body":" and the constraint\n    propagator of section ","tag":"#text"},{"tag":"REF","body":"3.3.5","href":"/sicpjs/3.3.5"},{"body":" are legitimate\n    languages in their own right, each with its own primitives, means of\n    combination, and means of abstraction.  Seen from this perspective, the\n    technology for coping with large-scale computer systems merges with the\n    technology for building new computer languages, and \n    \n    computer science itself becomes no more (and no less) than the discipline\n    of constructing appropriate descriptive languages.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    We now embark on a tour of the technology by which languages are\n    established in terms of other languages.  In this chapter we shall use\n    JavaScript \n    as a base, implementing evaluators as \n    JavaScriptfunctions.\n    We will take the first step in understanding how languages are implemented\n    by building\tan evaluator for\n    JavaScript\n    itself.\n    The language implemented by our evaluator will be a subset of\n    JavaScript.\n    Although the evaluator described in this chapter is written for a\n    particular \n    subset of JavaScript,\n    it contains the essential structure of an evaluator for any\n     language\n    designed for writing programs for a sequential machine.  (In fact, most\n    language processors contain, deep within them, a little \n     evaluator.)\n    The evaluator has been simplified for the purposes of illustration and\n    discussion, and some features have been left out that would be\n    important to include in a production-quality \n    JavaScript\n    system. Nevertheless, this simple evaluator is adequate to execute most of\n    the programs in this book.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4#footnote-2"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    An important advantage of making the evaluator accessible as a \n    JavaScript\n    program is that we can implement alternative evaluation rules by describing\n    these as modifications to the evaluator program.  One place where we can use\n    this power to good effect is to gain extra control over the ways in which\n    computational models embody the notion of time, which was so central to the\n    discussion in chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":".  There, we mitigated some of the complexities\n    of state and assignment by using streams to decouple the representation of\n    time in the world from time in the computer.  Our stream programs, however,\n    were sometimes cumbersome, because they were constrained by the\n    applicative-order evaluation of \n    JavaScript.\n    In section ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.2"},{"body":", we'll change\n    the underlying language to provide for a more elegant approach, by modifying\n    the evaluator to provide for ","tag":"#text"},{"tag":"EM","child":[{"body":"normal-order evaluation","tag":"#text"}]},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Section ","tag":"#text"},{"tag":"REF","body":"4.3","href":"/sicpjs/4.3"},{"body":" implements a\n    more ambitious linguistic change, whereby statements and expressions\n    have many values, rather than just a single value.  In this language of\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"nondeterministic computing","tag":"#text"}]},{"body":", it is natural to express processes that\n    generate all possible values for statements and expressions and then search\n    for those values that satisfy certain constraints.  In terms of models of\n    computation and time, this is like having time branch into a set of\n    \"","tag":"#text"},{"body":"possible futures","tag":"#text"},{"body":"\" and then searching for appropriate time\n    lines. With our nondeterministic evaluator, keeping track of multiple values\n    and performing searches are handled automatically by the underlying\n    mechanism of the language.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    In section ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.4"},{"body":" we implement a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"logic-programming","tag":"#text"}]},{"body":" language in which knowledge is expressed in terms\n    of relations, rather than in terms of computations with inputs and outputs.\n    Even though this makes the language drastically different from\n    JavaScript,\n    or indeed from any conventional language, we will see that\n    the logic-programming evaluator shares the essential structure of the\n    JavaScript\n    evaluator.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4#footnote-link-1","child":[{"body":"The same idea\n    is pervasive throughout all of engineering.  For example, electrical\n    engineers use many different languages for describing circuits.  Two\n    of these are the language of electrical ","tag":"#text"},{"tag":"EM","child":[{"body":"networks","tag":"#text"}]},{"body":" and the\n    language of electrical ","tag":"#text"},{"tag":"EM","child":[{"body":"systems","tag":"#text"}]},{"body":".  The network language emphasizes\n    the physical modeling of devices in terms of discrete electrical\n    elements.  The primitive objects of the network language are primitive\n    electrical components such as resistors, capacitors, inductors, and\n    transistors, which are characterized in terms of physical variables\n    called voltage and current.  When describing circuits in the network\n    language, the engineer is concerned with the physical characteristics\n    of a design.  In contrast, the primitive objects of the system\n    language are signal-processing modules such as filters and amplifiers.\n    Only the functional behavior of the modules is relevant, and signals\n    are manipulated without concern for their physical realization as\n    voltages and currents.  The system language is erected on the network\n    language, in the sense that the elements of signal-processing systems\n    are constructed from electrical networks.  Here, however, the concerns\n    are with the large-scale organization of electrical devices to solve a\n    given application problem; the physical feasibility of the parts is\n    assumed.  This layered collection of languages is another example of\n    the stratified design technique illustrated by the picture\n    language of section ","tag":"#text"},{"tag":"REF","body":"2.2.4","href":"/sicpjs/2.2.4"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4#footnote-link-2","child":[{"body":"The most important features that our\n    evaluator leaves out are mechanisms for handling errors and supporting\n    debugging.  For a more extensive discussion of evaluators, see \n    \n    Friedman, Wand, and Haynes\n    1992, which gives an exposition of programming languages that proceeds\n    via a sequence of evaluators written in \n    the Scheme dialect of Lisp.","tag":"#text"}]}]