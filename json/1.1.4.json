[{"id":"/sicpjs/1.1.4","tag":"TITLE","body":"1.1.4  \n    Compound \n    Functions"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We have identified in \n    JavaScript\n    some of the elements that must appear in any powerful programming language:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n        Numbers and arithmetic operations are primitive data and \n        functions.","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Nesting of combinations provides a means of combining operations.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Constant declarations that associate names with values provide a\n        limited means of abstraction.\n      ","tag":"#text"}]}]},{"body":"\n    Now we will learn about\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"function declarations","tag":"#text"}]},{"body":", \n      \n    a much more powerful abstraction technique by which a compound\n    operation can be given a name and then referred to as a unit.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    We begin by examining how to express the idea of\n    \"","tag":"#text"},{"body":"squaring.","tag":"#text"},{"body":"\"\n    We might say,\n    \"","tag":"#text"},{"body":"To square something, take it times itself.","tag":"#text"},{"body":"\"\n    This is expressed in our language as \n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cjFh04pMvRUA","body":"function square(x) {\n    return x * x;\n} "}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We can understand this in the following way:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"function square(    x   ) { return x    *     x; }\n//  ^       ^       ^         ^    ^    ^     ^\n// To    square something,  take   it times itself."},{"body":"\n    We have here a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"compound function","tag":"#text"}]},{"body":",\n      \n    which has been given the name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":". The\n    function\n    represents the operation of multiplying something by itself. The thing to\n    be multiplied is given a local name, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", \n    which plays the same role that a pronoun plays in natural language.\n    \n    Evaluating the\n    \n\tdeclaration\n      \n    creates this compound\n    \n\tfunction\n      \n    and associates it with the name\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.1.4#footnote-1"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n        The simplest form of a function declaration\n      \n    is\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction $name$($parameters$) { return $expression$; }\n      "},{"body":"\n    The\n    ","tag":"#text"},{"tag":"META","body":"name"},{"body":"\n    is a symbol to be associated with the\n    \n\tfunction\n      \n    definition in the environment.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.1.4#footnote-2"},{"body":"\n    The\n    ","tag":"#text"},{"tag":"META","body":"parameters"},{"body":"\n    are the names used within the body of the\n    \n\tfunction\n      \n    to refer to the\n    corresponding arguments of the\n    \n\tfunction.\n      \n\tThe ","tag":"#text"},{"tag":"META","body":"parameters"},{"body":"\n\tare grouped within\n\t\n\tparentheses and separated by commas, as they will be in an application\n\tof the function\tbeing declared.\n\t\n\tIn the simplest form, the \n        ","tag":"#text"},{"tag":"EM","child":[{"body":"body","tag":"#text"}]},{"body":" of a function declaration is a single\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"return statement","tag":"#text"}]},{"body":",","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/1.1.4#footnote-3"},{"body":"\n\twhich consists of the keyword\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"return"},{"body":"\n\tfollowed by the ","tag":"#text"},{"tag":"EM","child":[{"body":"return expression","tag":"#text"}]},{"body":"\n\tthat will yield the value of the function application, when the\n\t\n\tparameters are replaced by the actual arguments to which the function\n\tis applied. Like constant declarations and expression statements,\n\treturn statements\n\t\n\tend with a semicolon.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tHaving declared ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":",\n\twe can now use it in a\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"function application","tag":"#text"}]},{"body":" expression, which we turn into a statement\n\tusing a semicolon:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cjFh04AmFL0VA","body":"square(21); ","output":"441"},{"body":"\n\tFunction applications are—after operator\n\tcombinations—the second kind of combination of\n\texpressions into larger expressions that we encounter.\n\tThe general form of a function application is\n        ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$function$-$expression$($argument$-$expressions$)\n          "},{"body":"\n\twhere the\n\t","tag":"#text"},{"tag":"META","body":"function-expression"},{"body":"\n\tof the application specifies\n\tthe function to be applied to the comma-separated\n        ","tag":"#text"},{"tag":"META","body":"argument-expressions"},{"body":".\n\tTo evaluate a function application, the interpreter follows\n\t\n\ta procedure\n\tquite similar to the procedure for operator combinations described in\n\tsection ","tag":"#text"},{"tag":"REF","body":"1.1.3","href":"/sicpjs/1.1.3"},{"body":".\n\t","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"To evaluate a function application, do the following:\n\t  ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t      Evaluate the subexpressions of the application, namely\n\t      the function expression and the argument expressions.\n\t    ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t      Apply the function that is the value of the function expression\n              to the values of the argument expressions.\n\t    ","tag":"#text"}]}]}]}]},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cjFh04AmUAGpQAVl6KgA","body":"square(2 + 5); ","output":"49"},{"body":"\n\tHere, the argument expression is itself a compound expression,\n\tthe operator combination ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"2 + 5"},{"body":".\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cjFh04a2XAMy9eioA","body":"square(square(3)); ","output":"81"},{"body":"\n      Of course function application expressions can also serve as argument expressions.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    We can also use ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":"\n    as a building block in defining other\n    \n\tfunctions.\n      \n    For example, ","tag":"#text"},{"body":"$x^2 +y^2$","tag":"LATEX"},{"body":" can be expressed as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":false,"body":"square(x) + square(y)"},{"body":"\n    We can easily\n    declare\n    a\n    \n\tfunction\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_of_squares"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/1.1.4#footnote-4"},{"body":"\n    that, given any two numbers as arguments, produces the\n    sum of their squares:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0CAWwD6VPPsYsOdHgBpQAT35DRY9hKn0mbLn1ABqN2a52ymrYdHqGxqYeFgDM1pi8ikA","body":"function sum_of_squares(x, y) {\n    return square(x) + square(y);\n} "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":9,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0CAWwD6VPPsYsOdHgBpQAT35DRY9hKn0mbLn1ABqN2a52ymrYdHqGxqYeFgDM1pi8ikA","body":"sum_of_squares(3, 4); ","output":"25"},{"body":"\n    Now we can use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_of_squares"},{"body":"\n    as a building block in constructing further\n    \n\tfunctions:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":9,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0CAWwD6VPPsYsOdHgBpQAT35DRY9hKn0mbLn1ABqN2a52ymr4xOTUtHiczPbCouKStHR6hsamHhbMPqjWmfIATLxB6pwArIVAA","body":"function f(a) {\n    return sum_of_squares(a + 1, a * 2);\n} "},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":13,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToCwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0CAWwD6VPPsYsOdHgBpQAT35DRY9hKn0mbLn1ABqN2a52ymr4xOTUtHiczPbCouKStHR6hsamHhbMPqjWmfIATLxB6pwArIVAA","body":"f(5); ","output":"136"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n\tIn addition to compound functions, any JavaScript environment provides\n\t\n\tprimitive functions that are built into the interpreter or loaded\n\tfrom libraries.\n\t\n\tBesides the primitive functions provided by the operators,\n\tthe JavaScript environment used in this book includes\n\tadditional primitive functions\n\tsuch as the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_log"},{"body":",\n\twhich computes the natural logarithm of its argument.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/1.1.4#footnote-5"},{"body":"\n\tThese additional primitive functions are used in exactly the same way as\n\t\n\tcompound functions; evaluating the application\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_log(1)"},{"body":" results in the\tnumber 0.\n\tIndeed, one could not tell by looking at the definition of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_of_squares"},{"body":" given above whether\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":" was built into the\n\tinterpreter, loaded from a library, or defined as a compound function.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.1.4#footnote-link-1","child":[{"body":"Observe that there are two\n    different operations being combined here: we are creating the\n    \n\tfunction,\n      \n    and we are giving\n    it the name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":". It is possible, indeed\n    important, to be able to separate these two notions—to create\n    \n\tfunctions\n      \n    without naming them, and to give names to\n    \n\tfunctions\n      \n    that have already been created. We will see how to do this in\n    section ","tag":"#text"},{"tag":"REF","body":"1.3.2","href":"/sicpjs/1.3.2"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.1.4#footnote-link-2","child":[{"body":"Throughout this book, we will\n    \n    describe the general syntax of expressions by using italic\n    symbols—e.g.,\n    ","tag":"#text"},{"tag":"META","body":"name"},{"body":"—to\n      \n    denote the \"","tag":"#text"},{"body":"slots","tag":"#text"},{"body":"\" in the expression to be filled in \n    when such an expression is actually used.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/1.1.4#footnote-link-3","child":[{"body":"More\n        \n        generally, the body of the function can be a sequence of statements.\n\tIn this case, the interpreter evaluates each statement in the sequence\n\tin turn until a return statement determines the value of the\n\tfunction application.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/1.1.4#footnote-link-4","child":[{"body":"The\n\tway multi-part names such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_of_squares"},{"body":" are written affects\n\tthe readability of programs, and programming communities differ\n\ton this.\n\t\n\tAccording to the common JavaScript convention, called ","tag":"#text"},{"tag":"EM","child":[{"body":"camel case","tag":"#text"}]},{"body":",\n\tthe name would be\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sumOfSquares"},{"body":". The convention\n\t\n\tused in this book is called ","tag":"#text"},{"tag":"EM","child":[{"body":"snake case","tag":"#text"}]},{"body":", and was chosen\n\tfor its closer resemblance\n\tto the convention used in the Scheme version of this book, where\n\thyphens play the role of our underscores.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/1.1.4#footnote-link-5","child":[{"body":"Our\n\tJavaScript environment includes all functions and constants of\n\tECMAScript's \n\t","tag":"#text"},{"tag":"LINK","body":"Math object","href":"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-math-object"},{"body":",\n\tunder the names ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_"},{"body":"$\\ldots$","tag":"LATEX"},{"body":".\n\t\n\tFor example, ECMAScript's ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"Math.log"},{"body":"\n        is available as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_log"},{"body":".\n\tThe MIT Press\n\tweb page for this book includes the JavaScript package\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sicp"},{"body":" that provides these and all other\n\tJavaScript functions that are considered primitive in the book.\n      ","tag":"#text"}]}]