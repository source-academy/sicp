<SUBSECTION>
  
   <NAME>增长阶</NAME> 

  <LABEL NAME="sec:orders-of-growth"></LABEL>
   <INDEX>增长阶<OPEN></OPEN></INDEX> 

   <TEXT>
    前面的例子说明了过程在消耗计算资源的速度上可能有显著差异。描述这种差异的一种方便方法是使用
    <INDEX>过程<SUBINDEX>增长阶</SUBINDEX></INDEX>
    <EM>增长阶</EM>的概念，以获得随着输入规模增大过程所需
    <INDEX>过程<SUBINDEX>所需资源</SUBINDEX></INDEX>
    资源的粗略测度。
  </TEXT> 

   <TEXT>
    设 <LATEXINLINE>$n$</LATEXINLINE> 是衡量问题规模的参数，设 <LATEXINLINE>$R(n)$</LATEXINLINE> 是该过程处理规模为 <LATEXINLINE>$n$</LATEXINLINE> 的问题所需的资源量。在之前的例子中，我们将 <LATEXINLINE>$n$</LATEXINLINE> 取为要计算的给定函数的输入值，但也存在其他可能性。例如，如果我们的目标是计算一个数的平方根近似值，我们可以将 <LATEXINLINE>$n$</LATEXINLINE> 定义为所需的准确位数。对于矩阵乘法，我们可能将 <LATEXINLINE>$n$</LATEXINLINE> 定为矩阵的行数。通常情况下，针对某个过程，问题的某些属性是分析其性能所必需考虑的。同样，<LATEXINLINE>$R(n)$</LATEXINLINE> 可能表示所用的内部存储寄存器数、执行的基本机器操作次数，等等。在那些一次只执行固定数量操作的计算机上，所需时间将与执行的基本机器操作次数成正比。
  </TEXT> 

   <TEXT>
    我们称 <LATEXINLINE>$R(n)$</LATEXINLINE> 的增长阶为
    <INDEX><ORDER>0e</ORDER><LATEXINLINE>$\theta(f(n))$</LATEXINLINE> （<LATEXINLINE>$f(n)$</LATEXINLINE> 的theta）</INDEX>
    <INDEX><ORDER>theta</ORDER><LATEXINLINE>$\theta(f(n))$</LATEXINLINE> （<LATEXINLINE>$f(n)$</LATEXINLINE> 的theta）</INDEX>
    <INDEX>阶符号</INDEX>
    <LATEXINLINE>$\Theta(f(n))$</LATEXINLINE>，写作
    <LATEXINLINE>$R(n)=\Theta(f(n))$</LATEXINLINE>（读作
    <QUOTE><LATEXINLINE>$f(n)$</LATEXINLINE> 的theta</QUOTE>），如果存在两个与
    <LATEXINLINE>$n$</LATEXINLINE> 无关的正常数 <LATEXINLINE>$k_1$</LATEXINLINE> 和
    <LATEXINLINE>$k_2$</LATEXINLINE>，使得
    <LATEX>
      \[
      \begin{array}{lllll}
      k_1\,f(n) &amp; \leq &amp; R(n) &amp; \leq &amp; k_2\,f(n)
      \end{array}
      \]
    </LATEX>
    对于任何足够大的 <LATEXINLINE>$n$</LATEXINLINE> 都成立。
    （换言之，当 <LATEXINLINE>$n$</LATEXINLINE> 很大时，值 <LATEXINLINE>$R(n)$</LATEXINLINE> 夹在
    <LATEXINLINE>$k_1f(n)$</LATEXINLINE> 和
    <LATEXINLINE>$k_2f(n)$</LATEXINLINE> 之间。）
  </TEXT> 

   <TEXT>
    <INDEX>增长阶<SUBINDEX>线性递归过程</SUBINDEX></INDEX>
    <INDEX>线性递归过程<SUBINDEX>增长阶</SUBINDEX></INDEX>
    <INDEX>递归过程<SUBINDEX>线性</SUBINDEX></INDEX>
    例如，对于第<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>节中描述的计算阶乘的线性递归过程，步骤数与输入
    <LATEXINLINE>$n$</LATEXINLINE> 成正比增长。因此，该过程所需的步骤数增长为
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>。我们还看到所需的空间增长为
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>。对于
    <INDEX>增长阶<SUBINDEX>线性迭代过程</SUBINDEX></INDEX>
    <INDEX>线性迭代过程<SUBINDEX>增长阶</SUBINDEX></INDEX>
    <INDEX>迭代过程<SUBINDEX>线性</SUBINDEX></INDEX>
    迭代阶乘，步骤数依然是
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>，但空间是
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE><EMDASH></EMDASH>即常量空间。<FOOTNOTE>这些陈述掩盖了大量的简化。例如，如果我们将过程步骤计为<QUOTE>机器操作</QUOTE>，我们假设执行乘法操作所需的机器操作数与被乘数的大小无关，但当数字足够大时，这一假设是不成立的。对于空间估计，也有类似的说明。就像过程的设计和描述一样，过程的分析可以在不同的抽象层次上进行。</FOOTNOTE>
    <INDEX>增长阶<SUBINDEX>树递归过程</SUBINDEX></INDEX>
    <INDEX>树递归过程<SUBINDEX>增长阶</SUBINDEX></INDEX>
    <INDEX>递归过程<SUBINDEX>树</SUBINDEX></INDEX>
    树递归的斐波那契计算需要
    <LATEXINLINE>$\Theta(\phi^{n})$</LATEXINLINE> 步骤和空间
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>，其中
    <LATEXINLINE>$\phi$</LATEXINLINE> 是第<SPACE></SPACE><REF NAME="sec:tree-recursion"></REF>节中描述的黄金比例。
  </TEXT> 

   <TEXT>
    增长阶仅提供了对过程行为的粗略描述。例如，需要
    <LATEXINLINE>$n^2$</LATEXINLINE>
    步骤的过程、需要
    <LATEXINLINE>$1000n^2$</LATEXINLINE>
    步骤的过程以及需要
    <LATEXINLINE>$3n^2+10n+17$</LATEXINLINE>
    步骤的过程，均具有
    <LATEXINLINE>$\Theta(n^2)$</LATEXINLINE> 的增长阶。另一方面，增长阶有助于我们预期随着问题规模变化，过程行为将如何改变。对于一个
    <INDEX>线性增长</INDEX>
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>（线性）过程，规模加倍将大致使资源使用量加倍。对于一个
    <INDEX>指数增长</INDEX>
    的过程，问题规模每增加一次，资源利用将乘以一个常数因子。在第<SPACE></SPACE><REF NAME="sec:procedures-and-processes"></REF>节的剩余部分，我们将研究两个算法，它们的增长阶是
    <INDEX>对数增长</INDEX>
    ，因此将问题规模加倍会使资源需求增加一个常数量。
    <INDEX>增长阶<CLOSE></CLOSE></INDEX>
  </TEXT> 

  <EXERCISE> 
    画出由<SPACE></SPACE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>count-change</SCHEMEINLINE> 过程
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>count_change</JAVASCRIPTINLINE> 函数
      </JAVASCRIPT>
    </SPLITINLINE> 
    生成的过程树，见第<SPACE></SPACE>节
<REF NAME="sec:tree-recursion"></REF> 在换取十一美分时。随着需兑换金额的增加，该过程使用的空间和步骤数量的增长阶数是什么？ <SOLUTION> 
      计算 <JAVASCRIPTINLINE>cc(11, 5)</JAVASCRIPTINLINE> 时生成的三叉递归过程由下面的图片示意，归功于 Toby Thain，假设 <JAVASCRIPTINLINE>first_denomination</JAVASCRIPTINLINE> 中的硬币面值是
       <LATEXINLINE>$\mathbb{C}_{1} = 1$</LATEXINLINE>,
      <LATEXINLINE>$\mathbb{C}_{2} = 5$</LATEXINLINE>,
      <LATEXINLINE>$\mathbb{C}_{3} = 10$</LATEXINLINE>,
      <LATEXINLINE>$\mathbb{C}_{4} = 25$</LATEXINLINE> 和
       <LATEXINLINE>$\mathbb{C}_{5} = 50$</LATEXINLINE>.

      <FIGURE SRC="img_javascript/ex1-14.png">
	<LABEL NAME="ex:1-14"></LABEL>
      </FIGURE> 
      
      让我们考虑计算
      <JAVASCRIPTINLINE>cc(n, k)</JAVASCRIPTINLINE> 的过程，它表示需要找零的金额为 <JAVASCRIPTINLINE>n</JAVASCRIPTINLINE>，
      可用的硬币种类数为 <JAVASCRIPTINLINE>k</JAVASCRIPTINLINE>。假设硬币面值是常数，与
      <JAVASCRIPTINLINE>n</JAVASCRIPTINLINE> 和
      <JAVASCRIPTINLINE>k</JAVASCRIPTINLINE> 无关。
      <P></P>
      该树-递归过程所需的空间是—正如第<SPACE></SPACE>节所讨论的
      <REF NAME="sec:tree-recursion"></REF> <EMDASH></EMDASH>与树的最大深度成正比。在从父节点到子节点的每一步中，<JAVASCRIPTINLINE>n</JAVASCRIPTINLINE> 要么严格减少（减少一个常数硬币面值），要么 <JAVASCRIPTINLINE>k</JAVASCRIPTINLINE> 减少（减少1），叶子节点的金额最多为0或硬币种类数为0。因此，每条路径的长度为 <LATEXINLINE>$\Theta(n + k)$</LATEXINLINE> ，这也是 <JAVASCRIPTINLINE>cc(n, k)</JAVASCRIPTINLINE> 所需空间增长的阶 <!--    http://www.ysagade.nl/2015/04/12/sicp-change-growth/    --> 
      让我们推导一个函数  <LATEXINLINE>$T(n, k)$</LATEXINLINE> 使得
      计算
      <JAVASCRIPTINLINE>cc(n, k)</JAVASCRIPTINLINE> 所需的时间
      的增长阶为
       <LATEXINLINE>$\Theta(T(n, k))$</LATEXINLINE> 以下论证来自 Yati Sagade，包括插图
      (<CITATION>Sagade 2015</CITATION>)。
      让我们从更改某个数量的调用树开始
       <LATEXINLINE>$n$</LATEXINLINE> 只有一种硬币，即，
      <JAVASCRIPTINLINE>cc(n, 1)</JAVASCRIPTINLINE> 的调用树。
       <FIGURE SRC="img_javascript/cc_1.png">
	<LABEL>cc_1</LABEL>
      </FIGURE>
      
      我们这里只允许使用一种硬币，其面值为
       <LATEXINLINE>$\mathbb{C}_{1} = 1$</LATEXINLINE>红色节点是产生0的终端节点，绿色节点是产生1的终端节点（对应于<JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>声明中的第一个条件）。每个非终端节点生成对<JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>的两个调用，一个（在左侧）金额相同，但硬币种类更少，另一个（在右侧）金额减少1且硬币种类相同。
<P></P>
除根节点外，每一层恰好有2个节点，且有<LATEXINLINE>$n$</LATEXINLINE>此类层级。这意味着，由单个<JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>调用
      <JAVASCRIPTINLINE>cc(n, 1)</JAVASCRIPTINLINE>（包括原始调用）生成的
      <JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>调用数量为：
       <LATEX>
	\[
	T(n,1) = 2n + 1 = \Theta(n)
	\]
      </LATEX>接下来，我们将查看
      <JAVASCRIPTINLINE>cc(n, 2)</JAVASCRIPTINLINE> 的调用树
      以计算<LATEXINLINE>$T(n,2)$</LATEXINLINE>：

       <FIGURE SRC="img_javascript/cc_2.png">
	<LABEL NAME="cc_2"></LABEL>
      </FIGURE> 

      这里，我们允许使用两种面额的硬币：
       <LATEXINLINE>$\mathbb{C}_{2} = 5$</LATEXINLINE> 
      和 
       <LATEXINLINE>$\mathbb{C}_{1} = 1$</LATEXINLINE>.
       <P></P>
      每个黑色节点生成一个 <JAVASCRIPTINLINE>cc(m, 1)</JAVASCRIPTINLINE>
      子树（蓝色），我们已经分析过了，还有一个
      <JAVASCRIPTINLINE>cc(m - 5, 2)</JAVASCRIPTINLINE> 子树。节点
      以红色和绿色表示的是终端节点，但如果金额小于零则结果为0，
      如果金额正好为零则结果为1。Sagade 将此最终金额表示为 <LATEXINLINE>$\epsilon$</LATEXINLINE> ，可以是 <LATEXINLINE>$\le0$</LATEXINLINE>.
       <P></P>
      除去根节点和该树中包含红绿终端节点的最后一层，将恰好有
       <LATEXINLINE>$\big\lfloor {\frac {n} {5}} \big\rfloor$</LATEXINLINE> 
      层级。现在每一层级都包含一个对
      <JAVASCRIPTINLINE>cc(m, 1)</JAVASCRIPTINLINE>（蓝色节点）的调用，每个调用反过来都是 
      <LATEXINLINE>$\Theta(n)$</LATEXINLINE>  及时。因此，每个
      这些层级都包含 <LATEXINLINE>$T(n,1) + 1$</LATEXINLINE>调用到
      <JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>。因此，对于
      <JAVASCRIPTINLINE>cc(n, 2)</JAVASCRIPTINLINE> 的调用树中
      节点的总数（包括终端节点和根节点）为：
       <LATEX>
	\[
	T(n,2) = \big\lfloor {\frac {n} {5} } \big\rfloor ( T(n,1) + 1) + 2 = \big\lfloor {\frac {n} {5} } \big\rfloor ( 2n + 2 ) + 2 = \Theta(n^2)
	\]
      </LATEX> 
      接下来，让我们看一下
      <JAVASCRIPTINLINE>cc(n, 3)</JAVASCRIPTINLINE> 的调用树，即我们现在可以使用
      三种面值的硬币，新增加的是
       <LATEXINLINE>$\mathbb{C}_{3} = 10$</LATEXINLINE> :

       <FIGURE SRC="img_javascript/cc_3.png">
	<LABEL NAME="cc_3"></LABEL>
      </FIGURE> 

      在这里，我们也看到，类似于前面的情况，调用<JAVASCRIPTINLINE>cc</JAVASCRIPTINLINE>的总次数将是
       <LATEX>
	\[
	T(n,3) = \big\lfloor {\frac {n} {10} } \big\rfloor ( T(n,2) + 1) + 2 = \big\lfloor {\frac {n} {10} } \big\rfloor \times \Theta(n^2) + 2 = \Theta(n^3)
	\]
      </LATEX> 
      我们可以在这里看到一个模式。对于某些 <LATEXINLINE>$k$</LATEXINLINE>,
      <LATEXINLINE>$k \gt 1$</LATEXINLINE>，我们有，<LATEX>
	\[
	T(n,k) = \big\lfloor {\frac {n} { \mathbb{C}_{k} } } \big\rfloor ( T(n, k-1) + 1) + 2
	\]
      </LATEX>这里，<LATEXINLINE>$\mathbb{C}_{k}$</LATEXINLINE>是<LATEXINLINE>$k^{th}$</LATEXINLINE>币种。我们可以进一步扩展：<LATEX>
	\[
	T(n,k)
	= \big\lfloor {\frac {n} { \mathbb{C}_{k} } } \big\rfloor ( T(n, k-1) + 1 ) + 2
	= \big\lfloor {\frac {n} { \mathbb{C}_{k} } } \big\rfloor
	( \big\lfloor {\frac {n} { \mathbb{C}_{k-1} }  } \big\rfloor
	(... \big\lfloor \frac {n} { \mathbb{C}_{2} } \big\rfloor (2n+1) ...)
	) + 2
	= \Theta(n^k)
	\]
      </LATEX>请注意，如果我们假设币种面额是常数且不依赖于<JAVASCRIPTINLINE>n</JAVASCRIPTINLINE>和<JAVASCRIPTINLINE>k</JAVASCRIPTINLINE>，那么这些币种面额的实际值不会影响该过程的增长阶。</SOLUTION>
    <LABEL NAME="ex:1_14"></LABEL>
  </EXERCISE>

   <EXERCISE>
    <INDEX>小角度正弦函数<SUBINDEX>近似计算</SUBINDEX></INDEX>
    角度的正弦值（以弧度为单位）可以利用近似式
    <LATEXINLINE>$\sin x\approx x$</LATEXINLINE>
    计算，条件是当 <LATEXINLINE>$x$</LATEXINLINE> 足够小时，同时利用三角恒等式
    <LATEX>
      \[
      \begin{array}{lll}
      \sin x &amp;=&amp; 3\sin {\dfrac{x}{3}}-4\sin^3{\dfrac{x}{3}}
      \end{array}
      \]
    </LATEX>
    以减小 <LATEXINLINE>$\sin$</LATEXINLINE> 的自变量值。
    （本练习中，若角度的绝对值不大于0.1弧度，则认为该角度为<QUOTE>足够小</QUOTE>。）这些思想体现在以下
    <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="44">
      <INDEX><DECLARATION>立方</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>正弦函数定义</NAME>
      <EXAMPLE>正弦函数示例</EXAMPLE>
      <REQUIRES>绝对值定义</REQUIRES>
      <SCHEME>
(define (cube x) (* x x x))

(define (p x)
  (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (&gt; (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))
      </SCHEME>
      <JAVASCRIPT>
function cube(x) {
    return x * x * x;
}
function p(x) {
    return 3 * x - 4 * cube(x);
}
function sine(angle) {
    return ! (abs(angle) &gt; 0.1)
           ? angle
           : p(sine(angle / 3));
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <EXPECTED>0.9999996062176211</EXPECTED>
      <NAME>正弦函数示例</NAME>
      <REQUIRES>正弦函数定义</REQUIRES>
      <SCHEME>
(define pi 3.14159)
(sine (/ pi 2))
      </SCHEME>
      <JAVASCRIPT>
sine(math_PI / 2);
      </JAVASCRIPT>
    </SNIPPET>

    <OL>
      <LI>在计算
      <SPLITINLINE>
	<SCHEME>过程</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      <SCHEMEINLINE>p</SCHEMEINLINE> 
      时，当计算
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(sine 12.15)</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>sine(12.15)</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      需要调用多少次？
      </LI>
      <LI>
        使用该
	<SCHEMEINLINE>sine</SCHEMEINLINE>
        <SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>
	计算
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(sine a)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>sine(a)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	时，生成的过程在空间和步骤数上的增长阶（作为<LATEXINLINE>$a$</LATEXINLINE>的函数）是多少？
      </LI>
    </OL>
    <SOLUTION>
      <TEXT>
	<OL>
	  <LI>当角度值大于0.1时，函数<JAVASCRIPTINLINE>p</JAVASCRIPTINLINE>会递归调用自身。<JAVASCRIPTINLINE>p</JAVASCRIPTINLINE>共调用5次，调用参数分别为12.15、4.05、1.35、0.45、0.15和0.05。
	  </LI>
	  <LI>
	    函数<JAVASCRIPTINLINE>sine</JAVASCRIPTINLINE>生成一个递归过程。在每次递归调用中，<JAVASCRIPTINLINE>angle</JAVASCRIPTINLINE>都会除以3，直到其绝对值小于0.1。
	    因此，步骤数和所需空间的增长阶为 $O(\log a)$。注意对增长阶而言，底数的不同无关紧要，因为不同底数的对数仅相差常数因子。
	  </LI>
	</OL>
      </TEXT>
    </SOLUTION>
    <LABEL NAME="ex:1_15"></LABEL>
  </EXERCISE> 

</SUBSECTION>
