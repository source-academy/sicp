<SUBSECTION>
  <NAME>
    条件表达式和谓词
  </NAME>
  <LABEL NAME="sec:conditionals"></LABEL>

  <TEXT>
    The expressive power of the class of
    <SPLITINLINE>
      <SCHEME>
	过程
      </SCHEME>
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLIT>
      <SCHEME>
        For instance, we cannot define a procedure that computes the 
        <INDEX>绝对值</INDEX><LATEX>
      \[\begin{array}{lll}
          |x| &amp; = &amp; \left\{ \begin{array}{rl}
          x   &amp; \mbox{if $x&gt;0$} \\
          0   &amp; \mbox{if $x=0$} \\
          -x  &amp; \mbox{if $x&lt;0$}
          \end{array}
          \right.
      \end{array}\]
        </LATEX>
        This construct is called a
        <INDEX>案例分析<SUBINDEX>通用</SUBINDEX></INDEX><EM>案例分析</EM><INDEX><DECLARATION>条件</DECLARATION></INDEX><INDEX><DECLARATION>特殊形式（那些标注为 <EM>ns</EM> 的不在 IEEE Scheme 标准之内）</DECLARATION><SUBINDEX><ORDER>条件</ORDER><SCHEMEINLINE>条件</SCHEMEINLINE></SUBINDEX></INDEX><INDEX>条件表达式<SUBINDEX><ORDER>条件</ORDER><SCHEMEINLINE>条件</SCHEMEINLINE></SUBINDEX></INDEX><SCHEMEINLINE>cond</SCHEMEINLINE> (which stands for
        <QUOTE>条件</QUOTE><SNIPPET>
          <INDEX><DECLARATION>abs</DECLARATION></INDEX> 
          <NAME>abs_definition</NAME>
          <EXAMPLE>abs_example</EXAMPLE>
          <SCHEME>
(define (abs x)
  (cond ((&gt; x 0) x)
        ((= x 0) 0)
        ((&lt; x 0) (- x))))
          </SCHEME>
        </SNIPPET>
        <SNIPPET EVAL="no">
          <NAME>abs_example</NAME>
          <SCHEME>
(abs (- 5))
          </SCHEME>
        </SNIPPET>
        The general form of a conditional expression is
        <SNIPPET EVAL="no" LATEX="yes">
          <SCHEME>
(cond ($\langle p_1 \rangle $ $\langle e_1 \rangle$)
      ($\langle p_2 \rangle $ $\langle e_2 \rangle$)
      $\vdots$
      ($\langle p_n \rangle $ $\langle e_n \rangle$))
          </SCHEME>
        </SNIPPET>
        consisting of the symbol <SCHEMEINLINE>cond</SCHEMEINLINE> followed by
        <INDEX>括号<SUBINDEX><ORDER>限定条件</ORDER>限定<SCHEMEINLINE>条件</SCHEMEINLINE>子句</SUBINDEX></INDEX><SCHEMEINLINE>(</SCHEMEINLINE><LATEXINLINE>$\langle p\ e \rangle$</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>
        called 
        <INDEX>子句，<SCHEMEINLINE>条件</SCHEMEINLINE>的</INDEX><INDEX><DECLARATION>条件</DECLARATION><SUBINDEX>子句</SUBINDEX></INDEX><EM>子句</EM><INDEX>谓词<SUBINDEX><ORDER>条件</ORDER><SCHEMEINLINE>条件</SCHEMEINLINE>的子句</SUBINDEX></INDEX><INDEX>条件表达式<SUBINDEX>谓词，结果，备选</SUBINDEX></INDEX><EM>谓词</EM><EMDASH></EMDASH><FOOTNOTE>
        <QUOTE>解释为
        <INDEX>真</INDEX>
	<INDEX>假</INDEX>
        <INDEX><DECLARATION>\#t</DECLARATION></INDEX>
	<INDEX><DECLARATION>真</DECLARATION></INDEX>
        <INDEX><DECLARATION>\#f</DECLARATION></INDEX>
	<INDEX><DECLARATION>假</DECLARATION></INDEX> 
	真或假</QUOTE>
        意思是这样的：在 Scheme 中，有两个特殊的值，由常量 <SCHEMEINLINE>#t</SCHEMEINLINE> 和 <SCHEMEINLINE>#f</SCHEMEINLINE> 表示。
        当解释器检查一个谓词的值时，它将 <SCHEMEINLINE>#f</SCHEMEINLINE> 解释为假。任何其他值
        被视为真。（因此，提供 <SCHEMEINLINE>#t</SCHEMEINLINE>
	在逻辑上是不必要的，但很方便。）在本书中，我们将使用名称 <SCHEMEINLINE>true</SCHEMEINLINE> 和
	<SCHEMEINLINE>false</SCHEMEINLINE>，
        分别与值 <SCHEMEINLINE>#t</SCHEMEINLINE> 和
        <SCHEMEINLINE>#f</SCHEMEINLINE> 关联。</FOOTNOTE></SCHEME>
      <JAVASCRIPT><COMMENT>
	  我们从条件表达式开始，因为它们更适合替代模型。注意，第 1.1.1 至 1.1.7 节中的所有函数都以单一的返回语句为主体，这强调了条件表达式的作用。条件语句将在 1.3.2 节介绍。
	</COMMENT><INDEX>绝对值</INDEX><LATEX>
      \[\begin{array}{lll}
          |x| &amp; = &amp; \left\{ \begin{array}{rl}
          x   &amp; \mbox{if $x \geq 0$} \\
          -x  &amp; \mbox{otherwise}
          \end{array}
          \right.
      \end{array}\]
        </LATEX><COMMENT>
	  我们简化了示例，以便可以只使用一个条件表达式。
	</COMMENT><INDEX>案例分析</INDEX><EM>案例分析</EM><EM>条件表达式</EM><SNIPPET>
	  <INDEX><DECLARATION>abs</DECLARATION></INDEX>
          <NAME>abs_definition</NAME>
          <EXAMPLE>abs_example</EXAMPLE>
          <JAVASCRIPT>
function abs(x) {
    return x &gt;= 0 ? x : - x;
}
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET HIDE="yes">
          <NAME>abs_example</NAME>
	  <REQUIRES>abs_definition</REQUIRES>
	  <EXPECTED>5</EXPECTED>
          <JAVASCRIPT>
abs(-5);
          </JAVASCRIPT>
        </SNIPPET>
	which could be expressed in English as <QUOTE>如果<LATEXINLINE>$x$</LATEXINLINE>大于或等于零，则返回<SPACE></SPACE><LATEXINLINE>$x$</LATEXINLINE>；否则返回<LATEXINLINE>$- x$</LATEXINLINE>。</QUOTE><SNIPPET EVAL="no" LATEX="yes">
          <JAVASCRIPT>
<META>predicate</META> ? <META>consequent-expression</META> : <META>alternative-expression</META>
          </JAVASCRIPT>
        </SNIPPET>
        Conditional
	<INDEX>条件表达式</INDEX><INDEX>语法形式<SUBINDEX>条件表达式</SUBINDEX></INDEX><INDEX><JAVASCRIPTINLINE>?</JAVASCRIPTINLINE><SPACE></SPACE><JAVASCRIPTINLINE>:</JAVASCRIPTINLINE><ORDER>;3</ORDER></INDEX><INDEX>谓词<SUBINDEX><ORDER>条件</ORDER>条件表达式的</SUBINDEX></INDEX><INDEX><ORDER>true</ORDER><USE>true</USE>（关键字）</INDEX><INDEX><ORDER>false</ORDER><USE>false</USE>（关键字）</INDEX><INDEX>关键字<SUBINDEX><ORDER>true</ORDER><USE>true</USE></SUBINDEX></INDEX><INDEX>关键字<SUBINDEX><ORDER>false</ORDER><USE>false</USE></SUBINDEX></INDEX><INDEX>表达式<SUBINDEX>原始布尔型</SUBINDEX></INDEX><INDEX>布尔值（true, false）</INDEX><META>谓词</META><EMDASH></EMDASH><EM>true</EM><EM>false</EM><EM>布尔</EM><JAVASCRIPTINLINE>true</JAVASCRIPTINLINE><JAVASCRIPTINLINE>false</JAVASCRIPTINLINE><META>谓词</META><META>结果表达式</META><META>备选表达式</META></JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        条件表达式是
        <INDEX><DECLARATION>条件</DECLARATION><SUBINDEX>的计算</SUBINDEX></INDEX>
        <INDEX>计算<SUBINDEX><ORDER>条件</ORDER>的<SCHEMEINLINE>条件</SCHEMEINLINE></SUBINDEX></INDEX>
	按如下方式计算。谓词
        <LATEXINLINE>$\langle p_1 \rangle$</LATEXINLINE> 首先被计算。
	如果其值为假，则
        <LATEXINLINE>$\langle p_2 \rangle$</LATEXINLINE> 被计算。
        如果 <LATEXINLINE>$\langle p_2 \rangle$</LATEXINLINE> 的
        值也为假，则
        <LATEXINLINE>$\langle p_3 \rangle$</LATEXINLINE> 被计算。
        这个过程继续，直到找到一个值为真的谓词，在这种情况下，解释器会返回
        对应的
        <INDEX>结果<SUBINDEX><ORDER>条件</ORDER>的<SCHEMEINLINE>条件</SCHEMEINLINE>子句</SUBINDEX></INDEX>
        <EM>结果表达式</EM>
	<LATEXINLINE>$\langle e \rangle$</LATEXINLINE> 作为该子句的值作为条件表达式的值。如果所有的
        <LATEXINLINE>$\langle p \rangle$</LATEXINLINE> 都不为真，则 <SCHEMEINLINE>条件</SCHEMEINLINE> 的值是未定义的。
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        要
	<INDEX>计算<SUBINDEX>条件表达式的</SUBINDEX></INDEX>
	<INDEX>条件表达式<SUBINDEX>的计算</SUBINDEX></INDEX>
	计算一个条件表达式，
	解释器首先计算该表达式的
        <META>谓词</META>。
        如果该<EM>谓词</EM>的值为真，解释器会计算
        <INDEX>结果<SUBINDEX><ORDER>条件表达式</ORDER>的条件表达式</SUBINDEX></INDEX>
        <META>结果表达式</META>并以其值作为条件的值返回。
        如果<META>谓词</META>
	的值为假，则会计算
        <INDEX>备选<SUBINDEX><ORDER>条件表达式</ORDER>的条件表达式</SUBINDEX></INDEX>
        <META>备选表达式</META>并以其值作为
	条件的值返回。<FOOTNOTE>
	<INDEX>条件表达式<SUBINDEX>非布尔值作为谓词</SUBINDEX></INDEX>
	条件语句
	<LABEL NAME="foot:any-value-as-predicate"></LABEL>
	在完整的 JavaScript 中接受任意值，不仅是布尔型，作为
	<META>谓词</META>表达式的计算结果（详见脚注<SPACE></SPACE><REF NAME="foot:truthy"></REF>
	在第<SPACE></SPACE><REF NAME="sec:eval-data-structures"></REF>节）。本书中的程序
	只使用布尔值作为条件语句的谓词。
      </FOOTNOTE>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <SPLIT><SCHEME>
      <TEXT>
        术语
        <INDEX>谓词</INDEX>
	<EM>谓词</EM>用于返回真或假的过程，以及评估为真或假的表达式。
        绝对值过程 <SCHEMEINLINE>abs</SCHEMEINLINE> 使用
        <INDEX><USE>&gt;</USE>（原始数值比较谓词）</INDEX>   
        <INDEX><USE>&lt;</USE>（原始数值比较谓词）</INDEX>   
        <INDEX><USE>=</USE>（原始数值相等谓词）</INDEX>   
        <INDEX><USE>原始过程（那些标注为 <EM>ns</EM> 的不在 IEEE Scheme 标准之内）</USE><SUBINDEX><ORDER>&gt;</ORDER><SCHEMEINLINE>&gt;</SCHEMEINLINE></SUBINDEX></INDEX>
        <INDEX><USE>原始过程（那些标注为 <EM>ns</EM> 的不在 IEEE Scheme 标准之内）</USE><SUBINDEX><ORDER>&lt;</ORDER><SCHEMEINLINE>&lt;</SCHEMEINLINE></SUBINDEX></INDEX>
        <INDEX><USE>原始过程（那些标注为 <EM>ns</EM> 的不在 IEEE Scheme 标准之内）</USE><SUBINDEX><ORDER>=</ORDER><SCHEMEINLINE>=</SCHEMEINLINE></SUBINDEX></INDEX>
        <INDEX>数值<SUBINDEX>比较</SUBINDEX></INDEX>
        <INDEX>数值<SUBINDEX>相等</SUBINDEX></INDEX>
        <INDEX>相等<SUBINDEX><ORDER>数值</ORDER>数值</SUBINDEX></INDEX>
        原始谓词 <SCHEMEINLINE>&gt;</SCHEMEINLINE>、
        <SCHEMEINLINE>&lt;</SCHEMEINLINE> 和
        <SCHEMEINLINE>=</SCHEMEINLINE>。<FOOTNOTE>
	<SCHEMEINLINE>Abs</SCHEMEINLINE> 还使用
        <INDEX><USE>-</USE>（原始减法过程）<SUBINDEX>作为取负</SUBINDEX></INDEX>
        <INDEX><USE>原始过程（那些标注为 <EM>ns</EM> 的不在 IEEE Scheme 标准之内）</USE><SUBINDEX><ORDER>-</ORDER><SCHEMEINLINE>-</SCHEMEINLINE></SUBINDEX></INDEX>
        操作符<QUOTE>减号</QUOTE><SCHEMEINLINE>-</SCHEMEINLINE>，
        当与单一操作数一起使用时，如<SCHEMEINLINE>(- x)</SCHEMEINLINE>，
        表示取反。</FOOTNOTE> 这些以两个数作为参数，
	分别测试第一个数是否大于、小于或等于第二个数，并返回相应的真假值。
      </TEXT>
    </SCHEME><JAVASCRIPT>
      <TEXT>
        术语
        <INDEX>谓词</INDEX>
	<EM>谓词</EM>用于返回真或假的运算符和函数，以及评估为真或假的表达式。绝对值函数
	<JAVASCRIPTINLINE>abs</JAVASCRIPTINLINE> 使用
	<INDEX><USE>&gt;=</USE>（数值比较运算符）</INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>&gt;=</USE>（数值比较）</SUBINDEX><FRAGILE></FRAGILE></INDEX>
        <INDEX>数值<SUBINDEX>比较</SUBINDEX></INDEX>
        <INDEX>数值<SUBINDEX>相等</SUBINDEX></INDEX>
        原始谓词 <JAVASCRIPTINLINE>&gt;=</JAVASCRIPTINLINE>，
	一个比较运算符，需要两个数作为参数并测试第一个数是否大于或等于第二个数，并返回相应的真假值。
      </TEXT>
    </JAVASCRIPT></SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        另一种编写绝对值过程的方法是
        <SNIPPET>
          <INDEX><DECLARATION>abs</DECLARATION></INDEX> 
          <EXAMPLE>abs_example</EXAMPLE>
          <SCHEME>
(define (abs x)
  (cond ((&lt; x 0) (- x))
    (else x)))
          </SCHEME>
        </SNIPPET>
        英文表述为 
        <QUOTE>如果 <LATEXINLINE>$x$</LATEXINLINE> 小于零
        返回 <LATEXINLINE>$- x$</LATEXINLINE>；否则返回
        <LATEXINLINE>$x$</LATEXINLINE>。</QUOTE>
        <INDEX><DECLARATION>else</DECLARATION>（<SCHEMEINLINE>条件</SCHEMEINLINE>中的特殊符号）</INDEX>
        <SCHEMEINLINE>Else</SCHEMEINLINE> 是一个特殊符号，可以用在
	<LATEXINLINE>$\langle p \rangle$</LATEXINLINE> 在
	<SCHEMEINLINE>条件</SCHEMEINLINE>的最终子句中。
        这会使 <SCHEMEINLINE>条件</SCHEMEINLINE> 返回其值
        当所有前面的子句都被跳过时的对应
	<LATEXINLINE>$\langle e \rangle$</LATEXINLINE> 的值。
	事实上，任何总是评估为真值的表达式都可以用作这里的
	<LATEXINLINE>$\langle p \rangle$</LATEXINLINE>。
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
    </JAVASCRIPT>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        Here is yet another way to write the absolute-value procedure:
        <SNIPPET>
          <INDEX><DECLARATION>abs</DECLARATION></INDEX> 
          <EXAMPLE>abs_example</EXAMPLE>
          <SCHEME>
(define (abs x)
  (if (&lt; x 0)
    (- x)
    x))
          </SCHEME>
        </SNIPPET><INDEX>条件表达式<SUBINDEX><ORDER>if</ORDER><SCHEMEINLINE>if</SCHEMEINLINE></SUBINDEX></INDEX><INDEX><DECLARATION>if</DECLARATION></INDEX><INDEX><DECLARATION>特殊形式（那些标注为<EM>ns</EM>的不在 IEEE Scheme 标准之内）</DECLARATION><SUBINDEX><ORDER>if</ORDER><SCHEMEINLINE>if</SCHEMEINLINE></SUBINDEX></INDEX><SCHEMEINLINE>if</SCHEMEINLINE>, a restricted 
        type of conditional that can be used when there are precisely 
        <INDEX>案例分析<SUBINDEX><ORDER>两种</ORDER>两种情况(<SCHEMEINLINE>if</SCHEMEINLINE>)</SUBINDEX></INDEX><SCHEMEINLINE>if</SCHEMEINLINE>
	expression is
        <SNIPPET EVAL="no" LATEX="yes">
          <SCHEME>
(if $\langle \textit{predicate} \rangle$ $\langle \textit{consequent}\rangle$ $\langle \textit{alternative}\rangle$)
          </SCHEME>
        </SNIPPET>
        To
        <INDEX><DECLARATION>if</DECLARATION><SUBINDEX>的计算</SUBINDEX></INDEX><INDEX>计算<SUBINDEX><ORDER>if</ORDER>的<SCHEMEINLINE>if</SCHEMEINLINE></SUBINDEX></INDEX><INDEX><DECLARATION>if</DECLARATION><SUBINDEX>谓词，结果和备选</SUBINDEX></INDEX><SCHEMEINLINE>if</SCHEMEINLINE> expression, 
        the interpreter starts by evaluating the 
        <INDEX>谓词<SUBINDEX><ORDER>if</ORDER>的<SCHEMEINLINE>if</SCHEMEINLINE></SUBINDEX></INDEX><LATEXINLINE>$\langle \textit{predicate}\rangle$</LATEXINLINE> 
        part of the expression.  
        If the <LATEXINLINE>$\langle \textit{predicate}\rangle$</LATEXINLINE> 
        evaluates to a true value, the interpreter then evaluates the 
        <INDEX>结果<SUBINDEX><ORDER>if</ORDER>的<SCHEMEINLINE>if</SCHEMEINLINE></SUBINDEX></INDEX><LATEXINLINE>$\langle \textit{consequent}\rangle$</LATEXINLINE> 
        and returns its value.  Otherwise it evaluates the 
        <INDEX>备选<SCHEMEINLINE>if</SCHEMEINLINE>的</INDEX><LATEXINLINE>$\langle \textit{alternative}\rangle$</LATEXINLINE> 
        and returns its value.<FOOTNOTE> 一个微小的
        区别
        <INDEX><DECLARATION>if</DECLARATION><SUBINDEX><ORDER>cond</ORDER><SCHEMEINLINE>cond</SCHEMEINLINE> 与</SUBINDEX></INDEX>
        <INDEX><DECLARATION>cond</DECLARATION><SUBINDEX><ORDER>if</ORDER><SCHEMEINLINE>if</SCHEMEINLINE> 与</SUBINDEX></INDEX>
        <INDEX>表达式序列<SUBINDEX><SCHEMEINLINE>cond</SCHEMEINLINE>的结果中</SUBINDEX></INDEX>
	在 <SCHEMEINLINE>if</SCHEMEINLINE> 和
        <SCHEMEINLINE>cond</SCHEMEINLINE> 之间是
        <LATEXINLINE>$\langle e \rangle$</LATEXINLINE>
        每个<SCHEMEINLINE>cond</SCHEMEINLINE>
        子句的部分可以是表达式的序列。
        如果相应的 <LATEXINLINE>$\langle p \rangle$</LATEXINLINE>
        被发现为真，
        这些表达式 <LATEXINLINE>$\langle e \rangle$</LATEXINLINE>
        按顺序计算，序列中最后一个表达式的值作为
        <SCHEMEINLINE>cond</SCHEMEINLINE> 的值返回。
        然而，在一个 <SCHEMEINLINE>if</SCHEMEINLINE> 表达式中，
        <LATEXINLINE>$\langle \textit{consequent}\rangle$</LATEXINLINE> 和
        <LATEXINLINE>$\langle \textit{alternative}\rangle$</LATEXINLINE> 必须是单一的表达式。<LABEL NAME="foot:cond-consequent"></LABEL></FOOTNOTE></TEXT>
    </SCHEME>
    <JAVASCRIPT><LONG_PAGE lines="1"></LONG_PAGE><TEXT>
      If we prefer to handle the zero case separately, we can specify the function
      that computes the absolute value of a number by writing
        <LATEX>
      \[\begin{array}{lll}
          |x| &amp;=&amp; \left\{ \begin{array}{rl}
          x   &amp; \mbox{if $x &gt; 0$} \\
          0   &amp; \mbox{if $x = 0$} \\
          -x  &amp; \mbox{otherwise}
          \end{array}
          \right.
          \end{array}\]
        </LATEX>
	In JavaScript, we express a case analysis with multiple cases by nesting
	conditional expressions as alternative expressions inside other conditional expressions:
        <SNIPPET>
          <INDEX><DECLARATION>abs</DECLARATION></INDEX>
          <EXAMPLE>abs_example</EXAMPLE>
          <JAVASCRIPT>
function abs(x) {
    return x &gt; 0
           ? x
           : x === 0
           ? 0
           : - x;
}
	  </JAVASCRIPT>
        </SNIPPET>
	Parentheses are not needed around the alternative expression
	<JAVASCRIPTINLINE>x === 0 ? 0 : - x</JAVASCRIPTINLINE><INDEX>条件表达式<SUBINDEX><ORDER>备选</ORDER>条件表达式的备选</SUBINDEX></INDEX><INDEX>结合性<SUBINDEX><ORDER>条件表达式</ORDER>条件表达式的</SUBINDEX></INDEX><INDEX>条件表达式<SUBINDEX>右结合性</SUBINDEX></INDEX><INDEX>右结合</INDEX><JAVASCRIPTINLINE>?</JAVASCRIPTINLINE><APOS></APOS><JAVASCRIPTINLINE>:</JAVASCRIPTINLINE><APOS></APOS><DO_BREAK_PAGE></DO_BREAK_PAGE><SNIPPET LATEX="yes" EVAL="no">
	  <JAVASCRIPT>
<META>p</META>$_1$
? <META>e</META>$_1$
: <META>p</META>$_2$
? <META>e</META>$_2$
$\vdots$
: <META>p</META>$_n$
? <META>e</META>$_n$
: <META>final-alternative-expression</META>
	  </JAVASCRIPT>
	</SNIPPET>
	We call a predicate <LATEXINLINE>$p_i$</LATEXINLINE>
	together with its consequent expression
	<LATEXINLINE>$e_i$</LATEXINLINE>
	a
	<INDEX>案例分析的子句</INDEX><INDEX>谓词<SUBINDEX><ORDER>子句</ORDER>子句的</SUBINDEX></INDEX><EM>子句</EM><INDEX>案例分析<SUBINDEX><ORDER>序列</ORDER>子句的序列</SUBINDEX></INDEX><META>p</META><LATEXINLINE>$_1$</LATEXINLINE>.
	If its value is false, then <META>p</META><LATEXINLINE>$_2$</LATEXINLINE>
	is evaluated.
	If <META>p</META><LATEXINLINE>$_2$</LATEXINLINE><APOS></APOS><META>p</META><LATEXINLINE>$_3$</LATEXINLINE>
	is evaluated. This process continues until a predicate is
        found whose value is true, in which case the interpreter returns the
        value of the corresponding
	<INDEX>结果<SUBINDEX><ORDER>子句</ORDER>子句的</SUBINDEX></INDEX><META>e</META><META>p</META><APOS></APOS></TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        In addition to primitive predicates such as
	<SCHEMEINLINE>&lt;</SCHEMEINLINE>,
	<SCHEMEINLINE>=</SCHEMEINLINE>, and <SCHEMEINLINE>&gt;</SCHEMEINLINE>,
	there are logical composition operations, which enable us to construct
	compound predicates.  The three most frequently used are these:
        <UL><LI>
            <INDEX><DECLARATION>and</DECLARATION></INDEX> 
            <INDEX><DECLARATION>特殊形式（那些标注为<EM>ns</EM>的不在 IEEE Scheme 标准之内）</DECLARATION><SUBINDEX><ORDER>and</ORDER><SCHEMEINLINE>and</SCHEMEINLINE></SUBINDEX></INDEX>
            <INDEX><DECLARATION>and</DECLARATION><SUBINDEX>的计算</SUBINDEX></INDEX>
            <INDEX>计算<SUBINDEX><ORDER>and</ORDER>的<SCHEMEINLINE>and</SCHEMEINLINE></SUBINDEX></INDEX>
	    <SCHEMEINLINE>(and</SCHEMEINLINE>
	    <LATEXINLINE>$\langle e_1\rangle \ldots \langle e_n \rangle$
	    </LATEXINLINE>
	    <SCHEMEINLINE>)</SCHEMEINLINE><BR></BR>
            解释器按从左到右的顺序逐个计算
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE> 表达式。
            如果任何
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE> 的计算结果为假，
            那么 <SCHEMEINLINE>and</SCHEMEINLINE> 表达式的值为假，
	    其余的
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE><APOS></APOS>s 
            不再计算。如果所有的
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE><APOS></APOS>s
	    计算结果都是真值， 那么
	    <SCHEMEINLINE>and</SCHEMEINLINE>
            表达式的值是最后一个表达式的值。
          </LI><LI>
            <INDEX><DECLARATION>or</DECLARATION></INDEX> 
            <INDEX><DECLARATION>特殊形式（那些标注为<EM>ns</EM>的不在 IEEE Scheme 标准之内）</DECLARATION><SUBINDEX><ORDER>or</ORDER><SCHEMEINLINE>or</SCHEMEINLINE></SUBINDEX></INDEX>
            <INDEX><DECLARATION>or</DECLARATION><SUBINDEX>的计算</SUBINDEX></INDEX>
            <INDEX>计算<SUBINDEX><ORDER>or</ORDER>的<SCHEMEINLINE>or</SCHEMEINLINE></SUBINDEX></INDEX>
            <SCHEMEINLINE>(or</SCHEMEINLINE> <LATEXINLINE>$\langle e_1 \rangle\ldots \langle e_n \rangle$</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE><BR></BR>
            解释器按从左到右的顺序逐个计算表达式
            <LATEXINLINE>$\langle e \rangle$</LATEXINLINE>。
	    如果任何
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE>
	    的计算结果为真值，这个值将作为
	    <SCHEMEINLINE>or</SCHEMEINLINE> 表达式的值返回，其余的
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE><APOS></APOS>s 不再计算。
	    如果所有的
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE><APOS></APOS>s
	    的计算结果为假， 那么
	    <SCHEMEINLINE>or</SCHEMEINLINE> 表达式的值为假。
          </LI><LI>
            <INDEX><DECLARATION>not</DECLARATION></INDEX> 
            <INDEX><DECLARATION>原始过程（那些标注为<EM>ns</EM>的不在 IEEE Scheme 标准之内）</DECLARATION><SUBINDEX><ORDER>not</ORDER><SCHEMEINLINE>not</SCHEMEINLINE></SUBINDEX></INDEX>
            <SCHEMEINLINE>(not</SCHEMEINLINE>
	    <LATEXINLINE>$\langle e \rangle$</LATEXINLINE><SCHEMEINLINE>)
	    </SCHEMEINLINE><BR></BR>
            <SCHEMEINLINE>not</SCHEMEINLINE> 表达式的值为真
            当表达式 <LATEXINLINE>$\langle e \rangle$</LATEXINLINE>
            的计算结果为假，否则为假。
          </LI></UL>
        <INDEX><DECLARATION>and</DECLARATION><SUBINDEX>为什么是特殊形式</SUBINDEX></INDEX><INDEX><DECLARATION>or</DECLARATION><SUBINDEX>为什么是特殊形式</SUBINDEX></INDEX><SCHEMEINLINE>and</SCHEMEINLINE> and
	<SCHEMEINLINE>or</SCHEMEINLINE> are special forms, not procedures,
        because the subexpressions are not necessarily all evaluated.
        <SCHEMEINLINE>Not</SCHEMEINLINE> is an ordinary procedure.
      </TEXT>
    </SCHEME>
    <JAVASCRIPT><LONG_PAGE lines="1"></LONG_PAGE><TEXT>
        In addition to primitive predicates such as
	<INDEX><USE>&gt;</USE>（数值比较运算符）<FRAGILE></FRAGILE></INDEX><INDEX><ORDER>&gt;=0</ORDER><JAVASCRIPTINLINE>&lt;</JAVASCRIPTINLINE>（数值比较运算符）</INDEX><INDEX><ORDER>&gt;=1</ORDER><JAVASCRIPTINLINE>&lt;=</JAVASCRIPTINLINE>（数值比较运算符）<FRAGILE></FRAGILE></INDEX><INDEX><USE>===</USE><SUBINDEX><ORDER>数值</ORDER>作为数值相等运算符</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><USE>&quot;!==</USE><ORDER>;4</ORDER><SUBINDEX>作为数值比较运算符<ORDER>数值</ORDER></SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>&gt;</USE>（数值比较）</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><ORDER>===1</ORDER><USE>&lt;</USE>（数值比较）</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><ORDER>===2</ORDER><USE>&lt;=</USE>（数值比较）</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>===</USE>（用于数值比较）</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>&quot;!==</USE>（用于数值比较）<ORDER>;4</ORDER></SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX>相等<SUBINDEX><ORDER>数值</ORDER>数值的相等</SUBINDEX></INDEX><JAVASCRIPTINLINE>&gt;=</JAVASCRIPTINLINE><JAVASCRIPTINLINE>&gt;</JAVASCRIPTINLINE><JAVASCRIPTINLINE>&lt;</JAVASCRIPTINLINE><JAVASCRIPTINLINE>&lt;=</JAVASCRIPTINLINE><JAVASCRIPTINLINE>===</JAVASCRIPTINLINE><JAVASCRIPTINLINE>!==</JAVASCRIPTINLINE><FOOTNOTE>目前，我们将这些运算符限制在数值参数内。在第<SPACE></SPACE><REF NAME="sec:strings"></REF>和<SPACE></SPACE><REF NAME="sec:mutable-list-structure"></REF>节中，我们将泛化等价和不等谓词 <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> 和 <JAVASCRIPTINLINE>!==</JAVASCRIPTINLINE>。</FOOTNOTE><UL><LI>
	    <META>expression</META><LATEXINLINE>$_1$</LATEXINLINE> <JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE>
	    <META>expression</META><LATEXINLINE>$_2$</LATEXINLINE><BR></BR>
	    此操作表示
	    <INDEX>语法糖<SUBINDEX><ORDER>;1</ORDER><JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE> 和 {\tt &quot;|&quot;|} 作为</SUBINDEX></INDEX>
	    <INDEX><USE>&amp;&amp;</USE>（逻辑合取）<ORDER>;1</ORDER><FRAGILE></FRAGILE></INDEX>
	    <INDEX><USE>&amp;&amp;</USE>（逻辑合取）<SUBINDEX>的计算</SUBINDEX><ORDER>;1</ORDER><FRAGILE></FRAGILE></INDEX>
	    <INDEX>语法形式<SUBINDEX>逻辑合取(<JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE>)</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <INDEX>逻辑合取<FRAGILE></FRAGILE></INDEX>
	    <INDEX>合取</INDEX>
        <INDEX>计算<SUBINDEX>的<JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE><ORDER>的 ;1</ORDER></SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <EM>逻辑合取</EM>，大致等同于英文单词<QUOTE>和。</QUOTE>
	    我们假设<FOOTNOTE>这个假设由脚注<SPACE></SPACE><REF NAME="foot:any-value-as-predicate"></REF>中提到的限制证明是合理的。完整的 JavaScript
	    需要考虑 <META>expression</META><LATEXINLINE>$_1$</LATEXINLINE> 计算结果既不是真也不是假的情况。</FOOTNOTE> 这个语法形式是语法糖<FOOTNOTE>简单为方便替代表面结构而设计的语法形式有时被称为<EM>语法糖</EM>，使用这个术语是彼得·兰丁
            <INDEX>Landin, Peter</INDEX>
            <INDEX>语法糖</INDEX>彼得·兰丁创造的。
	    </FOOTNOTE> 对于<BR></BR>
	    <META>expression</META><LATEXINLINE>$_1$</LATEXINLINE> <JAVASCRIPTINLINE>?</JAVASCRIPTINLINE>
	    <META>expression</META><LATEXINLINE>$_2$</LATEXINLINE> <JAVASCRIPTINLINE>:</JAVASCRIPTINLINE>
	    <JAVASCRIPTINLINE>false</JAVASCRIPTINLINE>。
          </LI><LI>
            <META>expression</META><LATEXINLINE>$_1$</LATEXINLINE>
            <JAVASCRIPTINLINE>||</JAVASCRIPTINLINE>
            <META>expression</META><LATEXINLINE>$_2$</LATEXINLINE><BR></BR>
	    此操作表示
	    <INDEX>{\tt &quot;|&quot;|}（逻辑析取）<ORDER>;2</ORDER><FRAGILE></FRAGILE></INDEX>
	    <INDEX>{\tt &quot;|&quot;|}（逻辑析取）<ORDER>;2</ORDER><SUBINDEX>的计算</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <INDEX>语法形式<SUBINDEX>逻辑析取 ({\tt &quot;|&quot;|})</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <INDEX>逻辑析取<FRAGILE></FRAGILE></INDEX>
	    <INDEX>析取</INDEX>
        <INDEX>计算<SUBINDEX>的{\tt &quot;|&quot;|}<ORDER>的 ;2</ORDER></SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <EM>逻辑析取</EM>，大致等同于英文单词<QUOTE>或。</QUOTE>
	    我们假设这个语法形式是语法糖对<BR></BR>
	    <META>expression</META><LATEXINLINE>$_1$</LATEXINLINE> <JAVASCRIPTINLINE>?</JAVASCRIPTINLINE>
	    <JAVASCRIPTINLINE>true</JAVASCRIPTINLINE> <JAVASCRIPTINLINE>:</JAVASCRIPTINLINE>
	    <META>expression</META><LATEXINLINE>$_2$</LATEXINLINE>。
          </LI><LI>
            <JAVASCRIPTINLINE>!</JAVASCRIPTINLINE>
	    <META>expression</META><BR></BR>
	    此操作表示
	    <INDEX><USE>&quot;!</USE>（逻辑否定运算符）<ORDER>;399</ORDER></INDEX>
	    <INDEX><OPERATOR></OPERATOR><SUBINDEX><ORDER>;399</ORDER><USE>&quot;!</USE>（逻辑否定）</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	    <INDEX>否定<SUBINDEX>逻辑 (<JAVASCRIPTINLINE>&quot;!</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	    <EM>逻辑否定</EM>，大致等同于英文单词<QUOTE>不是。</QUOTE>
        表达式的值为真，当
	    <META>expression</META>
	    的计算结果为假，而当
	    <META>expression</META>
	    的计算结果为真时，值为假。
          </LI></UL>
        Notice that <JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE><JAVASCRIPTINLINE>||</JAVASCRIPTINLINE><INDEX><USE>&amp;&amp;</USE>（逻辑合取）<ORDER>;1</ORDER><SUBINDEX>为什么是语法形式</SUBINDEX><FRAGILE></FRAGILE></INDEX><INDEX>{\tt &quot;|&quot;|}（逻辑析取）<ORDER>;2</ORDER><SUBINDEX>为什么是语法形式</SUBINDEX><FRAGILE></FRAGILE></INDEX><JAVASCRIPTINLINE>!</JAVASCRIPTINLINE><REF NAME="sec:evaluating-combinations"></REF><EM>一元</EM><EM>二元</EM><JAVASCRIPTINLINE>!</JAVASCRIPTINLINE><INDEX><USE>-</USE><SUBINDEX>作为数值否定运算符</SUBINDEX></INDEX><INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>-</USE>（数值否定运算符）</SUBINDEX></INDEX><INDEX>否定<SUBINDEX>数值 (<JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>)</SUBINDEX></INDEX><INDEX>二元运算符</INDEX><INDEX>一元运算符</INDEX><INDEX>前缀运算符</INDEX><EM>前缀运算符</EM><JAVASCRIPTINLINE>abs</JAVASCRIPTINLINE><JAVASCRIPTINLINE>- x</JAVASCRIPTINLINE></TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <SPLIT>
    <SCHEME>
      <TEXT>
        作为如何使用这些谓词的一个例子，条件一个数 <LATEXINLINE>$x$</LATEXINLINE> 在范围
	<LATEXINLINE>$5 &lt; x &lt; 10$</LATEXINLINE> 可能表示为
        <SNIPPET EVAL="no">
          <SCHEME>
(and (&gt; x 5) (&lt; x 10))
          </SCHEME>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        作为如何使用这些谓词的一个例子，条件一个数 <LATEXINLINE>$x$</LATEXINLINE> 在范围
	<LATEXINLINE>$5 &lt; x &lt; 10$</LATEXINLINE> 可能表示为
        <SNIPPET EVAL="no">
          <JAVASCRIPT>
x &gt; 5 &amp;&amp; x &lt; 10 
          </JAVASCRIPT>
        </SNIPPET>
        语法形式
	<JAVASCRIPTINLINE>&amp;&amp;</JAVASCRIPTINLINE>
        比较运算符的优先级低于
        <JAVASCRIPTINLINE>&gt;</JAVASCRIPTINLINE>
	和<SPACE></SPACE><JAVASCRIPTINLINE>&lt;</JAVASCRIPTINLINE>，以及
	条件表达式语法形式
	<LATEXINLINE>$\cdots$</LATEXINLINE><JAVASCRIPTINLINE>?</JAVASCRIPTINLINE><LATEXINLINE>$\cdots$</LATEXINLINE><JAVASCRIPTINLINE>:</JAVASCRIPTINLINE><LATEXINLINE>$\cdots$</LATEXINLINE>
	优先级低于我们目前遇到的任何其他运算符，
	这是我们在上述 <JAVASCRIPTINLINE>abs</JAVASCRIPTINLINE> 函数中使用的一个特性。
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <TEXT>
    作为另一个例子，我们可以
    <SPLITINLINE>
      <SCHEME>
	定义
      </SCHEME>
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    一个谓词来测试一个数字是否
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>&gt;=</USE></INDEX> 
      </SCHEME>
    </SPLITINLINE>
    大于或等于另一个数字，如    
    <SNIPPET>
      <EXAMPLE>geq_example</EXAMPLE>
      <SCHEME>
(define (&gt;= x y)
  (or (&gt; x y) (= x y)))
      </SCHEME>
      <JAVASCRIPT>
function greater_or_equal(x, y) {
    return x &gt; y || x === y;
}
      </JAVASCRIPT>
    </SNIPPET>
    或者作为
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>&gt;=</USE></INDEX> 
      </SCHEME>
    </SPLITINLINE>
    <SNIPPET>
      <EXAMPLE>geq_example</EXAMPLE>
      <SCHEME>
(define (&gt;= x y)
  (not (&lt; x y)))
      </SCHEME>
      <JAVASCRIPT>
function greater_or_equal(x, y) {
    return ! (x &lt; y);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>geq_example</NAME>
      <SCHEME>
(&gt;= 7 4)
      </SCHEME>
      <JAVASCRIPT>
greater_or_equal(7, 4);
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
        函数 <JAVASCRIPTINLINE>greater_or_equal</JAVASCRIPTINLINE>,
        应用于两个数字时，表现与运算符
	<JAVASCRIPTINLINE>&gt;=</JAVASCRIPTINLINE> 相同。一元运算符具有
        <INDEX>优先级<SUBINDEX><ORDER>一元</ORDER>一元运算符的优先级</SUBINDEX></INDEX>
        比二元运算符的优先级高，使得该示例中的括号是必要的。
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <EXERCISE>
    Below is a sequence of
    <SPLITINLINE>
      <SCHEME>
	表达式。
      </SCHEME>
      <JAVASCRIPT>
	语句。
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        表达式时打印的结果是什么？
      </SCHEME>
      <JAVASCRIPT>
	语句时打印的结果是什么？
      </JAVASCRIPT>
    </SPLITINLINE><SNIPPET>
      <NAME>ten</NAME>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
10
      </SCHEME>
      <JAVASCRIPT>
10;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>five_plus_three_plus_four</NAME>
      <EXPECTED>12</EXPECTED>
      <SCHEME>
(+ 5 3 4)
      </SCHEME>
      <JAVASCRIPT>
5 + 3 + 4;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>nine_minus_one</NAME>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(- 9 1)
      </SCHEME>
      <JAVASCRIPT>
9 - 1;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>six_over_two</NAME>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
(/ 6 2)
      </SCHEME>
      <JAVASCRIPT>
6 / 2;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>two_times_four_etc</NAME>
      <EXPECTED>6</EXPECTED>
      <SCHEME>
(+ (* 2 4) (- 4 6))
      </SCHEME>
      <JAVASCRIPT>
2 * 4 + (4 - 6);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>definea</NAME>
      <EXPECTED>undefined</EXPECTED>
      <SCHEME>
(define a 3)
      </SCHEME>
      <JAVASCRIPT>
const a = 3;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>defineb</NAME>
      <REQUIRES>definea</REQUIRES>
      <EXPECTED>undefined</EXPECTED>
      <SCHEME>
(define b (+ a 1))
      </SCHEME>
      <JAVASCRIPT>
const b = a + 1;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>a_plus_b_etc</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>19</EXPECTED>
      <SCHEME>
(+ a b (* a b))
      </SCHEME>
      <JAVASCRIPT>
a + b + a * b;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>a_equal_b</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>false</EXPECTED>
      <SCHEME>
(= a b)
      </SCHEME>
      <JAVASCRIPT>
a === b;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>b_gt_a_etc</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(if (and (&gt; b a) (&lt; b (* a b)))
  b
  a)
      </SCHEME>
      <JAVASCRIPT>
b &gt; a &amp;&amp; b &lt; a * b ? b : a;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>a_equal_four_etc</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>16</EXPECTED>
      <SCHEME>
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
      </SCHEME>
      <JAVASCRIPT>
a === 4
? 6
: b === 4
? 6 + 7 + a
: 25;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>two_plus_etc</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>6</EXPECTED>
      <SCHEME>
(+ 2 (if (&gt; b a) b a))
      </SCHEME>
      <JAVASCRIPT>
2 + (b &gt; a ? b : a);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>a_greater_b_etc</NAME>
      <REQUIRES>defineb</REQUIRES>
      <EXPECTED>16</EXPECTED>
      <SCHEME>
(* (cond ((&gt; a b) a)
         ((&lt; a b) b)
         (else -1))
   (+ a 1))
      </SCHEME>
      <JAVASCRIPT>
(a &gt; b
 ? a
 : a &lt; b
 ? b
 : -1)
*
(a + 1);
      </JAVASCRIPT>
    </SNIPPET><SPLIT>
      <JAVASCRIPT>
	最后两个语句中条件表达式周围的括号是必要的，因为
	<INDEX>条件表达式<SUBINDEX><ORDER>操作数</ORDER>运算符组合的操作数</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	条件表达式语法形式的
	<INDEX>优先级<SUBINDEX><ORDER>条件表达式</ORDER>条件表达式的</SUBINDEX></INDEX>
	<INDEX>条件表达式<SUBINDEX>的优先级</SUBINDEX></INDEX>
	优先级低于算术运算符
	<JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> 和
	<JAVASCRIPTINLINE>*</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLIT><LABEL NAME="ex:1_1"></LABEL><SOLUTION>
      解答由 GitHub 用户 Emekk 提供
      <OL>
	<LI>10</LI>
	<LI>12</LI>
	<LI>8</LI>
	<LI>3</LI>
	<LI>6</LI>
	<LI>3</LI>
	<LI>4</LI>
	<LI>19</LI>
	<LI>false</LI>
	<LI>4</LI>
	<LI>16</LI>
	<LI>6</LI>
	<LI>16</LI>
      </OL>
    </SOLUTION></EXERCISE>

  <EXERCISE>
    将以下表达式翻译成
    <SPLITINLINE>
      <SCHEME>
        前缀形式
      </SCHEME>
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    <PDF_ONLY>
      \par\medskip
    </PDF_ONLY>
    <LATEX>
      $\begin{array}{l}
      \quad~~\dfrac{5+4+\left(2-\left(3-(6+\frac{4}{5})\right)\right)}{3 (6-2) (2-7)}
      \end{array}$
    </LATEX>
    <SOLUTION>   
      <SNIPPET>
	<JAVASCRIPT>
(5 + 4 + (2 - (3 - (6 + 4 / 5)))) 
/
(3 * (6 - 2) * (2 - 7));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:1_2"></LABEL>
  </EXERCISE>
  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>
        定义一个过程
      </SCHEME>
      <JAVASCRIPT>
	声明一个函数
      </JAVASCRIPT>
    </SPLITINLINE>
    接受三个数字作为参数，并返回两个较大数字的平方和。
    <SOLUTION>
      <SNIPPET>
        <EXAMPLE>larger_two_square_example</EXAMPLE>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function f(x, y, z) {
   return square(x) + square(y) + square(z) -
          // 减去最小的平方
          square(x &gt; y ? (y &gt; z ? z : y) : (x &gt; z ? z : x));
}
        </JAVASCRIPT>
        <SCHEME>
(define (f x y z)
   (let ((smallest (if (&gt; x y) (if (&gt; y z) z y) (if (&gt; x z) z x))))
      (- (+ (square x) (square y) (square z)) (square smallest))))
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>larger_two_square_example</NAME>
      <SCHEME>
(f 4 7 2)
      </SCHEME>
      <JAVASCRIPT>
f(4, 7, 2);
      </JAVASCRIPT>
    </SNIPPET>
    <LABEL NAME="ex:1_3"></LABEL>
  </EXERCISE>

  <EXERCISE><LABEL NAME="ex:a-plus-abs-b"></LABEL><SPLIT><SCHEME>
	注意我们的评估模型允许
	<INDEX>组合<SUBINDEX>复合表达式作为运算符的</SUBINDEX></INDEX>
	<INDEX>复合表达式<SUBINDEX><ORDER>运算符</ORDER>作为组合的运算符</SUBINDEX></INDEX>
	<INDEX>组合的运算符<SUBINDEX>复合表达式作为</SUBINDEX></INDEX>
	运算符是复合表达式的组合。利用这一观察来描述以下过程的行为：
	<SNIPPET>
      <SCHEME>
(define (a-plus-abs-b a b)
  ((if (&gt; b 0) + -) a b))
      </SCHEME>
	</SNIPPET>
      </SCHEME><JAVASCRIPT>
	Observe that our model of evaluation allows for
	<INDEX>函数应用<SUBINDEX>复合表达式作为函数表达式的</SUBINDEX></INDEX><INDEX>复合表达式<SUBINDEX><ORDER>函数表达式</ORDER>作为应用的函数表达式</SUBINDEX></INDEX><INDEX>函数表达式<SUBINDEX>复合表达式作为</SUBINDEX></INDEX><JAVASCRIPTINLINE>a_plus_abs_b</JAVASCRIPTINLINE><SNIPPET POSTPADDING="no">
          <EXAMPLE>plusminusexample</EXAMPLE>
          <JAVASCRIPT>
function plus(a, b) { return a + b; }
<SHORT_SPACE></SHORT_SPACE>
function minus(a, b) { return a - b; }
<SHORT_SPACE></SHORT_SPACE>
function a_plus_abs_b(a, b) {
    return (b &gt;= 0 ? plus : minus)(a, b);
}
          </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET HIDE="yes">
          <NAME>plusminusexample</NAME>
          <JAVASCRIPT>
a_plus_abs_b(5, -4);
          </JAVASCRIPT>
	</SNIPPET><COMMENT>
	  注意，在 JavaScript 的条件表达式中，我们不能像在 Scheme 中那样直接使用运算符 <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> 和 <JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>，而是必须使用名称 <JAVASCRIPTINLINE>plus</JAVASCRIPTINLINE> 和 <JAVASCRIPTINLINE>minus</JAVASCRIPTINLINE>，因为在中缀表示法中，中间只允许运算符符号，而不是复合表达式。
	</COMMENT><SOLUTION>
	  根据第<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节，应用的计算过程如下：
	  <OL>
	    <LI>计算应用的子表达式。
	    </LI>
            <LI>计算函数表达式结果的返回表达式，其中每个参数被相应的参数表达式的结果替换。
            </LI>
	  </OL>
	  因此，应用 <JAVASCRIPTINLINE>a_plus_abs_b(5, -4)</JAVASCRIPTINLINE> 的计算 (1) 计算 <JAVASCRIPTINLINE>a_plus_abs_b</JAVASCRIPTINLINE>，结果是上面给出的函数，并且参数已经是值。所以我们需要计算 (2) 函数的返回表达式，其中参数被参数替换，因此：<JAVASCRIPTINLINE>(-4 &gt;= 0 ? plus : minus)(5, -4)</JAVASCRIPTINLINE>。
	  使用相同的规则，我们需要 (1) 计算函数表达式，在这种情况下是条件表达式 <JAVASCRIPTINLINE>-4 &gt;= 0 ? plus : minus</JAVASCRIPTINLINE>。由于谓词的计算结果为假，函数表达式计算结果为 <JAVASCRIPTINLINE>minus</JAVASCRIPTINLINE>。参数 (1) 再次已经是值。因此，我们最终计算 (2) <JAVASCRIPTINLINE>minus</JAVASCRIPTINLINE> 的主体，参数 <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> 和 <JAVASCRIPTINLINE>b</JAVASCRIPTINLINE> 分别被 5 和 -4 替换，结果是 <JAVASCRIPTINLINE>5 - (-4)</JAVASCRIPTINLINE>，最终将计算为 9。
	</SOLUTION></JAVASCRIPT>
    </SPLIT>
  </EXERCISE>

  <EXERCISE><LABEL NAME="ex:normal-order-vs-appl-order-test"></LABEL><INDEX>正常顺序计算<SUBINDEX>应用顺序与</SUBINDEX></INDEX><INDEX>应用顺序计算<SUBINDEX>正常顺序与</SUBINDEX></INDEX><SPLITINLINE>
      <SCHEME>
	定义了以下两个过程：
      </SCHEME>
      <JAVASCRIPT>
	声明了以下两个函数：
      </JAVASCRIPT>
      </SPLITINLINE><SNIPPET>
	<NAME>ptest</NAME>
	<SCHEME>
(define (p) (p))

(define (test x y)
  (if (= x 0)
    0
    y))
	</SCHEME>
	<JAVASCRIPT>
function p() { return p(); }

function test(x, y) {
    return x === 0 ? 0 : y;
}
	</JAVASCRIPT>
      </SNIPPET><START_KEEP_TOGETHER></START_KEEP_TOGETHER><NOINDENT></NOINDENT><SPLITINLINE>
	<SCHEME>表达式</SCHEME>
	<JAVASCRIPT>语句</JAVASCRIPT>
</SPLITINLINE><SNIPPET>
	<REQUIRES>ptest</REQUIRES>
	<SCHEME>
(test 0 (p))
	</SCHEME>
	<JAVASCRIPT>
test(0, p());
	</JAVASCRIPT>
      </SNIPPET><STOP_KEEP_TOGETHER></STOP_KEEP_TOGETHER><INDEX>正常顺序计算<SUBINDEX><ORDER>条件</ORDER>条件表达式的</SUBINDEX></INDEX><INDEX>条件表达式<SUBINDEX>正常顺序计算的</SUBINDEX></INDEX><SPLITINLINE>
	<SCHEME>
    特殊形式<SCHEMEINLINE>if</SCHEMEINLINE>
	</SCHEME>
	<JAVASCRIPT>
    条件表达式
	</JAVASCRIPT>
</SPLITINLINE><SOLUTION>		
	<SPLIT>
	  <JAVASCRIPT>
	    在应用顺序计算中，
	    <JAVASCRIPTINLINE>test(0, p())</JAVASCRIPTINLINE>，
	    我们需要在计算函数
	    <JAVASCRIPTINLINE>test</JAVASCRIPTINLINE>
	    的返回表达式之前计算参数表达式。
	    然而，参数表达式
	    <JAVASCRIPTINLINE>p()</JAVASCRIPTINLINE>
	    的计算将不会终止：它将不断计算形式为
	    <JAVASCRIPTINLINE>p()</JAVASCRIPTINLINE>的应用表达式，因此
        <JAVASCRIPTINLINE>test(0, p())</JAVASCRIPTINLINE> 的计算将不会生成有效的值。在正常顺序计算中，另一方面，
	    函数应用
	    <JAVASCRIPTINLINE>test(0, p())</JAVASCRIPTINLINE>
	    将立即计算函数
	    <JAVASCRIPTINLINE>test</JAVASCRIPTINLINE>
	    的返回表达式，
	    <JAVASCRIPTINLINE>x === 0 ? 0 : y</JAVASCRIPTINLINE>
	    在将参数
	    <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>替换为
	    <JAVASCRIPTINLINE>0</JAVASCRIPTINLINE>和
	    <JAVASCRIPTINLINE>y</JAVASCRIPTINLINE>替换为
	    <JAVASCRIPTINLINE>p()</JAVASCRIPTINLINE>之后。
	    替换的结果将是
	    <JAVASCRIPTINLINE>0 === 0 ? 0 : p()</JAVASCRIPTINLINE>。
	    谓词
	    <JAVASCRIPTINLINE>0 === 0</JAVASCRIPTINLINE>
	    的计算结果为 true，因此条件
	    表达式的计算结果为 0，无需
	    计算 <JAVASCRIPTINLINE>p()</JAVASCRIPTINLINE>。
	  </JAVASCRIPT>
	</SPLIT>
</SOLUTION></EXERCISE>
</SUBSECTION>
