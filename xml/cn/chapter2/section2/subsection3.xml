<SUBSECTION>
  <NAME>
    Sequences as Conventional Interfaces
  </NAME>

  <LABEL NAME="sec:sequences-conventional-interfaces"></LABEL>
  <INDEX>sequence(s)<SUBINDEX>as conventional interface</SUBINDEX><OPEN></OPEN></INDEX>
  <INDEX>conventional interface<SUBINDEX>sequence as</SUBINDEX><OPEN></OPEN></INDEX>

  <TEXT>
    In working with compound data, we<APOS></APOS>ve stressed how data abstraction
    permits us to design programs without becoming enmeshed in the details
    of data representations, and how abstraction preserves for us the
    flexibility to experiment with alternative representations.  In this
    section, we introduce another powerful design principle for working
    with data structures<EMDASH></EMDASH>the use of <EM>conventional interfaces</EM>.
  </TEXT>

  <TEXT>
    In section<SPACE></SPACE><REF NAME="sec:higher-order-procedures"></REF> we saw how
    program abstractions, implemented as higher-order
    <SPLITINLINE>
      procedures,
    <JAVASCRIPT>functions,</JAVASCRIPT></SPLITINLINE>
    can capture common patterns in programs that deal with numerical data. Our
    ability to formulate analogous operations for working with compound data
    depends crucially on the style in which we manipulate our data structures.
    Consider, for example, the following
    <SPLITINLINE>
      procedure,
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    analogous to the
    <SPLITINLINE>
      count-leaves
      <JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE></SPACE><REF NAME="sec:trees"></REF>, which takes a tree as argument
    and computes the sum of the squares of the leaves that are odd:
    <SNIPPET HIDE="yes">
      <NAME>odd_definition</NAME>
      
(define (odd? n)
  (= (remainder n 2) 1))
      
      <JAVASCRIPT>
function is_odd(n) {
    return n % 2 === 1;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>sum_odd_squares</DECLARATION></INDEX> 
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>odd_definition</REQUIRES>
      <EXAMPLE>sum_odd_squares_example</EXAMPLE>
      <EXPECTED>34</EXPECTED>
      
(define (sum-odd-squares tree)
  (cond ((null? tree) 0)  
        ((not (pair? tree))
          (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares (car tree))
          (sum-odd-squares (cdr tree))))))
      
      <JAVASCRIPT>
function sum_odd_squares(tree) {
    return is_null(tree)
           ? 0
           : ! is_pair(tree)
           ? is_odd(tree) ? square(tree) : 0
           : sum_odd_squares(head(tree)) +
             sum_odd_squares(tail(tree));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sum_odd_squares_example</NAME>
      
(sum-odd-squares (list (list 2 3) (list 4 5)))
      
      <JAVASCRIPT>
sum_odd_squares(list(list(2, 3), list(4, 5)));
      </JAVASCRIPT>
    </SNIPPET>
    On the surface, this
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is very different from the following one, which constructs a list of all
    the even Fibonacci numbers
    <LATEXINLINE>${\textrm{Fib}}(k)$</LATEXINLINE>, where
    <LATEXINLINE>$k$</LATEXINLINE> is less than or equal to a given integer
    <LATEXINLINE>$n$</LATEXINLINE>:
    <SNIPPET>
      <INDEX><DECLARATION>even_fibs</DECLARATION></INDEX> 
      <REQUIRES>even_definition</REQUIRES>
      <REQUIRES>fib_definition</REQUIRES>
      <EXAMPLE>even_fibs_example</EXAMPLE>
      <EXPECTED>[ 2, [ 8, [ 34, null ] ] ]</EXPECTED>
      
(define (even-fibs n)
  (define (next k)
    (if (&gt; k n)
      nil
      (let ((f (fib k)))
        (if (even? f)
          (cons f (next (+ k 1)))
          (next (+ k 1))))))
  (next 0))
      
      <JAVASCRIPT>
function even_fibs(n) {
    function next(k) {
        if (k &gt; n) {
            return null;
        } else {
            const f = fib(k);
            return is_even(f)
                   ? pair(f, next(k + 1))
                   : next(k + 1);
        }
    }
    return next(0);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>even_fibs_example</NAME>
      
(even-fibs 9)
      
      <JAVASCRIPT>
even_fibs(9);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(even_fibs(9));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Despite the fact that these two
    <SPLITINLINE>
      procedures
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are structurally very different, a more abstract description of the two
    computations reveals a great deal of similarity.  The first program
    <UL>
      <LI>
	enumerates the leaves of a tree;
      </LI>
      <LI>
	filters them, selecting the odd ones;
      </LI>
      <LI>
	squares each of the selected ones; and
      </LI>
      <LI>
	accumulates the results using
	<SPLITINLINE>
	  +,
	  <JAVASCRIPT><JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>,</JAVASCRIPT>
	</SPLITINLINE>
	starting with 0.
      </LI>
    </UL>
    The second program
    <UL>
      <LI>
	enumerates the integers from 0 to <LATEXINLINE>$n$</LATEXINLINE>;
      </LI>
      <LI>
	computes the Fibonacci number for each integer;
      </LI>
      <LI>
	filters them, selecting the even ones; and
      </LI>
      <LI>
	accumulates the results using
	<SPLITINLINE>
	  cons,
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
	</SPLITINLINE>
	starting with the empty list.
      </LI>
    </UL>
  </TEXT>
    <PDF_ONLY>
      <!--  Figure moved here for SICP JS pagination  -->
      <!--  Figure code is copy of code below in a WEB_ONLY  -->
    <SPLIT>
      
        <FIGURE SRC="img_original/ch2-Z-G-17.svg">
          <LABEL NAME="fig:signal-flow-plans_scheme"></LABEL>
          <CAPTION>The signal-flow plans for the procedures
          sum-odd-squares (top) and
	  even-fibs
	  (bottom) reveal the commonality between the two programs.
          </CAPTION>
        </FIGURE>
      
      <JAVASCRIPT>
        <FIGURE SRC="img_javascript/ch2-Z-G-17.svg">
          <LABEL NAME="fig:signal-flow-plans"></LABEL>
          <CAPTION>The signal-flow plans for the
          functions
          <JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE> (top) and
	  <JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE> (bottom) reveal the
          commonality between the two programs.
          </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    </PDF_ONLY>
    <SHORT_PAGE LINES="4"></SHORT_PAGE>
  <TEXT>
    A signal-processing engineer would find it natural to conceptualize these
    processes in terms of
    <INDEX>signal-processing view of computation</INDEX>
    <INDEX>signal-flow diagram</INDEX>
    signals flowing through a cascade of stages, each of
    which implements part of the program plan, as shown in
    <SPLITINLINE>
      figure<SPACE></SPACE><REF NAME="fig:signal-flow-plans_scheme"></REF>.
      <JAVASCRIPT>figure<SPACE></SPACE><REF NAME="fig:signal-flow-plans"></REF>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In
    <SPLITINLINE>
      sum-odd-squares,
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    we begin with an 
    <INDEX>enumerator</INDEX>
    <EM>enumerator</EM>, which generates a <QUOTE>signal</QUOTE> consisting of
    the leaves of a given tree.  This signal is passed through a 
    <INDEX>filter</INDEX>
    <EM>filter</EM>, which eliminates all but the odd elements. The resulting
    signal is in turn passed through a 
    <INDEX>mapping<SUBINDEX><ORDER>trans</ORDER>as a transducer</SUBINDEX></INDEX>
    <EM>map</EM>, which is a <QUOTE>transducer</QUOTE> that applies the
    square
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to each element.  The output of the map is then fed to an 
    <INDEX>accumulator</INDEX>
    <EM>accumulator</EM>, which combines the elements using
    <SPLITINLINE>
      +,
      <JAVASCRIPT><JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    starting from an initial 0. The plan for
    <SPLITINLINE>
      even-fibs
      <JAVASCRIPT><JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is analogous.
    <WEB_ONLY>
      <!--   Figure code appears earlier in this file in a PDF_ONLY for SICP JS pagination   -->
    <SPLIT>
      
        <FIGURE SRC="img_original/ch2-Z-G-17.svg">
          <LABEL NAME="fig:signal-flow-plans_scheme"></LABEL>
          <CAPTION>The signal-flow plans for the procedures
          sum-odd-squares (top) and
	  even-fibs
	  (bottom) reveal the commonality between the two programs.
          </CAPTION>
        </FIGURE>
      
      <JAVASCRIPT>
        <FIGURE SRC="img_javascript/ch2-Z-G-17.svg">
          <LABEL NAME="fig:signal-flow-plans"></LABEL>
          <CAPTION>The signal-flow plans for the
          functions
          <JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE> (top) and
	  <JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE> (bottom) reveal the
          commonality between the two programs.
          </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    </WEB_ONLY>
  </TEXT>
  <TEXT>
    Unfortunately, the two
    <SPLITINLINE>
      procedure definitions
      <JAVASCRIPT>function declarations</JAVASCRIPT>
    </SPLITINLINE>
    above fail to exhibit this signal-flow structure.  For instance, if we
    examine the
    <SPLITINLINE>
      sum-odd-squares
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedure,
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    we find that the enumeration is implemented partly by the
    <SPLITINLINE>
      null?
      <JAVASCRIPT><JAVASCRIPTINLINE>is_null</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      pair?
      <JAVASCRIPT><JAVASCRIPTINLINE>is_pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    tests and partly by the tree-recursive structure of the
    <SPLITINLINE>
      procedure.
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Similarly, the accumulation is found partly in the tests and partly in the
    addition used in the recursion.  In general, there are no distinct parts of
    either
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that correspond to the elements in the signal-flow description. Our two
    <SPLITINLINE>
      procedures
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    decompose the computations in a different way, spreading the enumeration
    over the program and mingling it with the map, the filter, and the
    accumulation.  If we could organize our programs to make the signal-flow
    structure manifest in the
    <SPLITINLINE>
      procedures
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we write, this would increase the conceptual clarity of the resulting
    <SPLITINLINE>
      code.
      <JAVASCRIPT>program.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <SUBHEADING>
    <NAME>Sequence Operations</NAME>
  </SUBHEADING>

  <LABEL NAME="sec:sequence-operations"></LABEL>
  <INDEX>sequence(s)<SUBINDEX>operations on</SUBINDEX><OPEN></OPEN></INDEX>

  <LONG_PAGE LINES="2"></LONG_PAGE>
  <TEXT>
    The key to organizing programs so as to more clearly reflect the
    signal-flow structure is to concentrate on the <QUOTE>signals</QUOTE> that
    flow from one stage in the process to the next.  If we represent these
    signals as lists, then we can use list operations to implement the
    processing at each of the stages.  For instance, we can implement the
    mapping stages of the signal-flow diagrams using the
    map
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE></SPACE><REF NAME="sec:sequences"></REF>:
    <SNIPPET>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>map</REQUIRES>
      <EXPECTED>25</EXPECTED>
      
(map square (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
            (1 4 9 16 25)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
map(square, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
list_ref(map(square, list(1, 2, 3, 4, 5)), 4);
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>      
list(1, 4, 9, 16, 25)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Filtering a sequence to select only those elements that satisfy a given
    predicate is accomplished by
    <SNIPPET>
      <INDEX><DECLARATION>filter</DECLARATION></INDEX> 
      <NAME>filter</NAME>
      <EXAMPLE>filter_odd</EXAMPLE>
      <EXPECTED>[ 1, [ 3, [ 5, null ] ] ]</EXPECTED>
      
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
          (cons (car sequence)
                (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
      
      <JAVASCRIPT>
function filter(predicate, sequence) {
    return is_null(sequence)
           ? null
           : predicate(head(sequence))
           ? pair(head(sequence), 
                  filter(predicate, tail(sequence)))
           : filter(predicate, tail(sequence));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>filter_odd</NAME>
      <EXPECTED>[ 1, [ 3, [ 5, null ] ] ]</EXPECTED>
      
(define (odd? n)
  (= (remainder n 2) 1))

(filter odd? (list 1 2 3 4 5))
      
      <JAVASCRIPT>
function is_odd(n) {
    return n % 2 === 1;
}
filter(is_odd, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
    </SNIPPET>
    For example,
    <SNIPPET>
      <REQUIRES>filter</REQUIRES>
      <REQUIRES>odd_definition</REQUIRES>
      
(filter odd? (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
            (1 3 5)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
filter(is_odd, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>      
list(1, 3, 5)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
  Accumulations can be implemented by
    <SNIPPET POSTPADDING="no">
      <INDEX><DECLARATION>accumulate</DECLARATION></INDEX>
      <NAME>accumulate</NAME>
      
(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))
      
      <JAVASCRIPT>
function accumulate(op, initial, sequence) {
    return is_null(sequence)
           ? initial
           : op(head(sequence), 
                accumulate(op, initial, tail(sequence)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>simple_plus</NAME>
      
;; in Scheme, the operator symbol + is procedure name
      
      <JAVASCRIPT>
function plus(x, y) {
    return x + y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <REQUIRES>accumulate</REQUIRES>
      <REQUIRES>simple_plus</REQUIRES>
      <EXPECTED>15</EXPECTED>
      
(accumulate + 0 (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
15
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
accumulate(plus, 0, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
15
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>simple_times</NAME>
      
;; in Scheme, the operator symbol * is procedure name
      
      <JAVASCRIPT>
function times(x, y) {
    return x * y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <REQUIRES>accumulate</REQUIRES>
      <REQUIRES>simple_times</REQUIRES>
      <EXPECTED>120</EXPECTED>
      
(accumulate * 1 (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
            120
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
accumulate(times, 1, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
120	
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <REQUIRES>accumulate</REQUIRES>
      <EXPECTED>[ 3, [ 4, [ 5, null ] ] ]</EXPECTED>
      
(accumulate cons nil (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
(1 2 3 4 5)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
accumulate(pair, null, list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(tail(accumulate(pair, null, list(1, 2, 3, 4, 5))));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(1, 2, 3, 4, 5)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    All that remains to implement signal-flow diagrams is to enumerate the
    sequence of elements to be processed.  For
    <SPLITINLINE>
      even-fibs,
      <JAVASCRIPT><JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    we need to generate the sequence of integers in a given range, which we
    can do as follows:
    <SNIPPET>
      <INDEX><DECLARATION>enumerate_interval</DECLARATION></INDEX> 
      <NAME>enumerate_interval</NAME>
      <EXAMPLE>enumerate_interval_example</EXAMPLE>
      <EXPECTED>[ 5, [ 6, [ 7, null ] ] ]</EXPECTED>
      
(define (enumerate-interval low high)
   (if (&gt; low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
      
      <JAVASCRIPT>
function enumerate_interval(low, high) {
    return low &gt; high
           ? null
           : pair(low,
                  enumerate_interval(low + 1, high));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>enumerate_interval_example</NAME>
      <REQUIRES>enumerate_interval</REQUIRES>
      
(enumerate-interval 2 7)
      
      <SCHEMEOUTPUT>
(2 3 4 5 6 7)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
enumerate_interval(2, 7);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(tail(tail(enumerate_interval(2, 7))));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(2, 3, 4, 5, 6, 7)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    To enumerate the leaves of a tree, we can use<FOOTNOTE>This is, in fact,
    precisely the 
     <INDEX><USE>fringe</USE><SUBINDEX>as a tree enumeration</SUBINDEX></INDEX> 
    <SPLITINLINE>
      fringe
      <JAVASCRIPT><JAVASCRIPTINLINE>fringe</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>procedure
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE></SPACE><REF NAME="ex:fringe"></REF>.  Here we<APOS></APOS>ve renamed it
    to emphasize that it is part of a family of general sequence-manipulation
    <SPLITINLINE>
      procedures.
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET>
      <INDEX>tree<SUBINDEX>enumerating leaves of</SUBINDEX></INDEX>
      <INDEX><DECLARATION>enumerate_tree</DECLARATION></INDEX> 
      <NAME>enumerate_tree</NAME>
      <EXAMPLE>enumerate_tree_example</EXAMPLE>
      <EXPECTED>[ 3, [ 4, [ 5, null ] ] ]</EXPECTED>
      
(define (enumerate-tree tree)
   (cond ((null? tree) nil)
         ((not (pair? tree)) (list tree))
         (else (append (enumerate-tree (car tree))
                       (enumerate-tree (cdr tree))))))
      
      <JAVASCRIPT>
function enumerate_tree(tree) {
    return is_null(tree)
           ? null
           : ! is_pair(tree)
           ? list(tree)
           : append(enumerate_tree(head(tree)),
                    enumerate_tree(tail(tree)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>enumerate_tree_example</NAME>
      <REQUIRES>enumerate_tree</REQUIRES>
      
(enumerate-tree (list 1 (list 2 (list 3 4)) 5))
      
      <SCHEMEOUTPUT>
(1 2 3 4 5)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
enumerate_tree(list(1, list(2, list(3, 4)), 5));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(tail(enumerate_tree(list(1, list(2, list(3, 4)), 5))));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(1, 2, 3, 4, 5)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Now we can reformulate
    <SPLITINLINE>
      sum-odd-squares
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      even-fibs
      <JAVASCRIPT><JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as in the signal-flow diagrams.  For
    <SPLITINLINE>
      sum-odd-squares,
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    we enumerate the sequence of leaves of the tree, filter this to keep only
    the odd numbers in the sequence, square each element, and sum the results:
    <SNIPPET>
      <INDEX><DECLARATION>sum_odd_squares</DECLARATION></INDEX> 
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>simple_plus</REQUIRES>
      <REQUIRES>odd_definition</REQUIRES>
      <REQUIRES>enumerate_tree</REQUIRES>
      <EXAMPLE>sum_odd_squares_example</EXAMPLE>
      <EXPECTED>34</EXPECTED>
      
(define (sum-odd-squares tree)
   (accumulate +
               0
               (map square
                 (filter odd?
                  (enumerate-tree tree)))))
      
      <JAVASCRIPT>
function sum_odd_squares(tree) {
    return accumulate(plus, 
                      0, 
                      map(square, 
                          filter(is_odd, 
                                 enumerate_tree(tree))));
}
      </JAVASCRIPT>
    </SNIPPET>
    For
    <SPLITINLINE>
      even-fibs,
      <JAVASCRIPT><JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    we enumerate the integers from 0 to <LATEXINLINE>$n$</LATEXINLINE>, generate
    the Fibonacci number for each of these integers, filter the resulting
    sequence to keep only the even elements, and accumulate the results
    into a list:
    <SNIPPET>
      <INDEX><DECLARATION>even_fibs</DECLARATION></INDEX> 
      <REQUIRES>even_definition</REQUIRES>        
      <REQUIRES>fib_definition</REQUIRES>
      <REQUIRES>enumerate_interval</REQUIRES>
      <EXAMPLE>even_fibs_example</EXAMPLE>
      <EXPECTED>[ 2, [ 8, [ 34, null ] ] ]</EXPECTED>
      
(define (even-fibs n)
   (accumulate cons
               nil
               (filter even?
                 (map fib
                      (enumerate-interval 0 n)))))
      
      <JAVASCRIPT>
function even_fibs(n) {
    return accumulate(pair, 
                      null, 
                      filter(is_even, 
                             map(fib, 
                                 enumerate_interval(0, n))));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The value of expressing programs as sequence operations is that this
    helps us make program designs that are modular, that is, designs that
    are constructed by combining relatively independent pieces.  We can
    encourage modular design by providing a library of standard components
    together with a conventional interface for connecting the components
    in flexible ways.
  </TEXT>

  <TEXT>
    Modular construction
    <INDEX>modularity</INDEX>
    <INDEX>sequence(s)<SUBINDEX>as source of modularity</SUBINDEX></INDEX>
    is a powerful strategy for controlling complexity in
    engineering design.  In real signal-processing applications, for example,
    designers regularly build systems by cascading elements selected from
    standardized families of filters and transducers.  Similarly, sequence
    operations provide a library of standard program elements that we can mix
    and match.  For instance, we can reuse pieces from the
    <SPLITINLINE>
      sum-odd-squares
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_odd_squares</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      
	even-fibs
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>even_fibs</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedures
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in a program that constructs a list of the squares of the first
    <LATEXINLINE>$n+1$</LATEXINLINE> Fibonacci numbers:
    <SNIPPET>
      <NAME>list_fib_squares</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>fib_definition</REQUIRES>
      <REQUIRES>enumerate_interval</REQUIRES>
      <EXAMPLE>list_fib_squares_example</EXAMPLE>
      <EXPECTED>11</EXPECTED>
      
(define (list-fib-squares n)
  (accumulate cons
              nil
              (map square
                   (map fib
                        (enumerate-interval 0 n)))))
      
      <JAVASCRIPT>
function list_fib_squares(n) {
    return accumulate(pair, 
                      null, 
                      map(square, 
                          map(fib, 
                              enumerate_interval(0, n))));
}                         
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>list_fib_squares_example</NAME>
      <REQUIRES>list_fib_squares</REQUIRES>
      
(list-fib-squares 10)
      
      <SCHEMEOUTPUT>
(0 1 1 4 9 25 64 169 441 1156 3025)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
list_fib_squares(10);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(list_fib_squares(10));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(0, 1, 1, 4, 9, 25, 64, 169, 441, 1156, 3025)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    We can rearrange the pieces and use them in computing the product of the
    squares of the odd integers in a sequence:
    <SNIPPET>
      <NAME>product_of_squares_of_odd_elements</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>odd_definition</REQUIRES>
      <REQUIRES>simple_times</REQUIRES>
      <EXAMPLE>product_of_squares_of_odd_elements_example</EXAMPLE>
      <EXPECTED>225</EXPECTED>
      
(define (product-of-squares-of-odd-elements sequence)
  (accumulate *
              1
              (map square
                (filter odd? sequence))))
      
      <JAVASCRIPT>
function product_of_squares_of_odd_elements(sequence) {
    return accumulate(times, 
                      1, 
                      map(square, 
                          filter(is_odd, sequence)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>product_of_squares_of_odd_elements_example</NAME>
      <REQUIRES>product_of_squares_of_odd_elements</REQUIRES>
      
(product-of-squares-of-odd-elements (list 1 2 3 4 5))
      
      <SCHEMEOUTPUT>
225
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
product_of_squares_of_odd_elements(list(1, 2, 3, 4, 5));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
225
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    We can also formulate conventional data-processing applications in terms of
    sequence operations.  Suppose we have a sequence of personnel records and
    we want to find the salary of the highest-paid programmer. Assume that we
    have a selector salary that returns the salary
    of a record, and a predicate
    <SPLITINLINE>
      programmer?
      <JAVASCRIPT><JAVASCRIPTINLINE>is_programmer</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that tests if a record is for a programmer.  Then we can write
    <SNIPPET HIDE="yes">
      <NAME>linus</NAME>
      
      
      <JAVASCRIPT>
const my_records = list(list(&quot;Linus&quot;, &quot;programmer&quot;, 30000),
                        list(&quot;Richard&quot;, &quot;programmer&quot;, 25000),
                        list(&quot;Bill&quot;, &quot;manager&quot;, 2500000));
function is_programmer(record) {
    return head(tail(record)) === &quot;programmer&quot;;
}
function salary(record) {
    return head(tail(tail(record)));
}
salary_of_highest_paid_programmer(my_records);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXAMPLE>linus</EXAMPLE>
      <EXPECTED>30000</EXPECTED>
      
(define (salary-of-highest-paid-programmer records)
  (accumulate max
              0
              (map salary
                   (filter programmer? records))))
      
      <JAVASCRIPT>
function salary_of_highest_paid_programmer(records) {
    return accumulate(math_max, 
                      0, 
                      map(salary, 
                          filter(is_programmer, records)));
}
      </JAVASCRIPT>
    </SNIPPET>
    These examples give just a hint of the vast range of operations that
    can be expressed as sequence operations.<FOOTNOTE>
    <INDEX>Waters, Richard C.</INDEX>
    Richard Waters (1979) developed a program that automatically analyzes
    traditional 
    <INDEX>Fortran</INDEX>
    Fortran programs, viewing them in terms of maps, filters, and accumulations.
    He found that fully 90 percent of the code in the Fortran Scientific
    Subroutine Package fits neatly into this paradigm.  One of the reasons
    for the success of Lisp as a programming language is that lists provide a
    standard medium for expressing ordered collections so that they can be
    manipulated using higher-order operations. Many modern languages, such as
    Python, have learned this lesson.</FOOTNOTE>
  </TEXT>
  <TEXT>
    Sequences, implemented here as lists, serve as a conventional interface
    that permits us to combine processing modules.  Additionally, when we
    uniformly represent structures as sequences, we have localized the
    data-structure dependencies in our programs to a small number of sequence
    operations.  By changing these, we can experiment with alternative
    representations of sequences, while leaving the overall design of our
    programs intact.  We will exploit this capability in
    section<SPACE></SPACE><REF NAME="sec:streams"></REF>, when we generalize the
    sequence-processing paradigm to admit infinite sequences.
  </TEXT>

  <EXERCISE>
    Fill in the missing expressions to complete the following definitions of
    some basic list-manipulation operations as accumulations:
    <SNIPPET HIDE="yes">
      <NAME>map_append_length_example</NAME>
      
      
      <JAVASCRIPT>
map(math_sqrt, list(1, 2, 3, 4));
// append(list(1, 2, 3), list(4, 5, 6));
// length(list(1, 2, 3, 4));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(map(math_sqrt, list(1, 2, 3, 4)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET LATEX="yes" POSTPADDING="no">
      <INDEX><USE>length</USE><SUBINDEX><ORDER>accumulation</ORDER>as accumulation</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <INDEX><USE>map</USE><SUBINDEX><ORDER>accumulation</ORDER>as accumulation</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <INDEX><USE>append</USE><SUBINDEX><ORDER>accumulation</ORDER>as accumulation</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <EXAMPLE>map_append_length_example</EXAMPLE>
      
(define (map p sequence)
  (accumulate (lambda (x y) ??) nil sequence))

(define (append seq1 seq2)
  (accumulate cons ?? ??))

(define (length sequence)
  (accumulate ?? 0 sequence))
      
      <JAVASCRIPT>
function map(f, sequence) {
    return accumulate((x, y) =&gt; <METAPHRASE>??</METAPHRASE>, 
                      null, sequence);
}
function append(seq1, seq2) {
    return accumulate(pair, <METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>);
}
function length(sequence) {
    return accumulate(<METAPHRASE>??</METAPHRASE>, 0, sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>map_append_length_example</EXAMPLE>
	<EXPECTED>[ 1.4142135623730951, [ 1.7320508075688772, [ 2, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function map(f, sequence) {
    return accumulate((x, y) =&gt; pair(f(x), y),
                      null, 
                      sequence);
}
function append(seq1, seq2) {
    return accumulate(pair, seq2, seq1);
}
function length(sequence) {
    return accumulate((x, y) =&gt; y + 1,
                      0, 
                      sequence);
}
	</JAVASCRIPT>
	
	
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_33"></LABEL>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:horner"></LABEL>
    Evaluating a
    polynomial in <LATEXINLINE>$x$</LATEXINLINE> at a given value
    of <LATEXINLINE>$x$</LATEXINLINE> can be formulated as an accumulation.
    We evaluate the polynomial
    <LATEX>
      \[ a_{n} x^n +a_{n-1}x^{n-1}+\cdots + a_{1} x+a_{0} \]
    </LATEX>
    using a well-known algorithm called 
    <INDEX>polynomial(s)<SUBINDEX>evaluating with Horner<APOS></APOS>s rule</SUBINDEX></INDEX>
    <INDEX>Horner<APOS></APOS>s rule</INDEX>
    <EM>Horner<APOS></APOS>s rule</EM>, which structures the computation as
    <LATEX>
      \[ \left(\cdots (a_{n}  x+a_{n-1})x+\cdots +a_{1}\right) x+a_{0} \]
    </LATEX>
    In other words, we start with <LATEXINLINE>$a_{n}$</LATEXINLINE>, multiply
    by <LATEXINLINE>$x$</LATEXINLINE>, add <LATEXINLINE>$a_{n-1}$</LATEXINLINE>,
    multiply by <LATEXINLINE>$x$</LATEXINLINE>, and so on, until we reach
    <LATEXINLINE>$a_{0}$</LATEXINLINE>.<FOOTNOTE>According to 
    <INDEX>Knuth, Donald E.</INDEX>
    Knuth (1997b), this rule was formulated by
    <INDEX><ORDER>Horner</ORDER>Horner, W. G.</INDEX>
    W. G. Horner early in the nineteenth century, but the method was actually
    used by Newton over a hundred years earlier.  Horner<APOS></APOS>s rule evaluates
    the polynomial using fewer additions and multiplications than does the
    straightforward method of first computing
    <LATEXINLINE>$a_{n} x^n$</LATEXINLINE>, then adding
    <LATEXINLINE>$a_{n-1}x^{n-1}$</LATEXINLINE>, and so on.  In fact, it is
    possible to prove that any algorithm for evaluating arbitrary polynomials
    must use at least as many additions and multiplications as does
    Horner<APOS></APOS>s rule, and thus Horner<APOS></APOS>s rule is an 
    <INDEX>algorithm<SUBINDEX>optimal</SUBINDEX></INDEX>
    <INDEX>optimality<SUBINDEX>of Horner<APOS></APOS>s rule</SUBINDEX></INDEX>
    optimal algorithm for polynomial evaluation.  This was proved (for the
    number of additions) by
    <INDEX>Ostrowski, A. M.</INDEX>
    A. M. Ostrowski in a 1954 paper that essentially founded the modern study
    of optimal algorithms.  The analogous statement for multiplications was
    proved by 
    <INDEX>Pan, V. Y.</INDEX>
    V. Y. Pan in 1966.  The book by 
    <INDEX>Borodin, Alan</INDEX>
    <INDEX>Munro, Ian</INDEX>
    <CITATION>
      Borodin and Munro (1975)
    </CITATION> 
    provides an overview of these and other results about optimal
    algorithms.</FOOTNOTE>
    Fill in the following template to produce a
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that evaluates a polynomial using Horner<APOS></APOS>s rule. Assume that the
    coefficients of the polynomial are arranged in a sequence, from
    <LATEXINLINE>$a_{0}$</LATEXINLINE> through
    <LATEXINLINE>$a_{n}$</LATEXINLINE>.
    <SNIPPET LATEX="yes">
      <NAME>horner</NAME>
      <EXAMPLE>horner_eval_example</EXAMPLE>
      
(define (horner-eval x coefficient-sequence)
   (accumulate (lambda (this-coeff higher-terms) ??)
               0
               coefficient-sequence))
      
      <JAVASCRIPT>
function horner_eval(x, coefficient_sequence) {
    return accumulate((this_coeff, higher_terms) =&gt; <METAPHRASE>??</METAPHRASE>,
                      0, 
                      coefficient_sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    For example, to compute <LATEXINLINE>$1+3x+5x^3+x^5$</LATEXINLINE> at
    <LATEXINLINE>$x=2$</LATEXINLINE> you would evaluate
    <SNIPPET POSTPADDING="no">
      <NAME>horner_eval_example</NAME>
      <REQUIRES>horner</REQUIRES>
      
(horner-eval 2 (list 1 3 0 5 0 1))
      
      <JAVASCRIPT>
horner_eval(2, list(1, 3, 0, 5, 0, 1));
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<NAME>horner_solution</NAME>
	<EXAMPLE>horner_eval_example_2</EXAMPLE>
	<EXPECTED>79</EXPECTED>
	<JAVASCRIPT>
function horner_eval(x, coefficient_sequence) {
    return accumulate((this_coeff, higher_terms) =&gt; 
                      x * higher_terms + this_coeff,
                      0, 
                      coefficient_sequence);
}
	</JAVASCRIPT>
	
	
      </SNIPPET>
      <SNIPPET HIDE="yes" POSTPADDING="no">
	<NAME>horner_eval_example_2</NAME>
	<REQUIRES>horner_solution</REQUIRES>
	<EXAMPLE>horner_eval_example</EXAMPLE>
	
(horner-eval 2 (list 1 3 0 5 0 1))
	
	<JAVASCRIPT>
horner_eval(2, list(1, 3, 0, 5, 0, 1));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:countleaves-as-accumulation"></LABEL>
    Redefine
    <SPLITINLINE>
      count-leaves
      <JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE></SPACE><REF NAME="sec:trees"></REF> as an accumulation:
    <SNIPPET POSTPADDING="no" LATEX="yes">
      <INDEX><USE>count_leaves</USE><SUBINDEX><ORDER>accumulation</ORDER>as accumulation</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <EXAMPLE>count_leaves_example</EXAMPLE>
      
(define (count-leaves t)
   (accumulate ?? ?? (map ?? ??)))
          
          <JAVASCRIPT>
function count_leaves(t) {
    return accumulate(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>, map(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>));
}
          </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>count_leaves_example</EXAMPLE>
	<EXPECTED>4</EXPECTED>
	<JAVASCRIPT>
function count_leaves(t) {
    return accumulate((leaves, total) =&gt; leaves + total,
                      0, 
		      map(sub_tree =&gt; is_pair(sub_tree)
		                      ? count_leaves(sub_tree)
                                      : 1,
			  t));
}
	</JAVASCRIPT>
	
	
    </SNIPPET></SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:accumulate-n"></LABEL>
    The
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      accumulate-n
      <JAVASCRIPT><JAVASCRIPTINLINE>accumulate_n</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is similar to
    <SPLITINLINE>
      
      accumulate
      <JAVASCRIPT><JAVASCRIPTINLINE>accumulate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    except that it takes as its third argument a sequence of sequences, which
    are all assumed to have the same number of elements.  It applies the
    designated accumulation
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to combine all the first elements of the sequences, all the second elements
    of the sequences, and so on, and returns a sequence of the results.  For
    instance, if s is a sequence containing four
    sequences
    <SNIPPET EVAL="no">
      
((1 2 3) (4 5 6) (7 8 9) (10 11 12))
      
      <JAVASCRIPT>
list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9), list(10, 11, 12))
      </JAVASCRIPT>
    </SNIPPET>
    then the value of
    <SPLITINLINE>
      
	(accumulate-n + 0 s)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>accumulate_n(plus, 0, s)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should be the sequence
    <SPLITINLINE>
      (22 26 30).
      <JAVASCRIPT><JAVASCRIPTINLINE>list(22, 26, 30)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Fill in the missing expressions in the following definition of
    <SPLITINLINE>
      accumulate-n:
      <JAVASCRIPT><JAVASCRIPTINLINE>accumulate_n</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET LATEX="yes">
      <INDEX><USE>accumulate_n</USE><FRAGILE></FRAGILE></INDEX> 
      <EXAMPLE>example_2.36</EXAMPLE>
      
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
     nil
     (cons (accumulate op init ??)
           (accumulate-n op init ??))))
      
      <JAVASCRIPT>
function accumulate_n(op, init, seqs) {
    return is_null(head(seqs))
           ? null
           : pair(accumulate(op, init, <METAPHRASE>??</METAPHRASE>), 
                  accumulate_n(op, init, <METAPHRASE>??</METAPHRASE>));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET POSTPADDING="no">
	<NAME>accumulate_n</NAME>
	<EXAMPLE>example_2.36</EXAMPLE>
	<EXPECTED>[ 22, [ 26, [ 30, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function accumulate_n(op, init, seqs) {
    return is_null(head(seqs))
           ? null
           : pair(accumulate(op, init, map(x =&gt; head(x), seqs)),
                  accumulate_n(op, init, map(x =&gt; tail(x), seqs)));
}
	</JAVASCRIPT>
	
	
    </SNIPPET></SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_2.36</NAME>
      <REQUIRES>simple_plus</REQUIRES>
      <JAVASCRIPT>
const seq_seq = list(list(1, 2, 3), list(4, 5, 6), 
                     list(7, 8, 9), list(10, 11, 12));
accumulate_n(plus, 0, seq_seq);
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:matrix-ops"></LABEL>
    Suppose we represent vectors <LATEXINLINE>$v=(v_{i})$</LATEXINLINE> as
    <INDEX>matrix, represented as sequence</INDEX>
    <INDEX>vector (mathematical)<SUBINDEX>represented as sequence</SUBINDEX></INDEX>
    <INDEX>vector (mathematical)<SUBINDEX>operations on</SUBINDEX></INDEX>
    sequences of numbers, and matrices <LATEXINLINE>$m=(m_{ij})$</LATEXINLINE>
    as sequences of vectors (the rows of the matrix). For example, the matrix
    <LATEX>
      \[ \left[ 
      \begin{array}{llll}
      1 &amp; 2 &amp; 3 &amp; 4\\
      4 &amp; 5 &amp; 6 &amp; 6\\
      6 &amp; 7 &amp; 8 &amp; 9\\
      \end{array}
      \right] \]
    </LATEX>
    <SPLIT>
      
        is represented as the sequence
	((1 2 3 4) (4 5 6 6) (6 7 8 9)).
      
      <JAVASCRIPT>
	is represented as the following sequence:
	<SNIPPET EVAL="no">
	  <JAVASCRIPT>
list(list(1, 2, 3, 4),
     list(4, 5, 6, 6),
     list(6, 7, 8, 9))
	  </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
    With this representation, we can use sequence operations to concisely
    express the basic matrix and vector operations.  These operations
    (which are described in any book on matrix algebra) are the following:
    <TABLE>
      <TR>
	<TD>
        <SPLITINLINE>
	  
	    (dot-product 
	    <LATEXINLINE>$v$ $w$</LATEXINLINE>)
	  
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>dot_product(</JAVASCRIPTINLINE><LATEXINLINE>$v$</LATEXINLINE><JAVASCRIPTINLINE>,
	  </JAVASCRIPTINLINE><LATEXINLINE>$w$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	</TD>
	<TD>
	returns the sum <LATEXINLINE>$\sum_{i}v_{i} w_{i}$</LATEXINLINE>;
	</TD>
      </TR>
      <TR>
	<TD>
        <SPLITINLINE>
	  
	    (matrix-*-vector
	  <LATEXINLINE>$m$</LATEXINLINE> <LATEXINLINE>$v$</LATEXINLINE>)
	  <JAVASCRIPT><JAVASCRIPTINLINE>matrix_times_vector(</JAVASCRIPTINLINE><LATEXINLINE>$m$</LATEXINLINE><JAVASCRIPTINLINE>,
	  </JAVASCRIPTINLINE><LATEXINLINE>$v$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	</TD>
	<TD>
	returns the vector <LATEXINLINE>$t$</LATEXINLINE>, where
	<LATEXINLINE>$t_{i} =\sum_{j}m_{ij}v_{j}$</LATEXINLINE>;
	</TD>
      </TR>
      <TR>
	<TD>
        <SPLITINLINE>
	  
	    (matrix-*-matrix 
	    <LATEXINLINE>$m\ n$</LATEXINLINE>)
	  
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>matrix_times_matrix(</JAVASCRIPTINLINE><LATEXINLINE>$m$</LATEXINLINE><JAVASCRIPTINLINE>,
	  </JAVASCRIPTINLINE><LATEXINLINE>$n$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	</TD>
	<TD>
	returns the matrix <LATEXINLINE>$p$</LATEXINLINE>, where
	<LATEXINLINE>$p_{ij}=\sum_{k} m_{ik}n_{kj}$</LATEXINLINE>;
	</TD>
      </TR>
      <TR>
	<TD>
        <SPLITINLINE>
	  
	    (transpose
	    <LATEXINLINE>$m$</LATEXINLINE>)<JAVASCRIPT><JAVASCRIPTINLINE>transpose(</JAVASCRIPTINLINE><LATEXINLINE>$m$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	</TD>
	<TD>
	returns the matrix <LATEXINLINE>$n$</LATEXINLINE>, where
	<LATEXINLINE>$n_{ij}=m_{ji}$</LATEXINLINE>.
	</TD>
      </TR>
    </TABLE>
    We can define the dot product as<FOOTNOTE>This definition uses
    <SPLITINLINE>
      
	the extended version of map
	described in footnote<SPACE></SPACE><REF NAME="foot:generalmap"></REF>.
      
      <JAVASCRIPT>
	the function <JAVASCRIPTINLINE>accumulate_n</JAVASCRIPTINLINE>
	from exercise<SPACE></SPACE><REF NAME="ex:accumulate-n"></REF>.
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>dot_product</DECLARATION><FRAGILE></FRAGILE></INDEX> 
      <NAME>dot_product</NAME>
      <EXAMPLE>dot_product_example</EXAMPLE>
      <EXPECTED>11</EXPECTED>
      <REQUIRES>simple_plus</REQUIRES>
      <REQUIRES>simple_times</REQUIRES>
      <REQUIRES>accumulate_n</REQUIRES>
      
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
      
      <JAVASCRIPT>
function dot_product(v, w) {
    return accumulate(plus, 0, accumulate_n(times, 1, list(v, w)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>dot_product_example</NAME>
      
(dot-product (list 1 2) (list 3 4))
      
      <JAVASCRIPT>
dot_product(list(1, 2), list(3, 4));
      </JAVASCRIPT>
    </SNIPPET>
    Fill in the missing expressions in the following
    <SPLITINLINE>
      procedures
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for computing the other matrix operations.  (The
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      
	accumulate-n
	is defined in 	
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>accumulate_n</JAVASCRIPTINLINE>
	is declared in       
      </JAVASCRIPT>
    </SPLITINLINE>
    exercise<SPACE></SPACE><REF NAME="ex:accumulate-n"></REF>.)
    <SNIPPET POSTPADDING="no" LATEX="yes">
      <INDEX><USE>matrix_times_vector</USE><FRAGILE></FRAGILE></INDEX> 
      <INDEX><USE>matrix_times_matrix</USE><FRAGILE></FRAGILE></INDEX> 
      <INDEX><USE>transpose</USE> a matrix<FRAGILE></FRAGILE></INDEX>
      
(define (matrix-*-vector m v)
  (map ?? m))

(define (transpose mat)
  (accumulate-n ?? ?? mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map ?? m)))
      
      <JAVASCRIPT>
function matrix_times_vector(m, v) {
    return map(<METAPHRASE>??</METAPHRASE>, m);
}
function transpose(mat) {
    return accumulate_n(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>, mat);
}
function matrix_times_matrix(m, n) {
    const cols = transpose(n);
    return map(<METAPHRASE>??</METAPHRASE>, m);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<NAME>exercise_2_37_solution</NAME>
	<REQUIRES>accumulate_n</REQUIRES>
	<REQUIRES>dot_product</REQUIRES>
	<EXAMPLE>example_2.37</EXAMPLE>
	<EXPECTED>[ 140, [ 160, [ 60, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function matrix_times_vector(m, v) {
    return map(row =&gt; dot_product(row, v), m);
}
function transpose(mat) {
    return accumulate_n(pair, null, mat);
}
function matrix_times_matrix(n, m) {
    const cols = transpose(m);
    return map(x =&gt; map(y =&gt; dot_product(x, y), cols), n);
}
	</JAVASCRIPT>
	
	
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_2.37</NAME>
      <JAVASCRIPT>
const v = list(10, 20, 30);
const m1 = list(list(1, 2, 3), list(3, 5, 1), list(1, 1, 1));
const m2 = list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9));

matrix_times_vector(m1, v);
// transpose(m1);
// matrix_times_matrix(m1, m2);
      </JAVASCRIPT>
      
      
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:fold-right-left"></LABEL>
    The
     <INDEX><USE>accumulate</USE><SUBINDEX><ORDER>same as fold right</ORDER>same as fold_right</SUBINDEX></INDEX>
     <INDEX><USE>fold_right</USE></INDEX> 
    <SPLITINLINE>
      accumulate
      <JAVASCRIPT><JAVASCRIPTINLINE>accumulate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is also known as
    <SPLITINLINE>
      
      fold-right,
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_right</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    because it combines the first element of the sequence with the result
    of combining all the elements to the right.  There is also a
    <SPLITINLINE>
      fold-left,
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_left</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which is similar to
    <SPLITINLINE>
      fold-right,
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_right</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    except that it combines elements working in the opposite direction:
    <SNIPPET>
      <INDEX><DECLARATION>fold_left</DECLARATION><FRAGILE></FRAGILE></INDEX> 
      <NAME>fold_left</NAME>
      <EXAMPLE>fold_left_example</EXAMPLE>
      <EXPECTED>[ [ [ null, [ 1, null ] ], [ 2, null ] ], [ 3, null ] ]</EXPECTED>
      
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
      result
      (iter (op result (car rest))
            (cdr rest))))
  (iter initial sequence))
      
      <JAVASCRIPT>
function fold_left(op, initial, sequence) {
    function iter(result, rest) {
        return is_null(rest)
               ? result
               : iter(op(result, head(rest)), 
                      tail(rest));
    }
    return iter(initial, sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>fold_right</NAME>
      <EXAMPLE>fold_right_example</EXAMPLE>
      
;; same as accumulate
(define fold_right accumulate)
      
      <JAVASCRIPT>
// same as accumulate
const fold_right = accumulate;
      </JAVASCRIPT>
    </SNIPPET>
    What are the values of
    <SNIPPET HIDE="yes">
      <NAME>simple_divide</NAME>
      
;; in Scheme, the operator symbol * is procedure name
      
      <JAVASCRIPT>
function divide(x, y) {
    return x / y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>fold_right_example_1</NAME>
      <REQUIRES>fold_right</REQUIRES>
      <REQUIRES>simple_divide</REQUIRES>
      
(fold-right / 1 (list 1 2 3))
      
      <JAVASCRIPT>
fold_right(divide, 1, list(1, 2, 3));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>fold_left_example_1</NAME>
      <REQUIRES>fold_left</REQUIRES>
      <REQUIRES>simple_divide</REQUIRES>
      
(fold-left / 1 (list 1 2 3))
      
      <JAVASCRIPT>
fold_left(divide, 1, list(1, 2, 3));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>fold_right_example</NAME>
      <REQUIRES>fold_right</REQUIRES>
      
(fold-right list nil (list 1 2 3))
      
      <JAVASCRIPT>
fold_right(list, null, list(1, 2, 3));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(fold_right(list, null, list(1, 2, 3)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET>
      <NAME>fold_left_example</NAME>
      <REQUIRES>fold_left</REQUIRES>
      
(fold-left list nil (list 1 2 3))
      
      <JAVASCRIPT>
fold_left(list, null, list(1, 2, 3));
      </JAVASCRIPT>
    </SNIPPET>
    Give a property that
    <SPLITINLINE>
      op
      <JAVASCRIPT><JAVASCRIPTINLINE>op</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    should satisfy to guarantee that
    <SPLITINLINE>
      fold-right
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_right</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      fold-left
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_left</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will produce the same values for any sequence.
    <SOLUTION>
      <OL>
	<LI>
          <SNIPPET>
	    <NAME>fold_right_example_1_solution</NAME>
	    <REQUIRES>fold_right_example_1</REQUIRES>
	    <EXPECTED>1.5</EXPECTED>
            
            
            <JAVASCRIPT>
1.5
            </JAVASCRIPT>
            <JAVASCRIPT_RUN>
// result: 1.5
            </JAVASCRIPT_RUN>
          </SNIPPET>
	</LI>
	<LI>
          <SNIPPET>
	    <NAME>fold_left_example_1_solution</NAME>
	    <REQUIRES>fold_left_example_1</REQUIRES>
	    <EXPECTED>0.16666666666666666</EXPECTED>
            
            
            <JAVASCRIPT>
0.16666666666666666
            </JAVASCRIPT>
            <JAVASCRIPT_RUN>
// result: 0.16666666666666666
            </JAVASCRIPT_RUN>
          </SNIPPET>
	</LI>
	<LI>
          <SNIPPET>
	    <NAME>fold_right_example_solution</NAME>
	    <REQUIRES>fold_right_example</REQUIRES>
	    <EXPECTED>2</EXPECTED>
            
            
            <JAVASCRIPT>
[1, [[2, [[3, [null, null]], null]], null]]
            </JAVASCRIPT>
            <JAVASCRIPT_RUN>
// result: [1, [[2, [[3, [null, null]], null]], null]]
            </JAVASCRIPT_RUN>
          </SNIPPET>
	</LI>
	<LI>
          <SNIPPET>
	    <NAME>fold_left_example_solution</NAME>
	    <REQUIRES>fold_left_example</REQUIRES>
	    <EXPECTED>[ [ [ null, [ 1, null ] ], [ 2, null ] ], [ 3, null ] ]</EXPECTED>
            
            
            <JAVASCRIPT>
[[[null, [1, null]], [2, null]], [3, null]]
            </JAVASCRIPT>
            <JAVASCRIPT_RUN>
// result: [[[null, [1, null]], [2, null]], [3, null]]
            </JAVASCRIPT_RUN>
          </SNIPPET>
	</LI>
      </OL>
      We can guarantee that <JAVASCRIPTINLINE>fold_right</JAVASCRIPTINLINE>
      and <JAVASCRIPTINLINE>fold_left</JAVASCRIPTINLINE> produce
      the same values for any sequence, if we require that
      <JAVASCRIPTINLINE>op</JAVASCRIPTINLINE> is commutative and associative.
      They also produce the same values, if
      <JAVASCRIPTINLINE>op</JAVASCRIPTINLINE> is just associative and the
      argument <JAVASCRIPTINLINE>initial</JAVASCRIPTINLINE> is a left and right
      neutral element with respect to <JAVASCRIPTINLINE>op</JAVASCRIPTINLINE>.
      <SNIPPET>
	<REQUIRES>simple_plus</REQUIRES>
	<REQUIRES>fold_right</REQUIRES>
	<EXPECTED>6</EXPECTED>
	<JAVASCRIPT>
fold_right(plus, 0, list(1, 2, 3));
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<REQUIRES>simple_plus</REQUIRES>
	<REQUIRES>fold_left</REQUIRES>
	<EXPECTED>6</EXPECTED>
	<JAVASCRIPT>
fold_left(plus, 0, list(1, 2, 3));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Complete the following definitions of reverse
     <INDEX><USE>reverse</USE><SUBINDEX><ORDER>folding</ORDER>as folding</SUBINDEX></INDEX>
    (exercise<SPACE></SPACE><REF NAME="ex:reverse"></REF>) in terms of
    <SPLITINLINE>
      fold-right
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_right</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      fold-left
      <JAVASCRIPT><JAVASCRIPTINLINE>fold_left</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE></SPACE><REF NAME="ex:fold-right-left"></REF>:
    <SNIPPET LATEX="yes">
      <EXAMPLE>reverse_example</EXAMPLE>
      
(define (reverse sequence)
  (fold-right (lambda (x y) ??) nil sequence))
      
      <JAVASCRIPT>
function reverse(sequence) {
    return fold_right((x, y) =&gt; <METAPHRASE>??</METAPHRASE>, null, sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET LATEX="yes" POSTPADDING="no">
      <EXAMPLE>reverse_example</EXAMPLE>
      
(define (reverse sequence)
  (fold-left (lambda (x y) ??) nil sequence))
      
      <JAVASCRIPT>
function reverse(sequence) {
    return fold_left((x, y) =&gt; <METAPHRASE>??</METAPHRASE>, null, sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<NAME>reverse_example_2</NAME>
	<JAVASCRIPT>
reverse(list(1, 4, 5, 9, 16, 25));
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
head(reverse(list(1, 4, 5, 9, 16, 25)));
	</JAVASCRIPT_TEST>
      </SNIPPET>
      <SNIPPET>
	<REQUIRES>fold_right</REQUIRES>
	<EXAMPLE>reverse_example_2</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>
function reverse(sequence) {
    return fold_right((x, y) =&gt; append(y, list(x)), 
                      null, sequence);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<REQUIRES>fold_left</REQUIRES>
	<EXAMPLE>reverse_example_2</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>
function reverse(sequence) {
    return fold_left((x, y) =&gt; pair(y, x), null, sequence);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_39"></LABEL>
  </EXERCISE>

  <INDEX>sequence(s)<SUBINDEX>operations on</SUBINDEX><CLOSE></CLOSE></INDEX>

  <SUBHEADING>
    <NAME>Nested Mappings</NAME>
  </SUBHEADING>

  <LABEL NAME="sec:nested-mappings"></LABEL>
  <INDEX>mapping<SUBINDEX>nested</SUBINDEX><OPEN></OPEN></INDEX>

  <TEXT>
    We can extend the sequence paradigm to include many computations that are
    commonly expressed using nested loops.<FOOTNOTE>This approach to nested
    mappings was shown to us by 
    <INDEX>Turner, David</INDEX>
    David Turner, whose languages 
    <INDEX>KRC</INDEX>
    KRC and 
    <INDEX>Miranda</INDEX>
    Miranda provide elegant formalisms for dealing with these constructs.  The
    examples in this section (see also
    exercise<SPACE></SPACE><REF NAME="ex:8queens"></REF>) are adapted from Turner 1981.
    In section<SPACE></SPACE><REF NAME="sec:exploiting-streams"></REF>, we<APOS></APOS>ll see
    how this approach generalizes to infinite sequences.</FOOTNOTE>
    Consider this problem: Given a positive integer
    <LATEXINLINE>$n$</LATEXINLINE>, find all ordered pairs of distinct positive
    integers <LATEXINLINE>$i$</LATEXINLINE> and <LATEXINLINE>$j$</LATEXINLINE>,
    where <LATEXINLINE>$1\leq j &lt; i\leq n$</LATEXINLINE>, such that
    <LATEXINLINE>$i +j$</LATEXINLINE> is prime.  For example, if
    <LATEXINLINE>$n$</LATEXINLINE> is 6, then the pairs are the following:
    <LATEX>
      \[
      \begin{array}{c|ccccccc}
      i     &amp; 2 &amp; 3 &amp; 4 &amp; 4 &amp; 5 &amp; 6 &amp; 6 \\
      j     &amp; 1 &amp; 2 &amp; 1 &amp; 3 &amp; 2 &amp; 1 &amp; 5 \\
      \hline
      i+j   &amp; 3 &amp; 5 &amp; 5 &amp; 7 &amp; 7 &amp; 7 &amp; 11
      \end{array}
      \]
    </LATEX>
    A natural way to organize this computation is to generate the sequence
    of all ordered pairs of positive integers less than or equal to
    <LATEXINLINE>$n$</LATEXINLINE>, filter to select those pairs whose sum is
    prime, and then, for each pair <LATEXINLINE>$(i, j)$</LATEXINLINE> that
    passes through the filter, produce the triple
    <LATEXINLINE>$(i, j, i+j)$</LATEXINLINE>.
  </TEXT>

  <TEXT>
    Here is a way to generate the sequence of pairs: For each integer
    <LATEXINLINE>$i\leq n$</LATEXINLINE>, enumerate the integers
    <LATEXINLINE>$j &lt; i$</LATEXINLINE>, and for each such
    <LATEXINLINE>$i$</LATEXINLINE> and <LATEXINLINE>$j$</LATEXINLINE>
    generate the pair <LATEXINLINE>$(i, j)$</LATEXINLINE>.  In terms of
    sequence operations, we map along the sequence
    <SPLITINLINE>
      (enumerate-interval 1 n).
      <JAVASCRIPT><JAVASCRIPTINLINE>enumerate_interval(1, n)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    For each <LATEXINLINE>$i$</LATEXINLINE> in this sequence, we map along the
    sequence
    <SPLITINLINE>
      (enumerate-interval 1 (- i 1)).
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>enumerate_interval(1, i - 1)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    For each <LATEXINLINE>$j$</LATEXINLINE> in this latter sequence, we
    generate the pair
    <SPLITINLINE>
      (list i j).
      <JAVASCRIPT><JAVASCRIPTINLINE>list(i, j)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    This gives us a sequence of pairs for each <LATEXINLINE>$i$</LATEXINLINE>.
    Combining all the sequences for all the <LATEXINLINE>$i$</LATEXINLINE> (by
    accumulating with append) produces the
    required sequence of pairs:<FOOTNOTE>We<APOS></APOS>re representing a pair here
    as a list of two elements rather than as
    <SPLITINLINE>
      a Lisp pair.
    <JAVASCRIPT>an ordinary pair.</JAVASCRIPT></SPLITINLINE>
    Thus, the <QUOTE>pair</QUOTE> <LATEXINLINE>$(i, j)$</LATEXINLINE> is
    represented as
    <SPLITINLINE>
      (list i j),
      <JAVASCRIPT><JAVASCRIPTINLINE>list(i, j)</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    not
    <SPLITINLINE>
      (cons i j).
      <JAVASCRIPT><JAVASCRIPTINLINE>pair(i, j)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET HIDE="yes">
      <NAME>enumerate_interval_n</NAME>
      
      
      <JAVASCRIPT>
const n = 6;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <REQUIRES>enumerate_interval</REQUIRES>
      <REQUIRES>enumerate_interval_n</REQUIRES>
      <EXPECTED>15</EXPECTED>
      
;; replace n below by the desired number
(accumulate append
  nil
  (map (lambda (i)
         (map (lambda (j) (list i j))
              (enumerate-interval 1 (- i 1))))
       (enumerate-interval 1 n)))
      
      <JAVASCRIPT>
accumulate(append, 
           null, 
           map(i =&gt; map(j =&gt; list(i, j),
                        enumerate_interval(1, i - 1)),
               enumerate_interval(1, n)));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(accumulate(append, 
           null, 
           map(i =&gt; map(j =&gt; list(i, j),
                        enumerate_interval(1, i - 1)),
               enumerate_interval(1, n))));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    The combination of mapping and accumulating with
    append is so common in this sort of program
    that we will isolate it as a separate
    <SPLITINLINE>
      procedure:
      <JAVASCRIPT>function:</JAVASCRIPT>
      </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>flatmap</DECLARATION></INDEX>
      <NAME>flatmap</NAME>
      <EXAMPLE>flatmap_example</EXAMPLE>
      <EXPECTED>8</EXPECTED>
      
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
          
          <JAVASCRIPT>
function flatmap(f, seq) {
    return accumulate(append, null, map(f, seq));
}
          </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>flatmap_example</NAME>
      
      
      <JAVASCRIPT>
flatmap(x =&gt; list(x, x), list(1, 2, 3, 4));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(flatmap(x =&gt; list(x, x), list(1, 2, 3, 4)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    Now filter this sequence of pairs to find those whose sum is prime. The
    filter predicate is called for each element of the sequence; its argument
    is a pair and it must extract the integers from the pair. Thus, the
    predicate to apply to each element in the sequence is
    <SNIPPET>
      <NAME>prime_sum</NAME>
      <REQUIRES>prime_definition</REQUIRES>
      <EXAMPLE>prime_sum_example</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      
(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))
      
      <JAVASCRIPT>
function is_prime_sum(pair) {
    return is_prime(head(pair) + head(tail(pair)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>prime_sum_example</NAME>
      
(prime-sum? (list 8 9))
      
      <JAVASCRIPT>
is_prime_sum(list(8, 9));
      </JAVASCRIPT>
    </SNIPPET>
    Finally, generate the sequence of results by mapping over the filtered
    pairs using the following
    <SPLITINLINE>
      procedure,
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which constructs a triple consisting of the two elements of the pair along
    with their sum:
    <SNIPPET>
      <NAME>make_pair_sum</NAME>
      <EXAMPLE>make_pair_sum_example</EXAMPLE>
      <EXPECTED>[ 8, [ 9, [ 17, null ] ] ]</EXPECTED>
      
(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))
      
      <JAVASCRIPT>
function make_pair_sum(pair) {
    return list(head(pair), head(tail(pair)), 
                head(pair) + head(tail(pair)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_pair_sum_example</NAME>
      
(make-pair-sum (list 8 9))
      
      <JAVASCRIPT>
make_pair_sum(list(8, 9));
      </JAVASCRIPT>
    </SNIPPET>
    Combining all these steps yields the complete
    <SPLITINLINE>
      procedure:
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>prime_sum_pairs</DECLARATION></INDEX> 
      <NAME>prime_sum_pairs</NAME>
      <REQUIRES>make_pair_sum</REQUIRES>
      <REQUIRES>prime_sum</REQUIRES>
      <REQUIRES>flatmap</REQUIRES>
      <REQUIRES>enumerate_interval</REQUIRES>
      <EXAMPLE>prime_sum_pairs_example</EXAMPLE>
      <EXPECTED>7</EXPECTED>
      
(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (flatmap
                 (lambda (i)
                   (map (lambda (j) (list i j))
                        (enumerate-interval 1 (- i 1))))
                 (enumerate-interval 1 n)))))
      
      <JAVASCRIPT>
function prime_sum_pairs(n) {
    return map(make_pair_sum, 
               filter(is_prime_sum, 
                      flatmap(i =&gt; map(j =&gt; list(i, j), 
                                       enumerate_interval(1, i - 1)),
                              enumerate_interval(1, n))));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>prime_sum_pairs_example</NAME>
      
(prime-sum-pairs 15)
      
      <JAVASCRIPT>
prime_sum_pairs(6);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(prime_sum_pairs(6));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Nested mappings are also useful for sequences other than those that
    enumerate intervals.  Suppose we wish to generate all the 
    <INDEX>set<SUBINDEX>permutations of</SUBINDEX></INDEX>
    <INDEX>permutations of a set</INDEX>
    permutations
    of a set <LATEXINLINE>$S$</LATEXINLINE>; that is, all the ways of ordering
    the items in the set.  For instance, the permutations of
    <LATEXINLINE>$\{1, 2, 3\}$</LATEXINLINE> are
    <LATEXINLINE>$\{1, 2, 3\}$</LATEXINLINE>,
    <LATEXINLINE>$\{ 1, 3, 2\}$</LATEXINLINE>,
    <LATEXINLINE>$\{2, 1, 3\}$</LATEXINLINE>,
    <LATEXINLINE>$\{ 2, 3, 1\}$</LATEXINLINE>,
    <LATEXINLINE>$\{ 3, 1, 2\}$</LATEXINLINE>, and
    <LATEXINLINE>$\{ 3, 2, 1\}$</LATEXINLINE>.  Here is a plan for generating
    the permutations of<SPACE></SPACE><LATEXINLINE>$S$</LATEXINLINE>: For each item
    <LATEXINLINE>$x$</LATEXINLINE> in <LATEXINLINE>$S$</LATEXINLINE>,
    recursively generate the sequence of permutations of
    <LATEXINLINE>$S-x$</LATEXINLINE>,<FOOTNOTE>The set
    <LATEXINLINE>$S-x$</LATEXINLINE> is the set of all elements of
    <LATEXINLINE>$S$</LATEXINLINE>, excluding
    <LATEXINLINE>$x$</LATEXINLINE>.</FOOTNOTE> and adjoin
    <LATEXINLINE>$x$</LATEXINLINE> to the front of each one.  This yields, for
    each <LATEXINLINE>$x$</LATEXINLINE> in <LATEXINLINE>$S$</LATEXINLINE>, the
    sequence of permutations of <LATEXINLINE>$S$</LATEXINLINE> that begin
    with<SPACE></SPACE><LATEXINLINE>$x$</LATEXINLINE>.  Combining these sequences for
    all <LATEXINLINE>$x$</LATEXINLINE> gives all the permutations
    of<SPACE></SPACE><LATEXINLINE>$S$</LATEXINLINE>:<FOOTNOTE>
    <INDEX><ORDER>0a5</ORDER><JAVASCRIPTINLINE>//</JAVASCRIPTINLINE> (for comments in programs)</INDEX>
    <INDEX>comments in programs</INDEX>
    <INDEX>program<SUBINDEX>comments in</SUBINDEX></INDEX>
    <INDEX>slash (double slash <JAVASCRIPTINLINE>//</JAVASCRIPTINLINE> for comments in programs)</INDEX>
    <SPLITINLINE>
      Semicolons in Scheme code are
      <JAVASCRIPT>The character sequence <JAVASCRIPTINLINE>//</JAVASCRIPTINLINE>
      in JavaScript programs is</JAVASCRIPT>
    </SPLITINLINE>
    used to introduce <EM>comments</EM>. Everything from
    <SPLITINLINE>
      the semicolon
      <JAVASCRIPT><JAVASCRIPTINLINE>//</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to the end of the line is ignored by the interpreter.  In this book we
    don<APOS></APOS>t use many comments; we try to make our programs self-documenting
    by using descriptive names.</FOOTNOTE>
    <INDEX>permutations of a set<SUBINDEX><DECLARATION>permutations</DECLARATION></SUBINDEX></INDEX>
    <SNIPPET>
      <REQUIRES>flatmap</REQUIRES>
      <EXAMPLE>permutations_example</EXAMPLE>
      <EXPECTED>6</EXPECTED>
      
(define (permutations s)
  (if (null? s)             ; empty set?
    (list nil)              ; sequence containing empty set
    (flatmap (lambda (x)
               (map (lambda (p) (cons x p))
                    (permutations (remove x s))))
             s)))
      
      <JAVASCRIPT>
function permutations(s) {
    return is_null(s)             // empty set?
           ? list(null)           // sequence containing empty set
           : flatmap(x =&gt; map(p =&gt; pair(x, p),
                              permutations(remove(x, s))),
                     s);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>permutations_example</NAME>
      
(permutations (list 1 2 3))
      
      <JAVASCRIPT>
permutations(list(1, 2, 3));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(permutations(list(1, 2, 3)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    Notice how this strategy reduces the problem of generating permutations of
    <LATEXINLINE>$S$</LATEXINLINE> to the problem of generating the
    permutations of sets with fewer elements than
    <LATEXINLINE>$S$</LATEXINLINE>.  In the terminal case, we work our way down
    to the empty list, which represents a set of no elements. For this, we
    generate
    <SPLITINLINE>
      (list nil),
      <JAVASCRIPT><JAVASCRIPTINLINE>list(null)</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which is a sequence with one item, namely the set with no elements.  The
    <SPLITINLINE>
      remove
      <JAVASCRIPT><JAVASCRIPTINLINE>remove</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    used in permutations returns all the items in
    a given sequence except for a given item.  This can be expressed as a
    simple filter:
    <SNIPPET POSTPADDING="no">
      <INDEX><DECLARATION>remove</DECLARATION></INDEX> 
      <NAME>remove</NAME>
      <EXAMPLE>remove_example</EXAMPLE>
      <EXPECTED>4</EXPECTED>
      
(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))
      
      <JAVASCRIPT>
function remove(item, sequence) {
    return filter(x =&gt; ! (x === item),
                  sequence);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>remove_example</NAME>
      
	(remove 3 (list 1 2 3 4 5))
      
      <JAVASCRIPT>
length(remove(3, list(1, 2, 3, 4, 5)));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(remove(3, list(1, 2, 3, 4, 5)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    Write a
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>unique_pairs</USE></INDEX> 
    <SPLITINLINE>
      unique-pairs
      <JAVASCRIPT><JAVASCRIPTINLINE>unique_pairs</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that, given an integer <LATEXINLINE>$n$</LATEXINLINE>, generates the
    sequence of pairs <LATEXINLINE>$(i, j)$</LATEXINLINE> with
    <LATEXINLINE>$1\leq j &lt; i\leq n$</LATEXINLINE>.  Use
    <SPLITINLINE>
      unique-pairs
      <JAVASCRIPT><JAVASCRIPTINLINE>unique_pairs</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to simplify the definition of
    <SPLITINLINE>
      prime-sum-pairs
      <JAVASCRIPT><JAVASCRIPTINLINE>prime_sum_pairs</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    given above.
    <SOLUTION>
      <SNIPPET>
	<NAME>solution_2.40</NAME>
	<REQUIRES>enumerate_interval</REQUIRES>
	<REQUIRES>make_pair_sum</REQUIRES>
	<REQUIRES>prime_sum</REQUIRES>
	<REQUIRES>flatmap</REQUIRES>
	<EXAMPLE>example_2.40</EXAMPLE>
	<EXPECTED>7</EXPECTED>
	<JAVASCRIPT>
function unique_pairs(n) {
    return flatmap(i =&gt; map(j =&gt; list(i, j), 
                            enumerate_interval(1, i - 1)), 
                   enumerate_interval(1, n));
}
function prime_sum_pairs(n) {
    return map(make_pair_sum, 
               filter(is_prime_sum, 
                      unique_pairs(n)));
}
	</JAVASCRIPT>
	
	
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_2.40</NAME>
	<JAVASCRIPT>
prime_sum_pairs(6);
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
length(prime_sum_pairs(6));
	</JAVASCRIPT_TEST>
	
	
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_40"></LABEL>
  </EXERCISE>

  <EXERCISE>
    Write a
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to find all ordered triples of distinct positive integers
    <LATEXINLINE>$i$</LATEXINLINE>, <LATEXINLINE>$j$</LATEXINLINE>,
    and<SPACE></SPACE><LATEXINLINE>$k$</LATEXINLINE> less than or equal to a given
    integer <LATEXINLINE>$n$</LATEXINLINE> that sum to a given integer
    <LATEXINLINE>$s$</LATEXINLINE>.
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>enumerate_interval</REQUIRES>
	<REQUIRES>flatmap</REQUIRES>
	<EXAMPLE>example_2.41</EXAMPLE>
	<EXPECTED>3</EXPECTED>
	<JAVASCRIPT>
function unique_triples(n) {
    return flatmap(i =&gt; flatmap(j =&gt; map(k =&gt; list(i, j, k),
                                         enumerate_interval(1, j - 1)),
                                enumerate_interval(1, i - 1)),
                   enumerate_interval(1, n));
}
function plus(x, y) {
    return x + y;
}
function triples_that_sum_to(s, n) {
    return filter(items =&gt; accumulate(plus, 0, items) === s,
                  unique_triples(n));
}
	</JAVASCRIPT>
	
	
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_2.41</NAME>
	<JAVASCRIPT>
triples_that_sum_to(10, 6);
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
length(triples_that_sum_to(10, 6));
	</JAVASCRIPT_TEST>
	
	
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_41"></LABEL>
  </EXERCISE>
      <FIGURE WEB_SCALE="0.6" SRC="img_original/ch2-Z-G-23.svg">
	<LABEL NAME="fig:8queens"></LABEL>
	<CAPTION>A solution to the eight-queens puzzle.
	</CAPTION>
      </FIGURE>
  <EXERCISE>
      <LABEL NAME="ex:8queens"></LABEL>
      The 
      <INDEX>eight-queens puzzle</INDEX>
      <INDEX>chess, eight-queens puzzle</INDEX>
      <INDEX>puzzles<SUBINDEX>eight-queens puzzle</SUBINDEX></INDEX>
      <QUOTE>eight-queens puzzle</QUOTE> asks how to place eight queens on a
      chessboard so that no queen is in check from any other (i.e., no two
      queens are in the same row, column, or diagonal).  One possible solution
      is shown in figure<SPACE></SPACE><REF NAME="fig:8queens"></REF>.  One way to solve the
      puzzle is to work across the board, placing a queen in each column.
      Once we have placed <LATEXINLINE>$k-1$</LATEXINLINE> queens, we must place
      the <LATEXINLINE>$k$</LATEXINLINE>th queen in a position where it does not
      check any of the queens already on the board.  We can formulate this
      approach recursively: Assume that we have already generated the sequence
      of all possible ways to place <LATEXINLINE>$k-1$</LATEXINLINE> queens in
      the first <LATEXINLINE>$k-1$</LATEXINLINE> columns of the board.  For
      each of these ways, generate an extended set of positions by placing a
      queen in each row of the <LATEXINLINE>$k$</LATEXINLINE>th column.  Now
      filter these, keeping only the positions for which the queen in the
      <LATEXINLINE>$k$</LATEXINLINE>th column is safe with respect to the other
      queens.  This produces the sequence of all ways to place
      <LATEXINLINE>$k$</LATEXINLINE> queens in the first
      <LATEXINLINE>$k$</LATEXINLINE> columns.  By continuing this process, we
      will produce not only one solution, but all solutions to the puzzle.
      <TEXT>
      We implement this solution as a
      <SPLITINLINE>
	procedure
      <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      <SPLITINLINE>
	queens,
	<JAVASCRIPT><JAVASCRIPTINLINE>queens</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      which returns a sequence of all solutions to the problem of placing
      <LATEXINLINE>$n$</LATEXINLINE> queens on an
      <LATEXINLINE>$n\times n$</LATEXINLINE> chessboard.
      <SPLITINLINE>
	Queens
	<JAVASCRIPT>The function <JAVASCRIPTINLINE>queens</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      has an internal
      <SPLITINLINE>
	procedure
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	queen-cols
	<JAVASCRIPT><JAVASCRIPTINLINE>queens_cols</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      that returns the sequence of all ways to place queens in the first
      <LATEXINLINE>$k$</LATEXINLINE> columns of the board.
    <SNIPPET HIDE="yes">
      <NAME>example_queens</NAME>
      
      
      <JAVASCRIPT>
queens(8);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(queens(8));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>queens</DECLARATION><FRAGILE></FRAGILE></INDEX> 
      <NAME>queens</NAME>
      <REQUIRES>flatmap</REQUIRES>
      <REQUIRES>enumerate_interval</REQUIRES>
      <EXAMPLE>example_queens</EXAMPLE>
      
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
      (list empty-board)
      (filter
        (lambda (positions) (safe? k positions))
        (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
      
      <JAVASCRIPT>
function queens(board_size) {
    function queen_cols(k) {
        return k === 0
               ? list(empty_board)
               : filter(positions =&gt; is_safe(k, positions),
                        flatmap(rest_of_queens =&gt;
                                  map(new_row =&gt;
                                        adjoin_position(new_row, k,
                                                        rest_of_queens),
                                      enumerate_interval(1, board_size)),
                                queen_cols(k - 1)));
    }
    return queen_cols(board_size);
}
      </JAVASCRIPT>
    </SNIPPET>
    In this
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      rest-of-queens
      <JAVASCRIPT><JAVASCRIPTINLINE>rest_of_queens</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a way to place <LATEXINLINE>$k-1$</LATEXINLINE> queens in the first
    <LATEXINLINE>$k-1$</LATEXINLINE> columns, and
    <SPLITINLINE>
      new-row
      <JAVASCRIPT><JAVASCRIPTINLINE>new_row</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is a proposed row in which to place the queen for the
    <LATEXINLINE>$k$</LATEXINLINE>th column.  Complete the program by
    implementing the representation for sets of board positions, including the
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      adjoin-position,
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_position</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which adjoins a new row-column position to a set of positions, and
    <SPLITINLINE>
      empty-board,
      <JAVASCRIPT><JAVASCRIPTINLINE>empty_board</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which represents an empty set of positions.  You must also write the
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      safe?,
      <JAVASCRIPT><JAVASCRIPTINLINE>is_safe</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which determines for a set of positions whether the queen in the
    <LATEXINLINE>$k$</LATEXINLINE>th column is safe with respect to the others.
    (Note that we need only check whether the new queen is safe<EMDASH></EMDASH>the
    other queens are already guaranteed safe with respect to each other.)
      </TEXT>
    <SOLUTION>
      <SNIPPET>
        <NAME>adjoin_position</NAME>
        
        
        <JAVASCRIPT>
function adjoin_position(row, col, rest) {
    return pair(pair(row, col), rest);
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
        <NAME>empty_board</NAME>
        
        
        <JAVASCRIPT>
const empty_board = null;
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
        <NAME>is_safe</NAME>
        
        
        <JAVASCRIPT>
function is_safe(k, positions) {
    const first_row = head(head(positions));
    const first_col = tail(head(positions));
    return accumulate((pos, so_far) =&gt; {
                         const row = head(pos);
                         const col = tail(pos);
                         return so_far &amp;&amp;
                                first_row - first_col !==
                                row - col &amp;&amp;
                                first_row + first_col !==
                                row + col &amp;&amp;
                                first_row !== row;
                      },
                      true, 
                      tail(positions));
}   
        </JAVASCRIPT>
      </SNIPPET>
      Putting it all together:
      <SNIPPET>
        <NAME>queens_solution</NAME>
	<REQUIRES>adjoin_position</REQUIRES>
	<REQUIRES>empty_board</REQUIRES>
	<REQUIRES>is_safe</REQUIRES>
        <REQUIRES>queens</REQUIRES>
        <REQUIRES>example_queens</REQUIRES>
	<EXPECTED>92</EXPECTED>
        
        
        <JAVASCRIPT>
// click here to see all solutions
        </JAVASCRIPT>
        <JAVASCRIPT_RUN>
        </JAVASCRIPT_RUN>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Louis Reasoner is having a terrible time doing
    exercise<SPACE></SPACE><REF NAME="ex:8queens"></REF>.  His
    <SPLITINLINE>
      queens
      <JAVASCRIPT><JAVASCRIPTINLINE>queens</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      procedure
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    seems to work, but it runs extremely slowly. (Louis never does manage to
    wait long enough for it to solve even the
    <LATEXINLINE>$6\times 6$</LATEXINLINE> case.)  When Louis asks Eva Lu Ator
    for help, she points out that he has interchanged the order of the nested
    mappings in the
    <SPLITINLINE>
      flatmap,
      <JAVASCRIPT><JAVASCRIPTINLINE>flatmap</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    writing it as
    <SNIPPET EVAL="no">
      
(flatmap
  (lambda (new-row)
    (map (lambda (rest-of-queens)
           (adjoin-position new-row k rest-of-queens))
         (queen-cols (- k 1))))
  (enumerate-interval 1 board-size))
      
      <JAVASCRIPT>
flatmap(new_row =&gt;
          map(rest_of_queens =&gt; 
                adjoin_position(new_row, k, rest_of_queens), 
              queen_cols(k - 1)), 
        enumerate_interval(1, board_size));
      </JAVASCRIPT>
    </SNIPPET>
    Explain why this interchange makes the program run slowly.  Estimate
    how long it will take Louis<APOS></APOS>s program to solve the eight-queens
    puzzle, assuming that the program in
    exercise<SPACE></SPACE><REF NAME="ex:8queens"></REF> solves the puzzle in time
    <LATEXINLINE>$T$</LATEXINLINE>.
    <SOLUTION>
      Louis&apos;s program re-evaluates the application
      <JAVASCRIPTINLINE>queen_cols(k - 1))</JAVASCRIPTINLINE> in each iteration
      of <JAVASCRIPTINLINE>flatmap</JAVASCRIPTINLINE>, which happens
      <LATEXINLINE>$n$</LATEXINLINE> times for each
      <LATEXINLINE>$k$</LATEXINLINE>. That means overall Louis&apos;s program will
      solve the puzzle in a time of about <LATEXINLINE>$n^n T$</LATEXINLINE>
      if the program in exercise<SPACE></SPACE><REF NAME="ex:8queens"></REF> solves the
      puzzle in time <LATEXINLINE>$T$</LATEXINLINE>.
    </SOLUTION>
    <LABEL NAME="ex:2_43"></LABEL>
  </EXERCISE>
  <INDEX>sequence(s)<SUBINDEX>as conventional interface</SUBINDEX><CLOSE></CLOSE></INDEX>
  <INDEX>conventional interface<SUBINDEX>sequence as</SUBINDEX><CLOSE></CLOSE></INDEX>
  <INDEX>mapping<SUBINDEX>nested</SUBINDEX><CLOSE></CLOSE></INDEX>
</SUBSECTION>
