[{"id":"/sicpjs/5.2.4","tag":"TITLE","body":"5.2.4  \n    Monitoring Machine Performance"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Simulation is useful not only for verifying the correctness of a\n    proposed machine design but also for measuring the machine's\n    \n    performance.  For example, we can install in our simulation program a\n    \"","tag":"#text"},{"body":"meter","tag":"#text"},{"body":"\" that measures the number of stack operations used in a\n    computation.  To do this, we modify our simulated stack to keep track\n    of the number of times registers are saved on the stack and the\n    maximum depth reached by the stack, and add a message to the stack's\n    interface that prints the statistics, as shown below.\n    We also add an operation to the basic machine model to print the\n    stack statistics, by initializing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_ops"},{"body":"\n    in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_new_machine"},{"body":"\n    to\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":false,"body":"list(list(\"initialize_stack\", \n          () => stack(\"initialize\")),\n     list(\"print_stack_statistics\", \n          () => stack(\"print_statistics\")));"},{"body":"\n\n    Here is the new version of","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_stack"},{"body":":","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAVgHQCY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0BnCpslgBQBKUAG9QuUFNAAbNhVA8+LUAF5QJIjJkBuSdLkLNDAEZsAThwAORLgAs2XNaAAMe6bPmMmADw4ATNisKO2c3fSlDUDIic3M2EgoAoJCw92licmo6UBt7AR8RUQiPRV5+ZysmKnMCgBoy5SF00o0iUwtrWwcndWMzSzye0ABqUABGFtKYuISkwODQ9Rn4xOTF0Ympj2Y-BdT1ZhCOXYEVufWQht3Lu2aSj3iKWPoAIn86NlepgF8SzMotHoVhoVmEYge0ioBFAAioXA4mm0AiU-CERUhrQs5hotVebAYwQAno0KgBaMm5UGve6tKQ-UBsGRcNgQunTOg8UAUUHOBxMfwo8osWns6SolTqXhUGRCprbOnnNb7JbRWKreYpUKUyaY0pPF7c0EK+klP4eAHZehUEhUahMGRUABebHBxXZEucSN0ev6nSGjjSepuKqD7KVmo26nC7IN5jeHxIX1+-1IgJyVnMNqSSmoPCoZC4br1-nhVhkTCJAlePN4Mly3UD6lemx4WZIAHNoVW-YNG1x0SbQKWuOXK9XdlQGO1h1rnC2xm2bV2CFWQ1rB2bU1kgcOy0wKGQ7AIGI4uEwO2wMbH5IbT1xz5e1Kpm0NXnq6QB+Bv2D+tABcjBnherIvq+1J-qU34gmCQiQR4gH3o+oEvqArw2naVAOs6XzwdI34YfajousIeFSIhwFPmBaGZtm3C8Hm1CFu+YqtNB7Y5gx8JMUWcGsaUgHYriJ6UWwDSvKQLAkDQADu9DxAAjkQjgKBSpIsDSKaPLe8Z7qOB5HnoPxAA","body":"function make_stack() { \n    let stack = null;\n    let number_pushes = 0;\n    let max_depth = 0;\n    let current_depth = 0;\n    function push(x) {\n        stack = pair(x, stack);\n        number_pushes = number_pushes + 1;\n        current_depth = current_depth + 1;\n        max_depth = math_max(current_depth, max_depth);\n        return \"done\";\n    }\n    function pop() {\n        if (is_null(stack)) {\n            error(\"empty stack -- pop\");\n        } else {\n            const top = head(stack);\n            stack = tail(stack);\n            current_depth = current_depth - 1;\n            return top;\n        }\n    }\n    function initialize() {\n        stack = null;\n        number_pushes = 0;\n        max_depth = 0;\n        current_depth = 0;\n        return \"done\";\n    }\n    function print_statistics() {\n        display(\"total pushes = \" + stringify(number_pushes));\n        display(\"maximum depth = \" + stringify(max_depth));\n    }\n    function dispatch(message) {\n        return message === \"push\"\n               ? push\n               : message === \"pop\"\n               ? pop()\n               : message === \"initialize\"\n               ? initialize()\n               : message === \"print_statistics\"\n               ? print_statistics()\n               : error(message, \"unknown request -- stack\");\n    }\n    return dispatch;\n} "}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Exercises ","tag":"#text"},{"tag":"REF","body":"5.14","href":"/sicpjs/5.2.4#ex-5.14"},{"body":"\n    through ","tag":"#text"},{"tag":"REF","body":"5.18","href":"/sicpjs/5.2.4#ex-5.18"},{"body":"\n    describe other useful monitoring and debugging features that can be\n    added to the register-machine simulator.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.13","id":"#ex-5.13","child":[{"body":"\n    Measure the number of pushes and the maximum stack depth required to\n    compute\n    ","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" for various small values of\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" using the factorial\n    machine shown in Figure ","tag":"#text"},{"tag":"REF","body":"5.11","href":"/sicpjs/5.1.4#fig-5.11"},{"body":".  From your\n    data determine formulas in terms of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" for the\n    total number of push operations and the maximum stack depth used in\n    computing ","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" for any\n    ","tag":"#text"},{"body":"$n > 1$","tag":"LATEX"},{"body":". Note that each of these is a linear\n    function of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" and is thus determined by two\n    constants.  In order to get the statistics printed, you will have to augment\n    the factorial machine with instructions to initialize the stack and print\n    the statistics. You may want to also modify the machine so that it\n    repeatedly reads a value for ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", computes the\n    factorial, and prints\n    the result (as we did for the GCD machine in\n    figure ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.1.1#fig-5.4"},{"body":"), so that you will not have to\n    repeatedly invoke\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_register_contents"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_register_contents"},{"body":",\n      \n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"start"},{"body":".","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.14","id":"#ex-5.14","child":[{"body":"\n    Add \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"instruction counting","tag":"#text"}]},{"body":"\n    to the register machine simulation.\n    That is, have the machine model keep track of the number of\n    instructions executed.  Extend the machine model's interface to\n    accept a new message that prints the value of the instruction count and\n    resets the count to zero.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.15","id":"#ex-5.15","child":[{"body":"\n    Augment the simulator to provide for \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"instruction tracing","tag":"#text"}]},{"body":".\n    That is, before each instruction is executed, the simulator should print\n    the  instruction.  Make the machine model accept\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"trace_on"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"trace_off"},{"body":"\n    messages to turn tracing on and off.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.16","id":"#ex-5.16","child":[{"body":"\n    Extend the instruction tracing of\n    exercise ","tag":"#text"},{"tag":"REF","body":"5.15","href":"/sicpjs/5.2.4#ex-5.15"},{"body":" so that\n    before printing an instruction, the simulator prints any labels that\n    immediately precede that instruction in the controller sequence.  Be\n    careful to do this in a way that does not interfere with instruction\n    counting (exercise ","tag":"#text"},{"tag":"REF","body":"5.14","href":"/sicpjs/5.2.4#ex-5.14"},{"body":").\n    You will have to make the simulator retain the necessary label information.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.17","id":"#ex-5.17","child":[{"body":"\n    Modify the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_register"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"5.2.1","href":"/sicpjs/5.2.1"},{"body":" so that registers can be\n    \n    traced. Registers should accept messages that turn tracing on and off.  When\n    a register is traced, assigning a value to the register should print the\n    name of the register, the old contents of the register, and the new contents\n    being assigned.  Extend the interface to the machine model to permit you to\n    turn tracing on and off for designated machine registers.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.18","id":"#ex-5.18","child":[{"body":"\n    Alyssa P. Hacker wants a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"breakpoint","tag":"#text"}]},{"body":" feature in the simulator to help her debug her machine\n    designs.  You have been hired to install this feature for her.  She wants to\n    be able to specify a place in the controller sequence where the simulator\n    will stop and allow her to examine the state of the machine.  You are to\n    implement a\n    function","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nset_breakpoint($machine$, $label$, $n$)\n      "},{"body":"\n    that sets a breakpoint just before the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th\n    instruction after the given label.  For example,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"set_breakpoint(gcd_machine, \"test_b\", 4)"},{"body":"\n    installs a breakpoint in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"gcd_machine"},{"body":"\n    just before the assignment to register ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":".\n    When the simulator reaches the breakpoint it should print the label and the\n    offset of the breakpoint and stop executing instructions.  Alyssa can then\n    use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_register_contents"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_register_contents"},{"body":"\n    to manipulate the state of the simulated machine.  She should then be able\n    to continue execution by saying\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nproceed_machine($machine$)\n      "},{"body":"\n    She should also be able to remove a specific breakpoint by means of\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\ncancel_breakpoint($machine$, $label$, $n$)\n      "},{"body":"\n    or to remove all breakpoints by means of\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\ncancel_all_breakpoints($machine$)\n      "}]}]