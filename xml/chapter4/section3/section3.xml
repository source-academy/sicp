  <SECTION WIP="yes">
    <NAME><SPLITINLINE><SCHEME>Variations on a Scheme:</SCHEME></SPLITINLINE> Nondeterministic Computing</NAME>

    <SECTIONCONTENT/>

    <LABEL NAME="sec:nondeterministic-evaluation"/>
    <INDEX>nondeterministic computing|(</INDEX>

    <TEXT>
      <INDEX>automatic search</INDEX>
      In this section, we extend the <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> evaluator to support a
      programming paradigm called <EM>nondeterministic computing</EM> by
      building into the evaluator a facility to support automatic search.
      This is a much more profound change to the language than the
      introduction of lazy evaluation in section<SPACE/><REF NAME="sec:lazy-evaluation"/>.
    </TEXT>

    <TEXT>
      <INDEX>nondeterministic programming vs.<SPACE/>Scheme programming</INDEX>
      Nondeterministic computing, like stream processing, is useful for
      <QUOTE>generate and test</QUOTE> applications.  Consider the task of starting with
      two lists of positive integers and finding a pair of integers<EMDASH/>one
      from the first list and one from the second list<EMDASH/>whose sum is prime.
      We saw how to handle this with finite sequence operations in
      section<SPACE/><REF NAME="sec:nested-mappings"/> and with infinite streams in
      section<SPACE/><REF NAME="sec:exploiting-streams"/>.  Our approach was to generate
      the sequence of all possible pairs and filter these to select the
      pairs whose sum is prime.  Whether we actually generate the entire
      sequence of pairs first as in chapter<SPACE/>2, or interleave the generating
      and filtering as in chapter<SPACE/>3, is immaterial to the essential image of
      how the computation is organized.
    </TEXT>

    <TEXT>
      <INDEX>nondeterministic programs<SUBINDEX>pairs with prime sums</SUBINDEX></INDEX>
      The nondeterministic approach evokes a different image.  Imagine simply
      that we choose (in some way) a number from the first list and a number
      from the second list and require (using some mechanism) that their sum
      be prime.  This is expressed by following
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:

      <SNIPPET EVAL="no">
  <SCHEME>
    <!--  \indcode*{prime-sum-pair} -->
    (define (prime-sum-pair list1 list2)
    (let ((a (an-element-of list1))
          (b (an-element-of list2)))
    (require (prime? (+ a b)))
    (list a b)))
  </SCHEME>
  <JAVASCRIPT>
function prime_sum_pair(list1, list2) {    
    const a = an_element_of(list1);
    const b = an_element_of(list2);
    require(is_prime(a + b));
    return list(a, b);
}
  </JAVASCRIPT>
      </SNIPPET>
    </TEXT>

    <TEXT>
      It might seem as if this
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      merely restates the problem,
      rather than specifying a way to solve it.  Nevertheless, this is
      a legitimate nondeterministic program.<FOOTNOTE>We assume that we have previously defined a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME><SCHEMEINLINE>prime?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that tests whether numbers are prime.  Even with
  <SPLITINLINE><SCHEME><SCHEMEINLINE>prime?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> defined,
  the 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>prime-sum-pair</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>prime_sum_pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  may look
  suspiciously like the unhelpful <QUOTE>pseudo-<SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE></QUOTE> attempt to define the
  square-root function, which we described at the beginning of
  section<SPACE/><REF NAME="sec:sqrt"/>.  In fact, a square-root
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  along those
  lines can actually be formulated as a nondeterministic program.
  By incorporating a search mechanism into the evaluator, we
  are eroding the 
  <INDEX>declarative vs.<SPACE/>imperative knowledge<SUBINDEX>nondeterministic computing and</SUBINDEX></INDEX>
  <INDEX>imperative vs.<SPACE/>declarative knowledge<SUBINDEX>nondeterministic computing and</SUBINDEX></INDEX>
  distinction between purely declarative descriptions
  and imperative specifications of how to compute answers.  We<APOS/>ll go
  even farther in this direction in
  section<SPACE/><REF NAME="sec:logic-programming"/>.</FOOTNOTE>
    </TEXT>

    <TEXT>
      The key idea here is that expressions in a nondeterministic language
      can have more than one possible value.  For instance,
      <SPLITINLINE><SCHEME><SCHEMEINLINE>an-element-of</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>an_element_of</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      might return any element of the given list.  Our
      nondeterministic program evaluator will work by automatically choosing
      a possible value and keeping track of the choice.  If a subsequent
      requirement is not met, the evaluator will try a different choice, and
      it will keep trying new choices until the evaluation succeeds, or
      until we run out of choices.  Just as the lazy evaluator freed the
      programmer from the details of how values are delayed and forced, the
      nondeterministic program evaluator will free the programmer from the
      details of how choices are made.
    </TEXT>

    <TEXT>
      <INDEX>time<SUBINDEX>in nondeterministic computing</SUBINDEX></INDEX>
      It is instructive to contrast the different images of time evoked by
      nondeterministic evaluation and stream processing.  Stream processing
      uses lazy evaluation to decouple the time when the stream of possible
      answers is assembled from the time when the actual stream elements are
      produced.  The evaluator supports the illusion that all the possible
      answers are laid out before us in a timeless sequence.  With
      nondeterministic evaluation, an expression represents the exploration
      of a set of possible worlds, each determined by a set of choices.
      Some of the possible worlds lead to dead ends, while others have
      useful values.  The nondeterministic program evaluator supports the
      illusion that time branches, and that our programs have different
      possible execution histories.  When we reach a dead end, we can
      revisit a previous choice point and proceed along a different branch.
    </TEXT>

    <TEXT>
      The nondeterministic program evaluator implemented below is called the
      <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator because it is based on 
      <SPLITINLINE><SCHEME>a new special form</SCHEME>
      <JAVASCRIPT>a special <QUOTE>function</QUOTE></JAVASCRIPT></SPLITINLINE>
      called
      <SCHEMEINLINE>amb</SCHEMEINLINE>.  We can type the above definition of
      <SPLITINLINE><SCHEME><SCHEMEINLINE>prime-sum-pair</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>prime_sum_pair</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      at the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator driver loop
      (along with definitions of
      <SPLITINLINE><SCHEME><SCHEMEINLINE>prime?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
      <SPLITINLINE><SCHEME><SCHEMEINLINE>prime?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
      <SPLITINLINE><SCHEME><SCHEMEINLINE>an-element-of</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>an_element_of</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and
      <SCHEMEINLINE>require</SCHEMEINLINE>) and run the
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      as follows:

      <SNIPPET EVAL="no">
  <SCHEME>
;;; Amb-Eval input:
(prime-sum-pair '(1 3 5 8) '(20 35 110))
;;; Starting a new problem
;;; Amb-Eval value:
(3 20)
  </SCHEME>
  <JAVASCRIPT>
Amb-Eval input:
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
Starting a new problem
Amb-Eval value:
[3, [20, null]]
  </JAVASCRIPT>
</SNIPPET>
    </TEXT>

    <TEXT>
      The value returned was obtained after the evaluator repeatedly chose
      elements from each of the lists, until a successful choice was made.
    </TEXT>

    <TEXT>
      Section<SPACE/><REF NAME="sec:amb"/> introduces <SCHEMEINLINE>amb</SCHEMEINLINE> and explains how it
      supports nondeterminism through the evaluator<APOS/>s automatic search
      mechanism.  Section <REF NAME="sec:amb-examples"/> presents examples of
      nondeterministic programs, and section<SPACE/><REF NAME="sec:amb-implementation"/>
      gives the details of how to implement the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator by
      modifying the ordinary Scheme evaluator.
    </TEXT>

    <!-- Subsection 1 : Amb and Search -->
    &subsection4.3.1;

    <!-- Subsection 2 : Examples of Nondeterministic Programs -->
    &subsection4.3.2;

    <!-- Subsection 3 : Implementing the Amb Evaluator -->
    &subsection4.3.3;
    
    
  </SECTION>
