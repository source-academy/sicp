[{"id":"/sicpjs/3.5","tag":"TITLE","body":"3.5  Streams"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We've gained a good understanding of assignment as a tool in modeling,\n    as well as an appreciation of the complex problems that assignment\n    raises. It is time to ask whether we could have gone about things in a\n    different way, so as to avoid some of these problems.  In this\n    section, we explore an alternative approach to modeling state, based\n    on data structures called ","tag":"#text"},{"tag":"EM","child":[{"body":"streams","tag":"#text"}]},{"body":".  As we shall see, streams can\n    mitigate some of the complexity of modeling state.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Let's step back and review where this complexity comes from.  In an\n    attempt to model real-world phenomena, we made some apparently\n    reasonable decisions: We modeled real-world objects with local state\n    by computational objects with local variables.  We identified time\n    variation in the real world with time variation in the computer.  We\n    implemented the time variation of the states of the model objects in\n    the computer with assignments to the local variables of the model\n    objects.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Is there another approach?  Can we avoid identifying time in the\n    computer with time in the modeled world?  Must we make the model\n    change with time in order to model phenomena in a changing world?\n    Think about the issue in terms of mathematical functions.  We can\n    describe the time-varying behavior of a quantity\n    ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" as a function of time\n    ","tag":"#text"},{"body":"$x(t)$","tag":"LATEX"},{"body":".  \n    If we concentrate on ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" instant by instant,\n    we think of it as a changing quantity.  Yet if we concentrate on the entire\n    time history of values, we do not emphasize change—the function\n    itself does not change.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.5#footnote-1"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    If time is measured in discrete steps, then we can model a time function as\n    a (possibly infinite) sequence.  In this section, we will see how to\n    model change in terms of sequences that represent the time histories\n    of the systems being modeled.  To accomplish this, we introduce new\n    data structures called ","tag":"#text"},{"tag":"EM","child":[{"body":"streams","tag":"#text"}]},{"body":".  From an abstract point of view,\n    a stream is simply a sequence.  However, we will find that the\n    straightforward implementation of streams as lists (as in\n    section ","tag":"#text"},{"tag":"REF","body":"2.2.1","href":"/sicpjs/2.2.1"},{"body":") doesn't fully reveal\n    the power of stream processing.  As an alternative, we introduce the\n    technique of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"delayed evaluation","tag":"#text"}]},{"body":", which enables us to represent\n    very large (even infinite) sequences as streams.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Stream processing lets us model systems that have state without ever\n    using assignment or mutable data.  This has important implications,\n    both theoretical and practical, because we can build models that avoid\n    the drawbacks inherent in introducing assignment.  On the other hand,\n    the stream framework raises difficulties of its own, and the question\n    of which modeling technique leads to more modular and more easily\n    maintained systems remains open.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.5#footnote-link-1","child":[{"body":"Physicists sometimes adopt this view by\n    introducing the\n    \"","tag":"#text"},{"body":"world lines","tag":"#text"},{"body":"\" of particles as a device for reasoning about\n    motion. We've also already mentioned\n    (section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":") that\n    this is the natural way to think about signal-processing systems.  We will\n    explore applications of streams to signal processing in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.3","href":"/sicpjs/3.5.3"},{"body":".","tag":"#text"}]}]