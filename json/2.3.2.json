[{"id":"/sicpjs/2.3.2","tag":"TITLE","body":"2.3.2  \n    Example: Symbolic Differentiation"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    As an illustration of symbol manipulation and a further illustration\n    of data abstraction, consider the design of a\n    function\n    that performs symbolic differentiation of algebraic expressions.  We would\n    like the\n    function\n    to take as arguments an algebraic expression and a variable and to return\n    the derivative of the expression with respect to the variable. For example,\n    if the arguments to the\n    function\n    are ","tag":"#text"},{"body":"$ax^2 + bx +c$","tag":"LATEX"},{"body":" \n    and ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":", the\n    function\n    should return ","tag":"#text"},{"body":"$2ax+b$","tag":"LATEX"},{"body":".  Symbolic differentiation\n    is of special historical significance in\n    \n\tthe programming language Lisp.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.3.2#footnote-1"},{"body":"\n    It was one of the\n    motivating examples behind the development of a computer language for\n    symbol manipulation.  Furthermore, it marked the beginning of the line of\n    research that led to the development of powerful systems for symbolic\n    mathematical work, which are\n    \n\ttoday routinely used by applied mathematicians and physicists.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In developing the symbolic-differentiation program, we will follow the same\n    strategy of data abstraction that we followed in developing the\n    rational-number system of section ","tag":"#text"},{"tag":"REF","body":"2.1.1","href":"/sicpjs/2.1.1"},{"body":".  That\n    is, we will first define a differentiation algorithm that operates on\n    abstract objects such as \"","tag":"#text"},{"body":"sums,","tag":"#text"},{"body":"\"\"","tag":"#text"},{"body":"products,","tag":"#text"},{"body":"\" and\n    \"","tag":"#text"},{"body":"variables","tag":"#text"},{"body":"\" without worrying about how these are to be\n    represented.  Only afterward will we address the representation problem.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"The differentiation program with abstract data","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n\tTo\n      \n    keep things simple, we will consider a very simple\n    symbolic-differentiation program that handles expressions that are built up\n    using only the operations of addition and multiplication with two\n    arguments.  Differentiation of any such expression can be carried out by\n    applying the following\n    \n    reduction rules:\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{rll}\n      \\dfrac{dc}{dx}     & = & \n                         0\\quad \\text{for $c$ a constant or a variable different from $x$} \\\\[12pt]\n      \\dfrac{dx}{dx}     & = &  1  \\\\[12pt]\n      \\dfrac{d(u+v)}{dx} & = & \\dfrac{du}{dx}+\\dfrac{dv}{dx} \\\\[12pt]\n      \\dfrac{d(uv)}{dx}  & = &  u\\left( \\dfrac{dv}{dx}\\right)+v\\left(\n      \\dfrac{du}{dx}\\right)\n      \\end{array}\n      \\]\n    ","tag":"LATEX"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n  Observe that the latter two rules are recursive in nature.  That is, to\n    obtain the derivative of a sum we first find the derivatives of the terms\n    and add them.  Each of the terms may in turn be an expression that needs to\n    be decomposed.  Decomposing into smaller and smaller pieces will eventually\n    produce pieces that are either constants or variables, whose derivatives\n    will be either ","tag":"#text"},{"body":"$0$","tag":"LATEX"},{"body":" or\n    ","tag":"#text"},{"body":"$1$","tag":"LATEX"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    To embody these rules in a\n    function\n    we indulge in a little\n    \n    wishful thinking, as we did in designing the rational-number implementation.\n    If we had a means for representing algebraic expressions, we should be able\n    to tell whether an expression is a sum, a product, a constant, or a\n    variable.  We should be able to extract the parts of an expression. For a\n    sum, for example, we want to be able to extract the addend (first term) and\n    the augend (second term).  We should also be able to construct expressions\n    from parts.  Let us assume that we already have\n    functions\n    to implement the following selectors, constructors, and predicates:\n    ","tag":"#text"},{"tag":"TABLE","child":[{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"is_variable(e)"}]},{"tag":"TD","child":[{"body":"\n          Is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":" a variable?\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"is_same_variable(v1, v2)"}]},{"tag":"TD","child":[{"body":"\n          Are ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v1"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v2"},{"body":" the same variable?\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"is_sum(e)"}]},{"tag":"TD","child":[{"body":"\n          Is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":" a sum?\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"addend(e)"}]},{"tag":"TD","child":[{"body":"\n          Addend of the sum ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":".\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"augend(e)"}]},{"tag":"TD","child":[{"body":"\n          Augend of the sum ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":".\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"make_sum(a1, a2)"}]},{"tag":"TD","child":[{"body":"\n          Construct the sum of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a1"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a2"},{"body":".\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"is_product(e)"}]},{"tag":"TD","child":[{"body":"\n          Is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":" a product?\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"multiplier(e)"}]},{"tag":"TD","child":[{"body":"\n          Multiplier of the product ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":".\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"multiplicand(e)"}]},{"tag":"TD","child":[{"body":"\n          Multiplicand of the product ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"e"},{"body":".\n        ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"make_product(m1, m2)"}]},{"tag":"TD","child":[{"body":"\n          Construct the product of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"m1"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"m2"},{"body":".\n        ","tag":"#text"}]}]}]},{"body":"\n    Using these, and the primitive predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_number"},{"body":",\n    which identifies numbers, we can express the differentiation rules as the\n    following\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":27,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErMrNgBrWwYKoTY3UDYU6Tqg0D5GciFRofdVk689SeLTOlmFpkaOah7CCiErNatNgPq6PdVDgBUx1A73cn10BiMV1K6x6PQExD6DG83x2XV6QnILT4QmREMuJhhbEIGgRSJR2wa6L6WMoONpOLx+KhhLMygeTxeB3E1X8qIa7JabR5nW6fR5A2GQImLOmN0IfCojT2AjayKk-Lo1Mx2NxYmZRVZ8sVlGVlFIbEReo1lK1Yp1dIdjP1Bqm11A8K4LCEAhEjXcoQcgm8NT8tvixAqPFVPr9YlDfL5AH5QAAGBOJvwALnigfCwl9jXjmcTKeUlhsCSDBb9Afs+YkKYyOfTJb5OfLy0LxbbfhTt0Wy09lG9vXhVu7dcSwdcGd7beHo5JZNjRan1f1c8THeYHOer27W+TIPmg8qA-uj33BysCqVKrak6P85fmcXbzvpr2Foncdnr4AwC-DzRx9X-IDMwvPcuSEd9bxNM0YyfCCULbECZ2fVC23g+9zUtPpu03F8c1VR5H1rYYSDmYhqAAdzoQtZAYBgYXIABPRoBFAABabiPVVEchl0Ao8HfP4DiGIF3HEwFgSGEQ5LYoTpP2Q4xnceTgQwMDhgU3QgA","body":"function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n           ? is_same_variable(exp, variable) ? 1 : 0\n           : is_sum(exp)\n           ? make_sum(deriv(addend(exp), variable),\n                      deriv(augend(exp), variable))\n           : is_product(exp)\n           ? make_sum(make_product(multiplier(exp),\n                                   deriv(multiplicand(exp),\n                                         variable)),\n                      make_product(deriv(multiplier(exp),\n                                         variable),\n                                   multiplicand(exp)))\n           : error(exp, \"unknown expression type -- deriv\");\n} "},{"body":"\n    This ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":"function\n    incorporates the complete differentiation algorithm. Since it is expressed\n    in terms of abstract data, it will work no matter how we choose to\n    represent algebraic expressions, as long as we design a proper set of\n    selectors and constructors.  This is the issue we must address next.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Representing algebraic expressions","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    We can imagine many ways to use list structure to represent algebraic\n    expressions.  For example, we could use lists of symbols that mirror the\n    usual algebraic notation, representing ","tag":"#text"},{"body":"$ax+b$","tag":"LATEX"},{"body":" as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"a\", \"*\", \"x\", \"+\", \"b\")"},{"body":".\n      \n        However, it will be more convenient if we reflect the mathematical\n\tstructure of the expression in the JavaScript value representing it;\n\tthat is, to represent ","tag":"#text"},{"body":"$ax+b$","tag":"LATEX"},{"body":" as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"+\", list(\"*\", \"a\", \"x\"), \"b\")"},{"body":".\n\tPlacing a binary operator in front of its operands is called\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"prefix notation","tag":"#text"}]},{"body":",\n\tin contrast with the infix notation introduced in\n\tsection ","tag":"#text"},{"tag":"REF","body":"1.1.1","href":"/sicpjs/1.1.1"},{"body":". With prefix notation, our\n      \n    data representation for the differentiation problem is as follows:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tThe variables are\n\tjust strings.\n\tThey are identified by the primitive predicate\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_string"},{"body":":\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88y9l16ChAIhEBPAF4XdQA","body":"function is_variable(x) { return is_string(x); } "}]},{"tag":"LI","child":[{"body":"\n\tTwo variables are the same if the\n\tstrings representing them are equal:\n          ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQxxlSxsEhwiAIhEATwAvCvcquordIA","body":"function is_same_variable(v1, v2) {\n    return is_variable(v1) && is_variable(v2) && v1 === v2;\n} "}]},{"tag":"LI","child":[{"body":"\n\tSums and products are constructed as lists:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmeExsXDye9uxOru4hAB4RGOIi8Y7Obh5aAJ4RWgBeWuLixkA","body":"function make_sum(a1, a2) { return list(\"+\", a1, a2); }\n\nfunction make_product(m1, m2) { return list(\"*\", m1, m2); } "}]},{"tag":"LI","child":[{"body":"\n\tA sum is a list whose first element is the\n        string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"+\""},{"body":":\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHTqXDy8AB6SUjigOf6KyqDJDoyUsumSAGQVoAAWrIwu5aAAvK2gulrGOBY4ydx8TGwpfFppERji4sZAA","body":"function is_sum(x) {\n    return is_pair(x) && head(x) === \"+\";\n} "}]},{"tag":"LI","child":[{"body":"\n\tThe addend is the second item of the sum list:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHSMLi6sxC68nJIy8orKoAAWrMm85IyUKpni4qYWOMmp6Z72XDzaAB4RGNXGQA","body":"function addend(s) { return head(tail(s)); } "}]},{"tag":"LI","child":[{"body":"\n\tThe augend is the third item of the sum list:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHSMhADmrMQuvJySMvKKyqAAFqyMmeSMlCq85ZVZ4vWmFjjJaRme9lw82gAeERgNQA","body":"function augend(s) { return head(tail(tail(s))); } "}]},{"tag":"LI","child":[{"body":"\n\tA product is a list whose first element is the\n        string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"*\""},{"body":":\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHTq7E6u7poAHpJSOKB5-orKoMkOjJSyvFmgAGTVoAAWrIwulZIAvB2gYVrGOBY4Jc5uHkxsKUPp2hkRGOLixkA","body":"function is_product(x) {\n    return is_pair(x) && head(x) === \"*\";\n} "}]},{"tag":"LI","child":[{"body":"\n\tThe multiplier is the second item of the product list:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHT0hCpUDmqssryckjLyisqgABasjC685IyUKtni4qYWOMmplOmUmZ727E6u7iEAHhEYdcZAA","body":"function multiplier(s) { return head(tail(s)); } "}]},{"tag":"LI","child":[{"body":"\n\tThe multiplicand is the third item of the product list:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6H0AUjARgA0oRigCUoAN6gATq3KFZdADaVO5XgCIA1FpGCDEgNygAvniJkqtBiw4AHWdQAmhCr3rCGE6XIVKquqaWgBU+gze9CbmliQUNHT0hCpUDmqkjMQuvJySMvKKyqAAFqyMOeSMlCq8VTW54k2mFjjJqZTplJnZnvbsTq7uIQAeERjNQA","body":"function multiplicand(s) { return head(tail(tail(s))); } "}]}]},{"body":"\n    Thus, we need only combine these with the algorithm as embodied by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" in order to have a working\n    symbolic-differentiation program.  Let us look at some examples of its\n    behavior:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":45,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErMrNgBrWwYKoTY3UDYU6Tqg0D5GciFRofdVk689SeLTOlmFpkaOah7CCiErNatNgPq6PdVDgBUx1A73cn10BiMV1K6x6PQExD6DG83x2XV6QnILT4QmREMuJhhbEIGgRSJR2wa6L6WMoONpOLx+KhhLMygeTxeB3E1X8qIa7JabR5nW6fR5A2GQImLOmN0IfCojT2AjayKk-Lo1Mx2NxYmZRVZ8sVlGVlFIbEReo1lK1Yp1dIdjP1Bqm11A8K4LCEAhEjXcoQcgm8NT8tvixAqPFVPr9YlDfL5AH5QAAGBOJvwALnigfCwl9jXjmcTKeUlhsCSDBb9Afs+YkKYyOfTJb5OfLy0LxbbfhTt0Wy09lG9vXhVu7dcSwdcGd7beHo5JZNjRan1f1c8THeYHOer27W+TIPmg8qA-uj33BysCqVKrak6P85fmcXbzvpr2Foncdnr4AwC-DzRx9X-IDMwvPcuSEd9bxNM0YyfCCULbECZ2fVC23g+9zUtPpu03F8c1VR5H1rYYSDmYhqAAdzoQtZAYBgYXIABPRoBFAABabiPVVEchl0Ao8HfP4DiOdwhhEYEMDEKSZN0IA","body":"deriv(list(\"+\", \"x\", 3), \"x\"); ","output":"list(\"+\", 1, 0)"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":45,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErMrNgBrWwYKoTY3UDYU6Tqg0D5GciFRofdVk689SeLTOlmFpkaOah7CCiErNatNgPq6PdVDgBUx1A73cn10BiMV1K6x6PQExD6DG83x2XV6QnILT4QmREMuJhhbEIGgRSJR2wa6L6WMoONpOLx+KhhLMygeTxeB3E1X8qIa7JabR5nW6fR5A2GQImLOmN0IfCojT2AjayKk-Lo1Mx2NxYmZRVZ8sVlGVlFIbEReo1lK1Yp1dIdjP1Bqm11A8K4LCEAhEjXcoQcgm8NT8tvixAqPFVPr9YlDfL5AH5QAAGBOJvwALnigfCwl9jXjmcTKeUlhsCSDBb9Afs+YkKYyOfTJb5OfLy0LxbbfhTt0Wy09lG9vXhVu7dcSwdcGd7beHo5JZNjRan1f1c8THeYHOer27W+TIPmg8qA-uj33BysCqVKrak6P85fmcXbzvpr2Foncdnr4AwC-DzRx9X-IDMwvPcuSEd9bxNM0YyfCCULbECZ2fVC23g+9zUtPpu03F8c1VR5H1rYYSDmYhqAAdzoQtZAYBgYXIABPRoBFAABabiPVVEchl0Ao8HfP4DiGIF3CGERgSGNihOk2TdCAA","body":"deriv(list(\"*\", \"x\", \"y\"), \"x\"); ","output":"list(\"+\", list(\"*\", \"x\", 0), list(\"*\", 1, \"y\"))"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":45,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErMrNgBrWwYKoTY3UDYU6Tqg0D5GciFRofdVk689SeLTOlmFpkaOah7CCiErNatNgPq6PdVDgBUx1A73cn10BiMV1K6x6PQExD6DG83x2XV6QnILT4QmREMuJhhbEIGgRSJR2wa6L6WMoONpOLx+KhhLMygeTxeB3E1X8qIa7JabR5nW6fR5A2GQImLOmN0IfCojT2AjayKk-Lo1Mx2NxYmZRVZ8sVlGVlFIbEReo1lK1Yp1dIdjP1Bqm11A8K4LCEAhEjXcoQcgm8NT8tvixAqPFVPr9YlDfL5AH5QAAGBOJvwALnigfCwl9jXjmcTKeUlhsCSDBb9Afs+YkKYyOfTJb5OfLy0LxbbfhTt0Wy09lG9vXhVu7dcSwdcGd7beHo5JZNjRan1f1c8THeYHOer27W+TIPmg8qA-uj33BysCqVKrak6P85fmcXbzvpr2Foncdnr4AwC-DzRx9X-IDMwvPcuSEd9bxNM0YyfCCULbECZ2fVC23g+9zUtPpu03F8c1VR5H1rYYSDmYhqAAdzoQtZAYBgYXIABPRoBFAABabiPVVEchl0Ao8HfP4DiGIF3HEwFgSGEQ5LYoTpP2Q4xnceTgQwMDhgU3QgA","body":"deriv(list(\"*\", list(\"*\", \"x\", \"y\"), list(\"+\", \"x\", 3)), \"x\"); ","output":"list(\"+\", list(\"*\", list(\"*\", \"x\", \"y\"), list(\"+\", 1, 0)),\n          list(\"*\", list(\"+\", list(\"*\", \"x\", 0), list(\"*\", 1, \"y\")),\n                    list(\"+\", \"x\", 3)))"},{"body":"\n    The program produces answers that are correct; however, they are\n    unsimplified.  It is true that\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      \\dfrac{d(xy)}{dx} & = & x\\cdot 0+1\\cdot y\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    but we would like the program to know that\n    ","tag":"#text"},{"body":"$x\\cdot 0 = 0$","tag":"LATEX"},{"body":",\n    ","tag":"#text"},{"body":"$1\\cdot y = y$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$0+y = y$","tag":"LATEX"},{"body":".  The answer for the second example\n    should have been simply ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".  As the\n    third example shows, this becomes a serious issue when the expressions are\n    complex.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Our difficulty is much like the one we encountered with the rational-number\n    implementation:\n    \n    we haven't reduced answers to simplest form.  To\n    accomplish the rational-number reduction, we needed to change only the\n    constructors and the selectors of the implementation. We can adopt a similar strategy here.  We won't change ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" at\n    all.  Instead, we will change\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_sum"},{"body":"\n    so that if both summands are numbers,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_sum"},{"body":"\n    will add them and return their sum.  Also, if one of the summands is 0,\n    then\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_sum"},{"body":"\n    will return the other summand.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGjGEC2ARgKYBOA+qwI6ECGAGwAUrAB4AHADT0mASlABvHKFWh2rcoXZ1KAZ04MWHUZIUAyc6HETQAXgezGAbhwBfPETJVaoRvwBrVk49JmF+AEYZfhQFZTV1TW06IzYuXgERSJkABjkVBMLQAH5QGIKitQAuJzTuPiFwlFz8yoTSyIq2mv1DJjTwiIsrXtSTGNa21Q6I0ABqMtwp1RrBfXJhACI5zeioxblXDxx-IJCw5tAMQ6A","body":"function make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n           ? a1\n           : is_number(a1) && is_number(a2)\n           ? a1 + a2\n           : list(\"+\", a1, a2);\n} "},{"body":"\n    This uses the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"number_equal"},{"body":",\n    \n    which checks whether an expression is equal to a given number:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGjGEC2ARgKYBOA+qwI6ECGAGwAUrAB4AHADT0mASlABvHKFWh2rcoXZ1KAZ04MWHUZIUAyc6HETQAXgezGAbhwBfPEbZdeAkRhkMOWcgA","body":"function number_equal(exp, num) {\n    return is_number(exp) && exp === num;\n} "},{"body":"\n    Similarly, we will change\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_product"},{"body":"\n    to build in the rules that 0 times anything is 0 and 1 times anything is\n    the thing itself:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGjGEC2ARgKYBOA+qwI6ECGAGwAUrAB4AHADT0mASlABvHKFWh2rcoXZ1KAZ04MWHUZIUAyc6HETQAXgezGAbhwBfPETJVaoRvwBrVk4JdmoAE0IKYUYARhlGFAVlNXVNbTojNi5eARE4mQAGBQAfEqds7j4hGJQiuRVUptAAflBCxua1AC4Kjiq8mPjQWIau1LbEzvHerP7cmsSZUemuydjV5t79QyZsoYsrHbn2WrHx1XXQACo-XAvVXsF9cmEAImu3hOHEuVcPHD+IIhMKRaJ1UAYP5AA","body":"function make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ? 0\n           : number_equal(m1, 1)\n           ? m2\n           : number_equal(m2, 1)\n           ? m1\n           : is_number(m1) && is_number(m2)\n           ? m1 * m2\n           : list(\"*\", m1, m2);\n} "},{"body":"\n    Here is how this version works on our three examples:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":67,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErNiCp4BDiYBAEdCNj4hARFG91mrbxq-OqD4vfm2rcaYuMusnL2Jo2LTOis2AGtbBgqhNjdQNgpHz+AL1OhnBZLVbrX7-AAMYkOIJBAH4AbhkZiAFygCGLFZrDaA9wIpGY0Bov5k7GnOYLWHXWlWc6-LzU5GUjIjdHskE4viMchCUZDdx-MVeR5FEylUBvT5MRocag9QgUIRWf5WIFI44NPFQwka+ESAA+ptxdPx0I22pJiPJqNAcN5-hxBoJMM17mcDsdfjR2tdfndVsNXpQPr9-sDzmDoBxyjxxsZSatGrZ-oDcoyACo5Ris-zBcLc6Kc+5tboCk8ZWZej0BMQ+gxvKCTl1ekJyC0Nq3dAZa9M6GxCBomy223q6J2+j3KBt532xCu9JNnrLlEqVWqheJqiDp00Wm1951un19wNhmWpVMXnLCHwqI0BfTW1J2w1Z93e0J+2uQ4PlYT4vgKpBsM2-5ToE34Xr+C4Icuq6DtKw6gI2XAsJs2zuKEDiCAch6wWUyaXNGjpoi6WYJvE+HhMI5HxtmQjKJYNgJARjG4R49gMSuFKgBkOLUTRtFsT8TFif4gYfF8PyYZQ2ENhOOFXHhfGOGIrjMdJGELEpvxjqp5EaYkhEUTRibMNuqrqlJenZvK8mVM5irKnZQogc+lCvpQ9Kmbpjkgop2HeWBlAQVBgXBbFyL0Vp2lBXpbm2buQihRqoG+W+FzbElcWFeSCWETpRXleFOWRZBfTkSuyUhqACzKnlOzDCQ7zENQADudCXLIDAMLK5AAJ6NAIoAALSTfpWFDNWhSZQKqjCmM7hDCI5YYNpwybboQA","body":"deriv(list(\"+\", \"x\", 3), \"x\"); ","output":"1"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":67,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErNiCp4BDiYBAEdCNj4hARFG91mrbxq-OqD4vfm2rcaYuMusnL2Jo2LTOis2AGtbBgqhNjdQNgpHz+AL1OhnBZLVbrX7-AAMYkOIJBAH4AbhkZiAFygCGLFZrDaA9wIpGY0Bov5k7GnOYLWHXWlWc6-LzU5GUjIjdHskE4viMchCUZDdx-MVeR5FEylUBvT5MRocag9QgUIRWf5WIFI44NPFQwka+ESAA+ptxdPx0I22pJiPJqNAcN5-hxBoJMM17mcDsdfjR2tdfndVsNXpQPr9-sDzmDoBxyjxxsZSatGrZ-oDcoyACo5Ris-zBcLc6Kc+5tboCk8ZWZej0BMQ+gxvKCTl1ekJyC0Nq3dAZa9M6GxCBomy223q6J2+j3KBt532xCu9JNnrLlEqVWqheJqiDp00Wm1951un19wNhmWpVMXnLCHwqI0BfTW1J2w1Z93e0J+2uQ4PlYT4vgKpBsM2-5ToE34Xr+C4Icuq6DtKw6gI2XAsJs2zuKEDiCAch6wWUyaXNGjpoi6WYJvE+HhMI5HxtmQjKJYNgJARjG4R49gMSuFKgBkOLUTRtFsT8TFif4gYfF8PyYZQ2ENhOOFXHhfGOGIrjMdJGELEpvxjqp5EaYkhEUTRibMNuqrqlJenZvK8mVM5irKnZQogc+lCvpQ9Kmbpjkgop2HeWBlAQVBgXBbFyL0Vp2lBXpbm2buQihRqoG+W+FzbElcWFeSCWETpRXleFOWRZBfTkSuyUhqACzKnlOzDCQ7zENQADudCXLIDAMLK5AAJ6NAIoAALSTfpWFDNWhSZQKqiluWQwiGtI3ze463zToQA","body":"deriv(list(\"*\", \"x\", \"y\"), \"x\"); ","output":"\"y\""},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":67,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErNiCp4BDiYBAEdCNj4hARFG91mrbxq-OqD4vfm2rcaYuMusnL2Jo2LTOis2AGtbBgqhNjdQNgpHz+AL1OhnBZLVbrX7-AAMYkOIJBAH4AbhkZiAFygCGLFZrDaA9wIpGY0Bov5k7GnOYLWHXWlWc6-LzU5GUjIjdHskE4viMchCUZDdx-MVeR5FEylUBvT5MRocag9QgUIRWf5WIFI44NPFQwka+ESAA+ptxdPx0I22pJiPJqNAcN5-hxBoJMM17mcDsdfjR2tdfndVsNXpQPr9-sDzmDoBxyjxxsZSatGrZ-oDcoyACo5Ris-zBcLc6Kc+5tboCk8ZWZej0BMQ+gxvKCTl1ekJyC0Nq3dAZa9M6GxCBomy223q6J2+j3KBt532xCu9JNnrLlEqVWqheJqiDp00Wm1951un19wNhmWpVMXnLCHwqI0BfTW1J2w1Z93e0J+2uQ4PlYT4vgKpBsM2-5ToE34Xr+C4Icuq6DtKw6gI2XAsJs2zuKEDiCAch6wWUyaXNGjpoi6WYJvE+HhMI5HxtmQjKJYNgJARjG4R49gMSuFKgBkOLUTRtFsT8TFif4gYfF8PyYZQ2ENhOOFXHhfGOGIrjMdJGELEpvxjqp5EaYkhEUTRibMNuqrqlJenZvK8mVM5irKnZQogc+lCvpQ9Kmbpjkgop2HeWBlAQVBgXBbFyL0Vp2lBXpbm2buQihRqoG+W+FzbElcWFeSCWETpRXleFOWRZBfTkSuyUhqACzKnlOzDCQ7zENQADudCXLIDAMLK5AAJ6NAIoAALSTfpWFDNWhSZQKqiluWy1CkMZbuEMIjlkMI3ze463CmM227e4GArmd806EAA","body":"deriv(list(\"*\", list(\"*\", \"x\", \"y\"), list(\"+\", \"x\", 3)), \"x\"); ","output":"list(\"+\", list(\"*\", \"x\", \"y\"), list(\"*\", \"y\", list(\"+\", \"x\", 3)))"},{"body":"\n    Although this is quite an improvement, the third example shows that there\n    is still a long way to go before we get a program that puts expressions\n    into a form that we might agree is \"","tag":"#text"},{"body":"simplest.","tag":"#text"},{"body":"\"  The problem\n    of algebraic simplification is complex because, among other reasons, a\n    form that may be simplest for one purpose may not be for another.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.56","id":"#ex-2.56","child":[{"body":"\n    Show how to extend the basic differentiator to handle more kinds of\n    expressions.\n    \n    For instance, implement the differentiation rule\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      \\dfrac {d(u^{n})}{dx} & = & nu^{n-1}\\left( \\dfrac{du}{dx}\\right)\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    by adding a new clause to the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" program\n    and defining appropriate\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_exp"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"base"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"exponent"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_exp"},{"body":".\n    (You may use\n    the string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"**\""},{"body":"\n    to denote exponentiation.) Build in the rules that anything raised to the\n    power 0 is 1 and anything raised to the power 1 is the thing itself.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":31,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErMrNgBrWwYKoTY3UDYU6Tqg0D5GciFRofdVk689SeLTOlmFpkaOah7CCiErNatNgPq6PdVDgBUx1A73cn10BiMV1K6x6PQExD6DG83x2XV6QnILT4QmREMuJhhbEIGgRSJR2wa6L6WMoONpOLx+KhhLMygeTxeB3E1X8qIa7JabR5nW6fR5A2GQImLOmN0IfCojT2AjayKk-Lo1Mx2NxYmZRVZ8sVlGVlFIbEReo1lK1Yp1dIdjP1Bqm11AxAqPFVTAEAEdCGwcQIRI13J6rN4an5bfEI962iHGjE4kmsjkIzLDXLQDw2AxhAIo3zY9qGUIi7oCtn3UnaAiDkXebVAlT7eXy5Wq4Y3TDbrYk0I8wX3Eniy2fh6vT7-YHg6H3AAGMTRvl8gD8oGcq7XfgAXFOrAnfQGgxWF1uV7vr5vhwId9fQAe-gchgCge476PQ92azDlIOPI+CWrZlM0rTtHE2oSjkb7StWvZmPCXAsOeYYePY4RNsBE47Mo8aqmhV6Pn4m6Lg+a4HsooQOBEY4Ubum5CMolg2AktGFheNFYRIm4ZAey4MZR8RLJU9EkYxILzIsyzIZQqG9PCVpju43GOGIrhCRJ15yQpJJkkRqmYepxHafuTSPM8rziWZG5SXcolvNJ9yWVybwKkqKqJj+mm2X5a66e5Jpmhayk+Vp-m2Wpgj6r5kXaf2Lmcq8gVWB5ppeYZEXxTlGGJDFcW5Ql6UhZafRjvq2XCQBoZEVVkmJRyVkHI1rnWaG9bEI24VFTliWDvVvXXneWVDUVdbEA2RGgAAtJeGk4AAkMtEmBSNKl5RxlW5QeqqPN56FDCQczENQADudBJrIDAMDC5AAJ6NAIs1zbpQy-jggUvoCH7DCIwIACwaX9706EAA","body":"function base(e) {\n    return head(tail(e));\n}\nfunction exponent(e) {\n    return head(tail(tail(e)));\n}\nfunction make_exp(base, exp) {\n    return number_equal(exp, 0)\n           ? 1\n           : number_equal(exp, 1)\n             ? base\n             : list(\"**\", base, exp);\n}\nfunction is_exp(x) {\n    return is_pair(x) && head(x) === \"**\";\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable),\n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp),\n                                deriv(multiplicand(exp),\n                                      variable)),\n                            make_product(deriv(multiplier(exp),\n                                               variable),\n                                multiplicand(exp)))\n                 : is_exp(exp)\n                   ? make_product(make_product(exponent(exp),\n                                      make_exp(\n                                          base(exp),\n                                          exponent(exp) - 1)),\n\t\t\t          deriv(base(exp), variable))\n                   : error(exp, \"unknown expression type -- deriv\");\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.57","id":"#ex-2.57","child":[{"body":"\n    Extend the differentiation program to handle sums and products of arbitrary\n    numbers of (two or more) terms. Then the last example above could be\n    expressed as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":67,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErNiCp4BDiYBAEdCNj4hARFG91mrbxq-OqD4vfm2rcaYuMusnL2Jo2LTOis2AGtbBgqhNjdQNgpHz+AL1OhnBZLVbrX7-AAMYkOIJBAH4AbhkZiAFygCGLFZrDaA9wIpGY0Bov5k7GnOYLWHXWlWc6-LzU5GUjIjdHskE4viMchCUZDdx-MVeR5FEylUBvT5MRocag9QgUIRWf5WIFI44NPFQwka+ESAA+ptxdPx0I22pJiPJqNAcN5-hxBoJMM17mcDsdfjR2tdfndVsNXpQPr9-sDzmDoBxyjxxsZSatGrZ-oDcoyACo5Ris-zBcLc6Kc+5tboCk8ZWZej0BMQ+gxvKCTl1ekJyC0Nq3dAZa9MykqVWqheJqiC9SOWm1J51un1JwNhmWpVMXnLCHwqI0BfTW1J2w1O30e5Q+2IB4UQKBSB02JoBKByF0AkqBAwmz2t9R8K+CxWAwOB3jwACeoCNvglDELBGgAoQGhNj0ALNtuu6UPulCkE+PRDlujZcCwmzbO4oQOIIBzToEDRpsy9KXNGjpoi6WYJvEFHhMITHxtmQjKJYNgJJRPFkR49jcRIaIZDipLsSG8TfJUvEKf4gYfF8PxEZQJENihpFXORkmOGIrh8WpUELLpvxIQZTHGYkVHMexibMKOqrqqplnZvKWmVH5irKp5QpWDue4Hhc2xmRZPkgjpJFhZh2G4c2hkxXFmXIlxpkZVl-qBR545CLFWUJRq4VYZF6Xmfl+U5VRtV1exSURTheHpdepWKQsypRTswwkO8xDUAA7nQlyyAwDCyuQ4GNC+AC0i1WcRQzVoU5UCqopblkMIh7eB5bbUKIruPt5YYNe50HboQA","body":"deriv(list(\"*\", \"x\", \"y\", list(\"+\", \"x\", 3)), \"x\"); "},{"body":"\n    Try to do this by changing only the\n    representation for sums and products, without changing the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":"function\n    at all.  For example, the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"addend"},{"body":" of a sum would\n    be the first term, and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"augend"},{"body":" would be the\n    sum of the rest of the terms.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":67,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISChpglUIrbSlff1l5RXiABzZKDiq0gAsBNgATKuzM0AAiAGoh-MLjErNiCp4BDiYBAEdCNj4hARFG91mrbxq-OqD4vfm2rcaYuMusnL2Jo2LTOis2AGtbBgqhNjdQNgpHz+AL1OhnBZLVbrX7-AAMYkOIJBAH4AbhkZiAFygCGLFZrDaA9wIpGY0Bov5k7GnOYLWHXWlWc6-LzU5GUjIjdHskE4viMchCUZDdx-MVeR5FEylUBvT5MRocag9QgUIRWf5WIFI44NPFQwka+ESAA+ptxdPx0I22pJiPJqNAcN5-hxBoJMM17mcDsdfjR2tdfndVsNXpQPr9-sDzmDoBxyjxxsZSatGrZ-oDcoyACo5Ris-zBcLc6Kc+5tboCk8ZWZej0BMQ+gxvKCTl1ekJyC0Nq3dAZa9MykqVWqheJqiC9SOWm1J51un1JwNhmWpVMXnLCHwqI0BfTW1J2w1O30e5Q+2IB4UQKBSB02JoBKByF0AkqBAwmz2t9R8K+CxWAwOB3jwACeoCNvglDELBGgAoQGhNj0ALNtuu6UPulCkE+PRDlujZcCwmzbO4oQOIIBzToEDRpsy9KXNGjpoi6WYJvEFHhMITHxtmQjKJYNgJJRPFkR49jcRIaIZDipLsSG8TfJUvEKf4gYfF8PxEZQJENihpFXORkmOGIrh8WpUELLpvxIQZTHGYkVHMexibMKOqrqqplnZvKWmVH5irKp5QpWDue4Hhc2xmRZPkgjpJFhZh2G4c2hkxXFmXIlxpkZVl-qBR545CLFWUJRq4VYZF6Xmfl+U5VRtV1exSURTheHpdepWKQsypRTswwkO8xDUAA7nQlyyAwDCyuQ4GNC+AC0i1WcRQzVpMzyymwdlpUewK1LRdBsKQpAVDubDkMIgXKSS7gXhsD1CP2G3SsOGFtalLbUYdYIAqd518Jd12aUFY4UD6929t20MvVK5UCqopblkMIgo+B5aI0KIruKj5YYNeuNo7oQA","body":"function augend(s) {\n    return accumulate(make_sum, 0, tail(tail(s)));\n}\nfunction multiplicand(s) {\n    return accumulate(make_product, 1, tail(tail(s)));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.58","id":"#ex-2.58","child":[{"body":"\n    Suppose we want to modify the differentiation program so that it works\n    with ordinary mathematical notation, in which\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"+\""},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"*\""},{"body":"\n    are\n    \n    infix rather than prefix operators.  Since the differentiation program\n    is defined in terms of abstract data, we can modify it to work with\n    different representations of expressions solely by changing the predicates,\n    selectors, and constructors that define the representation of the algebraic\n    expressions on which the differentiator is to operate.\n    ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n        Show how to do this in order to differentiate algebraic expressions\n\tpresented in infix form,\n\tas in this example:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":false,"body":"list(\"x\", \"+\", list(3, \"*\", list(\"x\", \"+\", list(\"y\", \"+\", 2))))"},{"body":"\n        To simplify the task, assume that\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"+\""},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"*\""},{"body":"\n\talways take two arguments and that expressions are fully parenthesized.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        The problem becomes substantially harder if we allow\n        \n\t    a notation closer to ordinary infix notation, which omits unnecessary\n\t    parentheses and assumes that\n\t    multiplication has higher precedence than addition, as in this\n\t    example:\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":false,"body":"list(\"x\", \"+\", 3, \"*\", list(\"x\", \"+\", \"y\", \"+\", 2))"},{"body":"\n        Can you design appropriate predicates, selectors, and constructors for\n\tthis notation such that our derivative program still works?\n      ","tag":"#text"}]}]}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISCho6YkIrHgEOJgEAR0I2PiEBEQAHd3Krb19-WXlFeK6qjhb2mLjWtqycrvzC4xKzKzYAa1sGCqE2N1A2FJ9-AIGyipHahqbt3YAGMV6jx4B+PdxH94AuUGHqi8bm-buO4Pd5HF57Zwg0F+L7KH6jHYTIZnarbLxQ6F+F47UAAaleGMxXz4jHI13cACJcRT3PtdAUiiZSvFNlZtFIQf0gvE2mxKKNxKk4gALARsAAmQnIfOa4gk2UyoCpFPmjKWdAl4oExElDB6Ry5g1FEqEetVi1MGsIGm1uv1fUCRrFkullGaruaerE9MMFuZK3WTDaHGo4sIFCEVl2VgOnMdp0qv3q-0jtwkAB9098UTVk1cY0D7pisX4boSjl94X987tnEXiyWY+XHpWc9XmgXQHXm+9wVGey3kYnRlGkXCc5H0Q3e6Ao6AAFSzt7TiugEmqVOU+c0pc+tWWnkhsMRwWHB0nHl8gVI40umXaeU5Cnb83FA9WQh8KhtEmovUcg141AW9TT3P1lk-b8SVINgdVAgDz25ECPSle8vTAt9mS1LgWDGDoPHscIBHtPxDWCJh4Tw+sZzLaFYRCQikimajQReIRlEsGwEgcCIpncUIeOI0AXgyL5gWLeiVC2ZiB2E2c1g2LZsMoXDNVtKj+MYwQxFcWSG2U1TrXU5jNMSbSWLow9Q3DMkZJXOSA0UtlHKDI8bMjSDKB-ShURMvT7L8AyPK-LzoNgyU-ICqKjgEojvV06LoRc4NrIjIKPxC7zUX8xLctASK8sKvxYscHScqK2dPO8mC4OY71-K+aoQ1GPilRIVZiGoAB3OgplkBgGGZcgAE82gEUAAFoJtAAyKT3HAgvXMkKREHdnx3AAWHSlVW3QgA","body":"function make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ?  a1\n             : is_number(a1) && is_number(a2)\n               ? a1 + a2\n               : list(a1, \"+\", a2);\n}\nfunction is_sum(x) {\n    return is_pair(x) && head(tail(x)) === \"+\";\n}\nfunction addend(s) {\n    return head(s);\n}\nfunction augend(s) {\n    return head(tail(tail(s)));\n}\nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ?  0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n               ?  m1\n               : is_number(m1) && is_number(m2)\n                 ? m1 * m2\n                 : list(m1, \"*\", m2);\n}\nfunction is_product(x) {\n    return is_pair(x) && head(tail(x)) === \"*\";\n}\nfunction multiplier(s) {\n    return head(s);\n}\nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n        ? 0\n        : is_variable(exp)\n          ? (is_same_variable(exp, variable) ? 1 : 0)\n          : is_sum(exp)\n            ? make_sum(deriv(addend(exp), variable),\n                       deriv(augend(exp), variable))\n            : is_product(exp)\n              ? make_sum(make_product(multiplier(exp),\n                             deriv(multiplicand(exp),\n                                   variable)),\n                         make_product(deriv(multiplier(\n                                                    exp),\n                                            variable),\n                                      multiplicand(exp)))\n              : error(exp, \"unknown expression type -- deriv\");\n} "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0oFA4GYCuAdgMYAuAlgPbGiUDOA+gG4CGATpWwEYA2AUwAUADwCUoAN6gOA8oQ51GTBuS7EA5qLEBuUAF88RMlVr1mDNgFsBrTt37CWARgA0oFigmScoPzLkFJWZ2Ll5BIRcJADJo8zswx0ivUFiPZ1AAXmyPFB0cQwISCho6YkIrHgEOJgEAR0I2PiEBEQAHd3Krb19-WXlFeK6qjhb2mLjWtqycrvzC4xKzSnIBK2Yq-GpZJnxKDlUhag7QBh7-AIHglTVKTSEACwE2ABMhM4nQJ9f3iWzM0DHXoXEEAflA5T4fGBIP8AC5QG02PtHs83mdXDDYdj6Kt1kxNttbHsDuQjidyMjmh9dAUiiZSri1sw2PhVjUSYdju4zlIYf0gvFVOotN90WJPmLfjMAUCcf5wZTKNSxFjYQiVsymKz2bt9lyKVTfrTDItTHQGJQrG0+JR8ABPJgkTiO22HXk+C4CwbKJEo3lpZSQ5pKlWq+V+cFSs5qkEIhjzelLOikWhK4jMG2EBjSz19QI+5jB36xi7g-BNBgCUvwoW3e7RiWpOKNmWgABEAGp2zWy6A1IRqxHa6niOnM3xs0JQ8bE2bGVY2ABrWwMCpCNhuUBsFJ5vzesoVEa1BpNDdbgAM4Yj4J3vdACOG1RPjWaO-cV-vkb8m6-D6GR7VOenxBoBow7tew7fpuoCdtuuBQbWbpkpu7hdu27gQYmIDbqc9SDmQAiAvg-bVOs27EC8gJtNUbDkNsDDmLha5WDgOF2hRVG0Hw9r0CRdGgIIbCqICxBEXBxy0fRHCAqQpAKAwSbmkK67iHyXoFtcfqjGpaSjuOTBZjm4hzsUymvC8AiUbm-KaacVo2najrOhwrqMGSmr4oSOycmS6E8hKpkMmYbCEBoVniup+ZXPZ1q2g6TrEC6TDIUInksmyz6+UI-mnIFdLzmYi4roZHDUC8hAUEIVhblYu62TFT41PhZ41R+EgAD4dRCYEvq1KDtfe4KgBe96Pr1LXNG1oDOJBN6gHVf7jZUz6TdVA0zXNw7DTVf5+BqRZgdVs3NgBK2jHVW1QeCNWgAAVAtCGIUh7nHWhd0YY9JpsWAbB4Q0VmkER1Akey5FsJR1FSQxTF-W0ZUVRQP18Zxok8SjxDULBUMcHR2yyfJBxKYyvoI5VZJqXulyCr6yI6Z8ACEoD6ciGaGZOxnfYVdBWIQfBUI5QEeg1gqWnFTmJclqXpQSAhbD5+p+R9AVc2ZC58wLtqkBDkVUwesWOQlLluYcMs6llis5creWq8FdCWVwLBjCcoQOII5zRTTh3nc7V3fqNOIHQkbvCFMfsKqAaUWNYtiu+EoftO4ceOBI4IZAin4RkHLG+1+N3Lqu64O5QTsWRFvtJ-Y8diJiz3ysXpdheXYeV4k7vhxcQfw+V5O589+clTnxW2N3iNkrz-OUILowt3tdcN9VGtT1rOsV3Pdcgsn7e1xvOLD6VPdVQvE+a5QQGz7vl-ylvAg1+viEn8vlDa9ZYcSntCLVGVM+Jx2JBLpjAA7nQKYsgGCWjMOQe0NFQAAFpYGgAbu2b6OAF6pXbCIT67ZrYABYa4dkwboIAA","body":"function items_before_first(op, s) {\n    return is_string(head(s)) && head(s) === op\n           ? null\n           : pair(head(s),\n                  items_before_first(op, tail(s)));\n}\nfunction items_after_first(op, s) {\n    return is_string(head(s)) && head(s) === op\n           ? tail(s)\n           : items_after_first(op, tail(s));\n}\nfunction simplify_unary_list(s) {\n    return is_pair(s) && is_null(tail(s))\n           ? head(s)\n           : s;\n}\nfunction contains_plus(s) {\n    return is_null(s)\n           ? false\n           : is_string(head(s)) && head(s) === \"+\"\n             ? true\n             : contains_plus(tail(s));\n}\nfunction make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ?  a1\n             : is_number(a1) && is_number(a2)\n               ? a1 + a2\n               : list(a1, \"+\", a2);\n}\n// a sequence of terms and operators is a sum\n// if and only if at least one + operator occurs\nfunction is_sum(x) {\n    return is_pair(x) && contains_plus(x);\n}\nfunction addend(s) {\n    return simplify_unary_list(items_before_first(\"+\", s));\n}\nfunction augend(s) {\n    return simplify_unary_list(items_after_first(\"+\", s));\n}\nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ?  0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n               ?  m1\n               : is_number(m1) && is_number(m2)\n                 ? m1 * m2\n                 : list(m1, \"*\", m2);\n}\n// a sequence of terms and operators is a product\n// if and only if no + operator occurs\nfunction is_product(x) {\n    return is_pair(x) && ! contains_plus(x);\n}\nfunction multiplier(s) {\n    return simplify_unary_list(items_before_first(\"*\", s));\n}\nfunction multiplicand(s) {\n    return simplify_unary_list(items_after_first(\"*\", s));\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n        ? 0\n        : is_variable(exp)\n          ? (is_same_variable(exp, variable) ? 1 : 0)\n          : is_sum(exp)\n            ? make_sum(deriv(addend(exp), variable),\n                       deriv(augend(exp), variable))\n            : is_product(exp)\n              ? make_sum(make_product(multiplier(exp),\n                             deriv(multiplicand(exp),\n                                   variable)),\n                         make_product(deriv(multiplier(exp),\n                                            variable),\n                             multiplicand(exp)))\n              : error(exp, \"unknown expression type -- deriv\");\n} "}]}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.3.2#footnote-link-1","child":[{"body":"The original version of this\n\tbook used the programming language Scheme, a dialect of Lisp.","tag":"#text"}]}]