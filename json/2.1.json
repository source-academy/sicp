[{"id":"/sicpjs/2.1","tag":"TITLE","body":"2.1  Introduction to Data Abstraction"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In section ","tag":"#text"},{"tag":"REF","body":"1.1.8","href":"/sicpjs/1.1.8"},{"body":", we noted that a\n    function\n    used as an element in creating a more complex\n    function\n    could be regarded not only as a collection of particular operations but\n    also as a \n    functional\n    abstraction.  That is, the details of how the\n    function\n    was implemented could be suppressed, and the particular\n    function\n    itself could be replaced by any other\n    function\n    with the same overall behavior.  In other words, we could make an\n    abstraction that would separate the way the\n    function\n    would be used from the details of how the\n    function\n    would be implemented in terms of more primitive\n    functions.\n    The analogous notion for compound data is called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"data abstraction","tag":"#text"}]},{"body":".  Data abstraction is a methodology that enables\n    us to isolate how a compound data object is used from the details of how it\n    is constructed from more primitive data objects.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The basic idea of data abstraction is to structure the programs that are\n    to use compound data objects so that they operate on \n    \"","tag":"#text"},{"body":"abstract data.","tag":"#text"},{"body":"\" That is, our programs should use data in such\n    a way as to make no assumptions about the data that are not strictly\n    necessary for performing the task at hand.  At the same time, a \n    \"","tag":"#text"},{"body":"concrete","tag":"#text"},{"body":"\" data representation is defined independent of the\n    programs that use the data.  The interface between these two parts of our\n    system will be a set of\n    functions,\n    called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"selectors","tag":"#text"}]},{"body":" and \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"constructors","tag":"#text"}]},{"body":", that implement the abstract data in terms of the\n    concrete representation.  To illustrate this technique, we will consider\n    how to design a set of\n    functions\n    for manipulating rational numbers.\n  ","tag":"#text"}]}]