<SUBSECTION>
  <NAME>
    Memory as Vectors
  </NAME><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:memory-as-vectors"></LABEL>
  <TEXT>
    A conventional computer memory can be thought of as an array of
    cubbyholes, each of which can contain a piece of information.  Each
    cubbyhole has a unique name, called its 
    <INDEX>address</INDEX>
    <EM>address</EM> or 
    <INDEX>location</INDEX>
    <EM>location</EM>.  Typical memory systems provide two primitive operations:
    one that fetches the data stored in a specified location and one that
    assigns new data to a specified location.  Memory addresses can be
    incremented to support sequential access to some set of the
    cubbyholes.  More generally, many important data operations require
    that memory addresses be treated as data, which can be stored in
    memory locations and manipulated in machine registers.  The
    representation of list structure is one application of such 
    <INDEX>address arithmetic</INDEX>
    <INDEX>arithmetic<SUBINDEX>address arithmetic</SUBINDEX></INDEX>
    <EM>address arithmetic</EM>.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    To model computer memory, we use a new kind of data structure called a 
    <INDEX>vector (data structure)</INDEX>
    <EM>vector</EM>.  Abstractly, a vector is a compound data object whose
    individual elements can be accessed by means of an integer index in an
    amount of time that is independent of the index.<FOOTNOTE>We could represent
    memory as lists of items. However, the access time would then not be
    independent of the index, since accessing the
    <LATEXINLINE>$n$</LATEXINLINE>th element of a list requires
    <LATEXINLINE>$n-1$</LATEXINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operations.</FOOTNOTE> In order to describe memory operations, we use two
    <SPLITINLINE>
      <SCHEME>primitive Scheme procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for manipulating vectors:<SPLITINLINE><JAVASCRIPT><FOOTNOTE>
    As mentioned in section<SPACE></SPACE><REF NAME="sec:running-eval"></REF>
    <PDF_ONLY>
      (footnote<SPACE></SPACE><REF NAME="foot:vector-array"></REF>),
    </PDF_ONLY>
    <WEB_ONLY>
      (footnote<SPACE></SPACE>2),
    </WEB_ONLY>
    JavaScript supports vectors as data
    structures and calls them <QUOTE>arrays.</QUOTE> We use the term <EM>vector</EM> in
    this book, as it is the more common terminology.
    The vector functions above are easily implemented using
    JavaScript&apos;s primitive array support.</FOOTNOTE></JAVASCRIPT></SPLITINLINE>
    <!-- Error occurred while translating this section --><UL>
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(vector-ref </SCHEMEINLINE>
	    <LATEXINLINE>vector n</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>vector_ref(</JAVASCRIPTINLINE><!--  
	   --><META>vector</META><!--  
           --><JAVASCRIPTINLINE>, </JAVASCRIPTINLINE><!--  
	   --><META>n</META><!--  
	   --><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	<INDEX><USE>vector_ref</USE> (primitive function)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>vector_ref</USE> (\textit{ns})</SUBINDEX></INDEX>
	returns the <META>n</META>th element of the vector.
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(vector-set! </SCHEMEINLINE>
	    <LATEXINLINE>vector n value</LATEXINLINE>
	    <SCHEMEINLINE>)</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>vector_set(</JAVASCRIPTINLINE><!--  
	   --><META>vector</META><!--  
           --><JAVASCRIPTINLINE>, </JAVASCRIPTINLINE><!--  
	   --><META>n</META><!--  
           --><JAVASCRIPTINLINE>, </JAVASCRIPTINLINE><!--  
	   --><META>value</META><!--  
	   --><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	<INDEX><USE>vector_set</USE> (primitive function)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>vector_set</USE> (\textit{ns})</SUBINDEX></INDEX>
	sets the <LATEXINLINE>$n$</LATEXINLINE>th element of the vector to the
	designated value.
      </LI>
    </UL>

    For example, if <!-- Error occurred while translating this section --><SCHEMEINLINE>v</SCHEMEINLINE> is a vector, then
    <SPLITINLINE>
      <SCHEME>(vector-ref v 5)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>vector_ref(v, 5)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    gets the fifth entry in the vector <!-- Error occurred while translating this section --><SCHEMEINLINE>v</SCHEMEINLINE> and
    <SPLITINLINE>
      <SCHEME>(vector-set! v 5 7)</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>vector_set(v, 5, 7)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    changes the value of the fifth entry of the vector
    <!-- Error occurred while translating this section --><SCHEMEINLINE>v</SCHEMEINLINE>
    to 7.<FOOTNOTE>For completeness, we should specify a
    <SPLITINLINE>
      <SCHEME>make-vector</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_vector</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operation that constructs vectors.  However, in the present application we
    will use vectors only to model fixed divisions of the computer
    memory.</FOOTNOTE> For computer memory, this access can be implemented
    through the use of address arithmetic to combine a <EM>base address</EM>
    that specifies the beginning location of a vector in memory with an
    <EM>index</EM> that specifies the offset of a particular element of the
    vector.
  <!-- Error occurred while translating this section --></TEXT>

  <SUBHEADING> 
    <NAME>Representing
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
    </SPLITINLINE>
    data</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <INDEX>pair(s)<SUBINDEX>represented using vectors<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>list structure<SUBINDEX>represented using vectors<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <PDF_ONLY>
    <!--  Figure moved earlier for SICP JS pagination  -->
    <!--  Figure code is copy of code later in this file in a WEB_ONLY  -->
    <SPLIT>
      <SCHEME>
	<FIGURE WEB_SCALE="0.9" SRC="img_original/Fig5.14b.std.svg">
          <CAPTION>Box-and-pointer and memory-vector representations
          of the list <SCHEMEINLINE>((1 2) 3 4)</SCHEMEINLINE>.</CAPTION>
          <LABEL NAME="fig:box-and-pointer-memory_scheme"></LABEL>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
	  <FIGURE WEB_SCALE="0.9" SRC="img_javascript/Fig5.14b.std.svg"></FIGURE>
          <CAPTION>Box-and-pointer and memory-vector representations
          of the list
	  <JAVASCRIPTINLINE>list(list(1, 2), 3, 4)</JAVASCRIPTINLINE>.</CAPTION>
          <LABEL NAME="fig:box-and-pointer-memory"></LABEL>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </PDF_ONLY><!-- Error occurred while translating this section -->

  <TEXT>
    We can use vectors to implement the basic pair structures required for a
    list-structured memory.  Let us imagine that computer memory is divided into
    two vectors: 
    <INDEX><USE>the_heads</USE><SUBINDEX>vector</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cars</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_heads</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and 
    <INDEX><USE>the_tails</USE><SUBINDEX>vector</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cdrs</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_tails</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    We will represent list structure as follows: A pointer to a pair is an index
    into the two vectors.  The 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of the pair is the entry in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cars</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_heads</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    with the designated index, and the 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>tail</JAVASCRIPT>
    </SPLITINLINE>
    of the pair is the entry in
    <SPLITINLINE><SCHEME><SCHEMEINLINE>the-cdrs</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>the_tails</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    with the designated index.  We also need a representation for objects other
    than pairs (such as numbers and
    <SPLITINLINE>
      <SCHEME>symbols)</SCHEME>
      <JAVASCRIPT>strings)</JAVASCRIPT>
    </SPLITINLINE>
    and a way to distinguish one kind of data from another. There are many
    methods of accomplishing this, but they all reduce to using 
    <INDEX>typed pointer</INDEX>
    <INDEX>pointer<SUBINDEX>typed</SUBINDEX></INDEX>
    <!-- Error occurred while translating this section --><EM>typed pointers<!-- Error occurred while translating this section --></EM>, that is, to extending the notion of
    <!-- Error occurred while translating this section --><QUOTE>pointer<!-- Error occurred while translating this section --></QUOTE> to include information on data type.<!-- Error occurred while translating this section --><FOOTNOTE>This is
    precisely the same 
    <INDEX>tagged data</INDEX>
    <INDEX>data<SUBINDEX>tagged</SUBINDEX></INDEX>
    <QUOTE>tagged data</QUOTE> idea we introduced in chapter<SPACE></SPACE><REF NAME="chap:data"></REF> for
    dealing with generic operations.  Here, however, the data types are
    included at the primitive machine level rather than constructed
    through the use of lists.
    <TEXT>
      Type information may be encoded in
      a variety of ways, depending on the details of the machine on which the
      <SPLITINLINE>
	<SCHEME>Lisp</SCHEME>
	<JAVASCRIPT>JavaScript</JAVASCRIPT>
      </SPLITINLINE>
      system is to be implemented.  The execution efficiency of
      <SPLITINLINE>
	<SCHEME>Lisp</SCHEME>
	<JAVASCRIPT>JavaScript</JAVASCRIPT>
      </SPLITINLINE>
      programs will be strongly dependent on how cleverly this choice is made, but
      it is difficult to formulate general design rules for good choices.  The
      most straightforward way to implement typed pointers is to allocate a fixed
      set of bits in each pointer to be a
      <INDEX>type field</INDEX>
      <EM>type field</EM> that encodes the data type.  Important questions to be
      addressed in designing such a representation include the following:
      How many type bits are required?  How large must the vector indices
      be?  How efficiently can the primitive machine instructions be used to
      manipulate the type fields of pointers?  Machines that include special
      hardware for the efficient handling of type fields are said to have
      <INDEX>tagged architecture</INDEX>
      <EM>tagged architectures</EM>.
    </TEXT>
    <!-- Error occurred while translating this section --></FOOTNOTE> The data type enables the system to
    distinguish a pointer to a pair (which consists of the <!-- Error occurred while translating this section --><QUOTE>pair<!-- Error occurred while translating this section --></QUOTE>
    data type and an index into the memory vectors) from pointers to other
    kinds of data (which consist of some other data type and whatever is
    being used to represent data of that type).  Two data objects are
    <!-- Error occurred while translating this section --><INDEX><USE>===</USE><SUBINDEX><ORDER>equality</ORDER>as equality of pointers</SUBINDEX></INDEX>
    considered to be the same
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>eq?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    if their pointers are identical.
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE></SPACE><REF NAME="fig:box-and-pointer-memory_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE></SPACE><REF NAME="fig:box-and-pointer-memory"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    illustrates the use of this method to represent 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>((1 2) 3 4)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(list(1, 2), 3, 4)</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    whose box-and-pointer diagram is also shown.  We use letter prefixes to
    denote the data-type information.  Thus, a pointer to the pair with
    index<SPACE></SPACE>5 is denoted <!-- Error occurred while translating this section --><SCHEMEINLINE>p5</SCHEMEINLINE>, the empty list
    is denoted by the pointer <!-- Error occurred while translating this section --><SCHEMEINLINE>e0</SCHEMEINLINE>, and a pointer to
    the number<SPACE></SPACE>4 is denoted <!-- Error occurred while translating this section --><SCHEMEINLINE>n4</SCHEMEINLINE>.  In the
    box-and-pointer diagram, we have indicated at the lower left of each pair
    the vector index that specifies where the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of the pair are stored.  The blank locations in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cars</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_heads</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cdrs</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_tails</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SHRINK_PARAGRAPH LINES="1"></SHRINK_PARAGRAPH>
    may contain parts of other list structures (not of interest here).
    <WEB_ONLY>
    <!--   Figure moved earlier for SICP JS pagination   -->
    <!--   Figure code is copy of code earlier in this file in a PDF_ONLY   -->
    <SPLIT>
      <SCHEME>
	<FIGURE WEB_SCALE="0.9" SRC="img_original/Fig5.14b.std.svg">
          <CAPTION>Box-and-pointer and memory-vector representations 
          of the list <SCHEMEINLINE>((1 2) 3 4)</SCHEMEINLINE>.</CAPTION>
          <LABEL NAME="fig:box-and-pointer-memory_scheme"></LABEL>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
	  <FIGURE WEB_SCALE="0.9" SRC="img_javascript/Fig5.14b.std.svg"></FIGURE>
          <CAPTION>Box-and-pointer and memory-vector representations 
          of the list
	  <JAVASCRIPTINLINE>list(list(1, 2), 3, 4)</JAVASCRIPTINLINE>.</CAPTION>
          <LABEL NAME="fig:box-and-pointer-memory"></LABEL>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    </WEB_ONLY>
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    A pointer to a number, such as <SCHEMEINLINE>n4</SCHEMEINLINE>,
    might consist of a type indicating numeric data together with the
    actual representation of the number 4.<FOOTNOTE>This decision on the
    representation of numbers determines whether
    <INDEX><USE>===</USE><SUBINDEX><ORDER>numeric</ORDER>as numeric equality operator</SUBINDEX></INDEX>
    <INDEX>equality<SUBINDEX><ORDER>numbers</ORDER>of numbers</SUBINDEX></INDEX>
    <INDEX>number(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eq?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which tests equality of pointers, can be used to test for equality of
    numbers.  If the pointer contains the number itself, then equal numbers will
    have the same pointer.  But if the pointer contains the index of a location
    where the number is stored, equal numbers will be guaranteed to have
    equal pointers only if we are careful never to store the same number
    in more than one location.</FOOTNOTE>
    To deal with numbers that are too large to be represented in the fixed
    amount of space allocated for a single pointer, we could use a distinct 
    <INDEX>bignum</INDEX>
    <INDEX>number(s)<SUBINDEX>bignum</SUBINDEX></INDEX>
    <EM>bignum</EM> data type, for which the pointer designates a list in which
    the parts of the number are stored.<FOOTNOTE>This is just like writing a
    number as a sequence of digits, except that each <QUOTE>digit</QUOTE> is a
    number between 0 and the largest number that can be stored in a single
    pointer.</FOOTNOTE>
  </TEXT><!-- Error occurred while translating this section -->

  <SPLIT>
    <SCHEME>
      <TEXT>
	A
	<INDEX>symbol(s)<SUBINDEX>representation of</SUBINDEX></INDEX>
	symbol might be represented as a typed pointer that designates a
	sequence of the characters that form the symbol<APOS></APOS>s
	printed representation. This sequence is constructed by the
	Lisp reader
	when the character string is initially encountered in input.  Since
	we want two instances of a symbol
	to be recognized as the <QUOTE>same</QUOTE> symbol by
	<SCHEMEINLINE>eq?</SCHEMEINLINE>
	and we want
	<INDEX><USE>eq?</USE><SUBINDEX><ORDER>symbol</ORDER>as symbol comparison operator</SUBINDEX></INDEX>
	<INDEX>equality<SUBINDEX><ORDER>symbol</ORDER>of symbols</SUBINDEX></INDEX>
	<SCHEMEINLINE>eq?</SCHEMEINLINE>
	to be a simple test for equality of pointers, we must ensure that if the
	reader sees the same character string twice, it will use the same pointer
	(to the same sequence of characters) to represent both occurrences.
	To accomplish this, the reader maintains a table, traditionally called the
	<INDEX>obarray</INDEX>
	<EM>obarray</EM>, of all the symbols it has ever encountered.  When the
        reader encounters a character string and is about to construct a
        symbol, it checks the obarray to see if it
	has ever before seen the same character string.  If it has not, it
	uses the characters to construct a new symbol (a typed pointer to a
	new character sequence) and enters this pointer in the obarray.
	If the reader has seen the string before, it returns the
        symbol pointer stored in the obarray.
	This process of replacing character strings
	by unique pointers is called 
	<INDEX>interning strings</INDEX>
	<INDEX>string(s)<SUBINDEX>interning</SUBINDEX></INDEX>
	<EM>interning</EM> symbols.
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	A string
	<INDEX>string(s)<SUBINDEX>representation of</SUBINDEX></INDEX>
	might be represented as a typed pointer that designates a
	sequence of the characters that form the string<APOS></APOS>s printed
	representation. The parser constructs such a sequence
	when it encounters a string literal, and the
	string-concatenation operator <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> and
	string-producing
	primitive functions such as
	<JAVASCRIPTINLINE>stringify</JAVASCRIPTINLINE> 
	construct such a sequence.
	Since we want two instances of a string to
	be recognized as the <QUOTE>same</QUOTE> string by
	<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> and we want
	<INDEX><USE>===</USE><SUBINDEX><ORDER>string</ORDER>as string comparison operator</SUBINDEX></INDEX>
	<INDEX>equality<SUBINDEX><ORDER>strings</ORDER>of strings</SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>
	to
	be a simple test for equality of pointers, we must ensure that if the
	system sees the same string twice, it will use the same pointer (to
	the same sequence of characters) to represent both occurrences. To
	accomplish this, the system maintains a table, called the
	<INDEX>string pool</INDEX>
	<EM>string pool</EM>, 
	of all the strings it has ever encountered. When the system
	is about to construct a string, it checks the string pool to see if it has ever
	before seen the same string. If it has not, it
	constructs a new string (a typed pointer to a new
	character sequence) and enters this pointer in the string pool. If the
	system has seen the string before, it returns the string pointer
	stored in the string pool. This process of replacing strings by unique
	pointers is called
	<INDEX>interning strings</INDEX>
	<INDEX>string(s)<SUBINDEX>interning</SUBINDEX></INDEX>
	<EM>string interning</EM>.
      </TEXT>
    </JAVASCRIPT>
  <!-- Error occurred while translating this section --></SPLIT>
    
  <SUBHEADING> 
    <LABEL NAME="sec:impl-list-ops"></LABEL>
    <NAME>Implementing the primitive list operations</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <TEXT>
    Given the above representation scheme, we can replace each
    <QUOTE>primitive</QUOTE> list operation of a register machine with one or
    more primitive vector operations.  We will use two registers,
    <INDEX><USE>the_heads</USE><SUBINDEX>register</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cars</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_heads</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>the_tails</USE><SUBINDEX>register</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cdrs</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_tails</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    to identify the memory vectors, and will
    assume that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>vector-ref</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>vector_ref</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>vector-set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>vector_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    are available as primitive operations.  We also assume that numeric
    operations on pointers (such as incrementing a pointer, using a pair pointer
    to index a vector, or adding two numbers) use only the index portion of
    the typed pointer.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    For example, we can make a register machine support the instructions
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><USE>head</USE> (primitive function)<SUBINDEX>implemented with vectors</SUBINDEX></INDEX>
      <INDEX><USE>tail</USE> (primitive function)<SUBINDEX>implemented with vectors</SUBINDEX></INDEX>
      <SCHEME>
(assign reg$_{1}$ (op car) (reg reg$_{2}$))

(assign reg$_{1}$ (op cdr) (reg reg$_{2}$))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>reg</META>$_1$, list(op(&quot;head&quot;), reg(<META>reg</META>$_2$)))

assign(<META>reg</META>$_1$, list(op(&quot;tail&quot;), reg(<META>reg</META>$_2$)))
      </JAVASCRIPT>
    </SNIPPET>
    if we implement these, respectively, as
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign reg$_{1}$ (op vector-ref) (reg the-cars) (reg reg$_{2}$))

(assign reg$_{1}$ (op vector-ref) (reg the-cdrs) (reg reg$_{2}$))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>reg</META>$_1$, list(op(&quot;vector_ref&quot;), reg(&quot;the_heads&quot;), reg(<META>reg</META>$_2$)))

assign(<META>reg</META>$_1$, list(op(&quot;vector_ref&quot;), reg(&quot;the_tails&quot;), reg(<META>reg</META>$_2$)))
      </JAVASCRIPT>
    </SNIPPET>

    The instructions
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><USE>set_head</USE> (primitive function)<SUBINDEX>implemented with vectors</SUBINDEX></INDEX>
      <INDEX><USE>set_tail</USE> (primitive function)<SUBINDEX>implemented with vectors</SUBINDEX></INDEX>
      <SCHEME>
(perform (op set-car!) (reg reg$_{1}$) (reg reg$_{2}$))

(perform (op set-cdr!) (reg reg$_{1}$) (reg reg$_{2}$))
      </SCHEME>
      <JAVASCRIPT>
perform(list(op(&quot;set_head&quot;), reg(<META>reg</META>$_1$), reg(<META>reg</META>$_2$)))

perform(list(op(&quot;set_tail&quot;), reg(<META>reg</META>$_1$), reg(<META>reg</META>$_2$)))
      </JAVASCRIPT>
    </SNIPPET>
    are implemented as
    <!-- Error occurred while translating this section --><SNIPPET LATEX="yes">
      <SCHEME>
(perform
 (op vector-set!) (reg the-cars) (reg reg$_{1}$) (reg reg$_{2}$))

 (perform
 (op vector-set!) (reg the-cdrs) (reg reg$_{1}$) (reg reg$_{2}$))
      </SCHEME>
      <JAVASCRIPT>
perform(list(op(&quot;vector_set&quot;), reg(&quot;the_heads&quot;), reg(<META>reg</META>$_1$), reg(<META>reg</META>$_2$)))

perform(list(op(&quot;vector_set&quot;), reg(&quot;the_tails&quot;), reg(<META>reg</META>$_1$), reg(<META>reg</META>$_2$)))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Cons</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The operation
	<INDEX><USE>pair</USE> (primitive function)<SUBINDEX>implemented with vectors</SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is performed by allocating an unused index and storing the arguments to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cars</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_heads</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-cdrs</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_tails</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    at that indexed vector position.  We presume that there is a special
    register,
    <INDEX><USE>free</USE> register</INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>free</SCHEMEINLINE>, that always holds a pair pointer
    containing the next available index, and that we can increment the index
    part of that pointer to find the next free location.<FOOTNOTE>There are
    other ways of finding free storage.  For example, we could link together
    all the unused pairs into a 
    <INDEX>free list</INDEX>
    <EM>free list</EM>.  Our free locations are consecutive (and hence can be
    accessed by incrementing a pointer) because we are using a compacting
    garbage collector, as we will see in
    section<SPACE></SPACE><REF NAME="sec:gc"></REF>.</FOOTNOTE>
    For example, the instruction
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign reg$_{1}$ (op cons) (reg reg$_{2}$) (reg reg$_{3}$))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>reg</META>$_1$, list(op(&quot;pair&quot;), reg(<META>reg</META>$_2$), reg(<META>reg</META>$_3$)))
      </JAVASCRIPT>
    </SNIPPET>
    is implemented as the following sequence of vector
    operations:<FOOTNOTE>This is essentially the implementation of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in terms of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-car!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>set_head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-cdr!</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>set_tail</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    as described in section<SPACE></SPACE><REF NAME="sec:mutable-list-structure"></REF>.
    The operation
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-new-pair</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_new_pair</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    used in that implementation is realized here by the
    <SCHEMEINLINE>free</SCHEMEINLINE> pointer.</FOOTNOTE>
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(perform
 (op vector-set!) (reg the-cars) (reg free) (reg reg$_{2}$))
(perform
 (op vector-set!) (reg the-cdrs) (reg free) (reg reg$_{3}$))
      (assign reg$_{1}$ (reg free))
      (assign free (op +) (reg free) (const 1))
      </SCHEME>
      <JAVASCRIPT>
perform(list(op(&quot;vector_set&quot;),
             reg(&quot;the_heads&quot;), reg(&quot;free&quot;), reg(<META>reg</META>$_2$))),
perform(list(op(&quot;vector_set&quot;),
             reg(&quot;the_tails&quot;), reg(&quot;free&quot;), reg(<META>reg</META>$_3$))),
assign(<META>reg</META>$_1$, reg(&quot;free&quot;)),
assign(&quot;free&quot;, list(op(&quot;+&quot;), reg(&quot;free&quot;), constant(1)))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eq?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>===</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operation
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(op eq?) (reg reg$_{1}$) (reg reg$_{2}$)
      </SCHEME>
      <JAVASCRIPT>
list(op(&quot;===&quot;), reg(<META>reg</META>$_1$), reg(<META>reg</META>$_2$))
      </JAVASCRIPT>
    </SNIPPET>
    simply tests the equality of all fields in the registers, and
    predicates such as
    <INDEX><USE>is_pair</USE> (primitive function)<SUBINDEX>implemented with typed pointers</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>pair?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>is_null</USE> (primitive function)<SUBINDEX>implemented with typed pointers</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>null?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_null</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>is_string</USE> (primitive function)<SUBINDEX>implemented with typed pointers</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>symbol?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_string</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>is_number</USE> (primitive function)<SUBINDEX>implemented with typed pointers</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    need only check the type field.
  </TEXT><!-- Error occurred while translating this section -->

  <SUBHEADING>
    <NAME>Implementing stacks</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->
  <LONG_PAGE LINES="2"></LONG_PAGE>

  <INDEX>stack<SUBINDEX>representing</SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    Although our register machines use stacks, we need do nothing special
    here, since stacks can be modeled in terms of lists.  The stack can be
    <SHRINK_PARAGRAPH LINES="1"></SHRINK_PARAGRAPH>
    a list of the saved values, pointed to by a special register
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>the-stack</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>the_stack</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Thus,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(save reg)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>save(</JAVASCRIPTINLINE><META>reg</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be implemented<SPACE></SPACE>as
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><USE>save</USE> (in register machine)<SUBINDEX>implementing</SUBINDEX></INDEX>
      <SCHEME>
(assign the-stack (op cons) (reg reg) (reg the-stack))
      </SCHEME>
      <JAVASCRIPT>
assign(&quot;the_stack&quot;, list(op(&quot;pair&quot;), reg(<META>reg</META>), reg(&quot;the_stack&quot;)))
      </JAVASCRIPT>
    </SNIPPET>
    Similarly,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(restore reg)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>restore(</JAVASCRIPTINLINE><!--  
	  --><META>reg</META><!--  
          --><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be implemented as
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><USE>restore</USE> (in register machine)<SUBINDEX>implementing</SUBINDEX></INDEX>
      <SCHEME>
(assign reg (op car) (reg the-stack))
(assign the-stack (op cdr) (reg the-stack))
      </SCHEME>
      <JAVASCRIPT>
assign(<META>reg</META>, list(op(&quot;head&quot;), reg(&quot;the_stack&quot;)))
assign(&quot;the_stack&quot;, list(op(&quot;tail&quot;), reg(&quot;the_stack&quot;)))
      </JAVASCRIPT>
    </SNIPPET>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(perform (op initialize-stack))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>perform(list(op(&quot;initialize_stack&quot;)))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    can be implemented as
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign the-stack (const ()))
      </SCHEME>
      <JAVASCRIPT>
assign(&quot;the_stack&quot;, constant(null))
      </JAVASCRIPT>
    </SNIPPET>

    These operations can be further expanded in terms of the vector
    operations given above.  In conventional computer architectures,
    however, it is usually advantageous to allocate the stack as a
    separate vector.  Then pushing and popping the stack can be
    accomplished by incrementing or decrementing an index into that
    vector.
  <!-- Error occurred while translating this section --></TEXT>

  <EXERCISE>
    Draw the box-and-pointer representation and the memory-vector representation
    <SPLITINLINE>
      <SCHEME>
	(as in figure<SPACE></SPACE><REF NAME="fig:box-and-pointer-memory_scheme"></REF>)
      </SCHEME>
      <JAVASCRIPT>
	(as in figure<SPACE></SPACE><REF NAME="fig:box-and-pointer-memory"></REF>)
      </JAVASCRIPT>
    </SPLITINLINE>
    of the list structure produced by

    <SNIPPET EVAL="no">
      <SCHEME>
(define x (cons 1 2))
(define y (list x x))
      </SCHEME>
      <JAVASCRIPT>
const x = pair(1, 2);
const y = list(x, x);
      </JAVASCRIPT>
    </SNIPPET>
    with the <SCHEMEINLINE>free</SCHEMEINLINE> pointer initially
    <SCHEMEINLINE>p1</SCHEMEINLINE>.  What is the final value of
    <SCHEMEINLINE>free</SCHEMEINLINE><LATEXINLINE>$\,$</LATEXINLINE>?  What
    pointers represent the values of <SCHEMEINLINE>x</SCHEMEINLINE> and
    <SCHEMEINLINE>y</SCHEMEINLINE>?
    <LABEL NAME="ex:5_19"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    <LABEL NAME="ex:count-leaves-machine"></LABEL>
    Implement register machines for the following
    <INDEX><USE>count_leaves</USE><SUBINDEX>as register machine</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Assume that the list-structure memory operations are available as
    machine primitives.
    <!-- Error occurred while translating this section --><OL>
      <LI>
	Recursive
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE>:</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE>:
	  </JAVASCRIPT>
	</SPLITINLINE>
	<SNIPPET>
	  <NAME>count_leaves_5_3_1</NAME>
	  <EXAMPLE>count_leaves_example</EXAMPLE>
	  <EXPECTED>4</EXPECTED>
          <SCHEME>
(define (count-leaves tree)
  (cond ((null? tree) 0)
        ((not (pair? tree)) 1)
        (else (+ (count-leaves (car tree))
                 (count-leaves (cdr tree))))))
          </SCHEME>
          <JAVASCRIPT>
function count_leaves(tree) {
    return is_null(tree)
           ? 0
           : ! is_pair(tree)
           ? 1
           : count_leaves(head(tree)) +
             count_leaves(tail(tree));
}
	  </JAVASCRIPT>
	</SNIPPET>
      </LI>
      <LI>
	Recursive
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	with explicit counter:
	<SNIPPET POSTPADDING="no">
	  <NAME>count_leaves_5_3_1_iter</NAME>
	  <EXAMPLE>count_leaves_example</EXAMPLE>
	  <EXPECTED>4</EXPECTED>
          <SCHEME>
(define (count-leaves tree)
  (define (count-iter tree n)
    (cond ((null? tree) n)
          ((not (pair? tree)) (+ n 1))
          (else (count-iter (cdr tree)
                            (count-iter (car tree) n)))))
  (count-iter tree 0))
          </SCHEME>
	  <JAVASCRIPT>
function count_leaves(tree) {
    function count_iter(tree, n) {
        return is_null(tree)
               ? n
               : ! is_pair(tree) 
               ? n + 1
               : count_iter(tail(tree),
                            count_iter(head(tree), n));
    }
    return count_iter(tree, 0);
}
	  </JAVASCRIPT>
	</SNIPPET>
      </LI>
    </OL>
  <!-- Error occurred while translating this section --></EXERCISE>

  <EXERCISE>
    Exercise<SPACE></SPACE><REF NAME="ex:append"></REF> of
    section<SPACE></SPACE><REF NAME="sec:mutable-list-structure"></REF>
    presented an
    <SCHEMEINLINE>append</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that appends two lists to form a new list and an
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>append!</SCHEMEINLINE>
      procedure
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>append_mutator</JAVASCRIPTINLINE>      
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    that splices two lists together.  Design a register machine to
    <INDEX><USE>append</USE><SUBINDEX><ORDER>register</ORDER>as register machine</SUBINDEX></INDEX>
    <INDEX><USE>append_mutator</USE><SUBINDEX>as register machine</SUBINDEX></INDEX>
    implement
    each of these
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Assume that the list-structure memory operations are
    available as primitive operations.
    <LABEL NAME="ex:5_21"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <INDEX>pair(s)<SUBINDEX>represented using vectors<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>list structure<SUBINDEX>represented using vectors<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

</SUBSECTION>
