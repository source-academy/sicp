<SECTION>
  <NAME>The Environment Model of Evaluation</NAME><!-- Error occurred while translating this section -->

  

  <LABEL NAME="sec:environment-model"></LABEL>
  <INDEX>environment model of evaluation<OPEN></OPEN></INDEX><!-- Error occurred while translating this section -->

  
  <TEXT>
    当我们在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中介绍复合
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    时，我们采用了（参见第<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节）
    <INDEX>过程应用的替换模型</INDEX>
    来定义将
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用于参数时的含义：
    <UL>
      <LI>要将复合
      <SPLITINLINE>
	<SCHEME>过程</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      应用于参数，应求值
      <SPLITINLINE>
	<SCHEME>过程的主体</SCHEME>
	<JAVASCRIPT>函数的返回表达式（更一般地说，是主体）</JAVASCRIPT>
      </SPLITINLINE>
      ，其中每个
      <SPLITINLINE>
	<SCHEME>形式参数</SCHEME>
      </SPLITINLINE>
      被相应的参数替换。
      </LI>
    </UL>
  </TEXT>


  
  <TEXT>
    一旦我们在编程语言中引入赋值，这样的定义便不再充分。特别是，第<SPACE></SPACE><REF NAME="sec:costs-of-assignment"></REF>节论证了，在存在赋值的情况下，
    <SPLITINLINE>
      <SCHEME>
	变量不能仅仅被视为值的名字，而必须以某种方式指示一个可以存储值的<QUOTE>位置</QUOTE>。
      </SCHEME>
      <JAVASCRIPT>
	名字不能仅仅被看作代表一个值，而必须以某种方式指示一个可以存储值的<QUOTE>位置</QUOTE>。
      </JAVASCRIPT>
    </SPLITINLINE>
    在我们新的求值模型中，这些位置将被维护在称为<INDEX>environment</INDEX><EM>environments</EM>的结构中。
  </TEXT>


  
  <TEXT>
    环境是一系列的 
    <INDEX>帧（环境模型）</INDEX>
    <EM>帧</EM>。 每个帧是一个表（可能为空），包含
    <INDEX>绑定</INDEX>
    <EM>绑定</EM>，它们将 
    <SPLITINLINE>
      <SCHEME>
	变量名
      </SCHEME>
      <JAVASCRIPT>
	名字
      </JAVASCRIPT>
    </SPLITINLINE>
    与它们对应的值相关联。
    <SPLITINLINE>
      <SCHEME>
	（单个帧中每个变量最多只能有一个绑定。）
      </SCHEME>
      <JAVASCRIPT>
	（单个帧中每个名字最多只能有一个绑定。）
      </JAVASCRIPT>
    </SPLITINLINE>
    每个帧还包含一个指向其 
    <INDEX>封闭环境</INDEX>
    <INDEX>environment<SUBINDEX>enclosing</SUBINDEX></INDEX>
    <EM>封闭环境</EM> 的指针，除非在讨论时该帧被视为 
    <INDEX>全局帧</INDEX>
    <INDEX>frame (environment model)<SUBINDEX>global</SUBINDEX></INDEX>
    <EM>全局</EM>。 在某个环境中，
    <SPLITINLINE>
      <SCHEME>
	<EM>变量的值</EM>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>名字<SUBINDEX>value of</SUBINDEX></INDEX>
	<EM>名称的值</EM>
      </JAVASCRIPT>
    </SPLITINLINE>
    是由在环境中第一个包含该
    <SPLITINLINE>
      <SCHEME>
	变量
      </SCHEME>
      <JAVASCRIPT>
	名字
      </JAVASCRIPT>
    </SPLITINLINE>
    绑定的帧中给定的值。如果这一序列中的任何帧都没有为该
    <SPLITINLINE>
      <SCHEME>
	变量，
      </SCHEME>
      <JAVASCRIPT>
	名字，
      </JAVASCRIPT>
    </SPLITINLINE>
    指定绑定，那么该
    <SPLITINLINE>
      <SCHEME>
	变量
      </SCHEME>
      <JAVASCRIPT>
	名字
      </JAVASCRIPT>
    </SPLITINLINE>
    在该环境中被称为
    <INDEX>unbound name</INDEX>
    <INDEX>name<SUBINDEX>unbound</SUBINDEX></INDEX>
    <EM>unbound</EM>。
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.65" SRC="img_original/ch3-Z-G-2.svg"></FIGURE>
          <LABEL NAME="fig:environment-structure_scheme"></LABEL>
          <CAPTION>一个简单的环境结构。</CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.65" WEB_SCALE="0.5" SRC="img_javascript/ch3-Z-G-2.svg"></FIGURE>
          <LABEL NAME="fig:environment-structure"></LABEL>
          <CAPTION>
	    一个简单的 
	    <INDEX>求值的环境模型<SUBINDEX>environment structure</SUBINDEX></INDEX>
	    环境结构。
	  </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>


  
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	      图<SPACE></SPACE><REF NAME="fig:environment-structure_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	      图<SPACE></SPACE><REF NAME="fig:environment-structure"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    展示了一个简单的环境结构，由三个帧组成，分别标记为 I、II 和 III。在图中，A、B、C 和 D 是指向环境的指针。C 和 D 指向相同的环境。
    <SPLITINLINE>
      <SCHEME>
	      变量
      </SCHEME>
      <JAVASCRIPT>
	      名字
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>z</SCHEMEINLINE> 和 <SCHEMEINLINE>x</SCHEMEINLINE> 在帧 II 中被绑定，而 <SCHEMEINLINE>y</SCHEMEINLINE> 和 <SCHEMEINLINE>x</SCHEMEINLINE> 在帧 I 中被绑定。在环境 D 中 <SCHEMEINLINE>x</SCHEMEINLINE> 的值为 3，相对于环境 B，<SCHEMEINLINE>x</SCHEMEINLINE> 的值也为 3。具体确定方式如下：我们检查序列中的第一个帧（帧 III），未找到 <SCHEMEINLINE>x</SCHEMEINLINE> 的绑定，因此转而检查其封闭环境 D，并在帧 I 中找到了该绑定。另一方面，在环境 A 中 <SCHEMEINLINE>x</SCHEMEINLINE> 的值为 7，因为序列中的第一个帧（帧 II）包含了将 <SCHEMEINLINE>x</SCHEMEINLINE> 绑定到 7 的绑定。就环境 A 而言，帧 II 中将 <SCHEMEINLINE>x</SCHEMEINLINE> 绑定到 7 的绑定被称为 
    <INDEX>遮蔽绑定</INDEX>
    <EM>遮蔽</EM>
    帧 I 中将 <SCHEMEINLINE>x</SCHEMEINLINE> 绑定到 3 的绑定。
  </TEXT>


  
  <TEXT>
    环境对于求值过程至关重要，因为它决定了一个表达式应当在何种上下文中被求值。事实上，可以说编程语言中的表达式本身没有任何意义。相反，一个表达式只有在某个环境中求值时才获得意义。
    <SPLIT>
      <SCHEME>
	甚至对于像 <SCHEMEINLINE>(+ 1 1)</SCHEMEINLINE> 这样简单明了的表达式，其解释也取决于这样一种理解：人们正在一个上下文中操作，在这个上下文中 <SCHEMEINLINE>+</SCHEMEINLINE> 被视为加法的符号。
      </SCHEME>
      <JAVASCRIPT>
	甚至对于像 <JAVASCRIPTINLINE>display(1)</JAVASCRIPTINLINE> 这样简单明了的表达式，其解释也取决于这样一种理解：人们正在一个上下文中操作，在这个上下文中名称 <SCHEMEINLINE>display</SCHEMEINLINE> 指的是用于显示值的原始函数。
      </JAVASCRIPT>
    </SPLIT>
    因此，在我们的求值模型中，我们总是讨论相对于某个环境来求值表达式。为了描述与解释器的交互，我们假定存在一个
    <INDEX>global environment</INDEX>
    全局环境，该全局环境由单一帧（没有封闭环境）组成，其中包含与
    <SPLITINLINE>
      <SCHEME>
	符号
      </SCHEME>
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>
    相关联的原始
    <SPLITINLINE>
      <SCHEME>
	过程。
      </SCHEME>
      <JAVASCRIPT>
	函数。
      </JAVASCRIPT>
    </SPLITINLINE>
    的值。例如，将
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>+</SCHEMEINLINE> 被视为加法符号的观点
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 被视为原始显示函数名称的观点
      </JAVASCRIPT>
    </SPLITINLINE>
    表现为：在全局环境中，符号 <SCHEMEINLINE>+</SCHEMEINLINE>（或名称 <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>）被绑定到原始
    <SPLITINLINE>
      <SCHEME>加法过程。</SCHEME>
      <JAVASCRIPT>显示函数。</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  
  <SPLIT>
    <JAVASCRIPT>
      <TEXT>
        在求值程序之前，我们在全局环境中扩展了一个新的帧，称为<EM>程序帧</EM>，从而构成了<INDEX>程序环境</INDEX> <EM>程序环境</EM>。我们会将程序顶层（即任何块之外）声明的名称加入到该帧中。随后，在程序环境下对给定的程序进行求值。
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>


  <!--  Subsection 1 : The Rules of Evaluation  -->
  &amp;subsection3.2.1;

  <!--  Subsection 2 : Applying Simple Procedures  -->
  &amp;subsection3.2.2;

  <!--  Subsection 3 : Frames as the Repository of Local State  -->
  &amp;subsection3.2.3;

  <!--  Subsection 4 : Internal Definitions  -->
  &amp;subsection3.2.4;

  <!--  Subsection 5 : CSE Machine  -->
  &amp;subsection3.2.5;

</SECTION>
