<SUBSECTION>
  <LABEL NAME="sec:compound-procedures"></LABEL>
  
  <NAME>
    复合 <SPLITINLINE><SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>
  </NAME>


  
  <TEXT>
    我们已经在 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    中识别出任何强大编程语言中必须出现的一些元素：
    <UL>
      <LI>
        数字和算术运算是原始数据，并且
        <SPLITINLINE>
	  <SCHEME>过程.</SCHEME>
	  <JAVASCRIPT>函数.</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
        组合的嵌套提供了组合运算的一种手段。
      </LI>
      <LI>
        常量声明通过将名称与值关联起来，提供了一种有限的抽象手段。
      </LI>
    </UL>
    现在我们将学习关于
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX>的定义</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>的声明</SUBINDEX><OPEN></OPEN></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
        <EM>过程定义</EM>,
      </SCHEME>
      <JAVASCRIPT>
	<EM>函数声明</EM>, 
      </JAVASCRIPT>
    </SPLITINLINE>
    一种更强大的抽象技术，通过它，一个复合运算可以被赋予一个名称，然后作为一个整体来引用。
  </TEXT>

  
  <TEXT>
    我们首先考察如何表达“平方”这一概念：
    <QUOTE>平方</QUOTE>
    我们可以这样说，
    <SPLITINLINE>
      <SCHEME>
	<QUOTE>要使一个数平方，将它乘以它本身。</QUOTE>
      </SCHEME>
      <JAVASCRIPT>
	<QUOTE>要使一个数平方，把它与其自身相乘。</QUOTE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>
      Scheme和JavaScript中的表达略有不同，以更好地适应JavaScript中的中缀表示法。
    </COMMENT>
    这在我们的语言中表达为
    <SNIPPET>
      <INDEX><DECLARATION>square</DECLARATION></INDEX>
      <INDEX><USE>function</USE> (keyword)</INDEX>
      <INDEX>keywords<SUBINDEX><ORDER>function</ORDER><USE>function</USE></SUBINDEX></INDEX>
      <NAME>square_definition</NAME>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x) (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>square_example</NAME>
      <SCHEME>
	(square 14)
      </SCHEME>
      <JAVASCRIPT>
square(14);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <LONG_PAGE LINES="1"></LONG_PAGE>
  
  <TEXT>
    我们可以按如下方式理解：
    <WEB_ONLY>
      <SNIPPET EVAL="no">
	<SCHEME>
(define (square x)          (*          x      x))
;;  ^      ^    ^            ^          ^      ^
;;  为了对某物求平方，将其与自身相乘。
	</SCHEME>
	<JAVASCRIPT>
function square(    x   ) { return x    *     x; }
//  ^       ^       ^         ^    ^    ^     ^
// 为了对某物求平方，将其乘以它自身。
	</JAVASCRIPT>
      </SNIPPET>
    </WEB_ONLY>

    <PDF_ONLY>
    <LATEX>
      \begin{flushleft}\normalcodesize
      \begin{tabular}{@{}c@{~}c@{~}c@{~}c@{~}c@{~}c@{~}c@{~}c@{~}c@{~}c}
      \tt\textbf{function} &amp; \tt square(        &amp; \tt x                  &amp;  \tt ) \verb+{+ &amp; \tt\textbf{return} &amp; \tt x          &amp;  \tt *            &amp;   \tt x &amp; \tt; \verb+}+  \\
      $\Big\uparrow$       &amp; $\Big\uparrow$     &amp; $\Big\uparrow$         &amp;                 &amp;                    &amp; $\Big\uparrow$ &amp; $\Big\uparrow$    &amp; $\Big\uparrow$ \\[4pt]
      \normalsize To       &amp; \normalsize square &amp; \normalsize something, &amp;                 &amp; \normalsize take   &amp;\normalsize it  &amp; \normalsize times &amp; \normalsize itself. \\
      \end{tabular}
      \end{flushleft}
      </LATEX>
    </PDF_ONLY>
    我们在这里有一个
    <SPLITINLINE>
      <SCHEME>
	<INDEX>compound procedure</INDEX>
	<INDEX>procedure<SUBINDEX>compound</SUBINDEX></INDEX>
	<EM>compound procedure</EM>,
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>compound function</INDEX>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>compound</SUBINDEX></INDEX>
	<EM>compound function</EM>,
      </JAVASCRIPT>
    </SPLITINLINE>
    它被命名为 <SCHEMEINLINE>square</SCHEMEINLINE>。这
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    表示将某物与自身相乘的操作。待相乘的数被赋予一个局部名称 <SCHEMEINLINE>x</SCHEMEINLINE>，
    这一名称在自然语言中起着代词相似的作用。
    <SPLITINLINE>
      <SCHEME>
	<INDEX>naming<SUBINDEX>of procedures</SUBINDEX></INDEX>
	<INDEX>procedure<SUBINDEX>naming (with <TT>define</TT>)</SUBINDEX></INDEX>
	<INDEX>procedure<SUBINDEX>creating with <TT>define</TT></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>naming<SUBINDEX>of functions</SUBINDEX></INDEX>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>naming (with function declaration)</SUBINDEX></INDEX>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>creating with function declaration</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    计算
    <SPLITINLINE>
      <SCHEME>
	definition
      </SCHEME>
      <JAVASCRIPT>
	declaration
      </JAVASCRIPT>
    </SPLITINLINE>
    会创建出这个复合
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <JAVASCRIPT>
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    并将其与名称
    <INDEX>syntactic forms<SUBINDEX>function declaration</SUBINDEX></INDEX>
    <INDEX><FUNCTION></FUNCTION></INDEX>
    <INDEX>function declaration</INDEX>
    <INDEX>declaration<SUBINDEX><ORDER>function</ORDER>of function (<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
    <SCHEMEINLINE>square</SCHEMEINLINE>关联。<FOOTNOTE>注意，这里结合了两种不同的操作：我们既在创建
    <SPLITINLINE>
      <SCHEME>
	procedure,
      </SCHEME></SPLITINLINE>
      <JAVASCRIPT>
	function,
      </JAVASCRIPT>
    又在赋予其名称 <SCHEMEINLINE>square</SCHEMEINLINE>。实际上，将这两个概念分离开来非常重要——既可以创建未命名的
    <SPLITINLINE>
      <SCHEME>
	procedures
      </SCHEME></SPLITINLINE>
      <JAVASCRIPT>
	functions
      </JAVASCRIPT>
    ，也可以为已经创建的
    <SPLITINLINE>
      <SCHEME>
	procedures
      </SCHEME></SPLITINLINE>
      <JAVASCRIPT>
	functions
      </JAVASCRIPT>
    赋予名称。我们将在章节<SPACE></SPACE><REF NAME="sec:lambda"></REF>中看到如何实现这一点。</FOOTNOTE>
  </TEXT>

  <TEXT>
    
  <SPLITINLINE>
      <SCHEME>
        过程定义的一般形式
      </SCHEME>
      <JAVASCRIPT>
        函数声明的最简单形式
      </JAVASCRIPT>
  </SPLITINLINE>
  是
<SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define ($\langle \textit{name} \rangle$ $\langle\textit{formal parameters}\rangle$) $\langle \textit{body} \rangle$)
      </SCHEME>
      <JAVASCRIPT>
function <META>name</META>(<META>parameters</META>) { return <META>expression</META>; }
      </JAVASCRIPT>
    </SNIPPET>
  The
  <SPLITINLINE>
    <SCHEME>
      <INDEX>名字<SUBINDEX><ORDER>过程</ORDER>的过程</SUBINDEX></INDEX>
      <INDEX>过程<SUBINDEX>的名字</SUBINDEX></INDEX>
      <LATEXINLINE>$\langle \textit{name}\rangle$</LATEXINLINE>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>名字<SUBINDEX><ORDER>函数</ORDER>的函数</SUBINDEX></INDEX>
      <INDEX><FUNCTION></FUNCTION><SUBINDEX>的名字</SUBINDEX></INDEX>
      <META>name</META>
    </JAVASCRIPT>
  </SPLITINLINE>
  是一个将与环境中
  <SPLITINLINE>
    <SCHEME>
      过程
    </SCHEME>
    <JAVASCRIPT>
      函数
    </JAVASCRIPT>
  </SPLITINLINE>
  定义关联的符号。<FOOTNOTE>在本书中，我们将通过使用斜体符号
  <INDEX>本书的符号<SUBINDEX>表达式语法中的斜体符号</SUBINDEX></INDEX>
  <INDEX>语法<SUBINDEX>描述表达式的一般语法</SUBINDEX></INDEX>
  来描述表达式的一般语法，这些斜体符号由
  <SPLITINLINE>
    <SCHEME>角括号</SCHEME>
  </SPLITINLINE>
  <EMDASH></EMDASH>例如，
  <SPLITINLINE>
    <SCHEME>
      <LATEXINLINE>$\langle \textit{name}\rangle$</LATEXINLINE>
      <EMDASH></EMDASH>表示
    </SCHEME>
    <JAVASCRIPT>
      <META>name</META>
      <EMDASH></EMDASH>表示
    </JAVASCRIPT>
  </SPLITINLINE>
  表达式中所需填充的<QUOTE>槽</QUOTE>。</FOOTNOTE>
  The
  <SPLITINLINE>
    <SCHEME>
      <INDEX>过程<SUBINDEX>的形式参数</SUBINDEX></INDEX>
      <INDEX>形式参数</INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX><FUNCTION></FUNCTION><SUBINDEX>的参数</SUBINDEX></INDEX>
      <INDEX>参数</INDEX>
    </JAVASCRIPT>
  </SPLITINLINE>
  <SPLITINLINE>
    <SCHEME>
      <LATEXINLINE>$\langle \textit{formal parameters}\rangle$</LATEXINLINE>
    </SCHEME>
    <JAVASCRIPT>
      <META>parameters</META>
    </JAVASCRIPT>
  </SPLITINLINE>
  是在
  <SPLITINLINE>
    <SCHEME>
      过程中
    </SCHEME>
    <JAVASCRIPT>
      函数中
    </JAVASCRIPT>
  </SPLITINLINE>
  用以引用其对应参数的名称，这些参数属于
  <SPLITINLINE>
    <SCHEME>
      该过程。
    </SCHEME>
    <JAVASCRIPT>
      该函数。
    </JAVASCRIPT>
  </SPLITINLINE>

  <SPLIT>
      <SCHEME>
	        The
        <INDEX>procedure<SUBINDEX>body of</SUBINDEX></INDEX>
        <INDEX>body of a procedure</INDEX>
	        <LATEXINLINE>$\langle \textit{body} \rangle$</LATEXINLINE>
	        是一个表达式，当形式参数被替换为该过程所应用的实际参数时，该表达式将产生过程调用的值。<FOOTNOTE>此外，
        <INDEX>sequence of expressions<SUBINDEX><ORDER>procedures</ORDER>in procedure body</SUBINDEX></INDEX>
        一般来说，过程的主体可以是一系列表达式。在这种情况下，解释器依次计算序列中的每个表达式，并返回最后一个表达式的值作为过程调用的结果。</FOOTNOTE>
	        The <LATEXINLINE>$\langle \textit{name} \rangle$</LATEXINLINE>
	        和
	        <LATEXINLINE>$\langle \textit{formal parameters} \rangle$</LATEXINLINE>
	        被组合在
	        <INDEX>parentheses<SUBINDEX><ORDER>procedure</ORDER>in procedure definition</SUBINDEX></INDEX>
	        <INDEX>procedure<SUBINDEX>definition of</SUBINDEX></INDEX>
	        括号内，就如同在实际调用被定义的过程时那样。
      </SCHEME>
      <JAVASCRIPT>
	        The <META>parameters</META>
	        被组合在
	        <INDEX>parentheses<SUBINDEX><ORDER>function</ORDER>in function declaration</SUBINDEX></INDEX>
	        <INDEX>parentheses<SUBINDEX><ORDER>function</ORDER>in function declaration</SUBINDEX></INDEX>
	        括号内，并用逗号分隔，就像在应用被声明的函数时那样。
	        <INDEX>return statement</INDEX>
	        <INDEX>return value</INDEX>
	        <INDEX><USE>return</USE> (keyword)</INDEX>
	        <INDEX>syntactic forms<SUBINDEX>return statement</SUBINDEX></INDEX>
	        <INDEX>keywords<SUBINDEX><ORDER>return</ORDER><USE>return</USE></SUBINDEX></INDEX>
	        在最简单的形式中，<INDEX><FUNCTION></FUNCTION><SUBINDEX>body of</SUBINDEX></INDEX>
	        <INDEX>body of a function</INDEX>
	        <EM>body</EM>
	        的函数声明是单个 <EM>return statement</EM>,<FOOTNOTE>此外，
	        <INDEX>sequence of statements<SUBINDEX><ORDER>functions</ORDER>in function body</SUBINDEX></INDEX>
	        一般来说，函数的主体可以是一系列语句。在这种情况下，解释器依次计算序列中的每个语句，直到一个返回语句确定函数调用的值。</FOOTNOTE>
	        它由关键字
	        <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>
	        开始，后跟将产生函数调用值的 <EM>return expression</EM>，当函数的
	        <SPLITINLINE>
	          <SCHEME>formal</SCHEME>
	        </SPLITINLINE>
	        参数被替换为该函数所应用的实际参数时。与常量声明和表达式语句类似，
	        return 语句
	        <INDEX>semicolon (<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>ending statement</SUBINDEX></INDEX>
	        <INDEX><FUNCTION></FUNCTION><SUBINDEX>declaration of</SUBINDEX><CLOSE></CLOSE></INDEX>
	        都以分号结束。
      </JAVASCRIPT>
  </SPLIT>
</TEXT>
  
  <TEXT>
    <SPLIT>
      <SCHEME>
        定义了<SCHEMEINLINE>square</SCHEMEINLINE>后，我们现在可以使用它：
      </SCHEME>
      <JAVASCRIPT>
        声明了<JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>后，我们现在可以在一个<EM>函数应用</EM>表达式中使用它，该表达式通过在末尾加分号变成一个语句：
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(square 21)
      </SCHEME>
      <SCHEMEOUTPUT>
441		
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square(21);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
441
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
        <COMMENT>
          由于操作符组合在语法上与函数应用不同，JavaScript版本需要在此明确说明函数应用的求值规则。这为下一小节中的替换模型奠定了基础。
        </COMMENT>
        函数应用紧随操作符组合之后出现，是我们遇到的第二种将表达式组合成更大表达式的方式。
        函数应用的一般形式是
        <SNIPPET EVAL="no" LATEX="yes">
          <JAVASCRIPT>
<META>function-expression</META>(<META>argument-expressions</META>)
          </JAVASCRIPT>
        </SNIPPET>
        其中，<INDEX>函数表达式</INDEX>
        <META>function-expression</META>指定了要应用于用逗号分隔的
        <INDEX>参数</INDEX>
        <META>argument-expressions</META>的函数。
        为了求值函数应用，解释器遵循
        <INDEX>evaluation<SUBINDEX>of function application</SUBINDEX></INDEX>
        <INDEX>function application<SUBINDEX>evaluation of</SUBINDEX></INDEX>的过程，这一点与在第<SPACE></SPACE><REF NAME="sec:evaluating-combinations"></REF>节中描述的操作符组合的求值过程非常相似。
        <UL>
          <LI>为了求值一个函数应用，请执行以下步骤：
          <OL>
            <LI>
              计算该应用的子表达式，即函数表达式和参数表达式。
            </LI>
            <LI>
              将函数表达式的值（一个函数）应用于参数表达式的值。
            </LI>
          </OL>
          </LI>
        </UL>
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(square (+ 2 5))
      </SCHEME>
      <SCHEMEOUTPUT>
49
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square(2 + 5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
49		  
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLIT>
      <JAVASCRIPT>
        这里，参数表达式本身是一个复合表达式，即操作符组合<JAVASCRIPTINLINE>2 + 5</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET>
      <NAME>square_square</NAME>
      <EXPECTED>81</EXPECTED>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(square (square 3))
      </SCHEME>
      <SCHEMEOUTPUT>
81
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square(square(3));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
81
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLIT>
      <JAVASCRIPT>
        当然，函数应用表达式也可以作为参数表达式使用。
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  
  
  <TEXT>
    我们也可以将<SCHEMEINLINE>square</SCHEMEINLINE>用作构建其它
    <SPLITINLINE>
      <SCHEME>
        程序。
      </SCHEME>
      <JAVASCRIPT>
        函数。
      </JAVASCRIPT>
    </SPLITINLINE>
    的构件。例如，<LATEXINLINE>$x^2 +y^2$</LATEXINLINE>可以表示为
    <SNIPPET EVAL="no">
      <SCHEME>
(+ (square x) (square y))
      </SCHEME>
      <JAVASCRIPT>
square(x) + square(y)
      </JAVASCRIPT>
    </SNIPPET>
    我们可以很容易地
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    一个
    <SPLITINLINE>
      <SCHEME>
	程序 <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	函数 <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE><FOOTNOTE>多部分名称（例如<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>）的书写方式会影响程序的可读性，不同的编程社区对此存在分歧。<INDEX>驼峰式</INDEX> 根据常见的JavaScript约定，即所谓的<EM>驼峰式</EM>，该名称应写作<JAVASCRIPTINLINE>sumOfSquares</JAVASCRIPTINLINE>。本书使用的约定是<EM>蛇形命名法</EM>，其更多地模仿了本书Scheme版本中采用的惯例，在该版本中连字符起到了下划线的作用。</FOOTNOTE>
      </JAVASCRIPT>
    </SPLITINLINE>
    ，该过程接受任意两个数字作为参数，产生它们平方和的结果：
    <SNIPPET>
      <INDEX><DECLARATION>sum_of_squares</DECLARATION></INDEX>
      <NAME>sum_of_squares</NAME>
      <EXPECTED>25</EXPECTED>
      <EXAMPLE>sum_of_squares_example</EXAMPLE>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(sum-of-squares 3 4)
      </SCHEME>
      <JAVASCRIPT>
function sum_of_squares(x, y) {
    return square(x) + square(y);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sum_of_squares_example</NAME>
      <EXPECTED>25</EXPECTED>
      <REQUIRES>sum_of_squares</REQUIRES>
      <SCHEME>
(sum-of-squares 3 4)
      </SCHEME>
      <SCHEMEOUTPUT>
25
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sum_of_squares(3, 4);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
25
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    现在我们可以使用
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    作为构建更复杂
    <SPLITINLINE>
      <SCHEME>
	程序：
      </SCHEME>
      <JAVASCRIPT>
	函数：
      </JAVASCRIPT>
    </SPLITINLINE>
    的构件。
    <SNIPPET>
      <NAME>f</NAME>
      <EXAMPLE>f_example</EXAMPLE>
      <EXPECTED>136</EXPECTED>
      <REQUIRES>sum_of_squares</REQUIRES>
      <SCHEME>
(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
      </SCHEME>
      <JAVASCRIPT>
function f(a) {
    return sum_of_squares(a + 1, a * 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>f_example</NAME>
      <REQUIRES>f</REQUIRES>
      <SCHEME>
(f 5)
      </SCHEME>
      <SCHEMEOUTPUT>
136
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
f(5);    
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
136
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    <SPLIT>
      <SCHEME>
        复合过程
        <INDEX>复合过程<SUBINDEX>用法与基本过程相同</SUBINDEX></INDEX>
        的使用方式与基本过程完全一致。实际上，仅从上面给出的<SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>的定义中，
        无法判断<SCHEMEINLINE>square</SCHEMEINLINE>到底是像<SCHEMEINLINE>+</SCHEMEINLINE>和<SCHEMEINLINE>*</SCHEMEINLINE>那样被内置于解释器，
        还是被定义为复合过程。
      </SCHEME>
      <JAVASCRIPT>
	除了复合函数之外，任何JavaScript环境都提供
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>基本的</SUBINDEX></INDEX>
	<INDEX>基本函数</INDEX>
	，这些基本函数被内置于解释器中或从库中加载。
	<INDEX>本书所用的JavaScript环境</INDEX>
	除了由操作符提供的基本函数之外，本书使用的JavaScript环境还包括额外的基本函数，
	例如函数
	<INDEX><USE>math_log</USE>（基本函数）</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_log</USE><ECMA>Math.log</ECMA></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>math_log</JAVASCRIPTINLINE>，
	它用于计算其参数的自然对数。<FOOTNOTE>我们的JavaScript环境包含ECMAScript的
	<LINK ADDRESS="https://www.ecma-international.org/ecma-262/9.0/index.html#sec-math-object">Math对象</LINK>
	的所有函数和常量，这些名称均以<JAVASCRIPTINLINE>math_</JAVASCRIPTINLINE><LATEXINLINE>$\ldots$</LATEXINLINE>为前缀。
	例如，ECMAScript的<JAVASCRIPTINLINE>Math.log</JAVASCRIPTINLINE>
	可以作为<JAVASCRIPTINLINE>math_log</JAVASCRIPTINLINE>使用。本书的MIT出版社网页还提供了JavaScript包
	<INDEX><USE>sicp</USE> JavaScript package</INDEX>
	<INDEX>JavaScript包 <JAVASCRIPTINLINE>sicp</JAVASCRIPTINLINE></INDEX>
	<JAVASCRIPTINLINE>sicp</JAVASCRIPTINLINE>，该包提供了书中认为属于基本函数的所有其他JavaScript函数。
      </FOOTNOTE>
	这些额外的基本函数的用法与
	<INDEX>复合函数<SUBINDEX>使用方式类似基本函数</SUBINDEX></INDEX>
	完全一致；计算表达式<JAVASCRIPTINLINE>math_log(1)</JAVASCRIPTINLINE>的结果为数字0。
	实际上，仅从上面给出的<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>的定义中，
	无法判断<JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>是内置于解释器、从库加载，
	还是被定义为复合函数。
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

</SUBSECTION>
