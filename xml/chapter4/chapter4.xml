<CHAPTER>
  <NAME>Metalinguistic Abstraction</NAME>

  <HISTORY>
    % ** \label{ex:env-program-abstraction} should be at end of ex, not start?
    % 2/13/98 FIX TYPO: Extra period at end of ex 4.3
    % winter '97 Add tex '\label's for manual to reference.
    % 8/26/97  FIX TYPESETTING ERROR FOR THIRD PRINTING - - p.393
    %   FIX misplaced index command on p.416.  (This edit won't have
    %   direct effect now, as will edit index by hand.)

    % 4/15 'fix' a a pagebreak not wrapped in pagekludge
    % 4/15 fix multiple entries that landed on same page
    % 4/13-15 Indexing [after final printout of chapters]
    % 4/12 Pagination adjustments from proofreading
    % 4/11 Correction based on spell-checking
    % 4/10  trivial spacing changes based on comparison to before-indexing
    % 4/7-... Julie index fixes (and 4/8 change 'ns')
    % 4/5/96  Hal indexing
    % 4/4/96  paginated rest of chapter
    % 3/29/96 Julie: indexing fixes
    % 3/19/96 paginate the beginning!
    % 3/16/96 Minor edits
    % 3/14/96 (acually 3/15 00:xx) - start indexing
    % 3/9/96 fix spacing in some exercise parts
    % 3/5/96 fix typesetting/spacing
    % 3/4/96 reword to 'fix' most triple hyphenation
    % 2/26-3/3/96 fix some bad line breaks
    % 2/24/96 flush \noindent after {lisp} by closing up space with 
    % 2/24/96 fix a reference (caught by editor)
    % 2/22/96 new spec for epigraph
    % 2/19/96 fixed () in a reference
    % 2/19/96 fixed et al.
  </HISTORY>


  <EPIGRAPH>
      <ELLIPSIS/>It<APOS/>s in words that the magic
      is<EMDASH/>Abracadabra, Open Sesame, and the rest<EMDASH/>but the magic 
      words in one story aren<APOS/>t magical in the next.  The real magic is to 
      understand which words work, and when, and for what; the trick is to learn 
      the trick.
      <P/>
      <ELLIPSIS/>And those words are made from the letters of our
      alphabet: a couple-dozen squiggles we can draw with the pen.  This is
      the key!  And the treasure, too, if we can only get our hands on it!
      It<APOS/>s as if<EMDASH/>as if the key to the treasure <EM>is</EM> 
      the treasure!
      <INDEX>Barth, John</INDEX>
      <ATTRIBUTION>
	<AUTHOR>John Barth</AUTHOR><TITLE>Chimera</TITLE>
      </ATTRIBUTION>
  </EPIGRAPH>

  <CHAPTERCONTENT/>

  <TEXT>
    <NOINDENT/>
    In our study of program design, we have seen that expert programmers
    control the complexity of their designs with the same general
    techniques used by designers of all complex systems.  They combine
    primitive elements to form compound objects, they abstract compound
    objects to form higher-level building blocks, and they preserve
    modularity by adopting appropriate large-scale views of system
    structure.  In illustrating these techniques, we have used 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    as a language for describing processes and for constructing computational
    data objects and processes to model complex phenomena in the real world.
    However, as we confront increasingly complex problems, we will find that
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    or indeed any fixed programming language, is not sufficient for our needs.
    We must constantly turn to new languages in order to express our ideas more
    effectively.  Establishing new languages is a powerful strategy for
    controlling complexity in engineering design; we can often enhance our
    ability to deal with a complex problem by adopting a new language that
    enables us to describe (and hence to think about) the problem in a different
    way, using primitives, means of combination, and means of abstraction that
    are particularly well suited to the problem at hand.<FOOTNOTE>The same idea
    is pervasive throughout all of engineering.  For example, electrical
    engineers use many different languages for describing circuits.  Two
    of these are the language of electrical <EM>networks</EM> and the
    language of electrical <EM>systems</EM>.  The network language emphasizes
    the physical modeling of devices in terms of discrete electrical
    elements.  The primitive objects of the network language are primitive
    electrical components such as resistors, capacitors, inductors, and
    transistors, which are characterized in terms of physical variables
    called voltage and current.  When describing circuits in the network
    language, the engineer is concerned with the physical characteristics
    of a design.  In contrast, the primitive objects of the system
    language are signal-processing modules such as filters and amplifiers.
    Only the functional behavior of the modules is relevant, and signals
    are manipulated without concern for their physical realization as
    voltages and currents.  The system language is erected on the network
    language, in the sense that the elements of signal-processing systems
    are constructed from electrical networks.  Here, however, the concerns
    are with the large-scale organization of electrical devices to solve a
    given application problem; the physical feasibility of the parts is
    assumed.  This layered collection of languages is another example of
    the stratified design technique illustrated by the picture
    language of section<SPACE/><REF NAME="sec:graphics"/>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    Programming is endowed with a multitude of languages.  There are
    physical languages, such as the
    <INDEX>high-level language, machine language vs.</INDEX>
    <INDEX>machine language<SUBINDEX>high-level language vs.</SUBINDEX></INDEX>
    machine languages for particular
    computers.  These languages are concerned with the representation of
    data and control in terms of individual bits of storage and primitive
    machine instructions.  The machine-language programmer is concerned
    with using the given hardware to erect systems and utilities for the
    efficient implementation of resource-limited computations.  High-level
    languages, erected on a machine-language substrate, hide concerns
    about the representation of data as collections of bits and the
    representation of programs as sequences of primitive instructions.
    These languages have means of combination and abstraction, such as
    <SPLITINLINE>
      <SCHEME>procedure definition,</SCHEME>
      <JAVASCRIPT>function declaration,</JAVASCRIPT>
    </SPLITINLINE>
    that are appropriate to the larger-scale organization of systems.
  </TEXT>

  <TEXT>
    <EM>Metalinguistic abstraction</EM><EMDASH/>establishing
    <INDEX>metalinguistic abstraction</INDEX>
    <INDEX>abstraction<SUBINDEX>metalinguistic</SUBINDEX></INDEX>
    new languages<EMDASH/>plays an important role in all branches of engineering
    design.  It is particularly important to computer programming, because
    in programming not only can we formulate new languages but we can also
    implement these languages by constructing evaluators.  An 
    <INDEX>evaluator</INDEX>
    <EM>evaluator</EM> (or <EM>interpreter</EM>) for a programming language is a
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      that, when applied to
      <SPLITINLINE>
	<JAVASCRIPT>a statement or expression</JAVASCRIPT>
	<SCHEME>an expression</SCHEME>
      </SPLITINLINE>
      of the language, performs the actions required to evaluate that
      <SPLITINLINE><JAVASCRIPT>statement or</JAVASCRIPT></SPLITINLINE>
      expression.
  </TEXT>

  <TEXT>
    It is no exaggeration to regard this as the most fundamental idea in
    programming:
    <BLOCKQUOTE>
      The evaluator, which determines the meaning of
      <SPLITINLINE><JAVASCRIPT>statements and</JAVASCRIPT></SPLITINLINE>
      expressions in a programming language, is just another program.
    </BLOCKQUOTE>
    To appreciate this point is to change our images of ourselves as
    programmers.  We come to see ourselves as designers of languages,
    rather than only users of languages designed by others.
  </TEXT>

  <TEXT>
    In fact, we can regard almost any program as the evaluator for some
    language.  For instance, the polynomial manipulation system of
    section<SPACE/><REF NAME="sec:symbolic-algebra"/> embodies the rules of
    polynomial arithmetic and implements them in terms of operations on
    list-structured data.  If we augment this system with
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to read and print polynomial expressions, we have the core of a
    special-purpose language for dealing with problems in symbolic mathematics.
    The digital-logic simulator of
    section<SPACE/><REF NAME="sec:circuit-simulator"/> and the constraint
    propagator of section<SPACE/><REF NAME="sec:constraints"/> are legitimate
    languages in their own right, each with its own primitives, means of
    combination, and means of abstraction.  Seen from this perspective, the
    technology for coping with large-scale computer systems merges with the
    technology for building new computer languages, and 
    <INDEX>computer science</INDEX>
    computer science itself becomes no more (and no less) than the discipline
    of constructing appropriate descriptive languages.
  </TEXT>

  <TEXT>
    We now embark on a tour of the technology by which languages are
    established in terms of other languages.  In this chapter we shall use
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE> 
    as a base, implementing evaluators as 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME><JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>Lisp<SUBINDEX>suitability for writing evaluators</SUBINDEX></INDEX>
	Lisp is particularly well suited to this task, because of its ability
	to represent and manipulate symbolic expressions.
      </SCHEME>
    </SPLITINLINE>
    We will take the first step in understanding how languages are implemented
    by building	an evaluator for
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    itself.
    The language implemented by our evaluator will be a subset of
    <SPLITINLINE>
      <SCHEME>the Scheme dialect of Lisp that we use in this
      book.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    Although the evaluator described in this chapter is written for a
    particular 
    <SPLITINLINE>
      <SCHEME>dialect of Lisp,</SCHEME>
      <JAVASCRIPT>subset of JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    it contains the essential structure of an evaluator for any
    <SPLITINLINE><SCHEME>expression-oriented</SCHEME></SPLITINLINE> language
    designed for writing programs for a sequential machine.  (In fact, most
    language processors contain, deep within them, a little 
    <SPLITINLINE><SCHEME><QUOTE>Lisp</QUOTE></SCHEME></SPLITINLINE> evaluator.)
    The evaluator has been simplified for the purposes of illustration and
    discussion, and some features have been left out that would be
    important to include in a production-quality 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system. Nevertheless, this simple evaluator is adequate to execute most of
    the programs in this book.<FOOTNOTE>The most important features that our
    evaluator leaves out are mechanisms for handling errors and supporting
    debugging.  For a more extensive discussion of evaluators, see 
    <INDEX>Friedman, Daniel P.</INDEX>
    <INDEX>Wand, Mitchell</INDEX>
    <INDEX>Haynes, Christopher T.</INDEX>
    Friedman, Wand, and Haynes
    1992, which gives an exposition of programming languages that proceeds
    via a sequence of evaluators written in 
    <INDEX>Scheme<SUBINDEX>evaluators written in</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <JAVASCRIPT>the Scheme dialect of Lisp.</JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
  </TEXT>

  <TEXT>
    An important advantage of making the evaluator accessible as a 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program is that we can implement alternative evaluation rules by describing
    these as modifications to the evaluator program.  One place where we can use
    this power to good effect is to gain extra control over the ways in which
    computational models embody the notion of time, which was so central to the
    discussion in chapter<SPACE/>3.  There, we mitigated some of the complexities
    of state and assignment by using streams to decouple the representation of
    time in the world from time in the computer.  Our stream programs, however,
    were sometimes cumbersome, because they were constrained by the
    applicative-order evaluation of 
    <SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    In section<SPACE/><REF NAME="sec:lazy-evaluation"/>, we<APOS/>ll change
    the underlying language to provide for a more elegant approach, by modifying
    the evaluator to provide for <EM>normal-order evaluation</EM>.
  </TEXT>

  <TEXT>
    Section<SPACE/><REF NAME="sec:nondeterministic-evaluation"/> implements a
    more ambitious linguistic change, whereby statements and expressions
    have many values, rather than just a single value.  In this language of
    <EM>nondeterministic computing</EM>, it is natural to express processes that
    generate all possible values for statements and expressions and then search
    for those values that satisfy certain constraints.  In terms of models of
    computation and time, this is like having time branch into a set of
    <QUOTE>possible futures</QUOTE> and then searching for appropriate time
    lines. With our nondeterministic evaluator, keeping track of multiple values
    and performing searches are handled automatically by the underlying
    mechanism of the language.
  </TEXT>

  <TEXT>
    In section<SPACE/><REF NAME="sec:logic-programming"/> we implement a
    <EM>logic-programming</EM> language in which knowledge is expressed in terms
    of relations, rather than in terms of computations with inputs and outputs.
    Even though this makes the language drastically different from
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    or indeed from any conventional language, we will see that
    the logic-programming evaluator shares the essential structure of the
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    evaluator.
  </TEXT>
  
  <CHAPTERCONTENT/>

  <!-- Section 1 : The Metacircular Evaluator -->
  &amp;section4.1;
    
  <!-- Section 2 : Variations on a Scheme - Lazy Evaluation -->
  &amp;section4.2;

  <!-- Section 3 : Variations on a Scheme - Nodeterministic Computing -->
  &amp;section4.3;

  <!-- Section 4 : Logic Programming -->
  &amp;section4.4;

</CHAPTER>
