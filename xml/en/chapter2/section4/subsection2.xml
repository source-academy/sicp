<SUBSECTION>
  <NAME>
    Tagged data
  </NAME>

  <LABEL NAME="sec:manifest-types"/>
  <INDEX>complex numbers<SUBINDEX>represented as tagged data</SUBINDEX><OPEN/></INDEX>
  <INDEX>tagged data<OPEN/></INDEX>
  <INDEX>data<SUBINDEX>tagged</SUBINDEX><OPEN/></INDEX>

  <TEXT>
    One way to view data abstraction is as an application of the
    <INDEX>principle of least commitment</INDEX>
    <INDEX>least commitment, principle of</INDEX>
    <QUOTE>principle of least commitment.</QUOTE>  In implementing the
    complex-number system in
    section<SPACE/><REF NAME="sec:representations-complex-numbers"/>, we can
    use either Ben<APOS/>s rectangular representation or Alyssa<APOS/>s polar
    representation.  The abstraction barrier formed by the selectors and
    constructors permits us to defer to the last possible moment the choice of
    a concrete representation for our data objects and thus retain maximum
    flexibility in our system design.
  </TEXT>
  <TEXT>
    The principle of least commitment can be carried to even further extremes.
    If we desire, we can maintain the ambiguity of representation even
    <EM>after</EM> we have designed the selectors and constructors, and elect
    to use both Ben<APOS/>s representation <EM>and</EM> Alyssa<APOS/>s
    representation.  If both representations are included in a single system,
    however, we will need some way to distinguish data in polar form from data
    in rectangular form.  Otherwise, if we were asked, for instance, to find
    the <SCHEMEINLINE>magnitude</SCHEMEINLINE> of the pair
    <LATEXINLINE>$(3,4)$</LATEXINLINE>, we wouldn<APOS/>t know whether to
    answer 5 (interpreting the number in rectangular form) or
    3<SPACE/>(interpreting the number in polar form). A straightforward way to
    accomplish this distinction is to include a
    <INDEX>type tag</INDEX>
    <EM>type tag</EM><EMDASH/>the
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>rectangular</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>polar</SCHEMEINLINE><EMDASH/>as</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"polar"</JAVASCRIPTINLINE><EMDASH/>as
      </JAVASCRIPT>
    </SPLITINLINE>
    part of each complex number.  Then when we need to manipulate a complex
    number we can use the tag to decide which selector to apply.
  </TEXT>
  <TEXT>
    In order to manipulate tagged data, we will assume that we have
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>type-tag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and <SCHEMEINLINE>contents</SCHEMEINLINE> that extract from a data object
    the tag and the actual contents (the polar or rectangular coordinates, in
    the case of a complex number).  We will also postulate a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>attach-tag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>attach_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that takes a tag and contents and produces a tagged data object.  A
    straightforward way to implement this is to use ordinary list structure:
    <SNIPPET>
      <INDEX><DECLARATION>attach_tag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>type_tag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>contents</DECLARATION></INDEX> 
      <NAME>attach_tag</NAME>
      <EXAMPLE>attach_tag_example</EXAMPLE>
      <EXPECTED>'frequency_list'</EXPECTED>
      <SCHEME>
(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
    (car datum)
    (error "Bad tagged datum -- TYPE-TAG" datum)))

(define (contents datum)
  (if (pair? datum)
    (cdr datum)
    (error "Bad tagged datum -- CONTENTS" datum)))
      </SCHEME>
      <JAVASCRIPT>
function attach_tag(type_tag, contents) {
    return pair(type_tag, contents);
}
function type_tag(datum) {
    return is_pair(datum)
           ? head(datum)
           : error(datum, "bad tagged datum -- type_tag");
}
function contents(datum) {
    return is_pair(datum)
           ? tail(datum)
           : error(datum, "bad tagged datum -- contents");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>attach_tag_example</NAME>
      <JAVASCRIPT>
const f_1 = list("A", 4);
const my_frequency_1 = 
    attach_tag("frequency_list", f_1);

type_tag(my_frequency_1);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
        Using these procedures,
      </SCHEME>
      <JAVASCRIPT>
	Using
	<JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    we can define predicates
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rectangular?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_rectangular</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>polar?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_polar</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which recognize rectangular and polar numbers, respectively:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>is_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>is_polar</DECLARATION></INDEX> 
      <NAME>rectangular_or_polar</NAME>
      <EXAMPLE>rectangular_or_polar_example</EXAMPLE>
      <REQUIRES>attach_tag</REQUIRES>
      <SCHEME>
(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))

(define (polar? z)
  (eq? (type-tag z) 'polar))
      </SCHEME>
      <JAVASCRIPT>
function is_rectangular(z) {
    return type_tag(z) === "rectangular";
}
function is_polar(z) {
    return type_tag(z) === "polar";
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    With type tags, Ben and Alyssa can now modify their code so that their two
    different representations can coexist in the same system. Whenever Ben
    constructs a complex number, he tags it as rectangular. Whenever Alyssa
    constructs a complex number, she tags it as polar. In addition, Ben and
    Alyssa must make sure that the names of their
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    do not conflict.  One way to do this is for Ben to append the suffix
    <SCHEMEINLINE>rectangular</SCHEMEINLINE> to the name of each of his
    representation
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and for Alyssa to append <SCHEMEINLINE>polar</SCHEMEINLINE> to the names of
    hers. Here is Ben<APOS/>s revised rectangular representation from
    section<SPACE/><REF NAME="sec:representations-complex-numbers"/>:
    <SNIPPET>
      <INDEX><DECLARATION>real_part_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>imag_part_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>magnitude_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>angle_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_real_imag_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang_rectangular</DECLARATION></INDEX> 
      <NAME>make_complex_number_rectangular</NAME>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_rectangular_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part-rectangular z) (car z))

(define (imag-part-rectangular z) (cdr z))

(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))

(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))

(define (make-from-real-imag-rectangular x y)
  (attach-tag 'rectangular (cons x y)))

(define (make-from-mag-ang-rectangular r a) 
  (attach-tag 'rectangular
              (cons (* r (cos a)) (* r (sin a)))))
      </SCHEME>
      <JAVASCRIPT>
function real_part_rectangular(z) { return head(z); }
<SHORT_SPACE/>
function imag_part_rectangular(z) { return tail(z); }
<SHORT_SPACE/>
function magnitude_rectangular(z) {
    return math_sqrt(square(real_part_rectangular(z)) +
                     square(imag_part_rectangular(z)));
}
function angle_rectangular(z) {
    return math_atan2(imag_part_rectangular(z),
                     real_part_rectangular(z));
}
function make_from_real_imag_rectangular(x, y) {
    return attach_tag("rectangular", pair(x, y));
}
function make_from_mag_ang_rectangular(r, a) {
    return attach_tag("rectangular",
                      pair(r * math_cos(a), r * math_sin(a)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_rectangular_example</NAME>
      <JAVASCRIPT>
const bens_co_num = make_from_mag_ang_rectangular(	  
                        3.0, 0.7);

imag_part_rectangular(contents(bens_co_num));
      </JAVASCRIPT>
    </SNIPPET>
    and here is Alyssa<APOS/>s revised polar representation:
    <SNIPPET>
      <INDEX><DECLARATION>real_part_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>imag_part_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>magnitude_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>angle_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_real_imag_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang_polar</DECLARATION></INDEX> 
      <NAME>make_complex_number_polar</NAME>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_polar_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part-polar z)
  (* (magnitude-polar z) (cos (angle-polar z))))

(define (imag-part-polar z)
  (* (magnitude-polar z) (sin (angle-polar z))))

(define (magnitude-polar z) (car z))

(define (angle-polar z) (cdr z))

(define (make-from-real-imag-polar x y) 
  (attach-tag 'polar
              (cons (sqrt (+ (square x) (square y)))
              (atan y x))))

(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))
      </SCHEME>
      <JAVASCRIPT>
function real_part_polar(z) {
    return magnitude_polar(z) * math_cos(angle_polar(z));
}
function imag_part_polar(z) {
    return magnitude_polar(z) * math_sin(angle_polar(z));
}
function magnitude_polar(z) { return head(z); }
<SHORT_SPACE/>
function angle_polar(z) { return tail(z); }
<SHORT_SPACE/>
function make_from_real_imag_polar(x, y) {
    return attach_tag("polar",
                      pair(math_sqrt(square(x) + square(y)),
                           math_atan2(y, x)));
}
<ALLOW_BREAK/>
function make_from_mag_ang_polar(r, a) {
    return attach_tag("polar", pair(r, a));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_polar_example</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang_polar(
                           3.0, 0.7);

imag_part_polar(contents(alyssas_co_num));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <INDEX>selector<SUBINDEX>generic</SUBINDEX></INDEX>
    <INDEX>generic <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>generic selector</SUBINDEX></INDEX>
    Each generic selector is implemented as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that checks the tag of its argument and calls the appropriate
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for handling data of that type.  For example, to obtain the real part of
    a complex number,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    examines the tag to determine whether to use Ben<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part-rectangular</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part_rectangular</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or Alyssa<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part-polar</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_@part_@polar</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In either case, we use <SCHEMEINLINE>contents</SCHEMEINLINE> to extract the
    bare, untagged datum and send this to the rectangular or polar
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    as required:
    <SNIPPET>
      <INDEX><DECLARATION>real_part</DECLARATION><SUBINDEX>with tagged data</SUBINDEX></INDEX>
      <INDEX><DECLARATION>imag_part</DECLARATION><SUBINDEX>with tagged data</SUBINDEX></INDEX>
      <INDEX><DECLARATION>magnitude</DECLARATION><SUBINDEX>with tagged data</SUBINDEX></INDEX>
      <INDEX><DECLARATION>angle</DECLARATION><SUBINDEX>with tagged data</SUBINDEX></INDEX>
      <NAME>make_complex_number</NAME>
      <REQUIRES>rectangular_or_polar</REQUIRES>
      <REQUIRES>make_complex_number_rectangular</REQUIRES>
      <REQUIRES>make_complex_number_polar</REQUIRES>
      <EXAMPLE>make_complex_number_example_2</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part z)
  (cond ((rectangular? z) 
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else (error "Unknown type -- REAL-PART" z))))

(define (imag-part z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else (error "Unknown type -- IMAG-PART" z))))

(define (magnitude z)
  (cond ((rectangular? z)
         (magnitude-rectangular (contents z)))
        ((polar? z)
         (magnitude-polar (contents z)))
        (else (error "Unknown type -- MAGNITUDE" z))))

(define (angle z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else (error "Unknown type -- ANGLE" z))))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) {
    return is_rectangular(z)
           ? real_part_rectangular(contents(z))
           : is_polar(z)
           ? real_part_polar(contents(z))
           : error(z, "unknown type -- real_part");
}
function imag_part(z) {
    return is_rectangular(z)
           ? imag_part_rectangular(contents(z))
           : is_polar(z)
           ? imag_part_polar(contents(z))
           : error(z, "unknown type -- imag_part");
}
function magnitude(z) {
    return is_rectangular(z)
           ? magnitude_rectangular(contents(z))
           : is_polar(z)
           ? magnitude_polar(contents(z))
           : error(z, "unknown type -- magnitude");
}
function angle(z) {
    return is_rectangular(z)
           ? angle_rectangular(contents(z))
           : is_polar(z)
           ? angle_polar(contents(z))
           : error(z, "unknown type -- angle");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_example_2</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang_polar(	  
                           3.0, 0.7);

imag_part(alyssas_co_num);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    To implement the complex-number arithmetic operations, we can use the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:representations-complex-numbers"/>,
    because the selectors they call are generic, and so will work with either
    representation.  For example, the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is still
    <SNIPPET EVAL="no">
      <SCHEME>
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
      </SCHEME>
      <JAVASCRIPT>
function add_complex(z1, z2) {
   return make_from_real_imag(real_part(z1) + real_part(z2),
                              imag_part(z1) + imag_part(z2));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Finally, we must choose whether to construct complex numbers using
    Ben<APOS/>s representation or Alyssa<APOS/>s representation.  One
    reasonable choice is to construct rectangular numbers whenever we have
    real and imaginary parts and to construct polar numbers whenever we have
    magnitudes and angles:
    <SNIPPET>
      <INDEX><DECLARATION>make_from_real_imag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang</DECLARATION></INDEX> 
      <NAME>make_complex_number_generic</NAME>
      <REQUIRES>make_complex_number</REQUIRES>
      <REQUIRES>make_complex_number_rectangular</REQUIRES>
      <REQUIRES>make_complex_number_polar</REQUIRES>
      <EXAMPLE>make_complex_number_generic_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))

(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))
      </SCHEME>
      <JAVASCRIPT>
function make_from_real_imag(x, y) {
    return make_from_real_imag_rectangular(x, y);
}
function make_from_mag_ang(r, a) {
    return make_from_mag_ang_polar(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_generic_example</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang(	  
                           3.0, 0.7);

imag_part(alyssas_co_num);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch2-Z-G-62.svg"></FIGURE>
          <CAPTION>Structure of the generic complex-arithmetic system.</CAPTION>
          <LABEL NAME="fig:generic-complex-system_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE split_scale="1" web_scale="0.6" scale="0.65" src="img_javascript/ch2-Z-G-62.svg"></FIGURE>
          <CAPTION>
	    Structure
	    <INDEX>complex-number arithmetic<SUBINDEX>structure of system</SUBINDEX></INDEX>
	    of the generic complex-arithmetic system.
	  </CAPTION>
          <LABEL NAME="fig:generic-complex-system"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    <PDF_ONLY>$\!$</PDF_ONLY>The resulting complex-number system has the structure shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:generic-complex-system_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:generic-complex-system"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The system has been decomposed into three relatively independent parts: the
    complex-number-arithmetic operations, Alyssa<APOS/>s polar implementation,
    and Ben<APOS/>s rectangular implementation.  The polar and rectangular
    implementations could have been written by Ben and Alyssa working
    separately, and both of these can be used as underlying representations by
    a third programmer implementing the complex-arithmetic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in terms of the abstract constructor/selector interface.
  </TEXT>
  <TEXT>
    Since each data object is tagged with its type, the selectors operate on
    the data in a
    <INDEX>selector<SUBINDEX>generic</SUBINDEX></INDEX>
    <INDEX>generic <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>generic selector</SUBINDEX></INDEX>
    generic manner.  That is, each selector is defined to have a
    behavior that depends upon the particular type of data it is applied to.
    Notice the general mechanism for interfacing the separate representations:
    Within a given representation implementation (say, Alyssa<APOS/>s polar
    package) a complex number is an untyped pair (magnitude, angle).  When a
    generic selector operates on a number of <SCHEMEINLINE>polar</SCHEMEINLINE>
    type, it strips off the tag and passes the contents on to Alyssa<APOS/>s
    code.  Conversely, when Alyssa constructs a number for general use, she
    tags it with a type so that it can be appropriately recognized by the
    higher-level
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    This discipline of stripping off and attaching tags as data objects are
    passed from level to level can be an important organizational strategy,
    as we shall see in section<SPACE/><REF NAME="sec:generic-operators"/>.
    <INDEX>complex numbers<SUBINDEX>represented as tagged data</SUBINDEX><CLOSE/></INDEX>
    <INDEX>tagged data<CLOSE/></INDEX>
    <INDEX>data<SUBINDEX>tagged</SUBINDEX><CLOSE/></INDEX>
  </TEXT>
</SUBSECTION>
