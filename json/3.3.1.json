[{"id":"/sicpjs/3.3.1","tag":"TITLE","body":"3.3.1  \n    Mutable List Structure"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The basic operations on\n    \n\tpairs—","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"—can\n      \n    be used to construct list structure and to select parts\n    from list structure, but they are incapable of modifying list\n    structure.  The same is true of the list operations we have used so\n    far, such as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":", since these can be defined in terms of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".\n    To modify list structures we need new operations.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The primitive mutators for pairs are\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":".The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    takes two arguments, the first of which must be a pair.  It modifies this\n    pair, replacing the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer by a pointer to the second argument of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.3.1#footnote-1"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    As an example, suppose that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is bound to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(list(\"a\", \"b\"), \"c\", \"d\")"},{"body":"\n    and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":" to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"e\", \"f\")"},{"body":"\n    as illustrated in\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":".\n      \n    Evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head(x, y)"},{"body":"\n    modifies the pair to which ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is bound,\n    replacing its\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    by the value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".  The result of the operation\n    is shown in\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.13","href":"/sicpjs/3.3.1#fig-3.13"},{"body":".\n      \n    The structure ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" has been modified and\n    \n\tis now equivalent to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(list(\"e\", \"f\"), \"c\", \"d\")"},{"body":".\n    \n    The pairs representing the list\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"a\", \"b\")"},{"body":",\n      \n    identified by the pointer that was replaced, are now detached from the\n    original structure.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.3.1#footnote-2"}]},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-13.svg","id":"#fig-3.12","captionHref":"/sicpjs/3.3.1#fig-3.12","captionName":"Figure 3.12 ","captionBody":[{"body":"\n\t    Lists ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":":\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(list(\"a\", \"b\"), \"c\", \"d\")"},{"body":"\n\t    and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":":\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"e\", \"f\")"},{"body":".\n          ","tag":"#text"}]},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-14.svg","id":"#fig-3.13","captionHref":"/sicpjs/3.3.1#fig-3.13","captionName":"Figure 3.13 ","captionBody":[{"body":"\n\t    Effect of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head(x, y)"},{"body":" on\n\t    the lists in figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":".\n          ","tag":"#text"}]},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-15.svg","id":"#fig-3.14","captionHref":"/sicpjs/3.3.1#fig-3.14","captionName":"Figure 3.14 ","captionBody":[{"body":"\n\t    Effect of\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const z = pair(y, tail(x));"},{"body":"\n\t    on the lists in figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":".\n          ","tag":"#text"}]},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-16.svg","id":"#fig-3.15","captionHref":"/sicpjs/3.3.1#fig-3.15","captionName":"Figure 3.15 ","captionBody":[{"body":"\n\t    Effect of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail(x, y)"},{"body":" on the\n\t    lists in figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Compare\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.13","href":"/sicpjs/3.3.1#fig-3.13"},{"body":"\n    with\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.14","href":"/sicpjs/3.3.1#fig-3.14"},{"body":",\n      \n    which illustrates the result of executing\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":4,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAD1AF5QAbAS3IAonWAiAQw4BpQOAIw4BKfhzyiA3PmLlQAT1oNmZFhwCmfAQDNpuQqQoAvZQAcujAE4sF-MpfotKIkVKA","body":"const z = pair(y, tail(x)); "},{"body":"\n    with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":"\n    bound to the original lists of\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":".\n      \n    The\n    \n\tname\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" is now bound to a\n    new pair created by the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    operation; the list to which ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is bound is\n    unchanged.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    operation is similar to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":".\n    The only difference is that the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointer of the pair, rather than the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer, is replaced.  The effect of executing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail(x, y)"},{"body":"\n    on the lists of\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#fig-3.12"},{"body":"\n    is shown in\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.15","href":"/sicpjs/3.3.1#fig-3.15"},{"body":".\n      \n    Here the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointer of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" has been replaced by the pointer to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"e\", \"f\")"},{"body":".\n      \n    Also, the list\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"c\", \"d\")"},{"body":",\n      \n    which used to be the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", is now detached from the structure.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    builds new list structure by creating new pairs, \n    whereas ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    modify existing pairs.\n    Indeed, we could\n    \n    implement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    in terms of the two mutators, together with a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_new_pair"},{"body":",\n    which returns a new pair that is not part of any existing list structure.\n    We obtain the new pair, set its\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointers to the designated objects, and return the new pair as the result of\n    the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/3.3.1#footnote-3"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":10,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChslACoAWApqAEYD2lA1qAA4BOl9lAziW6AIYOMCWAW34AXfgDcyAMwCuAOwDGYynNABzEiID6ckgHct9bv0Zo8YcP0VkE3cd3AKB9EaAAmlTqDmVXTSuL8bmRsMgpEPKCyispyADSgADaaAORs5u4kUlZkojxcUpSJiZR6bAmFjKAipKBs3DRklFLVtSQAHtyC9Mlm2NFK-Crqmjr6hsaMABQAlKAA3tigy6CMmjKMqkYmU-LB2bpuCXtZOW4zANzYAL7Yi-3yg8Pb0+0JAJ5ziyugCipsrikazYEQAvCNtLoDC9ZlcfhxtKRuG4pkDOEQEu1LksVgitCJjIlUcCMaBPnCVmsRBtVGiQVdbtgYTDMAkAEwzBIAFmx1yAA","body":"function pair(x, y) {\n    const fresh = get_new_pair();\n    set_head(fresh, x);\n    set_tail(fresh, y);\n    return fresh;\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.12","id":"#ex-3.12","child":[{"body":"\n    The following\n    function\n    for appending lists was introduced in\n    section ","tag":"#text"},{"tag":"REF","body":"2.2.1","href":"/sicpjs/2.2.1"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cD1ZODWUyDkw+FDdQGKU4gFY+AHY+AE5BYKA","body":"function append(x, y) {\n    return is_null(x)\n           ? y\n           : pair(head(x), append(tail(x), y));\n} "},{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":"\n    forms a new list by successively\n    \n\tadjoining the elements of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":"\n\tto the front of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".\n      \n    The\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append_mutator"},{"body":"\n    is similar to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":", but it is a mutator\n    rather than a constructor. It appends the lists by splicing them together,\n    modifying the final pair of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" so that its\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is now ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":". (It is an error to call\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append_mutator"},{"body":"\n    with an empty ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":".)\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":7,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAbAQwGcyB9ABwYoCcAKADwCUoAN7ZQE0NwCmZAt1oUmrIgTp1eZLhqGDxkg5ID8ofvsMGAXPWZtOPTdoGDBAbmwBfXIVKUaoBnZ2aSIAE1YAWwItMio+fgAaUABPYTEDJllWLQoNRhYOLnjBJNT3Axk5BVN3DyA","body":"function append_mutator(x, y) {\n    set_tail(last_pair(x), y);\n    return x;\n} "},{"body":"\n    Here\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"last_pair"},{"body":"\n    is a\n    function\n    that returns the last pair in its argument:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAbAQwGcyB9ABwYoCcAKADwCUoAN7ZQE0NwCmZAt1oUmrIgTp1eZLhqGDxkg5ID8ofvsMGAXPWZtOPTdoGDBAbmwBfXIxYcufOiUyXkwAGlAAJnCUcIAWcIBWF1cgA","body":"function last_pair(x) {\n    return is_null(tail(x))\n           ? x\n           : last_pair(tail(x));\n} "},{"body":"\n    Consider the interaction\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":18,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+CgA","body":"const x = list(\"a\", \"b\"); "},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":20,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J5BIA","body":"const y = list(\"c\", \"d\"); "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":22,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQSAA","body":"const z = append(x, y); "},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":24,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQNBQSAA","body":"z; ","output":"[\"a\", [\"b\", [\"c\", [\"d, null]]]]"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":26,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQNBQNmOiCQA","body":"tail(x); ","output":""},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":28,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQNBQNmOiB+xBbwA7hCmN0+gM6EMRgFgkA","body":"const w = append_mutator(x, y); "},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQNBQNmOiB+xBbwA7hCmN0+gM6EMRgFnqigkA","body":"w; ","output":"[\"a\", [\"b\", [\"c\", [\"d\", null]]]]"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":32,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgA8AaUATwCUoAN7ZQE0ACdmZAlNoUAzgH0iBADYbug8ZP2SA-AL0H9ALlAM6FKRwAWzOpy6C+jFuw5kb213yFBAG5sAF9cQlJKGlANOiUyFWtbHVFTaVl5RVV1LW9fHV0zA2MudOLLOISkmzsfCj9BYLCI4nJqWg9WNhUAWwIfMio7XgFhMX0lWRV67SrE5JG3MZD9GTkFUC4Q8OwSGgSt0ABeWOUyDgAiOku+S4AjS+a9g7IBE7OEq5Jb0Eu2J4hF5EQ4ALw+XS8oyEQNBQNmOiB+xBbwA7hCmN0+gM6EMRgFnqj4QVXEEgA","body":"tail(x); ","output":""},{"body":"\n    What are the missing ","tag":"#text"},{"tag":"META","body":"response"},{"body":"s?\n    Draw box-and-pointer diagrams to explain your answer.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.13","id":"#ex-3.13","child":[{"body":"\n    Consider the following\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_cycle"},{"body":"function,\n    which uses the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"last_pair"},{"body":"function\n    defined in exercise ","tag":"#text"},{"tag":"REF","body":"3.12","href":"/sicpjs/3.3.1#ex-3.12"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":7,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAbAQwGcyB9ABwYoCcAKADwCUoAN7ZQE0NwCmZAt1oUmrIgTp1eZLhqGDxkg5ID8ofvsMGAXPWZtOPTdoGDBAbmwBfXIVKUaoAFsGAGtpVhIATxI6aWdRc1AmWVYtCg1GFg4uPiEAGlM3BJk5BVN3L2wSGhZQAC9QAF5AkLDI6Ni6JTJeACIGHvyegCMB0B6SHpdXIA","body":"function make_cycle(x) {\n    set_tail(last_pair(x), x);\n    return x;\n} "},{"body":"\n    Draw a box-and-pointer diagram that shows the structure\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" created by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAbAQwGcyB9ABwYoCcAKADwCUoAN7ZQE0NwCmZAt1oUmrIgTp1eZLhqGDxkg5ID8ofvsMGAXPWZtOPTdoGDBAbmwBfXIVKUaoAFsGAGtpVhIATxI6aWdRc1AmWVYtCg1GFg4uPiEAGlM3BJk5BVN3L2wSGhZQAC9QAF5AkLDI6Ni6JTJeACIGHvyegCMB0B6SHpdXIA","body":"const z = make_cycle(list(\"a\", \"b\", \"c\")); "},{"body":"\n    What happens if we try to compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"last_pair(z)"},{"body":"?\n      ","tag":"#text"}],"solution":[{"body":"\n      (provided by GitHub user jonathantorres)\n      If we try to compute ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"last_pair(z)"},{"body":", the\n      program will enter in a infinite loop, since the end of the list points back\n      to the beginning.\n\n      ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ex-3-13-sol.png","id":"#fig-"}]},{"tag":"EXERCISE","title":"Exercise 3.14","id":"#ex-3.14","child":[{"body":"\n    The following\n    function\n    is quite useful, although obscure:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":3,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAN1AF5QAbAS3IAoAiAQzYBpQ2AjHnzxC2AEzYBKANy4AZgFcieMo2KgAtgE9yAUwBOWlgA9JoAN7ZQ10IuWr19AgQAOJ3lrOWbP0IzmgLMwA+kQK9PQmkl5WvnH6umQK+kSgWrJx1gC+oLr0JLoWsZk2hKQUZLoaLrSgZByMkaYZJTYFZMH1je5pMsWtCUkpDM5uldW8zf0+Wf2zPoPJqU6uPWERfbP4xOSgAO612nqGLJQyQA","body":"function mystery(x) {\n    function loop(x, y) {\n        if (is_null(x)) {\n            return y;\n        } else {\n            const temp = tail(x);\n            set_tail(x, y);\n            return loop(temp, x);\n        }\n    }\n    return loop(x, null);\n} "},{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"loop"},{"body":"\n    uses the \"","tag":"#text"},{"body":"temporary","tag":"#text"},{"body":"\"\n\tname\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"temp"},{"body":"\n    to hold the old value of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", since the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    on the next line destroys the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".\n    Explain what ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mystery"},{"body":" does in general.  Suppose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" is defined by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAN1AF5QAbAS3IAoAiAQzYBpQ2AjHnzxC2AEzYBKANxA","body":"const v = list(\"a\", \"b\", \"c\", \"d\"); "},{"body":"\n    Draw the box-and-pointer diagram that represents the list to which\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" is bound.  Suppose that we now evaluate\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":16,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAN1AF5QAbAS3IAoAiAQzYBpQ2AjHnzxC2AEzYBKANy4AZgFcieMo2KgAtgE9yAUwBOWlgA9JoAN7ZQ10IuWr19AgQAOJ3lrOWbP0IzmgLMwA+kQK9PQmkl5WvnH6umQK+kSgWrJx1gC+oLr0JLoWsZk2hKQUZLoaLrSgZByMkaYZJTYFZMH1je5pMsWtCUkpDM5uldW8zf0+Wf2zPoPJqU6uPWERfbP4xOSgAO612nqGLJQyQA","body":"const w = mystery(v); "},{"body":"\n    Draw box-and-pointer diagrams that show the structures\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"w"},{"body":" after\n    evaluating this\n    program.\n    What would be printed as the values of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":"\n    and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"w"},{"body":"?\n    ","tag":"#text"}],"solution":[{"body":"\n      (provided by GitHub user jonathantorres)\n      The application ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mystery(x)"},{"body":" will\n      reverse the list ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" in-place.\n      Initially\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" looks like this:\n      \n      ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ex-3-14-sol-2.png","id":"#fig-"},{"body":"\n\n      After evaluating       \n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const w = mystery(v);"},{"body":"\n      the values of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"w"},{"body":" become:\n      \n      ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ex-3-14-sol-2.png","id":"#fig-"},{"body":"\n\n      The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":"\n      prints ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[\"a\", null]"},{"body":" for\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"v"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[\"d\", [\"c\", [\"b\", [\"a\", null]]]]"},{"body":" for\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"w"},{"body":".\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Sharing and identity","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    We mentioned in section ","tag":"#text"},{"tag":"REF","body":"3.1.3","href":"/sicpjs/3.1.3"},{"body":" the\n    theoretical issues of\n    \"","tag":"#text"},{"body":"sameness","tag":"#text"},{"body":"\" and \"","tag":"#text"},{"body":"change","tag":"#text"},{"body":"\"\n    raised by the introduction of assignment.  These issues arise in practice\n    when individual pairs are ","tag":"#text"},{"tag":"EM","child":[{"body":"shared","tag":"#text"}]},{"body":" among different data objects.\n    For example, consider the structure formed by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAD1AF5QAbAS3IAoAiAQzYBpQ2AjNgEoA3PmLlQAL0y1QABw6MATi0q9KooA","body":"const x = list(\"a\", \"b\");\nconst z1 = pair(x, x); "},{"body":"\n    As shown in\n    \n        figure ","tag":"#text"},{"tag":"REF","body":"3.16","href":"/sicpjs/3.3.1#fig-3.16"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" is a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    both point to the same pair ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":".  This sharing\n    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" by the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" is a consequence of the straightforward\n    way in which\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    is implemented.  In general, using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    to construct lists will result in an interlinked structure of pairs in\n    which many individual pairs are shared by many different structures.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-17.svg","id":"#fig-3.16","captionHref":"/sicpjs/3.3.1#fig-3.16","captionName":"Figure 3.16 ","captionBody":[{"body":"\n\t    The list ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" formed by\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(x, x)"},{"body":".\n          ","tag":"#text"}]},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-18.svg","id":"#fig-3.17","captionHref":"/sicpjs/3.3.1#fig-3.17","captionName":"Figure 3.17 ","captionBody":[{"body":"\n\t    The list ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":" formed by\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(list(\"a\", \"b\"), list(\"a\", \"b\"))"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    In contrast to\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.16","href":"/sicpjs/3.3.1#fig-3.16"},{"body":",\n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.17","href":"/sicpjs/3.3.1#fig-3.17"},{"body":"\n    shows\n    the structure created by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUALwCZQBeUABwEMBLAJwAoAbV8zgETMBAGlACARgICUY3vyGjxU6dIDcQA","body":"const z2 = pair(list(\"a\", \"b\"), list(\"a\", \"b\")); "},{"body":"\n    In this structure, the pairs in the two\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"a\", \"b\")"},{"body":"\n    lists are distinct, although\n    \n\tthey contain the same strings.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/3.3.1#footnote-4"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    When thought of as a list, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":" both represent \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" list:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsBsBLAZwBcAKQ0sgIgENqAaUagI2oEom7Hm32BuIA","body":"list(list(\"a\", \"b\"), \"a\", \"b\") "},{"body":"\n    In general, sharing is completely undetectable if we operate on lists using\n    only\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".\n    However, if we allow mutators on list structure, sharing becomes\n    significant.  As an example of the difference that sharing can make,\n    consider the following\n    function,\n    which modifies the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of the structure to which it is applied:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBnAUzIH0yrmB3KjgCgA8AlKADe2UOPpNmACwYBDACY9Zi-gIA0oAERcOWgQG4xEgE5MCJ2nyMBfIA","body":"function set_to_wow(x) {\n    set_head(head(x), \"wow\");\n    return x;\n} "},{"body":"\n    Even though ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":" are \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" structure,\n    applying\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_to_wow"},{"body":"\n    to them yields different results.  With ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":",\n    altering the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    also changes the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":",\n    because in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    are the same pair.  With ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":", the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    are distinct, so\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_to_wow"},{"body":"\n    modifies only the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":":","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":4,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUAD1AF5QAbAS3IAoAiAQzYBpQ2AjNgEoA3PmLlQAL0y1QABw6MATi0q9Ko3DJFA","body":"z1; ","output":"[[\"a\", [\"b\", null]], [\"a\", [\"b\", null]]]"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBnAUzIH0yrmB3KjgCgA8AlKADe2UOPpNmACwYBDACY9Zi-gIA0oAERcOWgQG4xEgE5MCJ2nyMBfXCRp0yoPqAC8oADYUnPLXK1NLQAjfSMHIidQAC9Md1AABzkKE35NQSNsRhY2Tm4eWMMgA","body":"set_to_wow(z1); ","output":"[[\"wow\", [\"b\", null]], [\"wow\", [\"b\", null]]]"},{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":3,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsGMB7AOwGcAXUALwCZQBeUABwEMBLAJwAoAbV8zgETMBAGlACARgICUY3vyGjxU6dIDcuGmqA","body":"z2; ","output":">\n[[\"a\", [\"b\", null]], [\"a\", [\"b\", null]]]"},{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":8,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQBnAUzIH0yrmB3KjgCgA8AlKADe2UOPpNmACwYBDACY9Zi-gIA0oAERcOWgQG4xEgE5MCJ2nyMBfXCRp0yoAF4AmUAF5QABzkUTHgAbCiceLTktTS0AI31NELCIqO04gUNcRhY2Tm4ed0MgA","body":"set_to_wow(z2); ","output":"[[\"wow\", [\"b\", null]], [\"a\", [\"b\", null]]]"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n\tOne way to detect sharing in list structures is to use the\n\t\n\tprimitive predicate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":",\t\n\twhich we introduced in\n\tsection ","tag":"#text"},{"tag":"REF","body":"1.1.6","href":"/sicpjs/1.1.6"},{"body":" to test whether two numbers\n\tare equal \n\tand extended in section ","tag":"#text"},{"tag":"REF","body":"2.3.1","href":"/sicpjs/2.3.1"},{"body":" to test whether\n\ttwo strings are equal. When applied to two nonprimitive values,\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x === y"},{"body":"\n\ttests whether ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":" are the same object (that is, whether\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":"\n\tare equal as pointers).\n      \n    Thus, with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":" as defined in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.16","href":"/sicpjs/3.3.1#fig-3.16"},{"body":"\n\tand ","tag":"#text"},{"tag":"REF","body":"3.17","href":"/sicpjs/3.3.1#fig-3.17"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(z1) === tail(z1)"},{"body":"\n    is true and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(z2) === tail(z2)"},{"body":"\n    is false.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    As will be seen in the following sections, we can exploit sharing to\n    greatly extend the repertoire of data structures that can be\n    represented by pairs.  On the other hand, sharing can also be\n    \n    dangerous, since modifications made to structures will also affect\n    other structures that happen to share the modified parts.  The mutation\n    operations\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    should be used with care; unless we have a good understanding of how our\n    data objects are shared, mutation can have unanticipated\n    results.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/3.3.1#footnote-5"}]},{"tag":"EXERCISE","title":"Exercise 3.15","id":"#ex-3.15","child":[{"body":"\n    Draw box-and-pointer diagrams to explain the effect of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_to_wow"},{"body":"\n    on the structures ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z1"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z2"},{"body":" above.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.16","id":"#ex-3.16","child":[{"body":"\n    Ben Bitdiddle decides to write a\n    function\n    to count the number of pairs in any list structure.\n    \"","tag":"#text"},{"body":"It's easy,","tag":"#text"},{"body":"\" he reasons.  \"","tag":"#text"},{"body":"The number of pairs in\n    any structure is the number in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    plus the number in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    plus one more to count the current pair.","tag":"#text"},{"body":"\" So Ben writes the following\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":27,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQSriyB9ABwEMKAnAZwAoAPAJSgA3tlATQnAKZkCnWgEJQFbqw6cBg8ZN2SA-KAAMOvboBcdBkWbsufABbS2AEy3CA1KFNnd9Rur2vGQcADbuoB4+vhKYANzYAL5AA","body":"function count_pairs(x) {\n    return ! is_pair(x)\n           ? 0\n           : count_pairs(head(x)) + \n             count_pairs(tail(x)) +\n             1;\n} "},{"body":"\n    Show that this\n    function\n    is not correct.  In particular, draw box-and-pointer diagrams representing\n    list structures made up of exactly three pairs for which Ben's\n    function\n    would return 3; return 4; return 7; never return at all.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":28,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQSriyB9ABwEMKAnAZwAoAPAJSgA3tlATQnAKZkCnWgEJQFbqw6cBg8ZN2SA-KAAMOvboBcdBkWbsufABbS2AEy3CA1KFNnd9Rur2vGQcADbuoB4+vhKYANzYAL649ETcZKBkDjLSTKGqGQC8oPnpvABEbOUANKDlAEY1dSTlggmp6aA00qDFdprlLk3l0q3tNJ1kAO5UvaD9vN213W3YHRl4DJx5BXML01S15XhjaxMZ3NIAbtJEO519GsEztQer63QAniShPcWlZAqAHNhg5hhRTpdmCEKOEYXCwrwSN9foJBLVkT9pKtsCApLJ5LQUHF8XIFKAACwkmRk2gAdgSLlULFCbE+SOstg0fCyOXuZDRjOZrPZ-hsgR4vE28n5guwTO4LLZHIC-T4lxudwBctxYCI12knFJhNAbAybFCoXlwuVYq5QUxqLaQA","body":"const three_list = list(\"a\", \"b\", \"c\");\nconst one = pair(\"d\", \"e\");\nconst two = pair(one, one);\nconst four_list = pair(two, \"f\");\nconst seven_list = pair(two, two);\nconst cycle = list(\"g\", \"h\", \"i\");\nset_tail(tail(tail(cycle)), cycle); "}]},{"tag":"EXERCISE","title":"Exercise 3.17","id":"#ex-3.17","child":[{"body":"\n    Devise a correct version of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_pairs"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"3.16","href":"/sicpjs/3.3.1#ex-3.16"},{"body":" that returns the number of\n    distinct pairs in any structure.  (Hint: Traverse the structure, maintaining\n    an auxiliary data structure that is used to keep track of which pairs have\n    already been counted.)\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":29,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChslAM4D2ANgK4AuAlkQHagAOATkQG5UAmAph6AEYBPUAHEqFABJk+oMgS5NQAYxJcAhrQCcG7AEhQobADMytRdTpKiJigH0GqqkwIAKAB4BKUAG9s+-SopLax47BydQAF5QWjISEgBuXz9jU3N6KgIbRStaChD7R2dFMiYmLlysnLyOUMcCABpQD28kvz8yihL0zJi4opKyiuzgmoKnd1a2qb8AflBDVRI5SempgC5QAAs1Dn7S8tth3Pywgk8Ii6aV1dnQCiYyLmub0A2MypHapmcKBxI9waHKonOruRoeRJtAC+kxSZho9COFDcnh8NyohmcAEJQO8xijQAAfQm4zJIkHfcmjU7g9yo55TDpdUAABkhqyhoC4Sy4LRefipXwIkUYYTcjUFYzO7P5TKYiKqzm2ql2Hk8AGoGfygrkfn8URqtfzMDKpjDoZM5QrrCjEjDsNlaARAhRNmUuDYSBlAlEvc7nAAiVQBxoBvgh0ABxQB9yJR3O0B0XlRfEBjgRgNcGNxugJigAdyIIvxScaSdjDtzgUMViYnu9xbFBaIocM2crTsCclY5XrCZTTcLjWbFfjgUUAmUydAfuRAYA5hnNhmqO25LZflR-pvt-qJ1O6RLJyoK3gwFbUPFQBeUFeb4kOBkGCRVAIilUhT83VwPbO6Q+nxfN8kU-GsSj7Ch-2wR8CGfV932sT9u17P9T3wG9oMA+CQKlIpjy4f8gA","body":"// solution provided by GitHub user clean99\n\t  \nfunction count_pairs(x) {\n    let counted_pairs = null;\n    function is_counted_pair(current_counted_pairs, x) {\n        return is_null(current_counted_pairs)\n               ? false\n               : head(current_counted_pairs) === x\n               ? true\n               : is_counted_pair(tail(current_counted_pairs), x);\n    }\n    function count(x) {\n        if(! is_pair(x) || is_counted_pair(counted_pairs, x)) {\n            return 0;\n        } else {\n            counted_pairs = pair(x, counted_pairs);\n            return count(head(x)) +\n                   count(tail(x)) +\n                   1;\n        }\n    }\n    return count(x);\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.18","id":"#ex-3.18","child":[{"body":"\n    Write a\n    function\n    that examines a list and\n    \n    determines whether it contains a cycle, that is,\n    whether a program that tried to find the end of the list by taking\n    successive\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"s\n    would go into an infinite loop. Exercise ","tag":"#text"},{"tag":"REF","body":"3.13","href":"/sicpjs/3.3.1#ex-3.13"},{"body":"\n    constructed such lists.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":30,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChslAM4D2ANgK4AuAlkQHagAOATkQG5UAmAph6AEYBPUAHEqFABJk+oMgS5NQAYxJcAhrQCcG3ADMytRdTpK6FVVVoEA+ooHKuACgAeASlABvbKG+gVFE-oUPFYM5kwEoAC8oLRkJCQA3F4+egZG9FTWikSBwaFUTA7ZuRwhYQQANKCuHsk+PkxcFGRMGdax8UU5tEGl+eEudfXDPgD8oDqqJHJDI8MAXKAAFmocXSVlBQRukbvVs3NjoBRMZFwHh6CLmTbdvZuFZlQk6z155S5Vrkn1AL5DqUMNHo3CChhsdhUzjcnkOVB0oAcNw6L1cMIuw0azVaEymch+c1+oC40y4oHhiJuxTefTCr3u-Uq1Rc6MuDSaLXoJzOBJGRJJclqbO81IZ5SijDpTiqoveWxcvMuWM5oFBXHBtnsDieqJZir+Q3+9WVOLVGshjm+2H+2Gyln8FCWjS4VhImX80TdBAoDgARKpfVVfXxA6BfYpfQrbXRvUoLRKvT7fQBzUO+pZpqiRpJyChWHXa8wvAualQsmUWqN4MAcTIMEiqAQRSak7C1gj1xtdHrmSwQrWO52u9163D4dudpvHU7nCcNgTdp590uOFd6oA","body":"// solution provided by GitHub user clean99\n\nfunction contains_cycle(x) {\n    let counted_pairs = null;\n    function is_counted_pair(counted_pairs, x) {\n        return is_null(counted_pairs)\n               ? false\n               : head(counted_pairs) === x\n               ? true\n               : is_counted_pair(tail(counted_pairs), x);\n    }\n    function detect_cycle(x) {\n        if (is_null(x)) {\n            return false;\n        } else if (is_counted_pair(counted_pairs, x)) {\n            return true;\n        } else {\n            counted_pairs = pair(x, counted_pairs);\n            return detect_cycle(tail(x));\n        }\n    }\n    return detect_cycle(x);\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.19","id":"#ex-3.19","child":[{"body":"\n    Redo exercise ","tag":"#text"},{"tag":"REF","body":"3.18","href":"/sicpjs/3.3.1#ex-3.18"},{"body":" using an algorithm that\n    takes only a constant amount of space.  (This requires a very clever idea.)\n    ","tag":"#text"}],"solution":[{"body":"\n      Define a fast pointer and a slow pointer. The fast pointer goes forward\n      2 steps every time, while the slow pointer goes forward 1 step every time.\n      If there is a cycle in the list, the fast pointer will eventually catch\n      up with the slow pointer.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":31,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAbAQwGcyB9ABwYoCcAKADwCUoAN7ZQE0NwCmZAt1oUmrIgTp1eZLhqGDxkg5ID8ofvsMGAXPWZtOPTdoGDBAbmwBfXIVKUaoAFsGAGtpVhIATxI6aWdRc1AmWVYtCg1GFg4uPiEAGlM3BJk5BVN3L3xicmpaEhpUomVI6NiheIMfav8AE1lpcnComN48W3ymOioAd2ExCwli+UVlVXUR22EAH03QJRU1DVSNUZYXBPmDE1G6JPOLiWsTslAAXjfEyam7+5MybgJpN8LtZemR+mxmsMjo40utToJ8tCJtMXO4DF4DItSqDwYMWjCdAiCuVcHVGs8SK9AiEwpDYnQlGReAAiEjM-LM7rs0DM6TM1HYMksUAkTBUhjsdjSIjdXgMlgshjc5kAI35+RIhUF9S4jTxw1FbiAA","body":"function contains_cycle(x) {\n    function detect_cycle(fast, slow) {\n        return is_null(fast) || is_null(tail(fast))\n               ? false\n               : fast === slow\n               ? true\n               : detect_cycle(tail(tail(fast)), tail(slow));\n    }\n    return detect_cycle(tail(x), x);\n} "}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Mutation is just assignment","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    When we introduced compound data, we observed in\n    section ","tag":"#text"},{"tag":"REF","body":"2.1.3","href":"/sicpjs/2.1.3"},{"body":" that pairs can be represented purely\n    in terms of\n    functions:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":32,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAHAQwoCcAKADwBpQBPASlABvbKFGhCpSjVAATCgGdGZEgAtWAWwHCxO0MwCmZAs1rrQAXkugARCv0MZ1kbpdiA-KHbPXLgFygzS3MbMiYAGycfVw8ebyixf31mZio2dW5rYhl9PAoifRlQKjokhilaAFoK+iZmaz4AbjiAXziDIxNZBSVVBoBIF2xW-GJyalo7B1YALy09Q2NaadZbe0dG0GGJMelQijCZufbF0GXrPYiN4ZIaeTJPCxqWVkxuACZG7EmZDkagA","body":"function pair(x, y) {\n    function dispatch(m) {\n        return m === \"head\"\n               ? x\n               : m === \"tail\"\n               ? y\n               : error(m, \"undefined operation -- pair\");\n    }\n    return dispatch;\t      \n}\n\nfunction head(z) { return z(\"head\"); }\n\nfunction tail(z) { return z(\"tail\"); } "},{"body":"\n    The same observation is true for mutable data.  We can implement\n    mutable data objects as\n    functions\n    using assignment and local state. For instance, we can extend the above\n    pair implementation to handle\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    in a manner analogous to the way we implemented bank accounts using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_account"},{"body":"\n    in section ","tag":"#text"},{"tag":"REF","body":"3.1.1","href":"/sicpjs/3.1.1"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":33,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAHAQwoCcAKADwBpQBPASlABvbKFGhCpSjVABnAKZkA+u1YA3AYNDtQAXlCqA3KAC+IsRPLVa8pTzUbeu-UdNjQzBQWa0AtroB8oH46IaAARAAWcgwAJmFmbomJAPxaCUkZAFxBuqFhZEwANvEZpaCpPOllYtnBeTaKUbEl1SmyCspVrbW5emENBRTFXdWpDZWtidlyzMxUbD7cYcQxcngURHIxoFR0MwxStAC0R-RMzGF8Btim+MSW0k0xrABeDh5kXrQvrJHRcVcTLgLIdQINCq93p5vKAfvkipcXMD7qCGk9XtxNgB3RSqBiFAhyDTpOFo-6XVjY3H4wlXdIfL6w66mEFWdpKcEY0BUvEEolCEm-AYIviUuQ43m065uBkwl7M3AkGgyMhaJyMFisTDcABMdLJsQ43BQdPR7CuQA","body":"function pair(x, y) {\n    function set_x(v) { x = v; }\n    function set_y(v) { y = v; }\n    return m => m === \"head\"\n                ? x\n                : m === \"tail\"\n                ? y\n                : m === \"set_head\"\n                ? set_x\n                : m === \"set_tail\"\n                ? set_y\n                : error(m, \"undefined operation -- pair\");\n}\n\nfunction head(z) { return z(\"head\"); }\n\nfunction tail(z) { return z(\"tail\"); }\n\nfunction set_head(z, new_value) {\n    z(\"set_head\")(new_value);\n    return z;\n}\nfunction set_tail(z, new_value) {\n    z(\"set_tail\")(new_value);\n    return z;\n} "}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    Assignment is all that is needed, theoretically, to account for the\n    behavior of mutable data.  As soon as we admit\n    assignment\n    to our language, we raise all the issues, not only of assignment, but of\n    mutable data in general.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-6","body":"6","href":"/sicpjs/3.3.1#footnote-6"}]},{"tag":"EXERCISE","title":"Exercise 3.20","id":"#ex-3.20","child":[{"body":"\n    Draw environment diagrams to illustrate the evaluation of the sequence\n    of\n    \n\tstatements\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":34,"eval":true,"prependLength":28,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAHAQwoCcAKADwBpQBPASlABvbKFGhCpSjVABnAKZkA+u1YA3AYNDtQAXlCqA3KAC+IsRPLVa8pTzUbeu-UdNjQzBQWa0AtroB8oH46IaAARAAWcgwAJmFmbomJAPxaCUkZAFxBuqFhZEwANvEZpaCpPOllYtnBeTaKUbEl1SmyCspVrbW5emENBRTFXdWpDZWtidlyzMxUbD7cYcQxcngURHIxoFR0MwxStAC0R-RMzGF8Btim+MSW0k0xrABeDh5kXrQvrJHRcVcTLgLIdQINCq93p5vKAfvkipcXMD7qCGk9XtxNgB3RSqBiFAhyDTpOFo-6XVjY3H4wlXdIfL6w66mEFWdpKcEY0BUvEEolCEm-AYIviUuQ43m065uBkwl7M3AkGgyMhaJyMFisTDcABMdKVRBVsPV5w43HYdLJsVYnLe3EwAHYrkA","body":"const x = pair(1, 2);\nconst z = pair(x, x);\nset_head(tail(z), 17); "},{"tag":"SNIPPET","latex":false,"id":35,"eval":true,"prependLength":32,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToIwChsDMBXAOwGMAXASwHsjQAHAQwoCcAKADwBpQBPASlABvbKFGhCpSjVABnAKZkA+u1YA3AYNDtQAXlCqA3KAC+IsRPLVa8pTzUbeu-UdNjQzBQWa0AtroB8oH46IaAARAAWcgwAJmFmbomJAPxaCUkZAFxBuqFhZEwANvEZpaCpPOllYtnBeTaKUbEl1SmyCspVrbW5emENBRTFXdWpDZWtidlyzMxUbD7cYcQxcngURHIxoFR0MwxStAC0R-RMzGF8Btim+MSW0k0xrABeDh5kXrQvrJHRcVcTLgLIdQINCq93p5vKAfvkipcXMD7qCGk9XtxNgB3RSqBiFAhyDTpOFo-6XVjY3H4wlXdIfL6w66mEFWdpKcEY0BUvEEolCEm-AYIviUuQ43m065uBkwl7M3AkGgyMhaJyMFisTDcABMdKVRBVsPV5w43HYdLJsVYnLe3EwAHY6dh0RaDEA","body":"head(x); ","output":"17"},{"body":"\n    using the \n    \n            functional\n      \n    implementation of pairs given above.  (Compare\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.11","href":"/sicpjs/3.2.4#ex-3.11"},{"body":".)\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.3.1#footnote-link-1","child":[{"body":"\n\tThe functions ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":" return the value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":".\n\t\n\tThey should be used only for their effect.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.3.1#footnote-link-2","child":[{"body":"We see from this that mutation operations on\n    lists can create \"","tag":"#text"},{"body":"garbage","tag":"#text"},{"body":"\" that is not part of any accessible\n    structure. We will see in section ","tag":"#text"},{"tag":"REF","body":"5.3.2","href":"/sicpjs/5.3.2"},{"body":" that\n    JavaScript\n    memory-management systems include a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"garbage collector","tag":"#text"}]},{"body":", which identifies and recycles the memory\n    space used by unneeded pairs.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/3.3.1#footnote-link-3","child":[{"body":"\n\tSection ","tag":"#text"},{"tag":"REF","body":"5.3.1","href":"/sicpjs/5.3.1"},{"body":"\n\twill show how a memory-management system\n\tcan implement ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_new_pair"},{"body":".\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/3.3.1#footnote-link-4","child":[{"body":"The two pairs are distinct\n\tbecause each call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n\treturns a new pair. The strings are\n        \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" in the sense\n\tthat they are primitive data (just like numbers) that are composed of\n\tthe same characters in the same order. Since JavaScript provides no way\n\tto mutate a string, any sharing that the designers of a JavaScript\n\tinterpreter might decide to implement for strings is undetectable.\n\tWe consider primitive data such as numbers, booleans, and strings\n\tto be ","tag":"#text"},{"tag":"EM","child":[{"body":"identical","tag":"#text"}]},{"body":" if and only if they are\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"indistinguishable","tag":"#text"}]},{"body":".\n\t","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/3.3.1#footnote-link-5","child":[{"body":"The subtleties of dealing with sharing of mutable data\n    objects reflect the underlying issues of \"","tag":"#text"},{"body":"sameness","tag":"#text"},{"body":"\" and\n    \"","tag":"#text"},{"body":"change","tag":"#text"},{"body":"\" that were raised in\n    section ","tag":"#text"},{"tag":"REF","body":"3.1.3","href":"/sicpjs/3.1.3"},{"body":".  We mentioned there\n    that admitting change to our language requires that a compound object must\n    have an \"","tag":"#text"},{"body":"identity","tag":"#text"},{"body":"\" that is something different from the pieces\n    from which it is composed.  In\n    JavaScript,\n    we consider this \"","tag":"#text"},{"body":"identity","tag":"#text"},{"body":"\" to be the quality that is tested by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":",\n    i.e., by equality of pointers.  Since in most\n    JavaScript\n    implementations a pointer is essentially a memory address, we are\n    \"","tag":"#text"},{"body":"solving the problem","tag":"#text"},{"body":"\" of defining the identity of objects by\n    stipulating that a data object \"","tag":"#text"},{"body":"itself","tag":"#text"},{"body":"\" is the information\n    stored in some particular set of memory locations in the computer.  This\n    suffices for simple\n    JavaScript\n    programs, but is hardly a general way to resolve the issue of\n    \"","tag":"#text"},{"body":"sameness","tag":"#text"},{"body":"\" in computational models.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-6","count":6,"href":"/sicpjs/3.3.1#footnote-link-6","child":[{"body":"On the other hand, from the viewpoint of\n    implementation, assignment requires us to modify the environment, which is\n    itself a mutable data structure.  Thus, assignment and mutation are\n    equipotent: Each can be implemented in terms of the other.","tag":"#text"}]}]