<SUBSECTION>
  <NAME>
    A Language for Describing Register Machines
  </NAME><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:register-machine-language"></LABEL>

  <INDEX>register machine<SUBINDEX>language for describing<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    Data-path and controller diagrams are adequate for representing simple
    machines such as GCD, but they are unwieldy for describing large
    machines such as a
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    interpreter.  To make it possible to deal with complex machines, we will
    create a language that presents, in textual form, all the
    information given by the data-path and controller
    diagrams. We will start with a notation that directly
    mirrors the diagrams.
  </TEXT><!-- Error occurred while translating this section -->
  
  <TEXT>
    We define the data paths of a machine by describing the registers and
    the operations.  To describe a register, we give it a name
    and specify the buttons that control assignment to it.  We give each
    of these buttons a name and specify the source of the data that enters
    the register under the button<APOS></APOS>s control.  (The source is a register,
    a constant, or an operation.) To describe an operation, we give
    it a name and specify its inputs (registers or constants).
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    We define the controller of a machine as a sequence of 
    <INDEX>register-machine language<SUBINDEX>instructions</SUBINDEX></INDEX>
    <EM>instructions</EM> together with 
      <INDEX>register-machine language<SUBINDEX>label</SUBINDEX></INDEX>
      <EM>labels</EM> that identify
      <INDEX>register-machine language<SUBINDEX>entry point</SUBINDEX></INDEX>
      <EM>entry points</EM> in the sequence. An instruction is one of the following:
      <!-- Error occurred while translating this section --><UL>
	<LI>
	  The name of a data-path button to push to assign a value to
	  a register.  (This corresponds to a box in the controller diagram.)
	</LI>
	<LI>
	  A
	  <INDEX><USE>test</USE> (in register machine)</INDEX>
	  <INDEX>register-machine language<SUBINDEX><USE>test</USE></SUBINDEX></INDEX>
	  <SCHEMEINLINE>test</SCHEMEINLINE>
	  instruction, which performs a
	  specified test.
	</LI>
	<LI>
	  A
	  <INDEX>register-machine language<SUBINDEX><USE>branch</USE></SUBINDEX></INDEX>
	  <INDEX><USE>branch</USE> (in register machine)</INDEX>
	  <INDEX>register-machine language<SUBINDEX><USE>label</USE></SUBINDEX></INDEX>
	  <INDEX><USE>label</USE> (in register machine)</INDEX>
	  conditional branch (<SCHEMEINLINE>branch</SCHEMEINLINE> instruction)
	  to a	location indicated by a controller label, based on the result of
	  the previous test.  (The test and branch together correspond to a
	  diamond in the controller diagram.)  If the test is false, the
	  controller should continue with the next instruction in the sequence.
	  Otherwise, the controller should continue with the instruction after
	  the label.
	</LI>
	<LI>
	  An	  
	  <SPLITINLINE>
	    <SCHEME>
	      <INDEX>register-machine language<SUBINDEX><ORDER>goto</ORDER><SCHEMEINLINE>goto</SCHEMEINLINE></SUBINDEX></INDEX>
	      <INDEX><USE>goto</USE> (in register machine)</INDEX>
	    </SCHEME>
	    <JAVASCRIPT>
	      <INDEX>register-machine language<SUBINDEX><USE>go_to</USE></SUBINDEX></INDEX>
	      <INDEX><USE>go_to</USE> (in register machine)</INDEX>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  unconditional branch
	  <SPLITINLINE>
	    <SCHEME>(<SCHEMEINLINE>goto</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT>(<JAVASCRIPTINLINE>go_to</JAVASCRIPTINLINE></JAVASCRIPT>
	  </SPLITINLINE>
	  instruction) naming a controller label at which to continue execution.
	</LI>
      </UL>

    <!-- Error occurred while translating this section --><PDF_ONLY>
      <!--   Figure moved here for SICP JS pagination   -->
      <!--   Figure code is copy of code in section1.xml in a WEB_ONLY   -->
    <FIGURE>
      <FIGURE SPLIT_SCALE="0.2" WEB_SCALE="0.4" SRC="img_original/Fig5.2.std.svg"></FIGURE>
      <LABEL NAME="fig:gcd-controller"></LABEL>
      <CAPTION>Controller for a GCD machine.</CAPTION>
    </FIGURE>
    </PDF_ONLY>

    The machine starts at the beginning of the controller instruction
    sequence and stops when execution reaches the end of the sequence.
    Except when a branch changes the flow of control, instructions are
    executed in the order in which they are listed.
    <!-- Error occurred while translating this section --><WEB_ONLY>
      <!--    Figure code appears again in this file in a PDF_ONLY for SICP JS pagination    -->
    <FIGURE CENTER="no">
      <SNIPPET EVAL="no">
	<SCHEME>
(data-paths
 (registers
  ((name a)
   (buttons ((name a&lt;-b) (source (register b)))))
  ((name b)
   (buttons ((name b&lt;-t) (source (register t)))))
  ((name t)
   (buttons ((name t&lt;-r) (source (operation rem))))))

 (operations
  ((name rem)
   (inputs (register a) (register b)))
  ((name =)
   (inputs (register b) (constant 0)))))

(controller
  test-b                           <EM>; label</EM>
    (test =)                       <EM>; test</EM>
    (branch (label gcd-done))      <EM>; conditional branch</EM>
    (t&lt;-r)                         <EM>; button push</EM>
    (a&lt;-b)                         <EM>; button push</EM>
    (b&lt;-t)                         <EM>; button push</EM>
    (goto (label test-b))          <EM>; unconditional branch</EM>
  gcd-done)                        <EM>; label</EM>
	</SCHEME>
	<JAVASCRIPT>
data_paths(
  registers(
    list(
      pair(name(&quot;a&quot;),
           buttons(name(&quot;a&lt;-b&quot;), source(register(&quot;b&quot;)))),
      pair(name(&quot;b&quot;),
           buttons(name(&quot;b&lt;-t&quot;), source(register(&quot;t&quot;)))),
      pair(name(&quot;t&quot;),
           buttons(name(&quot;t&lt;-r&quot;), source(operation(&quot;rem&quot;)))))),
  operations(
    list(
      pair(name(&quot;rem&quot;),
           inputs(register(&quot;a&quot;), register(&quot;b&quot;))),
      pair(name(&quot;=&quot;),
           inputs(register(&quot;b&quot;), constant(0))))));

controller(
  list(
    &quot;test_b&quot;,                     // label
      test(&quot;=&quot;),                  // test
      branch(label(&quot;gcd_done&quot;)),  // conditional branch
      &quot;t&lt;-r&quot;,                     // button push
      &quot;a&lt;-b&quot;,                     // button push
      &quot;b&lt;-t&quot;,                     // button push
      go_to(label(&quot;test_b&quot;)),     // unconditional branch
    &quot;gcd_done&quot;));                 // label
	</JAVASCRIPT>
      </SNIPPET>
      <CAPTION>A specification of the GCD machine.</CAPTION>
      <!-- Error occurred while translating this section --><LABEL NAME="fig:gcd-machine-spec"></LABEL>
    </FIGURE>
    </WEB_ONLY>
  </TEXT>

  <TEXT>
    Figure<SPACE></SPACE><REF NAME="fig:gcd-machine-spec"></REF> shows the GCD machine
    described in this way.  This example only hints at the generality of these
    descriptions, since the GCD machine is a very simple case: Each register has
    only one button, and each button and test is used only once in the
    controller.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    Unfortunately, it is difficult to read such a description.  In order
    to understand the controller instructions we must constantly refer
    back to the definitions of the button names and the operation names,
    and to understand what the buttons do we may have to refer to the
    definitions of the operation names.  We will thus transform our
    notation to combine the information from the data-path and controller
    descriptions so that we see it all together.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    To obtain this form of description, we will replace the arbitrary
    button and operation names by the definitions of their behavior.  That
    is, instead of saying (in the controller) <QUOTE>Push button
    <SCHEMEINLINE>t&lt;-r</SCHEMEINLINE></QUOTE> and separately saying (in the
    data paths) <QUOTE>Button <SCHEMEINLINE>t&lt;-r</SCHEMEINLINE> assigns the
    value of the <SCHEMEINLINE>rem</SCHEMEINLINE> operation to register
    <SCHEMEINLINE>t</SCHEMEINLINE></QUOTE> and <QUOTE>The
    <SCHEMEINLINE>rem</SCHEMEINLINE> operation<APOS></APOS>s inputs are the contents
    of registers
    <INDEX>register-machine language<SUBINDEX><USE>assign</USE></SUBINDEX></INDEX>
    <INDEX><USE>assign</USE> (in register machine)</INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>op</USE></SUBINDEX></INDEX>
    <INDEX><USE>op</USE> (in register machine)</INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>reg</USE></SUBINDEX></INDEX>
    <INDEX><USE>reg</USE> (in register machine)</INDEX>
    <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE>,</QUOTE>
    we will say (in the controller) <QUOTE>Push the button that assigns to
    register <SCHEMEINLINE>t</SCHEMEINLINE> the value of the
    <SCHEMEINLINE>rem</SCHEMEINLINE> operation on the contents of registers
    <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE>.</QUOTE>
    Similarly, instead of saying (in the controller) <QUOTE>Perform the
    <SCHEMEINLINE>=</SCHEMEINLINE> test</QUOTE> and separately saying (in the
    data paths) <QUOTE>The <SCHEMEINLINE>=</SCHEMEINLINE> test operates on the
    contents of register <SCHEMEINLINE>b</SCHEMEINLINE> and the
    constant 0,</QUOTE> we will say <!-- Error occurred while translating this section --><QUOTE>Perform the
    <SCHEMEINLINE>=</SCHEMEINLINE> test on the
    <INDEX>register-machine language<SUBINDEX><USE>constant</USE></SUBINDEX></INDEX>
    <INDEX><USE>constant</USE> (in register machine)</INDEX>
    contents of register <SCHEMEINLINE>b</SCHEMEINLINE> and the
    constant 0.</QUOTE>  We will omit the data-path description, leaving only
    the controller sequence.  Thus, the GCD machine is described as follows:
    <!-- Error occurred while translating this section --><!--   
         %(registers a b t)
         %(operations rem =)
      -->
    
    <SNIPPET HIDE="yes">
      <NAME>gcd_controller_example</NAME>
      <REQUIRES>controller</REQUIRES>
      <REQUIRES>make_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <REQUIRES>gcd_controller_declaration</REQUIRES>
      <JAVASCRIPT>
;
	
const gcd_machine =
    make_machine(
        list(&quot;a&quot;, &quot;b&quot;, &quot;t&quot;),
        list(list(&quot;rem&quot;, (a, b) =&gt; a % b),
             list(&quot;=&quot;, (a, b) =&gt; a === b)),
        controller_sequence(gcd_controller));

set_register_contents(gcd_machine, &quot;a&quot;, 206);
set_register_contents(gcd_machine, &quot;b&quot;, 40);
start(gcd_machine);
get_register_contents(gcd_machine, &quot;a&quot;);	  
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>gcd_controller_declaration</NAME>
      <JAVASCRIPT>
const gcd_controller = 
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>gcd_controller_construction</NAME>
      <EXAMPLE>gcd_controller_example</EXAMPLE>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(controller
 test-b
   (test (op =) (reg b) (const 0))
   (branch (label gcd-done))
   (assign t (op rem) (reg a) (reg b))
   (assign a (reg b))
   (assign b (reg t))
   (goto (label test-b))
 gcd-done)
      </SCHEME>
      <JAVASCRIPT>
controller(
  list(
    &quot;test_b&quot;,
      test(list(op(&quot;=&quot;), reg(&quot;b&quot;), constant(0))),
      branch(label(&quot;gcd_done&quot;)),
      assign(&quot;t&quot;, list(op(&quot;rem&quot;), reg(&quot;a&quot;), reg(&quot;b&quot;))),
      assign(&quot;a&quot;, reg(&quot;b&quot;)),
      assign(&quot;b&quot;, reg(&quot;t&quot;)),
      go_to(label(&quot;test_b&quot;)),
    &quot;gcd_done&quot;))
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>controller</NAME>
      <JAVASCRIPT>
function controller(sequence) {	
    return list(&quot;controller&quot;, sequence);
}
function controller_sequence(controller) {
    return head(tail(controller));
}
      </JAVASCRIPT>
    </SNIPPET>
</TEXT>

  <TEXT>
    This form of description is easier to read than the kind illustrated
    in figure<SPACE></SPACE><REF NAME="fig:gcd-machine-spec"></REF>, but it also has disadvantages:
    <UL>
      <LI>It is more verbose for large machines,
      because complete descriptions of the data-path elements are repeated
      whenever the elements are mentioned in the controller instruction
      sequence.  (This is not a problem in the GCD example, because each
      operation and button is used only once.)  Moreover, repeating the
      data-path descriptions obscures the actual data-path structure of the
      machine; it is not obvious for a large machine how many registers,
      operations, and buttons there are and how they are interconnected.
      </LI>
      <LI>
	Because the controller instructions in a machine definition look like
	<SPLITINLINE>
	  <SCHEME>Lisp</SCHEME>
	  <JAVASCRIPT>JavaScript</JAVASCRIPT>
	</SPLITINLINE>
	expressions, it is easy to forget that they are
	not arbitrary
	<SPLITINLINE>
	  <SCHEME>Lisp</SCHEME>
	  <JAVASCRIPT>JavaScript</JAVASCRIPT>
	</SPLITINLINE>
	expressions.  They can notate only legal machine operations.  For
	example, operations can operate directly only on constants and the
	contents of registers, not on the results of other operations.
      </LI>
    </UL>

    In spite of these disadvantages, we will use this register-machine
    language throughout this chapter, because we will be more concerned with
    understanding controllers than with understanding the elements and
    connections in data paths.  We should keep in mind,
    however, that data-path design is crucial in designing real machines.
  </TEXT><!-- Error occurred while translating this section -->

  <EXERCISE>
    Use the register-machine language to describe the
    <INDEX><USE>factorial</USE><SUBINDEX>register machine for (iterative)</SUBINDEX></INDEX>
    iterative factorial
    machine of exercise<SPACE></SPACE><REF NAME="ex:iterative-fact"></REF>.
    <LABEL NAME="ex:iterative-fact-2"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->


  <SUBHEADING>
    <NAME>Actions</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <INDEX>actions, in register machine<OPEN></OPEN></INDEX><!-- Error occurred while translating this section -->
  <INDEX>register machine<SUBINDEX>actions<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    Let us modify the GCD machine so that we can type in the numbers
    whose GCD we want and get the answer
    <SPLITINLINE>
      <SCHEME>printed at our terminal.</SCHEME>
      <JAVASCRIPT>printed.</JAVASCRIPT>
    </SPLITINLINE>
    We will not discuss how to make a machine that can read and print,
    but will assume (as we do when we use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>read</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and <SCHEMEINLINE>display</SCHEMEINLINE> in
    <SPLITINLINE>
      <SCHEME>Scheme)</SCHEME>
      <JAVASCRIPT>JavaScript)</JAVASCRIPT>
    </SPLITINLINE>
    that they are available as primitive
    operations.<SPLITINLINE><SCHEME><FOOTNOTE>This assumption glosses over a
    great deal of complexity.  Usually a large portion of the implementation of
    a Lisp system is dedicated to making reading
    and printing work.</FOOTNOTE></SCHEME><JAVASCRIPT><FOOTNOTE>
        This assumption glosses over a great deal of complexity. Implementation of reading 
        and printing requires significant effort, for example to handle character encodings
        for different languages. 
      </FOOTNOTE>
    </JAVASCRIPT>
  </SPLITINLINE>
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Read</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The operation
	<INDEX><USE>prompt</USE> operation in register machine</INDEX>
	<JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is like the operations we have been using in that it produces a value that
    can be stored in a register.  But
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>read</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    does not take inputs from any registers; its value depends on
    something that happens outside the parts of the machine we are
    designing.  We will allow our machine<APOS></APOS>s operations to have such
    behavior, and thus will draw and notate the use of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>read</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    just as we do any other operation that computes a value.
  </TEXT><!-- Error occurred while translating this section -->

    <PDF_ONLY>
      <!--   Figure moved here for SICP JS pagination   -->
      <!--   Figure code is duplicated from earlier in this file in a WEB_ONLY   -->
    <FIGURE CENTER="no">
      <SNIPPET EVAL="no">
	<SCHEME>
(data-paths
 (registers
  ((name a)
   (buttons ((name a&lt;-b) (source (register b)))))
  ((name b)
   (buttons ((name b&lt;-t) (source (register t)))))
  ((name t)
   (buttons ((name t&lt;-r) (source (operation rem))))))

 (operations
  ((name rem)
   (inputs (register a) (register b)))
  ((name =)
   (inputs (register b) (constant 0)))))

(controller
  test-b                           <EM>; label</EM>
    (test =)                       <EM>; test</EM>
    (branch (label gcd-done))      <EM>; conditional branch</EM>
    (t&lt;-r)                         <EM>; button push</EM>
    (a&lt;-b)                         <EM>; button push</EM>
    (b&lt;-t)                         <EM>; button push</EM>
    (goto (label test-b))          <EM>; unconditional branch</EM>
  gcd-done)                        <EM>; label</EM>
	</SCHEME>
	<JAVASCRIPT>
data_paths(
  registers(
    list(
      pair(name(&quot;a&quot;),
           buttons(name(&quot;a&lt;-b&quot;), source(register(&quot;b&quot;)))),
      pair(name(&quot;b&quot;),
           buttons(name(&quot;b&lt;-t&quot;), source(register(&quot;t&quot;)))),
      pair(name(&quot;t&quot;),
           buttons(name(&quot;t&lt;-r&quot;), source(operation(&quot;rem&quot;)))))),
  operations(
    list(
      pair(name(&quot;rem&quot;),
           inputs(register(&quot;a&quot;), register(&quot;b&quot;))),
      pair(name(&quot;=&quot;),
           inputs(register(&quot;b&quot;), constant(0))))));

controller(
  list(
    &quot;test_b&quot;,                     // label
      test(&quot;=&quot;),                  // test
      branch(label(&quot;gcd_done&quot;)),  // conditional branch
      &quot;t&lt;-r&quot;,                     // button push
      &quot;a&lt;-b&quot;,                     // button push
      &quot;b&lt;-t&quot;,                     // button push
      go_to(label(&quot;test_b&quot;)),     // unconditional branch
    &quot;gcd_done&quot;));                 // label
	</JAVASCRIPT>
      </SNIPPET>
      <CAPTION>A specification of the GCD machine.</CAPTION>
      <!-- Error occurred while translating this section --><LABEL NAME="fig:gcd-machine-spec"></LABEL>
    </FIGURE>
    </PDF_ONLY>
  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Print</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>
	The operation
	<INDEX><USE>display</USE> operation in register machine</INDEX>
	<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    on the other hand, differs from the operations we have
    been using in a fundamental way: It does not produce an output value
    to be stored in a register.  Though it has an effect, this effect is
    not on a part of the machine we are designing.  We will refer to this
    kind of operation as an <EM>action</EM>.  We will represent an action in
    a data-path diagram just as we represent an operation that computes a
    value<EMDASH></EMDASH>as a trapezoid that contains the name of the action.
    Arrows point to the action box from any inputs (registers or
    constants).  We also associate a button with the action.  Pushing the
    button makes the action happen.  To make a controller push an action
    button we use a new kind of instruction called
    <INDEX>register-machine language<SUBINDEX><USE>perform</USE></SUBINDEX></INDEX>
    <INDEX><USE>perform</USE> (in register machine)</INDEX>
    <SCHEMEINLINE>perform</SCHEMEINLINE>.  Thus,
    the action of printing
    the contents of register
    <SCHEMEINLINE>a</SCHEMEINLINE> is represented
    in a controller sequence by the instruction
    <SNIPPET EVAL="no">
      <SCHEME>
(perform (op print) (reg a))
      </SCHEME>
      <JAVASCRIPT>
perform(list(op(&quot;display&quot;), reg(&quot;a&quot;)))      
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE></SPACE><REF NAME="fig:gcd-with-io_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE></SPACE><REF NAME="fig:gcd-with-io"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the data paths and controller for
    the new GCD machine.  Instead of having the machine stop after printing
    the answer, we have made it start over, so that it repeatedly
    reads a pair of numbers, computes their GCD, and prints
    the result.
    This structure is like the driver loops we used in the interpreters of
    chapter<SPACE></SPACE><REF NAME="chap:meta"></REF>.
    <!-- Error occurred while translating this section --><!--    % (registers a b t) (operations read = rem print)   -->
    <SPLIT>
      <SCHEME>
	<FIGURE>
	  <FIGURE SRC="img_original/Fig5.4c.std.svg"></FIGURE>
	  <SNIPPET EVAL="no">
	    <SCHEME>
(controller
 gcd-loop
   (assign a (op read))
   (assign b (op read))
 test-b
   (test (op =) (reg b) (const 0))
   (branch (label gcd-done))
   (assign t (op rem) (reg a) (reg b))
   (assign a (reg b))
   (assign b (reg t))
   (goto (label test-b))
 gcd-done
   (perform (op print) (reg a))
   (goto (label gcd-loop)))
	    </SCHEME>
	  </SNIPPET>
	  <CAPTION>A GCD machine that reads inputs and prints
	  results.</CAPTION>
	  <LABEL NAME="fig:gcd-with-io_scheme"></LABEL>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
	  <FIGURE SRC="img_javascript/Fig5.4c.std.svg"></FIGURE>      
	  <SNIPPET CENTER="no">
	    <NAME>gcd_with_prompt</NAME>
	    <EXAMPLE>gcd_with_prompt_example</EXAMPLE>
            <JAVASCRIPT>
controller(
  list(      
    &quot;gcd_loop&quot;,
      assign(&quot;a&quot;, list(op(&quot;prompt&quot;))),
      assign(&quot;b&quot;, list(op(&quot;prompt&quot;))),
    &quot;test_b&quot;,
      test(list(op(&quot;=&quot;), reg(&quot;b&quot;), constant(0))),
      branch(label(&quot;gcd_done&quot;)),
      assign(&quot;t&quot;, list(op(&quot;rem&quot;), reg(&quot;a&quot;), reg(&quot;b&quot;))),
      assign(&quot;a&quot;, reg(&quot;b&quot;)),
      assign(&quot;b&quot;, reg(&quot;t&quot;)),
      go_to(label(&quot;test_b&quot;)),
    &quot;gcd_done&quot;,
      perform(list(op(&quot;display&quot;), reg(&quot;a&quot;))),
      go_to(label(&quot;gcd_loop&quot;))))
            </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
	    <NAME>gcd_with_prompt_example</NAME>
	    <REQUIRES>controller</REQUIRES>
	    <REQUIRES>make_machine</REQUIRES>
	    <REQUIRES>start</REQUIRES>
	    <REQUIRES>gcd_with_prompt_declaration</REQUIRES>
	    <JAVASCRIPT>
;
	      
const gcd_with_prompt_machine =
    make_machine(
        list(&quot;a&quot;, &quot;b&quot;, &quot;t&quot;),
        list(list(&quot;rem&quot;, (a, b) =&gt; a % b),
             list(&quot;=&quot;, (a, b) =&gt; a === b),
             list(&quot;prompt&quot;, () =&gt; parse_int(prompt(&quot;enter number:&quot;), 10)),
             list(&quot;display&quot;, display)),
        controller_sequence(gcd_with_prompt_controller));

start(gcd_with_prompt_machine);
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
	    <NAME>gcd_with_prompt_declaration</NAME>
            <JAVASCRIPT>
const gcd_with_prompt_controller =
	    </JAVASCRIPT>
	  </SNIPPET>
	  <CAPTION>A GCD machine that reads inputs and prints results.</CAPTION>
	  <LABEL NAME="fig:gcd-with-io"></LABEL>
	</FIGURE>
      </JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLIT>
  </TEXT>

  <INDEX>register machine<SUBINDEX>language for describing<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>actions, in register machine<CLOSE></CLOSE></INDEX><!-- Error occurred while translating this section -->
  <INDEX>register machine<SUBINDEX>actions<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  
</SUBSECTION>
