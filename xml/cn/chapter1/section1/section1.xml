<SECTION>
   <NAME>编程元素</NAME><NAME>编程元素</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL><NAME>编程元素</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>编程<SUBINDEX>元素</SUBINDEX><OPEN></OPEN></INDEX><NAME>编程元素</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>编程<SUBINDEX>元素</SUBINDEX><OPEN></OPEN></INDEX>

  <SECTIONCONTENT></SECTIONCONTENT><NAME>编程元素</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>编程<SUBINDEX>元素</SUBINDEX><OPEN></OPEN></INDEX>

  <SECTIONCONTENT></SECTIONCONTENT>

  <TEXT>
    一个强大的编程语言不仅仅是用于指示计算机执行任务的工具。该语言还作为一个框架，用于组织我们关于过程的想法。因此，当我们描述一种语言时，我们应特别关注该语言提供的将简单想法结合成更复杂想法的方法。每一种强大的语言都有三种实现此目的的机制：
    <UL>
      <LI>
        <B>原始表达式</B>,
	<INDEX>原始表达式</INDEX>
	代表语言所关注的最简单的实体，
      </LI>
      <LI>
        <B>组合方法</B>, 通过
        <INDEX>组合方法</INDEX>
	<INDEX>组合，方法<FRAGILE></FRAGILE></INDEX>
	从简单的元素构建复合元素，以及
      </LI>
      <LI>
        <B>抽象方法</B>,
        <INDEX>抽象方法</INDEX>
	通过它可以命名和操作复合元素作为单位。
      </LI>
    </UL>
  </TEXT>  <NAME>编程元素</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>编程<SUBINDEX>元素</SUBINDEX><OPEN></OPEN></INDEX>

  <SECTIONCONTENT></SECTIONCONTENT>

  <TEXT>
    一个强大的编程语言不仅仅是用于指示计算机执行任务的工具。该语言还作为一个框架，用于组织我们关于过程的想法。因此，当我们描述一种语言时，我们应特别关注该语言提供的将简单想法结合成更复杂想法的方法。每一种强大的语言都有三种实现此目的的机制：
    <UL>
      <LI>
        <B>原始表达式</B>,
	<INDEX>原始表达式</INDEX>
	代表语言所关注的最简单的实体，
      </LI>
      <LI>
        <B>组合方法</B>, 通过
        <INDEX>组合方法</INDEX>
	<INDEX>组合，方法<FRAGILE></FRAGILE></INDEX>
	从简单的元素构建复合元素，以及
      </LI>
      <LI>
        <B>抽象方法</B>,
        <INDEX>抽象方法</INDEX>
	通过它可以命名和操作复合元素作为单位。
      </LI>
    </UL>
  </TEXT>
  
  <TEXT>
    在编程中，我们处理两种类型的元素：
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程</INDEX>
	过程
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION></INDEX>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <INDEX>数据</INDEX>
    数据。（稍后我们会发现它们实际上并不那么不同。）非正式地，数据是我们想要操作的<QUOTE>东西</QUOTE>，而
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是操作数据规则的描述。因此，任何强大的编程语言都应该能够描述原始数据和原始
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    并且应该拥有组合和抽象
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    和数据的方法。
  </TEXT> <NAME>The Elements of Programming</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>programming <SUBINDEX>元素</SUBINDEX><OPEN></OPEN> </INDEX>

  <SECTIONCONTENT></SECTIONCONTENT>

  <TEXT>
    A powerful programming language is more than just a means for
    instructing a computer to perform tasks.  The language also serves as
    a framework within which we organize our ideas about processes.  Thus,
    when we describe a language, we should pay particular attention to the
    means that the language provides for combining simple ideas to form
    more complex ideas.  Every powerful language has three mechanisms for
    accomplishing this:
     <UL>
      <LI>
        <B>原始表达式</B>,
	<INDEX>原始表达式</INDEX>
	代表语言所关注的最简单的实体，
      </LI>
      <LI>
        <B>组合方法</B>, 通过
        <INDEX>组合方法</INDEX>
	<INDEX>组合，方法<FRAGILE></FRAGILE></INDEX>
	从简单的元素构建复合元素，以及
      </LI>
      <LI>
        <B>抽象方法</B>,
        <INDEX>抽象方法</INDEX>
	通过它可以命名和操作复合元素作为单位。
      </LI>
    </UL>
   </TEXT>
  
  <TEXT>
    In programming, we deal with two kinds of elements: 
     <SPLITINLINE>
      <SCHEME>
	<INDEX>过程</INDEX>
	过程
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION></INDEX>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <INDEX>数据</INDEX>
    数据。（稍后我们会发现它们实际上并不那么不同。）非正式地，数据是我们想要操作的<QUOTE>东西</QUOTE>，而
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是操作数据规则的描述。因此，任何强大的编程语言都应该能够描述原始数据和原始
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    并且应该拥有组合和抽象
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    和数据的方法。
   </TEXT>

  <TEXT>
    In this chapter we will deal only with simple
     <INDEX>数值数据</INDEX>
    <INDEX>数据<SUBINDEX>数值</SUBINDEX></INDEX>
    数值数据，以便我们可以专注于构建
    <SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>的规则。<FOOTNOTE>对于数字的
    <LABEL NAME="foot:number-representation"></LABEL>
    特征描述为<QUOTE>简单数据</QUOTE>是一个完全的伪装。实际上，数字处理是任何编程语言中最棘手和最令人困惑的方面之一。涉及到的一些典型问题如下：
    <INDEX>整数</INDEX>
    <INDEX>实数</INDEX>
    <INDEX>数<SPACE></SPACE>整数与<SPACE></SPACE>实数</INDEX>
    一些计算机系统区分出<EM>整数</EM>，例如2，与<EM>实数</EM>，例如2.71。实数2.00与整数2不同吗？用于整数的算术运算与用于实数的运算相同吗？6除以2得3，还是3.0？我们可以表示多大的数字？我们可以表示多少位小数？整数的范围与实数的范围相同吗？
    <INDEX>数值分析</INDEX>
    <INDEX>舍入误差</INDEX>
    <INDEX>截断误差</INDEX>
    当然，除了这些问题之外，还有一系列关于舍入和截断误差的问题<EMDASH></EMDASH>即整个数值分析科学。由于本书的重点是大型程序设计，而不是数值技术，我们将忽略这些问题。本章中的数值示例将展示通常在使用保持非整数操作中的有限小数位精度的算术运算时观察到的舍入行为。
  </FOOTNOTE>
  在后面的章节中，我们将看到这些相同的规则也允许我们构建
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  来操作复合数据。
  <INDEX>编程<SUBINDEX>元素</SUBINDEX><CLOSE></CLOSE></INDEX>
   </TEXT></SECTION>