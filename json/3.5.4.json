[{"id":"/sicpjs/3.5.4","tag":"TITLE","body":"3.5.4  \n    Streams and Delayed Evaluation"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"function\n    at the end of the preceding section shows how we can use streams to model\n    signal-processing systems that contain\n    \n    feedback loops.  The feedback loop for the adder shown in\n    figure ","tag":"#text"},{"tag":"REF","body":"3.32","href":"/sicpjs/3.5.3#fig-3.32"},{"body":" is modeled by the fact that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"'s\n    internal stream\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integ"},{"body":"\n    is defined in terms of itself:\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":false,"body":"const integ = pair(initial_value, \n                   () => add_streams(scale_stream(integrand, dt),\n                                     integ));"},{"body":"\n\tThe interpreter's ability to deal with such an implicit definition\n\tdepends on the delay resulting from wrapping the call to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":" in a lambda expression.\n\tWithout this delay, the interpreter could not\n\tconstruct ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integ"},{"body":" before evaluating the call\n\tto ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":", which would require\n\tthat ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integ"},{"body":" already be defined.\n\tIn general, such a delay is crucial for using streams to model\n\tsignal-processing systems that contain loops.  Without a delay,\n\tour models would have to be formulated so that the inputs to any\n\tsignal-processing component would be fully evaluated before the output\n\tcould be produced.  This would outlaw loops.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n\tUnfortunately, stream models of systems with loops may require uses of a\n\tdelay beyond the stream programming pattern seen so far. For instance,\n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.34","href":"/sicpjs/3.5.4#fig-3.34"},{"body":" shows a\n\tsignal-processing system for solving the \n\t\n\tdifferential equation ","tag":"#text"},{"body":"$dy/dt=f(y)$","tag":"LATEX"},{"body":" where\n\t","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is a given function.  The figure shows a\n\tmapping component, which applies ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" to its\n\tinput signal, linked in a feedback loop to an integrator in a manner\n\tvery similar to that of the analog computer circuits that are actually\n\tused to solve such equations.\n\t","tag":"#text"},{"tag":"FIGURE","scale":"60%","src":"img_original/ch3-Z-G-52.svg","id":"#fig-3.34","captionHref":"/sicpjs/3.5.4#fig-3.34","captionName":"Figure 3.34 ","captionBody":[{"body":"\n\t    An\n\t    \"","tag":"#text"},{"body":"analog computer circuit","tag":"#text"},{"body":"\" that solves the equation\n\t    ","tag":"#text"},{"body":"$dy/dt = f(y)$","tag":"LATEX"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Assuming we are given an initial value ","tag":"#text"},{"body":"$y_0$","tag":"LATEX"},{"body":" for\n    ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":", we could try to model this system using the\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"function solve(f, y0, dt) {\n    const y = integral(dy, y0, dt);\n    const dy = stream_map(f, y);\n    return y;\n}"},{"body":"\n    This\n    function\n    does not work, because in the first line of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":" the call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" requires that the input\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dy"},{"body":" be defined, which does not happen until the\n    second line of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    On the other hand, the intent of our definition does make sense, because we\n    can, in principle, begin to generate the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":"\n    stream without knowing ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dy"},{"body":".\n    \n\tIndeed, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" and many other stream\n\toperations can generate part of the answer given only partial\n\tinformation about the arguments.\n      \n    For ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":", the first element of the output\n    stream is the specified ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"initial_value"},{"body":".  Thus,\n    we can generate the first element of the output stream without evaluating\n    the integrand ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dy"},{"body":".  Once we know the first\n    element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":", the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map"},{"body":"\n    in the second line of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":" can begin working\n    to generate the first element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dy"},{"body":", which will\n    produce the next element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":", and so on.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    To take advantage of this idea, we will redefine\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" to expect the integrand stream to be a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"delayed argument","tag":"#text"}]},{"body":".\n    \n\tThe function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" will force\n      \n    the integrand to be evaluated only when it is required to generate more than\n    the first element of the output stream:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":34,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0BYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3UAJg4AGlBDAEZDwx2eXlrvRtAqQ3USW3E2E54AMne7h6fxF-OuJMIgB+UC-cRA8IALm+j2er2OPAAPkjYeDXhdIWJQUx5PIaPI2ODDgAiUhMAAemyYlHcsnkAHMiMwSNIALRso4rGRrDbbHYkwF1GGbGRUQkENgAC1KCK4hxlKgxXHlWKKzFYbACuhCy0SvK2uwOXP16goYv+iP2av6toietWZotypVXBm+E4CzosmUynUDp5hgRZwufSENyGAYN-K1FNOoApoeCCeOoAA1Amdmd4wD3XNyNRvYYyHImP7uQxXhXDgZKATLtcGpGK+stmwKTqE6AAFT6GR1+TWu3pKNu3CzT2F+iuChMBnyORsJziGSqdzqGdzhckZSHVxUahydQANzkRCYh2UFAbYjIdGWd1Zc90WNF4rY+8P4hPZ4vNuE2rJlcw6gHeJAPpu84yDuuigMuq7rpB27KPk-4DLcKh+lGQbFqW5b6h+T5QTul7XocaEgekkFjv07Q0cIEbTkReaTosYLMgARriDzLDI8jUCQDLqAQ+KVhQpE3gxTb0G+hLiRRAGBCETwMFx8g8ea-GuEJIk0GJ6ZweJhlCraY4TGBD5XrBAAMaDWccJj8LgFnSOIrhKPIsEqWpGl8QJOmiWw1kSY56TOfernuXxG5EQu4iwUhi6ASEbluHxhzBcZZggKBembEQ-mPrOUHxbpDCgNZoAUDQqCgDQ0SShSgQJrgOVsBQMpFVucjfKADLts1tkYAmAB6WayDBHW4s4BJMK1YBTcMTA2HYvVpZ5Q09qgY2wdgmCAlGmjOGwqUeTFxVxYcGwdZoNCOGwKCgGAV4qiYQA","body":"function integral(delayed_integrand, initial_value, dt) {\n    const integ =\n        pair(initial_value,\n             () => {\n                 const integrand = delayed_integrand();\n                 return add_streams(scale_stream(integrand, dt), \n                                    integ);\n             });\n    return integ;\n} "},{"body":"\n    Now we can implement our ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":"function\n    by delaying the evaluation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dy"},{"body":" in the\n    \n\tdeclaration of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":":","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":48,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0BYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCIsSoCUDYAQjlFFQ0tblDIjMzQa1t7fVIAzyzi4USlNU1tPQotUzCSrO9fehy7IoaIgF9QJnFjdI7GqWbsphs2+sGhTtxBDM6zGZBQEhoKJlAKAAsNon6aGO2N5lYqAC8ZajpQGgAHagZzy9oSfkFCUkoX0EMapQZ1GQaAwAEauJgcAA0PwAjNDDAAmHi8epNPygKiGdQkWziNiGGE8ABkRIxWJx4jxiK4kwiAH4VrjaeEAFxk7G4-GE0AAHx57IpVKRzLEDKY8nkNHkbEF0IARKQmAAPW5MSjuWTyADmRGYJGkAFoDT8-jIAUDQeC5TTimzbjIqNKCGwdiouVxoa7lPikR6RFMhCd2AFdCFfklzcCwW4oSaI+oKA6qYTISKA+m4-8E0mfVw81xFh9yFd6CplOpw-9DFz4UiBkI0fRK2bAVHwWw2Eq4aAlXXgj2YaAANQ9hHw7vUwucL7XQxkORMCumhj45fQgyUKXI1HDdHNgEMGS3TuhnugABU+hkm-kqYzwn3BdwSzAq3Wmx2oD2GwOH+OLBoJ4Sxue4qEeC4SzeERp2A1x1i1eQ5DYJxxBkVR3HUOCmAQmQSGUaFXCoag5HUAA3OQiCYaFlAobcxCBEhfgxfVsN0EV7UdNhCOI8QyIoqi0zEIMO0CEIUXTBimKwnC8N0UAULQjDpMQvDCkEjJG1kZRy33as5wXJcIy4liZPw+TaOhdT7wiaSnwDTo83aUYfHRaSp0+YDDBocRSIhAhoVUAAGajaPrUBJOkVQ5OUpCQ37NQAuC8y7OECL5KivR93UQ9j380BVBShtd3oVRC3wXAssUZ0vJ8iEMpCVRoW7QK0ECwKU1AGE2sCgsgA","body":"function solve(f, y0, dt) {\n    const y = integral(() => dy, y0, dt);\n    const dy = stream_map(f, y);\n    return y;\n} "},{"body":"\n    In general, every caller of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" must now\n    delay\n    the integrand argument.  We can demonstrate that the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":"function\n    works by approximating \n    ","tag":"#text"},{"body":"$e\\approx 2.718$","tag":"LATEX"},{"body":" by computing the value at\n    ","tag":"#text"},{"body":"$y=1$","tag":"LATEX"},{"body":" of the solution to the differential\n    equation ","tag":"#text"},{"body":"$dy/dt=y$","tag":"LATEX"},{"body":" with initial condition\n    ","tag":"#text"},{"body":"$y(0)=1$","tag":"LATEX"},{"body":":","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.5.4#footnote-1"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":48,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0BYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCIsSoCUDYAQjlFFQ0tblDIjMzQa1t7fVIAzyzi4USlNU1tPQotUzCSrO9fehy7IoaIgF9QJnFjdI7GqWbsphs2+sGhTtxBDM6zGZBQEhoKJlAKAAsNon6aGO2N5lYqAC8ZajpQGgAHagZzy9oSfkFCUkoX0EMapQZ1GQaAwAEauJgcAA0PwAjNDDAAmHi8epNPygKiGdQkWziNiGGE8ABkRIxWJx4jxiK4kwiAH4VrjaeEAFxk7G4-GE0AAHx57IpVKRzLEDKY8nkNHkbEF0IARKQmAAPW5MSjuWTyADmRGYJGkAFoDT8-jIAUDQeC5TTimzbjIqNKCGwdiouVxoa7lPikR6RFMhCd2AFdCFfklzcCwW4oSaI+oKA6qYTISKA+m4-8E0mfVw81xFh9yFd6CplOpw-9DFz4UiBkI0fRK2bAVHwWw2Eq4aAlXXgj2YaAANQ9hHw7vUwucL7XQxkORMCumhj45fQgyUKXI1HDdHNgEMGS3TuhnugABU+hkm-kqYzwn3BdwSzAq3Wmx2oD2GwOH+OLBoJ4Sxue4qEeC4SzeERp2A1x1i1eQ5DYJxxBkVR3HUOCmAQmQSGUaFXCoag5HUAA3OQiCYaFlAobcxCBEhfgxfVsN0EV7UdNhCOI8QyIoqi0zEIMO0CEIUXTBimKwnC8N0UAULQjDpMQvDCkEjJG1kZRy33as5wXJcIy4liZPw+TaOhdT7wiaSnwDTo83aUYfHRaSp0+YDDBocRSIhAhoVUAAGajaPrUBJOkVQ5OUpCQ37NQAuC8y7OECL5KivR93UQ9j380BVBShtd3oVRC1wLLFGdLyfIhDKQlUaFu0CtBAsClNQBhVrAoLIA","body":"stream_ref(solve(y => y, 1, 0.001), 1000); ","output":"2.716923932235896"}]},{"tag":"EXERCISE","title":"Exercise 3.77","id":"#ex-3.77","child":[{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"function\n    used above was analogous to the \"","tag":"#text"},{"body":"implicit","tag":"#text"},{"body":"\" definition of the\n    infinite stream of integers in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.2","href":"/sicpjs/3.5.2"},{"body":".  Alternatively, we can\n    give a definition of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" that is more\n    like ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers-starting-from"},{"body":" (also in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.2","href":"/sicpjs/3.5.2"},{"body":"):\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0BYBQuAzAVwDsBjAFwEsB7E0KkigUwHMAnAQwBsAKRlh04kAJgBoGJKtR4B9AG48izCSIoBKUAG9coPaHbMKRdvQAOnKu35SZ3BUpW79L1-qoBnWSSLc+Ati5RTWc3MNAAflAfP1Dw1wAuSUEuPg8KQ04AW1kKS38mQOERdTE4+IqXNVAAKlAAC2ZOERsU4s0AaklpKjlFbmUyyuGqjXUAblwAXyA","body":"function integral(integrand, initial_value, dt) {\n    return pair(initial_value,\n                is_null(integrand) \n                ? null\n                : integral(stream_tail(integrand),\n                           dt * head(integrand) + initial_value,\n                           dt));\n} "},{"body":"\n    When used in systems with loops, this\n    function\n    has the same problem\n    as does our original version of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":".\n    Modify the\n    function\n    so that it expects the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integrand"},{"body":" as a\n    delayed argument and hence can be used in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve"},{"body":"function\n    shown above.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.78","id":"#ex-3.78","child":[{"body":"\n    Consider the problem of designing a signal-processing system to study\n    the homogeneous\n    \n    second-order linear differential equation\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      \\dfrac {d^{2} y}{dt^{2}}-a\\dfrac{dy}{dt}-by &=& 0\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    The output stream, modeling ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":", is generated by\n    a network that contains a loop. This is because the value of\n    ","tag":"#text"},{"body":"$d^{2}y/dt^{2}$","tag":"LATEX"},{"body":" depends upon the values of\n    ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$dy/dt$","tag":"LATEX"},{"body":" and\n    both of these are determined by integrating\n    ","tag":"#text"},{"body":"$d^{2}y/dt^{2}$","tag":"LATEX"},{"body":".  The diagram we would like to\n    encode is shown in figure ","tag":"#text"},{"tag":"REF","body":"3.35","href":"/sicpjs/3.5.4#fig-3.35"},{"body":".  Write a\n    function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve_2nd"},{"body":"\n    that takes as arguments the constants ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":",\n    ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":", and ","tag":"#text"},{"body":"$dt$","tag":"LATEX"},{"body":" and the\n    initial values ","tag":"#text"},{"body":"$y_{0}$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$dy_{0}$","tag":"LATEX"},{"body":" for ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$dy/dt$","tag":"LATEX"},{"body":" and generates the stream of successive\n    values of ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":".\n    ","tag":"#text"},{"tag":"FIGURE","scale":"90%","src":"img_original/ch3-Z-G-53.svg","id":"#fig-3.35","captionHref":"/sicpjs/3.5.4#fig-3.35","captionName":"Figure 3.35 ","captionBody":[{"body":"Signal-flow diagram for the solution to a second-order linear\n      differential equation.\n      ","tag":"#text"}]}]},{"tag":"EXERCISE","title":"Exercise 3.79","id":"#ex-3.79","child":[{"body":"\n    Generalize the \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"solve_2nd"},{"body":" function\n      \n    of exercise ","tag":"#text"},{"tag":"REF","body":"3.78","href":"/sicpjs/3.5.4#ex-3.78"},{"body":" so that it can be used to\n    solve general second-order differential equations\n    ","tag":"#text"},{"body":"$d^{2} y/dt^{2}=f(dy/dt,\\, y)$","tag":"LATEX"},{"body":".\n    ","tag":"#text"}]},{"tag":"FIGURE","scale":"60%","src":"img_original/ch3-Z-G-58.svg","id":"#fig-3.36","captionHref":"/sicpjs/3.5.4#fig-3.36","captionName":"Figure 3.36 ","captionBody":[{"body":"A series RLC circuit.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.80","id":"#ex-3.80","child":[{"body":"\n    A ","tag":"#text"},{"tag":"EM","child":[{"body":"series RLC circuit","tag":"#text"}]},{"body":"\n    consists of a resistor, a capacitor, and an\n    inductor connected in series, as shown in\n    figure ","tag":"#text"},{"tag":"REF","body":"3.36","href":"/sicpjs/3.5.4#fig-3.36"},{"body":". If\n    ","tag":"#text"},{"body":"$R$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$L$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$C$","tag":"LATEX"},{"body":" are the resistance, inductance, and\n    capacitance, then the relations between voltage\n    (","tag":"#text"},{"body":"$v$","tag":"LATEX"},{"body":") and current\n    (","tag":"#text"},{"body":"$i$","tag":"LATEX"},{"body":") for the three components are described\n    by the equations\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      v_{R} &=& i_{R} R\\\\[9pt]\n      v_{L} &=& L\\dfrac{di_{L}}{dt}\\\\[11pt]\n      i_{C} &=& C\\dfrac{dv_{C}}{dt}\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n      and the circuit connections dictate the relations\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      i_{R} &=& i_{L}=-i_{C}\\\\[3pt]\n      v_{C} &=& v_{L}+v_{R}\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    Combining these equations shows that the state of the circuit (summarized by\n    ","tag":"#text"},{"body":"$v_{C}$","tag":"LATEX"},{"body":", the voltage across the capacitor, and\n    ","tag":"#text"},{"body":"$i_{L}$","tag":"LATEX"},{"body":", the current in the inductor) is\n    described by the pair of differential equations\n    ","tag":"#text"},{"body":"\n    \\[\\begin{array}{lll}\n    \\dfrac{dv_{C}}{dt}  &=& -\\dfrac{i_{L}}{C}\\\\[11pt]\n    \\dfrac {di_{L}}{dt} &=& \\dfrac{1}{L}v_{C}-\\dfrac{R}{L}i_{L}\n    \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    The signal-flow diagram representing this system of differential equations\n    is shown in figure ","tag":"#text"},{"tag":"REF","body":"3.37","href":"/sicpjs/3.5.4#fig-3.37"},{"body":".\n  ","tag":"#text"},{"tag":"FIGURE","scale":"60%","src":"img_original/ch3-Z-G-59.svg","id":"#fig-3.37","captionHref":"/sicpjs/3.5.4#fig-3.37","captionName":"Figure 3.37 ","captionBody":[{"body":"A signal-flow diagram for the solution to a series RLC circuit.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"RLC"},{"body":" that takes as arguments the parameters\n    ","tag":"#text"},{"body":"$R$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$L$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$C$","tag":"LATEX"},{"body":" of the circuit and the time increment\n    ","tag":"#text"},{"body":"$dt$","tag":"LATEX"},{"body":".  In a manner similar to that of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"RC"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"3.73","href":"/sicpjs/3.5.3#ex-3.73"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"RLC"},{"body":" should produce a\n    function\n    that takes the initial values of the state variables,\n    ","tag":"#text"},{"body":"$v_{C_{0}}$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$i_{L_{0}}$","tag":"LATEX"},{"body":", and produces a pair \n    (using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":")\n    of the streams of states ","tag":"#text"},{"body":"$v_{C}$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$i_{L}$","tag":"LATEX"},{"body":".  Using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"RLC"},{"body":",\n    generate the pair of streams that models the behavior of a series RLC\n    circuit with ","tag":"#text"},{"body":"$R = 1$","tag":"LATEX"},{"body":" ohm,\n    ","tag":"#text"},{"body":"$C= 0.2$","tag":"LATEX"},{"body":" farad,\n    ","tag":"#text"},{"body":"$L = 1$","tag":"LATEX"},{"body":" henry,\n    ","tag":"#text"},{"body":"$dt = 0.1$","tag":"LATEX"},{"body":" second, and initial values\n    ","tag":"#text"},{"body":"$i_{L_{0}} = 0$","tag":"LATEX"},{"body":" amps and\n    ","tag":"#text"},{"body":"$v_{C_{0}} = 10$","tag":"LATEX"},{"body":" volts.\n    ","tag":"#text"}]}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Normal-order evaluation","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    The examples in this section illustrate how\n    delayed evaluation\n    provides great programming flexibility, but the same examples also show how\n    this can make our programs more complex. Our new\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"function,\n    for instance, gives us the power to model systems with loops, but we must\n    now remember that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" should be called\n    with a delayed integrand, and every\n    function\n    that  uses ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" must be aware of this.\n    In effect, we have created two classes of\n    functions:\n    ordinary\n    functions\n    and\n    functions\n    that take delayed arguments.  In general, creating separate classes of\n    functions\n    forces us to create separate classes of higher-order\n    functions\n    as well.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.5.4#footnote-2"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    One way to avoid the need for two different classes of\n    functions\n    is to make all\n    functions\n    take delayed arguments.  We could adopt a model of evaluation in which all\n    arguments to\n    functions\n    are automatically delayed and arguments are forced only when they are\n    actually needed (for example, when they are required by a primitive\n    operation).  This would transform our language to use normal-order\n    evaluation, which we first described when we introduced the substitution\n    model for evaluation in section ","tag":"#text"},{"tag":"REF","body":"1.1.5","href":"/sicpjs/1.1.5"},{"body":".\n    Converting to normal-order evaluation provides a uniform and elegant way to\n    simplify the use of delayed evaluation, and this would be a natural strategy\n    to adopt if we were concerned only with stream processing.  In\n    section ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.2"},{"body":", after we have studied the\n    evaluator, we will see how to transform our language in just this way.\n    Unfortunately, including delays in\n    function\n    calls wreaks havoc with our ability to design programs that depend on the\n    order of events, such as programs that use assignment, mutate data, or\n    perform input or output.\n    \n\tEven a single delay in the tail of a pair can cause great confusion, as\n\tillustrated by exercises ","tag":"#text"},{"tag":"REF","body":"3.51","href":"/sicpjs/3.5.1#ex-3.51"},{"body":"\n\tand ","tag":"#text"},{"tag":"REF","body":"3.52","href":"/sicpjs/3.5.1#ex-3.52"},{"body":".\n      \n    As far as anyone knows, mutability and delayed evaluation do not mix well\n    in programming\n    \n\tlanguages.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.5.4#footnote-link-1","child":[{"body":"\n    To complete in reasonable time, this calculation requires the use of the\n    memoization optimization from section ","tag":"#text"},{"tag":"REF","body":"3.5.1","href":"/sicpjs/3.5.1"},{"body":" in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":" and in\n    the function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":" used in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"\n    (using the function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2_optimized"},{"body":"\n    as suggested in\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.57","href":"/sicpjs/3.5.2#ex-3.57"},{"body":").","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.5.4#footnote-link-2","child":[{"body":"This is a small reflection, in\n    JavaScript,\n    of the difficulties that\n    \n\tearly statically\n      \n    typed languages such as Pascal\n    had\n    in coping with higher-order\n    functions.\n    In\n    these\n    languages, the programmer\n    had to\n    specify the data types of the\n    arguments and the result of each\n    function:\n    number, logical value, sequence, and so on. Consequently, we could not\n    express an abstraction such as \"","tag":"#text"},{"body":"map a given\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":"\n    over all the elements in a sequence","tag":"#text"},{"body":"\" by a single higher-order\n    function\n    such as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map"},{"body":".\n    Rather, we would need a different mapping\n    function\n    for each different combination of argument and result data types that might\n    be specified for a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":".\n    Maintaining a practical notion of \"","tag":"#text"},{"body":"data type","tag":"#text"},{"body":"\" in the presence\n    of higher-order\n    functions\n    raises many difficult issues. One way of dealing with this problem is\n    illustrated by the language\n    \n    ML\n    \n    (Gordon, Milner, and Wadsworth 1979), \n    whose\n    \"","tag":"#text"},{"body":"parametrically polymorphic data types","tag":"#text"},{"body":"\"\n    include templates for\n    higher-order transformations between data types. Moreover, data types for\n    most\n    functions\n    in ML are never explicitly declared by the programmer.  Instead, ML\n    includes a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"type-inferencing","tag":"#text"}]},{"body":" mechanism that uses information in the environment\n    to deduce the data types for newly defined\n    functions.\n\tToday, statically typed programming languages have evolved to\n\ttypically support some form of type inference as well as\n\tparametric polymorphism, with varying degrees of\n\tpower.\n\t\n\tHaskell couples an expressive type system with powerful\n\ttype inference.\n      ","tag":"#text"}]}]