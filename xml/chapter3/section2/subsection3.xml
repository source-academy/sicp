<SUBSECTION> 
  <NAME>
    Frames as the Repository of Local State
  </NAME>

  <LABEL NAME="sec:env-local-state"/>
  <INDEX>frame (environment model)<SUBINDEX>as repository of local state<OPEN/></SUBINDEX></INDEX>
  <INDEX>local state<SUBINDEX>maintained in frames<OPEN/></SUBINDEX></INDEX>
  <INDEX>environment model of evaluation<SUBINDEX>local state<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    We can turn to the environment model to see how
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and assignment can be used to represent objects with local state.  As an
    example, consider the
    <INDEX><USE>make_withdraw</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>
    <QUOTE>withdrawal processor</QUOTE> from
    section<SPACE/><REF NAME="sec:local-state-variables"/> created by calling the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <NAME>make_withdraw2</NAME>
      <SCHEME>
(define (make-withdraw balance)
  (lambda (amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))
      </SCHEME>
      <JAVASCRIPT>
function make_withdraw(balance) {
    return amount => {
               if (balance &gt;= amount) {
                   balance = balance - amount;
                   return balance;
               } else {
                   return "insufficient funds";
               }
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    Let us describe the evaluation of
    <SNIPPET EVAL="yes">
      <REQUIRES>make_withdraw2</REQUIRES>
      <NAME>make_withdraw2_w1_declare</NAME>
      <SCHEME>
(define W1 (make-withdraw 100))
      </SCHEME>
      <JAVASCRIPT>
const W1 = make_withdraw(100);
      </JAVASCRIPT>
    </SNIPPET>
    followed by
    <SNIPPET EVAL="yes">
      <NAME>make_withdraw2_w1_example</NAME>
      <REQUIRES>make_withdraw2_w1_declare</REQUIRES>
      <EXPECTED>50</EXPECTED>
      <SCHEME>
(W1 50)
      </SCHEME>
      <SCHEMEOUTPUT>
            50
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(50);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
50
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:make-withdraw_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:make-withdraw"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the result of
    <SPLITINLINE>
      <SCHEME>defining the
      <SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>declaring the
      <JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment.  This produces a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object that contains a pointer to the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment. So far, this is no different from the examples we have already
    seen, except that
    <SPLITINLINE>
      <SCHEME>
	the body of the
	procedure is itself a
	<SCHEMEINLINE>lambda</SCHEMEINLINE>
	expression.
      </SCHEME>
      <JAVASCRIPT>
	the return expression in the body of the function is itself
	a lambda expression.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-7.svg"></FIGURE>
          <CAPTION>
	    Result of defining <SCHEMEINLINE>make-withdraw</SCHEMEINLINE> in the
	    global environment.
	  </CAPTION>
          <LABEL NAME="fig:make-withdraw_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-7.svg"></FIGURE>
          <CAPTION>
	    Result of defining
	    <JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE> in
	    the program environment.
	  </CAPTION>
          <LABEL NAME="fig:make-withdraw"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    The interesting part of the computation happens when we apply the 
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to an argument:
    <SNIPPET EVAL="no">
      <SCHEME>
(define W1 (make-withdraw 100))
      </SCHEME>
      <JAVASCRIPT>
const W1 = make_withdraw(100);
      </JAVASCRIPT>
    </SNIPPET> 
    We begin, as usual, by setting up an environment E1 in which the
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE> parameter
    <SCHEMEINLINE>balance</SCHEMEINLINE> is bound to the argument 100.  Within
    this environment, we evaluate the body of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    namely the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE> expression. This</SCHEME>
      <JAVASCRIPT>return statement whose return expression is
      a lambda expression. The evaluation of this lambda expression</JAVASCRIPT>
    </SPLITINLINE>
    constructs a new
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object, whose code is as specified by the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda expression</JAVASCRIPT>
    </SPLITINLINE>
    and whose environment is E1, the environment in which the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda expression</JAVASCRIPT>
    </SPLITINLINE>
    was evaluated to produce the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    The resulting
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object is the value returned by the call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    This is bound to <SCHEMEINLINE>W1</SCHEMEINLINE> in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment, since the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>constant declaration</JAVASCRIPT>
    </SPLITINLINE>
    itself is being evaluated in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment.
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:w1_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:w1"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the resulting environment structure.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-8.svg"></FIGURE>
          <CAPTION>
	    Result of evaluating
	    <SCHEMEINLINE>(define W1 (make-withdraw 100))</SCHEMEINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:w1_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-8.svg"></FIGURE>
          <CAPTION>
	    Result of evaluating
	    <JAVASCRIPTINLINE>const W1 = make_withdraw(100);</JAVASCRIPTINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:w1"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    Now we can analyze what happens when <SCHEMEINLINE>W1</SCHEMEINLINE>
    is applied to an argument:
    <SNIPPET EVAL="no">
      <SCHEME>
(W1 50)
      </SCHEME>
      <SCHEMEOUTPUT>
            50
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(50);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
50
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    We begin by constructing a frame in which
    <SCHEMEINLINE>amount</SCHEMEINLINE>, the
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE> parameter of
    <SCHEMEINLINE>W1</SCHEMEINLINE>, is bound to the argument 50.  The crucial
    point to observe is that this frame has as its enclosing environment not the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment, but rather the environment E1, because this is the
    environment that is specified by the <SCHEMEINLINE>W1</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object. Within this new environment, we evaluate the body of the
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <SCHEME>
(if (&gt;= balance amount)
    (begin (set! balance (- balance amount))
           balance)
    "Insufficient funds")
      </SCHEME>
      <JAVASCRIPT>
if (balance &gt;= amount) {
    balance = balance - amount;
    return balance;
} else {
    return "insufficient funds";
}
      </JAVASCRIPT>
    </SNIPPET>
    The resulting environment structure is shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:apply-w1_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:apply-w1"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The expression being evaluated references
    both <SCHEMEINLINE>amount</SCHEMEINLINE> and
    <SCHEMEINLINE>balance</SCHEMEINLINE>.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Amount</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The variable <JAVASCRIPTINLINE>amount</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will be found in the first frame in the environment, and
    <SCHEMEINLINE>balance</SCHEMEINLINE> will be found by following the
    enclosing-environment pointer to E1.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-9.svg"></FIGURE>
          <CAPTION>
	    Environments created by applying the procedure object
	    <SCHEMEINLINE>W1</SCHEMEINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:apply-w1_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-9.svg"></FIGURE>
          <CAPTION>
	    Environments created by applying the function object
	    <JAVASCRIPTINLINE>W1</JAVASCRIPTINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:apply-w1"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    When the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>assignment</JAVASCRIPT>
    </SPLITINLINE>
    is executed, the binding of <SCHEMEINLINE>balance</SCHEMEINLINE> in E1 is
    changed.  At the completion of the call to
    <SCHEMEINLINE>W1</SCHEMEINLINE>, <SCHEMEINLINE>balance</SCHEMEINLINE> is 50,
    and the frame that contains <SCHEMEINLINE>balance</SCHEMEINLINE> is still
    pointed to by the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object <SCHEMEINLINE>W1</SCHEMEINLINE>.  The frame that binds
    <SCHEMEINLINE>amount</SCHEMEINLINE> (in which we executed the code that
    changed <SCHEMEINLINE>balance</SCHEMEINLINE>) is no longer relevant, since
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call that constructed it has terminated, and there are no pointers to that
    frame from other parts of the environment.  The next time
    <SCHEMEINLINE>W1</SCHEMEINLINE> is called, this will build a new frame that
    binds <SCHEMEINLINE>amount</SCHEMEINLINE> and whose enclosing environment is
    E1. We see that E1 serves as the <QUOTE>place</QUOTE> that holds the local
    state variable for the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object <SCHEMEINLINE>W1</SCHEMEINLINE>.
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:after-w1_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:after-w1"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the situation after the call to <SCHEMEINLINE>W1</SCHEMEINLINE>.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-10.svg"></FIGURE>
          <CAPTION>
	    Environments after the call to <SCHEMEINLINE>W1</SCHEMEINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:after-w1_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-10.svg"></FIGURE>
          <CAPTION>
	    Environments after the call to
	    <JAVASCRIPTINLINE>W1</JAVASCRIPTINLINE>.
	  </CAPTION>
          <LABEL NAME="fig:after-w1"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <PDF_ONLY>\pagebreak</PDF_ONLY>
  <LONG_PAGE lines="2"/>
  <TEXT>
    Observe what happens when we create a second <QUOTE>withdraw</QUOTE> object
    by making another call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make_withdraw</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_withdraw2</REQUIRES>
      <NAME>make_withdraw2_w2_declare</NAME>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define W2 (make-withdraw 100))
      </SCHEME>
      <JAVASCRIPT>
const W2 = make_withdraw(100);	
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const W1 = make_withdraw(100);
W1(50);
const W2 = make_withdraw(100);
W2(80);	
      </JAVASCRIPT_RUN>
    </SNIPPET>
    This produces the environment structure of
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:w2_scheme"/>,
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:w2"/>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which shows
    that <SCHEMEINLINE>W2</SCHEMEINLINE> is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object, that is, a pair with some code and an environment.  The environment
    E2 for <SCHEMEINLINE>W2</SCHEMEINLINE> was created by the call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    It contains a frame with its own local binding for
    <SCHEMEINLINE>balance</SCHEMEINLINE>.  On the other hand,
    <SCHEMEINLINE>W1</SCHEMEINLINE> and <SCHEMEINLINE>W2</SCHEMEINLINE> have the
    same code: the code specified by the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    expression in the body of
    <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>Whether
    <SCHEMEINLINE>W1</SCHEMEINLINE> and <SCHEMEINLINE>W2</SCHEMEINLINE> share
    the same physical code stored in the computer, or whether they each keep a
    copy of the code, is a detail of the implementation.  For the interpreter we
    implement in chapter<SPACE/><REF NAME="chap:meta"></REF>, the code is in fact shared.</FOOTNOTE> We see
    here why <SCHEMEINLINE>W1</SCHEMEINLINE> and <SCHEMEINLINE>W2</SCHEMEINLINE>
    behave as independent objects.  Calls to
    <SCHEMEINLINE>W1</SCHEMEINLINE> reference the state variable
    <SCHEMEINLINE>balance</SCHEMEINLINE> stored in E1, whereas calls to 
    <SCHEMEINLINE>W2</SCHEMEINLINE> reference the
    <SCHEMEINLINE>balance</SCHEMEINLINE> stored in E2. Thus, changes to the
    local state of one object do not affect the other object.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-11.svg"></FIGURE>
          <CAPTION>
	    Using <SCHEMEINLINE>(define W2 (make-withdraw 100))</SCHEMEINLINE> to
	    create a second object.
	  </CAPTION>
          <LABEL NAME="fig:w2_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-11.svg"></FIGURE>
          <CAPTION>
	    Using
	    <JAVASCRIPTINLINE>const W2 = make_withdraw(100);</JAVASCRIPTINLINE>
	    to create a second object.
	  </CAPTION>
          <LABEL NAME="fig:w2"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <LONG_PAGE lines="2"/>

  <EXERCISE>
    In the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    the local variable <SCHEMEINLINE>balance</SCHEMEINLINE> is created as a
    parameter of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    We could also create the local state variable
    <SPLITINLINE>
      <SCHEME>
	explicitly,
      </SCHEME>
      <JAVASCRIPT>
	separately,
      </JAVASCRIPT>
    </SPLITINLINE>
    using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>let</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>
	what we might call an
	<INDEX>lambda expression<SUBINDEX>immediately invoked</SUBINDEX></INDEX>
	<INDEX>immediately invoked lambda expression</INDEX>
	<EM>immediately invoked lambda
	expression</EM>
      </JAVASCRIPT>
    </SPLITINLINE>
    as follows:
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_withdraw</DECLARATION><SUBINDEX>using immediately invoked lambda expression</SUBINDEX><FRAGILE/></INDEX>
      <NAME>make_withdraw3</NAME>
      <EXAMPLE>make_withdraw3_example</EXAMPLE>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
        (lambda (amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))))
      </SCHEME>
      <JAVASCRIPT>
function make_withdraw(initial_amount) {
    return (balance => 
              amount => {
                  if (balance &gt;= amount) {
                      balance = balance - amount;
                      return balance;
                   } else {
                      return "insufficient funds";
                   }
              })(initial_amount);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_withdraw3_example</NAME>
      <JAVASCRIPT>
const W1 = make_withdraw(100);
W1(80);
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        Recall from section<SPACE/><REF NAME="sec:lambda"/> that 
	<INDEX>let<SUBINDEX><ORDER>syntactic</ORDER>as syntactic sugar</SUBINDEX></INDEX>
	<INDEX>let<SUBINDEX>evaluation model</SUBINDEX></INDEX>
        <SCHEMEINLINE>let</SCHEMEINLINE> is simply syntactic sugar for a
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        call:
        <SNIPPET EVAL="no">
          <SCHEME>
(let ((var exp)) body)
          </SCHEME>
        </SNIPPET>
        is interpreted as an alternate syntax for
        <SNIPPET EVAL="no">
          <SCHEME>
((lambda (var) body) exp)
          </SCHEME>
        </SNIPPET>
      </SCHEME>
      <JAVASCRIPT>
	The outer lambda expression is invoked immediately after it
	is evaluated. Its only purpose is to create a local variable
	<JAVASCRIPTINLINE>balance</JAVASCRIPTINLINE> and
	initialize it to <JAVASCRIPTINLINE>initial_amount</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLIT>
    Use the environment model to analyze this alternate version of
    <SCHEMEINLINE>make_withdraw</SCHEMEINLINE>, drawing figures like the ones
    above to illustrate the interactions
    <SNIPPET EVAL="yes">
      <NAME>make_withdraw3_example_2</NAME>
      <REQUIRES>make_withdraw3</REQUIRES>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define W1 (make-withdraw 100))

(W1 50)

(define W2 (make-withdraw 100))
      </SCHEME>
      <JAVASCRIPT>
const W1 = make_withdraw(100);

W1(50);
	
const W2 = make_withdraw(100);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const W1 = make_withdraw(100);
W1(50);
const W2 = make_withdraw(100);
W2(80);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    Show that the two versions of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    create objects with the same behavior.  How do the environment structures
    differ for the two versions?
    <SOLUTION>
      <UL>
	<LI>Black shows the environment structure of function in exercise 3.10</LI>
	<LI>Green shows differences in environment structure of original
	(where <JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE> is replaced with the figure 3.9 version)</LI>
      </UL>
      <FIGURE src="img_javascript/ex3-10-solution.png">
        <LABEL NAME="ex:3-10"/>
      </FIGURE>
    </SOLUTION>
    <LABEL NAME="ex:local-state-variable"/>
  </EXERCISE>

  <INDEX>frame (environment model)<SUBINDEX>as repository of local state<CLOSE/></SUBINDEX></INDEX>
  <INDEX>local state<SUBINDEX>maintained in frames<CLOSE/></SUBINDEX></INDEX>
  <INDEX>environment model of evaluation<SUBINDEX>local state<CLOSE/></SUBINDEX></INDEX>
  <INDEX><USE>make_withdraw</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
