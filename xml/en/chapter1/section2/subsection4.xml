<SUBSECTION>
  <NAME>Exponentiation</NAME>

  <LABEL NAME="sec:exponentiation"/>
  <INDEX>exponentiation<OPEN/></INDEX>

  <TEXT>
    Consider the problem of computing the exponential of a given number.
    We would like a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments a base <LATEXINLINE>$b$</LATEXINLINE> and a positive
    integer exponent <LATEXINLINE>$n$</LATEXINLINE> and
    computes<SPACE/><LATEXINLINE>$b^n$</LATEXINLINE>.  One way to do this is via
    the recursive definition
    <LATEX>
      \[
      \begin{array}{lll}
      b^{n} &amp;=&amp; b\cdot b^{n-1}\\
      b^{0} &amp;=&amp; 1
      \end{array}
      \]
    </LATEX>
    which translates readily into the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE> 
    <SNIPPET PAGE="44">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>linear recursive version</SUBINDEX></INDEX>
      <NAME>expt_definition</NAME>
      <EXAMPLE>expt_example</EXAMPLE>
      <SCHEME>
(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return n === 0
           ? 1
           : b * expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>expt_example</NAME>
      <REQUIRES>expt_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    This is a linear recursive process, which requires
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE> steps and
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE> space.  Just as with factorial, we
    can readily formulate an equivalent linear iteration:
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>linear iterative version</SUBINDEX></INDEX>
      <NAME>expt_linear_definition</NAME>
      <EXAMPLE>expt_example2</EXAMPLE>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                (- counter 1)
                (* b product)))) 
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return expt_iter(b, n, 1);
}
function expt_iter(b, counter, product) {
    return counter === 0
           ? product
           : expt_iter(b, counter - 1, b * product);
} 
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>expt_example2</NAME>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>

    This version requires <LATEXINLINE>$\Theta(n)$</LATEXINLINE> steps and
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE> space.
  </TEXT>

  <TEXT>
    We can compute exponentials in fewer steps by using
    <INDEX>successive squaring</INDEX>
    successive squaring.
    For instance, rather than computing <LATEXINLINE>$b^8$</LATEXINLINE> as
    <LATEX>
      \[
      \begin{array}{l}
      b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot b))))))
      \end{array}
      \]
    </LATEX>
    we can compute it using three multiplications:
    <LATEX>
      \[
      \begin{array}{lll}
      b^{2} &amp;= &amp; b\cdot b\\
      b^{4} &amp;= &amp; b^{2}\cdot b^{2}\\
      b^{8} &amp;= &amp; b^{4}\cdot b^{4}
      \end{array}
      \]
    </LATEX>
  </TEXT>

  <TEXT>
    This method works fine for exponents that are powers of 2.  We can also take
    advantage of successive squaring in computing exponentials in general if we
    use the rule
    <LATEX>
      \[
      \begin{array}{llll}
      b^{n} &amp;=&amp; (b^{n/2})^{2}  &amp;\qquad\,\mbox{if}\ n\ \mbox{is even}\\
      b^{n} &amp;=&amp; b\cdot b^{n-1} &amp;\qquad\mbox{if}\ n\ \mbox{is odd}
      \end{array}
      \]
    </LATEX>
    We can express this method as a
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>fast_expt</DECLARATION></INDEX>
      <NAME>expt_log_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>even_definition</REQUIRES>
      <EXAMPLE>fast_expt_example</EXAMPLE>
      <SCHEME>
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) 
         (square (fast-expt b (/ n 2))))
        (else 
         (* b (fast-expt b (- n 1))))))

      </SCHEME>
      <JAVASCRIPT>
function fast_expt(b, n) {
    return n === 0
           ? 1
           : is_even(n)
           ? square(fast_expt(b, n / 2))
           : b * fast_expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>fast_expt_example</NAME>
      <REQUIRES>expt_log_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(fast-expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
fast_expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    where the predicate to test whether an integer is even is defined in terms
    of the 
    <SPLITINLINE>
      <SCHEME>
	primitive procedure
	<INDEX>remainder<SUBINDEX><ORDER>integer</ORDER>after integer division</SUBINDEX></INDEX>
	<INDEX>{\tt "%} (remainder operator)<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR/><SUBINDEX>{\tt "%} (remainder)<ORDER>"%</ORDER></SUBINDEX></INDEX>  
	<SCHEMEINLINE>remainder</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>remainder<SUBINDEX><ORDER>integer</ORDER>after integer division</SUBINDEX></INDEX>
	<INDEX>{\tt "%} (remainder operator)<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR/><SUBINDEX>{\tt "%} (remainder)<ORDER>///</ORDER></SUBINDEX></INDEX>
	operator<SPACE/><JAVASCRIPTINLINE>%</JAVASCRIPTINLINE>,
	which computes the remainder after integer division,
      </JAVASCRIPT>
    </SPLITINLINE>
    by
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>is_even</DECLARATION></INDEX>
      <NAME>even_definition</NAME>
      <EXAMPLE>even_example</EXAMPLE>
      <SCHEME>
(define (even? n)
  (= (remainder n 2) 0))
      </SCHEME>
      <JAVASCRIPT>
function is_even(n) {
    return n % 2 === 0;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>even_example</NAME>
      <REQUIRES>even_definition</REQUIRES>
      <SCHEME>
(even 7)
      </SCHEME>
      <JAVASCRIPT>
is_even(7);
      </JAVASCRIPT>
    </SNIPPET>
    The process evolved by 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>order of growth<SUBINDEX>logarithmic</SUBINDEX></INDEX>
    <INDEX>logarithmic growth</INDEX>
    grows logarithmically with <LATEXINLINE>$n$</LATEXINLINE> in both space and
    number of steps.  To see this, observe that computing
    <LATEXINLINE>$b^{2n}$</LATEXINLINE> using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    requires only one more multiplication than computing
    <LATEXINLINE>$b^n$</LATEXINLINE>.  The size of the exponent we can compute
    therefore doubles (approximately) with every new multiplication we are
    allowed.  Thus, the number of multiplications required for an exponent of
    <LATEXINLINE>$n$</LATEXINLINE> grows about as fast as the logarithm of
    <LATEXINLINE>$n$</LATEXINLINE> to the base 2.  The process has
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> growth.<FOOTNOTE>More precisely,
    the number of multiplications required is equal to 1 less than the log
    base 2 of <LATEXINLINE>$n$</LATEXINLINE>, plus the number of ones in the
    binary representation of <LATEXINLINE>$n$</LATEXINLINE>.  This total is
    always less than twice the log base 2 of <LATEXINLINE>$n$</LATEXINLINE>.
    The arbitrary constants <LATEXINLINE>$k_1$</LATEXINLINE> and
    <LATEXINLINE>$k_2$</LATEXINLINE> in the definition of order notation imply
    that, for a logarithmic process, the base to which logarithms are taken does
    not matter, so all such processes are described as
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    The difference between <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> growth
    and <LATEXINLINE>$\Theta(n)$</LATEXINLINE> growth becomes striking as
    <LATEXINLINE>$n$</LATEXINLINE> becomes large.  For example, 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    for <LATEXINLINE>$n=1000$</LATEXINLINE> requires only 14
    multiplications.<FOOTNOTE>You may wonder why anyone would care about raising
    numbers to the 1000th power. See
    section<SPACE/><REF NAME="sec:primality"/>.</FOOTNOTE> 
    It is also possible to use the idea of successive squaring to devise an
    iterative algorithm that computes exponentials with a logarithmic number of
    steps (see exercise<SPACE/><REF NAME="ex:iter-expon-pro"/>), although, as is
    often the case with iterative algorithms, this is not written down so
    straightforwardly as the recursive algorithm.<FOOTNOTE>This iterative
    algorithm is ancient.  It appears in the
    <INDEX>Chandah-sutra</INDEX>
    <EM>Chandah-sutra</EM> by
    <INDEX>Pingala, <AACUTE_UPPER/>ch<AACUTE_LOWER/>rya</INDEX>
    <AACUTE_UPPER/>ch<AACUTE_LOWER/>rya, written before 200 BCE.
    See
    <INDEX>Knuth, Donald E.</INDEX>
    <CITATION>Knuth 1997b</CITATION>, section 4.6.3, for a full discussion
    and analysis of this and other methods of exponentiation.</FOOTNOTE>
    <INDEX>exponentiation<CLOSE/></INDEX>
  </TEXT>

  <EXERCISE>
    Design a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that evolves an iterative exponentiation process that uses successive
    squaring and uses a logarithmic number of steps, as does   
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    (Hint: Using the observation that
    <LATEXINLINE>$(b^{n/2})^2 =(b^2)^{n/2}$</LATEXINLINE>, keep, along with the
    exponent <LATEXINLINE>$n$</LATEXINLINE> and the base
    <LATEXINLINE>$b$</LATEXINLINE>, an additional state variable
    <LATEXINLINE>$a$</LATEXINLINE>, and define the state transformation in such
    a way that the product <LATEXINLINE>$a b^n$</LATEXINLINE> is unchanged from
    state to state.  At the beginning of the process
    <LATEXINLINE>$a$</LATEXINLINE> is taken to be 1, and the answer is given by
    the value of <LATEXINLINE>$a$</LATEXINLINE> at the end of the process.  In
    general, the technique of defining an
    <INDEX>invariant quantity of an iterative process</INDEX>
    <EM>invariant quantity</EM> that remains unchanged from state to state is a
    powerful way to think about the
    design of
    <INDEX>iterative process<SUBINDEX>design of algorithm</SUBINDEX></INDEX>
    iterative algorithms.)
    <LABEL NAME="ex:iter-expon-pro"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>fast_expt_iter</NAME>
	<EXAMPLE>example_1.17</EXAMPLE>
	<EXPECTED>8</EXPECTED>
	<REQUIRES>even_definition</REQUIRES>
	<JAVASCRIPT>
function fast_expt_iter(a, b, n){
    return n === 0
           ? a
           : is_even(n)
           ? fast_expt_iter(a, b * b, n / 2)
           : fast_expt_iter(a * b, b, n - 1);
}
function fast_expt(b, n){
    return fast_expt_iter(1, b, n);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.17</NAME>
      <REQUIRES>fast_expt_iter</REQUIRES>
      <JAVASCRIPT>
fast_expt(2, 3);
    </JAVASCRIPT>
    </SNIPPET>
    </EXERCISE>

    <EXERCISE>
      <LABEL NAME="ex:add-expon"/> 
      The exponentiation algorithms in this section are based on performing
      exponentiation by means of repeated multiplication.  In a similar way,
      one can perform integer multiplication by means of repeated addition.
      The following multiplication
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      (in which it is assumed that our language can only add, not multiply) is
      analogous to the <SCHEMEINLINE>expt</SCHEMEINLINE>
      <SPLITINLINE>
	<SCHEME>procedure:</SCHEME>
	<JAVASCRIPT>function:</JAVASCRIPT>
      </SPLITINLINE>
      <SNIPPET PAGE="46">
        <NAME>times_definition</NAME>
        <EXAMPLE>times_example</EXAMPLE>
        <SCHEME>
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
        </SCHEME>
        <JAVASCRIPT>
function times(a, b) {
    return b === 0
           ? 0
           : a + times(a, b - 1);
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="46" HIDE="yes">
        <NAME>times_example</NAME>
	<EXPECTED>12</EXPECTED>
        <REQUIRES>times_definition</REQUIRES>
        <SCHEME>
(* 3 4)
        </SCHEME>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
      </SNIPPET>
      This algorithm takes a number of steps that is linear in
      <SCHEMEINLINE>b</SCHEMEINLINE>. Now suppose we include, together with
      addition,
      <SPLITINLINE>
	<SCHEME>operations</SCHEME>
	<JAVASCRIPT>the functions</JAVASCRIPT>
      </SPLITINLINE>
      <SCHEMEINLINE>double</SCHEMEINLINE>, which doubles an
      integer, and <SCHEMEINLINE>halve</SCHEMEINLINE>, which divides an (even)
      integer by 2.  Using these, design a multiplication
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      analogous to 
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      that uses a logarithmic number of steps.
      <SOLUTION>          
	<SNIPPET>
	  <NAME>example_1.18_definition</NAME>
	  <EXAMPLE>example_1.18</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function double(x) {
    return x + x;
}

function halve(x) {
    return x / 2;
}

function fast_times(a, b) { 
    return b === 1
           ? a
           : a === 0 || b === 0
           ? 0
           : is_even(b)
           ? double(fast_times(a, halve(b)))
           : a + fast_times(a, b - 1);
}
	  </JAVASCRIPT>
	  <SCHEME>
	  </SCHEME>
	</SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>example_1.18</NAME>
	<REQUIRES>example_1.18_definition</REQUIRES>
	<EXPECTED>12</EXPECTED>
	<JAVASCRIPT>
fast_times(3, 4);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </EXERCISE>

    <EXERCISE> 
      Using the results of exercises<SPACE/><REF NAME="ex:iter-expon-pro"/>
      and<SPACE/><REF NAME="ex:add-expon"/>, devise a
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      that generates an iterative process for multiplying two integers in terms
      of adding, doubling, and halving and uses a logarithmic number of
      steps.<FOOTNOTE>This
      algorithm, which is sometimes known as the
      <INDEX>Russian peasant method of multiplication</INDEX>
      <INDEX>multiplication by Russian peasant method</INDEX>
      <QUOTE>Russian peasant
      method</QUOTE> of multiplication, is ancient.  Examples of its use are
      found in the
      <INDEX>Rhind Papyrus</INDEX>
      Rhind Papyrus, one of the two oldest mathematical documents in existence,
      written about 1700 BCE (and copied from an even
      older document) by an Egyptian scribe named
      <INDEX><ORDER>Ahmose</ORDER>A<APOS/>h-mose</INDEX>
      A<APOS/>h-mose.</FOOTNOTE>
      <LABEL NAME="ex:it-pro-mult-int"/>
      <SOLUTION>                
        <SNIPPET>
	  <NAME>fast_times_iter</NAME>
          <EXAMPLE>example_1.19</EXAMPLE>
          <REQUIRES>even_definition</REQUIRES>
          <JAVASCRIPT>
function double(x) {
    return x + x;
}

function half(x) {
    return x / 2;
}

function fast_times_iter(total, a, b) {
    return b === 1
           ? total + a
           : a === 0 || b===0
           ? 0
           : is_even(b)
           ? fast_times_iter(total, double(a), half(b))
           : fast_times_iter(total + a, a, b - 1);
}

function times(a, b) {
  return fast_times_iter(0, a, b);
}
          </JAVASCRIPT>
          <SCHEME>
          </SCHEME>
        </SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
        <NAME>example_1.19</NAME>
	<REQUIRES>fast_times_iter</REQUIRES>
	<EXPECTED>12</EXPECTED>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </EXERCISE>

    <SHORT_PAGE lines="1"/>
    <EXERCISE>
      There is a clever algorithm for computing the Fibonacci numbers in a
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>logarithmic version</SUBINDEX></INDEX>
      logarithmic number of steps. Recall the transformation of the state
      variables <LATEXINLINE>$a$</LATEXINLINE> and
      <LATEXINLINE>$b$</LATEXINLINE> in the
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>fib-iter</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fib_iter</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      process of section<SPACE/><REF NAME="sec:tree-recursion"/>:
      <LATEXINLINE>$a\leftarrow a+b$</LATEXINLINE> and
      <LATEXINLINE>$b\leftarrow a$</LATEXINLINE>.  Call this transformation
      <LATEXINLINE>$T$</LATEXINLINE>, and observe that applying
      <LATEXINLINE>$T$</LATEXINLINE> over
      and over again <LATEXINLINE>$n$</LATEXINLINE> times, starting with 1 and 0,
      produces the pair <LATEXINLINE>$\textrm{Fib}(n+1)$</LATEXINLINE> and
      <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>.  In other words, the
      Fibonacci numbers are produced by applying
      <LATEXINLINE>$T^n$</LATEXINLINE>, the <LATEXINLINE>$n$</LATEXINLINE>th
      power of the transformation <LATEXINLINE>$T$</LATEXINLINE>, starting with
      the pair <LATEXINLINE>$(1,0)$</LATEXINLINE>.  Now consider
      <LATEXINLINE>$T$</LATEXINLINE> to be the special case of
      <LATEXINLINE>$p=0$</LATEXINLINE> and <LATEXINLINE>$q=1$</LATEXINLINE> in
      a family of transformations <LATEXINLINE>$T_{pq}$</LATEXINLINE>, where
      <LATEXINLINE>$T_{pq}$</LATEXINLINE> transforms the pair
      <LATEXINLINE>$(a,b)$</LATEXINLINE> according to
      <LATEXINLINE>$a\leftarrow bq+aq+ap$</LATEXINLINE> and
      <LATEXINLINE>$b\leftarrow bp+aq$</LATEXINLINE>.  Show that if we apply such
      a transformation <LATEXINLINE>$T_{pq}$</LATEXINLINE> twice, the effect is
      the same as using a single transformation
      <LATEXINLINE>$T_{p'q'}$</LATEXINLINE> of the same form, and compute
      <LATEXINLINE>$p'$</LATEXINLINE> and <LATEXINLINE>$q'$</LATEXINLINE> in
      terms of <LATEXINLINE>$p$</LATEXINLINE>
      and<SPACE/><LATEXINLINE>$q$</LATEXINLINE>.  This gives us an explicit way
      to square these transformations, and thus we can compute
      <LATEXINLINE>$T^n$</LATEXINLINE> using successive squaring, as in the 
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME>procedure.</SCHEME>
	<JAVASCRIPT>function.</JAVASCRIPT>
      </SPLITINLINE>
      Put this all together to complete the following
      <SPLITINLINE>
	<SCHEME>procedure,</SCHEME>
	<JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
      which runs in a logarithmic number of steps:<FOOTNOTE>This exercise was
      suggested
      <SPLITINLINE>
	<SCHEME>
	  to us
	</SCHEME>
      </SPLITINLINE>
      by
      <INDEX>Stoy, Joseph E.</INDEX>
      Joe Stoy, based on an example in 
      <INDEX>Kaldewaij, Anne</INDEX>
      <CITATION>Kaldewaij 1990</CITATION>.</FOOTNOTE>

      <SNIPPET PAGE="47" EVAL="no" LATEX="yes" POSTPADDING="no">
        <NAME>fib_log_definition</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>fib_example</EXAMPLE>
        <SCHEME>
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   ??      ; compute p'
                   ??      ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
        </SCHEME>
        <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}
function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      <METAPHRASE>??</METAPHRASE>,           // compute p'
                      <METAPHRASE>??</METAPHRASE>,           // compute q'
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SOLUTION>        
	<SNIPPET>
	  <NAME>fib_log_solution</NAME>
	  <EXAMPLE>example_1.20</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}

function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      p * p + q * q,
                      2 * p * q + q * q,
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	  </JAVASCRIPT>
	  <SCHEME>
	  </SCHEME>
	</SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>example_1.20</NAME>
	<REQUIRES>fib_log_solution</REQUIRES>
	<EXPECTED>5</EXPECTED>	
	<JAVASCRIPT>
fib(5);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <LABEL NAME="ex:1_19"/>
    </EXERCISE>
</SUBSECTION>
