[{"id":"/sicpjs/3.3","tag":"TITLE","body":"3.3  Modeling with Mutable Data"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Chapter ","tag":"#text"},{"tag":"REF","body":"2","href":"/sicpjs/2"},{"body":" dealt with compound data as a means for constructing\n    computational objects that have several parts, in order to model\n    real-world objects that have several aspects.  In that chapter we\n    introduced the discipline of data abstraction, according to which data\n    structures are specified in terms of constructors, which create data\n    objects, and selectors, which access the parts of compound data\n    objects.  But we now know that there is another aspect of data that\n    chapter ","tag":"#text"},{"tag":"REF","body":"2","href":"/sicpjs/2"},{"body":" did not address.  The desire to model systems composed of\n    objects that have changing state leads us to the need to modify\n    compound data objects, as well as to construct and select from them.\n    In order to model compound objects with changing state, we will design\n    data abstractions to include, in addition to selectors and\n    constructors, operations called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"mutators","tag":"#text"}]},{"body":", which modify data\n    objects.  For instance, modeling a banking system requires us to\n    change account balances.  Thus, a data structure for representing bank\n    accounts might admit an operation\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nset_balance($account$, $new$-$value$)\n      "},{"body":"\n    that changes the balance of the designated account to the designated\n    new value.  Data objects for which mutators are defined are known as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"mutable data objects","tag":"#text"}]},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Chapter ","tag":"#text"},{"tag":"REF","body":"2","href":"/sicpjs/2"},{"body":" introduced pairs as a general-purpose \"","tag":"#text"},{"body":"glue","tag":"#text"},{"body":"\"\n    for synthesizing compound data.  We begin this section by defining basic\n    mutators for pairs, so that pairs can serve as building blocks for\n    constructing mutable data objects.  These mutators greatly enhance the\n    representational power of pairs, enabling us to build data structures\n    other than the sequences and trees that we worked with in\n    section ","tag":"#text"},{"tag":"REF","body":"2.2","href":"/sicpjs/2.2"},{"body":".  We also present some\n    examples of simulations in which complex systems are modeled as collections\n    of objects with local state.\n  ","tag":"#text"}]}]