<SUBSECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Procedures</SCHEME>
      <JAVASCRIPT>Functions</JAVASCRIPT>
    </SPLITINLINE>
    as Arguments
  </NAME>

  <LABEL NAME="sec:procedures-as-parameters"/>
  <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> as argument<OPEN/></SUBINDEX></INDEX>
  <INDEX><FUNCTION/><SUBINDEX><ORDER>argument</ORDER>as argument<OPEN/></SUBINDEX></INDEX>
  <TEXT>
    Consider the following three
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    The first computes the sum of the integers from
    <SCHEMEINLINE>a</SCHEMEINLINE> through <SCHEMEINLINE>b</SCHEMEINLINE>:
    <SNIPPET PAGE="57">
      <INDEX><DECLARATION>sum_integers</DECLARATION></INDEX>
      <NAME>sum_integers_definition</NAME>
      <EXAMPLE>sum_integers_example</EXAMPLE>
      <EXPECTED>55</EXPECTED>
      <SCHEME>
(define (sum-integers a b)
  (if (&gt; a b)
      0
      (+ a (sum-integers (+ a 1) b))))
      </SCHEME>
      <JAVASCRIPT>
function sum_integers(a, b) {
    return a &gt; b
           ? 0
           : a + sum_integers(a + 1, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="59" HIDE="yes">
      <NAME>sum_integers_example</NAME>
      <SCHEME>
(sum-integers 1 10)
      </SCHEME>
      <SCHEMEOUTPUT>
                55
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sum_integers(1, 10);
      </JAVASCRIPT>
    </SNIPPET>
    The second computes the sum of the cubes of the integers in the given range:
    <SNIPPET PAGE="57">
      <INDEX><DECLARATION>sum_cubes</DECLARATION></INDEX>
      <NAME>sum_cubes_definition</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <EXAMPLE>sum_cubes_example</EXAMPLE>
      <EXPECTED>775</EXPECTED>
      <SCHEME>
(define (sum-cubes a b)
  (if (&gt; a b)
      0
      (+ (cube a) (sum-cubes (+ a 1) b))))
      </SCHEME>
      <JAVASCRIPT>
function sum_cubes(a, b) {
    return a &gt; b
           ? 0
           : cube(a) + sum_cubes(a + 1, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="57" HIDE="yes">
      <NAME>sum_cubes_example</NAME>
      <SCHEME>
(sum-cubes 3 7)
      </SCHEME>
      <JAVASCRIPT>
sum_cubes(3, 7);
      </JAVASCRIPT>
    </SNIPPET>
    The third computes the sum of a sequence of terms in the series
    <LATEX>
      \[ \frac{1}{1\cdot3}+\frac{1}{5\cdot7}+\frac{1}{9\cdot11}+\cdots \]
    </LATEX>
    which converges to <LATEXINLINE>$\pi/8$</LATEXINLINE> (very
    slowly):<FOOTNOTE>This series,
    <INDEX><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<ORDER>pi</ORDER><SUBINDEX>Leibniz<APOS/>s series for</SUBINDEX></INDEX>
    <INDEX>Leibniz, Baron Gottfried Wilhelm von<SUBINDEX>series for <LATEXINLINE>$\pi$</LATEXINLINE></SUBINDEX></INDEX>
    usually written in the equivalent form 
    <LATEXINLINE>$\frac {\pi}{4} = 1-\frac{1}
    {3}+\frac{1}{5}-\frac{1}{7}+\cdots$</LATEXINLINE>, 
    is due to Leibniz.  We<APOS/>ll see how to use this as the basis for some
    fancy numerical tricks in
    section<SPACE/><REF NAME="sec:exploiting-streams"/>.</FOOTNOTE>
    <SNIPPET PAGE="57">
      <INDEX><DECLARATION>pi_sum</DECLARATION></INDEX>
      <NAME>pi_sum_definition</NAME>
      <EXAMPLE>pi_sum_example</EXAMPLE>
      <EXPECTED>3.139592655589783</EXPECTED>
      <SCHEME>
(define (pi-sum a b)
  (if (&gt; a b)
      0
      (+ (/ 1.0 (* a (+ a 2))) 
         (pi-sum (+ a 4) b))))
      </SCHEME>
      <JAVASCRIPT>
function pi_sum(a, b) {
    return a &gt; b
           ? 0
           : 1 / (a * (a + 2)) + pi_sum(a + 4, b);
}
      </JAVASCRIPT>
    </SNIPPET>


    <SNIPPET PAGE="59" HIDE="yes">
      <NAME>pi_sum_example</NAME>
      <SCHEME>
(* 8 (pi-sum 1 1000))
      </SCHEME>
      <JAVASCRIPT>
8 * pi_sum(1, 1000);
      </JAVASCRIPT>
    </SNIPPET>
    
  </TEXT>
  <TEXT>
    These three
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    clearly share a common underlying pattern. They are for the most part
    identical, differing only in the name of the
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    the function of <SCHEMEINLINE>a</SCHEMEINLINE> used to compute the term to
    be added, and the function that provides the next value of
    <SCHEMEINLINE>a</SCHEMEINLINE>. We could generate each of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    by filling in slots in the same template:

    <SNIPPET LATEX="yes" EVAL="no">
      <SCHEME>
(define ($\langle name \rangle$ a b)
  (if (> a b)
      0
      (+ ($\langle term \rangle$ a)
         ($\langle name \rangle$ ($\langle next \rangle$ a) b))))
      </SCHEME>
      <JAVASCRIPT>
function <META>name</META>(a, b) {
    return a &gt; b
           ? 0
           : <META>term</META>(a) + <META>name</META>(<META>next</META>(a), b);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The presence of such a common pattern is strong evidence that there is a
    useful
    <INDEX>abstraction<SUBINDEX>common pattern and</SUBINDEX></INDEX>
    abstraction waiting to be brought to the surface.  Indeed,
    mathematicians long ago identified the abstraction of
    <INDEX>series, summation of</INDEX>
    <INDEX>summation of a series</INDEX>
    <INDEX><ORDER>sigma</ORDER>$\Sigma$ (sigma) notation</INDEX>
    <INDEX><ORDER>0s</ORDER>$\Sigma$ (sigma) notation</INDEX>
    <EM>summation of a series</EM> and invented <QUOTE>sigma
    notation,</QUOTE> for example
    <LATEX>
      \[\begin{array}{lll}
      \displaystyle\sum_{n=a}^{b}\ f(n)&amp;=&amp;f(a)+\cdots+f(b)
      \end{array}\]
    </LATEX>
    to express this concept.  The power of sigma notation is that it allows
    mathematicians to deal with the concept of summation itself rather than only
    with particular sums<EMDASH/>for example, to formulate general results about
    sums that are independent of the particular series being summed.
  </TEXT>

  <TEXT>
    Similarly, as program designers, we would like our language to be powerful
    enough so that we can write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that expresses the concept of summation itself rather than only
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that compute particular sums.  We can do so readily in our
    <SPLITINLINE>
      <SCHEME>procedural</SCHEME>
      <JAVASCRIPT>functional</JAVASCRIPT>
    </SPLITINLINE>
    language by taking the common template shown above and transforming the
    <QUOTE>slots</QUOTE> into
    <SPLITINLINE>
      <SCHEME>formal parameters:
      </SCHEME>
      <JAVASCRIPT>parameters:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="58" EVAL="no">
      <INDEX><DECLARATION>sum</DECLARATION></INDEX>
      <NAME>sum_definition</NAME>
      <SCHEME>
(define (sum term a next b)
  (if (&gt; a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
      </SCHEME>
      <JAVASCRIPT>
function sum(term, a, next, b) {
    return a &gt; b
           ? 0
           : term(a) + sum(term, next(a), next, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    Notice that <SCHEMEINLINE>sum</SCHEMEINLINE> takes as its arguments the
    lower and upper bounds <SCHEMEINLINE>a</SCHEMEINLINE> and
    <SCHEMEINLINE>b</SCHEMEINLINE> together with the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>term</SCHEMEINLINE> and <SCHEMEINLINE>next</SCHEMEINLINE>.
    We can use <SCHEMEINLINE>sum</SCHEMEINLINE> just as we would any
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    For example, we can use it (along with a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>inc</SCHEMEINLINE> that increments its argument by 1) to define
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-cubes</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>sum_cubes</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="58" HIDE="yes">
      <NAME>inc_definition</NAME>
      <SCHEME>
(define (inc n) (+ n 1))
      </SCHEME>
      <JAVASCRIPT>
function inc(n) {
    return n + 1;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="59">
      <INDEX><DECLARATION>inc</DECLARATION></INDEX>
      <INDEX><DECLARATION>sum_cubes</DECLARATION><SUBINDEX>with higher-order functions<ORDER>higher</ORDER></SUBINDEX></INDEX>
      <NAME>sum_example</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>sum_definition</REQUIRES>
      <EXAMPLE>sum_example_example</EXAMPLE>
      <EXPECTED>3025</EXPECTED>
      <SCHEME>
(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))
      </SCHEME>
      <JAVASCRIPT>
function inc(n) {
    return n + 1;
}
function sum_cubes(a, b) {
    return sum(cube, a, inc, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    Using this, we can compute the sum of the cubes of the integers from 1 to 10:
    <SNIPPET PAGE="59">
      <NAME>sum_example_example</NAME>
      <REQUIRES>sum_example</REQUIRES>
      <SCHEME>
(sum-cubes 1 10)
      </SCHEME>
      <SCHEMEOUTPUT>
3025	    
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sum_cubes(1, 10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
3025
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    With the aid of an identity
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to compute the term, we can define
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-integers</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sum_@integers</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in terms of <SCHEMEINLINE>sum</SCHEMEINLINE>:
    <SNIPPET PAGE="59">
      <INDEX><DECLARATION>identity</DECLARATION></INDEX>
      <NAME>identity</NAME>
      <EXAMPLE>identity_example</EXAMPLE>
      <SCHEME>
(define (identity x) x)
      </SCHEME>
      <JAVASCRIPT>
function identity(x) {
    return x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="59" HIDE="yes">
      <NAME>identity_example</NAME>
      <SCHEME>
(identity 42)
      </SCHEME>
      <JAVASCRIPT>
identity(42);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="59">
      <INDEX><DECLARATION>sum_integers</DECLARATION><SUBINDEX>with higher-order functions<ORDER>higher</ORDER></SUBINDEX></INDEX>
      <NAME>sum_integers_definition2</NAME>
      <REQUIRES>sum_definition</REQUIRES>
      <REQUIRES>inc_definition</REQUIRES>
      <REQUIRES>identity</REQUIRES>
      <EXAMPLE>sum_integers_example2</EXAMPLE>
      <EXPECTED>55</EXPECTED>
      <SCHEME>
(define (sum-integers a b)
  (sum identity a inc b))
      </SCHEME>
      <JAVASCRIPT>
function sum_integers(a, b) {
    return sum(identity, a, inc, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    Then we can add up the integers from 1 to 10:
    <SNIPPET PAGE="59">
      <NAME>sum_integers_example2</NAME>
      <REQUIRES>sum_integers_definition2</REQUIRES>
      <SCHEME>
(sum-integers 1 10)
      </SCHEME>
      <SCHEMEOUTPUT>
55
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sum_integers(1, 10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
55
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    We can also 
    <SPLITINLINE>
      <SCHEME>define <SCHEMEINLINE>pi-sum</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>define <JAVASCRIPTINLINE>pi_sum</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in the same way:<FOOTNOTE>Notice that we have used block structure
    (section<SPACE/><REF NAME="sec:black-box"/>) to embed the 
    <SPLITINLINE>
      <SCHEME>definitions of <SCHEMEINLINE>pi-next</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>declarations of <JAVASCRIPTINLINE>pi_next</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>pi-term</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>pi_term</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    within
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>pi-sum</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pi_sum</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    since these
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are unlikely to be useful for any other purpose.  We will see how to get rid
    of them altogether in section<SPACE/><REF NAME="sec:lambda"/>.</FOOTNOTE>
    <SNIPPET PAGE="59">
      <INDEX><DECLARATION>pi_sum</DECLARATION><SUBINDEX>with higher-order functions<ORDER>higher</ORDER></SUBINDEX></INDEX>
      <NAME>pi_sum_definition2</NAME>
      <REQUIRES>sum_definition</REQUIRES>
      <EXAMPLE>pi_sum_example2</EXAMPLE>
      <EXPECTED>3.139592655589783</EXPECTED>
      <SCHEME>
(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))
      </SCHEME>
      <JAVASCRIPT>
function pi_sum(a, b) {
    function pi_term(x) {
        return 1 / (x * (x + 2));
    }
    function pi_next(x) {
        return x + 4;
    }
    return sum(pi_term, a, pi_next, b);
}
      </JAVASCRIPT>
    </SNIPPET>
    Using these
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    we can compute an approximation to <LATEXINLINE>$\pi$</LATEXINLINE>:
    <SNIPPET PAGE="59">
      <NAME>pi_sum_example2</NAME>
      <REQUIRES>pi_sum_definition2</REQUIRES>
      <SCHEME>
(* 8 (pi-sum 1 1000))
      </SCHEME>
      <SCHEMEOUTPUT>
3.139592655589783	    
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
8 * pi_sum(1, 1000);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
3.139592655589783	    
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Once we have <SCHEMEINLINE>sum</SCHEMEINLINE>, we can use it as a building
    block in formulating further concepts.  For instance, the 
    <INDEX>definite integral<OPEN/></INDEX>
    definite integral of a function <LATEXINLINE>$f$</LATEXINLINE> between the
    limits <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> can
    be approximated numerically using the formula
    <LATEX>
      \[
      \begin{array}{lll}
      \displaystyle\int_{a}^{b}f &amp; = &amp;
      \left[\,f\!\left( a+\dfrac{dx}{2} \right)\,+\,f\!\left(a+dx+\dfrac{dx}{2}
      \right)\,+\,f\!\left( a+2dx+\dfrac{dx}{2}\right)\,+\,\cdots
      \right] dx
      \end{array}
      \]
    </LATEX>
    for small values of <LATEXINLINE>$dx$</LATEXINLINE>. We can express this
    directly as a
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="60">
      <INDEX><DECLARATION>integral</DECLARATION></INDEX>
      <NAME>integral_definition</NAME>
      <REQUIRES>sum_definition</REQUIRES>
      <EXAMPLE>integral_example</EXAMPLE>
      <EXPECTED>0.24998750000000042</EXPECTED>
      <SCHEME>
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2)) add-dx b)
     dx))
      </SCHEME>
      <JAVASCRIPT>
function integral(f, a, b, dx) {
    function add_dx(x) {
        return x + dx;
    }
    return sum(f, a + dx / 2, add_dx, b) * dx;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="60">
      <NAME>integral_example</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>integral_definition</REQUIRES>
      <SCHEME>
(integral cube 0 1 0.01)
      </SCHEME>
      <SCHEMEOUTPUT>
0.24998750000000042
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
integral(cube, 0, 1, 0.01);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
0.24998750000000042
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    <SNIPPET PAGE="60">
      <NAME>integral_example2</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>integral_definition</REQUIRES>
      <!-- no EXPECTED here due to stack overflow -->
      <SCHEME>
(integral cube 0 1 0.001)
      </SCHEME>
      <JAVASCRIPT>
integral(cube, 0, 1, 0.001);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
// dare to try 0.001 with in browser?
integral(cube, 0, 1, 0.002);
      </JAVASCRIPT_RUN>
      <JAVASCRIPT_OUTPUT>
0.249999875000001	  
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    (The exact value of the integral of <SCHEMEINLINE>cube</SCHEMEINLINE> between
    0 and 1 is 1/4.)
  </TEXT>

  <DO_BREAK_PAGE/>
  <EXERCISE>
    Simpson<APOS/>s Rule is a more accurate method of numerical integration than
<LABEL NAME="ex:simpsons-rule"/> 
<INDEX>Simpson<APOS/>s Rule for numerical integration</INDEX>
    the method illustrated above.  Using Simpson<APOS/>s Rule, the integral of a
    function <LATEXINLINE>$f$</LATEXINLINE> between
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> is
    approximated as
    <LATEX>
      \[
      \frac{h}{3}[ y_0 +4y_1 +2y_2 +4y_3 +2y_4 +\cdots+2y_{n-2}
      +4y_{n-1}+y_n ]
      \]
    </LATEX>
    where <LATEXINLINE>$h=(b-a)/n$</LATEXINLINE>, for some even integer
    <LATEXINLINE>$n$</LATEXINLINE>, and
    <LATEXINLINE>$y_k =f(a+kh)$</LATEXINLINE>. (Increasing
    <LATEXINLINE>$n$</LATEXINLINE> increases the accuracy of the approximation.)
    <SPLITINLINE>
      <SCHEME>Define a procedure</SCHEME>
      <JAVASCRIPT>Declare a function</JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments <LATEXINLINE>$f$</LATEXINLINE>,
    <LATEXINLINE>$a$</LATEXINLINE>, <LATEXINLINE>$b$</LATEXINLINE>, and
    <LATEXINLINE>$n$</LATEXINLINE> and returns the value of the integral,
    computed using Simpson<APOS/>s Rule. Use your
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to integrate <SCHEMEINLINE>cube</SCHEMEINLINE> between 0 and 1 (with
    <LATEXINLINE>$n=100$</LATEXINLINE> and <LATEXINLINE>$n=1000$</LATEXINLINE>),
    and compare the results to those of the <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    shown above.
    <SOLUTION>       
      <SNIPPET>
	<NAME>simpsons_definition</NAME>
	<REQUIRES>cube_definition</REQUIRES>
	<REQUIRES>sum_definition</REQUIRES>
	<EXAMPLE>example_1.31</EXAMPLE>
	<EXPECTED>0.24999999999999992</EXPECTED>
	<JAVASCRIPT>
function inc(k) {
    return k + 1;
}
function simpsons_rule_integral(f, a, b, n) {
    function helper(h) {
        function y(k) { 
            return f((k * h) + a);
        }
	function term(k) {
            return k === 0 || k === n
                   ? y(k)
                   : k % 2 === 0
                     ? 2 * y(k)
                     : 4 * y(k);
        }
        return sum(term, 0, inc, n) * (h / 3);
    }
    return helper((b - a) / n);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.31</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>simpsons_definition</REQUIRES>
      <JAVASCRIPT>
simpsons_rule_integral(cube, 0, 1, 100);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
    <LABEL NAME="ex:1_29"/>
  </EXERCISE>
  <INDEX>definite integral<CLOSE/></INDEX>

  <LONG_PAGE lines="2"/>
  <EXERCISE> 
    The
    <INDEX><USE>sum</USE><SUBINDEX>iterative version</SUBINDEX></INDEX>
    <SCHEMEINLINE>sum</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    above generates a linear recursion.  The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can be rewritten so that the sum is performed iteratively. Show how to do
    this by filling in the missing expressions in the following
    <SPLITINLINE>
      <SCHEME>definition:</SCHEME>
      <JAVASCRIPT>declaration:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes" POSTPADDING="no">
      <SCHEME>
(define (sum term a next b)
  (define (iter a result)
    (if ??
        ??
        (iter ?? ??)))
  (iter ?? ??))
      </SCHEME>
      <JAVASCRIPT>
function sum(term, a, next, b) {
    function iter(a, result) {
        return <METAPHRASE>??</METAPHRASE>
               ? <METAPHRASE>??</METAPHRASE>
               : iter(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>);
    }
    return iter(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>     
      <SNIPPET>
	<NAME>sum_example_iter</NAME>
	<REQUIRES>cube_definition</REQUIRES>
	<EXAMPLE>sum_example_iter_example</EXAMPLE>
	<EXPECTED>3025</EXPECTED>
	<JAVASCRIPT>
function sum(term, a, next, b) {
    function iter(a, result) {
        return a &gt; b
               ? result
               : iter(next(a), result + term(a));
    }
    return iter(a, 0);
}
	</JAVASCRIPT>
      </SNIPPET>

      <SNIPPET PAGE="59" HIDE="yes">
        <NAME>sum_example_iter_example</NAME>
        <SCHEME>
(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))
(sum-cubes 1 10)
        </SCHEME>
        <JAVASCRIPT>
function inc(n) {
    return n + 1;
}
function sum_cubes(a, b) {
    return sum(cube, a, inc, b);
}
sum_cubes(1, 10);
        </JAVASCRIPT>
      </SNIPPET>
      
    </SOLUTION>
    <LABEL NAME="ex:1_30"/>
  </EXERCISE>

  <EXERCISE> 
    <OL>
      <LI>
	The
	<SCHEMEINLINE>sum</SCHEMEINLINE>
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	is only the simplest of a vast number of similar abstractions that can
	be captured as higher-order
	<SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>The intent of exercises<SPACE/><REF NAME="ex:product"/><ENDASH/><REF NAME="ex:filtered-accumulate"/> is to demonstrate the expressive
	power that is attained by using an appropriate abstraction to
	consolidate many seemingly disparate operations.  However, though
	accumulation and filtering are elegant ideas, our hands are somewhat
	tied in using them at this point since we do not yet have data
	structures to provide suitable means of combination for these
	abstractions.  We will return to these ideas in
	section<SPACE/><REF NAME="sec:sequences-conventional-interfaces"/> when
	we show how to use <EM>sequences</EM> as interfaces for combining
	filters and accumulators to build even more powerful abstractions.  We
	will see there how these methods really come into their own as a
	powerful and elegant approach to designing programs.</FOOTNOTE>  
	Write an analogous
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	called
	<INDEX><USE>product</USE></INDEX>
	<SCHEMEINLINE>product</SCHEMEINLINE> that returns the product of
	the values of a function at points over a given range. Show how to
	define 
	<INDEX><USE>factorial</USE><SUBINDEX>with higher-order functions</SUBINDEX></INDEX>
	<SCHEMEINLINE>factorial</SCHEMEINLINE> in terms of
	<SCHEMEINLINE>product</SCHEMEINLINE>.  Also use
	<SCHEMEINLINE>product</SCHEMEINLINE> to compute approximations to
	<INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>Wallis<APOS/>s formula for</SUBINDEX></INDEX>
	<LATEXINLINE>$\pi$</LATEXINLINE> using the formula<FOOTNOTE>This formula
	was discovered by the seventeenth-century
	English mathematician
	<INDEX>Wallis, John</INDEX>
	John Wallis.</FOOTNOTE>
	<LATEX>
          \[
	  \begin{array}{lll}
	  \dfrac{\pi}{4} &amp; = &amp; \dfrac{2 \cdot 4\cdot 4\cdot 6\cdot 6\cdot 8\cdots}{3\cdot
          3\cdot 5\cdot 5\cdot 7\cdot 7\cdots}
	  \end{array}
	  \]
	</LATEX>
      </LI>
      <LI>
        If your <SCHEMEINLINE>product</SCHEMEINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        generates a recursive process, write one that generates an iterative
	process. If it generates an iterative process, write one that generates
        a recursive process.
      </LI>
    </OL>
    <LABEL NAME="ex:product"/>
    <SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>factorial_product</NAME>
	<JAVASCRIPT>
function factorial(n) {
    function term(i) {
        return i;
    }
    function next(i) {
        return i + 1;
    }
    return product_r(term, 1, next, n);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>pi_product</NAME>
	<JAVASCRIPT>
//pi product
function pi(n) {
    function is_odd(i) {
        return i % 2 === 1;
    }
    function term(i) {
        return is_odd(i)
               ? (i + 1) / (i + 2)
               : (i + 2) / (i + 1);
    }
    function next(i) {
        return i + 1;
    }
    return 4 * (product_i(term, 1.0, next, n));
}
	</JAVASCRIPT>
      </SNIPPET>
      
      <SNIPPET>
	<NAME>product_r</NAME>
	<REQUIRES>factorial_product</REQUIRES>
	<REQUIRES>pi_product</REQUIRES>
	<EXAMPLE>factorial_product_example</EXAMPLE>
	<EXPECTED>120</EXPECTED>
	<JAVASCRIPT>
//recursive process
function product_r(term, a, next, b) {
    return a &gt; b
           ? 1
           : term(a) * product_r(term, next(a), next, b);
}

//iterative process
function product_i(term, a, next, b) {
    function iter(a, result) {
        return a &gt; b
               ? result
               : iter(next(a), term(a) * result);
    }
    return iter(a, 1);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>factorial_product_example</NAME>
      <REQUIRES>factorial_product</REQUIRES>
      <REQUIRES>pi_product</REQUIRES>
      <JAVASCRIPT>
factorial(5);
// pi(17);	
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>

  </EXERCISE>

  <EXERCISE>
    <OL>
      <LI>
        Show that <SCHEMEINLINE>sum</SCHEMEINLINE> and
	<SCHEMEINLINE>product</SCHEMEINLINE>
	<INDEX><USE>sum</USE><SUBINDEX>as accumulation<ORDER>accumulation</ORDER></SUBINDEX></INDEX>
	<INDEX><USE>product</USE><SUBINDEX>as accumulation<ORDER>accumulation</ORDER></SUBINDEX></INDEX>
        (exercise<SPACE/><REF NAME="ex:product"/>) are both special cases of a
	still more general notion called
	<INDEX><USE>accumulate</USE></INDEX>
	<SCHEMEINLINE>accumulate</SCHEMEINLINE>
	that combines a collection of terms, using some general accumulation
	function:
        <SNIPPET EVAL="no">
          <SCHEME>
	    (accumulate combiner null-value term a next b)
          </SCHEME>
          <JAVASCRIPT>
	    accumulate(combiner, null_value, term, a, next, b);
          </JAVASCRIPT>
        </SNIPPET>
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>Accumulate</SCHEMEINLINE></SCHEME>
          <JAVASCRIPT>
	    The function <JAVASCRIPTINLINE>accumulate</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        takes as arguments the same term and range specifications as
	<SCHEMEINLINE>sum</SCHEMEINLINE> and
	<SCHEMEINLINE>product</SCHEMEINLINE>, together with a
	<SCHEMEINLINE>combiner</SCHEMEINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        (of two arguments) that specifies how the current term is to be combined
	with the accumulation of the preceding terms and a 
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>null-value</SCHEMEINLINE></SCHEME>
          <JAVASCRIPT><JAVASCRIPTINLINE>null_value</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        that specifies what base value to use when the terms run out.  Write
	<SCHEMEINLINE>accumulate</SCHEMEINLINE> and show how
	<SCHEMEINLINE>sum</SCHEMEINLINE> and <SCHEMEINLINE>product</SCHEMEINLINE>
	can both be
	<SPLITINLINE>
	  <SCHEME>defined</SCHEME>
	  <JAVASCRIPT>declared</JAVASCRIPT>
	</SPLITINLINE>
	as simple calls to <SCHEMEINLINE>accumulate</SCHEMEINLINE>.
      </LI>
      <LI>
        If your <SCHEMEINLINE>accumulate</SCHEMEINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        generates a recursive process, write one that generates an iterative
	process. If it generates an iterative process, write one that generates
        a recursive process.
      </LI>
    </OL>
    <LABEL NAME="ex:accumulate"/>
    <SOLUTION>        
      <SNIPPET>
	<REQUIRES>factorial_product</REQUIRES>
	<REQUIRES>pi_product</REQUIRES>
	<EXAMPLE>example_accumulate_numbers</EXAMPLE>
	<EXPECTED>120</EXPECTED>
	<JAVASCRIPT>
//recursive process
function accumulate_r(combiner, null_value, term, a, next, b) {
    return a &gt; b
           ? null_value
           : combiner(term(a), 
                      accumulate_r(combiner, 
                                   null_value, 
                                   term, next(a), next, b));
}
function sum_r(term, a, next, b) {
    function plus(x, y) {
        return x + y;
    }
    return accumulate_r(plus, 0, term, a, next, b);
}
function product_r(term, a, next, b) {
    function times(x, y) {
        return x * y;
    }
    return accumulate_r(times, 1, term, a, next, b);
}

//iterative process
function accumulate_i(combiner, null_value, term, a, next, b) {
    function iter(a, result) {
        return a &gt; b
               ? result
               : iter(next(a), combiner(term(a), result));
    }
    return iter(a, null_value);
}
function sum_i(term, a, next, b) {
    function plus(x, y) {
        return x + y;
    }
    return accumulate_i(plus, 0, term, a, next, b);
}
function product_i(term, a, next, b) {
    function times(x, y) {
        return x * y;
    }
    return accumulate_i(times, 1, term, a, next, b);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_accumulate_numbers</NAME>
	<REQUIRES>factorial_product</REQUIRES>
	<JAVASCRIPT>
factorial(5);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE> 
    You can
    obtain an even more general version of
    <INDEX><USE>filtered_accumulate</USE></INDEX>
    <SCHEMEINLINE>accumulate</SCHEMEINLINE>
    (exercise<SPACE/><REF NAME="ex:accumulate"/>)
    by introducing the notion of a
    <INDEX>filter</INDEX>
    <EM>filter</EM> on the terms to be combined.  That is, combine only those
    terms derived from values in the range that satisfy a specified condition.
    The resulting 
    <INDEX><USE>filtered_accumulate</USE></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>filtered-accumulate</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>filtered_@accumulate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    abstraction takes the same arguments as accumulate, together with an
    additional predicate of one argument that specifies the filter. Write
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>filtered-accumulate</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>filtered_@accumulate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as a
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Show how to express the following using
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>filtered-accumulate</SCHEMEINLINE>:
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>filtered_@accumulate</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <OL>
      <LI>
        the sum of the squares of the prime numbers in the interval 
        <LATEXINLINE>$a$</LATEXINLINE> to <LATEXINLINE>$b$</LATEXINLINE> 
        (assuming that you have an 
        <SPLITINLINE>
	  <SCHEME>
	  <SCHEMEINLINE>prime?</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE> 
        predicate already written)
      </LI>
      <LI>
        the product of all the positive integers less than
	<LATEXINLINE>$n$</LATEXINLINE>
        that are
        <INDEX>relatively prime</INDEX>
	relatively prime to<SPACE/><LATEXINLINE>$n$</LATEXINLINE> (i.e.,
	all positive integers <LATEXINLINE>$i &lt; n$</LATEXINLINE> such that 
        <LATEXINLINE>$\textrm{GCD}(i,n)=1$</LATEXINLINE>).
      </LI>
    </OL>
    <LABEL NAME="ex:filtered-accumulate"/>

    <SOLUTION>
      <SNIPPET>
	<REQUIRES>smallest_divisor_definition</REQUIRES>
	<REQUIRES>prime_definition</REQUIRES>
	<REQUIRES>square_definition</REQUIRES>
	<REQUIRES>inc_definition</REQUIRES>
	<REQUIRES>gcd_definition</REQUIRES>
	<EXAMPLE>example_filtered_accumulate</EXAMPLE>
	<EXPECTED>74</EXPECTED>
	<JAVASCRIPT>
function filtered_accumulate(combiner, null_value,
                             term, a, next, b, filter) {
    return a &gt; b
           ? null_value
           : filter(a)
             ? combiner(term(a), 
                   filtered_accumulate(combiner, null_value, 
                                       term, next(a), next, 
                                       b, filter))
             : filtered_accumulate(combiner, null_value, 
                                   term, next(a), next, 
                                   b, filter);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_filtered_accumulate</NAME>
	<REQUIRES>prime_definition</REQUIRES>
	<REQUIRES>square_definition</REQUIRES>
	<REQUIRES>inc_definition</REQUIRES>
	<REQUIRES>gcd_definition</REQUIRES>
	<JAVASCRIPT>
function prime_squares_sum(a, b) {
    function plus(x, y) {
        return x + y;
    }
    return filtered_accumulate(plus, 0,
                               square, a, inc, b, 
                               is_prime);
}
function relative_prime_product(n) {    
    function times(x, y) {
        return x * y;
    }
    function identity(x) {
        return x;
    }
    function test(i) {
        return gcd(i, n) === 1;
    }
    return filtered_accumulate(times, 1,
                               identity, 1, inc, n,
                               test);
}

prime_squares_sum(4, 10); // 74
// relative_prime_product(8); // 105
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> as argument<CLOSE/></SUBINDEX></INDEX>
  <INDEX><FUNCTION/><SUBINDEX><ORDER>argument</ORDER>as argument<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
