<SUBSECTION>
  <NAME>
    Data-Directed Programming and Additivity
  </NAME>

  <LABEL NAME="sec:data-directed"/>
  <INDEX>data-directed programming|(</INDEX>
  <INDEX>additivity|(</INDEX>

  <TEXT>
    <INDEX>modularity<SUBINDEX>through dispatching on type</SUBINDEX></INDEX>
    The general strategy of checking the type of a datum and calling an
    appropriate
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is called
    <INDEX>dispatching<SUBINDEX>on type</SUBINDEX></INDEX>
    <INDEX>type(s)<SUBINDEX>dispatching on</SUBINDEX></INDEX>
    <EM>dispatching on type</EM>.  This is a powerful strategy for obtaining
    modularity in system design.  On the other hand, implementing the dispatch
    as in section<SPACE/><REF NAME="sec:manifest-types"/> has two significant
    weaknesses.  One weakness is that the generic interface
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>real-part</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>imag-part</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>imag_part</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>magnitude</SCHEMEINLINE>, and
    <SCHEMEINLINE>angle</SCHEMEINLINE>) must know about all the different
    representations.  For instance, suppose we wanted to incorporate a new
    representation for complex numbers into our complex-number system.  We
    would need to identify this new representation with a type, and then add a
    clause to each of the generic interface
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to check for the new type and apply the appropriate selector for that
    representation.
  </TEXT>
  <TEXT>
    Another weakness of the technique is that even though the individual
    representations can be designed separately, we must guarantee that no two
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in the entire system have the same name.  This is why Ben and Alyssa had
    to change the names of their original
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:representations-complex-numbers"/>.
  </TEXT>
  <TEXT>
    The issue underlying both of these weaknesses is that the technique for
    implementing generic interfaces is not <EM>additive</EM>.  The person
    implementing the generic selector
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    must modify those
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    each time a new representation is installed, and the people
    interfacing the individual representations must modify their
    code to avoid name conflicts.  In each of these cases, the changes
    that must be made to the code are straightforward, but they must be
    made nonetheless, and this is a source of inconvenience and error.
    This is not much of a problem for the complex-number system as it
    stands, but suppose there were not two but hundreds of different
    representations for complex numbers.  And suppose that there were many
    generic selectors to be maintained in the abstract-data interface.
    Suppose, in fact, that no one programmer knew all the interface
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    or all the representations.  The problem is real and must
    be addressed in such programs as large-scale data-base-management
    systems.
  </TEXT>
  <TEXT>
    What we need is a means for modularizing the system design even
    further.  This is provided by the programming technique known as <EM>
    data-directed programming</EM>.  To understand how data-directed
    programming works, begin with the observation that whenever we deal
    with a set of generic operations that are common to a set of
    different types we are, in effect, dealing with a two-dimensional
    table that contains the possible operations on one axis and the
    possible types on the other axis.  The entries in the table are the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that implement each operation for each type of argument presented.
    In the complex-number system developed in the previous section, the
    correspondence between operation name, data type, and  actual
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    was spread out among the various conditional clauses in the generic
    interface
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    But the same information could have been organized in a table, as shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:operator-table_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:operator-table"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    <INDEX>table<SUBINDEX>for data-directed programming</SUBINDEX></INDEX>
    Data-directed programming is the technique of designing programs to work
    with such a table directly.  Previously, we implemented the mechanism that
    interfaces the complex-arithmetic code with the two representation packages
    as a set of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that each perform an explicit dispatch on type.  Here we will implement the
    interface as a single
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that looks up the combination of the operation name and argument type in
    the table to find the correct
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to apply, and then applies it to the contents of the argument.  If we do
    this, then to add a new representation package to the system we need not
    change any existing
    <SPLITINLINE>
      <SCHEME>procedures;</SCHEME>
      <JAVASCRIPT>functions;</JAVASCRIPT>
    </SPLITINLINE>
    we need only add new entries to the table.
  </TEXT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch2-Z-G-63.svg">
          <CAPTION>Table of operations for the complex-number system.</CAPTION>
          <LABEL NAME="fig:operator-table_scheme"/>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE src="img_javascript/ch2-Z-G-63.svg">
          <CAPTION>Table of operations for the complex-number system.</CAPTION>
          <LABEL NAME="fig:operator-table"/>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    To implement this plan, assume that we have two
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>put</SCHEMEINLINE> and <SCHEMEINLINE>get</SCHEMEINLINE>, for
    manipulating the operation-and-type table:
    <INDEX>operation-and-type table</INDEX>
    <UL>
      <!-- \indcode{put} -->
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(put </SCHEMEINLINE>
	    <LATEXINLINE>$\langle \textit{op} \rangle\ \langle \textit{type}
	    \rangle \ \langle \textit{item} \rangle$
	    </LATEXINLINE>
	    <SCHEMEINLINE>)</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>put(</JAVASCRIPTINLINE><LATEXINLINE>$\textit{op}$</LATEXINLINE><JAVASCRIPTINLINE>,</JAVASCRIPTINLINE> <LATEXINLINE>$\textit{type}$</LATEXINLINE><JAVASCRIPTINLINE>,</JAVASCRIPTINLINE> <LATEXINLINE>$\textit{item}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	<BR/>
	installs the
	<SPLITINLINE>
	  <SCHEME>
	    <LATEXINLINE>$\langle \textit{item} \rangle$</LATEXINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <LATEXINLINE>$\textit{item}$</LATEXINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	in the table, indexed by the
	<SPLITINLINE>
	  <SCHEME>
	    <LATEXINLINE>$\langle \textit{op} \rangle$</LATEXINLINE> and the
	    <LATEXINLINE>$\langle \textit{type} \rangle$</LATEXINLINE>.
	  </SCHEME>
	  <JAVASCRIPT>
	    <LATEXINLINE>$\textit{op}$</LATEXINLINE> and the
	    <LATEXINLINE>$\textit{type}$</LATEXINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	<!-- \indcode{get} -->
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(get </SCHEMEINLINE>
	    <LATEXINLINE>$\langle \textit{op} \rangle\ \langle
	    \textit{type}$</LATEXINLINE>
	    <SCHEMEINLINE>)</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>get(</JAVASCRIPTINLINE><LATEXINLINE>$\textit{op}$</LATEXINLINE><JAVASCRIPTINLINE>,</JAVASCRIPTINLINE> <LATEXINLINE>$\textit{type}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	<BR/>
	looks up the
	<SPLITINLINE>
	  <SCHEME>
	    <LATEXINLINE>$\langle \textit{op} \rangle$</LATEXINLINE>,
	    <LATEXINLINE>$\langle \textit{type} \rangle$</LATEXINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <LATEXINLINE>$\textit{op}$</LATEXINLINE>,
	    <LATEXINLINE>$\textit{type}$</LATEXINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	entry in the table and returns the item found there.
	If no item is found,
	<SCHEMEINLINE>get</SCHEMEINLINE> returns
	<SPLITINLINE>
	  <SCHEME>false.</SCHEME>
	  <JAVASCRIPT>
	    a unique primitive value that is referred to by the name
	    <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>.<FOOTNOTE>
	    The name <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>
	    is predeclared in any JavaScript implementation and should
	    not be used other than to refer to that primitive value.
	  </FOOTNOTE>
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
    </UL>
    For now, we can assume that <SCHEMEINLINE>put</SCHEMEINLINE> and
    <SCHEMEINLINE>get</SCHEMEINLINE> are included in our language.  In
    chapter<SPACE/>3 (section<SPACE/><REF NAME="sec:tables"/>) we will see
    how to implement these and other operations for manipulating tables.
  </TEXT>
  <TEXT>
    Here is how data-directed programming can be used in the complex-number
    system.  Ben, who developed the rectangular representation, implements his
    code just as he did originally.  He defines a collection of
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    or a
    <INDEX>package</INDEX>
    <EM>package</EM>, and interfaces these to the rest of the system by adding
    entries to the table that tell the system how to operate on rectangular
    numbers. This is accomplished by calling the following
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>package<SUBINDEX>rectangular representation</SUBINDEX></INDEX>
    <!--\indcodeplus{rectangular}{package}-->
    <SNIPPET HIDE="yes">
      <NAME>operation_table_from_chapter_3</NAME>
      <JAVASCRIPT>
// operation_table, put and get
// from chapter 3 (section 3.3.3)
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="3">
      <NAME>install_rectangular_package</NAME>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
          <!-- \indcode*{install-rectangular-package} -->
(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
      </SCHEME>
      <JAVASCRIPT>
function install_rectangular_package() {
    // internal functions
    function real_part(z) { return head(z); }
    function imag_part(z) { return tail(z); }
    function make_from_real_imag(x, y) { return pair(x, y); }
    function magnitude(z) {
        return math_sqrt(square(real_part(z)) +
                   square(imag_part(z)));
    }
    function angle(z) {
        return math_atan(imag_part(z), real_part(z));
    }
    function make_from_mag_ang(r, a) {
        return pair(r * math_cos(a), r * math_sin(a));
    }

    // interface to the rest of the system
    function tag(x) {
        return attach_tag("rectangular", x);
    }
    put("real_part", list("rectangular"), real_part);
    put("imag_part", list("rectangular"), imag_part);
    put("magnitude", list("rectangular"), magnitude);
    put("angle", list("rectangular"), angle);
    put("make_from_real_imag", "rectangular",
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "rectangular",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}

install_rectangular_package();
      </JAVASCRIPT>
    </SNIPPET>
    Notice that the internal
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    here are the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:representations-complex-numbers"/> that
    Ben wrote when he was working in isolation.  No changes are necessary in
    order to interface them to the rest of the system.  Moreover, since these
    <SPLITINLINE>
      <SCHEME>procedure definitions</SCHEME>
      <JAVASCRIPT>function declarations</JAVASCRIPT>
    </SPLITINLINE>
    are internal to the installation
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    Ben needn<APOS/>t worry about name conflicts with other
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    outside the rectangular package.  To interface these to the rest of the
    system, Ben installs his
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    under the operation name
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and the type
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>(rectangular)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list("rectangular")</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and similarly for the other selectors.<FOOTNOTE>We use the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(rectangular)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list("rectangular")</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    rather than the
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>rectangular</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to allow for the possibility of operations with multiple arguments, not
    all of the same type.</FOOTNOTE>  The interface also defines the
    constructors to be used by the external system.<FOOTNOTE>The type the
    constructors are installed under needn<APOS/>t be a list because a
    constructor is always used to make an object of one particular
    type.</FOOTNOTE> These are identical to Ben<APOS/>s internally defined
    constructors, except that they attach the tag.
    <INDEX>package<SUBINDEX>polar representation</SUBINDEX></INDEX>
    <!--\indcodeplus{polar}{package}-->
  </TEXT>
  <TEXT>
    Alyssa<APOS/>s polar package is analogous:
    <SNIPPET CHAP="4">
      <NAME>install_polar_package</NAME>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>install_polar_package_usage</EXAMPLE>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
          <!-- \indcode*{install-polar-package} -->
(define (install-polar-package)
  ;; internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
      </SCHEME>
      <JAVASCRIPT>
function install_polar_package() {
    // internal functions
    function magnitude(z) { return head(z); }
    function angle(z) { return tail(z); }
    function make_from_mag_ang(r, a) { return pair(r, a); }
    function real_part(z) {
       return magnitude(z) * math_cos(angle(z));
    }
    function imag_part(z) {
       return magnitude(z) * math_sin(angle(z));
    }
    function make_from_real_imag(x, y) {
       return pair(math_sqrt(square(x) + square(y)),
                   math_atan(y, x));
    }

    // interface to the rest of the system
    function tag(x) { return attach_tag("polar", x); }
    put("real_part", list("polar"), real_part);
    put("imag_part", list("polar"), imag_part);
    put("magnitude", list("polar"), magnitude);
    put("angle", list("polar"), angle);
    put("make_from_real_imag", "polar", 
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "polar",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>install_polar_package_usage</NAME>
      <REQUIRES>install_polar_package</REQUIRES>
      <JAVASCRIPT>
install_polar_package();
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Even though Ben and Alyssa both still use their original
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    defined with the same names as each other<APOS/>s (e.g.,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE>),</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE>),</JAVASCRIPT>
    </SPLITINLINE>
    these definitions are now internal to different
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (see section<SPACE/><REF NAME="sec:block-structure"/>), so there is no name
    conflict.
  </TEXT>
  <TEXT>
    The complex-arithmetic selectors access the table by means of a general
    <QUOTE>operation</QUOTE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    called
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which applies a generic operation to some arguments.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    looks in the table under the name of the operation and the types of the
    arguments and applies the resulting
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    if one is present:<FOOTNOTE>
    <SPLIT>
      <SCHEME>
	<SCHEMEINLINE>Apply-generic</SCHEMEINLINE>
	uses the
	<INDEX>dotted-tail notation<SUBINDEX>procedure@for
        procedure parameters</SUBINDEX></INDEX>
        dotted-tail notation described in
        exercise<SPACE/><REF NAME="ex:dotted-arglist"/>,
	because different generic operations may take
	different numbers of arguments.
      </SCHEME>
    </SPLIT>
    In
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>op</SCHEMEINLINE> has as its value the first argument to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SCHEMEINLINE>args</SCHEMEINLINE> has as its value a list of the remaining
    arguments.
    <BR/>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>Apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    also uses the primitive
    <SPLITINLINE>
      <SCHEME>
	procedure
	<SCHEMEINLINE>apply</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	function
	<SCHEMEINLINE>apply</SCHEMEINLINE>
	given in our JavaScript environment,
      </JAVASCRIPT>
    </SPLITINLINE>
    <!--\indprim*{apply}-->
    <!--\ind*{primitive
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[apply@<SCHEMEINLINE>apply</SCHEMEINLINE>]
    -->
    which takes two arguments, a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    and a list.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Apply</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    applies the
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    using the elements in the list as arguments. For example,
    <SNIPPET EVAL="no">
      <SCHEME>
	(apply + (list 1 2 3 4))
      </SCHEME>
      <JAVASCRIPT>
	apply(sum_of_squares, list(1, 3))
      </JAVASCRIPT>
    </SNIPPET>
    returns 10.</FOOTNOTE>
    <SNIPPET HIDE="yes">
      <NAME>apply_definition</NAME>
      <JAVASCRIPT>
// In Source, most functions have a fixed number of arguments.
// (The function list is the only exception, to this so far.)
// The function apply_in_underlying_javascript allows us to
// apply any given function fun to all elements of the argument 
// list args, as if they were separate arguments
function apply(fun, args) {
    return apply_in_underlying_javascript(fun, args);
}	  
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <NAME>apply_generic</NAME>
      <REQUIRES>apply_definition</REQUIRES>
      <SCHEME>
          <!-- \indcode*{apply-generic} -->
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
        (apply proc (map contents args))
        (error
          "No method for these types -- APPLY-GENERIC"
          (list op type-tags))))))
      </SCHEME>
      <JAVASCRIPT>
function apply_generic(op, args) {
    const type_tags = map(type_tag, args);
    const fun = get(op, type_tags);
    return fun !== undefined
        ? apply(fun, map(contents, args))
        : error(list(op, type_tags),
                "No method for these types in apply_generic");
}
      </JAVASCRIPT>
    </SNIPPET>
    Using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    we can define our generic selectors as follows:
    <SNIPPET CHAP="4">
      <NAME>generic_selectors</NAME>
      <REQUIRES>apply_generic</REQUIRES>
      <EXAMPLE>generic_selectors_example</EXAMPLE>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
          <!-- \indcode*{real-part}[data-directed] -->
(define (real-part z) (apply-generic 'real-part z))
          <!-- \indcode*{imag-part}[data-directed] -->
(define (imag-part z) (apply-generic 'imag-part z))
          <!-- \indcode*{magnitude}[data-directed] -->
(define (magnitude z) (apply-generic 'magnitude z))
          <!-- \indcode*{angle}[data-directed] -->
(define (angle z) (apply-generic 'angle z))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) {
   return apply_generic("real_part", list(z));
}
function imag_part(z) {
   return apply_generic("imag_part", list(z));
}
function magnitude(z) {
   return apply_generic("magnitude", list(z));
}
function angle(z) {
   return apply_generic("angle", list(z));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>generic_selectors_example</NAME>
      <REQUIRES>install_rectangular_package</REQUIRES>
      <REQUIRES>install_polar_package</REQUIRES>
      <REQUIRES>complex_number_calculation</REQUIRES>
      <REQUIRES>generic_constructors</REQUIRES>
      <JAVASCRIPT>
const my_complex_number = 
    make_from_real_imag(1.0, 4.5);

const result = 
    add_complex(my_complex_number,
                my_complex_number);

imag_part(result);		
      </JAVASCRIPT>
    </SNIPPET>
    Observe that these do not change at all if a new representation is
    added to the system.
  </TEXT>
  <TEXT>
    We can also extract from the table the constructors to be used by the
    programs external to the packages in making complex numbers from real and
    imaginary parts and from magnitudes and angles. As in
    section<SPACE/><REF NAME="sec:manifest-types"/>, we construct rectangular
    numbers whenever we have real and imaginary parts, and polar numbers
    whenever we have magnitudes and angles:
    <SNIPPET CHAP="4">
      <NAME>generic_constructors</NAME>
      <REQUIRES>generic_selectors</REQUIRES>	
      <EXAMPLE>generic_selectors_example</EXAMPLE>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
          <!-- \indcode*{make-from-real-imag} -->
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))

          <!-- \indcode*{make-from-mag-ang} -->
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))
      </SCHEME>
      <JAVASCRIPT>
function make_from_real_imag(x, y) {
   return get("make_from_real_imag", "rectangular")(x, y);
}
function make_from_mag_ang(r, a) {
   return get("make_from_mag_ang", "polar")(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    Section<SPACE/><REF NAME="sec:symbolic-differentiation"/> described a
    program that performs symbolic differentiation:
    <INDEX>symbolic differentiation</INDEX>
    <INDEX>differentiation<SUBINDEX>symbolic</SUBINDEX></INDEX>
    <SNIPPET>
      <NAME>deriv_2_4</NAME>
      <REQUIRES>is_variable</REQUIRES>
      <REQUIRES>is_same_variable</REQUIRES>
      <REQUIRES>is_sum</REQUIRES>
      <REQUIRES>make_sum</REQUIRES>
      <REQUIRES>make_product</REQUIRES>
      <REQUIRES>addend</REQUIRES>
      <REQUIRES>augend</REQUIRES>
      <REQUIRES>is_product</REQUIRES>
      <REQUIRES>multiplier</REQUIRES>
      <REQUIRES>multiplicand</REQUIRES>
      <EXAMPLE>xyx4</EXAMPLE>
      <EXPECTED>[ '*', [ 'x', [ 'y', null ] ] ]</EXPECTED>
      <SCHEME>
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var)))
        ((product? exp)
          (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var)
                          (multiplicand exp))))
        ;; more rules can be added here
        (else (error "unknown expression type -- DERIV" exp))))
      </SCHEME>
      <JAVASCRIPT>
function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable)) ? 1 : 0
             : is_sum(exp)
               ? make_sum(deriv(addend(exp), variable), 
                          deriv(augend(exp), variable))
               : is_product(exp)
                 ? make_sum(make_product(multiplier(exp), 
                                deriv(multiplicand(exp), 
                                      variable)),
                            make_product(deriv(multiplier(exp), 
                                               variable), 
                                multiplicand(exp)))
                 // more rules can be added here
                 : error(exp,
                         "unknown expression type -- deriv");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>xyx4</NAME>
      <REQUIRES>deriv_2_4</REQUIRES>
      <SCHEME>
(deriv '(* (* x y) (+ x 4)) 'x)
      </SCHEME>
      <SCHEMEOUTPUT>
(+ (* (* x y) (+ 1 0))
(* (+ (* x 0) (* 1 y))
(+  x 4)))
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
deriv(list("*", list("*", "x", "y"), list("+", "x", 4)), "x");
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
head(tail(head(tail(deriv(list("*", list("*", "x", "y"), list("+", "x", 4)), "x")))));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list("+", list("*", list("*", x, y), list("+", 1, 0)),
          list("*", list("+", list("*", x, 0), list("*", 1, y)),
                    list("+",  x, 4)))
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    We can regard this program as performing a dispatch on the type of the
    expression to be differentiated.  In this situation the
    <QUOTE>type tag</QUOTE> of the datum is the algebraic operator symbol
    (such as <LATEXINLINE>+</LATEXINLINE>) and the operation being performed is
    <SCHEMEINLINE>deriv</SCHEMEINLINE>.  We can transform this program into
    data-directed style by rewriting the basic derivative
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    as
    <SNIPPET EVAL="no">
      <NAME>deriv_generic</NAME>
      <REQUIRES>is_variable</REQUIRES>
      <REQUIRES>is_same_variable</REQUIRES>
      <EXAMPLE>deriv_x_example</EXAMPLE>
      <SCHEME>
            <!--\indcodeplus*{deriv}{(symbolic)}[data-directed]-->
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp)
                                           var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))
      </SCHEME>
      <JAVASCRIPT>
function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable) ? 1 : 0)
             : get("deriv", 
                   operator(exp))(operands(exp), variable);
}
function operator(exp) {
   return head(exp);
}
function operands(exp) {
   return tail(exp);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>deriv_x_example</NAME>
      <SCHEME>
(deriv '(+ x 3) 'x)
      </SCHEME>
      <SCHEMEOUTPUT>
(+ 1 0)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
deriv("x", "x");
// 1
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Explain what was done above. Why can<APOS/>t we assimilate the
	predicates
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
	and
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>variable?</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>is_variable</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	into the data-directed dispatch?
      </LI>
      <LI>
	Write the
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	for derivatives of sums and products, and the auxiliary code required
	to install them in the table used by the program above.
      </LI>
      <LI>
	Choose any additional differentiation rule that you like, such as the
	one for exponents
	(exercise<SPACE/><REF NAME="ex:deriv-exponentiation"/>), and install it
	in this data-directed system.
      </LI>
      <LI>
	In this simple algebraic manipulator the type of an expression is the
	algebraic operator that binds it together.  Suppose, however, we
	indexed the
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	in the opposite way, so that the dispatch line
	in <SCHEMEINLINE>deriv</SCHEMEINLINE> looked like
	<SNIPPET EVAL="no">
          <SCHEME>
((get (operator exp) 'deriv) (operands exp) var)
          </SCHEME>
          <JAVASCRIPT>
get(operator(exp), "deriv")(operands(exp), variable);
          </JAVASCRIPT>
	</SNIPPET>
	What corresponding changes to the derivative system are required?
      </LI>
    </OL>
    <LABEL NAME="ex:data-directed-differentiation"/>
    <SOLUTION>
      <OL>
        <LI>
          <EM>Explain what was done above.
          Why can<APOS/>t we assimilate the predicates
	  <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  and
	  <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>same-variable?</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>is_same_variable</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE> into the data-directed dispatch?</EM>
	  <P/>
	  The operator symbols come very handy as <QUOTE>type</QUOTE> keys in
	  the operator table. For numbers and variables, there aren't such
	  obvious keys, although we could introduce names for those types of
	  expressions, as well, if we change the way expressions are
	  represented as lists.
        </LI>
	<LI>
          <EM>Write the
          <SPLITINLINE>
	    <SCHEME>procedures</SCHEME>
	    <JAVASCRIPT>functions</JAVASCRIPT>
	  </SPLITINLINE>
          for derivatives of sums and products, and the auxiliary code required
	  to install them in the table used by the program above.</EM>
	  <P/>
	  <SNIPPET CHAP="4">
	    <NAME>deriv_generic_sum_product</NAME>
	    <REQUIRES>deriv_generic</REQUIRES>
	    <REQUIRES>deriv_generic_data</REQUIRES>
	    <REQUIRES>operation_table_from_chapter_3</REQUIRES>
	    <REQUIRES>operation_table</REQUIRES>
	    <EXAMPLE>deriv_xyx3_generic_example</EXAMPLE>
	    <EXPECTED>[ '*', [ 'x', [ 'y', null ] ] ]</EXPECTED>
	    <SCHEME>
(define (deriv-sum exp var) 
  (make-sum (deriv (addend exp) var)
            (deriv (augend exp) var)))
 
(define (deriv-product exp var) 
  (make-sum (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var)
                          (multiplicand exp))))
 
(define (install-deriv)
  (put 'deriv '+ deriv-sum)
  (put 'deriv '* deriv-product)
  'done)
            </SCHEME>
	    <JAVASCRIPT>
function deriv_sum(operands, variable) {		
    return make_sum(deriv(addend(operands), variable),
                    deriv(augend(operands), variable));
}
function deriv_product(operands, variable) {
    return make_sum(make_product(multiplier(operands),
                        deriv(multiplicand(operands),
                              variable)),
                    make_product(deriv(multiplier(
                                             operands),
                                       variable),
                        multiplicand(operands)));
}
function install_deriv() {
    put("deriv", "+", deriv_sum);
    put("deriv", "*", deriv_product);
    return "done";
}
install_deriv();    
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
	    <NAME>deriv_generic_data</NAME>
	    <JAVASCRIPT>
function make_sum(a1, a2) {
    return list("+", a1, a2);
}
            
function make_product(m1, m2) {
    return list("*", m1, m2);
}
            
function addend(operands) {
    return head(operands);
}
            
function augend(operands) {
    return head(tail(operands));
}
            
function multiplier(operands) {
    return head(operands);
}
            
function multiplicand(operands) {
    return head(tail(operands));
}
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
            <NAME>deriv_xyx3_generic_example</NAME>
            <SCHEME>
(deriv '(* (* x y) (+ x 3)) 'x)
            </SCHEME>
            <SCHEMEOUTPUT>
(+ (* (* x y) (+ 1 0))
(* (+ (* x 0) (* 1 y))
(+  x 3)))
            </SCHEMEOUTPUT>
            <JAVASCRIPT>
deriv(list("*", list("*", "x", "y"), list("+", "x", 3)), "x");
// [ "+",
//   [["*", [["*", ["x", ["y", null]]], 
//           [["+", [1, [0, null]]], null]]],
//    [["*",
//      [["+",
//        [["*", ["x", [0, null]]], 
//         [["*", [1, ["y", null]]], null]]],
//         [["+", ["x", [3, null]]], null] ] ],
//     null ]]]
            </JAVASCRIPT>
            <JAVASCRIPT_TEST>
head(tail(head(tail(deriv(list("*", list("*", "x", "y"), list("+", "x", 3)), "x")))));
	    </JAVASCRIPT_TEST>
	  </SNIPPET>
	</LI>
        <LI>
	  <EM>
            Choose any additional differentiation rule that you like, such as
            the one for exponents
	    (exercise<SPACE/><REF NAME="ex:deriv-exponentiation"/>), and
	    install it in this data-directed system.
	  </EM>
	  <P/>
	  <SNIPPET HIDE="yes">
	    <NAME>deriv_expo_data</NAME>
	    <JAVASCRIPT>
function make_exponentiation(base, exp) {
    return list("**", base, exp);
}
function base(operands) {
    return head(operands);
}
function exponent(operands) {
    return head(tail(operands));
}
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
	    <NAME>example_deriv_expo_generic</NAME>
	    <JAVASCRIPT>
deriv(list("**", "x", 4), "x");
	    </JAVASCRIPT>
	    <JAVASCRIPT_TEST>
head(tail(head(tail(head(tail(tail(deriv(list("**", "x", 4), "x"))))))));
	    </JAVASCRIPT_TEST>
	    <SCHEME>
	    </SCHEME>
	  </SNIPPET>
	  <SNIPPET CHAP="4">
	    <NAME>deriv_expo_put_it_all_together</NAME>
	    <REQUIRES>deriv_generic</REQUIRES>
	    <REQUIRES>deriv_generic_data</REQUIRES>
	    <REQUIRES>deriv_expo_data</REQUIRES>
	    <REQUIRES>operation_table_from_chapter_3</REQUIRES>
	    <REQUIRES>operation_table</REQUIRES>
	    <EXAMPLE>example_deriv_expo_generic</EXAMPLE>
	    <EXPECTED>'x'</EXPECTED>
	    <SCHEME>
(define (deriv-exponentiation expr var)
  (let ((base (base expr))
        (exponent (exponent expr)))
    (make-product exponent
                  (make-product (make-exponentiation base (make-sum exponent -1))
                                (deriv base var)))))
 
(define (install-exponentiation-extension)
  (put 'deriv '** deriv-exponentiation)
  'done)
            </SCHEME>
	    <JAVASCRIPT>
function deriv_exponentiation(operands, variable) {		
    const bas = base(operands);
    const exp = exponent(operands);
    return make_product(exp,
               make_product(make_exponentiation(bas, make_sum(exp, -1)),
	                    deriv(bas, variable)));
}
function install_exponentiation_extension() {
    put("deriv", "**", deriv_exponentiation);
    return "done";
}
install_exponentiation_extension();
	    </JAVASCRIPT>
	  </SNIPPET>

        </LI>
        <LI>
	  <EM>
            In this simple algebraic manipulator the type of an expression is
            the algebraic operator that binds it together.  Suppose, however,
	    we indexed the
            <SPLITINLINE>
	      <SCHEME>procedures</SCHEME>
	      <JAVASCRIPT>functions</JAVASCRIPT>
	    </SPLITINLINE>
            in the opposite way, so that the dispatch line in
	    <SCHEMEINLINE>deriv</SCHEMEINLINE> looked like
            <SNIPPET EVAL="no">
              <SCHEME>
((get (operator exp) 'deriv) (operands exp) var)
              </SCHEME>
              <JAVASCRIPT>
get(operator(exp), "deriv")(operands(exp), variable);
              </JAVASCRIPT>
            </SNIPPET>
            What corresponding changes to the derivative system are required?
	  </EM>
	  <P/>
	  We would need to change the order of arguments in the installation
	  procedure for the differentiation library:
	  <SNIPPET EVAL="no">
	    <SCHEME>
(put '+ 'deriv deriv-sum )
(put '* 'deriv deriv-product)	    
(put '** 'deriv deriv-exponentiation)
            </SCHEME>
	    <JAVASCRIPT>
put("+", "deriv", deriv_sum);
put("*", "deriv", deriv_product);
put("**", "deriv", deriv_exponentiation);
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
      </OL>
    </SOLUTION>
  </EXERCISE>
  <EXERCISE>
    <INDEX>data base<SUBINDEX>data-directed programming and</SUBINDEX></INDEX>
    <INDEX>data base
    <SUBINDEX>Insatiable Enterprises personnel</SUBINDEX></INDEX>
    Insatiable Enterprises, Inc., is a highly decentralized conglomerate company
    consisting of a large number of independent divisions located all over the
    world.  The company<APOS/>s computer facilities have just been
    interconnected by means of a clever network-interfacing scheme that makes
    the entire network appear to any user to be a single computer.
    Insatiable<APOS/>s president,  in her first attempt to exploit the ability
    of the network to extract administrative information from division files,
    is dismayed to discover that, although all the division files have been
    implemented as data structures in
    <SPLITINLINE>
      <SCHEME>
	Scheme,
      </SCHEME>
      <JAVASCRIPT>
	JavaScript,
      </JAVASCRIPT>
    </SPLITINLINE>
    the particular data structure used varies from division to division.  A
    meeting of division managers is hastily called to search for a strategy to
    integrate the files that will satisfy headquarters<APOS/> needs while
    preserving the existing autonomy of the divisions.
    <P/>
    Show how such a strategy can be implemented with data-directed programming.
    As an example, suppose that each division<APOS/>s personnel records consist
    of a single file, which contains a set of records keyed on
    employees<APOS/> names.  The structure of the set varies from division to
    division.  Furthermore, each employee<APOS/>s record is itself a set
    (structured differently from division to division) that contains
    information keyed under identifiers such as
    <SCHEMEINLINE>address</SCHEMEINLINE> and
    <SCHEMEINLINE>salary</SCHEMEINLINE>.  In particular:
    <OL>
      <LI>
        Implement for headquarters a
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>get-record</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>get_record</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        that retrieves a specified employee<APOS/>s record from a specified
	personnel file.  The
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        should be applicable to any division<APOS/>s file. Explain how the
	individual divisions<APOS/> files should be structured.  In particular,
	what type information must be supplied?
      </LI>
      <LI>
        Implement for headquarters a
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>get-salary</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        that returns the salary information from a given employee<APOS/>s
	record from any division<APOS/>s personnel file.  How should the record
	be structured in order to make this operation work?
      </LI>
      <LI>
        Implement for headquarters a
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>find-employee-record</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>find_employee_record</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure.</SCHEME>
	  <JAVASCRIPT>function.</JAVASCRIPT>
	</SPLITINLINE>
        This should search all the divisions<APOS/> files for the record of a
	given employee and return the record.  Assume that this
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        takes as arguments an employee<APOS/>s name and a list of all the
	divisions<APOS/> files.
      </LI>
      <LI>
        When Insatiable takes over a new company, what changes must be made in
	order to incorporate the new personnel information into the central
	system?
      </LI>
    </OL>
    <SOLUTION>
      <OL>
        <LI>
          <EM>Implement for headquarters a
	  <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>get-record</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>get_record</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
          <SPLITINLINE>
	    <SCHEME>procedure</SCHEME>
	    <JAVASCRIPT>function</JAVASCRIPT>
	  </SPLITINLINE>
          that retrieves a specified employee<APOS/>s record from a specified
	  personnel file.  The
          <SPLITINLINE>
	    <SCHEME>procedure</SCHEME>
	    <JAVASCRIPT>function</JAVASCRIPT>
	  </SPLITINLINE>
          should be applicable to any division<APOS/>s file. Explain how the
	  individual divisions<APOS/> files should be structured.  In
          particular, what type information must be supplied?</EM>
	  <P/>
	  We are tagging each division's file with a unique identifier for the
	  division, using the tagging functions in
	  section<SPACE/><REF NAME="sec:manifest-types"/>. We assume that each
	  division provides an implementation of the
	  <JAVASCRIPTINLINE>get_record</JAVASCRIPTINLINE> function and installs
	  it in the company-wide operations table.
	  <SNIPPET EVAL="no">
	    <JAVASCRIPT>
function make_insatiable_file(division, file) {
    return pair(division, file);
}
function insatiable_file_division(insatiable_file) {
    return head(insatiable_file);
}
function insatiable_file_content(insatiable_file) {
    return tail(insatiable_file);
}
function get_record(employee_name, insatiable_file) {
    const the_division 
        = insatiable_file_division(insatiable_file);
    const division_record = get("get_record", the_division)
                            (employee_name, 
                             insatiable_file_content(
                                 insatiable_file);
    return record !== undefined      
           ? attach_tag(the_division, division_record)
           : undefined;
}
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
        <LI>
          <EM>Implement for headquarters a
	  <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>get-salary</SCHEMEINLINE></SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE>
	    </JAVASCRIPT>
	  </SPLITINLINE>
          <SPLITINLINE>
	    <SCHEME>procedure</SCHEME>
	    <JAVASCRIPT>function</JAVASCRIPT>
	  </SPLITINLINE>
          that returns the salary information from a given employee<APOS/>s
	  record from any division<APOS/>s personnel file.  How should the
	  record be structured in order to make this operation work?</EM>
	  <P/>
	  Every division needs to implement functions such as
	  <JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE> and install them
	  in Insatiable's operations table. Then, Insatiable's function
	  <JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE> can look like this:
	  <SNIPPET EVAL="no">
	    <JAVASCRIPT>
function make_insatiable_record(division, record) {
    return pair(division, record);
}
function insatiable_record_division(insatiable_record) {
    return head(insatiable_record);
}
function insatiable_record_content(insatiable_record) {
    return tail(insatiable_record);
}
function get_salary(insatiable_record) {
    const the_division = 
        insatiable_record_division(insatiable_record);
    return get("get_salary", the_division)
           (insatiable_record_content);
}
	    </JAVASCRIPT>
	  </SNIPPET>
	  Note that we rely on the fact that any employee record that gets
	  returned by <JAVASCRIPTINLINE>get_record</JAVASCRIPTINLINE> is tagged
	  with its division, which is used in the generic function
	  <JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE> to retrieve the
	  correct implementation from the operation table.
        </LI>
        <LI>
          <EM>
	    Implement for headquarters a
	    <SPLITINLINE>
	      <SCHEME><SCHEMEINLINE>find-employee-record</SCHEMEINLINE>
	    </SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>find_employee_record</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
            <SPLITINLINE>
	      <SCHEME>procedure.</SCHEME>
	      <JAVASCRIPT>function.</JAVASCRIPT>
	    </SPLITINLINE>
            This should search all the divisions<APOS/> files for the record of
	    a given employee and return the record.  Assume that this
            <SPLITINLINE><SCHEME>procedure</SCHEME>
	    <JAVASCRIPT>function</JAVASCRIPT>
	    </SPLITINLINE>
            takes as arguments an employee<APOS/>s name and a list of all the
	    divisions<APOS/> files.
	  </EM>
	  <SNIPPET EVAL="no">
	    <JAVASCRIPT>
function find_employee_record(employee_name, 
                              personnel_files) {
    if (is_null(personell_files)) {
        return undefined;
    } else {
        const insatiable_record 
            = get_record(employee_name,
                         head(personell_files));
        return insatiable_record !== undefined
               ? insatiable_record
               : find_employee_record(employee_name, 
                              tail(personell_files));
    }
}
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
        <LI>
          <EM>
	    When Insatiable takes over a new company, what changes must be made
	    in order to incorporate the new personnel information into the
            central
	    system?
	  </EM>
	  <P/>
	  We would need to do the following, for each newly acquired company:
	  <UL>
	    <LI>
	      Decide a name to be used as tag for any data item related
	      to the new division.
	    </LI>
	    <LI>
	      Write all division-specific functions such as
	      <JAVASCRIPTINLINE>get_salary</JAVASCRIPTINLINE>
	      and install them in the company-wide operations table using the
	      division tag.
	    </LI>
	    <LI>
	      Add the employee files to the list of
	      <JAVASCRIPTINLINE>personell_files</JAVASCRIPTINLINE>.
	      Note that this is a <QUOTE>destructive</QUOTE>
	      operation<EMDASH/>similar to the extension of operations
	      tables<EMDASH/>in that the data structure is permanently  and
	      irrevocably modified;
	      section<SPACE/><REF NAME="sec:mutable-data"/> explains this
	      concept in detail.
	    </LI>
	  </UL>
        </LI>
      </OL>
    </SOLUTION>
  </EXERCISE>
  <INDEX>data-directed programming|)</INDEX>
  <INDEX>additivity|)</INDEX>

  <SUBHEADING>
    <NAME>Message passing</NAME>
  </SUBHEADING>

  <INDEX>message passing|(</INDEX>

  <TEXT>
    The key idea of data-directed programming is to handle generic operations
    in programs by dealing explicitly with operation-and-type tables, such as
    the table in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:operator-table_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:operator-table"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The style of programming we used in
    section<SPACE/><REF NAME="sec:manifest-types"/> organized the required
    dispatching on type by having each operation take care of its own
    dispatching.  In effect, this decomposes the operation-and-type table into
    rows, with each generic operation
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    representing a row of the table.
  </TEXT>
  <TEXT>
    An alternative implementation strategy is to decompose the table into
    columns and, instead of using <QUOTE>intelligent operations</QUOTE> that
    dispatch on data types, to work with <QUOTE>intelligent data
    objects</QUOTE> that dispatch on operation names.  We can do this by
    arranging things so that a data object, such as a rectangular number, is
    represented as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that takes as input the required operation name and performs the operation
    indicated.  In such a discipline,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    could be written as
    <SNIPPET CHAP="3">
      <NAME>make_from_real_imag_message_passing</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>message_passing_example</EXAMPLE>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
          <!-- \indcode*{make-from-real-imag}[message-passing] -->
(define (make-from-real-imag x y)
  (define (dispatch op)
    (cond ((eq? op 'real-part) x)
          ((eq? op 'imag-part) y)
          ((eq? op 'magnitude)
            (sqrt (+ (square x) (square y))))
          ((eq? op 'angle) (atan y x))
          (else
            (error "Unknown op -- MAKE-FROM-REAL-IMAG" op))))
  dispatch)
      </SCHEME>
      <JAVASCRIPT>
function make_from_real_imag(x, y) {
    function dispatch(op) {
        return op === "real_part"
            ? x
            : op === "imag_part"
              ? y
              : op === "magnitude"
                ? math_sqrt(square(x) + square(y))
                : op === "angle"
                  ? math_atan(y, x)
                  : error(op,
                          "Unknown op -- make_from_real_imag");
    }
    return dispatch;
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function make_from_real_imag(x, y) {
    function dispatch(op) {
        return op === "real_part"
            ? x
            : op === "imag_part"
              ? y
              : op === "magnitude"
                ? math_sqrt(square(x) + square(y))
                : op === "angle"
                  ? math_atan(y, x)
                  : error(op,
                          "Unknown op -- make_from_real_imag");
    }
    return dispatch;
}
    
function make_from_mag_ang(r, a) {
    function dispatch(op) {
        return op === "real_part"
            ? r * math_cos(a)
            : op === "imag_part"
              ? r * math_sin(a)
              : op === "magnitude"
                ? r
                : op === "angle"
                  ? a
                  : error(op,
                          "Unknown op -- make_from_real_imag");
    }
    return dispatch;
}
    
function apply_generic(op, arg) {
    return head(arg)(op);
}
function real_part(z) {
   return apply_generic("real_part", list(z));
}
function imag_part(z) {
   return apply_generic("imag_part", list(z));
}
function magnitude(z) {
   return apply_generic("magnitude", list(z));
}
function angle(z) {
   return apply_generic("angle", list(z));
}
function add_complex(z1, z2) {
    return make_from_real_imag(
               real_part(z1) + real_part(z2),
               imag_part(z1) + imag_part(z2));
}
function sub_complex(z1, z2) {
    return make_from_real_imag(
               real_part(z1) - real_part(z2),
               imag_part(z1) - imag_part(z2));
}
function mul_complex(z1, z2) {
    return make_from_mag_ang(
               magnitude(z1) * magnitude(z2),
               angle(z1) + angle(z2));
}
function div_complex(z1, z2) {
    return make_from_mag_ang(
               magnitude(z1) / magnitude(z2),
               angle(z1) - angle(z2));
}
// operation_table, put and get
// from chapter 3 (section 3.3.3)
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
             ? head(records)
             : assoc(key, tail(records));
}
function make_table() {
    const local_table = list("*table*");
    function lookup(key_1, key_2) {
        const subtable = assoc(key_1, tail(local_table));
        if (subtable === undefined) {
            return undefined;
        } else {
            const record = assoc(key_2, tail(subtable));
            if (record === undefined) {
                return undefined;
            } else {
                return tail(record);
            }
        }
    }
    function insert(key_1, key_2, value) {
        const subtable = assoc(key_1, tail(local_table));
        if (subtable === undefined) {
            set_tail(local_table,
                     pair(list(key_1, pair(key_2, value)),
                          tail(local_table)));
        } else {
            const record = assoc(key_2, tail(subtable));
            if (record === undefined) {
      	        set_tail(subtable,
	                       pair(pair(key_2, value),
                              tail(subtable)));
	    } else {
                set_tail(record, value);
            }
        }
    }
    function dispatch(m) {
        return m === "lookup"
               ? lookup
               : m === "insert"
                 ? insert
                 : "undefined operation -- table";
    }
    return dispatch;
}
const operation_table = make_table();
const get = operation_table("lookup");
const put = operation_table("insert");
function attach_tag(type_tag, contents) {
    return pair(type_tag, contents);
}
function type_tag(datum) {
    return is_pair(datum)
           ? head(datum)
           : error(datum, "bad tagged datum -- type_tag");
}
function contents(datum) {
    return is_pair(datum)
           ? tail(datum)
           : error(datum, "bad tagged datum -- contents");
}
function install_rectangular_package() {
    function real_part(z) { return head(z); }
    function imag_part(z) { return tail(z); }
    function make_from_real_imag(x, y) { return pair(x, y); }
    function magnitude(z) {
        return math_sqrt(square(real_part(z)) +
                   square(imag_part(z)));
    }
    function angle(z) {
        return math_atan(imag_part(z), real_part(z));
    }
    function make_from_mag_ang(r, a) {
        return pair(r * math_cos(a), r * math_sin(a));
    }
    // interface to the rest of the system
    function tag(x) {
        return attach_tag("rectangular", x);
    }
    put("real_part", list("rectangular"), real_part);
    put("imag_part", list("rectangular"), imag_part);
    put("magnitude", list("rectangular"), magnitude);
    put("angle", list("rectangular"), angle);
    put("make_from_real_imag", "rectangular",
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "rectangular",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}

install_rectangular_package();
function install_polar_package() {
    // internal functions
    function magnitude(z) { return head(z); }
    function angle(z) { return tail(z); }
    function make_from_mag_ang(r, a) { return pair(r, a); }
    function real_part(z) {
       return magnitude(z) * math_cos(angle(z));
    }
    function imag_part(z) {
       return magnitude(z) * math_sin(angle(z));
    }
    function make_from_real_imag(x, y) {
       return pair(math_sqrt(square(x) + square(y)),
                   math_atan(y, x));
    }

    // interface to the rest of the system
    function tag(x) { return attach_tag("polar", x); }
    put("real_part", list("polar"), real_part);
    put("imag_part", list("polar"), imag_part);
    put("magnitude", list("polar"), magnitude);
    put("angle", list("polar"), angle);
    put("make_from_real_imag", "polar", 
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "polar",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}

install_polar_package();	
      </JAVASCRIPT_RUN>
    </SNIPPET>
    The corresponding
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which applies a generic operation to an argument, now simply feeds the
    operation<APOS/>s name to the data object and lets the object do the
    work:<FOOTNOTE>One limitation of this organization is it permits only
    generic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    of one argument.</FOOTNOTE>
    <SNIPPET CHAP="3">
      <NAME>apply_generic_message_passing</NAME>
      <REQUIRES>make_from_real_imag_message_passing</REQUIRES>
      <EXAMPLE>message_passing_example</EXAMPLE>
      <SCHEME>
          <!-- \indcode*{apply-generic}[with message passing] -->
(define (apply-generic op arg) (arg op))
      </SCHEME>
      <JAVASCRIPT>
function apply_generic(op, arg) {
    return head(arg)(op);
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>message_passing_example</NAME>
      <JAVASCRIPT>
const my_complex_number = 
    make_from_real_imag(1.0, 4.5);

const result = 
    add_complex(my_complex_number,
                my_complex_number);

imag_part(result);		
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>generic_selectors_message_passing</NAME>
      <REQUIRES>apply_generic_message_passing</REQUIRES>
      <EXAMPLE>generic_selectors_example</EXAMPLE>
      <SCHEME>
          <!-- \indcode*{real-part}[data-directed] -->
(define (real-part z) (apply-generic 'real-part z))
          <!-- \indcode*{imag-part}[data-directed] -->
(define (imag-part z) (apply-generic 'imag-part z))
          <!-- \indcode*{magnitude}[data-directed] -->
(define (magnitude z) (apply-generic 'magnitude z))
          <!-- \indcode*{angle}[data-directed] -->
(define (angle z) (apply-generic 'angle z))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) {
   return apply_generic("real_part", list(z));
}
function imag_part(z) {
   return apply_generic("imag_part", list(z));
}
function magnitude(z) {
   return apply_generic("magnitude", list(z));
}
function angle(z) {
   return apply_generic("angle", list(z));
}
      </JAVASCRIPT>
    </SNIPPET>
    Note that the value returned by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a
    <SPLITINLINE>
      <SCHEME>procedure<EMDASH/>the internal</SCHEME>
      <JAVASCRIPT>function<EMDASH/>the internal</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>dispatch</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    This is the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that is invoked when
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    requests an operation to be performed.
  </TEXT>
  <TEXT>
    This style of programming is called <EM>message passing</EM>.  The name
    comes from the image that a data object is an entity that receives the
    requested operation name as a <QUOTE>message.</QUOTE>  We have already seen
    an example of message passing in section<SPACE/><REF NAME="sec:data?"/>,
    where we saw how
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    could be defined with no data objects but only
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Here we see that message passing is not a mathematical trick but a useful
    technique for organizing systems with generic operations.  In the remainder
    of this chapter we will continue to use data-directed programming, rather
    than message passing, to discuss generic arithmetic operations.  In
    chapter<SPACE/>3 we will return to message passing, and we will see that
    it can be a powerful tool for structuring simulation programs.
  </TEXT>

  <EXERCISE>
    <!-- \indcode*{make-from-mag-ang}[message-passing] -->
    Implement the constructor
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-mag-ang</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_mag_ang</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in message-passing style. This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    should be analogous to the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    given above.
    <SOLUTION>
      <SNIPPET CHAP="3">
	<NAME>make_from_mag_ang_message_passing</NAME>
	<REQUIRES>make_from_real_imag_message_passing</REQUIRES>
	<EXAMPLE>message_passing_example_2</EXAMPLE>
	<EXPECTED>4.589053123706931</EXPECTED>
        <SCHEME>
        </SCHEME>
        <JAVASCRIPT>
function make_from_mag_ang(r, a) {
    function dispatch(op) {
        return op === "real_part"
            ? r * math_cos(a)
            : op === "imag_part"
              ? r * math_sin(a)
              : op === "magnitude"
                ? r
                : op === "angle"
                  ? a
                  : error(op,
                          "Unknown op -- make_from_real_imag");
    }
    return dispatch;
}
        </JAVASCRIPT>
	<JAVASCRIPT_RUN>
	</JAVASCRIPT_RUN>
      </SNIPPET>

      <SNIPPET HIDE="yes">
	<NAME>message_passing_example_2</NAME>
	<JAVASCRIPT>
const my_complex_number = 
    make_from_mag_ang(3.0, 0.7);

const result = 
    add_complex(my_complex_number,
                my_complex_number);

real_part(result);		
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <INDEX>dispatching<SUBINDEX>comparing different styles</SUBINDEX></INDEX>
    As a large system with generic operations evolves, new types of data
    objects or new operations may be needed.  For each of the three
    strategies<EMDASH/>generic operations with explicit dispatch, data-directed
    style, and message-passing-style<EMDASH/>describe the changes that must be
    made to a system in order to add new types or new operations.  Which
    organization would be most appropriate for a system in which new types must
    often be added?  Which would be most appropriate for a system in which new
    operations must often be added?
    <LABEL NAME="ex:extend-generic"/>
    <SOLUTION>
      <UL>
	<LI>
	  <EM>Generic operations with explicit dispatch</EM>: For every new
	  type, we need to touch every generic interface function, and add a
	  new case.
	</LI>
	<LI>
	  <EM>Data-directed style</EM>: Here the implementation of the generic
	  interface functions can be neatly packaged in  <QUOTE>install</QUOTE>
	  libraries for each new type. We can also have <QUOTE>install</QUOTE>
	  libraries for new operations.
	</LI>
	<LI>
	  <EM>Message-passing-style</EM>: Like in the data-directed style, we
	  need to write a library for each new type. In this case, the library
	  consists of a dispatch function with a case for every generic
	  interface function.
	</LI>
      </UL>
      Overall, it's probably best to use a data-directed style when we need to
      frequently add new operations, and message-passing, when we frequently
      add new types.
    </SOLUTION>
  </EXERCISE>
</SUBSECTION>
