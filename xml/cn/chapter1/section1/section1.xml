<SECTION>
   <NAME>编程要素</NAME> 
  <LABEL NAME="sec:elements-of-programming"></LABEL>

   <INDEX>编程<SUBINDEX>要素</SUBINDEX><OPEN></OPEN></INDEX> 

   <SECTIONCONTENT></SECTIONCONTENT> 

   <TEXT>
    一种强大的编程语言不仅仅是指示计算机执行任务的手段。该语言也是一个框架，在其中我们组织关于过程的想法。因此，当我们描述一种语言时，我们应特别注意该语言提供的将简单思想组合成更复杂思想的方法。每种强大的语言都有三种机制来实现这一点：
    <UL>
      <LI>
        <B>原语表达式</B>,
	<INDEX>原语表达式</INDEX>
	它们表示语言所关心的最简单实体，
      </LI>
      <LI>
        <B>组合的方法</B>, 通过
        <INDEX>组合的方法</INDEX>
	<INDEX>组合, 方法</INDEX>
	复合元素是由更简单的元素构建而成的，
      </LI>
      <LI>
        <B>抽象的方法</B>,
        <INDEX>抽象的方法</INDEX>
	通过它复合元素可以作为单位被命名和操作。
      </LI>
    </UL>
  </TEXT> 
  
   <TEXT>
    在编程中，我们处理两种元素：
    <SPLITINLINE>
      
	<INDEX>过程</INDEX>
	过程
      
      <JAVASCRIPT>
	<INDEX>&lt;函数&gt;&lt;/函数&gt;
	函数
      </INDEX></JAVASCRIPT>
    </SPLITINLINE>
    和
    <INDEX>数据</INDEX>
    数据。（稍后我们将发现它们实际上并不那么不同。）非正式地说，数据是我们希望操作的<QUOTE>东西</QUOTE>，而
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是操作数据规则的描述。因此，任何强大的编程语言都应该能够描述
    原语数据和原语
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    并且应该有组合和抽象
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    和数据的方法。
  </TEXT> 

  <TEXT> 
    在本章中，我们只处理简单的
<INDEX> 数值数据 </INDEX>
    <INDEX> <DATA>数值<SUBINDEX>数据</SUBINDEX></DATA> </INDEX> 
    数值数据，以便我们可以专注于构建规则
<SPLITINLINE><SCHEME>procedures</SCHEME> <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE>.<FOOTNOTE> 这 <LABEL NAME="foot:number-representation"></LABEL> 
    将数字特征化为<QUOTE>简单数据</QUOTE>是一种赤裸裸的虚张声势。事实上，对数字的处理是任何编程语言中最棘手和最令人困惑的方面之一。相关的典型问题包括：
    <INDEX>整数</INDEX>
    <INDEX>实数</INDEX>
    <INDEX>数字<SUBINDEX>整数与实数</SUBINDEX></INDEX>
    一些计算机系统区分<EM>整数</EM>（如 2）与<EM>实数</EM>（如 2.71）。实数 2.00 是否与整数 2 不同？用于整数的算术运算是否与用于实数的运算相同？6 除以 2 产生 3 还是 3.0？我们可以表示多大的数字？我们可以表示多少位小数的精度？整数的范围是否与实数的范围相同？
    <INDEX>数值分析</INDEX>
    <INDEX>舍入误差</INDEX>
    <INDEX>截断误差</INDEX>
    当然，除了这些问题之外，还有一系列与舍入和截断误差有关的问题——数值分析的整个科学。由于本书的重点是大规模程序设计，而不是数值技术，我们将忽略这些问题。本章中的数值示例将展示使用保持有限的十进制精度进行非整数运算时通常观察到的舍入行为。
</FOOTNOTE> 
  在后面的章节中，我们将看到这些相同的规则允许我们构建
 
  <SPLITINLINE>
    过程
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  以操作复合数据。
  <INDEX>编程<SUBINDEX>要素</SUBINDEX><CLOSE></CLOSE></INDEX>
</TEXT>

  <!--  Subsection 1 : Expressions  -->
  &amp;subsection1.1.1;

  <!--  Subsection 2 : Naming and the Environment  -->
  &amp;subsection1.1.2;

  <!--  Subsection 3 : Evaluating Combinations  -->
  &amp;subsection1.1.3;

  <!--  Subsection 4 : Compound Procedures  -->
  &amp;subsection1.1.4;

  <!--  Subsection 5 : The Substitution Model for Procedure Application  -->
  &amp;subsection1.1.5;

  <!--  Subsection 6 : Conditional Expressions and Predicates  -->
  &amp;subsection1.1.6;

  <!--  Subsection 7 : Example: Square Roots by Newtons Method  -->
  &amp;subsection1.1.7;

  <!--  Subsection 8 : Procedures as Black-Box Abstractions  -->
  &amp;subsection1.1.8;
  
</SECTION>
