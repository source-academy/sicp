<SUBSECTION>
  <NAME>
    Example: Representing Sets
  </NAME>

  <LABEL NAME="sec:representing-sets"/>
  <INDEX>set</INDEX>
  <TEXT>
    In the previous examples we built representations for two kinds of
    compound data objects: rational numbers and algebraic expressions.  In
    one of these examples we had the choice of simplifying (reducing) the
    expressions at either construction time or selection time, but other
    than that the choice of a representation for these structures in terms
    of lists was straightforward. When we turn to the representation of
    sets, the choice of a representation is not so obvious.  Indeed, there
    are a number of possible representations, and they differ
    significantly from one another in several ways.
  </TEXT>
  <TEXT>
    Informally, a set is simply a collection of distinct objects.  To give
    a more precise definition we can employ the method of data
    abstraction.  That is, we define <QUOTE>set</QUOTE> by specifying the
    <INDEX>set<SUBINDEX>operations on</SUBINDEX><OPEN/></INDEX>
    operations that are to be used on sets.  These are
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>intersection-set</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>adjoin-set</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>is_element_of_set</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function <JAVASCRIPTINLINE>is_@element_of_set</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    is a predicate that determines whether a given element is a member of a set.
    <INDEX><USE>adjoin_set</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>Adjoin-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>adjoin_@set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes an object and a set as arguments and returns a set that contains the
    elements of the original set and also the adjoined element.
    <INDEX><USE>union_set</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Union-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>union_@set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    computes the union of two sets, which is the set containing each element
    that appears in either argument.
    <INDEX><USE>intersection_set</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Intersection-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>intersection_@set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    computes the intersection of two sets, which is the set containing only
    elements that appear in both arguments.  From the viewpoint of data
    abstraction, we are free to design any representation that implements these
    operations in a way consistent with the interpretations given
    above.<FOOTNOTE>If we want to be more formal, we can specify
    <QUOTE>consistent with the interpretations given above</QUOTE> to mean
    that the operations satisfy a collection of rules such as these:
    <UL>
      <LI>
	For any set <SCHEMEINLINE>S</SCHEMEINLINE> and any object
	<SCHEMEINLINE>x</SCHEMEINLINE>,
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(element-of-set? x (adjoin-set x S))</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>is_element_of_set(x, adjoin_set(x, S))</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	is true (informally: <QUOTE>Adjoining an object to a set produces a
	set that contains the object</QUOTE>).
      </LI>
      <LI>
        For any sets <SCHEMEINLINE>S</SCHEMEINLINE> and
	<SCHEMEINLINE>T</SCHEMEINLINE> and any object
	<SCHEMEINLINE>x</SCHEMEINLINE>,
        <SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(element-of-set? x (union-set S T))</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>is_element_of_set(x, union_set(S, T))</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        is equal to
        <SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>(or (element-of-set? x S) (element-of-set? x T))
	    </SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>is_element_of_set(x, S) || is_element_of_set(x, T)
	    </JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        (informally: <QUOTE>The elements of
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(union-set S T)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>union_set(S, T)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	are the elements that are in <SCHEMEINLINE>S</SCHEMEINLINE> or in
	<SCHEMEINLINE>T</SCHEMEINLINE></QUOTE>).
      </LI>
      <LI>
        For any object <SCHEMEINLINE>x</SCHEMEINLINE>,
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(element-of-set? x '())</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>is_element_of_set(x, null)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        is false (informally:
	<QUOTE>No object is an element of the empty set</QUOTE>).
      </LI>
    </UL></FOOTNOTE>
    <INDEX>set<SUBINDEX>operations on</SUBINDEX><CLOSE/></INDEX>
  </TEXT>

  <SUBHEADING>
    <NAME>Sets as unordered lists</NAME>
  </SUBHEADING>

  <INDEX>set<SUBINDEX>represented as unordered list</SUBINDEX><OPEN/></INDEX>
  <INDEX>unordered-list representation of sets<OPEN/></INDEX>

  <TEXT>
    One way to represent a set is as a list of its elements in which no
    element appears more than once.  The empty set is represented by the
    empty list.  In this representation,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is similar to the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>memq</SCHEMEINLINE>
      of section<SPACE/><REF NAME="sec:quotation"/>.	
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>member</JAVASCRIPTINLINE>
      of section<SPACE/><REF NAME="sec:strings"/>.	
      </JAVASCRIPT>
    </SPLITINLINE>
    It uses
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equal?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    instead of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eq?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>===</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    so that the set elements need not be
    <SPLITINLINE>
      <SCHEME>symbols:</SCHEME>
      <JAVASCRIPT>just numbers or strings:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>is_element_of_set</DECLARATION><SUBINDEX>unordered-list representation</SUBINDEX></INDEX>
      <NAME>is_element_of_set</NAME>
      <EXAMPLE>is_element_of_set_example</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
      </SCHEME>
      <JAVASCRIPT>
function is_element_of_set(x, set) {
    return is_null(set) 
           ? false
           : equal(x, head(set))
           ? true
           : is_element_of_set(x, tail(set));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_element_of_set_example</NAME>
      <REQUIRES>adjoin_set</REQUIRES>
      <SCHEME>
(element-of-set? 15 (adjoin-set 10 (adjoin-set 15 (adjoin-set 20 nil))))
      </SCHEME>
      <JAVASCRIPT>
is_element_of_set(15,
    adjoin_set(10, adjoin_set(15, adjoin_set(20, null))));
      </JAVASCRIPT>
    </SNIPPET>
    Using this, we can write
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>adjoin-set</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    If the object to be adjoined is already in the set, we just return the set.
    Otherwise, we use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to add the object to the list that represents the set:
    <SNIPPET>
      <INDEX><DECLARATION>adjoin_set</DECLARATION><SUBINDEX>unordered-list representation</SUBINDEX></INDEX>
      <NAME>adjoin_set</NAME>
      <REQUIRES>is_element_of_set</REQUIRES>
      <EXAMPLE>adjoin_set_example</EXAMPLE>
      <EXPECTED>[ 10, [ 15, [ 20, null ] ] ]</EXPECTED>
      <SCHEME>
(define (adjoin-set x set)
  (if (element-of-set? x set)
    set
    (cons x set)))
      </SCHEME>
      <JAVASCRIPT>
function adjoin_set(x, set) {
    return is_element_of_set(x, set)
           ? set
           : pair(x, set);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>adjoin_set_example</NAME>
      <SCHEME>
(adjoin-set 10 (adjoin-set 15 (adjoin-set 20 nil)))
      </SCHEME>
      <JAVASCRIPT>
adjoin_set(10, adjoin_set(15, adjoin_set(20, null)));
      </JAVASCRIPT>
    </SNIPPET>
    For
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>intersection-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    we can use a recursive strategy.  If we know how to form the intersection
    of <SCHEMEINLINE>set2</SCHEMEINLINE> and the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of <SCHEMEINLINE>set1</SCHEMEINLINE>, we only need to decide whether to
    include the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of <SCHEMEINLINE>set1</SCHEMEINLINE> in this.  But this depends on whether
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(car set1)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head(set1)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is also in <SCHEMEINLINE>set2</SCHEMEINLINE>.  Here is the resulting
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>intersection_set</DECLARATION><SUBINDEX>unordered-list representation</SUBINDEX></INDEX>
      <NAME>intersection_set</NAME>
      <REQUIRES>is_element_of_set</REQUIRES>
      <EXAMPLE>intersection_set_example</EXAMPLE>
      <EXPECTED>[ 10, [ 20, null ] ]</EXPECTED>
      <SCHEME>
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
          (cons (car set1)
            (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
      </SCHEME>
      <JAVASCRIPT>
function intersection_set(set1, set2) {
    return is_null(set1) || is_null(set2)
           ? null
           : is_element_of_set(head(set1), set2)
           ? pair(head(set1), intersection_set(tail(set1), set2))
           : intersection_set(tail(set1), set2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>intersection_set_example</NAME>
      <REQUIRES>adjoin_set</REQUIRES>
      <REQUIRES>intersection_set</REQUIRES>
      <SCHEME>
(intersection-set
  (adjoin-set 10 (adjoin-set 20 (adjoin-set 30 nil)))
  (adjoin-set 10 (adjoin-set 15 (adjoin-set 20 nil))))
      </SCHEME>
      <JAVASCRIPT>
intersection_set(
   adjoin_set(10, adjoin_set(20, adjoin_set(30, null))),
   adjoin_set(10, adjoin_set(15, adjoin_set(20, null))));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    In designing a representation, one of the issues we should be concerned
    with is efficiency.  Consider the number of steps required by our set
    operations.  Since they all use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    the speed of this operation has a major impact on the efficiency of the set
    implementation as a whole.  Now, in order to check whether an object is a
    member of a set,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    may have to scan the entire set. (In the worst case, the object turns out
    not to be in the set.)  Hence, if the set has
    <LATEXINLINE>$n$</LATEXINLINE> elements,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    might take up to <LATEXINLINE>$n$</LATEXINLINE> steps.  Thus, the number of
    steps required grows as <LATEXINLINE>$\Theta(n)$</LATEXINLINE>. The number
    of steps required by
    <SPLITINLINE>
      <SCHEME>    
	<SCHEMEINLINE>adjoin-set</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which uses
    this operation, also grows as <LATEXINLINE>$\Theta(n)$</LATEXINLINE>.  For
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>intersection-set</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which does an
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    check for each element of <SCHEMEINLINE>set1</SCHEMEINLINE>, the number of
    steps required grows as the product of the sizes of the sets involved, or
    <LATEXINLINE>$\Theta(n^{2})$</LATEXINLINE> for two sets of size
    <LATEXINLINE>$n$</LATEXINLINE>.  The same will be true of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <EXERCISE>
    Implement the
    <INDEX><USE>union_set</USE><SUBINDEX>unordered-list representation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operation for the unordered-list representation of sets.
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>is_element_of_set</REQUIRES>
	<REQUIRES>adjoin_set</REQUIRES>
	<EXAMPLE>union_set_example</EXAMPLE>
	<EXPECTED>[ 20, null ]</EXPECTED>
	<JAVASCRIPT>
function union_set(set1, set2) {
    return is_null(set1)
           ? set2
           : adjoin_set(head(set1), 
                        union_set(tail(set1), set2));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>union_set_example</NAME>
	<JAVASCRIPT>
union_set(
   adjoin_set(10, adjoin_set(20, adjoin_set(30, null))),
   adjoin_set(10, adjoin_set(15, adjoin_set(20, null))));
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
tail(tail(tail(union_set(
   adjoin_set(10, adjoin_set(20, adjoin_set(30, null))),
   adjoin_set(10, adjoin_set(15, adjoin_set(20, null)))))));
	</JAVASCRIPT_TEST>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_59"/>
  </EXERCISE>

  <EXERCISE>
    We specified that a set would be represented as a list with no duplicates.
    Now suppose we allow duplicates.  For instance, the set
    <LATEXINLINE>$\{1,2,3\}$</LATEXINLINE> could be represented as the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(2 3 2 1 3 2 2)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	      <JAVASCRIPTINLINE>list(2, 3, 2, 1, 3,</JAVASCRIPTINLINE>
        <JAVASCRIPTINLINE>2, 2)</JAVASCRIPTINLINE>.
    </JAVASCRIPT></SPLITINLINE>
    Design
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>adjoin-set</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>intersection-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that operate on this representation.  How does the efficiency of each
    compare with the corresponding
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for the non-duplicate representation?  Are there applications for which
    you would use this representation in preference to the non-duplicate one?
    <SOLUTION>
      The functions <JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE> and
      <JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE> remain unchanged.
      Here is the new implementation of
      <JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE> and
      <JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE>.
      <SNIPPET>
	<REQUIRES>is_element_of_set</REQUIRES>
	<REQUIRES>intersection_set</REQUIRES>
	<EXAMPLE>union_set_example</EXAMPLE>
	<EXPECTED>[ 10, [ 15, [ 20, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function adjoin_set(x, set) {
    return pair(x, set);
}
function union_set(set1, set2) {
    return append(set1, set2);
}
	</JAVASCRIPT>
      </SNIPPET>
      In the version with no duplicates, the required number of steps for
      <JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE> and 
      <JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE> has an order of growth of
      <LATEXINLINE>$O(n)$</LATEXINLINE>, where <LATEXINLINE>$n$</LATEXINLINE>
      is the number of element occurrences in the given representation, and
      the required number of steps for
      <JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE> and 
      <JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE> has an order of growth of
      <LATEXINLINE>$O(n m)$</LATEXINLINE>, where <LATEXINLINE>$n$</LATEXINLINE>
      is the number of element occurrences in the representation of the first
      set and <LATEXINLINE>$m$</LATEXINLINE> is the number of element
      occurrences in the representation of the second set. In the version that
      allows duplicates, the number of steps for
      <JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE> shrinks to
      <LATEXINLINE>$O(n)$</LATEXINLINE>, and the number of steps for
      <JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE> shrinks to
      <LATEXINLINE>$O(n)$</LATEXINLINE>. However, note that the number of
      element occurrences may be much larger in the second version, because
      many duplicates may accumulate. For applications where duplicate elements
      are rare, the version that allows duplicates is preferrable.

    </SOLUTION>
    <LABEL NAME="ex:2_60"/>
  </EXERCISE>
  <INDEX>set<SUBINDEX>represented as unordered list</SUBINDEX><CLOSE/></INDEX>
  <INDEX>unordered-list representation of sets<CLOSE/></INDEX>

  <SUBHEADING>
    <NAME>Sets as ordered lists</NAME>
  </SUBHEADING>

  <INDEX>set<SUBINDEX>represented as ordered list</SUBINDEX><OPEN/></INDEX>
  <INDEX>ordered-list representation of sets<OPEN/></INDEX>
  <TEXT>
    One way to speed up our set operations is to change the representation
    so that the set elements are listed in increasing order.  To do this,
    we need some way to compare two objects so that we can say which is
    bigger.  For example, we could compare
    <SPLITINLINE>
      <SCHEME>
	symbols
      </SCHEME>
      <JAVASCRIPT>
	strings
      </JAVASCRIPT>
    </SPLITINLINE>
    lexicographically, or
    we could agree on some method for assigning a unique number to an
    object and then compare the elements by comparing the corresponding
    numbers.  To keep our discussion simple, we will consider only the
    case where the set elements are numbers, so that we can compare
    elements using <SCHEMEINLINE>&gt;</SCHEMEINLINE> and
    <SCHEMEINLINE>&lt;</SCHEMEINLINE>. We will represent a set of
    numbers by listing its elements in increasing order.  Whereas our
    first representation above allowed us to represent the set
    <LATEXINLINE>$\{1,3,6,10\}$</LATEXINLINE> by listing the elements in any
    order, our new representation allows only the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(1 3 6 10)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(1, 3, 6, 10)</JAVASCRIPTINLINE>.
      </JAVASCRIPT></SPLITINLINE>
  </TEXT>
  <TEXT>
    One advantage of ordering shows up in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    In checking for the presence of an item, we no longer have to scan the
    entire set.  If we reach a set element that is larger than the item we
    are looking for, then we know that the item is not in the set:
    <SNIPPET LATEX="yes">x
      <INDEX><DECLARATION>is_element_of_set</DECLARATION><SUBINDEX>ordered-list representation</SUBINDEX></INDEX>
      <NAME>is_element_of_set2</NAME>
      <EXAMPLE>is_element_of_set_example_2</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((&lt; x (car set)) false)
        (else (element-of-set? x (cdr set)))))
      </SCHEME>
      <JAVASCRIPT>
function is_element_of_set(x, set) {
    return is_null(set) 
           ? false
           : x === head(set)
           ? true
           : x &lt; head(set)
           ? false
           : // $\texttt{x &gt; head(set)}$
             is_element_of_set(x, tail(set));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_element_of_set_example_2</NAME>
      <SCHEME>
(element-of-set 15 (list 10 15 20))
      </SCHEME>
      <JAVASCRIPT>
is_element_of_set(15, list(10, 15, 20));
      </JAVASCRIPT>
    </SNIPPET>
    How many steps does this save?  In the worst case, the item we are
    looking for may be the largest one in the set, so the number of steps
    is the same as for the unordered representation.  On the other hand,
    if we search for items of many different sizes we can expect that
    sometimes we will be able to stop searching at a point near the
    beginning of the list and that other times we will still need to
    examine most of the list.  On the average we should expect to have to
    examine about half of the items in the set.  Thus, the average
    number of steps required will be about <LATEXINLINE>$n/2$</LATEXINLINE>.
    This is still <LATEXINLINE>$\Theta(n)$</LATEXINLINE> growth, but
    it does save us, on the average, a factor of 2 in number of steps over the
    previous implementation.
  </TEXT>
  <TEXT>
    We obtain a more impressive speedup with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>intersection-set</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In the unordered representation this operation required
    <LATEXINLINE>$\Theta(n^2)$</LATEXINLINE> steps, because we performed a
    complete scan of <SCHEMEINLINE>set2</SCHEMEINLINE> for each element of
    <SCHEMEINLINE>set1</SCHEMEINLINE>.  But with the ordered representation,
    we can use a more clever method.  Begin by comparing the initial elements,
    <SCHEMEINLINE>x1</SCHEMEINLINE> and
    <SCHEMEINLINE>x2</SCHEMEINLINE>, of the two sets.  If
    <SCHEMEINLINE>x1</SCHEMEINLINE> equals
    <SCHEMEINLINE>x2</SCHEMEINLINE>, then that gives an element of the
    intersection, and the rest of the intersection is the intersection of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>s</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>s</JAVASCRIPT>
    </SPLITINLINE>
    of the two sets.  Suppose, however, that <SCHEMEINLINE>x1</SCHEMEINLINE>
    is less than <SCHEMEINLINE>x2</SCHEMEINLINE>. Since
    <SCHEMEINLINE>x2</SCHEMEINLINE> is the smallest element in
    <SCHEMEINLINE>set2</SCHEMEINLINE>, we can immediately conclude that
    <SCHEMEINLINE>x1</SCHEMEINLINE> cannot appear anywhere in
    <SCHEMEINLINE>set2</SCHEMEINLINE> and hence is not in the intersection.
    Hence, the intersection is equal to the intersection of
    <SCHEMEINLINE>set2</SCHEMEINLINE> with the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of <SCHEMEINLINE>set1</SCHEMEINLINE>.  Similarly, if
    <SCHEMEINLINE>x2</SCHEMEINLINE> is less than
    <SCHEMEINLINE>x1</SCHEMEINLINE>, then the intersection is given by the
    intersection of <SCHEMEINLINE>set1</SCHEMEINLINE> with the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of <SCHEMEINLINE>set2</SCHEMEINLINE>.  Here is the
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET LATEX="yes">
      <INDEX><DECLARATION>intersection_set</DECLARATION><SUBINDEX>ordered-list representation</SUBINDEX></INDEX>
      <NAME>intersection_set_ordered</NAME>
      <EXAMPLE>intersection_set_example2</EXAMPLE>
      <EXPECTED>[ 10, [ 20, null ] ]</EXPECTED>
      <SCHEME>
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
              (cons x1
                    (intersection-set (cdr set1)
                                      (cdr set2))))
            ((&lt; x1 x2)
              (intersection-set (cdr set1) set2))
            ((&lt; x2 x1)
              (intersection-set set1 (cdr set2)))))))
      </SCHEME>
      <JAVASCRIPT>
function intersection_set(set1, set2) {
    if (is_null(set1) || is_null(set2)) {
        return null;
    } else {
        const x1 = head(set1);
        const x2 = head(set2);
        return x1 === x2
               ? pair(x1, intersection_set(tail(set1), tail(set2)))
               : x1 &lt; x2 
               ? intersection_set(tail(set1), set2)
               : // $\texttt{x2 &lt; x1}$
	         intersection_set(set1, tail(set2));
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>intersection_set_example2</NAME>
      <REQUIRES>intersection_set_ordered</REQUIRES>
      <SCHEME>
(intersection-set
  (list 10 20 30)
  (list 10 15 20))
      </SCHEME>
      <JAVASCRIPT>
intersection_set(
   list(10, 20, 30),
   list(10, 15, 20));
      </JAVASCRIPT>
    </SNIPPET>
    To estimate the number of steps required by this process, observe that at
    each step we reduce the intersection problem to computing intersections of
    smaller sets<EMDASH/>removing the first element from
    <SCHEMEINLINE>set1</SCHEMEINLINE> or <SCHEMEINLINE>set2</SCHEMEINLINE>
    or both.  Thus, the number of steps required is at most the sum of the sizes
    of <SCHEMEINLINE>set1</SCHEMEINLINE> and <SCHEMEINLINE>set2</SCHEMEINLINE>,
    rather than the product of the sizes as with the unordered representation.
    This is <LATEXINLINE>$\Theta(n)$</LATEXINLINE> growth rather than
    <LATEXINLINE>$\Theta(n^2)$</LATEXINLINE><EMDASH/>a considerable speedup,
    even for sets of moderate size.
  </TEXT>
  <EXERCISE>
    Give an implementation of
    <LABEL NAME="ex:adjoin-set"/>
     <INDEX><USE>adjoin_set</USE><SUBINDEX>ordered-list representation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>adjoin-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    using the ordered representation.  By analogy with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    show how to take advantage of the ordering to produce a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that requires on the average about half as many steps as with the unordered
    representation.
    <SOLUTION>
      <SNIPPET>
	<NAME>adjoin_set_ordered</NAME>
	<EXAMPLE>adjoin_set_example</EXAMPLE>
	<EXPECTED>[ 10, [ 15, [ 20, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function adjoin_set(x, set) {
    return is_null(set)
           ? list(x)
           : x === head(set) 
           ? set
           : x &lt; head(set)
           ? pair(x, set)
           : pair(head(set), 
                  adjoin_set(x, tail(set)));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
    </SNIPPET></SOLUTION>
    <LABEL NAME="ex:2_61"/>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:union-set"/>
    Give a <LATEXINLINE>$\Theta(n)$</LATEXINLINE> implementation of
     <INDEX><USE>union_set</USE><SUBINDEX>ordered-list representation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    for sets represented as ordered lists.
    <SOLUTION>
      <SNIPPET>
	<NAME>union_set_ordered</NAME>
	<EXAMPLE>union_set_ordered_example</EXAMPLE>
	<EXPECTED>[ 15, [ 20, [ 30, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function union_set(set1, set2) {
    if (is_null(set1)) {
        return set2;
    } else if (is_null(set2)) {
        return set1;
    } else {
      const x1 = head(set1);
      const x2 = head(set2);
      return x1 === x2
             ? pair(x1, union_set(tail(set1),
                                  tail(set2)))
             : x1 &lt; x2 
             ? pair(x1, union_set(tail(set1), set2))
             : pair(x2, union_set(set1, tail(set2)));
    }
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<NAME>union_set_ordered_example</NAME>
	<REQUIRES>adjoin_set_ordered</REQUIRES>
	<JAVASCRIPT>
union_set(
   adjoin_set(10, adjoin_set(20, adjoin_set(30, null))),
   adjoin_set(10, adjoin_set(15, adjoin_set(20, null))));
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
tail(union_set(
   adjoin_set(10, adjoin_set(20, adjoin_set(30, null))),
   adjoin_set(10, adjoin_set(15, adjoin_set(20, null)))));
	</JAVASCRIPT_TEST>
      </SNIPPET>
    </SOLUTION>  
  </EXERCISE>
  <INDEX>set<SUBINDEX>represented as ordered list</SUBINDEX><CLOSE/></INDEX>
  <INDEX>ordered-list representation of sets<CLOSE/></INDEX>

  <SUBHEADING>
    <NAME>Sets as binary trees</NAME>
  </SUBHEADING>

  <INDEX>set<SUBINDEX>represented as binary tree</SUBINDEX><OPEN/></INDEX>
  <INDEX>binary tree<SUBINDEX>set represented as</SUBINDEX><OPEN/></INDEX>
  <INDEX>tree<SUBINDEX>binary</SUBINDEX></INDEX>
  <INDEX>binary tree</INDEX>
  <INDEX>binary search</INDEX>
  <INDEX>search<SUBINDEX><ORDER>binary</ORDER>of binary tree</SUBINDEX></INDEX>
  <TEXT>
    We can do better than the ordered-list representation by arranging the set
    elements in the form of a tree.  Each node of the tree holds one element of
    the set, called the <QUOTE>entry</QUOTE> at that node, and a link to each
    of two other (possibly empty) nodes.  The <QUOTE>left</QUOTE> link points to
    elements smaller than the one at the node, and the <QUOTE>right</QUOTE>
    link to elements greater than the one at the node.
    Figure<SPACE/><REF NAME="fig:binary-tree"/> shows some trees that represent
    the set <LATEXINLINE>$\{1,3,5,7,9,11\}$</LATEXINLINE>.  The same set may be
    represented by a tree in a number of different ways.  The only thing we
    require for a valid representation is that all elements in the left subtree
    be smaller than the node entry and that all elements in the right subtree be
    larger.
    <FIGURE>
      <FIGURE web_scale="0.4" scale="0.59" src="img_original/ch2-Z-G-51.svg"></FIGURE>
      <CAPTION>Various binary trees that represent the set
      <LATEXINLINE>$\{ 1,3,5,7,9,11 \}$</LATEXINLINE>.</CAPTION>
      <LABEL NAME="fig:binary-tree"/>
    </FIGURE>
  </TEXT>
  <TEXT>
    The advantage of the tree representation is this: Suppose we want to check
    whether a number <LATEXINLINE>$x$</LATEXINLINE> is contained in a set.  We
    begin by comparing <LATEXINLINE>$x$</LATEXINLINE> with the entry in the
    top node.  If <LATEXINLINE>$x$</LATEXINLINE> is less than this, we know
    that we need only search the left subtree; if <LATEXINLINE>$x$</LATEXINLINE>
    is greater, we need only search the right subtree.  Now, if the tree is
    <QUOTE>balanced,</QUOTE> each of these subtrees will be about half the size
    of the original.  Thus, in one step we have reduced the problem of
    searching a tree of size <LATEXINLINE>$n$</LATEXINLINE> to searching a tree
    of size <LATEXINLINE>$n/2$</LATEXINLINE>.  Since the size of the tree is
    halved at each step, we should expect that the number of steps needed to
    search a tree of size <LATEXINLINE>$n$</LATEXINLINE> grows as
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>.<FOOTNOTE>Halving the size of
    the problem at each step is the distinguishing characteristic of
    <INDEX>logarithmic growth</INDEX>
    logarithmic growth, as we saw with the fast-exponentiation algorithm of
    section<SPACE/><REF NAME="sec:exponentiation"/> and the half-interval
    search method of
    section<SPACE/><REF NAME="sec:proc-general-methods"/>.</FOOTNOTE> For
    large sets, this will be a significant speedup over the previous
    representations.
  </TEXT>
  <TEXT>
    We can represent trees by using
    <INDEX>binary tree<SUBINDEX>represented with lists</SUBINDEX></INDEX>
    lists.  Each node will be a list of
    three items: the entry at the node, the left subtree, and the right
    subtree.  A left or a right subtree of the empty list will indicate
    that there is no subtree connected there.  We can describe this
    representation by the following
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>:<FOOTNOTE>We
    are representing sets in terms of trees, and trees in terms of
    lists<EMDASH/>in effect, a data abstraction built upon a data abstraction.
    We can regard the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>entry</SCHEMEINLINE>,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>left-branch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>left_branch</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>right-branch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>right_branch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-tree</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_tree</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as a way of isolating the abstraction of a <QUOTE>binary tree</QUOTE> from
    the particular way we might wish to represent such a tree in terms of list
    structure.</FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>entry</DECLARATION></INDEX> 
      <INDEX><DECLARATION>left_branch</DECLARATION></INDEX> 
      <INDEX><DECLARATION>right_branch</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_tree</DECLARATION></INDEX> 
      <NAME>make_tree_function</NAME>
      <EXAMPLE>make_tree_example</EXAMPLE>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define (entry tree) (car tree))

(define (left-branch tree) (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))
      </SCHEME>
      <JAVASCRIPT>
function entry(tree) { return head(tree); }
<SHORT_SPACE/>
function left_branch(tree) { return head(tail(tree)); }
<SHORT_SPACE/>
function right_branch(tree) { return head(tail(tail(tree))); }
<SHORT_SPACE/>
function make_tree(entry, left, right) { 
    return list(entry, left, right);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_tree_example</NAME>
      <SCHEME>
(entry
  (left-branch
    (right-branch
      (make-tree
        10
        'nil
        (make-tree
          30
          (make-tree 20 'nil 'nil)
          'nil)))))
      </SCHEME>
      <JAVASCRIPT>
entry(
  left_branch(
    right_branch(
      make_tree(10,
                null,
                make_tree(30,
                          make_tree(20, null, null),
                          null)))));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Now we can write 
    <SPLITINLINE>
      <SCHEME>the <SCHEMEINLINE>element-of-set?</SCHEMEINLINE> procedure</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    using the strategy described above:
    <SNIPPET LATEX="yes">
      <INDEX><DECLARATION>is_element_of_set</DECLARATION><SUBINDEX>binary-tree representation</SUBINDEX></INDEX>
      <REQUIRES>make_tree_function</REQUIRES>
      <EXAMPLE>is_element_of_set_example_3</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((&lt; x (entry set))
          (element-of-set? x (left-branch set)))
        ((&gt; x (entry set))
          (element-of-set? x (right-branch set)))))
      </SCHEME>
      <JAVASCRIPT>
function is_element_of_set(x, set) {
    return is_null(set) 
           ? false
           : x === entry(set) 
           ? true
           : x &lt; entry(set)
           ? is_element_of_set(x, left_branch(set))
           : // $\texttt{x &gt; entry(set)}$
             is_element_of_set(x, right_branch(set));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_element_of_set_example_3</NAME>
      <JAVASCRIPT>
is_element_of_set(20, 
    make_tree(10,
        null,
        make_tree(30,
            make_tree(20, null, null),
            null)));
      </JAVASCRIPT>
    </SNIPPET>    
  </TEXT>
  <TEXT>
    Adjoining an item to a set is implemented similarly and also requires
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> steps.  To adjoin an item
    <SCHEMEINLINE>x</SCHEMEINLINE>, we compare
    <SCHEMEINLINE>x</SCHEMEINLINE> with the node entry to determine whether
    <SCHEMEINLINE>x</SCHEMEINLINE> should be added to the right or to the left
    branch, and having adjoined
    <SCHEMEINLINE>x</SCHEMEINLINE> to the appropriate branch we piece this
    newly constructed branch together with the original entry and the other
    branch.  If <SCHEMEINLINE>x</SCHEMEINLINE> is equal to the entry, we just
    return the node.  If we are asked to adjoin
    <SCHEMEINLINE>x</SCHEMEINLINE> to an empty tree, we generate a tree that
    has <SCHEMEINLINE>x</SCHEMEINLINE> as the entry and empty right and left
    branches.  Here is the
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET HIDE="yes">
      <NAME>adjoin_set_example_2</NAME>
      <SCHEME>
(adjoin-set 10 (adjoin-set 15 (adjoin-set 20 nil)))
      </SCHEME>
      <JAVASCRIPT>
adjoin_set(10, adjoin_set(15, adjoin_set(20, null)));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
head(tail(head(tail(adjoin_set(10, adjoin_set(15, adjoin_set(20, null)))))));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET LATEX="yes">
      <INDEX><DECLARATION>adjoin_set</DECLARATION><SUBINDEX>binary-tree representation</SUBINDEX></INDEX>
      <NAME>adjoin_set2</NAME>
      <REQUIRES>make_tree_function</REQUIRES>
      <EXAMPLE>adjoin_set_example_2</EXAMPLE>
      <EXPECTED>[ 10, [ null, [ null, null ] ] ]</EXPECTED>
      <SCHEME>
(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((&lt; x (entry set))
          (make-tree (entry set)
                     (adjoin-set x (left-branch set))
                     (right-branch set)))
        ((&gt; x (entry set))
          (make-tree (entry set)
                     (left-branch set)
                     (adjoin-set x (right-branch set))))))
      </SCHEME>
      <JAVASCRIPT>
function adjoin_set(x, set) {
    return is_null(set)
           ? make_tree(x, null, null)
           : x === entry(set)
           ? set
           : x &lt; entry(set)
           ? make_tree(entry(set),
                       adjoin_set(x, left_branch(set)),
                       right_branch(set))
           : // $\texttt{x &gt; entry(set)}$
             make_tree(entry(set),
                       left_branch(set),
                       adjoin_set(x, right_branch(set)));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    The above claim that searching the tree can be performed in a logarithmic
    number of steps rests on the assumption that the tree is
    <INDEX>balanced binary tree</INDEX>
    <INDEX>binary tree<SUBINDEX>balanced</SUBINDEX></INDEX>
    <QUOTE>balanced,</QUOTE> i.e., that the
    left and the right subtree of every tree have approximately the same
    number of elements, so that each subtree contains about half the
    elements of its parent.  But how can we be certain that the trees we
    construct will be balanced?  Even if we start with a balanced tree,
    adding elements with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>adjoin-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    may produce an unbalanced result.  Since the position of a newly adjoined
    element depends on how the element compares with the items already in the
    set, we can expect that if we add elements <QUOTE>randomly</QUOTE> the tree
    will tend to be balanced on the average.  But this is not a guarantee.  For
    example, if we start with an empty set and adjoin the numbers 1 through 7
    in sequence we end up with the highly unbalanced tree shown in
    figure<SPACE/><REF NAME="fig:unbalanced-tree"/>.  In this tree all the left
    subtrees are empty, so it has no advantage over a simple ordered list.  One
    way to solve this problem is to define an operation that transforms an
    arbitrary tree into a balanced tree with the same elements.  Then we can perform this transformation after every few
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>adjoin-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operations to keep our set in balance.  There are also other ways to solve
    this problem, most of which involve designing new data structures for which
    searching and insertion both can be done in
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>
    steps.<FOOTNOTE>Examples of such structures include
    <INDEX>tree<SUBINDEX>B-tree</SUBINDEX></INDEX>
    <INDEX>tree<SUBINDEX>red-black</SUBINDEX></INDEX>
    <INDEX>B-tree</INDEX>
    <INDEX>red-black tree</INDEX>
    <EM>B-trees</EM> and <EM>red-black trees</EM>.  There is a large literature
    on data structures devoted to this problem.  See 
    <INDEX>Cormen, Thomas H.</INDEX>
    <INDEX>Leiserson, Charles E.</INDEX>
    <INDEX>Rivest, Ronald L.</INDEX>
    <INDEX>Stein, Clifford</INDEX>
    <CITATION>Cormen, Leiserson, Rivest, and Stein 2022</CITATION>.</FOOTNOTE>
    <WEB_ONLY>
      <!-- Figure code appears later in this file in a PDF_ONLY for SICP JS pagination -->
    <FIGURE>
      <FIGURE split_scale="0.3" web_scale="0.4" scale="0.59" src="img_original/ch2-Z-G-52.svg"></FIGURE>
      <CAPTION>
	Unbalanced tree produced by adjoining 1 through 7 in sequence.
      </CAPTION>
      <LABEL NAME="fig:unbalanced-tree"/>
    </FIGURE>
    </WEB_ONLY>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:tree-to-list"/>
    Each of the following two
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    converts a
    <INDEX>binary tree<SUBINDEX>converting to a list</SUBINDEX></INDEX>
    <INDEX>list(s)<SUBINDEX>converting a binary tree to a</SUBINDEX></INDEX>
    binary tree to a list.
    <SNIPPET>
      <INDEX><DECLARATION>tree_to_list_</DECLARATION><LATEXINLINE>$\ldots$</LATEXINLINE><FRAGILE/></INDEX> 
      <NAME>tree_to_list_1</NAME>
      <REQUIRES>make_tree_function</REQUIRES>
      <SCHEME>
(define (tree-&gt;list-1 tree)
  (if (null? tree)
    '()
    (append (tree-&gt;list-1 (left-branch tree))
            (cons (entry tree)
                  (tree-&gt;list-1 (right-branch tree))))))
      </SCHEME>
      <JAVASCRIPT>
function tree_to_list_1(tree) {
    return is_null(tree)
           ? null
           : append(tree_to_list_1(left_branch(tree)),
                    pair(entry(tree),
                         tree_to_list_1(right_branch(tree))));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>tree_to_list_2</NAME>
      <REQUIRES>make_tree_function</REQUIRES>
      <SCHEME>
(define (tree-&gt;list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
      result-list
      (copy-to-list (left-branch tree)
                    (cons (entry tree)
                          (copy-to-list (right-branch tree)
                                        result-list)))))
  (copy-to-list tree '()))
      </SCHEME>
      <JAVASCRIPT>
function tree_to_list_2(tree) {
    function copy_to_list(tree, result_list) {
        return is_null(tree)
               ? result_list
               : copy_to_list(left_branch(tree),
                              pair(entry(tree),
                                   copy_to_list(right_branch(tree),
                                                result_list)));
    }
    return copy_to_list(tree, null);
}
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
        Do the two
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
        produce the same result for every tree? If not, how do the results
	differ?  What lists do the two
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
        produce for the trees in figure<SPACE/><REF NAME="fig:binary-tree"/>?
        <!--
            %answer: both
            <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
            give (1 3 5 7 9 11) for all 3 trees.
        -->
      </LI>
      <LI>
        Do the two
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
        have the same order of growth in the number of steps required to
	convert a balanced tree with <LATEXINLINE>$n$</LATEXINLINE> elements
	to a list? If not, which one grows more slowly?
      </LI>
    </OL>
    <SOLUTION>
      <OL>
	<LI>
	  The two procedures produce the same results. For the trees in
	  figure<SPACE/><REF NAME="fig:binary-tree"/>, the result will always
	  be <JAVASCRIPTINLINE>list(1, 3, 5, 7, 9, 11)</JAVASCRIPTINLINE>.
	</LI>
	<LI>
	  A balanced tree with <LATEXINLINE>$n$</LATEXINLINE> elements has a
	  height of <LATEXINLINE>$O(\log{n})$</LATEXINLINE> and
	  <LATEXINLINE>$O(n)$</LATEXINLINE> nodes. To convert the tree into a
	  list using function
	  <JAVASCRIPTINLINE>tree_to_list_1</JAVASCRIPTINLINE>, we call 
	  <JAVASCRIPTINLINE>tree_to_list_1</JAVASCRIPTINLINE>
	  <LATEXINLINE>$O(n)$</LATEXINLINE> times. We call
	  <SCHEMEINLINE>append</SCHEMEINLINE> at each node of the tree,  but at
	  each level, we apply <SCHEMEINLINE>append</SCHEMEINLINE>
	  with a combined <LATEXINLINE>$O(n)$</LATEXINLINE> elements in the
	  first arguments. Thus, the run time of
	  <JAVASCRIPTINLINE>tree_to_list_1</JAVASCRIPTINLINE> has an order of
	  growth of <LATEXINLINE>$O(n\log{n})$</LATEXINLINE>. Instead of
	  <SCHEMEINLINE>append</SCHEMEINLINE>, the function
	  <JAVASCRIPTINLINE>tree_to_list_2</JAVASCRIPTINLINE> gets away with
	  calling <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE> at each node, and
	  thus <JAVASCRIPTINLINE>tree_to_list_2</JAVASCRIPTINLINE> has an order
	  of growth of <LATEXINLINE>$O(n)$</LATEXINLINE>.
	</LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

    <PDF_ONLY>
      <!-- Figure moved here for SICP JS pagination -->
      <!-- Figure code is copy of code above in a WEB_ONLY -->
    <FIGURE>
      <FIGURE split_scale="0.3" web_scale="0.4" scale="0.59" src="img_original/ch2-Z-G-52.svg"></FIGURE>
      <CAPTION>
	Unbalanced tree produced by adjoining 1 through 7 in sequence.
      </CAPTION>
      <LABEL NAME="fig:unbalanced-tree"/>
    </FIGURE>
    </PDF_ONLY>

    <LONG_PAGE lines="3"/>
    <EXERCISE>
    <LABEL NAME="ex:list-to-tree"/>
    The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>list-&gt;tree</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list_to_tree</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>binary tree<SUBINDEX>converting a list to a</SUBINDEX></INDEX>
    <INDEX>list(s)<SUBINDEX>converting to a binary tree</SUBINDEX></INDEX>
    converts an ordered list to a balanced binary tree.  The helper
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>partial-tree</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>partial_tree</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments an integer <LATEXINLINE>$n$</LATEXINLINE> and list of
    at least <LATEXINLINE>$n$</LATEXINLINE> elements and constructs a balanced
    tree containing the first <LATEXINLINE>$n$</LATEXINLINE> elements of the
    list.  The result returned by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>partial-tree</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>partial_tree</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a pair (formed with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the constructed tree and whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the list of elements not included in the tree.
    <SNIPPET>
      <INDEX><DECLARATION>list_to_tree</DECLARATION><FRAGILE/></INDEX> 
      <NAME>list_to_tree</NAME>
      <REQUIRES>make_tree_function</REQUIRES>
      <EXAMPLE>list_to_tree_example</EXAMPLE>
      <EXPECTED>[ 10, [ null, [ null, null ] ] ]</EXPECTED>
      <SCHEME>
(define (list-&gt;tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
    (cons '() elts)
    (let ((left-size (quotient (- n 1) 2)))
      (let ((left-result (partial-tree elts left-size)))
        (let ((left-tree (car left-result))
              (non-left-elts (cdr left-result))
              (right-size (- n (+ left-size 1))))
          (let ((this-entry (car non-left-elts))
                (right-result (partial-tree (cdr non-left-elts)
                                            right-size)))
            (let ((right-tree (car right-result))
                  (remaining-elts (cdr right-result)))
              (cons (make-tree this-entry left-tree right-tree)
                    remaining-elts))))))))
      </SCHEME>
      <JAVASCRIPT>
function list_to_tree(elements) {
    return head(partial_tree(elements, length(elements)));
}
function partial_tree(elts, n) {
    if (n === 0) {
        return pair(null, elts);
    } else {
        const left_size = math_floor((n - 1) / 2);
        const left_result = partial_tree(elts, left_size);
        const left_tree = head(left_result);
        const non_left_elts = tail(left_result);
        const right_size = n - (left_size + 1);
        const this_entry = head(non_left_elts);
        const right_result = partial_tree(tail(non_left_elts), right_size);
        const right_tree = head(right_result);
        const remaining_elts = tail(right_result);
        return pair(make_tree(this_entry, left_tree, right_tree),
                    remaining_elts);
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>list_to_tree_example</NAME>
      <JAVASCRIPT>
list_to_tree(list(10, 20, 30));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
head(tail(list_to_tree(list(10, 20, 30))));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <OL>
      <LI>
        Write a short paragraph explaining as clearly as you can how
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>partial-tree</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>partial_tree</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	works.  Draw the tree produced by
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>list-&gt;tree</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>list_to_tree</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	for the list
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(1 3 5 7 9 11)</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>list(1, 3, 5, 7, 9, 11)</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
        <!-- %It happens to be different from the 3 in fig.2.16 -->
      </LI>
      <LI>
        What is the order of growth in the number of steps required by
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>list-&gt;tree</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>list_to_tree</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	to convert a list of <LATEXINLINE>$n$</LATEXINLINE> elements?
      </LI>
    </OL>
    <SOLUTION>
      <OL>
	<LI>
	  The function
	  <JAVASCRIPTINLINE>partial_tree(elts, n)</JAVASCRIPTINLINE>
	  returns a pair whose head is a balanced tree for the first
	  <LATEXINLINE>$\lfloor (n - 1) / 2 \rfloor$</LATEXINLINE>
	  elements of <JAVASCRIPTINLINE>elts</JAVASCRIPTINLINE>, and whose
	  tail is the list containing the remaining elements of
	  <JAVASCRIPTINLINE>elts</JAVASCRIPTINLINE>. It works by calling itself
	  recursively, to construct the left subtree and right subtree, and
	  then makes the tree, and the required return pair. Thus, the overall
	  function <JAVASCRIPTINLINE>list_to_tree</JAVASCRIPTINLINE> just needs
	  to call <JAVASCRIPTINLINE>partial_tree</JAVASCRIPTINLINE> with the
	  given list and its length, and return the head of the result.
	  <P/>
	  The tree for
	  <JAVASCRIPTINLINE>list(1, 3, 5, 7, 9, 11)</JAVASCRIPTINLINE>
	  is the tree on the right in
	  figure<SPACE/><REF NAME="fig:binary-tree"/>.
	</LI>
	<LI>
	  The order of growth for the run time of function
	  <JAVASCRIPTINLINE>list_to_tree</JAVASCRIPTINLINE> is
	  <LATEXINLINE>$O(n)$</LATEXINLINE> because for every node of
	  the result tree, only a constant amount of work is needed.
	</LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Use the results of exercises<SPACE/><REF NAME="ex:tree-to-list"/>
    and<SPACE/><REF NAME="ex:list-to-tree"/> to give
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE> implementations of
    <INDEX><USE>union_set</USE><SUBINDEX>binary-tree representation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>union-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>union_set</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>intersection_set</USE><SUBINDEX>binary-tree representation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>intersection-set</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>intersection_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    for sets implemented as (balanced) binary trees.<FOOTNOTE>
    Exercises <REF NAME="ex:tree-to-list"/><ENDASH/><REF NAME="ex:tree-ops"/>
    are due to
    <INDEX>Hilfinger, Paul</INDEX>
    Paul Hilfinger.</FOOTNOTE>
    <LABEL NAME="ex:tree-ops"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>union_set_as_tree_solution</NAME>
	<REQUIRES>union_set_ordered</REQUIRES>
	<REQUIRES>list_to_tree</REQUIRES>
	<REQUIRES>tree_to_list_2</REQUIRES>
	<EXAMPLE>union_set_tree_example</EXAMPLE>
	<JAVASCRIPT>
function union_set_as_tree(set1, set2) {
    const list1 = tree_to_list_2(set1);
    const list2 = tree_to_list_2(set2);
    return list_to_tree(union_set(list1, list2));
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>union_set_tree_example</NAME>
	<JAVASCRIPT>
tree_to_list_2(union_set_as_tree(
                    list_to_tree(list(1, 3, 5, 7)),
                    list_to_tree(list(2, 4, 6, 8)) ) );
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<NAME>intersection_set_as_tree_solution</NAME>
	<REQUIRES>intersection_set_ordered</REQUIRES>
	<REQUIRES>list_to_tree</REQUIRES>
	<REQUIRES>tree_to_list_2</REQUIRES>
	<EXAMPLE>intersection_set_tree_example</EXAMPLE>
	<JAVASCRIPT>
function intersection_set_as_tree(set1, set2) {
    const list1=tree_to_list_2(set1);
    const list2=tree_to_list_2(set2);
    return list_to_tree(intersection_set(list1, list2));
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>intersection_set_tree_example</NAME>
	<JAVASCRIPT>
tree_to_list_2(intersection_set_as_tree(
                   list_to_tree(list(1, 3, 5, 8)),
                   list_to_tree(list(2, 3, 6, 8)) ) );
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>set<SUBINDEX>represented as binary tree</SUBINDEX><CLOSE/></INDEX>
  <INDEX>binary tree<SUBINDEX>set represented as</SUBINDEX><CLOSE/></INDEX>

  <SUBHEADING>
    <NAME>Sets and information retrieval</NAME>
  </SUBHEADING>

  <TEXT>
    We have examined options for using lists to represent sets and have
    seen how the choice of representation for a data object can have a
    large impact on the performance of the programs that use the data.
    Another reason for concentrating on sets is that the techniques
    discussed here appear again and again in applications involving
    information retrieval.
  </TEXT>
  <TEXT>
    <INDEX>data base<SUBINDEX><ORDER>set</ORDER>as set of records</SUBINDEX></INDEX>
    <INDEX>set<SUBINDEX>data base as</SUBINDEX></INDEX>
    Consider a data base containing a large number of individual records,
    <INDEX>record, in a data base</INDEX>
    such as the personnel files for a company or the transactions in an
    accounting system.  A typical data-management system spends a large
    amount of time accessing or modifying the data in the records and
    therefore requires an efficient method for accessing records.  This is
    done by identifying a part of each record to serve as an identifying
    <INDEX>key of a record<SUBINDEX>in a data base</SUBINDEX></INDEX>
    <EM>key</EM>.  A key can be anything that uniquely identifies the
    record.  For a personnel file, it might be an employee<APOS/>s ID number.
    For an accounting system, it might be a transaction number.  Whatever
    the key is, when we define the record as a data structure we should
    include a
     <INDEX><USE>key</USE></INDEX> 
    <SCHEMEINLINE>key</SCHEMEINLINE> selector
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that retrieves the key associated with a given record.
  </TEXT>
  <TEXT>
    Now we represent the data base as a set of records. To locate the record
    with a given key we use a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>lookup</SCHEMEINLINE>, which takes as arguments a key and a
    data base and which returns the record that has that key, or false if there
    is no such record.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is implemented in almost the same way as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>element-of-set?</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_element_of_set</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    For example, if the set of records is implemented as an unordered list, we
    could use
    <SNIPPET HIDE="yes">
      <NAME>record</NAME>
      <JAVASCRIPT>
function make_record(key, data) {	  
    return pair(key, data);
}
function key(record) {    
    return head(record);
}
function data(record) {
    return tail(record);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>lookup</DECLARATION><SUBINDEX>in set of records</SUBINDEX></INDEX>
      <REQUIRES>record</REQUIRES>
      <EXAMPLE>lookup_example</EXAMPLE>
      <EXPECTED>[ 3, 'Earth' ]</EXPECTED>
      <SCHEME>
(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) false)
        ((equal? given-key (key (car set-of-records)))
          (car set-of-records))
        (else (lookup given-key (cdr set-of-records)))))
      </SCHEME>
      <JAVASCRIPT>
function lookup(given_key, set_of_records) {
    return is_null(set_of_records)
           ? false
           : equal(given_key, key(head(set_of_records)))
           ? head(set_of_records)
           : lookup(given_key, tail(set_of_records));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>lookup_example</NAME>
      <JAVASCRIPT>
lookup(3, list(make_record(2, "Venus"), 
               make_record(5, "Jupiter"),
               make_record(4, "Mars"),
               make_record(3, "Earth"),
               make_record(6, "Saturn")));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Of course, there are better ways to represent large sets than as unordered
    lists.  Information-retrieval systems in which records have to be
    <QUOTE>randomly accessed</QUOTE> are typically implemented by a tree-based
    method, such as the binary-tree representation discussed previously.
    In designing such a system the methodology of data abstraction
    can be a great help.  The designer can create an initial implementation
    using a simple, straightforward representation such as unordered lists.
    This will be unsuitable for the eventual system, but it can be useful in
    providing a <QUOTE>quick and dirty</QUOTE> data base with which to test the
    rest of the system.  Later on, the data representation can be modified to
    be more sophisticated.  If the data base is accessed in terms of abstract
    selectors and constructors, this change in representation will not require
    any changes to the rest of the system.
  </TEXT>
  <EXERCISE>
    Implement the <SCHEMEINLINE>lookup</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for the case where the set of records is structured as a binary tree,
    ordered by the numerical values of the keys.
    <LABEL NAME="ex:set-lookup-binary-tree"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>ex_set_lookup_binary_tree</NAME>
	<REQUIRES>make_tree_function</REQUIRES>
	<REQUIRES>record</REQUIRES>
	<EXAMPLE>lookup_example2</EXAMPLE>
	<EXPECTED>[ 3, 'Earth' ]</EXPECTED>
	<JAVASCRIPT>
function lookup(given_key, tree_of_records) {
    if (is_null(tree_of_records)) {
        return null;
    } else {
        const this_entry = entry(tree_of_records);
        const this_key = key(this_entry);
        return given_key === this_key 
               ? this_entry
               : given_key &lt; this_key
               ? lookup(given_key, 
                        left_branch(tree_of_records))
               : lookup(given_key, 
                        right_branch(tree_of_records));
    }
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>lookup_example2</NAME>
	<REQUIRES>make_tree_function</REQUIRES>
	<JAVASCRIPT>
const my_fav_planets =
    make_tree(make_record(4, "Mars"),	
              make_tree(make_record(2, "Venus"), 
                        null,
                        make_tree(make_record(3, "Earth"),
                                  null, null)),
              make_tree(make_record(6, "Saturn"),
                        make_tree(make_record(5, "Jupiter"),
                                  null, null),
                        null));

lookup(3, my_fav_planets);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
</SUBSECTION>
    
