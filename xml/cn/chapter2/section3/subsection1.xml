<SUBSECTION>
   <NAME>
    <SPLITINLINE>
      引号
      <JAVASCRIPT>字符串</JAVASCRIPT>
    </SPLITINLINE>
  </NAME> 

   <SPLITINLINE>
    
      
    
    <JAVASCRIPT>
      
    </JAVASCRIPT>
  </SPLITINLINE> 

   <SPLITINLINE>
    
      <INDEX>引号<OPEN></OPEN></INDEX>
    
    <JAVASCRIPT>
      <INDEX>字符串<OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE> 

  <SPLIT>
    <SCHEME>
      <TEXT>
        If we can form compound data using symbols, we can have lists such as
        <INDEX>Sussman, Julie Esther Mazel, nieces of</INDEX>
        <SNIPPET EVAL="no">
          <SCHEME>
(a b c d)
(23 45 17)
((Norah 12) (Molly 9) (Anna 7) (Lauren 6) (Charlotte 4))
          </SCHEME>
        </SNIPPET>
        Lists containing symbols can look just like the expressions of our
        language:
        <SNIPPET EVAL="no">
          <SCHEME>
(* (+ 23 45) (+ x 9))

(define (fact n) (if (= n 1) 1 (* n (fact (- n 1)))))
          </SCHEME>
        </SNIPPET>
      </TEXT>
      <TEXT>
        In order to manipulate symbols we need a new element in our language:
        the ability to <EM>quote</EM> a data object.  Suppose we want to
        construct the list <SCHEMEINLINE>(a b)</SCHEMEINLINE>.  We can<APOS></APOS>t 
        accomplish this with <SCHEMEINLINE>(list a b)</SCHEMEINLINE>, because 
        this expression constructs
        a list of the <EM>values</EM> of <SCHEMEINLINE>a</SCHEMEINLINE> and
	<SCHEMEINLINE>b</SCHEMEINLINE> rather than the symbols themselves.
	This issue is well known in the context of
        <INDEX>quotation<SUBINDEX><ORDER>natural</ORDER>in natural language</SUBINDEX></INDEX>
        <INDEX>natural language<SUBINDEX>quotation in</SUBINDEX></INDEX>
        natural languages, where words and sentences may be regarded either as
        semantic entities or as character strings (syntactic entities).  The
        common practice in natural languages is to use quotation marks to
        indicate that a word or a sentence is to be treated literally as a
        string of characters.  For instance, the first letter of
	<QUOTE>John</QUOTE> is clearly <QUOTE>J.</QUOTE>  If we tell somebody
	<QUOTE>say your name aloud,</QUOTE> we expect to hear that
	person<APOS></APOS>s name.  However, if we tell somebody
	<QUOTE>say <QUOTE>your name</QUOTE> aloud,</QUOTE> we expect to hear
	the words <QUOTE>your name.</QUOTE>  Note that we are forced to nest
	quotation marks to describe what somebody else might
	say.<FOOTNOTE>Allowing quotation in a language wreaks havoc
        with the ability to reason about the language in simple terms, because
        it destroys the notion that equals can be substituted for equals.  For
        example, three is one plus two, but the word <QUOTE>three</QUOTE> is
	not the phrase <QUOTE>one plus two.</QUOTE>  Quotation is powerful
	because it gives us a way to build expressions that manipulate other
	expressions (as we will see when we write an interpreter in
	chapter<SPACE></SPACE><REF NAME="chap:meta"></REF>). But allowing statements in a language that talk
	about other statements in that language makes it very difficult to
	maintain any coherent principle of what <QUOTE>equals can be
	substituted for equals</QUOTE> should mean.  For example, if we know
	that
        <INDEX>Venus</INDEX>
        the evening star is the morning star, then from the statement <QUOTE>the
        evening star is Venus</QUOTE> we can deduce <QUOTE>the morning star is
	Venus.</QUOTE> However, given that <QUOTE>John knows that the evening
	star is Venus</QUOTE> we cannot infer that <QUOTE>John knows that the
	morning star is Venus.</QUOTE></FOOTNOTE>
      </TEXT>
      <TEXT>
        <INDEX>quotation<SUBINDEX><ORDER>Lisp</ORDER>of Lisp data objects</SUBINDEX></INDEX>
        We can follow this same practice to identify lists and symbols that are
        to be treated as data objects rather than as expressions to be
        evaluated.  However, our format for quoting differs from that of
        natural languages in that we place a quotation mark (traditionally,
        the single 
        <INDEX><USE>&apos;</USE> (single quote)</INDEX>
        quote symbol<SPACE></SPACE><SCHEMEINLINE>&apos;</SCHEMEINLINE>) only at the
	beginning of the object to be quoted.  We can get away with this in
	Scheme syntax because we rely on blanks and parentheses to delimit
	objects.  Thus, the meaning of the single quote character is to quote
	the next object.<FOOTNOTE>The single quote is different 
        <INDEX>quotation mark, single vs.<SPACE></SPACE>double</INDEX>
        <INDEX>quotation<SUBINDEX><ORDER>character</ORDER>of character strings</SUBINDEX></INDEX>
        <INDEX>character strings<SUBINDEX>quotation of</SUBINDEX></INDEX>
        <INDEX><USE>&quot;&quot;</USE> (double quote)</INDEX>
        from the double quote we have been using to enclose character strings
	to be printed.  Whereas the single quote can be used to denote lists
	or symbols, the double quote is used only with character strings.
	In this book, the only use for character strings is as items to be
	printed.</FOOTNOTE>
      </TEXT>
      <TEXT>
        <INDEX>string(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
        Now we can distinguish between symbols and their values:
        <SNIPPET>
          <NAME>ab</NAME>
          <SCHEME>
(define a 1)

(define b 2)
          </SCHEME>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>ab</REQUIRES>
          <SCHEME>
(list a b)
          </SCHEME>
          <SCHEMEOUTPUT>
(1 2)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(list &apos;a &apos;b)
          </SCHEME>
          <SCHEMEOUTPUT>
(a b)
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>ab</REQUIRES>
          <SCHEME>
(list &apos;a b)
          </SCHEME>
          <SCHEMEOUTPUT>
(a 2)
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
      <TEXT>
        <INDEX>list(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
        Quotation also allows us to type in compound objects, using the
        conventional printed representation for lists:<FOOTNOTE>Strictly, our
        use of the quotation mark violates the general rule that all compound
        expressions in our language should be delimited by parentheses
        and look like lists.  We
        <INDEX><DECLARATION>quote</DECLARATION></INDEX> 
        <INDEX><DECLARATION>special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</DECLARATION><SUBINDEX><ORDER>quote</ORDER><SCHEMEINLINE>quote</SCHEMEINLINE></SUBINDEX></INDEX>
        can recover this consistency by introducing a special form
	<SCHEMEINLINE>quote</SCHEMEINLINE>, which serves the same purpose as
	the quotation mark.  Thus, we would type
	<SCHEMEINLINE>(quote a)</SCHEMEINLINE> instead of
	<SCHEMEINLINE>&apos;a</SCHEMEINLINE>, and we would type
	<SCHEMEINLINE>(quote (a b c))</SCHEMEINLINE> instead of
	<SCHEMEINLINE>&apos;(a b c)</SCHEMEINLINE>.  This is precisely how the
        interpreter works.  The quotation mark is just a single-character
        abbreviation for wrapping the next complete expression with 
        <SCHEMEINLINE>quote</SCHEMEINLINE> to form
	<SCHEMEINLINE>(quote expression)</SCHEMEINLINE>.  This is important
        because it maintains the principle that any expression seen by the
        interpreter can be manipulated as a data object.  For instance, we
        could construct the expression
        <SCHEMEINLINE>(car &apos;(a b c))</SCHEMEINLINE>, which is the same as
	<SCHEMEINLINE>(car (quote (a b c)))</SCHEMEINLINE>, by evaluating
	<SCHEMEINLINE>(list &apos;car (list &apos;quote &apos;(a b c)))</SCHEMEINLINE>.</FOOTNOTE>
	<SNIPPET>
          <SCHEME>
(car &apos;(a b c))
          </SCHEME>
          <SCHEMEOUTPUT>
a
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(cdr &apos;(a b c))
          </SCHEME>
          <SCHEMEOUTPUT>
(b c)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <INDEX>empty list<SUBINDEX>denoted as <SCHEMEINLINE>&apos;()</SCHEMEINLINE></SUBINDEX></INDEX>
        <INDEX><USE>nil</USE><SUBINDEX>dispensing with</SUBINDEX></INDEX>
        In keeping with this, we can obtain the empty list by evaluating <SCHEMEINLINE>&apos;()</SCHEMEINLINE>, 
        and thus dispense with the variable <SCHEMEINLINE>nil</SCHEMEINLINE>.
      </TEXT>
      <TEXT>
        One additional primitive used in manipulating symbols is 
        <INDEX>equality<SUBINDEX><ORDER>symbols</ORDER>of symbols</SUBINDEX></INDEX>
        <INDEX>symbol(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <INDEX><USE>*eq?</USE> (primitive function)</INDEX>
        <INDEX>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)<SUBINDEX><DECLARATION>eq?</DECLARATION></SUBINDEX></INDEX>
        <SCHEMEINLINE>eq?</SCHEMEINLINE>,
        which takes two symbols as arguments and tests whether they are the
        same.<FOOTNOTE>We can consider two symbols to be
	<QUOTE>the same</QUOTE> if they consist of the same characters in the
	same order.  Such a definition skirts a deep issue that we are not yet
	ready to address: the meaning of <QUOTE>sameness</QUOTE> in a
	programming language.  We will return to this in
        chapter<SPACE></SPACE><REF NAME="chap:state"></REF>
	(section<SPACE></SPACE><REF NAME="sec:costs-of-assignment"></REF>).</FOOTNOTE>
	Using <SCHEMEINLINE>eq?</SCHEMEINLINE>, we can implement a useful
	procedure called <SCHEMEINLINE>memq</SCHEMEINLINE>.  This takes two
        arguments, a symbol and a list.  If the symbol is not contained in the
        list (i.e., is not <SCHEMEINLINE>eq?</SCHEMEINLINE> to any item in the
	list), then <SCHEMEINLINE>memq</SCHEMEINLINE> returns false.
	Otherwise, it returns the sublist of the list beginning with the
	first occurrence of the symbol:
        <INDEX><DECLARATION>memq</DECLARATION></INDEX> 
        <SNIPPET>
          <NAME>memq</NAME>
          <EXAMPLE>memq_example</EXAMPLE>
          <SCHEME>
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
          </SCHEME>
        </SNIPPET>
        For example, the value of
        <SNIPPET>
          <NAME>memq_example</NAME>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq &apos;apple &apos;(pear banana prune))
          </SCHEME>
        </SNIPPET>
        is false, whereas the value of
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq &apos;apple &apos;(x (apple sauce) y apple pear))
          </SCHEME>
        </SNIPPET>
        is <SCHEMEINLINE>(apple pear)</SCHEMEINLINE>.
      </TEXT>

      <EXERCISE>
        What would the interpreter print in response to evaluating each of the
        following expressions?
        <SNIPPET>
          <SCHEME>
(list &apos;a &apos;b &apos;c)
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(list (list &apos;george))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(cdr &apos;((x1 x2) (y1 y2)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(cadr &apos;((x1 x2) (y1 y2)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(pair? (car &apos;(a short list)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq &apos;red &apos;((red shoes) (blue socks)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq &apos;red &apos;(red shoes blue socks))
          </SCHEME>
        </SNIPPET>
      </EXERCISE>

      <EXERCISE> 
        Two lists are said to be 
        <INDEX><USE>equal?</USE></INDEX> 
        <INDEX>equality<SUBINDEX><ORDER>lists</ORDER>of lists</SUBINDEX></INDEX>
        <INDEX>list(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <SCHEMEINLINE>equal?</SCHEMEINLINE> if they contain equal elements
        arranged in the same order.  For example,
        <SNIPPET HIDE="yes">
          <NAME>equal_definition</NAME>
          <SCHEME>
;; procedure equal? to be written by student
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
          <SCHEME>
(equal? &apos;(this is a list) &apos;(this is a list))
          </SCHEME>
        </SNIPPET>
        is true, but
        <SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
          <SCHEME>
(equal? &apos;(this is a list) &apos;(this (is a) list))
          </SCHEME>
        </SNIPPET>
        is false.  To be more precise, we can define
	<SCHEMEINLINE>equal?</SCHEMEINLINE> recursively in terms of the basic
	<SCHEMEINLINE>eq?</SCHEMEINLINE> equality of symbols by saying that
	<SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
	<SCHEMEINLINE>equal?</SCHEMEINLINE> if they are both symbols and the
	symbols are <SCHEMEINLINE>eq?</SCHEMEINLINE>, or if they are both
	lists such that <SCHEMEINLINE>(car a)</SCHEMEINLINE> is
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to
	<SCHEMEINLINE>(car b)</SCHEMEINLINE> and 
        <SCHEMEINLINE>(cdr a)</SCHEMEINLINE> is
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to
	<SCHEMEINLINE>(cdr b)</SCHEMEINLINE>.  
        Using this idea, implement <SCHEMEINLINE>equal?</SCHEMEINLINE> as a
        procedure.<FOOTNOTE>In practice, programmers use
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to compare lists that contain
	numbers as well as symbols.  Numbers are not considered to be symbols.
	The question
        <INDEX>number(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <INDEX>equality<SUBINDEX><ORDER>numbers</ORDER>of numbers</SUBINDEX></INDEX>
        of whether two numerically equal numbers (as tested by
	<SCHEMEINLINE>=</SCHEMEINLINE>) are also
	<SCHEMEINLINE>eq?</SCHEMEINLINE> is highly implementation-dependent.
	A better definition of <SCHEMEINLINE>equal?</SCHEMEINLINE> (such as
	the one that comes as a primitive in Scheme) would also stipulate that
	if <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
        both numbers, then <SCHEMEINLINE>a</SCHEMEINLINE> and
	<SCHEMEINLINE>b</SCHEMEINLINE> are <SCHEMEINLINE>equal?</SCHEMEINLINE>
	if they are numerically equal.</FOOTNOTE>
      </EXERCISE>

      <EXERCISE>
        Eva Lu Ator types to the interpreter the expression
        <SNIPPET>
          <SCHEME>
(car &apos;&apos;abracadabra)
          </SCHEME>
        </SNIPPET>
        To her surprise, the interpreter prints back
	<SCHEMEINLINE>quote</SCHEMEINLINE>.  Explain.
        <LABEL NAME="ex:double-quote"></LABEL>
      </EXERCISE>
    </SCHEME>
    
    <JAVASCRIPT>
       <TEXT>
	到目前为止，我们使用字符串来显示消息，
	使用函数<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 和
	<JAVASCRIPTINLINE>error</JAVASCRIPTINLINE> （例如在 
	练习<SPACE></SPACE><REF NAME="ex:search-for-primes"></REF>中）。
        我们可以使用字符串形成复合数据，并具有诸如这样的列表
	<INDEX>Wrigstad, Tobias 的女儿</INDEX>
	<INDEX>Henz, Martin 的孩子</INDEX>
        
          <JAVASCRIPT>
list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)
list(23, 45, 17)
list(list(&quot;Jakob&quot;, 27), list(&quot;Lova&quot;, 9), list(&quot;Luisa&quot;, 24))
          </JAVASCRIPT>
        
        为了将字符串与名称区分开来，我们将它们括在
	<INDEX>引号<SUBINDEX>双重</SUBINDEX></INDEX>
        <INDEX><USE>&quot;&quot;</USE>（双引号）</INDEX>
	中。 例如，JavaScript 表达式
	<JAVASCRIPTINLINE>z</JAVASCRIPTINLINE> 表示
	名称<SPACE></SPACE><JAVASCRIPTINLINE>z</JAVASCRIPTINLINE>的值，而 JavaScript
	表达式 <JAVASCRIPTINLINE>&quot;z&quot;</JAVASCRIPTINLINE> 表示一个由单个字符组成的字符串，即英文字母表中最后一个字母的小写形式。
      </TEXT>
        <TEXT>
        通过引号，我们可以区分字符串和名称：
        
          <NAME>ab</NAME>
          <JAVASCRIPT>
const a = 1;
const b = 2;
          </JAVASCRIPT>
        
        
	  <NAME>list_ab</NAME>
          <REQUIRES>ab</REQUIRES>
	  <EXPECTED>[ 1, [ 2, null ] ]</EXPECTED>
          <JAVASCRIPT>
list(a, b);
          </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
[1, [2, null]]
          </JAVASCRIPT_OUTPUT>
	
        
	  <NAME>list_quote_a_quote_b</NAME>
	  <EXPECTED>[ &apos;a&apos;, [ &apos;b&apos;, null ] ]</EXPECTED>
          <JAVASCRIPT>
list(&quot;a&quot;, &quot;b&quot;);
	  </JAVASCRIPT>
          <JAVASCRIPT_OUTPUT>
[&quot;a&quot;, [&quot;b&quot;, null]]
          </JAVASCRIPT_OUTPUT>
	
        
	  <NAME>list_quote_a_b</NAME>
          <REQUIRES>ab</REQUIRES>
	  <EXPECTED>[ &apos;a&apos;, [ 2, null ] ]</EXPECTED>
          <JAVASCRIPT>
list(&quot;a&quot;, b);
          </JAVASCRIPT>
          <JAVASCRIPT_OUTPUT>
[&quot;a&quot;, [2, null]]
          </JAVASCRIPT_OUTPUT>
	
      </TEXT>
       <TEXT> 
	在节 <SPACE></SPACE><REF NAME="sec:conditionals"></REF> ，我们介绍了
	 <JAVASCRIPTINLINE> === </JAVASCRIPTINLINE> 和
	 <JAVASCRIPTINLINE> !== </JAVASCRIPTINLINE> 
	作为数字上的原语谓词。
<INDEX> 相等性<SUBINDEX><ORDER>字符串</ORDER>字符串的</SUBINDEX> </INDEX>
	<INDEX> <USE>===</USE><SUBINDEX><ORDER>字符串</ORDER>作为字符串比较运算符</SUBINDEX><FRAGILE></FRAGILE> </INDEX>
	<INDEX> <OPERATOR></OPERATOR><SUBINDEX><USE>===</USE>（用于字符串比较）</SUBINDEX><FRAGILE></FRAGILE> </INDEX>
	<INDEX> <USE>&quot;!==</USE><ORDER>;4</ORDER><SUBINDEX>作为字符串比较运算符<ORDER>数值</ORDER></SUBINDEX><FRAGILE></FRAGILE> </INDEX>
	<INDEX> <OPERATOR></OPERATOR><SUBINDEX><USE>&quot;!==</USE>（用于字符串比较）<ORDER>;4</ORDER></SUBINDEX><FRAGILE></FRAGILE> </INDEX> 
	从现在开始，
	我们将允许两个字符串作为操作数
<JAVASCRIPTINLINE> === </JAVASCRIPTINLINE> 和
	 <JAVASCRIPTINLINE> !== </JAVASCRIPTINLINE> 。谓词
	 <JAVASCRIPTINLINE> === </JAVASCRIPTINLINE> 
	当且仅当两个字符串相同时返回 true，并且
<JAVASCRIPTINLINE> !== </JAVASCRIPTINLINE> 
	当且仅当两个字符串不同时返回 true。
<FOOTNOTE> 
        我们可以认为两个字符串<QUOTE>相同</QUOTE>，如果它们由相同顺序的相同字符组成。这样的定义暂时避开了一个我们尚未准备处理的深刻问题：在编程语言中<QUOTE>相同</QUOTE>的意义。我们将在第<SPACE></SPACE><REF NAME="chap:state"></REF>章中回到这个问题（第<SPACE></SPACE><REF NAME="sec:costs-of-assignment"></REF>节）。 </FOOTNOTE> 
	使用 <SPACE></SPACE><JAVASCRIPTINLINE> === </JAVASCRIPTINLINE> ，我们可以实现一个称为  <JAVASCRIPTINLINE> member </JAVASCRIPTINLINE> 。
	其接受两个参数：一个字符串和一个字符串列表或一个数字和一个数字列表。
	如果第一个参数不在列表中（即，不是
<JAVASCRIPTINLINE> === </JAVASCRIPTINLINE> 列表中的任何项），
        则 
 <JAVASCRIPTINLINE>member</JAVASCRIPTINLINE> 返回
	<JAVASCRIPTINLINE>null</JAVASCRIPTINLINE>。 否则，它返回
	列表中以该字符串或数字第一次出现的子列表开始：
<SNIPPET>
          <INDEX><DECLARATION>member</DECLARATION></INDEX> 
          <NAME>memq</NAME>
          <EXAMPLE>memq_example</EXAMPLE>
	  <EXPECTED>null</EXPECTED>
          <JAVASCRIPT>
function member(item, x) {
    return is_null(x)
           ? null
           : item === head(x)
           ? x
           : member(item, tail(x));
}
          </JAVASCRIPT>
        </SNIPPET> 
        例如，
<SNIPPET>
          <NAME>memq_example</NAME>
          <REQUIRES>memq</REQUIRES>
          <JAVASCRIPT>
member(&quot;apple&quot;, list(&quot;pear&quot;, &quot;banana&quot;, &quot;prune&quot;))
          </JAVASCRIPT>
          <JAVASCRIPT_TEST>
member(&quot;apple&quot;, list(&quot;pear&quot;, &quot;banana&quot;, &quot;prune&quot;));
	  </JAVASCRIPT_TEST>
        </SNIPPET> 
        是<JAVASCRIPTINLINE>null</JAVASCRIPTINLINE>，而
         <SNIPPET>
          <REQUIRES>memq</REQUIRES>
	  <EXPECTED>[ &apos;apple&apos;, [ &apos;pear&apos;, null ] ]</EXPECTED>
          <JAVASCRIPT>
member(&quot;apple&quot;, list(&quot;x&quot;, &quot;y&quot;, &quot;apple&quot;, &quot;pear&quot;))
	  </JAVASCRIPT>
          <JAVASCRIPT_TEST>
member(&quot;apple&quot;, list(&quot;x&quot;, &quot;y&quot;, &quot;apple&quot;, &quot;pear&quot;));
	  </JAVASCRIPT_TEST>
        </SNIPPET> 
        是<JAVASCRIPTINLINE>list(&quot;apple&quot;, &quot;pear&quot;)</JAVASCRIPTINLINE>。
       </TEXT>

      <EXERCISE> 
        计算以下每个表达式的结果，使用方框表示法和列表表示法？
         <SNIPPET>
          <JAVASCRIPT>
list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET>
          <JAVASCRIPT>
list(list(&quot;george&quot;))
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET>
          <JAVASCRIPT>
tail(list(list(&quot;x1&quot;, &quot;x2&quot;), list(&quot;y1&quot;, &quot;y2&quot;)))
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET>
          <JAVASCRIPT>
tail(head(list(list(&quot;x1&quot;, &quot;x2&quot;), list(&quot;y1&quot;, &quot;y2&quot;))))
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <JAVASCRIPT>
member(&quot;red&quot;, list(&quot;blue&quot;, &quot;shoes&quot;, &quot;yellow&quot;, &quot;socks&quot;))
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET POSTPADDING="no">
          <REQUIRES>memq</REQUIRES>
          <JAVASCRIPT>
member(&quot;red&quot;, list(&quot;red&quot;, &quot;shoes&quot;, &quot;blue&quot;, &quot;socks&quot;))
          </JAVASCRIPT>
        </SNIPPET>
	<SOLUTION>
          <SNIPPET>
	    <NAME>list_abc</NAME>
	    <EXPECTED>[ &apos;a&apos;, [ &apos;b&apos;, [ &apos;c&apos;, null ] ] ]</EXPECTED>
            <JAVASCRIPT_RUN>
list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);
// [&quot;a&quot;, [&quot;b&quot;, [&quot;c&quot;, null]]]
            </JAVASCRIPT_RUN>
            <JAVASCRIPT>
[&quot;a&quot;, [&quot;b&quot;, [&quot;c&quot;, null]]]
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET>
	    <NAME>list_list_george</NAME>
	    <EXPECTED>[ [ &apos;george&apos;, null ], null ]</EXPECTED>
            <JAVASCRIPT_RUN>
list(list(&quot;george&quot;));
// [[&quot;george&quot;, null], null]
	    </JAVASCRIPT_RUN>
            <JAVASCRIPT>
[[&quot;george&quot;, null], null]
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET>
	    <NAME>tail_list_list_x1</NAME>
	    <EXPECTED>[ [ &apos;y1&apos;, [ &apos;y2&apos;, null ] ], null ]</EXPECTED>
            <JAVASCRIPT_RUN>
tail(list(list(&quot;x1&quot;, &quot;x2&quot;), list(&quot;y1&quot;, &quot;y2&quot;)));
// [[&quot;y1&quot;, [&quot;y2&quot;, null]], null]
	    </JAVASCRIPT_RUN>
            <JAVASCRIPT>
[[&quot;y1&quot;, [&quot;y2&quot;, null]], null]
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET>
	    <NAME>tail_head_list_list</NAME>
	    <EXPECTED>[ &apos;x2&apos;, null ]</EXPECTED>
            <JAVASCRIPT_RUN>
tail(head(list(list(&quot;x1&quot;, &quot;x2&quot;), list(&quot;y1&quot;, &quot;y2&quot;))));
// [&quot;x2&quot;, null]
	    </JAVASCRIPT_RUN>
            <JAVASCRIPT>
[&quot;x2&quot;, null]
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET>
	    <NAME>member_red_list_list</NAME>
	    <EXPECTED>null</EXPECTED>
            <REQUIRES>memq</REQUIRES>
            <JAVASCRIPT_RUN>
member(&quot;red&quot;, list(list(&quot;red&quot;, &quot;shoes&quot;), list(&quot;blue&quot;, &quot;socks&quot;)));
// null
	    </JAVASCRIPT_RUN>
            <JAVASCRIPT>
null
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET>
	    <NAME>member_red_list_red</NAME>
	    <EXPECTED>[ &apos;shoes&apos;, [ &apos;blue&apos;, [ &apos;socks&apos;, null ] ] ]</EXPECTED>
            <REQUIRES>memq</REQUIRES>
            <JAVASCRIPT_RUN>
member(&quot;shoes&quot;, list(&quot;red&quot;, &quot;shoes&quot;, &quot;blue&quot;, &quot;socks&quot;));
// [&quot;shoes&quot;, [&quot;blue&quot;, [&quot;socks&quot;, null]]]
	    </JAVASCRIPT_RUN>
            <JAVASCRIPT>
[&quot;red&quot;, [&quot;shoes&quot;, [&quot;blue&quot;, [&quot;socks&quot;, null]]]]
            </JAVASCRIPT>
          </SNIPPET>
	</SOLUTION>
	<LABEL NAME="ex:2_53"></LABEL>
      </EXERCISE>

      <EXERCISE>
	<LABEL NAME="ex:equal?"></LABEL> 
	两个列表被认为是<INDEX><USE>相等</USE></INDEX>
	<INDEX>相等性<SUBINDEX><ORDER>列表</ORDER>的列表</SUBINDEX></INDEX>
	<INDEX>相等性<SUBINDEX><ORDER>数值</ORDER>的数值</SUBINDEX></INDEX>
	<INDEX>相等性<SUBINDEX><ORDER>字符串</ORDER>的字符串</SUBINDEX></INDEX>
	<INDEX>列表<SUBINDEX>的相等性</SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>
	如果它们包含相同顺序的相等元素。例如，
<SNIPPET HIDE="yes">
          <NAME>equal_definition</NAME>
          <JAVASCRIPT>
// function equal to be written by student
          </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET>
	  <NAME>equal_example_1</NAME>
          <REQUIRES>equal_definition</REQUIRES>
	  <EXPECTED>true</EXPECTED>
          <JAVASCRIPT>
equal(list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;), list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;))
          </JAVASCRIPT>
          <JAVASCRIPT_TEST>
equal(list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;), list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;));
	  </JAVASCRIPT_TEST>
	</SNIPPET> 
	为真，但是
	 <SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
	  <EXPECTED>false</EXPECTED>
          <JAVASCRIPT>
equal(list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;), list(&quot;this&quot;, list(&quot;is&quot;, &quot;a&quot;), &quot;list&quot;))
          </JAVASCRIPT>
          <JAVASCRIPT_TEST>
equal(list(&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;list&quot;), list(&quot;this&quot;, list(&quot;is&quot;, &quot;a&quot;), &quot;list&quot;));
	  </JAVASCRIPT_TEST>
	</SNIPPET>
	 
	<INDEX><USE>数</USE><SUBINDEX>的相等性</SUBINDEX><FRAGILE></FRAGILE></INDEX>
	<INDEX>字符串<SUBINDEX>的相等性</SUBINDEX></INDEX>
	为假。 更精确地说，我们可以通过
	<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>表示的数值和字符串的基本相等性来递归定义
	<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>，
	即如果它们都是字符串或者
	它们都是数字并且它们是
	<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>，或者如果它们都是成对的，并且
	<JAVASCRIPTINLINE>head(a)</JAVASCRIPTINLINE>与
	<JAVASCRIPTINLINE>head(b)</JAVASCRIPTINLINE>
	<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>并且
	<JAVASCRIPTINLINE>tail(a)</JAVASCRIPTINLINE>与
	<JAVASCRIPTINLINE>tail(b)</JAVASCRIPTINLINE>相等。 使用这个概念，
	实现<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>作为一个
	函数。
	 <SOLUTION> 
	  以下函数为第 1 和第 2 章实现了一般结构相等性，假定
	  <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> 只能应用于两个数字或两个字符串，否则会报告错误。
	  下面的<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>函数只会在两个参数都是函数时遇到错误，因为在第 1 和第 2 章中，函数的相等性意义尚不明确。
           <SNIPPET>
            <NAME>equal</NAME>
	    <EXPECTED>true</EXPECTED>
	    <EXAMPLE>equal_example_1</EXAMPLE>
            <JAVASCRIPT>
function equal(xs, ys) {
    return is_pair(xs)
           ? (is_pair(ys) &amp;&amp;
              equal(head(xs), head(ys)) &amp;&amp; 
              equal(tail(xs), tail(ys)))
           : is_null(xs)
           ? is_null(ys)
           : is_number(xs)
           ? (is_number(ys) &amp;&amp; xs === ys)
           : is_boolean(xs)
           ? (is_boolean(ys) &amp;&amp; ((xs &amp;&amp; ys) || (!xs &amp;&amp; !ys)))
           : is_string(xs)
           ? (is_string(ys) &amp;&amp; xs === ys)
           : is_undefined(xs)
           ? is_undefined(ys)
           : // we know now that xs is a function
             (is_function(ys) &amp;&amp; xs === ys);
}
            </JAVASCRIPT>
            <SCHEME>
            </SCHEME>
	  </SNIPPET> 
	  在第 3 章，我们扩展了<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>，使其可以应用于任何值并给出有意义的结果（指针相等性）。
	  上述<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>函数在这种扩展含义下仍然有效，但可以简化如下：
           <SNIPPET>
            <NAME>equal_2</NAME>
	    <EXPECTED>true</EXPECTED>
	    <EXAMPLE>equal_example_1</EXAMPLE>
            <JAVASCRIPT>
function equal(xs, ys) {
    return is_pair(xs)
           ? (is_pair(ys) &amp;&amp;
              equal(head(xs), head(ys)) &amp;&amp; 
              equal(tail(xs), tail(ys)))
           : xs === ys;
}
            </JAVASCRIPT>
            <SCHEME>
            </SCHEME>
	  </SNIPPET>
	</SOLUTION>
      </EXERCISE>

       <EXERCISE>
	JavaScript 解释器读取双<INDEX><USE>引号</USE>（双引号）</INDEX>
	<JAVASCRIPTINLINE>&quot;</JAVASCRIPTINLINE>后的字符，直到找到另一个双引号。两个引号之间的所有字符都是字符串的一部分，但不包括引号本身。但如果我们希望字符串包含双引号呢？为此，JavaScript 还允许使用<INDEX>引号<SUBINDEX>单</SUBINDEX></INDEX>
    <INDEX><USE>&apos;</USE>（单引号）</INDEX>
	单引号来分隔字符串，例如在
	<JAVASCRIPTINLINE>&apos;say your name aloud&apos;</JAVASCRIPTINLINE>中。 
    在单引号字符串内，我们可以使用双引号反之亦然，因此
	<JAVASCRIPTINLINE>&apos;say &quot;your name&quot; aloud&apos;</JAVASCRIPTINLINE> 和
	<JAVASCRIPTINLINE>&quot;say &apos;your name&apos; aloud&quot;</JAVASCRIPTINLINE> 是有效的字符串，它们在位置 4 和 14 处有不同字符，假设从 0 开始计数。根据使用的字体，两个单引号可能很难与双引号区分开。你能分辨哪个是哪个并计算出以下表达式的值吗？
    
	  <NAME>which_is_which</NAME>
	  <EXPECTED>false</EXPECTED>
      <JAVASCRIPT>
&apos; &quot;&apos; === &quot;&quot;
	  </JAVASCRIPT>
      <JAVASCRIPT_RUN>
&apos; &quot;&apos; === &quot;&quot;;
	  </JAVASCRIPT_RUN>
    

	<SOLUTION>
	  给定的表达式检查一个只包含一个双引号字符的字符串是否等于空字符串。结果值为 false。
	</SOLUTION>
    
  </EXERCISE>
 </JAVASCRIPT>
  </SPLIT>

   <SPLITINLINE>
    
      <INDEX>引号<CLOSE></CLOSE></INDEX>
    
    <JAVASCRIPT>
      <INDEX>字符串<CLOSE></CLOSE></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE> 
</SUBSECTION>
