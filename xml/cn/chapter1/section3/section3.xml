<SECTION>
       <NAME>
      形成高阶抽象
      <SPLITINLINE>
	  过程
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>
      </NAME> 

       <SECTIONCONTENT></SECTIONCONTENT> 

      <LABEL NAME="sec:higher-order-procedures"></LABEL>

      <TEXT> 
我们已经看到
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
实际上是描述对数字进行复合操作的抽象，与特定数字无关。例如，当我们
<SPLITINLINE>
  <JAVASCRIPT>声明</JAVASCRIPT>
</SPLITINLINE>
<SNIPPET PAGE="56">
	  <INDEX><DECLARATION>cube</DECLARATION></INDEX>
          <NAME>cube_definition</NAME>
          <EXAMPLE>cube_example</EXAMPLE>
          <SCHEME>
(define (cube x) (* x x x))
          </SCHEME>
          <JAVASCRIPT>
function cube(x) {
    return x * x * x;
}
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET PAGE="56" HIDE="yes">
          <NAME>cube_example</NAME>
	  <EXPECTED>27</EXPECTED>
          <REQUIRES>cube_definition</REQUIRES>
          <SCHEME>
(cube 3)
          </SCHEME>
          <JAVASCRIPT>
cube(3);
          </JAVASCRIPT>
        </SNIPPET> 
我们并不是在讨论某个特定数字的立方，而是关于获得任何数字的立方的方法。当然，我们可以不通过
<SPLITINLINE>
  定义这个过程，
  <JAVASCRIPT>声明这个函数，</JAVASCRIPT>
</SPLITINLINE>
来实现，始终写出这样的表达式
<SNIPPET EVAL="no">
          <SCHEME>
(* 3 3 3)
(* x x x)
(* y y y)        
          </SCHEME>
          <JAVASCRIPT>
3 * 3 * 3
x * x * x
y * y * y
        </JAVASCRIPT>
        </SNIPPET> 
并且从未提及 
<SCHEMEINLINE>cube</SCHEMEINLINE> 
明确这一点。这
会使我们处于严重劣势，迫使我们始终在语言中作为原语的特定操作（在这种情况下是乘法）层面上工作，而不是在更高层次的操作方面。我们的程序可以计算立方，但我们的语言缺乏表达立方概念的能力。我们应该从强大的编程语言中要求的一个功能是通过为常见模式赋予名称来构建抽象的能力，接着直接在抽象方面工作。
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
提供了这种能力。这就是为什么几乎所有编程语言都包括用于
<SPLITINLINE>
  定义过程。
  <JAVASCRIPT>声明函数。</JAVASCRIPT>
</SPLITINLINE>
</TEXT>
       <TEXT>
即使在数值处理方面，如果我们仅限于
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
其参数必须是数字，我们的抽象创建能力也将受到严重限制。通常，相同的编程模式将与多种不同的
<SPLITINLINE>
  过程。
  <JAVASCRIPT>函数。</JAVASCRIPT>
</SPLITINLINE>
一起使用。为了将这些模式表达为概念，我们需要构造
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
能够接受
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
作为参数或返回
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
作为值。
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
用于操作
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
的称为
<INDEX>高阶 <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE></INDEX>
<EM>高阶 <SPLITINLINE>过程。<JAVASCRIPT>函数。</JAVASCRIPT></SPLITINLINE></EM>
本节展示了高阶
<SPLITINLINE>
  过程
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
如何作为强大的抽象机制，极大地增强我们语言的表达能力。
</TEXT> 

      <!--  Subsection 1 : Procedures as Arguments  -->
      &amp;subsection1.3.1;

      <!--  Subsection 2 : Constructing Procedures Using Lambda  -->
      &amp;subsection1.3.2;

      <!--  Subsection 3 : Procedures as General Methods  -->
      &amp;subsection1.3.3;

      <!--  Subsection 4 : Procedures as Returned Values  -->
      &amp;subsection1.3.4;

      </SECTION>
