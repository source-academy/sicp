    <SECTION>
      <NAME>
        Formulating Abstractions with Higher-Order 
        <SPLITINLINE>
	  <SCHEME>Procedures</SCHEME>
	  <PYTHON>Functions</PYTHON>
	</SPLITINLINE>
      </NAME>

      <SECTIONCONTENT/>

      <LABEL NAME="sec:higher-order-procedures"/>

      <TEXT>
        We have seen that
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        are, in effect, abstractions that describe compound operations on
	numbers independent of the particular numbers. For example, when we
	<SPLITINLINE>
	  <PYTHON>declare</PYTHON>
	</SPLITINLINE>
        <SNIPPET PAGE="56">
	  <INDEX><DECLARATION>cube</DECLARATION></INDEX>
          <NAME>cube_definition</NAME>
          <EXAMPLE>cube_example</EXAMPLE>
          <SCHEME>
(define (cube x) (* x x x))
          </SCHEME>
          <PYTHON>
function cube(x) {
    return x * x * x;
}
          </PYTHON>
        </SNIPPET>
        <SNIPPET PAGE="56" HIDE="yes">
          <NAME>cube_example</NAME>
	  <EXPECTED>27</EXPECTED>
          <REQUIRES>cube_definition</REQUIRES>
          <SCHEME>
(cube 3)
          </SCHEME>
          <PYTHON>
cube(3);
          </PYTHON>
        </SNIPPET>
        we are not talking about the cube of a particular number, but rather
        about a method for obtaining the cube of any number.  Of course we could
	get along without ever 
        <SPLITINLINE>
	  <SCHEME>defining this procedure,</SCHEME>
	  <PYTHON>declaring this function,</PYTHON>
	</SPLITINLINE>
	by always writing expressions such as
        <SNIPPET EVAL="no">
          <SCHEME>
(* 3 3 3)
(* x x x)
(* y y y)        
          </SCHEME>
          <PYTHON>
3 * 3 * 3
x * x * x
y * y * y
        </PYTHON>
        </SNIPPET>
        and never mentioning <SCHEMEINLINE>cube</SCHEMEINLINE> explicitly. This
	would place us at a serious disadvantage, forcing us to work always at
	the level of the particular operations that happen to be primitives in
	the language (multiplication, in this case) rather than in terms of
	higher-level operations.  Our programs would be able to compute cubes,
	but our language would lack the ability to express the concept of cubing.
	One of the things we should demand from a powerful programming language
	is the ability to build abstractions by assigning names to common
        patterns and then to work in terms of the abstractions directly.
        <SPLITINLINE>
	  <SCHEME>Procedures</SCHEME>
	  <PYTHON>Functions</PYTHON>
	</SPLITINLINE>
        provide this ability.  This is why all but the most primitive
	programming languages include mechanisms for 
        <SPLITINLINE>
	  <SCHEME>defining procedures.</SCHEME>
	  <PYTHON>declaring functions.</PYTHON>
	</SPLITINLINE>
      </TEXT>
      <TEXT>
        Yet even in numerical processing we will be severely limited in our
        ability to create abstractions if we are restricted to
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        whose parameters must be numbers.  Often the same programming pattern
        will be used with a number of different
        <SPLITINLINE>
	  <SCHEME>procedures.</SCHEME>
	  <PYTHON>functions.</PYTHON>
	</SPLITINLINE>
	To express such patterns as concepts, we will need to construct
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        that can accept
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        as arguments or return
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        as values.
        <SPLITINLINE>
	  <SCHEME>Procedures</SCHEME>
	  <PYTHON>Functions</PYTHON>
	</SPLITINLINE>
        that manipulate
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        are called 
        <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME><PYTHON>functions</PYTHON></SPLITINLINE></INDEX>
        <EM>higher-order <SPLITINLINE><SCHEME>procedures.</SCHEME><PYTHON>functions.</PYTHON></SPLITINLINE></EM>
	This section shows how higher-order
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
	</SPLITINLINE>
        can serve as powerful abstraction mechanisms, vastly increasing the
	expressive power of our language.
      </TEXT>

      <!-- Subsection 1 : Procedures as Arguments -->
      &amp;subsection1.3.1;

      <!-- Subsection 2 : Constructing Procedures Using Lambda -->
      &amp;subsection1.3.2;

      <!-- Subsection 3 : Procedures as General Methods -->
      &amp;subsection1.3.3;

      <!-- Subsection 4 : Procedures as Returned Values -->
      &amp;subsection1.3.4;

      </SECTION>
