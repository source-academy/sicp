<SUBSECTION>
  <NAME>
    Lexical Addressing
  </NAME>

  <LABEL NAME="sec:lexical-addressing"/>

  <INDEX>compiler for JavaScript<SUBINDEX>lexical addressing<OPEN/></SUBINDEX></INDEX>
  <INDEX>lexical addressing<OPEN/></INDEX>

  <TEXT>
    One of the most common optimizations performed by compilers is the
    optimization of
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    lookup. Our compiler, as we have implemented it so far, generates code that
    uses the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation of the evaluator machine.
    <SPLITINLINE>
      <SCHEME>
        This searches for a
      </SCHEME>
      <JAVASCRIPT>
	This searches for a
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    by comparing
    <SPLITINLINE>
      <SCHEME>it</SCHEME>
      <JAVASCRIPT>it</JAVASCRIPT>
    </SPLITINLINE>
    with each
    <SPLITINLINE>
      <SCHEME>
	variable
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    that is currently bound, working frame
    by frame outward through the runtime environment.  This search can be
    expensive if the frames are deeply nested or if there are many
    <SPLITINLINE>
      <SCHEME>variables.</SCHEME>
      <JAVASCRIPT>names.</JAVASCRIPT>
    </SPLITINLINE>
    For example, consider the problem of looking up the value
    of <SCHEMEINLINE>x</SCHEMEINLINE> while evaluating the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x y z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>x * y * z</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in an application of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that is returned by
    <SNIPPET>
      <SCHEME>
(let ((x 3) (y 4))
  (lambda (a b c d e)
    (let ((y (* a b x))
          (z (+ c d x)))
      (* x y z))))
      </SCHEME>
      <JAVASCRIPT>
((x, y) =>
   (a, b, c, d, e) =>
     ((y, z) => x * y * z)(a * b * x, c + d + x))(3, 4)
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
	Since a <SCHEMEINLINE>let</SCHEMEINLINE> expression is just syntactic
	sugar for a <SCHEMEINLINE>lambda</SCHEMEINLINE>
	combination, this expression is equivalent to
	<SNIPPET>
	  <SCHEME>
((lambda (x y)
   (lambda (a b c d e)
     ((lambda (y z) (* x y z))
      (* a b x)
      (+ c d x))))
  3
  4)
	  </SCHEME>
	</SNIPPET>
      </SCHEME>
    </SPLIT>
    Each time
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    searches for <SCHEMEINLINE>x</SCHEMEINLINE>, it must determine that
    the symbol
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>x</SCHEMEINLINE> is not
	<SCHEMEINLINE>eq?</SCHEMEINLINE> to
	<SCHEMEINLINE>y</SCHEMEINLINE> or
	<SCHEMEINLINE>z</SCHEMEINLINE> (in the first frame), nor to
	<SCHEMEINLINE>a</SCHEMEINLINE>, <SCHEMEINLINE>b</SCHEMEINLINE>,
	<SCHEMEINLINE>c</SCHEMEINLINE>, <SCHEMEINLINE>d</SCHEMEINLINE>, or
	<SCHEMEINLINE>e</SCHEMEINLINE> (in the second frame).
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"x"</JAVASCRIPTINLINE> is not
	equal to
	<JAVASCRIPTINLINE>"y"</JAVASCRIPTINLINE> or
	<JAVASCRIPTINLINE>"z"</JAVASCRIPTINLINE> (in the first frame), nor to
	<JAVASCRIPTINLINE>"a"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"b"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"c"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"d"</JAVASCRIPTINLINE>, or
	<JAVASCRIPTINLINE>"e"</JAVASCRIPTINLINE> (in the second frame).
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
	We will assume, for the moment, that our programs do not use
	<SCHEMEINLINE>define</SCHEMEINLINE><EMDASH/>that variables are bound only
	with <SCHEMEINLINE>lambda</SCHEMEINLINE>.
      </SCHEME>
    </SPLIT>
    Because our language is
    <INDEX>lexical scoping<SUBINDEX>environment structure and</SUBINDEX></INDEX>
    lexically scoped, the runtime environment for any
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    will have a
    structure that parallels the lexical structure of the program in which
    the
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    appears.<SPLITINLINE><SCHEME><FOOTNOTE>This is not true if
    we allow internal definitions, unless we scan them out.
    See exercise<SPACE/><REF NAME="ex:lexical-address-end"/>.
    </FOOTNOTE></SCHEME></SPLITINLINE>
    Thus, the compiler can know, when it analyzes the
    above expression,
    that each time the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is applied the
    <SPLITINLINE>
      <SCHEME>
	variable
	<SCHEMEINLINE>x</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	binding for
	<JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x y z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>x * y * z</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will be found two frames out from the
    current frame and will be the first
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>binding</JAVASCRIPT>
    </SPLITINLINE>
    in that frame.
  </TEXT>
  <TEXT>
    We can exploit this fact by inventing a new kind of
    <SPLITINLINE>
      <SCHEME>variable-lookup</SCHEME>
      <JAVASCRIPT>name-lookup</JAVASCRIPT>
    </SPLITINLINE>
    operation,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments an environment and a
    <INDEX>lexical addressing<SUBINDEX>lexical address</SUBINDEX></INDEX>
    <EM>lexical address</EM> that
    consists of two numbers: a <EM>frame number</EM>, which specifies how many
    frames to pass over, and a <EM>displacement number</EM>, which specifies
    how many
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>bindings</JAVASCRIPT>
    </SPLITINLINE>
    to pass over in that frame.
    <INDEX><USE>lexical_address_lookup</USE></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The operation
	<JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will produce the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    stored at that lexical address
    relative to the current environment.  If we add the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation to our machine, we can make the compiler generate code that
    references
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>names</JAVASCRIPT>
    </SPLITINLINE>
    using this operation, rather than
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Similarly, our compiled code can use a new
    <INDEX><USE>lexical_address_assign</USE></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_assign</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation instead of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>assign_symbol_value</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <JAVASCRIPT>
	With lexical addressing, there is no need to include any
	symbolic references to names in the object code,
	and frames do not need to include symbols at run time.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    In order to generate such code, the compiler must be able to determine
    the lexical address of a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    it is about to compile a reference
    to.  The lexical address of a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    in a program depends on where
    one is in the code.  For example, in the following program, the
    address of <SCHEMEINLINE>x</SCHEMEINLINE> in expression
    <LATEXINLINE>$e_1$</LATEXINLINE> is (2,0)<EMDASH/>two frames back
    and the first
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    in the frame.  At that point
    <SCHEMEINLINE>y</SCHEMEINLINE> is at
    address (0,0) and <SCHEMEINLINE>c</SCHEMEINLINE> is at address (1,2).
    In expression
    <LATEXINLINE>$e_2$</LATEXINLINE>,
    <SCHEMEINLINE>x</SCHEMEINLINE> is at (1,0),
    <SCHEMEINLINE>y</SCHEMEINLINE> is at (1,1), and
    <SCHEMEINLINE>c</SCHEMEINLINE> is at (0,2).
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
((lambda (x y)
   (lambda (a b c d e)
     ((lambda (y z) e1)
        e2
        (+ c d x))))
 3
 4)
      </SCHEME>
      <JAVASCRIPT>
((x, y) =>
   (a, b, c, d, e) =>
     ((y, z) => $e_1$)($e_2$, c + d + x))(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    One way for the compiler to produce code that uses lexical addressing
    is to maintain a data structure called a
    <INDEX>compile-time environment</INDEX>
    <EM>compile-time environment</EM>.  This keeps track of which
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>bindings</JAVASCRIPT>
    </SPLITINLINE>
    will be at which
    positions in which frames in the runtime environment when a
    particular
    <SPLITINLINE>
      <SCHEME>variable-access</SCHEME>
      <JAVASCRIPT>name-access</JAVASCRIPT>
    </SPLITINLINE>
    operation is executed.  The compile-time
    environment is a list of frames, each containing a list of
    <SPLITINLINE>
      <SCHEME>variables.</SCHEME>
      <JAVASCRIPT>symbols.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	(There will of course be no values bound to the
	variables,
	since values are not computed at compile time.)
      </SCHEME>
      <JAVASCRIPT>
	There will be no values associated with the symbols,
	since values are not computed at compile time.
	(Exercise <REF NAME="ex:constant-optimisations"/>
	will change this, as an optimization for constants.)
      </JAVASCRIPT>
    </SPLITINLINE>
    The compile-time
    environment becomes an additional argument to
    <SCHEMEINLINE>compile</SCHEMEINLINE> and is
    passed along to each code generator.  The top-level call to
    <SCHEMEINLINE>compile</SCHEMEINLINE> uses
    <SPLITINLINE>
      <SCHEME>
	an empty compile-time environment.
      </SCHEME>
      <JAVASCRIPT>
	a compile-time-environment that includes the names of all primitive
	functions and primitive values.
      </JAVASCRIPT>
    </SPLITINLINE>
    When
    <SPLITINLINE>
      <SCHEME>
	a <SCHEMEINLINE>lambda</SCHEMEINLINE> body
      </SCHEME>
      <JAVASCRIPT>
	the body of a lambda expression
      </JAVASCRIPT>
    </SPLITINLINE>
    is compiled,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-lambda-body</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_lambda_body</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    extends the compile-time environment by a frame containing the
    <SPLITINLINE>
      <SCHEME>
	procedure<APOS/>s
      </SCHEME>
      <JAVASCRIPT>function<APOS/>s
      </JAVASCRIPT>
    </SPLITINLINE>
    parameters, so that the
    <SPLITINLINE>
      <SCHEME>sequence making up the</SCHEME>
    </SPLITINLINE>
    body is compiled with that extended environment.
    <SPLIT>
      <JAVASCRIPT>
	Similarly, when
	the body of a block
	is compiled,
	<JAVASCRIPTINLINE>compile_block</JAVASCRIPTINLINE>
	extends the compile-time environment by a frame containing the
	<INDEX>compiler for JavaScript<SUBINDEX>scanning out internal declarations</SUBINDEX></INDEX>
	scanned-out local names of the body.
      </JAVASCRIPT>
    </SPLIT>
    At each point in the compilation,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_name</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-assignment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_assignment_returning</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    use the compile-time
    environment in order to generate the appropriate lexical addresses.
  </TEXT>

  <TEXT>
    <SPLIT>
      <SCHEME>
	Exercises<SPACE/><REF NAME="ex:lexical-address-start"/>
	through<SPACE/><REF NAME="ex:lexical-address-end"/> describe how to
	complete this sketch of the lexical-addressing strategy in order to
	incorporate lexical lookup into the compiler.
	Exercise<SPACE/><REF NAME="ex:cte-open-code"/> describes another use for the
	compile-time environment.
      </SCHEME>
      <JAVASCRIPT>
	Exercises<SPACE/><REF NAME="ex:lexical-address-start"/>
	through<SPACE/><REF NAME="ex:impl-lex-addr"/> describe how to
	complete this sketch of the lexical-addressing strategy in order to
	incorporate lexical lookup into the compiler.
	Exercises<SPACE/><REF NAME="ex:lexical-constants"/>
	and<SPACE/><REF NAME="ex:constant-optimisations"/>
	describe other uses for	the compile-time environment.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <INDEX>compiler for Scheme<SUBINDEX>lexical addressing<CLOSE/></SUBINDEX></INDEX>
      <INDEX>lexical addressing<CLOSE/></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>compiler for JavaScript<SUBINDEX>lexical addressing<CLOSE/></SUBINDEX></INDEX>
      <INDEX>lexical addressing<CLOSE/></INDEX>
    </JAVASCRIPT>
  </SPLIT>
  
  <EXERCISE>
    Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>lexical_address_lookup</USE></INDEX>
    <INDEX><USE>lexical_address_assign</USE></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that implements the new lookup operation.  It should take two
    arguments<EMDASH/>a lexical address and a runtime environment<EMDASH/>and
    return the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    stored at the specified lexical address.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>lexical_@address_@lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should signal an error if the value
    <SPLITINLINE>
      <SCHEME>of the variable</SCHEME>
      <JAVASCRIPT>of the name</JAVASCRIPT>
    </SPLITINLINE>
    is the
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>*unassigned*</SCHEMEINLINE>.<FOOTNOTE>This
      is the modification to variable lookup
      required if we implement the
      <INDEX>scanning out internal definitions<SUBINDEX><ORDER>compiler</ORDER>in compiler</SUBINDEX></INDEX>
      <INDEX>compiler for JavaScript<SUBINDEX>scanning out internal definitions</SUBINDEX></INDEX>
      scanning method to eliminate internal
      definitions (exercise<SPACE/><REF NAME="ex:lexical-address-end"/>).
      We will need to eliminate these definitions in order for lexical addressing
      to work.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>
      The footnote can be safely dropped, because the scanning
      method is the default in the JavaScript adaptation.
    </COMMENT>
    Also write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_assign</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that implements the operation that changes the value
    <SPLITINLINE>
      <SCHEME>of the variable</SCHEME>
      <JAVASCRIPT>of the name</JAVASCRIPT>
    </SPLITINLINE>
    at a specified lexical address.
    <LABEL NAME="ex:lexical-address-start"/>
    <LABEL NAME="ex:lexical-address-lookup"/>
  </EXERCISE>

  <EXERCISE>
    Modify the compiler to maintain the
    <INDEX>compile-time environment</INDEX>
    compile-time environment as
    described above.  That is, add a compile-time-environment argument to
    <SCHEMEINLINE>compile</SCHEMEINLINE> and the various code generators, and
    extend it in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-lambda-body</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_lambda_body</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>compile_block</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
  </EXERCISE>

  <EXERCISE>
    Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    and a
    <INDEX>compile-time environment</INDEX>
    compile-time environment and
    returns the lexical address of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    with respect to that
    environment.  For example, in the program fragment that is shown above, the
    compile-time environment during the compilation of expression
    <LATEXINLINE>$e_1$</LATEXINLINE> is
    <SPLIT>
      <SCHEME><SCHEMEINLINE>((y z) (a b c d e) (x y))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<SNIPPET>
	  <JAVASCRIPT>
list(list("y", "z"),
     list("a", "b", "c", "d", "e"),
     list("x", "y"))
	  </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should produce
    <SNIPPET>
      <SCHEME>
(find-variable 'c '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
(1 2)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("c", list(list("y", "z"),
                      list("a", "b", "c", "d", "e"),
                      list("x", "y")));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
list(1, 2)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    <SNIPPET>
      <SCHEME>
(find-variable 'x '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
      (2 0)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("x", list(list("y", "z"),
                      list("a", "b", "c", "d", "e"),
                      list("x", "y")));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
list(2, 0)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET POSTPADDING="no">
      <SCHEME>
(find-variable 'w '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
not-found
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("w", list(list("y", "z"),
                      list("a", "b", "c", "d", "e"),
                      list("x", "y")));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
"not found"
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <LABEL NAME="ex:find-variable"/>
  </EXERCISE>

  <EXERCISE>
    Using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE/><REF NAME="ex:find-variable"/>,
    rewrite
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>compile-variable</SCHEMEINLINE>
	and
	<SCHEMEINLINE>compile-assignment</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_assignment_returning</JAVASCRIPTINLINE>
	and
	<JAVASCRIPTINLINE>compile_name</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to output lexical-address instructions.
    <SPLIT>
      <SCHEME>
	In cases where <SCHEMEINLINE>find-variable</SCHEMEINLINE>
	returns <SCHEMEINLINE>not-found</SCHEMEINLINE>
	(that is, where the variable is not in the
	compile-time environment), you should have the code generators use the
	evaluator operations, as before, to search for the binding.
	(The only place a variable that is not found at compile time can be is in
	the global environment, which is part of the runtime environment but
	is not part of the compile-time
	environment.<FOOTNOTE>Lexical addresses cannot be used to access
	variables in the global environment, because these names can be defined
	and redefined interactively at any time.  With internal definitions
	scanned out, as
	in exercise<SPACE/><REF NAME="ex:lexical-address-end"/>,
	the only definitions the
	compiler sees are those at top level, which act on the global
	environment.  Compilation of a definition does not cause the defined
	name to be entered in the compile-time environment.</FOOTNOTE>
	Thus, if you wish, you may have the evaluator operations looks directly
	in the global environment, which can be obtained with the operation
	<SCHEMEINLINE>(op<SPACE/>get-global-environment)</SCHEMEINLINE>,
	instead of having them search the whole runtime
	environment found in <SCHEMEINLINE>env</SCHEMEINLINE>.)
	<COMMENT>
	  This is not possible in an interactive system that keeps
	  extending the program environment. Note the new
	  <JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE> in
	  <REF NAME="sec:running-eval"/> and the same idea recurring in
	  <JAVASCRIPTINLINE>compile_and_go</JAVASCRIPTINLINE> in
	  <REF NAME="sec:interfacing-compiled-code"/>.
	</COMMENT>
      </SCHEME>
      <JAVASCRIPT>
	In cases where <JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
	returns <JAVASCRIPTINLINE>"not found"</JAVASCRIPTINLINE>
	(that is, where the name is not in the compile-time environment),
	you should report a compile-time error.
      </JAVASCRIPT>
    </SPLIT>
    Test the modified compiler on a few simple cases, such as the nested
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    combination at the beginning of this section.
    <LABEL NAME="ex:impl-lex-addr"/>
  </EXERCISE>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	We argued in section<SPACE/><REF NAME="sec:internal-definitions"/> that
	internal definitions for block structure should not be considered
	<QUOTE>real</QUOTE> <SCHEMEINLINE>define</SCHEMEINLINE>s.  Rather, a
	procedure
	body should be interpreted as if the internal variables being defined
	were installed as ordinary <SCHEMEINLINE>lambda</SCHEMEINLINE> variables
	initialized to their correct values using
	<SCHEMEINLINE>set!</SCHEMEINLINE>.
	Section<SPACE/><REF NAME="sec:internal-definitions"/> and
	exercise<SPACE/><REF NAME="ex:internal-defs"/> showed how to modify the
	metacircular interpreter to accomplish this by
	<INDEX>scanning out internal definitions<SUBINDEX><ORDER>compiler</ORDER>in compiler</SUBINDEX></INDEX>
	<INDEX>compiler for Scheme<SUBINDEX>scanning out internal definitions</SUBINDEX></INDEX>
	scanning out internal
	definitions.  Modify the compiler to perform the same transformation
	before it compiles a
	procedure
	body.
	<LABEL NAME="ex:lexical-address-end"/>
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	In JavaScript, an attempt to assign a new value to a name that is declared
	as a
	<INDEX>constant (in JavaScript)<SUBINDEX>detecting assignment to</SUBINDEX></INDEX>
	constant leads to an error.
	Exercise<SPACE/><REF NAME="ex:mutable"/> shows how to
	detect such errors at run time. With the techniques presented in this
	section, we can detect attempts to assign a new value to a constant
	<EM>at compile time</EM>. For this purpose, extend the functions
	<JAVASCRIPTINLINE>compile_lambda_body</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>compile_block</JAVASCRIPTINLINE>
	to record in the compile-time environment whether a name is declared as a variable (using
	<JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> or as a parameter), or as
	a constant (using
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>
	or
	<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>).
	Modify <JAVASCRIPTINLINE>compile_assignment</JAVASCRIPTINLINE>
	to report an appropriate error when it detects an
	assignment to a	constant.
	<LABEL NAME="ex:lexical-constants"/>
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	In this section we have focused on the use of the compile-time
	environment to produce lexical addresses.  But there are other uses
	for compile-time environments.  For instance, in
	exercise<SPACE/><REF NAME="ex:open-code"/> we increased the efficiency of
	compiled code by
	<INDEX>compiler for Scheme<SUBINDEX>open-coding of primitives</SUBINDEX></INDEX>
	<INDEX>open-coding of primitives</INDEX>
	<INDEX>reserved words</INDEX>
	<INDEX>compile-time environment<SUBINDEX>open-coding and</SUBINDEX></INDEX>
	open-coding primitive
	procedures. Our implementation treated the names of open-coded
	procedures as reserved words.  If a program were to rebind such a name, the
	mechanism described in exercise<SPACE/><REF NAME="ex:open-code"/> would still
	open-code it as a primitive, ignoring the new binding.  For example,
	consider the
	procedure
	<SNIPPET>
	  <SCHEME>
(lambda (+ * a b x y)
  (+ (* a x) (* b y)))
	  </SCHEME>
	</SNIPPET>
	which computes a linear combination of <SCHEMEINLINE>x</SCHEMEINLINE> and
	<SCHEMEINLINE>y</SCHEMEINLINE>.  We might call it with arguments
	<SCHEMEINLINE>+matrix</SCHEMEINLINE>, <SCHEMEINLINE>*matrix</SCHEMEINLINE>,
	and four matrices, but the open-coding compiler would still open-code the
	<SCHEMEINLINE>+</SCHEMEINLINE> and the <SCHEMEINLINE>*</SCHEMEINLINE> in
	<SCHEMEINLINE>(+ (* a x) (* b y))</SCHEMEINLINE>
	as primitive <SCHEMEINLINE>+</SCHEMEINLINE> and
	<SCHEMEINLINE>*</SCHEMEINLINE>.  Modify the open-coding compiler to consult
	the compile-time environment in order to compile the correct code for
	expressions involving the names of primitive
	procedures.
	(The code will work correctly as long as the program does not
	<SCHEMEINLINE>define</SCHEMEINLINE>
	or
	<SCHEMEINLINE>set!</SCHEMEINLINE>
	these names.)
	<LABEL NAME="ex:cte-open-code"/>
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
        <LABEL NAME="ex:constant-optimisations"/>
        Knowledge about constants at compile time opens the door to many
        optimizations that allow us to generate more efficient object code. In
        addition to the extension of the
	<INDEX>compile-time environment</INDEX>
	compile-time environment in
        exercise<SPACE/><REF NAME="ex:lexical-constants"/> to indicate names
	declared as constants, we may store the
        value of a constant if it is known at compile time, or other information
	that can help us optimize the code.
        <OL>
          <LI>
            A constant declaration such as <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE><FIXED_SPACE/><META>name</META><FIXED_SPACE/><JAVASCRIPTINLINE>=</JAVASCRIPTINLINE><FIXED_SPACE/><META>literal</META><JAVASCRIPTINLINE>;</JAVASCRIPTINLINE> allows us
            to replace all occurrences of <META>name</META> within the scope of
            the declaration by <META>literal</META> so that <META>name</META> 
            doesn<APOS/>t have to be looked up in the runtime environment. This optimization is
            called <EM>constant propagation</EM>. Use an extended compile-time
            environment to store literal constants, and modify
            <JAVASCRIPTINLINE>compile_name</JAVASCRIPTINLINE> to use the stored
            constant in the generated <JAVASCRIPTINLINE>assign</JAVASCRIPTINLINE>
	    instruction instead of the
            <JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE> operation.
          </LI>
          <LI>
	    Function declaration is a derived component that expands to
	    constant declaration. Let us assume that the names of primitive functions
	    in the global environment are also considered constants.
	    If we further extend our compile-time
	    environment to keep track of which names refer to compiled
	    functions and which ones to primitive functions, we can move
            the test that checks whether a function is compiled or primitive
            from run time to compile time. This makes the object code more
            efficient because it replaces a test that must be performed once per
            function application in the generated code by one that is performed
            by the compiler. Using such an extended compile-time environment,
            modify <JAVASCRIPTINLINE>compile_function_call</JAVASCRIPTINLINE>
	    so that if it can be determined at
	    compile time whether the called function is compiled or primitive,
	    only the instructions in the
	    <JAVASCRIPTINLINE>compiled_branch</JAVASCRIPTINLINE> or the
            <JAVASCRIPTINLINE>primitive_branch</JAVASCRIPTINLINE>
            are generated.
          </LI>
          <LI>
            Replacing constant names with their literal values as in part (a)
            paves the way for another optimization, namely replacing
            applications of primitive functions to literal values with the
            compile-time computed result. This optimization, called
            <EM>constant folding</EM>, replaces expressions such as
            <JAVASCRIPTINLINE>40 + 2</JAVASCRIPTINLINE> by
            <JAVASCRIPTINLINE>42</JAVASCRIPTINLINE> by performing the addition
            in the compiler. Extend the compiler to perform constant folding for
            arithmetic operations on numbers and for string concatenation.
            <LABEL NAME="foot:ex-ast-transformations"/>
          </LI>
        </OL>
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>
</SUBSECTION>
