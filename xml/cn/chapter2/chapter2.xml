<CHAPTER>
  <NAME>用数据建立抽象</NAME>
  <LABEL NAME="chap:data"></LABEL>
  <PDF_ONLY>\addtocontents{toc}{\protect\enlargethispage{-\baselineskip}}</PDF_ONLY>

  <HISTORY> 
    % 秋&apos;97 添加 tex &apos;\label&apos; 用于手动引用。
    % 8/26/97 修正第三次印刷的错字 -- p.112, 179, 181
   
    % 4/15 修正并入同一页的多个条目
    % 4/13-15 索引 [在章节最终打印后]
    % 4/11 基于<QUOTE>最终</QUOTE>校对和拼写检查的修正和调整
    % 4/9 基于索引之前的对比进行微小修正
    % 4/7-... Julie 索引修正（和4/8 改变&apos;ns&apos;）
    % 4/6/96 Julie：页码更改；添加 Thatcher 引用；索引修正
    % 4/5/96 Hal 索引
    % 4/5/96 Julie：索引修正；拼写修正
    % 4/4/96 内容修正；页码调整；其余的分页
    % 4/3/96 索引更改
    % 4/2/96 分页至2.2
    % 4/1/96 Julie：分页到 Rogers 脚注
    % 4/1/96 Julie 杂项改进
    % 3/29/96 Julie 索引修正
    % 3/20/96 Julie 索引修正
    % 3/18/96 &apos;atan&apos; 编辑及微小索引修正
    % 3/17/96 Julie 微小索引更改
    % 3/15/96 Julie 微小索引更改
    % 3/10-3/13/96 Hal 索引，Julie 的微小索引修正/添加
   
    % 3/9/96 修正一些练习部分的空格问题；在 get/put 规范中分列行；
    %        其他微小编辑
    % 3/6/96 细小的措辞和换行改进
    % 3/4/96 重写以&apos;修复&apos;大部分三连字符；杂项其他排版修正
    % 3/3/96 更改 countleaves 为 count-leaves（以适应）
    % 3/3/96 修复 poly gcd 脚注中的错误（由 Albert Meyer 指出）
    % 2/26-3/2/96 修复一些不良的换行
    % 2/24/96 在{lisp}之后取消缩进，关闭空隙以排齐
    % 2/24/96 修复松散的脚注 (#49)
    % 2/23/96 将8皇后图移入例中以避免额外的例间空格
    % 2/22/96 新的题词规范
    % 2/21/96 修正一个表格的格式
    % 2/19/96 修正引用中的() 
  </HISTORY>

  <EPIGRAPH>
    我们现在来到了数学抽象的决定性步骤：我们忘记了符号代表的意义。<ELLIPSIS></ELLIPSIS> [数学家]
    不需要闲着；他可以用这些符号进行许多操作，而不必去看它们代表的事物。
    <INDEX>Weyl, Hermann</INDEX>
    <ATTRIBUTION>
      <AUTHOR>Hermann Weyl</AUTHOR>
      <TITLE><EM>数学思维的方式</EM></TITLE>
    </ATTRIBUTION>
  </EPIGRAPH>

  <CHAPTERCONTENT></CHAPTERCONTENT>

  <TEXT>
    <INDEX>复合数据, 需要<OPEN></OPEN></INDEX>
    <INDEX>数据<SUBINDEX>复合</SUBINDEX><OPEN></OPEN></INDEX>
    <NOINDENT></NOINDENT>
    我们在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章集中在计算过程和程序设计中
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的作用。我们看到了如何使用原始数据（数字）和原始操作（算术操作），如何组合
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过组合、条件语句和参数的使用形成复合
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，以及如何通过使用
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>定义</SCHEMEINLINE>. </SCHEME>
      <JAVASCRIPT>函数声明。</JAVASCRIPT>
    </SPLITINLINE>
    来抽象
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>进程</JAVASCRIPT>
    </SPLITINLINE>
    。我们看到
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以视为一个过程的局部演变的模式，并且我们对一些常见的进程模式进行了分类、推理和简单的算法分析，这些模式体现在
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    我们还看到高阶
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过使我们能够操纵和推理一般的计算方法来增强了我们语言的能力。这是编程的本质所在。
  </TEXT>

  <TEXT>
    在本章中，我们将研究更复杂的数据。第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中的所有
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    都处理简单的数值数据，而简单的数据不足以解决我们希望用计算解决的许多问题。程序通常设计用于对复杂现象进行建模，往往必须构建具有多个部分的计算对象，以对具有多个方面的现实世界现象进行建模。因此，尽管我们在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中的重点是通过组合
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    形成复合
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    来构建抽象，而在本章中，我们转向任何编程语言的另一个关键方面：它提供通过组合数据对象形成<EM>复合数据</EM>的手段。
  </TEXT>

  <TEXT>
    为什么我们需要在编程语言中使用复合数据？因为我们需要复合
    <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    以提升我们设计程序时的概念层次，增加设计的模块化，并增强语言的表达能力。正如能够
    <SPLITINLINE>
      <SCHEME>定义过程</SCHEME>
      <JAVASCRIPT>声明函数</JAVASCRIPT>
    </SPLITINLINE>
    使我们能够在高于语言原始操作的概念层次上处理过程一样，构建复合数据对象的能力使我们能够在高于语言原始数据对象的概念层次上处理数据。
  </TEXT>

  <SHORT_PAGE lines="1"></SHORT_PAGE>
  <TEXT>
    考虑设计一个系统以执行
    <INDEX>有理数运算<SUBINDEX>复合数据的需求</SUBINDEX></INDEX>
    的任务。在简单数据的意义上，有理数可以被认为是两个整数：一个分子和一个分母。因此，我们可以设计一个程序，其中每个有理数都由两个整数（一个分子和一个分母）表示，其中
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    由两个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    （一个产生和的分子，一个产生和的分母）实现。但这将很麻烦，因为我们需要明确地跟踪哪些分子对应于哪些分母。在一个意图在许多有理数上执行多次运算的系统中，这样的数据维护会极大地混淆程序，更不用说对我们的思维造成的负担。 如果我们能够<QUOTE>结合到一起</QUOTE>一个分子和分母以形成一个对<EMDASH></EMDASH>一个<EM>复合数据对象</EM><EMDASH></EMDASH>，这样程序就可以以一致的方式将有理数视为单一概念单位来操作，那将会好得多。
  </TEXT>

  <TEXT>
    使用复合数据还使我们能够提高程序的模块化。如果我们能够直接将有理数作为对象来操作，那么我们就能将程序中处理有理数本身的部分与如何将有理数表示为整数对的细节分开。将程序中处理数据对象表示方式的部分与处理数据对象使用方式的部分分开的总体技术是一种强大的设计方法，称为
    <INDEX>数据抽象</INDEX>
    <EM>数据抽象</EM>。我们将看到数据抽象如何使程序更容易设计、维护和修改。
  </TEXT>

  <TEXT>
    The use of compound data leads to a real increase in the expressive power
    of our programming language.  Consider the idea of forming a
    <QUOTE>线性组合</QUOTE><LATEXINLINE>$ax+by$</LATEXINLINE>.  We
    might like to write a
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><LATEXINLINE>$a$</LATEXINLINE>,
    <LATEXINLINE>$b$</LATEXINLINE>, <LATEXINLINE>$x$</LATEXINLINE>, and
    <LATEXINLINE>$y$</LATEXINLINE> as arguments and return the value of
    <LATEXINLINE>$ax+by$</LATEXINLINE>.  This presents no difficulty if the
    arguments are to be numbers, because we can readily 
    <SPLITINLINE>
      <SCHEME>定义过程</SCHEME>
      <JAVASCRIPT>声明函数</JAVASCRIPT>
    </SPLITINLINE><SNIPPET>
      <EXAMPLE>linear_combination_example</EXAMPLE>
      <SCHEME>
(define (linear-combination a b x y) 
  (+ (* a x) (* b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return a * x + b * y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>linear_combination_example</NAME>
      <JAVASCRIPT>
	linear_combination(1, 2, 3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    But suppose we are not concerned only with numbers. Suppose we would like to
    <SPLITINLINE>
      <SCHEME>用过程术语表达，形成</SCHEME>
      <JAVASCRIPT>描述一个形成的过程</JAVASCRIPT>
    </SPLITINLINE><EMDASH></EMDASH><SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SNIPPET EVAL="no">
      <SCHEME>
(define (linear-combination a b x y)
  (add (mul a x) (mul b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return add(mul(a, x), mul(b, y));
}
      </JAVASCRIPT>
    </SNIPPET>
    where <SCHEMEINLINE>add</SCHEMEINLINE> and <SCHEMEINLINE>mul</SCHEMEINLINE>
    are not the primitive
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>+</SCHEMEINLINE> and <SCHEMEINLINE>*</SCHEMEINLINE> but rather
    more complex things that will perform the appropriate operations for
    whatever kinds of data we pass in as the arguments
    <SCHEMEINLINE>a</SCHEMEINLINE>, <SCHEMEINLINE>b</SCHEMEINLINE>,
    <SCHEMEINLINE>x</SCHEMEINLINE>, and <SCHEMEINLINE>y</SCHEMEINLINE>. The key
    point is that the only thing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>, and
    <SCHEMEINLINE>y</SCHEMEINLINE> is that the
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>add</SCHEMEINLINE> and <SCHEMEINLINE>mul</SCHEMEINLINE> will
    perform the appropriate manipulations.  From the perspective of the
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE><SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>, and
    <SCHEMEINLINE>y</SCHEMEINLINE> are and even more irrelevant how they might
    happen to be represented in terms of more primitive data.  This same example
    shows why it is important that our programming language provide the ability
    to manipulate compound objects directly: Without this, there is no way for a
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>add</SCHEMEINLINE> and
    <SCHEMEINLINE>mul</SCHEMEINLINE> without having to know their detailed
    structure.<FOOTNOTE>直接操作
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的能力在编程语言的表达能力上提供了类似的提升。例如，在
    section<SPACE></SPACE><REF NAME="sec:procedures-as-parameters"></REF>中，我们引入了
    <SCHEMEINLINE>求和</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    它将
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>项</SCHEMEINLINE>作为参数，并计算在某个特定区间上<SCHEMEINLINE>项</SCHEMEINLINE>的值的和。
    为了定义<SCHEMEINLINE>求和</SCHEMEINLINE>，能够独立地将
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    例如<SCHEMEINLINE>项</SCHEMEINLINE>作为一个实体是至关重要的，而不考虑<SCHEMEINLINE>项</SCHEMEINLINE>如何用更原始的操作表示。实际上，如果我们没有
    <QUOTE>“<SPLITINLINE><SCHEME>过程，</SCHEME><JAVASCRIPT>函数，</JAVASCRIPT></SPLITINLINE>”的概念</QUOTE>
    ，我们可能甚至不会想到定义像<SCHEMEINLINE>求和</SCHEMEINLINE>这样的操作。此外，就执行求和而言，如何从更原始的操作构建<SCHEMEINLINE>项</SCHEMEINLINE>的细节是无关紧要的。</FOOTNOTE><INDEX>复合数据, 需要</INDEX><INDEX>数据<SUBINDEX>复合</SUBINDEX></INDEX></TEXT>

  <TEXT>
    我们从实现上述提到的有理数运算系统开始本章。这将成为我们讨论复合数据和数据抽象的背景。与复合
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    一样，主要要解决的问题是如何通过抽象作为一种应对复杂性的技术，我们将看到数据抽象如何使我们能够在程序的不同部分之间建立合适的
    <INDEX>抽象屏障</INDEX>
    <EM>抽象屏障</EM>。
  </TEXT>

  <TEXT>
    我们将看到，构成复合数据的关键在于编程语言应提供某种<QUOTE>胶水</QUOTE>，以便将数据对象组合成更复杂的数据对象。有许多种可能的胶水。事实上，我们将发现如何在没有任何特殊<QUOTE>数据</QUOTE>操作的情况下，仅使用
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    这样做将进一步模糊
    <SPLITINLINE>
      <SCHEME><QUOTE>过程</QUOTE></SCHEME>
      <JAVASCRIPT><QUOTE>函数</QUOTE></JAVASCRIPT>
    </SPLITINLINE>
    和<QUOTE>数据</QUOTE>之间的区别，这种区别已经在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章末端变得微弱。我们还将探讨一些常规技术，用于表示序列和树。处理复合数据的一个关键概念是
    <INDEX>闭包</INDEX>
    <EM>闭包</EM><EMDASH></EMDASH>我们用来组合数据对象的胶水应该允许我们不仅组合原始数据对象，还可以组合复合数据对象。另一个关键概念是复合数据对象可以作为
    <INDEX>常规接口</INDEX>
    <EM>常规接口</EM>用于混合匹配方式组合程序模块。我们通过介绍一个利用闭包的简单图形语言来说明这些概念。
  </TEXT>

  <TEXT>
    然后，我们将通过引入
    <INDEX>符号表达式</INDEX>
    <INDEX>表达式<SUBINDEX>符号</SUBINDEX></INDEX>
    <EM>符号表达式</EM><EMDASH></EMDASH>其基本部分可以是任意符号而不仅仅是数字的数据，来增强我们语言的表达能力。我们探讨用于表示对象集合的各种替代方案。我们将发现，正如一个给定的数值函数可以通过许多不同的计算过程计算一样，一个给定的数据结构可以通过更简单的对象来表示，而且表示的选择可以对操纵数据的过程的时间和空间需求产生重大影响。我们将在符号微分、集合表示和信息编码的背景下探讨这些想法。
  </TEXT>

  <SHORT_PAGE lines="1"></SHORT_PAGE>
  <TEXT>
    接下来，我们将处理程序的不同部分可能以不同方式表示数据的问题。这导致需要实现
    <INDEX>通用操作</INDEX>
    <INDEX>操作<SUBINDEX>通用</SUBINDEX></INDEX>
    <EM>通用操作</EM>，它必须处理许多不同类型的数据。在存在通用操作的情况下保持模块化需要比单纯的数据抽象更强大的抽象屏障。特别是，我们引入<EM>数据导向编程</EM>，作为一种允许独立地设计单个数据表示并然后<INDEX>可加性</INDEX>
    <EM>可加性</EM>（即无需修改）组合的方法。为了说明这种系统设计方法的威力，我们在本章末尾应用所学的知识实现一个用于对多项式进行符号运算的包，其中多项式的系数可以是整数、有理数、复数，甚至是其他多项式。
  </TEXT>

  <CHAPTERCONTENT></CHAPTERCONTENT>

  <!--  Section 1 : Introduction to Data Abstraction  -->
  &amp;section2.1;

  <!--  Section 2 : Hierarchical Data and the Closure Property  -->
  &amp;section2.2;

  <!--  Section 3 : Symbolic Data  -->
  &amp;section2.3;

  <!--  Section 4 : Multiple Representations for Abstract Data  -->
  &amp;section2.4;

  <!--  Section 5 : Systems with Generic Operations  -->
  &amp;section2.5;

</CHAPTER>
