<SECTION>
  <NAME>Compilation</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:compilation"/>

  <INDEX>compiler<OPEN/></INDEX>

  <TEXT>
    The explicit-control evaluator of
    section<SPACE/><REF NAME="sec:eceval"/> is a
    register machine whose controller interprets
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    programs.  In this
    section we will see how to run
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    programs on a register machine whose controller is not a
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    interpreter.
  </TEXT>

  <TEXT>
    The explicit-control evaluator machine is
    <INDEX>universal machine<SUBINDEX>explicit-control evaluator as</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX><ORDER>universal</ORDER>as universal machine</SUBINDEX></INDEX>
    universal<EMDASH/>it
    can carry out any computational process that can be described in
    <SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    The
    evaluator<APOS/>s controller orchestrates the use of its data
    paths to perform the desired computation.  Thus, the
    evaluator<APOS/>s data paths are universal: They are sufficient
    to perform any computation we desire, given an appropriate
    controller.<FOOTNOTE>This is a theoretical statement.  We are
    not claiming
    that the evaluator<APOS/>s data paths are a particularly convenient or
    efficient set of data paths for a general-purpose computer.  For example,
    they are not very good for implementing high-performance floating-point
    calculations or calculations that intensively manipulate bit
    vectors.</FOOTNOTE>
  </TEXT>

  <TEXT>
    Commercial
    <INDEX>universal machine<SUBINDEX>general-purpose computer as</SUBINDEX></INDEX>
    <INDEX>general-purpose computer, as universal machine</INDEX>
    general-purpose computers are
    register machines organized
    around a collection of registers and operations that constitute
    an efficient and convenient universal set of data paths.
    The controller for a general-purpose machine is an interpreter for
    a register-machine language like the one we have been using.  This
    language is called the
    <INDEX>native language of machine</INDEX>
    <EM>native language</EM> of the machine, or simply
    <INDEX>machine language</INDEX>
    <EM>machine language</EM>.  Programs written in machine language are
    sequences of instructions that use the machine<APOS/>s data paths.
    For example, the
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX><ORDER>machine</ORDER>as machine-language program</SUBINDEX></INDEX>
    explicit-control evaluator<APOS/>s instruction sequence
    can be thought of as a machine-language program for a general-purpose
    computer rather than as the controller for a specialized interpreter
    machine.
  </TEXT>

  <INDEX>compiler<SUBINDEX>interpreter vs.<OPEN/></SUBINDEX></INDEX>
  <INDEX>interpreter<SUBINDEX>compiler vs.<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    There are two common strategies for bridging the gap between
    higher-level languages and register-machine languages.
    The explicit-control evaluator illustrates the
    strategy of interpretation.  An interpreter written in the native
    language of a machine configures the machine to execute programs
    written in a language (called the
    <INDEX>source language</INDEX>
    <EM>source language</EM>) that may
    differ from the native language of the machine performing the
    evaluation.  The primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    of the source language are implemented as a library of subroutines written
    in the native language of the given machine.  A program to be interpreted
    (called the
    <INDEX>source program</INDEX>
    <EM>source program</EM>) is represented as a data structure.  The interpreter
      traverses this data structure, analyzing the source program.  As it
      does so, it simulates the intended behavior of the source program by
      calling appropriate primitive subroutines from the library.
  </TEXT>

  <TEXT>
    In this section, we explore the alternative strategy of <EM>
    compilation</EM>.  A compiler for a given source language and machine
    translates a source program into an equivalent program (called the
    <INDEX>object program</INDEX>
    <EM>object program</EM>) written in the machine<APOS/>s native language.
    The compiler that we implement in this section translates programs written in
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    into sequences of instructions to be executed using the explicit-control
    evaluator machine<APOS/>s data paths.<FOOTNOTE>Actually, the machine that
    runs compiled code can be simpler than the interpreter machine, because we
    <INDEX>compiler for JavaScript<SUBINDEX>register use</SUBINDEX></INDEX>
    won<APOS/>t use the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>exp</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SCHEMEINLINE>unev</SCHEMEINLINE> registers.  The interpreter
    used these to hold pieces of unevaluated
    <SPLITINLINE>
      <SCHEME>
	expressions.
      </SCHEME>
      <JAVASCRIPT>
	components.
      </JAVASCRIPT>
    </SPLITINLINE>
    With the
    compiler, however, these
    <SPLITINLINE>
      <SCHEME>
	expressions
      </SCHEME>
      <JAVASCRIPT>
	components
      </JAVASCRIPT>
    </SPLITINLINE>
    get built into the
    compiled code that the register machine will run.  For the same
    reason,
    <INDEX>compiler for JavaScript<SUBINDEX>machine-operation use</SUBINDEX></INDEX>
    we don<APOS/>t need the machine operations that deal with
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	component
      </JAVASCRIPT>
    </SPLITINLINE>
    syntax.  But compiled code will use a few additional machine
    operations (to represent compiled
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    objects) that didn<APOS/>t
    appear in the explicit-control evaluator machine.</FOOTNOTE>
  </TEXT>

  <TEXT>
    Compared with interpretation, compilation can provide a great increase
    in the efficiency of program execution, as we will explain below in
    the overview of the compiler.
    On the other hand, an interpreter
    provides a more powerful environment for interactive program
    development and debugging, because the source program being executed
    is available at run time to be examined and modified.  In addition,
    because the entire library of primitives is present, new programs can
    be constructed and added to the system during debugging.
  </TEXT>

  <TEXT>
    In view of the complementary advantages of compilation and
    interpretation, modern
    program-development environments
    pursue a mixed
    strategy.
    <SPLITINLINE>
      <SCHEME>Lisp interpreters</SCHEME>
      <JAVASCRIPT>These systems</JAVASCRIPT>
    </SPLITINLINE>
    are generally organized so that interpreted
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    can call each other.
    This enables a programmer to compile those parts of a
    program that are assumed to be debugged, thus gaining the efficiency
    advantage of compilation, while retaining the interpretive mode of execution
    for those parts of the program that are in the flux of interactive
    development and
    debugging.<SPLITINLINE><JAVASCRIPT><FOOTNOTE>Language implementations
    often delay the compilation of program parts even when they are
    assumed to be debugged, until there is enough evidence that compiling them
    would lead to an overall efficiency advantage. The evidence is obtained at
    run time by monitoring the number of times the program parts are being
    interpreted. This technique is called
    <EM>just-in-time compilation</EM>.</FOOTNOTE></JAVASCRIPT></SPLITINLINE>
    In section<SPACE/><REF NAME="sec:interfacing-compiled-code"/>, after
    we have implemented the compiler, we will show how to interface it
    with our interpreter to produce an integrated
    interpreter-compiler
    <SPLITINLINE>
      <SCHEME>development</SCHEME>
    </SPLITINLINE>
    system.
  </TEXT>

  <INDEX>compiler<SUBINDEX>interpreter vs.<CLOSE/></SUBINDEX></INDEX>
  <INDEX>interpreter<SUBINDEX>compiler vs.<CLOSE/></SUBINDEX></INDEX>
  <INDEX>compiler<CLOSE/></INDEX>
  
  <SUBHEADING>
    <NAME>An overview of the compiler</NAME>
  </SUBHEADING>

  <INDEX>compiler for JavaScript<OPEN/></INDEX>
  <INDEX>compiler for JavaScript<SUBINDEX>explicit-control evaluator vs.<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Our compiler is much like our interpreter, both in its structure and in
    the function it performs.  Accordingly, the mechanisms used by the
    compiler for analyzing
    <SPLITINLINE>
      <SCHEME>
	expressions
      </SCHEME>
      <JAVASCRIPT>
	components
      </JAVASCRIPT>
    </SPLITINLINE>
    will be similar to those used by
    the interpreter.  Moreover, to make it easy to interface compiled and
    interpreted code, we will design the compiler to generate code that
    obeys the same conventions of
    <INDEX>compiler for JavaScript<SUBINDEX>register use</SUBINDEX></INDEX>
    register usage as the interpreter: The
    environment will be kept in the <SCHEMEINLINE>env</SCHEMEINLINE> register,
    argument lists will be accumulated in <SCHEMEINLINE>argl</SCHEMEINLINE>, a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to be applied will be in
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>fun</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    will return their answers in <SCHEMEINLINE>val</SCHEMEINLINE>,
    and the location to which a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    should return will be kept in
    <SCHEMEINLINE>continue</SCHEMEINLINE>.
    In general, the compiler translates a source program into an object
    program that performs essentially the same register operations as
    would the interpreter in evaluating the same source program.
  </TEXT>

  <INDEX>compiler for JavaScript<SUBINDEX>efficiency<OPEN/></SUBINDEX></INDEX>
  
  <TEXT>
    This description suggests a strategy for implementing a rudimentary
    compiler: We traverse the
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	component
      </JAVASCRIPT>
    </SPLITINLINE>
    in the same way the
    interpreter does.  When we encounter a register instruction that the
    interpreter would perform in evaluating the
    <SPLITINLINE>
      <SCHEME>
	expression,
      </SCHEME>
      <JAVASCRIPT>
	component,
      </JAVASCRIPT>
    </SPLITINLINE>
    we do not
    execute the instruction but instead accumulate it into a sequence.  The
    resulting sequence of instructions will be the object code.  Observe
    the
    <INDEX>efficiency<SUBINDEX><ORDER>compilation</ORDER>of compilation</SUBINDEX></INDEX>
    efficiency advantage of compilation over interpretation.  Each
    time the interpreter evaluates
    <SPLITINLINE>
      <SCHEME>
	an expression<EMDASH/>for example,
      </SCHEME>
      <JAVASCRIPT>
	a component<EMDASH/>for example,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(f 84 96)</SCHEMEINLINE><EMDASH/>it
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>f(96, 22)</JAVASCRIPTINLINE><EMDASH/>it
      </JAVASCRIPT>
    </SPLITINLINE>
    performs the work of classifying the
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	component
      </JAVASCRIPT>
    </SPLITINLINE>
    (discovering that this is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application) and
    <SPLITINLINE>
      <SCHEME>
	testing for the end of the
	operand list (discovering that there are two operands).
      </SCHEME>
      <JAVASCRIPT>
	in this case testing for the end of the
	list of argument expressions
	(discovering that there are two argument expressions).
      </JAVASCRIPT>
    </SPLITINLINE>
    With a
    compiler, the
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	component
      </JAVASCRIPT>
    </SPLITINLINE>
    is analyzed only once, when the
    instruction sequence is generated at compile time.  The object code
    produced by the compiler contains only the instructions that evaluate
    the
    <SPLITINLINE>
      <SCHEME>
	operator and the two operands,
      </SCHEME>
      <JAVASCRIPT>
	function expression and the two argument expressions,
      </JAVASCRIPT>
    </SPLITINLINE>
    assemble the argument list, and apply the
    <SPLITINLINE>
      <SCHEME>procedure (in <SCHEMEINLINE>proc</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT>function (in <SCHEMEINLINE>fun</SCHEMEINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    to the arguments (in <SCHEMEINLINE>argl</SCHEMEINLINE>).
  </TEXT>

  <TEXT>
    This is the same kind of optimization we implemented in the
    <INDEX>compiler for JavaScript<SUBINDEX>analyzing evaluator vs.</SUBINDEX></INDEX>
    analyzing evaluator of section<SPACE/><REF NAME="sec:separating-analysis"/>.
    But there are further opportunities to gain efficiency in compiled code.
    As the interpreter runs, it follows a process that must be applicable
    to any
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    in the language.  In contrast, a given segment of
    compiled code is meant to execute some particular
    <SPLITINLINE>
      <SCHEME>
        expression.
      </SCHEME>
      <JAVASCRIPT>
        component.
      </JAVASCRIPT>
    </SPLITINLINE>
    This can make a big difference, for example in the use of the
    stack to save registers.  When the interpreter evaluates
    <SPLITINLINE>
      <SCHEME>
        an expression,
      </SCHEME>
      <JAVASCRIPT>
        a component,
      </JAVASCRIPT>
    </SPLITINLINE>
    it must be prepared for any contingency. Before evaluating a
    <SPLITINLINE>
      <SCHEME>subexpression,</SCHEME>
      <JAVASCRIPT>subcomponent,</JAVASCRIPT>
    </SPLITINLINE>
    the interpreter saves all registers that will be needed later, because the
    <SPLITINLINE>
      <SCHEME>subexpression</SCHEME>
      <JAVASCRIPT>subcomponent</JAVASCRIPT>
    </SPLITINLINE>
    might require an arbitrary evaluation.
    A compiler, on the other hand, can exploit the structure of the particular
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    it is processing to generate code that avoids
    unnecessary stack operations.
  </TEXT>

  <TEXT>
    As a case in point, consider the
    <SPLITINLINE>
      <SCHEME>combination <SCHEMEINLINE>(f 84 96)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>application <JAVASCRIPTINLINE>f(96, 22)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Before the interpreter evaluates the
    <SPLITINLINE>
      <SCHEME>
	operator of the combination,
      </SCHEME>
      <JAVASCRIPT>
	function expression of the application,
      </JAVASCRIPT>
    </SPLITINLINE>
    it prepares
    for this evaluation by saving the registers containing the
    <SPLITINLINE>
      <SCHEME>
	operands
      </SCHEME>
      <JAVASCRIPT>
	argument expressions
      </JAVASCRIPT>
    </SPLITINLINE>
    and the environment, whose values will be needed later.  The interpreter then
    evaluates the
    <SPLITINLINE>
      <SCHEME>
	operator
      </SCHEME>
      <JAVASCRIPT>
	function expression
      </JAVASCRIPT>
    </SPLITINLINE>
    to obtain the result in
    <SCHEMEINLINE>val</SCHEMEINLINE>, restores the saved registers, and finally
    moves the result from <SCHEMEINLINE>val</SCHEMEINLINE> to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>fun</SCHEMEINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    However, in the particular expression we
    are dealing with, the
    <SPLITINLINE>
      <SCHEME>
	operator
      </SCHEME>
      <JAVASCRIPT>
	function expression
      </JAVASCRIPT>
    </SPLITINLINE>
    is the
    <SPLITINLINE>
      <SCHEME>
	symbol
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>f</SCHEMEINLINE>, whose evaluation is
    accomplished by the machine operation
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which does not alter any registers.  The compiler that we implement in
    this section will take advantage of this fact and generate code that
    evaluates the
    <SPLITINLINE>
      <SCHEME>
	      operator
      </SCHEME>
      <JAVASCRIPT>
	      function expression
      </JAVASCRIPT>
    </SPLITINLINE>
      using the instruction
    <SNIPPET EVAL="no">
      <SCHEME>
(assign proc (op lookup-variable-value) (const f) (reg env))
      </SCHEME>
      <JAVASCRIPT>
assign("fun", list(op("lookup_symbol_value"), constant("f"), reg("env")))
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <JAVASCRIPT>
	where the argument to <JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
	is extracted at compile time from the parser's representation of <JAVASCRIPTINLINE>f(96, 22)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    This code not only avoids the unnecessary saves and
    restores but also assigns the value of the lookup directly to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>fun</SCHEMEINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    whereas the interpreter would obtain the
    result in <SCHEMEINLINE>val</SCHEMEINLINE> and then move this to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>fun</SCHEMEINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    A compiler can also optimize access to the environment.  Having
    analyzed the code, the compiler can
    <SPLITINLINE>
      <SCHEME>
	in many cases
      </SCHEME>
    </SPLITINLINE>
    know in which frame
    <SPLITINLINE>
      <SCHEME>a particular variable</SCHEME>
      <JAVASCRIPT>the value of a particular name</JAVASCRIPT>
    </SPLITINLINE>
    will be located and access that frame directly,
    rather than performing the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    search.  We will discuss how to implement such
    <SPLITINLINE>
      <SCHEME>variable access</SCHEME>
      <JAVASCRIPT>lexical addressing</JAVASCRIPT>
    </SPLITINLINE>
    in
    section<SPACE/><REF NAME="sec:lexical-addressing"/>.  Until then, however,
    we will focus on the kind of register and stack optimizations described
    above. There are many other optimizations that can be performed by a
    compiler, such as coding primitive operations <QUOTE>in line</QUOTE> instead
    of using a general <SCHEMEINLINE>apply</SCHEMEINLINE> mechanism (see
    exercise<SPACE/><REF NAME="ex:open-code"/>); but we will not emphasize these
    here. Our main goal in this section is to illustrate the compilation process
    in a simplified (but still interesting) context.
  </TEXT>

  <INDEX>compiler for JavaScript<SUBINDEX>efficiency<CLOSE/></SUBINDEX></INDEX>
  <INDEX>compiler for JavaScript<SUBINDEX>explicit-control evaluator vs.<CLOSE/></SUBINDEX></INDEX>
  
  <!-- Subsection 1 : Structure of the Compiler -->
  &amp;subsection5.5.1;

  <!-- Subsection 2 : Compiling Expressions -->
  &amp;subsection5.5.2;

  <!-- Subsection 3 : Compiling Combinations -->
  &amp;subsection5.5.3;

  <!-- Subsection 4 : Combining Instruction Sequences -->
  &amp;subsection5.5.4;

  <!-- Subsection 5 : An Example of Compiled Code -->
  &amp;subsection5.5.5;

  <!-- Subsection 6 : Lexical Addressing -->
  &amp;subsection5.5.6;

  <!-- Subsection 7 : Interfacing Compiled Code to the Evaluator -->
  &amp;subsection5.5.7;

</SECTION>
