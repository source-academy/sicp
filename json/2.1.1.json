[{"id":"/sicpjs/2.1.1","tag":"TITLE","body":"2.1.1  \n    Example: Arithmetic Operations for Rational Numbers"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Suppose we want to do\n    \n    arithmetic with rational numbers.  We want to be\n    able to add, subtract, multiply, and divide them and to test whether\n    two rational numbers are equal.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Let us begin by assuming that we already have a way of constructing a\n    rational number from a numerator and a denominator.  We also assume\n    that, given a rational number, we have a way of extracting (or\n    selecting) its numerator and its denominator.  Let us further assume\n    that the constructor and selectors are available as\n    functions:","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"make_rat("},{"body":"$n$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":", "},{"body":"$d$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":" \n\treturns the\n\trational number whose  numerator is the integer\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" and whose denominator is the integer\n\t","tag":"#text"},{"body":"$d$","tag":"LATEX"},{"body":". \n      ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"numer("},{"body":"$x$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":" \n\treturns the numerator of the rational number\n\t","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"denom("},{"body":"$x$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":" \n\treturns the denominator of the rational number\n\t","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":".\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We are using here a powerful strategy of synthesis: \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"wishful thinking","tag":"#text"}]},{"body":". We haven't yet said how a rational number\n    is represented, or how the\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":", and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n    should be implemented.  Even so, if we did have these three\n    functions,\n    we could then add, subtract, multiply, divide, and test equality by using\n    the following relations:\n\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{rll}\n      \\dfrac{n_{1}}{d_{1}}+\\dfrac{n_{2}}{d_{2}}\n      &=&\\dfrac{n_{1}d_{2}+n_{2}d_{1}}{d_{1}d_{2}}\\\\[15pt]\n      \\dfrac{n_{1}}{d_{1}}-\\dfrac{n_{2}}{d_{2}}\n      &=&\\dfrac{n_{1}d_{2}-n_{2}d_{1}}{d_{1}d_{2}}\\\\[15pt]\n      \\dfrac{n_{1}}{d_{1}}\\cdot\\dfrac{n_{2}}{d_{2}}\n      &=&\\dfrac{n_{1}n_{2}}{d_{1}d_{2}}\\\\[15pt]\n      \\dfrac{n_{1}/d_{1}}{n_{2}/d_{2}}\n      &=&\\dfrac{n_{1}d_{2}}{d_{1}n_{2}}\\\\[15pt]\n      \\dfrac{n_{1}}{d_{1}}\n      &=&\\dfrac{n_{2}}{d_{2}}\\ \\quad \\textrm{if and only if}\\ \\ \\  n_{1}d_{2}\\ =\\ n_{2}d_{1}\n      \\end{array}\n      \\]\n    ","tag":"LATEX"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    We can express these rules as\n    functions:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":false,"body":"function add_rat(x, y) {\n    return make_rat(numer(x) * denom(y) + numer(y) * denom(x),\n                    denom(x) * denom(y));\n}\nfunction sub_rat(x, y) {\n    return make_rat(numer(x) * denom(y) - numer(y) * denom(x),\n                    denom(x) * denom(y));\n}\nfunction mul_rat(x, y) {\n    return make_rat(numer(x) * numer(y),\n                    denom(x) * denom(y));\n}\nfunction div_rat(x, y) {\n    return make_rat(numer(x) * denom(y),\n                    denom(x) * numer(y));\n}\nfunction equal_rat(x, y) {\n    return numer(x) * denom(y) === numer(y) * denom(x);\n}"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Now we have the operations on rational numbers defined in terms of the\n    selector and constructor\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":".\n    But we haven't yet defined these. What we need is some way to glue\n    together a numerator and a denominator to form a rational number.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Pairs","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    To enable us to implement the concrete level of our data abstraction, our\n    \n\tJavaScript environment\n      \n    provides a compound structure called a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"pair","tag":"#text"}]},{"body":", which can be constructed with the \n      primitive function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".\n      This\n      function\n      takes two arguments and returns a compound data object that contains the\n      two arguments as parts.  Given a pair, we can extract the parts using the\n      primitive\n      functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" \n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".\n      Thus, we can use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n      as follows:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblwALAKaMAJu0oCgA","body":"const x = pair(1, 2); "},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblwALAKaMAJu0oCgA","body":"head(x); ","output":"1"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblxkWAG3aUBQA","body":"tail(x); ","output":"2"},{"body":"\n      Notice that a pair is a data object that can be given a name and\n      manipulated, just like a primitive data object.  Moreover,\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n      can be used to form pairs whose elements are pairs, and so on:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblyFSFAJ60GLDgGYeAFgFDi5UAC8JTNu0o9Ri7AAsApowAm7Y2fareAoA","body":"const x = pair(1, 2);\n\nconst y = pair(3, 4);\n\nconst z = pair(x, y); "},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblyFSFAJ60GLDgGYeAFgFDi5UAC8JTNu0o9Ri7AAsApowAm7Y2fareAoA","body":"head(head(z)); ","output":"1"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsGMB7AOwGcAXUAD1AF5QAHAQwEsAnACgwBpUBKAblyFSFAJ60GLDgGYeAFgFDi5UAC8JTNu0o9Ri7AAsApowAm7MiwA27VbwFA","body":"head(tail(z)); ","output":"3"},{"body":"\n      In section ","tag":"#text"},{"tag":"REF","body":"2.2","href":"/sicpjs/2.2"},{"body":" we will see how this\n      ability to combine pairs means that pairs can be used as general-purpose\n      building blocks to create all sorts of complex data structures.  The single\n      compound-data primitive ","tag":"#text"},{"tag":"EM","child":[{"body":"pair","tag":"#text"}]},{"body":", implemented by the\n      functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":",\n      is the only glue we need.  Data objects constructed from pairs are called \n      ","tag":"#text"},{"tag":"EM","child":[{"body":"list-structured","tag":"#text"}]},{"body":" data.\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Representing rational numbers","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n      Pairs offer a natural way to complete the\n      \n      rational-number system.\n      Simply represent a rational number as a pair of two integers: a numerator\n      and a denominator.  Then\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":"\n      are readily implemented as follows:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.1.1#footnote-1"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHrgmZqqMrJzcPCiCAMwiIhpAA","body":"function make_rat(n, d) { return pair(n, d); }\n\nfunction numer(x) { return head(x); }\n\nfunction denom(x) { return tail(x); } "},{"body":"\n    Also, in order to display the results of our computations, we can \n    \n    print rational numbers by printing the numerator, a slash, and the \n    \n\tdenominator.\n\tWe use the primitive function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stringify"},{"body":" to turn any value (here\n\ta number) into a string. The operator\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":" in JavaScript is\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"overloaded","tag":"#text"}]},{"body":"; it can be applied to two numbers or to two strings,\n\tand in the latter case it returns the result of ","tag":"#text"},{"tag":"EM","child":[{"body":"concatenating","tag":"#text"}]},{"body":"\n\tthe two strings.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/2.1.1#footnote-2"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHnrehoocFERknNwhEtiguWF2fhQAzgrRDACePEVkKUQA5hR4lSZmliJiANSgAESgYL1d1bUNTTz+gcFW7RrYniQ01aA07A4M0XigALz0zOxcvBiCKCIz2Aq16fs8y2yr6ydAA","body":"function print_rat(x) {\n    return display(stringify(numer(x)) + \" / \" + stringify(denom(x)));\n} "},{"body":"\n    Now we can try our rational-number\n    functions:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/2.1.1#footnote-3"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHnrehoocFERknNwhEtiguWF2fhQAzgrRDACePEVkKUQA5hR4lSZmliJiANSgAESgYL1d1bUNTTz+gcFW7RrYniQ01aA07A4M0XigALz0zOxcvBiCKCIz2Aq16fs8y2yr6ydAA","body":"const one_half = make_rat(1, 2);\n\nprint_rat(one_half); ","output":"\"1 / 2\""},{"tag":"SNIPPET","latex":false,"id":11,"eval":false,"body":"const one_third = make_rat(1, 3);"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":35,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHnrehrQuQpzcboIAntbYoHlhdrSMrGm8JmaWYgBUwgFBPNmgANTGpuYN1bWBwVb8ufkDg0Nd9VagNf7dHSIa2Lr6PkYAzgQARqUZoI3i-Xm2EfTM7FxlbZXjI8GNALStFR0Xk6MifcNvg089nZ-Ts-OJvnoBGiGwsWRyA329mKx3S5XaYxq8NU2Ve73RP0Rl1+cy8BkBQgoADdQeCJLsCgcYRtkSFHnUri8KeihpjOrTsjNcQskqAWABHAgMEEnTbbClQ2i0rE-RoAXgVd3ajQmDLiuOwJBoSzIoBo7AcwrwoDlhxKoowghQXM12t1+rYZAcKiEJrNsN4ltAAGYbTzAQoOBQiGRQRD8pLhBQlgpogxMjwdUGiABzCh4BPSkRiFoAIlAYHzLSTwbTGZ4bOzf1wgeDodFKQ2DsN0TwggdTpdVaAA","body":"print_rat(add_rat(one_half, one_third)); ","output":"\"5 / 6\""},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":35,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHnrehrQuQpzcboIAntbYoHlhdrSMrGm8JmaWYgBUwgFBPNmgANTGpuYN1bWBwVb8ufkDg0Nd9VagNf7dHSIa2Lr6PkYAzgQARqUZoI3i-Xm2EfTM7FxlbZXjI8GNALStFR0Xk6MifcNvg089nZ-Ts-OJvnoBGiGwsWRyA329mKx3S5XaYxq8NU2Ve73RP0Rl1+cy8BkBQgoADdQeCJLsCgcYRtkSFHnUri8KeihpjOrTsjNcQskqAWABHAgMEEnTbbClQ2i0rE-RoAXgVd3ajQmDLiuOwJBoSzIoBo7AcwrwoDlhxKoowghQXM12t1+rYZAcKiEJrNsN4ltAAGYbTzAQoOBQiGRQRD8pLhBQlgpogxMjwdUGiABzCh4BPSkRiFoAIlAYHzLSTwbTGZ4bOzf1wgeDodFdGBGwdhuieEEDqdLqrQA","body":"print_rat(mul_rat(one_half, one_third)); ","output":"\"1 / 6\""},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":33,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQCcGyAKIgGlAATAJSgA3qA4syBDrQAODChz6DRAblABfXIVKUaoIgTotVADzGTps+aAAWLBkJ5Wtu-MXLVaQlkRUdG7WUjJytGTKADYhHnrehrQuQpzcboIAntbYoHlhdrSMrGm8JmaWYgBUwgFBPNmgANTGpuYN1bWBwVb8ufkDg0Nd9VagNf7dHSIa2Lr6PkYAzgQARqUZoI3i-Xm2EfTM7FxlbZXjI8GNALStFR0Xk6MifcNvg089nZ-Ts-OJvnoBGiGwsWRyA329mKx3S5XaYxq8NU2Ve73RP0Rl1+cy8BkBQgoADdQeCJLsCgcYRtkSFHnUri8KeihpjOrTsjNcQskqAWABHAgMEEnTbbClQ2i0rE-RoAXgVd3ajQmDLiuOwJBoSzIoBo7DIDhUQlAcsOJVFGEEAGYuXjFooOBQiGRQRD8pLhBQlgpogxMjwdU6iABzCh4APSkRiFoAIlAYHjLSDzrDEZ4bOjf1wCmDrtFKQ2+rYhuNgmLpY4ohmQA","body":"print_rat(add_rat(one_third, one_third)); ","output":"\"6 / 9\""}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    As the final example shows, our rational-number implementation does not\n    \n    reduce rational numbers to lowest terms.  We can remedy this by changing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":".\n    If we have a \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"gcd"},{"body":"function\n    like the one in section ","tag":"#text"},{"tag":"REF","body":"1.2.5","href":"/sicpjs/1.2.5"},{"body":" that produces\n    \n    the greatest common divisor of two integers, we can use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"gcd"},{"body":" to reduce the numerator and the\n    denominator to lowest terms before constructing the pair:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":12,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQiCBbAUwCcAKADwEpQBvbUINAsmZAi1oALJgEMAJpy4BubAF98xctVpymRKg0V8BQkWImgyMigBtFK9RtKUaoAOYkFMgDSgARjz8QsKi4rR+oAC80aAADKAA-KAyoABc7p5sfr4pAKT+ymq4hM7aoAwyANZMAPosMmRsRL5ygSaCJDQAzmTuURkKzaCtKsFmYaAADtbstGBuLaDzhY4V1XUNbAAsvgBsykA","body":"function make_rat(n, d) {\n    const g = gcd(n, d);\n    return pair(n / g, d / g);\n} "},{"body":"\n    Now we have\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":49,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQiCBbAUwCcAKADwEpQBvbUINAsmZAi1oALJgEMAJpy4BubAF98xctVpymRKg0V8BQkWImgyMigBtFK9RtKUaoAOYkFMgDSgARjz8QsKi4rR+oAC80aAADKAA-KAyoABc7p5sfr4pAKT+ymq4hM7aoAwyANZMAPosMmRsRL5ygSaCJDQAzmTuURkKzaCtKsFmYaAADtbstGBuLaDzhY4lWq7ycnUNnL4Anm1joRYV1duN9Mzs3KAAVMN6BmwHoADUdIyszzz3uvqG3G87WCINBgj+Txuv0ehgOKyc61oXQIfnOu1ALyCpmOtFOtXqF0+1x+D3+31AAFoPldydCyYDgWCmaTISSIbCuPC1i5cQQbGiOPtDtjzLiqvidpcvlDqV8DkDmYqWQC2TDvlzNDzhhQAG4CoXGI6i8ritFS4l3ZXfBVKpnsoz3c3qhwIrVMACOBBk-IJ6MxwPGFidMvtL2ikVl7BedNZLuwnSIPVANFqZEkFBYcn6eLRGF8AGZCq6yjnfUNWnwQsbphmmi1lKBVpqysHAlWJtJ5PZG8Vm657TdeO2LFZbN2m6VXJMWBQiGQBcLBIGdBQupMbDI9mwejOiG4KHgt62eO8AERLUDn9472f7w9sAec+HYaez+e+zZolM1NMZuS+b9f0zTklCAA","body":"print_rat(add_rat(one_third, one_third)); ","output":"\"2 / 3\""},{"body":"\n    as desired.  This modification was accomplished by changing the constructor\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":" without changing any of the\n      functions\n      (such as\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_rat"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mul_rat"},{"body":")\n      that implement the actual operations.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.1","id":"#ex-2.1","child":[{"body":" \n    Define a better version of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n    that handles both positive and negative arguments.\n    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n    should normalize the sign so that if the rational number is positive, both\n    the numerator and denominator are positive, and if the rational number is\n    negative, only the numerator is negative.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEZMChsDMBXAOwGMAXASwHsjQBDAIwGcAKADwEpQBvbUf0ACcApmQKDabUAD4AvKAAMoAPygpALlABaNQG5sAX1yFSlGqADmJACYs6AGlAMuvAUNHjaDULN+KV9KCaVrYMjnSgAKROHPpG+MTk1LRMFBZE7C58AiJiEmqgADz+2W5lqloY2ACQAppS0oo15aBVtW6aCnEJpsmgALZ0ANbCAPqCdGQsRI7WWW4kNExklj6WNtOzsaXuebQADnQUgiyp6dNcAFSgZxlzoNeMrLRgFhyOO2Vf9Mws1qCvDjbeKDEbjSYsADMji0ABZYkA","body":"function sign(x) {\n    return x < 0 \n           ? -1\n\t   : x > 0\n\t     ? 1\n\t     : 0;\n}\nfunction make_rat(n, d) {\n    const g = gcd(n, d);\n    return pair(sign(n) * sign(d) * abs(n / g), \n                abs(d / g));\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.1.1#footnote-link-1","child":[{"body":"\n      Another way to define the selectors and constructor is\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"const make_rat = pair;\nconst numer = head;\nconst denom = tail;"},{"body":"\n      The first definition associates the name\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n      with the value of the expression\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",\n      which is the primitive\n      function\n      that constructs pairs.  Thus\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n      are names for the same primitive constructor.\n      \n        Defining selectors and constructors in this way is efficient: Instead of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"tag":"EM","child":[{"body":"calling","tag":"#text"}]},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"tag":"EM","child":[{"body":"is","tag":"#text"}]},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",\n\tso there is only one\n        function\n        called, not two, when\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n\tis called.  On the other hand, doing this defeats debugging aids that\n\ttrace\n        function\n        calls or put breakpoints on\n        function\n        calls:\n        You may want to watch\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":"\n\tbeing called, but you certainly don't want to watch every call to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".\n        We have chosen not to use this style of definition in this book.\n\t","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/2.1.1#footnote-link-2","child":[{"body":"In JavaScript, the operator\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":" can also be applied to a string and a number\n\tand to other operand combinations, but in this book,\n\twe choose to apply it either to two numbers or to two strings.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/2.1.1#footnote-link-3","child":[{"body":"\n\tThe primitive function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":" \n\tintroduced in exercise ","tag":"#text"},{"tag":"REF","body":"1.22","href":"/sicpjs/1.2.6#ex-1.22"},{"body":"\n\treturns its argument, but in the uses of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_rat"},{"body":" below, we show only what\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_rat"},{"body":" prints, not what the interpreter\n\tprints as the value returned by\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_rat"},{"body":".\n      ","tag":"#text"}]}]