<SUBSECTION>
   <NAME>求幂运算</NAME> 

  <LABEL NAME="sec:exponentiation"></LABEL>
   <INDEX>求幂运算<OPEN></OPEN></INDEX> 

   <TEXT>
    考虑计算给定数的指数的问题。我们希望有一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    它接受一个底数 <LATEXINLINE>$b$</LATEXINLINE> 和一个正整数指数 <LATEXINLINE>$n$</LATEXINLINE> 作为参数，计算出<SPACE></SPACE><LATEXINLINE>$b^n$</LATEXINLINE>。一种方法是通过递归定义
    <LATEX>
      \[
      \begin{array}{lll}
      b^{n} &amp;=&amp; b\cdot b^{n-1}\\
      b^{0} &amp;=&amp; 1
      \end{array}
      \]
    </LATEX>
    这可以直接转化为
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    <SNIPPET PAGE="44">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>线性递归版本</SUBINDEX></INDEX>
      <NAME>expt_definition</NAME>
      <EXAMPLE>expt_example</EXAMPLE>
      <SCHEME>
(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return n === 0
           ? 1
           : b * expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>expt_example</NAME>
      <REQUIRES>expt_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    这是一个线性递归过程，执行步骤和空间需求均为
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE>。就像阶乘一样，我们可以轻松地构造一个等效的线性迭代：
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>线性迭代版本</SUBINDEX></INDEX>
      <NAME>expt_linear_definition</NAME>
      <EXAMPLE>expt_example2</EXAMPLE>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                (- counter 1)
                (* b product)))) 
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return expt_iter(b, n, 1);
}
function expt_iter(b, counter, product) {
    return counter === 0
           ? product
           : expt_iter(b, counter - 1, b * product);
} 
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>expt_example2</NAME>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>

    此版本需要 <LATEXINLINE>$\Theta(n)$</LATEXINLINE> 步骤和
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE> 空间。
  </TEXT> 

   <TEXT>
    我们可以通过使用
    <INDEX>连乘平方</INDEX>
    连乘平方来减少计算指数的步骤。
    例如，不是通过
    <LATEX>
      \[
      \begin{array}{l}
      b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot b))))))
      \end{array}
      \]
    </LATEX>
    计算 <LATEXINLINE>$b^8$</LATEXINLINE>，我们可以用三次乘法计算它：
    <LATEX>
      \[
      \begin{array}{lll}
      b^{2} &amp;= &amp; b\cdot b\\
      b^{4} &amp;= &amp; b^{2}\cdot b^{2}\\
      b^{8} &amp;= &amp; b^{4}\cdot b^{4}
      \end{array}
      \]
    </LATEX>
  </TEXT> 

   <TEXT>
    该方法对指数为2的幂的情况效果良好。如果我们使用如下规则，
    <LATEX>
      \[
      \begin{array}{llll}
      b^{n} &amp;=&amp; (b^{n/2})^{2}  &amp;\qquad\,\mbox{如果}\ n\ \mbox{是偶数}\\
      b^{n} &amp;=&amp; b\cdot b^{n-1} &amp;\qquad\mbox{如果}\ n\ \mbox{是奇数}
      \end{array}
      \]
    </LATEX>
    我们也可以利用连乘平方来计算一般指数的幂。
    我们可以将该方法表示为一个
    <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>fast_expt</DECLARATION></INDEX>
      <NAME>expt_log_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>even_definition</REQUIRES>
      <EXAMPLE>fast_expt_example</EXAMPLE>
      <SCHEME>
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) 
         (square (fast-expt b (/ n 2))))
        (else 
         (* b (fast-expt b (- n 1))))))

      </SCHEME>
      <JAVASCRIPT>
function fast_expt(b, n) {
    return n === 0
           ? 1
           : is_even(n)
           ? square(fast_expt(b, n / 2))
           : b * fast_expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>fast_expt_example</NAME>
      <REQUIRES>expt_log_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(fast-expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
fast_expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    其中用于测试整数是否为偶数的谓词是基于
    <SPLITINLINE>
      <SCHEME>
	基元过程
	<INDEX>remainder<SUBINDEX><ORDER>整数除法后的余数</ORDER></SUBINDEX></INDEX>
	<INDEX>{\tt &quot;%}（余数运算符）<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX>{\tt &quot;%}（余数）<ORDER>&quot;%</ORDER></SUBINDEX></INDEX>  
	<SCHEMEINLINE>remainder</SCHEMEINLINE>，
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>remainder<SUBINDEX><ORDER>整数除法后的余数</ORDER></SUBINDEX></INDEX>
	<INDEX>{\tt &quot;%}（余数运算符）<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX>{\tt &quot;%}（余数）<ORDER>///</ORDER></SUBINDEX></INDEX>
	运算符<SPACE></SPACE><JAVASCRIPTINLINE>%</JAVASCRIPTINLINE>，
	计算整数除法后的余数，
      </JAVASCRIPT>
    </SPLITINLINE>
    定义为
    <SNIPPET PAGE="45">
      <INDEX><DECLARATION>is_even</DECLARATION></INDEX>
      <NAME>even_definition</NAME>
      <EXAMPLE>even_example</EXAMPLE>
      <SCHEME>
(define (even? n)
  (= (remainder n 2) 0))
      </SCHEME>
      <JAVASCRIPT>
function is_even(n) {
    return n % 2 === 0;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>even_example</NAME>
      <REQUIRES>even_definition</REQUIRES>
      <SCHEME>
(even 7)
      </SCHEME>
      <JAVASCRIPT>
is_even(7);
      </JAVASCRIPT>
    </SNIPPET>
    由
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    过程演变而来，其空间和步骤数都随着
    <LATEXINLINE>$n$</LATEXINLINE> 的对数级增长。
    要理解这一点，可以观察使用 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    计算 <LATEXINLINE>$b^{2n}$</LATEXINLINE> 只比计算 <LATEXINLINE>$b^n$</LATEXINLINE> 多一次乘法。
    因此，所能计算的指数大小（大约）随着允许的乘法次数的增加而翻倍。
    这样，计算指数为 <LATEXINLINE>$n$</LATEXINLINE> 所需的乘法次数增长速率大致与以2为底的对数增长一致。
    该过程有 <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 的增长率。<FOOTNOTE>更精确地说，所需乘法次数等于 <LATEXINLINE>$n$</LATEXINLINE> 的以2为底对数减1，加上 <LATEXINLINE>$n$</LATEXINLINE> 二进制表示中1的个数。该总和总是小于两倍的以2为底的对数。
    在渐进符号定义中的任意常数 <LATEXINLINE>$k_1$</LATEXINLINE> 和 <LATEXINLINE>$k_2$</LATEXINLINE> 表明，对于对数过程，取对数的底数无关紧要，因此所有此类过程均描述为 <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>。</FOOTNOTE>
  </TEXT> 

   <TEXT>
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 增长与 <LATEXINLINE>$\Theta(n)$</LATEXINLINE> 增长之间的差异随着 <LATEXINLINE>$n$</LATEXINLINE> 变大而变得非常显著。例如，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    当 <LATEXINLINE>$n=1000$</LATEXINLINE> 时，仅需要14次乘法。<FOOTNOTE>您可能会想，为什么有人会关心将数值求到1000次方。参见第<SPACE></SPACE><REF NAME="sec:primality"></REF>节。</FOOTNOTE>
    也可以利用连乘平方的思想设计一个迭代算法，它以对数级的步骤数计算指数（参见练习<SPACE></SPACE><REF NAME="ex:iter-expon-pro"></REF>），尽管像许多迭代算法一样，该算法不像递归算法那样直接表达。<FOOTNOTE>这个迭代算法由来已久。它出现在公元前200年之前由
    <INDEX>平伽罗 (Pingala, <AACUTE_UPPER></AACUTE_UPPER>ch<AACUTE_LOWER></AACUTE_LOWER>rya)</INDEX>
    所著的<EM>Chandah-sutra</EM>中。详见
    <INDEX>唐纳德·E·克努斯 (Donald E. Knuth)</INDEX>
    <CITATION>Knuth 1997b</CITATION>，第4.6.3节，内有关于该方法及其他指数计算方法的完整讨论与分析。</FOOTNOTE>
    <INDEX>指数运算</INDEX>
  </TEXT> 

   <EXERCISE>
    设计一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，它演变出一个使用连乘平方并使用对数级别步骤数的迭代指数运算过程，就像
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    （提示：利用观察到的
    <LATEXINLINE>$(b^{n/2})^2 =(b^2)^{n/2}$</LATEXINLINE>，除了指数 <LATEXINLINE>$n$</LATEXINLINE> 和底数
    <LATEXINLINE>$b$</LATEXINLINE>，还保持一个额外的状态变量
    <LATEXINLINE>$a$</LATEXINLINE>，并以这样一种方式定义状态变换，使得乘积 <LATEXINLINE>$a b^n$</LATEXINLINE> 在状态之间保持不变。过程开始时，取 <LATEXINLINE>$a$</LATEXINLINE> 为1，结果由过程结束时 <LATEXINLINE>$a$</LATEXINLINE> 的值给出。通常，定义一个
    <INDEX>迭代过程的不变量量</INDEX>
    <EM>不变量量</EM>，该量在状态之间保持不变，是设计
    <INDEX>迭代算法设计</INDEX>
    迭代算法的一个有力思考方式。）
    <LABEL NAME="ex:iter-expon-pro"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<NAME>fast_expt_iter</NAME>
	<EXAMPLE>example_1.17</EXAMPLE>
	<EXPECTED>8</EXPECTED>
	<REQUIRES>even_definition</REQUIRES>
	<JAVASCRIPT>
function fast_expt_iter(a, b, n){
    return n === 0
           ? a
           : is_even(n)
           ? fast_expt_iter(a, b * b, n / 2)
           : fast_expt_iter(a * b, b, n - 1);
}
function fast_expt(b, n){
    return fast_expt_iter(1, b, n);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.17</NAME>
      <REQUIRES>fast_expt_iter</REQUIRES>
      <JAVASCRIPT>
fast_expt(2, 3);
    </JAVASCRIPT>
    </SNIPPET>
    </EXERCISE> 

     <EXERCISE>
      <LABEL NAME="ex:add-expon"></LABEL> 
      本节中的指数算法基于通过重复乘法来执行指数运算。以类似的方式，可以通过重复加法来执行整数乘法。
      以下乘法
      <SPLITINLINE>
	<SCHEME>过程</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      （假设我们的语言只能加法，不能乘法）与
      <SCHEMEINLINE>expt</SCHEMEINLINE>
      <SPLITINLINE>
	<SCHEME>过程：</SCHEME>
	<JAVASCRIPT>函数：</JAVASCRIPT>
      </SPLITINLINE>
      类似。
      <SNIPPET PAGE="46">
        <NAME>times_definition</NAME>
        <EXAMPLE>times_example</EXAMPLE>
        <SCHEME>
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
        </SCHEME>
        <JAVASCRIPT>
function times(a, b) {
    return b === 0
           ? 0
           : a + times(a, b - 1);
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="46" HIDE="yes">
        <NAME>times_example</NAME>
	<EXPECTED>12</EXPECTED>
        <REQUIRES>times_definition</REQUIRES>
        <SCHEME>
(* 3 4)
        </SCHEME>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
      </SNIPPET>
      该算法所需的步骤数与 <SCHEMEINLINE>b</SCHEMEINLINE> 成线性关系。现在假设除了加法之外，我们还包括
      <SPLITINLINE>
	<SCHEME>操作</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      <SCHEMEINLINE>double</SCHEMEINLINE>（将整数加倍）和 <SCHEMEINLINE>halve</SCHEMEINLINE>（将偶数整数除以2）。利用这些，设计一个与
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      类似且使用对数级别步骤数的乘法
      <SPLITINLINE>
	<SCHEME>过程</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>。
      <SOLUTION>          
	<SNIPPET>
	  <NAME>example_1.18_definition</NAME>
	  <EXAMPLE>example_1.18</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function double(x) {
    return x + x;
}

function halve(x) {
    return x / 2;
}

function fast_times(a, b) { 
    return b === 1
           ? a
           : a === 0 || b === 0
           ? 0
           : is_even(b)
           ? double(fast_times(a, halve(b)))
           : a + fast_times(a, b - 1);
}
	  </JAVASCRIPT>
	  <SCHEME>
	  </SCHEME>
	</SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>example_1.18</NAME>
	<REQUIRES>example_1.18_definition</REQUIRES>
	<EXPECTED>12</EXPECTED>
	<JAVASCRIPT>
fast_times(3, 4);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </EXERCISE> 

     <EXERCISE> 
      利用练习题<SPACE></SPACE><REF NAME="ex:iter-expon-pro"></REF>和<SPACE></SPACE><REF NAME="ex:add-expon"></REF>的结果，
      设计一个
      <SPLITINLINE>
	<SCHEME>过程</SCHEME>
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      ，生成一个关于加法、加倍和减半的整数乘法的迭代过程，并且该过程使用对数级别的步骤数。<FOOTNOTE>这
      个算法，有时称为
      <INDEX>俄国农民乘法法</INDEX>
      <INDEX>俄国农民法乘法</INDEX>
      <QUOTE>俄国农民法</QUOTE>乘法，历史悠久。其使用实例见于
      <INDEX>林德纸草文献</INDEX>
      林德纸草文献，这是现存最古老的两个数学文献之一，约成书于公元前1700年（且抄自更古老的文献），出自
      一位名叫
      <INDEX><ORDER>阿赫摩斯</ORDER>A<APOS></APOS>赫摩斯</INDEX>
      阿赫摩斯的埃及文士之手。</FOOTNOTE>
      <LABEL NAME="ex:it-pro-mult-int"></LABEL>
      <SOLUTION>                
        <SNIPPET>
	  <NAME>fast_times_iter</NAME>
          <EXAMPLE>example_1.19</EXAMPLE>
          <REQUIRES>even_definition</REQUIRES>
          <JAVASCRIPT>
function double(x) {
    return x + x;
}

function half(x) {
    return x / 2;
}

function fast_times_iter(total, a, b) {
    return b === 1
           ? total + a
           : a === 0 || b===0
           ? 0
           : is_even(b)
           ? fast_times_iter(total, double(a), half(b))
           : fast_times_iter(total + a, a, b - 1);
}

function times(a, b) {
  return fast_times_iter(0, a, b);
}
          </JAVASCRIPT>
          <SCHEME>
          </SCHEME>
        </SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
        <NAME>example_1.19</NAME>
	<REQUIRES>fast_times_iter</REQUIRES>
	<EXPECTED>12</EXPECTED>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </EXERCISE> 

     <SHORT_PAGE LINES="1"></SHORT_PAGE> 
    <EXERCISE> 
      有一种巧妙的算法可以在
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>对数版本</SUBINDEX></INDEX>
      的对数步数内计算斐波那契数。回顾状态变量的变换
      <LATEXINLINE>$a$</LATEXINLINE> 和 <LATEXINLINE>$b$</LATEXINLINE> 在
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>fib-iter</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fib_iter</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      第<SPACE></SPACE>节的过程中 <REF NAME="sec:tree-recursion"></REF> ：
       <LATEXINLINE>$a\leftarrow a+b$</LATEXINLINE> 和
       <LATEXINLINE>$b\leftarrow a$</LATEXINLINE> 。称此转换为
       <LATEXINLINE>$T$</LATEXINLINE> ，并观察应用 <LATEXINLINE>$T$</LATEXINLINE> 一遍又一遍 <LATEXINLINE>$n$</LATEXINLINE> 次，从 1 和 0 开始，
      生成这对 <LATEXINLINE>$\textrm{Fib}(n+1)$</LATEXINLINE> 和
       <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>。换句话说，斐波那契数列是通过应用
       <LATEXINLINE>$T^n$</LATEXINLINE> ，该 <LATEXINLINE>$n$</LATEXINLINE> 第
      次变换的幂  <LATEXINLINE>$T$</LATEXINLINE>，从
      这对开始<LATEXINLINE>$(1,0)$</LATEXINLINE>。现在考虑
       <LATEXINLINE>$T$</LATEXINLINE> 作为……的特例
       <LATEXINLINE>$p=0$</LATEXINLINE>  和  <LATEXINLINE>$q=1$</LATEXINLINE>  在一族变换中  <LATEXINLINE>$T_{pq}$</LATEXINLINE> ，其中 <LATEXINLINE>$T_{pq}$</LATEXINLINE> 转换这对 <LATEXINLINE>$(a,b)$</LATEXINLINE> 根据 <LATEXINLINE>$a\leftarrow bq+aq+ap$</LATEXINLINE> 和 <LATEXINLINE>$b\leftarrow bp+aq$</LATEXINLINE>。证明如果我们应用这样的变换 <LATEXINLINE>$T_{pq}$</LATEXINLINE>两次，效果与使用单次变换相同<LATEXINLINE>$T_{p&apos;q&apos;}$</LATEXINLINE>  形式相同，并计算  
       <LATEXINLINE>$p&apos;$</LATEXINLINE>  和  <LATEXINLINE>$q&apos;$</LATEXINLINE>  从……方面来说
      关于  <LATEXINLINE>$p$</LATEXINLINE> 和<SPACE></SPACE> <LATEXINLINE>$q$</LATEXINLINE>。这为我们提供了一种显式的方法来对这些变换求平方，因此我们可以计算<LATEXINLINE>$T^n$</LATEXINLINE>使用连乘平方法，正如
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME>过程。</SCHEME>
	<JAVASCRIPT>函数。</JAVASCRIPT>
      </SPLITINLINE>
      将这些组合在一起完成以下
      <SPLITINLINE>
	<SCHEME>过程，</SCHEME>
	<JAVASCRIPT>函数，</JAVASCRIPT>
	</SPLITINLINE>
      它以对数步数运行：<FOOTNOTE>本练习是
      <SPLITINLINE>
	<SCHEME>
	  由我们提出的
	</SCHEME>
      </SPLITINLINE>
      基于
      <INDEX>Stoy, Joseph E.</INDEX>
      Joe Stoy，依据
      <INDEX>Kaldewaij, Anne</INDEX>
      <CITATION>Kaldewaij 1990</CITATION>中的一个例子。</FOOTNOTE>
<SNIPPET PAGE="47" EVAL="no" LATEX="yes" POSTPADDING="no">
        <NAME>fib_log_definition</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>fib_example</EXAMPLE>
        <SCHEME>
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   ??      ; compute p&apos;
                   ??      ; compute q&apos;
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
        </SCHEME>
        <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}
function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      <METAPHRASE>??</METAPHRASE>,           // compute p&apos;
                      <METAPHRASE>??</METAPHRASE>,           // compute q&apos;
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	</JAVASCRIPT>
      </SNIPPET>
       <SOLUTION>        
	<SNIPPET>
	  <NAME>fib_log_solution</NAME>
	  <EXAMPLE>example_1.20</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}

function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      p * p + q * q,
                      2 * p * q + q * q,
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	  </JAVASCRIPT>
	  <SCHEME>
	  </SCHEME>
	</SNIPPET>
      </SOLUTION>
       <SNIPPET HIDE="yes">
	<NAME>example_1.20</NAME>
	<REQUIRES>fib_log_solution</REQUIRES>
	<EXPECTED>5</EXPECTED>	
	<JAVASCRIPT>
fib(5);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <LABEL NAME="ex:1_19"></LABEL>
    </EXERCISE>
</SUBSECTION>
