<SUBSECTION>
  <NAME>Greatest Common Divisors</NAME>

  <LABEL NAME="sec:gcd"/>
  <INDEX>greatest common divisor<OPEN/></INDEX>

  <TEXT>
    The greatest common divisor (GCD) of two integers
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> is defined
    to be the largest integer that divides both <LATEXINLINE>$a$</LATEXINLINE>
    and <LATEXINLINE>$b$</LATEXINLINE> with no remainder. For example, the GCD
    of 16 and 28 is 4.  In chapter<SPACE/><REF NAME="chap:data"></REF>, when we investigate how to
    implement rational-number arithmetic, we will need to be able to compute
    GCDs in order to reduce rational numbers to lowest terms.  (To reduce a
    rational number to lowest terms, we must divide both the numerator and the
    denominator by their GCD.  For example, 16/28 reduces to 4/7.)  One way to
    find the GCD of two integers is to factor them and search for common
    factors, but there is a famous algorithm that is much more efficient.
  </TEXT>

  <TEXT>
    <INDEX>Euclid<APOS/>s Algorithm<OPEN/></INDEX>
    The idea of the algorithm is based on the observation that, if
    <LATEXINLINE>$r$</LATEXINLINE> is the remainder when
    <LATEXINLINE>$a$</LATEXINLINE> is divided by 
    <LATEXINLINE>$b$</LATEXINLINE>, then the common divisors of
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> are 
    precisely the same as the common divisors of <LATEXINLINE>$b$</LATEXINLINE>
    and <LATEXINLINE>$r$</LATEXINLINE>.  Thus, we can use the equation
    <LATEX>
      \[\begin{array}{lll}
      \textrm{GCD} (a, b) &amp;=&amp; \textrm{GCD}(b, r)
      \end{array}\]
    </LATEX>
    to successively reduce the problem of computing a GCD to the problem of
    computing the GCD of smaller and smaller pairs of integers.  For example,
    <DO_BREAK_PAGE/>
    <!--
        %could squeeze onto 1 line with
        %\par
        %\begin{smallequation}
        %{\textrm{GCD}}(206,40)={\textrm{GCD}}(40,6)={\textrm{GCD}}(6,4)={\textrm{GCD}}(4,2)={\textrm{GCD}}(2,0)=2
        %\end{smallequation}
        % (to match, would have to make above equation small too)
        %Hal prefers the following since looks like a process (steps)
    -->
    <LATEX>
      \[\begin{array}{lll}
      \textrm{GCD}(206,40) &amp; = &amp; \textrm{GCD}(40,6) \\
                           &amp; = &amp; \textrm{GCD}(6,4) \\
                           &amp; = &amp; \textrm{GCD}(4,2) \\
                           &amp; = &amp; \textrm{GCD}(2,0) \\
                           &amp; = &amp; 2
      \end{array}\]
    </LATEX>
    reduces <LATEXINLINE>$\textrm{GCD}(206, 40)$</LATEXINLINE> to
    <LATEXINLINE>$\textrm{GCD}(2, 0)$</LATEXINLINE>, which is 2.  It is
    possible to show that starting with any two positive integers and
    performing repeated reductions will always eventually produce a pair
    where the second number is 0.  Then the GCD is the other
    number in the pair.  This method for computing the GCD is
    known as <EM>Euclid<APOS/>s Algorithm</EM>.<FOOTNOTE>Euclid<APOS/>s 
    Algorithm is so
    called because it appears in Euclid<APOS/>s
    <INDEX><ORDER>Euclid<APOS/>s Elements</ORDER>Euclid<APOS/>s <EM>Elements</EM></INDEX>
    <EM>Elements</EM> (Book 7,
    ca. 300 BCE).  According to
    <INDEX>Knuth, Donald E.</INDEX>
    Knuth (1997a), it can be considered the
    oldest known nontrivial algorithm.  The ancient Egyptian method of
    multiplication (exercise<SPACE/><REF NAME="ex:it-pro-mult-int"/>) is surely
    older, but, as Knuth explains, Euclid<APOS/>s Algorithm is the oldest known
    to have been presented as a general algorithm, rather than as a set of
    illustrative examples.</FOOTNOTE>
  </TEXT>

  <TEXT>
    It is easy to express Euclid<APOS/>s Algorithm as a 
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="49">
      <INDEX><DECLARATION>gcd</DECLARATION></INDEX>
      <NAME>gcd_definition</NAME>
      <EXAMPLE>gcd_example</EXAMPLE>
      <SCHEME>
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
      </SCHEME>
      <JAVASCRIPT>
function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="49" HIDE="yes">
      <NAME>gcd_example</NAME>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(gcd 20 12)
      </SCHEME>
      <JAVASCRIPT>
gcd(20, 12);
      </JAVASCRIPT>
    </SNIPPET>
    This generates an iterative process, whose number of steps grows as
    the logarithm of the numbers involved.
  </TEXT>

  <TEXT>
    The fact that the number of steps required by Euclid<APOS/>s Algorithm has
    <INDEX>Euclid<APOS/>s Algorithm<SUBINDEX>order of growth</SUBINDEX></INDEX>
    logarithmic growth bears an interesting relation to the
    <INDEX>Fibonacci numbers<SUBINDEX>Euclid<APOS/>s GCD algorithm and</SUBINDEX></INDEX>
    Fibonacci numbers:
    <BLOCKQUOTE>
      <B>Lam<EACUTE_LOWER/><APOS/>s Theorem:</B>
      <INDEX><ORDER>Lames</ORDER>Lam<EACUTE_LOWER/><APOS/>s Theorem</INDEX>
      If Euclid<APOS/>s Algorithm
      requires <LATEXINLINE>$k$</LATEXINLINE> steps to compute the GCD of some
      pair, then the smaller number in the pair must be greater than or equal
      to the <LATEXINLINE>$k$</LATEXINLINE>th Fibonacci number.<FOOTNOTE>This
      theorem was proved in 1845 by
      <INDEX><ORDER>Lame</ORDER>Lam<EACUTE_LOWER/>, Gabriel</INDEX>
      Gabriel Lam<EACUTE_LOWER/>, a
      French mathematician and engineer known chiefly for his contributions
      to mathematical physics.  To prove the theorem, we consider pairs
      <LATEXINLINE>$(a_k ,b_k)$</LATEXINLINE>, where 
      <LATEXINLINE>$a_k\geq b_k$</LATEXINLINE>, for which Euclid<APOS/>s
      Algorithm terminates in <LATEXINLINE>$k$</LATEXINLINE> steps. The proof is
      based on the claim that, if
      <LATEXINLINE>$(a_{k+1},\ b_{k+1}) \rightarrow (a_{k},\ b_{k})
      \rightarrow (a_{k-1},\ b_{k-1})$</LATEXINLINE> are three successive pairs
      in the reduction process, then we must have 
      <LATEXINLINE>$b_{k+1}\geq b_{k} + b_{k-1}$</LATEXINLINE>.
      To verify the claim, consider that a reduction step is defined by applying
      the transformation <LATEXINLINE>$a_{k-1} = b_{k}$</LATEXINLINE>, 
      <LATEXINLINE>$b_{k-1} =
      \textrm{remainder of}\ a_{k}\ \textrm{divided by}\ b_{k}$</LATEXINLINE>.  
      The second equation means that
      <LATEXINLINE>$a_{k} = qb_{k} + b_{k-1}$</LATEXINLINE> for some positive
      integer <LATEXINLINE>$q$</LATEXINLINE>. And since
      <LATEXINLINE>$q$</LATEXINLINE> must be at least 1 we have 
      <LATEXINLINE>$a_{k} = qb_{k} + b_{k-1} \geq b_{k} + b_{k-1}$</LATEXINLINE>.
      But in the previous reduction step we have
      <LATEXINLINE>$b_{k+1}= a_{k}$</LATEXINLINE>. Therefore,
      <LATEXINLINE>$b_{k+1} = a_{k}\geq b_{k} + b_{k-1}$</LATEXINLINE>.
      This verifies the claim.  Now we can prove the theorem by induction on
      <LATEXINLINE>$k$</LATEXINLINE>, the number of steps that the algorithm
      requires to terminate. The result is true for
      <LATEXINLINE>$k=1$</LATEXINLINE>, since this merely requires that
      <LATEXINLINE>$b$</LATEXINLINE> be at least as large as 
      <LATEXINLINE>$\text{Fib}(1)=1$</LATEXINLINE>. Now, assume that the result
      is true for all integers less than or equal to
      <LATEXINLINE>$k$</LATEXINLINE> and establish the result for 
      <LATEXINLINE>$k+1$</LATEXINLINE>.  Let
      <LATEXINLINE>$(a_{k+1},\ b_{k+1})\rightarrow(a_{k},\ b_{k})
      \rightarrow(a_{k-1},\ b_{k-1})$</LATEXINLINE> be successive pairs in the
      reduction process.  By our induction hypotheses, we have
      <LATEXINLINE>$b_{k-1}\geq {\textrm{Fib}}(k-1)$</LATEXINLINE> and 
      <LATEXINLINE>$b_{k}\geq {\textrm{Fib}}(k)$</LATEXINLINE>.  Thus, applying
      the claim we just proved together with the definition of the Fibonacci
      numbers gives
      <LATEXINLINE>$b_{k+1} \geq b_{k} + b_{k-1}\geq {\textrm{Fib}}(k) +
      {\textrm{Fib}}(k-1) = {\textrm{Fib}}(k+1)$</LATEXINLINE>, which completes
      the proof of Lam<EACUTE_LOWER/><APOS/>s Theorem.</FOOTNOTE>
    </BLOCKQUOTE>
  </TEXT>

  <LONG_PAGE lines="2"/>
  <TEXT>
    We can use this theorem to get an order-of-growth estimate for Euclid<APOS/>s
    Algorithm.  Let <LATEXINLINE>$n$</LATEXINLINE> be the smaller of the two
    inputs to the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    If the process takes <LATEXINLINE>$k$</LATEXINLINE> steps, then we must have 
    <LATEXINLINE>$n\geq {\textrm{Fib}} (k)\approx\phi^k/\sqrt{5}$</LATEXINLINE>.
    Therefore the number of steps <LATEXINLINE>$k$</LATEXINLINE> grows as the
    logarithm (to the base <LATEXINLINE>$\phi$</LATEXINLINE>) of
    <LATEXINLINE>$n$</LATEXINLINE>. Hence, the order of growth is
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>.
    <INDEX>greatest common divisor<CLOSE/></INDEX>
    <INDEX>Euclid<APOS/>s Algorithm<CLOSE/></INDEX>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:gcd-process"/> 
    The process that a 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    generates is of course dependent on the rules used by the interpreter.
    As an example, consider the iterative <SCHEMEINLINE>gcd</SCHEMEINLINE> 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    given above. Suppose we were to interpret this 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    using
    <INDEX>normal-order evaluation<SUBINDEX>applicative order vs.</SUBINDEX></INDEX>
    <INDEX>applicative-order evaluation<SUBINDEX>normal order vs.</SUBINDEX></INDEX>
    normal-order evaluation, as discussed in
    section<SPACE/><REF NAME="sec:substitution-model"/>. (The
    normal-order-evaluation rule for
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>conditional expressions</JAVASCRIPT>
    </SPLITINLINE>
    is described
    in exercise<SPACE/><REF NAME="ex:normal-order-vs-appl-order-test"/>.)  
    Using the substitution method (for normal order), illustrate the process
    generated in evaluating 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(gcd 206 40)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and indicate the <SCHEMEINLINE>remainder</SCHEMEINLINE> operations that are
    actually performed. How many <SCHEMEINLINE>remainder</SCHEMEINLINE>
    operations are actually performed in the normal-order evaluation of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(gcd 206 40)</SCHEMEINLINE>?</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE>?</JAVASCRIPT>
    </SPLITINLINE>
    In the applicative-order evaluation?
    <SOLUTION>
      <SPLIT>
	<JAVASCRIPT>
	  <OL>
	    <LI>
	      Using normal-order evaluation, the process undergoes 18 remainder
	      operations. 14 while evaluating the condition, rest during final
	      reduction phase.
              <SNIPPET PAGE="49" EVAL="no">
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
206 % 40 === 0 ? 40 : gcd(206 % 40,
                          40 % (206 % 40))
// remainder operation (1)
6 === 0 ? 40 : gcd(206 % 40,
                   40 % (206 % 40))
gcd(206 % 40, 40 % (206 % 40))
40 % (206 % 40) === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
// remainder operations (2) and (3)
4 === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
gcd(40 % (206 % 40), (206 % 40) % (40 % (206 % 40)))
(206 % 40) % (40 % (206 % 40)) === 0 
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)))
// remainder operations (4), (5), (6), (7)
2 === 0
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
gcd((206 % 40) % (40 % (206 % 40)), 
    (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)))
(40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))) === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
// remainder operations 
                    (8), (9), (10), (11), (12), (13), (14)
0 === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
(206 % 40) % (40 % (206 % 40))    
// remainder operations (15), (16), (17), (18)
2
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	    <LI>
	      Using application order evaluation, the process performs 4
	      remainder operations.
              <SNIPPET PAGE="49" EVAL="no">
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
// remainder operation (1)
gcd(40, 6)
6 === 0 ? 40 : gcd(6, 40 % 6)
gcd(6, 40 % 6)
// remainder operation (2)
gcd(6, 4)
4 === 0 ? 6 : gcd(4, 6 % 4)
gcd(4, 6 % 4)
// remainder operation (3)
gcd(4, 2)
2 === 0 ? 4 : gcd(2, 4 % 2)
gcd(2, 4 % 2)
// remainder operation (4)
gcd(2, 0)
0 === 0 ? 2 : gcd(0, 2 % 0)
2
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	  </OL>
	</JAVASCRIPT>
      </SPLIT>
    </SOLUTION>
  </EXERCISE>
</SUBSECTION>
