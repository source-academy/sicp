<SUBSECTION>

   <NAME>示例：素性测试</NAME> 

  <LABEL NAME="sec:primality"></LABEL>
   <INDEX>素数<SUBINDEX>测试<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX>素数<OPEN></OPEN></INDEX> 

   <TEXT>
    本节描述了两种检查整数 $n$ 素性的
    方法，一种增长阶为 $\Theta(\sqrt{n})$，
    另一种是增长阶为 $\Theta(\log n)$ 的
    <QUOTE>概率算法</QUOTE>。本节末尾的练习建议了基于这些算法的编程项目。
  </TEXT> 

   <SUBHEADING>
    <NAME>查找因子</NAME>
  </SUBHEADING> 

   <TEXT>
    自古以来，数学家们对素数问题着迷，许多人致力于确定测试数字是否为素数的方法。测试一个数字是否为素数的一种方法是查找该数字<APOS></APOS>的因子。以下程序查找给定数字<SPACE></SPACE>$n$的最小整数因子（大于 1）。它通过从 2 开始依次测试整数来直接实现<SPAN>n</SPAN>的可除性。
    
      <INDEX><DECLARATION>find_divisor</DECLARATION></INDEX>
      <INDEX><DECLARATION>divides</DECLARATION></INDEX>
      <INDEX><DECLARATION>smallest_divisor</DECLARATION></INDEX>
      <NAME>smallest_divisor_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>smallest_divisor_example</EXAMPLE>
      
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))
      
      <JAVASCRIPT>
function smallest_divisor(n) {
    return find_divisor(n, 2);
}
function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, test_divisor + 1);
}
function divides(a, b) {
    return b % a === 0;
}
      </JAVASCRIPT>
    
    
      <NAME>smallest_divisor_example</NAME>
      <REQUIRES>smallest_divisor_definition</REQUIRES>
      <EXPECTED>2</EXPECTED>
      
(smallest-divisor 42)
      
      <JAVASCRIPT>
smallest_divisor(42);
      </JAVASCRIPT>
    
  </TEXT> 

   <TEXT>
    我们可以如下测试一个数字是否为素数：
    当且仅当 $n$ 是其自身的最小因子时，
    $n$ 才是素数。
    
      <INDEX><DECLARATION>is_prime</DECLARATION></INDEX>
      <NAME>prime_definition</NAME>
      <REQUIRES>smallest_divisor_definition</REQUIRES>
      <EXAMPLE>prime_example</EXAMPLE>
      
(define (prime? n)
  (= n (smallest-divisor n)))
      
      <JAVASCRIPT>
function is_prime(n) {
    return n === smallest_divisor(n);
}
      </JAVASCRIPT>
    

    
      <NAME>prime_example</NAME>
      <REQUIRES>prime_definition</REQUIRES>
      <EXPECTED>false</EXPECTED>
      
(prime? 42)
      
      <JAVASCRIPT>
is_prime(42);
      </JAVASCRIPT>
    

  </TEXT> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    终止测试 
    <SPLITINLINE>
      find-divisor
      <JAVASCRIPT><JAVASCRIPTINLINE>find_divisor</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    基于这样一个事实：如果 $n$ 不是素数，
    则它必须有一个小于或等于 $\sqrt{n}$ 的因子。<FOOTNOTE>如果 
    $d$ 是 
    $n$ 的因子，那么 $n/d$ 也是。
    但 $d$ 和 $n/d$ 不能都大于 $\sqrt{n}$。</FOOTNOTE>
    这意味着算法只需测试介于 1 和 $\sqrt{n}$ 之间的因子。因此，识别 $n$ 为素数所需步骤数的增长阶为 $\Theta(\sqrt{n})$。
  </TEXT> 

   <SUBHEADING>
    <NAME>费马测试</NAME>
  </SUBHEADING> 

  <TEXT> 
    The  <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>  素性测试基于数论中的一个结果，称为
    <INDEX>费马素性测试<OPEN></OPEN></INDEX>
    <INDEX>素数<SUBINDEX>费马测试<OPEN></OPEN></SUBINDEX></INDEX>
    费马<APOS></APOS>的小定理。<FOOTNOTE>皮埃尔
    <INDEX><ORDER>费马</ORDER>费马，皮埃尔·德</INDEX>
    费马（1601<ENDASH></ENDASH>1665）被认为是现代
    <INDEX>数论</INDEX>
    数论的创始人。他取得了许多重要的数论结果，但他通常只公布结果，没有提供证明。
    <INDEX><ORDER>费马的</ORDER>费马小定理<SUBINDEX>证明</SUBINDEX></INDEX>
    费马的小定理在1640年他写的一封信中被陈述。第一个已发表的证明由
    <INDEX>欧拉，莱昂哈德<SUBINDEX>费马<APOS></APOS>的小定理的证明</SUBINDEX></INDEX>
    欧拉在1736年给出（而在未发表的
    <INDEX>莱布尼茨，戈特弗里德·威廉·冯<SUBINDEX>费马<APOS></APOS>的小定理的证明</SUBINDEX></INDEX>
    莱布尼茨的手稿中找到了更早的相同证明）。费马<APOS></APOS>最著名的结果<EMDASH></EMDASH>被称为费马<APOS></APOS>最后定理<EMDASH></EMDASH>于1637年在他所持有的书籍<EM>算术</EM>（由三世纪的希腊数学家
    <INDEX>丢番图<APOS></APOS>的 <EM>算术</EM>，费马<APOS></APOS>的版本</INDEX>
    丢番图）中写下，并留下旁注<QUOTE>我发现了一个真正非凡的证明, 但这段空白不够写下它。</QUOTE>找到费马<APOS></APOS>最后定理的证明成为数论中最著名的挑战之一。最终完整的解决方案由
    <INDEX>威尔斯，安德鲁</INDEX>
    普林斯顿大学的安德鲁·威尔斯在1995年给出。</FOOTNOTE>

      <BLOCKQUOTE>
      <B>费马<APOS></APOS>的小定理:</B> 
      <INDEX><ORDER>费马的</ORDER>费马<APOS></APOS>的小定理</INDEX>
      如果 $n$ 是一个素数，并且 
      $a$ 是小于 $n$ 的任意正整数，
      那么 $a$ 的 $n$ 次幂同余于
      $a$ 模<SPACE></SPACE>$n$。
    </BLOCKQUOTE>
    （两个数字被称为
    <INDEX>模 $n$ 同余</INDEX>
    <EM>同余模</EM>
     <LATEXINLINE>$n$</LATEXINLINE>  如果它们在除以  时有相同的余数 <LATEXINLINE>$n$</LATEXINLINE> 。 一个数字的余数 <LATEXINLINE>$a$</LATEXINLINE>  被除以  <LATEXINLINE>$n$</LATEXINLINE>  也被称为 
    <INDEX>模 $n$ 余数<SUBINDEX></SUBINDEX></INDEX>
    <INDEX>模 $n$</INDEX>
    <EM>的余数</EM>  <LATEXINLINE>$a$</LATEXINLINE>  <EM>模</EM>
     <LATEXINLINE>$n$</LATEXINLINE> ，或简称为 <LATEXINLINE>$a$</LATEXINLINE> 
     <EM>模</EM>  <LATEXINLINE>$n$</LATEXINLINE> 。)
   </TEXT>

   <TEXT>
    如果 $n$ 不是素数，那么通常大多数小于
    $n$ 的数字 $a$ 将不满足上述关系。这导致了以下用于测试素性的算法：
    给定一个数 $n$，选择一个
    <INDEX>随机数生成器<SUBINDEX><ORDER>素性</ORDER>素性测试中使用</SUBINDEX></INDEX>
    随机数 $a &lt; n$ 并计算 $a^n$ 模
    $n$ 的余数。如果结果不等于
    $a$，则 $n$ 一定不是素数。如果等于
    $a$，那么 $n$ 很可能是素数。现在选择另一个
    随机数 $a$ 并用同样的方法测试它。如果它也满足这个方程，那么可以更有信心地认为
    $n$ 是素数。通过尝试越来越多的 $a$ 值，可以增加对结果的信心。这个算法被称为费马测试。
  </TEXT> 

  <TEXT> 
    要实现费马测试，我们需要一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算一个数的
    <INDEX>幂运算<SUBINDEX>模 $n$</SUBINDEX></INDEX>
    ：
     <SNIPPET PAGE="51">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>expmod_definition</NAME>
      <EXAMPLE>expmod_example</EXAMPLE>
      <REQUIRES>even_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (square (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))        
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
           ? square(expmod(base, exp / 2, m)) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="51" HIDE="yes">
      <NAME>expmod_example</NAME>
      <REQUIRES>expmod_definition</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(expmod 4 3 5)
      </SCHEME>
      <JAVASCRIPT>
expmod(4, 3, 5);
      </JAVASCRIPT>
    </SNIPPET> 
    这与
    <SPLITINLINE>
      fast-expt
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    在第<SPACE></SPACE><REF NAME="sec:exponentiation"></REF>节中的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    非常相似。它使用逐次平方，因此步骤数与指数的增长呈对数关系。<FOOTNOTE>在指数
    $e$ 大于 1 的情况下，简化步骤基于这样的事实：对于任何整数
    $x$，
    $y$ 和 $m$，我们可以通过分别计算
    $x$ 和 $y$ 对 $m$ 的余数，
    然后将这些结果相乘，最后取结果对
    $m$ 的余数来找到
    $x \times y$ 对 $m$ 的余数。例如，当
    $e$ 为偶数时，我们计算 $b^{e/2}$ 对
    $m$ 的余数，平方这个值，然后对 $m$ 取余。这种技术很有用，因为它意味着我们可以在计算过程中不用处理比
    $m$ 大得多的数字。(比较练习<SPACE></SPACE><REF NAME="ex:Alyssas-expmod"></REF>。)</FOOTNOTE>
   </TEXT>

  <LONG_PAGE LINES="2"></LONG_PAGE>
  <TEXT> 
    费马测试通过随机选择一个数字来进行 
     <LATEXINLINE>$a$</LATEXINLINE>   介于 1 和
     <LATEXINLINE>$n-1$</LATEXINLINE>  之间，并检查它对  的模余数是否
    <LATEXINLINE>$n$</LATEXINLINE>  的
     <LATEXINLINE>$n$</LATEXINLINE> 次幂的 <LATEXINLINE>$a$</LATEXINLINE>  是否等于  <LATEXINLINE>$a$</LATEXINLINE> 。 随机数
     <LATEXINLINE>$a$</LATEXINLINE>  是使用
    <SPLITINLINE>
      
	过程
	random, 
      
      <JAVASCRIPT>
	原语函数
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE>, 
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      我们假设其作为 Scheme 的原语包括在内。
    </SPLITINLINE>
    <SPLITINLINE>
      
	<INDEX><USE>random</USE> (原语函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>random</USE></SUBINDEX></INDEX>
        Random 
	返回一个小于其整数输入的非负整数。因此，要获得
	一个介于 1 和 $n-1$ 之间的随机数，我们调用
	random 的输入为 $n-1$ 并加 1：
      
      <JAVASCRIPT>
	<INDEX><USE>math_random</USE> (原语函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_random</USE><ECMA>Math.random</ECMA></SUBINDEX></INDEX>
	返回一个小于1的非负数。因此，要获得
	一个介于 1 和 $n-1$ 之间的随机数，我们将
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE> 的返回值乘以
	$n-1$，用原语函数
	<INDEX><USE>math_floor</USE> (原语函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_floor</USE><ECMA>Math.floor</ECMA></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>math_floor</JAVASCRIPTINLINE> 向下取整，
	并加 1：
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET PAGE="52" HIDE="yes">
      <NAME>random_definition</NAME>
      <SCHEME>
;; random is predefined in Scheme
      </SCHEME>
      <JAVASCRIPT>
function random(n) {
    return math_floor(math_random() * n);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="52">
      <INDEX><DECLARATION>fermat_test</DECLARATION></INDEX>
      <NAME>fermat_test_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>expmod_definition</REQUIRES>
      <REQUIRES>random_definition</REQUIRES>
      <EXAMPLE>fermat_test_example</EXAMPLE>
      <SCHEME>
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function fermat_test(n) {
    function try_it(a) {
        return expmod(a, n, n) === a;
    }
    return try_it(1 + math_floor(math_random() * (n - 1)));
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="51" HIDE="yes">
      <NAME>fermat_test_example</NAME>
      <REQUIRES>fermat_test_definition</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(fermat-test 97)
      </SCHEME>
      <JAVASCRIPT>
fermat_test(97);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

   <TEXT>
    下面的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    根据参数指定的次数运行测试。如果测试每次都成功，其值为 true，否则为 false。
    
      <INDEX><DECLARATION>fast_is_prime</DECLARATION></INDEX>
      <NAME>fast_prime_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>expmod_definition</REQUIRES>
      <REQUIRES>random_definition</REQUIRES>
      <REQUIRES>fermat_test_definition</REQUIRES>
      <EXAMPLE>fast_prime_example</EXAMPLE>
      
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))
      
      <JAVASCRIPT>
function fast_is_prime(n, times) {
    return times === 0
           ? true
           : fermat_test(n)
           ? fast_is_prime(n, times - 1)
           : false;
}
      </JAVASCRIPT>
    
    
      <NAME>fast_prime_example</NAME>
      <REQUIRES>fast_prime_definition</REQUIRES>
      <EXPECTED>true</EXPECTED>
      
(fast-prime? 97 3)
      
      <JAVASCRIPT>
fast_is_prime(97, 3);
      </JAVASCRIPT>
    
  </TEXT> 

   <SUBHEADING>
    <NAME>概率方法</NAME>
  </SUBHEADING> 

   <INDEX>概率算法<OPEN></OPEN></INDEX> 
   <INDEX>算法<SUBINDEX>概率<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    费马测试与大多数熟悉的算法不同，后者能计算出保证正确的答案。而费马测试得到的答案只是可能正确。更确切地说，如果
    $n$ 在费马测试中失败，我们可确定
    $n$ 不是素数。但 $n$ 通过测试的事实，虽然是一个极强的指示，仍不能保证
    $n$ 是素数。我们想说的是，对于任何数字
    $n$，如果我们进行足够多次测试，并发现
    $n$ 每次都通过测试，那么我们素性测试中出错的概率可以降到任意小。
  </TEXT> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
  <TEXT> 
    不幸的是，这一断言并不完全正确。确实存在一些数字能欺骗费马测试：数字 
     <LATEXINLINE>$n$</LATEXINLINE>  哪些非素数却具有这样的性质 
     <LATEXINLINE>$a^n$</LATEXINLINE>  同余于  <LATEXINLINE>$a$</LATEXINLINE>  模
     <LATEXINLINE>$n$</LATEXINLINE>  对于所有整数
     <LATEXINLINE>$a &lt; n$</LATEXINLINE> 。这类数字非常罕见，因此在实践中费马测试是相当可靠的。<FOOTNOTE>
    
    能欺骗费马测试的数字称为
    <INDEX>卡迈克尔数</INDEX>
    <EM>卡迈克尔数</EM>，对它们的研究不多，只知道它们非常稀少。在一亿以下有 255 个
    卡迈克尔数。最小的几个是 561, 1105,
    1729, 2465, 2821, 和 6601。在随机选择的非常大的数字的素性测试中，遇到一个欺骗费马测试的值的机会小于
    <INDEX>宇宙辐射</INDEX>
    宇宙辐射造成计算机在进行所谓
    <QUOTE>正确</QUOTE>算法时出错的几率。认为一个算法因第一原因而不足（而非第二原因）体现了
    <INDEX>工程学 vs.<SPACE></SPACE>数学</INDEX>
    <INDEX>数学<SUBINDEX>工程学 vs.</SUBINDEX></INDEX>
    数学与工程学的区别。
  </FOOTNOTE>
    费马测试有一些变种无法被愚弄。在这些测试中，就像费马方法一样，人们测试一个整数的素性
     <LATEXINLINE>$n$</LATEXINLINE>  通过选择一个随机整数
     <LATEXINLINE>$a &lt; n$</LATEXINLINE>  并检查一些依赖于 的条件
     <LATEXINLINE>$n$</LATEXINLINE>  和
     <LATEXINLINE>$a$</LATEXINLINE> 。 (请参见练习<SPACE></SPACE><REF NAME="ex:miller-rabin"></REF> 了解此类测试的示例。)
    另一方面，与费马测试相比，可以证明，对于任何  <LATEXINLINE>$n$</LATEXINLINE> ，对于大多数整数，该条件不成立
     <LATEXINLINE>$a &lt; n$</LATEXINLINE>  除非
     <LATEXINLINE>$n$</LATEXINLINE>  是素数。因此，如果
     <LATEXINLINE>$n$</LATEXINLINE>  通过某个随机选择的测试
    <SPACE></SPACE> <LATEXINLINE>$a$</LATEXINLINE> ，则 的机会大于一半
     <LATEXINLINE>$n$</LATEXINLINE>  是素数。如果
     <LATEXINLINE>$n$</LATEXINLINE>  在两个随机选择下通过测试
     <LATEXINLINE>$a$</LATEXINLINE> ，则 的机会大于 3/4
     <LATEXINLINE>$n$</LATEXINLINE>  是素数。通过对更多随机选择的 值运行测试
     <LATEXINLINE>$a$</LATEXINLINE> 我们可以将出错的概率降低到任意小。
    <INDEX>费马素性测试<CLOSE></CLOSE></INDEX>
    <INDEX>素数<SUBINDEX>费马测试<CLOSE></CLOSE></SUBINDEX></INDEX>
   </TEXT>

  <TEXT> 
    存在这样一种测试，可以证明其错误的概率变得任意小，这引发了人们对这类算法的兴趣，这些算法被称为<EM>概率算法</EM>。 
<INDEX>概率算法<CLOSE></CLOSE></INDEX>
<INDEX>算法<SUBINDEX>概率<CLOSE></CLOSE></SUBINDEX></INDEX>
<INDEX>素数<CLOSE></CLOSE></INDEX>
    在这个领域有大量的研究活动，概率算法已经成功应用于许多领域。  <FOOTNOTE>概率素数测试最显著的应用之一是在
    <INDEX>密码学</INDEX>
    密码学领域。
    <SPLITINLINE>
      
	虽然现在仍计算上难以分解一个任意 200 位
	数的因子，但可以用费马测试在几秒钟内检查这样一个数的素性。
      
      <JAVASCRIPT>
	截至编写时（2021 年），仍然计算困难以分解一个任意 300 位
	数的因子，但可以用费马测试在几秒钟内检查这样一个数的素性。
      </JAVASCRIPT>
    </SPLITINLINE>
    这个事实构成了一种用于构建
    <QUOTE>不可破解的密码</QUOTE>的技术基础，它由
    <INDEX>Ronald L. Rivest</INDEX>
    Rivest、
    <INDEX>Adi Shamir</INDEX>
    Shamir 和
    <INDEX>Leonard Adleman</INDEX>
    Adleman (1977) 提出。最终的
    <INDEX>RSA 算法</INDEX>
    <EM>RSA 算法</EM> 已成为一种广泛用于提升电子通讯安全的技术。由于这一点和相关的发展，研究
    <INDEX>素数<SUBINDEX>与密码学</SUBINDEX></INDEX>
    素数，曾经被认为是“纯”数学中仅为本身而研究的话题的典范，现在发现它对密码学、电子资金转账和信息检索有重要的实际应用。</FOOTNOTE>
   </TEXT>

   <EXERCISE>
     
    使用
    <SPLITINLINE>
      smallest-divisor
      <JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    找出以下数字的最小因子：199、1999、
    19999。
    <SOLUTION>
      
	<NAME>smallest_division_solution</NAME>
	<EXPECTED>199</EXPECTED>
	<REQUIRES>smallest_divisor_definition</REQUIRES>
	<JAVASCRIPT>
smallest_divisor(199);
// smallest_divisor(1999);
// smallest_divisor(19999);
        </JAVASCRIPT>
        
        
      
    </SOLUTION>
  </EXERCISE> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
  <EXERCISE>
    <LABEL NAME="ex:search-for-primes"></LABEL>
     <SPLITINLINE>
      
        大多数 Lisp 实现都包含一个名为 
        <INDEX><DECLARATION>runtime</DECLARATION></INDEX> 
        <INDEX><DECLARATION>原语 <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> (用 <EM>ns</EM> 标记的不是 IEEE Scheme 标准中的)</DECLARATION><SUBINDEX><ORDER>runtime</ORDER>runtime (<EM>ns</EM>)</SUBINDEX></INDEX>
        runtime
        的原语，它返回一个整数，指定系统已经运行的时间量（例如，以微秒为单位）。以下是 
        timed-prime-test
        过程，
      
      <JAVASCRIPT>
        假设一个无参数的原语函数
        <INDEX><USE>get_time</USE> (原语函数)</INDEX>
        <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>get_time</USE><ECMA>new Date().getTime</ECMA></SUBINDEX></INDEX>
        <JAVASCRIPTINLINE>get_time</JAVASCRIPTINLINE>
        返回自协调世界时 1970 年 1 月 1 日星期四 00:00:00 以来的毫秒数。<FOOTNOTE>此日期称为
        <INDEX>UNIX<SUBINDEX>epoch</SUBINDEX></INDEX>
        <EM>UNIX 纪元</EM>，是处理时间的函数规范的一部分
        UNIX$^{\textrm{TM}}$ 操作系统。</FOOTNOTE>
        以下是
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
        函数，
      </JAVASCRIPT>
    </SPLITINLINE>
    当用一个整数调用时  <LATEXINLINE>$n$</LATEXINLINE> ，打印
     <LATEXINLINE>$n$</LATEXINLINE> 并检查是否
     <LATEXINLINE>$n$</LATEXINLINE> 是素数。如果 <LATEXINLINE>$n$</LATEXINLINE> 
    是素数，
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    打印三个星号<SPLITINLINE><JAVASCRIPT><FOOTNOTE>原语函数 <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 返回其
    参数，同时也打印它。在这里
    <JAVASCRIPTINLINE>“</JAVASCRIPTINLINE><FIXED_SPACE></FIXED_SPACE><JAVASCRIPTINLINE>***</JAVASCRIPTINLINE><FIXED_SPACE></FIXED_SPACE><JAVASCRIPTINLINE>”</JAVASCRIPTINLINE>
    是一个
    <EM>字符串</EM>，我们将其作为参数传递给 <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 函数。
    第<SPACE></SPACE><REF NAME="sec:strings"></REF>节会更详细地介绍字符串。</FOOTNOTE></JAVASCRIPT></SPLITINLINE>，然后是执行测试所用的时间。
    <SPLITINLINE>
      
	<INDEX><DECLARATION>newline</DECLARATION></INDEX>
      
    </SPLITINLINE>
     <SNIPPET PAGE="52">
      <INDEX><USE>display</USE> (primitive function)<FRAGILE></FRAGILE></INDEX>
      <INDEX><USE>timed_prime_test</USE><FRAGILE></FRAGILE></INDEX>
      <NAME>timed_prime_definition</NAME>
      <REQUIRES>prime_definition</REQUIRES>
      <EXAMPLE>timed_prime_example</EXAMPLE>
      <SCHEME>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display &quot; *** &quot;)
  (display elapsed-time))
      </SCHEME>
      <JAVASCRIPT>
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
<SHORT_SPACE_AND_ALLOW_BREAK></SHORT_SPACE_AND_ALLOW_BREAK>
function start_prime_test(n, start_time) {
    return is_prime(n)
           ? report_prime(get_time() - start_time)
           : false;
}
<SHORT_SPACE_AND_ALLOW_BREAK></SHORT_SPACE_AND_ALLOW_BREAK>
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
    return true;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="52" HIDE="yes">
      <NAME>timed_prime_example</NAME>
      <REQUIRES>timed_prime_definition</REQUIRES>
      <SCHEME>
(timed-prime-test 43)
      </SCHEME>
      <JAVASCRIPT>
timed_prime_test(43);
      </JAVASCRIPT>
    </SNIPPET> 
    使用这个
    <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    编写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      
        search-for-primes 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>search_for_primes</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    用于检查指定范围内连续奇整数的素性。
    使用您的
    <SPLITINLINE>
      
        过程
      
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    找出大于 1000, 大于 10,000, 大于 100,000, 大于 1,000,000 的三个最小素数。注意测试每个素数所需的时间。由于测试算法的增长阶为
     <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE> ，您应该预期测试大约 10,000 附近的素数需要大约
     <LATEXINLINE>$\sqrt{10}$</LATEXINLINE>  是测试大约 1000 附近的素数的时间的几倍。您的计时数据是否支持这一点？10,000 和 1,000,000 的数据支持这个
     <LATEXINLINE>$\sqrt{n}$</LATEXINLINE> 
    预测？您的结果是否与程序在您的计算机上按与计算所需步骤数成比例的时间运行的概念兼容？
    <SOLUTION>
      
        <NAME>search_for_primes_definition</NAME>
        <EXAMPLE>search_for_primes_example</EXAMPLE>
        <REQUIRES>timed_prime_definition</REQUIRES>
        <JAVASCRIPT>
function search_for_primes(start, times) {
    return times === 0
           ? true
           : start &gt; 2 &amp;&amp; start % 2 === 0
           ? search_for_primes(start + 1, times)
           // if we get true, it&apos;s a prime
           : timed_prime_test(start)
           ? search_for_primes(start + 2, times - 1)
           : search_for_primes(start + 2, times);
}
        </JAVASCRIPT>
        
        
      
      
      <NAME>search_for_primes_example</NAME>
      <REQUIRES>search_for_primes_definition</REQUIRES>
      <JAVASCRIPT>
search_for_primes(10000, 3);
// search_for_primes(10000000, 3);
// search_for_primes(10000000000, 3);
      </JAVASCRIPT>
      
      
    
      时间数据相当清晰地支持了对于预测足够大的 $\sqrt{n}$，如 100,000 和 1,000,000。
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:better-smallest-divisor"></LABEL>  
    更高效版本的
    <INDEX><USE>smallest_divisor</USE><SUBINDEX>更高效版本</SUBINDEX></INDEX>
    <SPLITINLINE>
      
        smallest-divisor 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> 
    在本节开头展示的进行许多不必要的测试：在检查数字是否能被 2 整除后，就没有必要再检查它是否能被更大的偶数整除。这表明用于
    <SPLITINLINE>
      
        test-divisor 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>test_divisor</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的值不应该是 2、3、4、5、6、<ELLIPSIS></ELLIPSIS>，而应该是 2、3、5、7、9、
    <ELLIPSIS></ELLIPSIS>。要实施这一更改，
    <SPLITINLINE>
      定义一个过程
      <JAVASCRIPT>声明一个函数</JAVASCRIPT>
    </SPLITINLINE> 
     <SCHEMEINLINE>next</SCHEMEINLINE>  
    返回 3 如果其输入等于 2
    否则返回其输入加<SPACE></SPACE>2。修改
    <SPLITINLINE>
      
        smallest-divisor 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    以使用
    <SPLITINLINE>
      
        (next test-divisor) 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>next(test_divisor)</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    而非
    <SPLITINLINE>
      (+ test-divisor 1).
      <JAVASCRIPT><JAVASCRIPTINLINE>test_divisor + 1</JAVASCRIPTINLINE>.
      </JAVASCRIPT></SPLITINLINE>
    拼入该修改版本的
    <SPLITINLINE>
      
        timed-prime-test
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的
    <SPLITINLINE>
      smallest-divisor,
      <JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
      </SPLITINLINE>
    对在练习中找到的 12 个素数运行测试<SPACE></SPACE><REF NAME="ex:search-for-primes"></REF>。
    由于此修改将测试步骤减半，您应该预期其运行速度大约提高一倍。如果没有确认这一预期，观察到的两种算法速度的比率是什么，您如何解释它与 2 的差异？
      <SOLUTION>
      
        <NAME>better_smallest_divisor_solution</NAME>
        <JAVASCRIPT>
function next(input) {
    return input === 2 
           ? 3 
           : input + 2;
}

function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, next(test_divisor));
}
        </JAVASCRIPT>
	<JAVASCRIPT_RUN>
function square(x) {
    return x * x;
}
function smallest_divisor(n) {
    return find_divisor(n, 2);
}
function divides(a, b) {
    return b % a === 0;
}
function is_prime(n) {
    return n === smallest_divisor(n);
}
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
function start_prime_test(n, start_time) {
    return is_prime(n)
           ? report_prime(get_time() - start_time)
           : true;
}
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
}
function next(input) {
    return input === 2 
           ? 3 
           : input + 2;
}
function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, next(test_divisor));
}

timed_prime_test(43);
	</JAVASCRIPT_RUN>
        
        
      
      两种算法的速度比不完全是 2，但这可能是由于硬件/网络问题。与以前的解决方案相比，大约快 1.5 倍。
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>  
    修改练习中的
    <SPLITINLINE>
      
        timed-prime-test 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    以使用
    <SPLITINLINE>
      
        fast-prime? 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    （费马方法），并测试您在该练习中找到的每个 12 个素数。由于费马测试具有
     <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 增长，您会如何预期测试 1,000,000 附近素数的时间与测试 1000 附近素数的时间相比？您的数据是否支持这一点？您能解释发现的任何差异吗？
     <LABEL NAME="ex:mod-timed-prime-test"></LABEL>
         <SOLUTION>
      
      <EXAMPLE>mod_timed_prime_test_example</EXAMPLE>
	<NAME>mod_timed_prime_test_solution</NAME>
	<REQUIRES>fast_prime_definition</REQUIRES>
	<JAVASCRIPT>
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
function start_prime_test(n, start_time) {
    return fast_is_prime(n, math_floor(math_log(n)))
           ? report_prime(get_time() - start_time)
           : true;
}
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
}
        </JAVASCRIPT>
        
        
      
      
      <NAME>mod_timed_prime_test_example</NAME>
      <REQUIRES>mod_timed_prime_test_solution</REQUIRES>
      <JAVASCRIPT>
timed_prime_test(10007);
// timed_prime_test(10009);
// timed_prime_test(10037);
// timed_prime_test(100003, 3);
// timed_prime_test(100019, 3);
// timed_prime_test(100043, 3);
// timed_prime_test(1000003, 3);
// timed_prime_test(1000033, 3);
// timed_prime_test(1000037, 3);
      </JAVASCRIPT>
      
      
    
        使用 <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 测试接近 1,000,000 附近素数的时间
        大约为 4 毫秒，是测试接近 1,000 附近素数时间的 4 倍。对比使用 <JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE> 达到的 8 毫秒，
        这是更快的。然而，尽管慢了 4 倍，这一事实不能让我们相信它具有比 $\Theta(\log n)$ 更大的增长率，
        因为这需要通过更大的数字进行测试以获得对函数增长更准确的理解。
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>  
    Alyssa P. Hacker 抱怨说我们在编写时做了很多额外的工作
     <SCHEMEINLINE>expmod</SCHEMEINLINE> 。毕竟，她说，既然我们已经知道如何计算指数，我们本可以简单地写
     <SNIPPET PAGE="55">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>no_extra_work</NAME>
      <REQUIRES>expt_log_definition</REQUIRES>
      <EXAMPLE>expmod_example</EXAMPLE>
      <SCHEME>
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return fast_expt(base, exp) % m;
}
      </JAVASCRIPT>
    </SNIPPET> 
    她说得对吗？  
    这个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    能否同样用于我们的快速素数测试器？请解释。
     <LABEL NAME="ex:Alyssas-expmod"></LABEL>
     <SOLUTION>
      从表面上看，Alyssa 的建议是正确的：她的
      <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> 函数计算
      $\textit{base}^{\textit{exp}}$，然后根据费马测试要求找到其模 $m$ 的余数。
      <P></P>
      然而，对于较大的底数，Alyssa 的方法很快就会遇到限制，因为 JavaScript 使用 64 位表示数字，遵循双精度浮点标准。当数字变得如此之大以至于无法在此标准下精确表示时，结果变得不可靠。更糟糕的是，该方法可能超出了该标准中可表示的最大数字，导致计算错误。
      <P></P>
      然而，对于较小的底数，Alyssa 的方法可能比原始 <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> 函数更快，因为它只会执行一次余数运算。
    </SOLUTION>
   </EXERCISE>

  <LONG_PAGE LINES="1"></LONG_PAGE>
  <EXERCISE>
    <LABEL NAME="ex:louis-fast-prime"></LABEL>  
    Louis Reasoner 很难完成练习<SPACE></SPACE><REF NAME="ex:mod-timed-prime-test"></REF>。
    他的
    <SPLITINLINE>
      
        fast-prime? 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    测试似乎比他的
    <SPLITINLINE>
      
        prime? 
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    测试运行得更慢。Louis 叫来他的朋友 Eva Lu Ator 来帮忙。当他们检查 Louis<APOS></APOS>的代码时，他们发现他重写了
     <SCHEMEINLINE>expmod</SCHEMEINLINE> 
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    使用显式乘法，而不是调用
     <SCHEMEINLINE>square</SCHEMEINLINE> ：
     <SNIPPET PAGE="55">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <REQUIRES>even_definition</REQUIRES>
      <EXAMPLE>expmod_example</EXAMPLE>
      <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (* (expmod base (/ exp 2) m)
              (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
           ? (  expmod(base, exp / 2, m)
              * expmod(base, exp / 2, m)) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
      </JAVASCRIPT>
    </SNIPPET>
     <QUOTE>“我看不出这样做有什么区别，”</QUOTE>
    Louis 说。<QUOTE>“但我看出来了。”</QUOTE> Eva 说。<QUOTE>“通过那样编写
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>，
    你已经将
    $\Theta(\log n)$ 过程转换为
    $\Theta(n)$ 过程。”</QUOTE> 请解释。

    <SOLUTION>
      Eva 是对的：通过计算表达式：
      
	<JAVASCRIPT>
(expmod(base, exp / 2, m) * expmod(base, exp / 2, m)) % m    
	</JAVASCRIPT>
      
      表达式
      <JAVASCRIPTINLINE>expmod(base, exp / 2, m)</JAVASCRIPTINLINE>
      在指数为偶数时的每一步计算中被重复计算，消除了快速幂算法的好处——即在指数为偶数时将指数减半——因此消除了使算法更快的特性。
    </SOLUTION>
   </EXERCISE>

   <EXERCISE>
    证明脚注<SPACE></SPACE><REF NAME="foot:carmichaelfn"></REF>中列出的
    <INDEX>卡迈克尔数</INDEX>
    卡迈克尔数确实能欺骗费马测试。也就是说，编写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>，
    接收一个整数 $n$ 并测试对于每一个 $a &lt; n$，
    $a^n$ 是否同余于 
    $a$ 模 $n$，并在给定的卡迈克尔数上试验您的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>。
    <SOLUTION>
      
	<NAME>carmichael</NAME>
        <EXAMPLE>example_1.29</EXAMPLE>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function carmichael(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
               ? square(expmod(base, exp / 2, m)) % m
               : (base * expmod(base, exp - 1, m)) % m;
    }
    function fermat_test(n, a) {
        return expmod(a, n, n) === a;
    }
    function iter(n, i) {
        return i === n
               ? true
               : fermat_test(n, i)
               ? iter(n, i + 1)
               : false;
    }
    return iter(n, 2);
}
	</JAVASCRIPT>
        
        
      
    </SOLUTION>
    
      <NAME>example_1.29</NAME>
      <REQUIRES>carmichael</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <JAVASCRIPT>
carmichael(561);
// carmichael(1105);
// carmichael(1729);
// carmichael(2465);
// carmichael(2821);
// carmichael(6601);
      </JAVASCRIPT>
      
      
    
    
  </EXERCISE> 
        
  <EXERCISE> 
    费马测试的一种变体，它不能被欺骗，被称为
    <INDEX>素数<SUBINDEX>米勒–拉宾测试</SUBINDEX></INDEX>
    <INDEX>费马素性测试<SUBINDEX>的变体</SUBINDEX></INDEX>
    <INDEX>米勒–拉宾素性测试</INDEX>
    <INDEX>米勒，Gary L.</INDEX>
    <INDEX>拉宾，Michael O.</INDEX>
    <EM>米勒–拉宾测试</EM> （<CITATION>米勒 1976</CITATION>；
    <CITATION>拉宾 1980</CITATION>）。它从
    <INDEX><ORDER>费马的</ORDER>费马<APOS></APOS>小定理<SUBINDEX>替代形式</SUBINDEX></INDEX>
    费马<APOS></APOS>小定理的一个替代形式开始，该定理指出如果
     <LATEXINLINE>$n$</LATEXINLINE> 是素数且
     <LATEXINLINE>$a$</LATEXINLINE> 是小于的任意正整数
     <LATEXINLINE>$n$</LATEXINLINE> ，那么 <LATEXINLINE>$a$</LATEXINLINE> 次幂的 <LATEXINLINE>$(n-1)$</LATEXINLINE> 次方同余于 1 模<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> 。 要测试一个数字的素性 <LATEXINLINE>$n$</LATEXINLINE>  通过米勒–拉宾测试，我们选择一个随机数 <LATEXINLINE>$a &lt; n$</LATEXINLINE> 并将其提升为 
     <LATEXINLINE>$a$</LATEXINLINE> 到 <LATEXINLINE>$(n-1)$</LATEXINLINE> 次方模<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> 使用 
     <SCHEMEINLINE>expmod</SCHEMEINLINE> 
     <SPLITINLINE>
      过程。
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    然而，每当我们在 
     <SCHEMEINLINE>expmod</SCHEMEINLINE> ，我们检查是否发现了一个
    <QUOTE>1 的非平凡平方根模<SPACE></SPACE>$n$</QUOTE>，
    也就是不等于 1 或的一个数字 <LATEXINLINE>$n-1$</LATEXINLINE>  其平方等于 1 模<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> 。可以证明，如果存在这样一个 1 的非平凡平方根，那么
     <LATEXINLINE>$n$</LATEXINLINE>  不是素数。也可以证明如果 <LATEXINLINE>$n$</LATEXINLINE>  是一个不是素数的奇数，那么至少对半数的数字 <LATEXINLINE>$a &lt; n$</LATEXINLINE> ，计算 <LATEXINLINE>$a^{n-1}$</LATEXINLINE>  以这种方式将揭示 1 的非平凡平方根模<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> 。 
    （这就是米勒–拉宾测试无法被欺骗的原因。）修改 
     <SCHEMEINLINE>expmod</SCHEMEINLINE> 
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    以发出信号如果它发现 1 的非平凡平方根，并使用它来
    实现米勒–拉宾测试，通过一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    类似于
    <SPLITINLINE>
      fermat-test.
      <JAVASCRIPT><JAVASCRIPTINLINE>fermat_test</JAVASCRIPTINLINE>.
    </JAVASCRIPT></SPLITINLINE>
    检查您的
    <SPLITINLINE>
      过程
    <JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> 
    通过测试各种已知的素数和非素数。提示：一种方便的方法是生成一个
<SCHEMEINLINE>expmod</SCHEMEINLINE> 信号是让它返回<SPACE></SPACE>0。
     <LABEL NAME="ex:miller-rabin"></LABEL>
     <SOLUTION>
      
	<NAME>miller_rabin_test</NAME>
        <EXAMPLE>example_1.30</EXAMPLE>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function random(n) {
    return math_floor(math_random() * n);
}
function miller_rabin_test(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
               ? square(trivial_test(expmod(base,
                                            exp / 2,
                                            m), 
                                     m))
                 % m
               : (base * expmod(base, exp - 1, m)) 
                 % m;
    }
    function trivial_test(r, m) {
        return r === 1 || r === m - 1
               ? r
               : square(r) % m === 1
               ? 0
               : r;
    }
    function try_it(a) {
        return expmod(a, n - 1, n) === 1;
    }
    return try_it(1 + random(n - 1));
}
function do_miller_rabin_test(n, times) {
    return times === 0
           ? true
           : miller_rabin_test(n)
           ? do_miller_rabin_test(n, times - 1)
           : false;
}
        </JAVASCRIPT>
        
        
      
    </SOLUTION>
     <SNIPPET HIDE="yes">
      <NAME>example_1.30</NAME>
      <REQUIRES>miller_rabin_test</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <JAVASCRIPT>
do_miller_rabin_test(104743, 1000);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE>
   <INDEX>素数<SUBINDEX>测试</SUBINDEX></INDEX> 
</SUBSECTION>
