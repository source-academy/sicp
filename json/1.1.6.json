[{"id":"/sicpjs/1.1.6","tag":"TITLE","body":"1.1.6  \n    Conditional Expressions and Predicates"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The expressive power of the class of\n    \n\tfunctions\n      \n    that we can define at this point is very limited, because we have no way to\n    make tests and to perform different operations depending on the result of a\n    test.\n    \n        For instance, we cannot declare a function that computes the \n        \n        absolute value of a number by testing whether the number is nonnegative\n\tand taking different actions in each case according to the rule\n        ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n          |x| & = & \\left\\{ \\begin{array}{rl}\n          x   & \\text{if $x \\geq 0$} \\\\\n          -x  & \\text{otherwise}\n          \\end{array}\n          \\right.\n      \\end{array}\\]\n        ","tag":"LATEX"},{"body":"\n        This construct is a\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"case analysis","tag":"#text"}]},{"body":" and can be written\n\tin JavaScript using a ","tag":"#text"},{"tag":"EM","child":[{"body":"conditional expression","tag":"#text"}]},{"body":" as\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQBDAIwGcAKADwEpQBvbUf0ACcApmQKDabUAD4AvKAAMoAPygpALlABaNQG5sAX1yNWWgKwddQA","body":"function abs(x) {\n    return x >= 0 ? x : - x;\n} "},{"body":"\n\twhich could be expressed in English as \"","tag":"#text"},{"body":"If ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is\n\tgreater than or equal to zero, return ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":"; otherwise\n\treturn ","tag":"#text"},{"body":"$- x$","tag":"LATEX"},{"body":".","tag":"#text"},{"body":"\"\n        The general form of a conditional expression is\n        ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$predicate$ ? $consequent$-$expression$ : $alternative$-$expression$\n          "},{"body":"\n        Conditional\n\t\n\texpressions begin with a\n        ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":"—that is, \n        an expression whose value is either\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"true","tag":"#text"}]},{"body":" or ","tag":"#text"},{"tag":"EM","child":[{"body":"false","tag":"#text"}]},{"body":", two distinguished\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"boolean","tag":"#text"}]},{"body":" values in JavaScript.\n\tThe primitive boolean expressions\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"true"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"false"},{"body":" trivially evaluate\n\tto the boolean values true and false, respectively.\n\tThe ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":" \n        is followed by a question mark, the \n        ","tag":"#text"},{"tag":"META","body":"consequent-expression"},{"body":", \n        a colon, and finally the\n        ","tag":"#text"},{"tag":"META","body":"alternative-expression"},{"body":".\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n        To\n\t\n\tevaluate a conditional expression,\n\tthe interpreter starts by evaluating the \n        ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":" \n        of the expression. If the\n\t","tag":"#text"},{"tag":"META","body":"predicate"},{"body":" \n        evaluates to true, the interpreter evaluates the\n        ","tag":"#text"},{"tag":"META","body":"consequent-expression"},{"body":" and returns its value as the value of the conditional.\n        If the ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":"\n\tevaluates to false, it evaluates the\n        ","tag":"#text"},{"tag":"META","body":"alternative-expression"},{"body":" and returns its value as the value of the\n\tconditional.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.1.6#footnote-1"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n        The word\n        ","tag":"#text"},{"tag":"EM","child":[{"body":"predicate","tag":"#text"}]},{"body":" is used for operators and functions that\n\treturn true or false, as well as for expressions that\n\tevaluate to true or false. The absolute-value function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"abs"},{"body":" makes use of the\n\t\n        primitive predicate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">="},{"body":",\n\tan operator that takes two numbers as arguments and tests whether the\n\tfirst number is greater than or equal to the second number, returning\n\ttrue or false accordingly.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n      If we prefer to handle the zero case separately, we can specify the function\n      that computes the absolute value of a number by writing\n        ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n          |x| &=& \\left\\{ \\begin{array}{rl}\n          x   & \\text{if $x > 0$} \\\\\n          0   & \\text{if $x = 0$} \\\\\n          -x  & \\text{otherwise}\n          \\end{array}\n          \\right.\n          \\end{array}\\]\n        ","tag":"LATEX"},{"body":"\n\tIn JavaScript, we express a case analysis with multiple cases by nesting\n\tconditional expressions as alternative expressions inside other conditional expressions:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQBDAIwGcAKADwEpQBvbUf0ACcApmQKDabUAD5QABj4ClAgPyg2i5UoBc60AF5D8zVv5qFpnaAC06gNzYAvrkatrAVg52gA","body":"function abs(x) {\n    return x > 0\n           ? x\n           : x === 0\n           ? 0\n           : - x;\n} "},{"body":"\n\tParentheses are not needed around the alternative expression\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x === 0 ? 0 : - x"},{"body":", because\n\tthe conditional-expression syntactic form\n\t\n\tis right-associative.\n\tThe interpreter ignores spaces and line breaks, here inserted for readability\n\tto align the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"body":"'s\n\tand ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":":"},{"body":"'s under the first predicate\n\tof the case analysis.\n\tThe general form of a\n\t\n\tcase analysis is\n  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$p$$_1$\n? $e$$_1$\n: $p$$_2$\n? $e$$_2$\n$\\vdots$\n: $p$$_n$\n? $e$$_n$\n: $final$-$alternative$-$expression$\n\t  "},{"body":"\n\tWe call a predicate ","tag":"#text"},{"body":"$p_i$","tag":"LATEX"},{"body":"\n\ttogether with its consequent expression\n\t","tag":"#text"},{"body":"$e_i$","tag":"LATEX"},{"body":"\n\ta\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"clause","tag":"#text"}]},{"body":". A case analysis\n\tcan be seen as a sequence of clauses, followed by a final\n\talternative expression.\n\t\n\tAccording to the evaluation of conditional expressions,\n\ta case analysis is evaluated by first evaluating\n\tthe predicate ","tag":"#text"},{"tag":"META","body":"p"},{"body":"$_1$","tag":"LATEX"},{"body":".\n\tIf its value is false, then ","tag":"#text"},{"tag":"META","body":"p"},{"body":"$_2$","tag":"LATEX"},{"body":"\n\tis evaluated.\n\tIf ","tag":"#text"},{"tag":"META","body":"p"},{"body":"$_2$","tag":"LATEX"},{"body":"'s\n\tvalue is also false, then ","tag":"#text"},{"tag":"META","body":"p"},{"body":"$_3$","tag":"LATEX"},{"body":"\n\tis evaluated. This process continues until a predicate is\n        found whose value is true, in which case the interpreter returns the\n        value of the corresponding\n\t\n\tconsequent expression\n\t","tag":"#text"},{"tag":"META","body":"e"},{"body":"\n\tof the clause\n\tas the value of the case analysis.\n\tIf none of the\n\t","tag":"#text"},{"tag":"META","body":"p"},{"body":"'s\n\tis found to be true, the value of the case analysis\n\tis the value of the final alternative expression.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n        In addition to primitive predicates such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">="},{"body":", \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">"},{"body":", \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"<"},{"body":", \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"<="},{"body":", \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":", and\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":" that are applied to\n\tnumbers,","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.1.6#footnote-2"},{"body":"\n\tthere are logical composition operations, which enable us to construct\n\tcompound predicates. The three most frequently used are these:\n        ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"META","body":"expression"},{"body":"$_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"tag":"META","body":"expression"},{"body":"$_2$","tag":"LATEX"},{"tag":"BR"},{"body":"\n\t    This operation expresses\n\t    ","tag":"#text"},{"tag":"EM","child":[{"body":"logical conjunction","tag":"#text"}]},{"body":", meaning roughly \n\t    the same as the English word \"","tag":"#text"},{"body":"and.","tag":"#text"},{"body":"\"\n\t    We assume","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/1.1.6#footnote-3"},{"body":" this syntactic form to be syntactic\n\t    sugar","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/1.1.6#footnote-4"},{"body":" for","tag":"#text"},{"tag":"BR"},{"tag":"META","body":"expression"},{"body":"$_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"tag":"META","body":"expression"},{"body":"$_2$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":":"},{"tag":"JAVASCRIPTINLINE","body":"false"},{"body":".\n          ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"META","body":"expression"},{"body":"$_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"tag":"META","body":"expression"},{"body":"$_2$","tag":"LATEX"},{"tag":"BR"},{"body":"\n\t    This operation expresses\n\t    ","tag":"#text"},{"tag":"EM","child":[{"body":"logical disjunction","tag":"#text"}]},{"body":", meaning roughly\n\t    the same as the English word \"","tag":"#text"},{"body":"or.","tag":"#text"},{"body":"\"\n\t    We assume this syntactic form to be syntactic sugar for","tag":"#text"},{"tag":"BR"},{"tag":"META","body":"expression"},{"body":"$_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"tag":"JAVASCRIPTINLINE","body":"true"},{"tag":"JAVASCRIPTINLINE","body":":"},{"tag":"META","body":"expression"},{"body":"$_2$","tag":"LATEX"},{"body":".\n\n          ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"!"},{"tag":"META","body":"expression"},{"tag":"BR"},{"body":"\n\t    This operation expresses\n\t    ","tag":"#text"},{"tag":"EM","child":[{"body":"logical negation","tag":"#text"}]},{"body":", meaning\n\t    roughly the same as the English word \"","tag":"#text"},{"body":"not.","tag":"#text"},{"body":"\"\n            The value of the expression is true when\n\t    ","tag":"#text"},{"tag":"META","body":"expression"},{"body":"\n\t    evaluates to false, and false when\n\t    ","tag":"#text"},{"tag":"META","body":"expression"},{"body":"\n\t    evaluates to true.\n          ","tag":"#text"}]}]},{"body":"\n        Notice that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":" and \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":" are syntactic forms,\n\tnot operators;\n\t\n\ttheir right-hand\n        expression is not always evaluated. The operator\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!"},{"body":", on the other hand, \n        follows the evaluation rule of section\n\t","tag":"#text"},{"tag":"REF","body":"1.1.3","href":"/sicpjs/1.1.3"},{"body":".\n        It is a ","tag":"#text"},{"tag":"EM","child":[{"body":"unary","tag":"#text"}]},{"body":" operator, which means that it takes only\n\tone argument, whereas the arithmetic operators and primitive predicates\n\tdiscussed so far\n\tare ","tag":"#text"},{"tag":"EM","child":[{"body":"binary","tag":"#text"}]},{"body":", taking two arguments. The operator\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!"},{"body":" precedes its argument;\n\twe call it a\n        ","tag":"#text"},{"tag":"EM","child":[{"body":"prefix operator","tag":"#text"}]},{"body":". Another prefix operator is\n\tthe numeric negation operator, an example of\n\twhich is the expression ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"- x"},{"body":"\n\tin the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"abs"},{"body":" functions above.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n        As an example of how these predicates are used, the condition that a \n        number ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" be in the range\n\t","tag":"#text"},{"body":"$5 < x < 10$","tag":"LATEX"},{"body":" may be expressed as\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"x > 5 && x < 10"},{"body":"\n        The syntactic form\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":"\n        has lower precedence than the comparison operators\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">"},{"body":"\n\tand ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"<"},{"body":", and \n\tthe conditional-expression syntactic form\n\t","tag":"#text"},{"body":"$\\cdots$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"body":"$\\cdots$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":":"},{"body":"$\\cdots$","tag":"LATEX"},{"body":"\n\thas lower precedence than any other operator we have encountered so far,\n\ta property we used in\n\tthe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"abs"},{"body":" functions above.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    As another example, we can\n    \n\tdeclare\n      \n    a predicate to test whether one number is \n    \n    greater than or equal to another as    \n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQBzAJwFMBDMphgfSq6YEcCLADYAKAB4AaUAE8AlKADe2UCtDMyBBrTGgAfDNAAfQ6B0BeCzIDc2AL65Grdlx6d+g0QHYpAFllWgA","body":"function greater_or_equal(x, y) {\n    return x > y || x === y;\n} "},{"body":"\n    or alternatively as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQBzAJwFMBDMphgfSq6YEcCLADYAKAB4AaUAE8AlKADe2UCtDMyBBrQCEocaAA8M2QG5sAX1yNW7Lj079BogOxSALKaA","body":"function greater_or_equal(x, y) {\n    return ! (x < y);\n} "},{"body":"\n        The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"greater_or_equal"},{"body":",\n\twhen applied to two numbers, behaves the same as the operator\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">="},{"body":". Unary operators have\n        \n\thigher precedence than binary operators, which makes the\n\tparentheses in this example necessary.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 1.1","id":"#ex-1.1","child":[{"body":"\n    Below is a sequence of\n    \n\tstatements.\n      \n    What is the result printed by the interpreter in response to each\n    \n\tstatement?\n      \n    Assume that the sequence is to be evaluated in the order\n    in which it is presented.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsoAwDcQA","body":"10; "},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsFZQBqUAZiNABYBuIA","body":"5 + 3 + 4; "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsE5QBaVAbiA","body":"9 - 1; "},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChudGAEwDcQA","body":"6 / 2; "},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsCZQAqUAFlAGpQAKMgWlEwEoBuIA","body":"2 * 4 + (4 - 6); "},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbiA","body":"const a = 3; "},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":3,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVRoA","body":"const b = a + 1; "},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7NT6c+1AFSh2jIA","body":"a + b + a * b; "},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7NRrDQ7RkA","body":"a === b; "},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7JwB83AGSjQnADzcAVJNAB+BQC4qjIA","body":"b > a && b < a * b ? b : a; "},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7NRrDQAFmwB+UDgBcoTsLripmXqADsaytjkAmAKyMgA","body":"a === 4\n? 6\n: b === 4\n? 6 + 7 + a\n: 25; "},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7ACZeoABScAfNwD8oTgC4qASkZA","body":"2 + (b > a ? b : a); "},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsGMB7AOwGcAXUAQ1AF5QBmAbl0NIoCNarQBqVZ7AApqAPlDtsoAPxVJALm4AecZJkTQCgLQoAlNgBUQ6n12MgA","body":"(a > b\n ? a\n : a < b\n ? b\n : -1)\n*\n(a + 1); "},{"body":"\n\tThe parentheses around the conditional expressions in the last two statements\n\tare necessary because the\n\t\n\tconditional-expression syntactic form has lower\n\t\n\tprecedence than the arithmetic operators\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"*"},{"body":".\n      ","tag":"#text"}],"solution":[{"body":"\n      Solution provided by GitHub user Emekk\n      ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"10","tag":"#text"}]},{"tag":"LI","child":[{"body":"12","tag":"#text"}]},{"tag":"LI","child":[{"body":"8","tag":"#text"}]},{"tag":"LI","child":[{"body":"3","tag":"#text"}]},{"tag":"LI","child":[{"body":"6","tag":"#text"}]},{"tag":"LI","child":[{"body":"3","tag":"#text"}]},{"tag":"LI","child":[{"body":"4","tag":"#text"}]},{"tag":"LI","child":[{"body":"19","tag":"#text"}]},{"tag":"LI","child":[{"body":"false","tag":"#text"}]},{"tag":"LI","child":[{"body":"4","tag":"#text"}]},{"tag":"LI","child":[{"body":"16","tag":"#text"}]},{"tag":"LI","child":[{"body":"6","tag":"#text"}]},{"tag":"LI","child":[{"body":"16","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 1.2","id":"#ex-1.2","child":[{"body":"\n    Translate the following expression into \n    \n        JavaScript\n      ","tag":"#text"},{"body":"\n      $\\begin{array}{l}\n      \\quad~~\\dfrac{5+4+\\left(2-\\left(3-(6+\\frac{4}{5})\\right)\\right)}{3 (6-2) (2-7)}\n      \\end{array}$\n    ","tag":"LATEX"}],"solution":[{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsAoBWUAalABYTQ8AmUAWioGZ6rNKKwCBKHr0bYPmYAqVi2p9RNFgHYeAbiA","body":"(5 + 4 + (2 - (3 - (6 + 4 / 5)))) \n/\n(3 * (6 - 2) * (2 - 7)); "}]},{"tag":"EXERCISE","title":"Exercise 1.3","id":"#ex-1.3","child":[{"body":"\n\tDeclare a function\n      \n    that takes three numbers as arguments and returns\n    the sum of the squares of the two larger numbers.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRqg8PADSgAngYBe-IaPGTajFhx78A1PSZsuhpy7tczoALTCokEiIPQEAEZkrMzkoGQAFuxebqBUeHGJ9AC2zAA2uex0ZIHBorZuPKAAfEagAPygnIbVoCb1raAAXEb83ZU1bQ1t3Xy8ymr4nAAsBgDsBgBMY0A","body":"function f(x, y, z) {\n   return square(x) + square(y) + square(z) -\n          // subtract the square of the smallest\n          square(x > y ? (y > z ? z : y) : (x > z ? z : x));\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.4","id":"#ex-1.4","child":[{"body":"\n\tObserve that our model of evaluation allows for\n\t\n\tapplications\n\twhose function expressions are compound expressions. Use this observation\n\tto describe the behavior of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a_plus_abs_b"},{"body":":\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQAHAGwIGcAKAQwBpQAjASlABvUACcApmQIja7UAGpeAblABfXIVKUaoALYUiLDt35DREqTNABaJavXFy1GQH1GLZ+x7NnPI7wGC2KDBZpLSoKw8oAB8ALygAAygAPz0TMygAFy6+ix8fvyK2GrY7K7pHl4+rACs3FYALHyKQA","body":"function plus(a, b) { return a + b; }\n\nfunction minus(a, b) { return a - b; }\n\nfunction a_plus_abs_b(a, b) {\n    return (b >= 0 ? plus : minus)(a, b);\n} "}],"solution":[{"body":"\n\t  According to section ","tag":"#text"},{"tag":"REF","body":"1.1.5","href":"/sicpjs/1.1.5"},{"body":", evaluation\n\t  of an application proceeds as follows:\n\t  ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"Evaluate the subexpressions of the application.\n\t    ","tag":"#text"}]},{"tag":"LI","child":[{"body":"Evaluate the return expression of the result of\n\t    the function expression with each\n\t    parameter replaced by the corresponding result of the respective\n\t    argument expression.\n            ","tag":"#text"}]}]},{"body":"\n\t  Thus the evaluation of the application \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a_plus_abs_b(5, -4)"},{"body":"\n\t  (1) evaluates ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a_plus_abs_b"},{"body":",\n\t  resulting in the function given above, and the arguments are\n\t  already values. So we need to evaluate (2) the return expression\n\t  of the function, with the parameters replaced by the arguments, thus:\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"(-4 >= 0 ? plus : minus)(5, -4)"},{"body":".\n\t  With the same rules, we need to (1) evaluate the function expression,\n\t  which in this case is the conditional expression\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"-4 >= 0 ? plus : minus"},{"body":". Since\n\t  the predicate evaluates to false, the function expression\n\t  evaluates to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"minus"},{"body":". The arguments,\n\t  again (1) are already values. Thus we end up evaluating (2) the body of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"minus"},{"body":" with the parameters\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" replaced by 5 and -4,\n\t  respectively, resulting in\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"5 - (-4)"},{"body":", which will finally\n\t  evaluate to 9.\n\t","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 1.5","id":"#ex-1.5","child":[{"body":"\n    Ben Bitdiddle has invented a test to determine whether the interpreter\n    he is faced with is using\n    \n    applicative-order evaluation or normal-order\n    evaluation. He \n    \n\tdeclares the following two functions:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQAHACgEpQBvUAJwFMyCPbGTANygAvrkKlKNUGS4BnMgwAeAGlABPFq2yg9nHn1rLQAXnOgADKAD8V0AC5NQ7KKA","body":"function p() { return p(); }\n\nfunction test(x, y) {\n    return x === 0 ? 0 : y;\n} "},{"body":"\n      Then he evaluates the\n      statement","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToGwChsDMBXAOwGMAXASwHsjQAHACgEpQBvUAJwFMyCPbGTANygAvrkKlKNUGS4BnMgwAeAGlABPFq2yg9nHn1rLQAXnOgADKAD8V0AC5NQ7OOxzFDS+sHCgA","body":"test(0, p()); "},{"body":"\n      What behavior will Ben observe with an interpreter that uses\n      applicative-order evaluation?  What behavior will he observe with an\n      interpreter that uses normal-order evaluation?  Explain your answer.\n      \n      (Assume that the evaluation rule for \n      \n          conditional expressions\n\t\n      is the same whether the interpreter is using normal or applicative order:\n      The predicate expression is evaluated first, and the result determines\n      whether to evaluate the consequent or the alternative expression.)\n      ","tag":"#text"}],"solution":[{"body":"\n\t    In applicative-order evaluation of\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"test(0, p())"},{"body":",\n\t    we need to evaluate the argument expressions before we can evaluate\n\t    the return expression of the function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"test"},{"body":".\n\t    The evaluation of the argument expression\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p()"},{"body":"\n\t    will not terminate, however: It will keep evaluating application\n\t    expressions of the form \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p()"},{"body":", and thus the evaluation of\n            ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"test(0, p())"},{"body":" will not produce a\n\t    legitimate value. In normal-order evaluation, on the other hand,\n\t    the function application\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"test(0, p())"},{"body":"\n\t    would immediately evaluate the return expression of the function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"test"},{"body":",\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x === 0 ? 0 : y"},{"body":"\n\t    after replacing the parameter\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" with\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"0"},{"body":" and\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":" with\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p()"},{"body":".\n\t    The result of the replacing would be\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"0 === 0 ? 0 : p()"},{"body":".\n\t    The evaluation of the predicate\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"0 === 0"},{"body":"\n\t    results in true and thus the conditional\n\t    expression evaluates to 0, without any need to\n\t    evaluate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p()"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.1.6#footnote-link-1","child":[{"body":"\n\tConditionals\n\t\n\tin full JavaScript accept any value, not just a boolean, as the result of evaluating\n\tthe ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":" expression (see footnote ","tag":"#text"},{"tag":"REF","body":1,"href":"/sicpjs/4.1.3#footnote-1"},{"body":"\n\tin section ","tag":"#text"},{"tag":"REF","body":"4.1.3","href":"/sicpjs/4.1.3"},{"body":" for details). The programs in this book\n\tuse only boolean values as predicates of conditionals.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.1.6#footnote-link-2","child":[{"body":"For now, we restrict these operators to number\n\targuments. In sections ","tag":"#text"},{"tag":"REF","body":"2.3.1","href":"/sicpjs/2.3.1"},{"body":"\n\tand ","tag":"#text"},{"tag":"REF","body":"3.3.1","href":"/sicpjs/3.3.1"},{"body":", we shall\n\tgeneralize the equality and inequality predicates\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/1.1.6#footnote-link-3","child":[{"body":"This assumption is justified by the restriction mentioned\n\t    in footnote ","tag":"#text"},{"tag":"REF","body":1,"href":"/sicpjs/1.1.6#footnote-1"},{"body":". Full JavaScript\n\t    needs to consider the case where the result of evaluating ","tag":"#text"},{"tag":"META","body":"expression"},{"body":"$_1$","tag":"LATEX"},{"body":" is neither true nor false.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/1.1.6#footnote-link-4","child":[{"body":"Syntactic forms that are simply convenient\n            alternative surface structures for things that can be written in more\n            uniform ways are sometimes called ","tag":"#text"},{"tag":"EM","child":[{"body":"syntactic sugar","tag":"#text"}]},{"body":", to use a\n            phrase coined by \n            \n\t    Peter Landin.\t    \n\t    ","tag":"#text"}]}]