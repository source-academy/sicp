<SUBSECTION> 
  <NAME>
    The Costs of Introducing Assignment
  </NAME>

  <LABEL NAME="sec:costs-of-assignment"/>
  <INDEX>assignment<SUBINDEX>costs of|(</SUBINDEX></INDEX>

  <TEXT>
    As we have seen, the 
    <!-- <SCHEMEINLINE>set!</SCHEMEINLINE> operation -->
    assignment statement
    enables us to model objects
    that have local state.  However, this advantage comes at a price.  Our
    programming language can no longer be interpreted in terms of the
    substitution model of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application that we introduced in
    section<SPACE/><REF NAME="sec:substitution-model"/>.  Moreover, no simple
    model with <QUOTE>nice</QUOTE> mathematical properties can be an adequate
    framework for dealing with objects and assignment in programming languages.
  </TEXT>

  <TEXT>
    So long as we do not use assignments, two evaluations of the same
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the same arguments will produce the same result, so that
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    can be viewed as computing mathematical functions. Programming without any
    use of assignments, as we did throughout the first two chapters of this
    book, is accordingly known as
    <INDEX>functional programming</INDEX>
    <EM>functional programming</EM>.
  </TEXT>

  <TEXT>
    <INDEX>substitution model of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application<SUBINDEX>inadequacy of|(</SUBINDEX></INDEX>
    To understand how assignment complicates matters, consider a simplified
    version of the <SCHEMEINLINE>make_withdraw</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:local-state-variables"/> that does not
    bother to check for an insufficient amount:
            <!-- \indcode*{make-simplified-withdraw} -->
    <SNIPPET EVAL="yes">
      <NAME>make_simplified_withdraw</NAME>
      <EXAMPLE>make_simplified_withdraw_example</EXAMPLE>
      <SCHEME>
(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))
      </SCHEME>
      <JAVASCRIPT>
function make_simplified_withdraw(balance) {
    return amount => {
               balance = balance - amount;
               return balance;
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <SCHEME>
(define W (make-simplified-withdraw 25))
      </SCHEME>
      <JAVASCRIPT>
const W = make_simplified_withdraw(25);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example1</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example</REQUIRES>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example2</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example1</REQUIRES>
      <EXPECTED>-5</EXPECTED>
      <SCHEME>
(W 10)
      </SCHEME>
      <SCHEMEOUTPUT>
-5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W(10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
-5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Compare this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the following <SCHEMEINLINE>make_decrementer</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which does not use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT>assignment:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <NAME>make_decrementer</NAME>
      <SCHEME>
            <!-- \indcode*{make-decrementer} -->
            (define (make-decrementer balance)
            (lambda (amount)
            (- balance amount)))
      </SCHEME>
      <JAVASCRIPT>
function make_decrementer(balance) {
    return amount =&gt; balance - amount;
}    
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE><SCHEME>
      <SCHEMEINLINE>make-decrementer</SCHEMEINLINE>
    </SCHEME>
    <JAVASCRIPT>
      The function
      <JAVASCRIPTINLINE>make_decrementer</JAVASCRIPTINLINE>
    </JAVASCRIPT></SPLITINLINE>
    returns a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that subtracts its input from a designated amount
    <SCHEMEINLINE>balance</SCHEMEINLINE>, but there is no accumulated effect
    over successive calls, as with
    <SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE>:
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer</REQUIRES>
      <NAME>make_decrementer_example</NAME>
      <SCHEME>
(define D (make-decrementer 25))
      </SCHEME>
      <JAVASCRIPT>
const D = make_decrementer(25);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer_example</REQUIRES>
      <NAME>make_decrementer_example1</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(D 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
D(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer_example1</REQUIRES>
      <NAME>make_decrementer_example2</NAME>
      <EXPECTED>15</EXPECTED>
      <SCHEME>
(D 10)
      </SCHEME>
      <SCHEMEOUTPUT>
15
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
D(10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
15
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We can use the substitution model to explain how
    <SCHEMEINLINE>make_decrementer</SCHEMEINLINE> works.  For instance, let us
    analyze the evaluation of the expression
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer</REQUIRES>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
((make-decrementer 25) 20)
      </SCHEME>
      <JAVASCRIPT>
(make_decrementer(25))(20);
      </JAVASCRIPT>
    </SNIPPET>
    We first simplify the operator of the combination by substituting
    <LATEXINLINE>$25$</LATEXINLINE> for <SCHEMEINLINE>balance</SCHEMEINLINE> in
    the body of <SCHEMEINLINE>make-decrementer</SCHEMEINLINE>.  This reduces the
    expression to
    <SNIPPET EVAL="yes">
      <SCHEME>
((lambda (amount) (- 25 amount)) 20)
      </SCHEME>
      <JAVASCRIPT>
(amount =&gt; 25 - amount)(20);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we apply the operator by substituting 20 for
    <SCHEMEINLINE>amount</SCHEMEINLINE> in the body of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    expression:
    <SNIPPET EVAL="yes">
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(- 25 20)
      </SCHEME>
      <JAVASCRIPT>
25 - 20;
      </JAVASCRIPT>
    </SNIPPET>
    The final answer is 5.
  </TEXT>

  <TEXT>
    Observe, however, what happens if we attempt a similar substitution analysis
    with <SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE>:
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <SCHEME>
((make-simplified-withdraw 25) 20)
      </SCHEME>
      <JAVASCRIPT>
(make_simplified_withdraw(25))(20);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We first simplify the operator by substituting 25 for
    <SCHEMEINLINE>balance</SCHEMEINLINE> in
    <SPLITINLINE><SCHEME>the body of</SCHEME>
    <JAVASCRIPT>the return expression of</JAVASCRIPT></SPLITINLINE>
    <SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE>. This reduces the
    expression to<FOOTNOTE>We don<APOS/>t substitute for the occurrence of
    <SCHEMEINLINE>balance</SCHEMEINLINE> in the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE> expression</SCHEME>
      <JAVASCRIPT>assignment statement</JAVASCRIPT>
    </SPLITINLINE>
    because the <LATEXINLINE>name</LATEXINLINE> in
    <SPLITINLINE>
      <SCHEME>a <SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>an assignment</JAVASCRIPT>
    </SPLITINLINE>
    is not evaluated. If we did substitute for it, we would get
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(set! 25 (- 25 amount))</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>25 = 25 - amount;</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which makes no sense.</FOOTNOTE>
    <SNIPPET EVAL="no"> 
      <SCHEME>
((lambda (amount) (set! balance (- 25 amount)) 25) 20)
      </SCHEME>
      <JAVASCRIPT>
(amount => {
     balance = 25 - amount; 
     return 25;
 })(20);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we apply the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    by substituting 20 for <SCHEMEINLINE>amount</SCHEMEINLINE> in the body of the
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>lambda</SCHEMEINLINE> expression:</SCHEME>
      <JAVASCRIPT>lambda expression:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <SCHEME>
(set! balance (- 25 20)) 25
      </SCHEME>
      <JAVASCRIPT>
balance = 25 - 20;
return 25;
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    If we adhered to the substitution model, we would have to say that the
    meaning of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application is to first set <SCHEMEINLINE>balance</SCHEMEINLINE> to 5 and
    then return 25 as the value of the expression.  This gets the wrong answer.
    In order to get the correct answer, we would have to somehow distinguish the
    first occurrence of <SCHEMEINLINE>balance</SCHEMEINLINE> (before the effect
    of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE>)</SCHEME>
    <JAVASCRIPT>assignment)</JAVASCRIPT></SPLITINLINE>
    from the second occurrence of <SCHEMEINLINE>balance</SCHEMEINLINE>
    (after the effect of the
    <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE>),</SCHEME>
    <JAVASCRIPT>assignment),</JAVASCRIPT>
    </SPLITINLINE>
    and the substitution model cannot do this.
  </TEXT>

  <TEXT>
    The trouble here is that substitution is based ultimately on the notion that
    the symbols in our language are essentially names for values.
    <SPLIT>
      <SCHEME>
	But as soon as we introduce <SCHEMEINLINE>set!</SCHEMEINLINE> and the
	idea that the value of a variable can change, a variable can no longer
	be simply a name.  Now a variable somehow refers to a place where a
	value can be stored, and the value stored at this place can change. 
        <INDEX>substitution model of
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        application<SUBINDEX>inadequacy of|)</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	This worked well for constants.
	But a variable, whose value can change with assignment, cannot simply
	be a name for a value. A variable somehow refers to a place where a
	value can be stored, and the value stored at this place can change.
        <INDEX>substitution model of
        <SPLITINLINE><SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        application<SUBINDEX>inadequacy of|)</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLIT>
    In section<SPACE/><REF NAME="sec:environment-model"/> we will see how
    environments play this role of <QUOTE>place</QUOTE> in our computational
    model.    
  </TEXT>

  <SUBHEADING>
    <NAME>Sameness and change</NAME>
  </SUBHEADING>

  <INDEX>sameness and change<SUBINDEX>meaning of|(</SUBINDEX></INDEX>
  <INDEX>change and sameness<SUBINDEX>meaning of|(</SUBINDEX></INDEX>

  <TEXT>
    The issue surfacing here is more profound than the mere breakdown of a
    particular model of computation.  As soon as we introduce change into
    our computational models, many notions that were previously
    straightforward become problematical.  Consider the concept of two
    things being <QUOTE>the same.</QUOTE>
  </TEXT>

  <TEXT>
    Suppose we call 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-decrementer</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_decrementer</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    twice with the same argument to create two
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer</REQUIRES>
      <SCHEME>
(define D1 (make-decrementer 25))

(define D2 (make-decrementer 25))
      </SCHEME>
      <JAVASCRIPT>
const D1 = make_decrementer(25);

const D2 = make_decrementer(25);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Are 
    <SCHEMEINLINE>D1</SCHEMEINLINE>
    and 
    <SCHEMEINLINE>D2</SCHEMEINLINE>
    the same?  An acceptable answer is yes, because 
    <SCHEMEINLINE>D1</SCHEMEINLINE>
    and 
    <SCHEMEINLINE>D2</SCHEMEINLINE>
    have the same computational behavior<EMDASH/>each is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that subtracts its input from 25.  In fact, 
    <SCHEMEINLINE>D1</SCHEMEINLINE>
    could be substituted for 
    <SCHEMEINLINE>D2</SCHEMEINLINE>
    in any computation without changing the result.
  </TEXT>

  <TEXT>
    Contrast this with making two calls to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-simplified-withdraw</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_simplified_withdraw</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <NAME>make_simplified_withdraw_example3</NAME>
      <SCHEME>
(define W1 (make-simplified-withdraw 25))

(define W2 (make-simplified-withdraw 25))
      </SCHEME>
      <JAVASCRIPT>
const W1 = make_simplified_withdraw(25);

const W2 = make_simplified_withdraw(25);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Are <SCHEMEINLINE>W1</SCHEMEINLINE> and 
    <SCHEMEINLINE>W2</SCHEMEINLINE> the same?  Surely not, because calls to 
    <SCHEMEINLINE>W1</SCHEMEINLINE> and <SCHEMEINLINE>W2</SCHEMEINLINE>
    have distinct effects, as shown by the following sequence of interactions:
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example3</REQUIRES>
      <NAME>make_simplified_withdraw_example4</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W1 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example4</REQUIRES>
      <NAME>make_simplified_withdraw_example5</NAME>
      <EXPECTED>-15</EXPECTED>
      <SCHEME>
(W1 20)
      </SCHEME>
      <SCHEMEOUTPUT>
-15
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
-15
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example5</REQUIRES>
      <NAME>make_simplified_withdraw_example6</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W2 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W2(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Even though <SCHEMEINLINE>W1</SCHEMEINLINE> and 
    <SCHEMEINLINE>W2</SCHEMEINLINE> are <QUOTE>equal</QUOTE> in the sense that
    they are both created by evaluating the same expression, 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(make-simplified-withdraw 25)</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>make_simplified_withdraw(25)</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    it is not true that 
    <SCHEMEINLINE>W1</SCHEMEINLINE> could be substituted for 
    <SCHEMEINLINE>W2</SCHEMEINLINE> in any expression without changing the
    result of evaluating the expression.
  </TEXT>

  <TEXT>
    A language that supports the concept that <QUOTE>equals can be substituted
    for equals</QUOTE> in an expression without changing the value of the
    expression is said to be
    <INDEX>referential transparency</INDEX>
    <INDEX>transparency, referential</INDEX>
    <INDEX>equality<SUBINDEX>referential transparency and</SUBINDEX></INDEX>
    <EM>referentially transparent</EM>.  Referential transparency is violated
    when we include
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>assignment</JAVASCRIPT>
    </SPLITINLINE>
    in our computer language.  This makes it tricky to determine when we can
    simplify expressions by substituting equivalent expressions.  Consequently,
    reasoning about programs that use assignment becomes drastically more
    difficult.
  </TEXT>

  <TEXT>
    Once we forgo referential transparency, the notion of what it means for
    computational objects to be <QUOTE>the same</QUOTE> becomes difficult to
    capture in a formal way.  Indeed, the meaning of <QUOTE>same</QUOTE> in the
    real world that our programs model is hardly clear in itself.  In general,
    we can determine that two apparently identical objects are indeed
    <QUOTE>the same one</QUOTE> only by modifying one object and then observing
    whether the other object has changed in the same way.  But how can we tell
    if an object has <QUOTE>changed</QUOTE> other than by observing the
    <QUOTE>same</QUOTE> object twice and seeing whether some property of the
    object differs from one observation to the next?  Thus, we cannot determine
    <QUOTE>change</QUOTE> without some <EM>a priori</EM> notion of
    <QUOTE>sameness,</QUOTE> and we cannot determine sameness without observing
    the effects of change.
  </TEXT>

  <TEXT>
    <INDEX>bank account<SUBINDEX>joint</SUBINDEX></INDEX>
    As an example of how this issue arises in programming, consider the
    situation where Peter and Paul have a bank account with <DOLLAR/>100 in
    it.  There is a substantial difference between modeling this as

    <SNIPPET EVAL="yes">
      <REQUIRES>make_account</REQUIRES>
      <EXPECTED>50</EXPECTED>
      <SCHEME>
(define peter-acc (make-account 100))
(define paul-acc (make-account 100))
      </SCHEME>
      <JAVASCRIPT>
const peter_acc = make_account(100);
const paul_acc = make_account(100);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const peter_acc = make_account(100);
const paul_acc = make_account(100);

(peter_acc("withdraw"))(10);
(peter_acc("withdraw"))(20);
(paul_acc("withdraw"))(50);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    and modeling it as
    <SNIPPET EVAL="yes">
      <REQUIRES>make_account</REQUIRES>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define peter-acc (make-account 100))
(define paul-acc peter-acc)
      </SCHEME>
      <JAVASCRIPT>
const peter_acc = make_account(100);
const paul_acc = peter_acc;
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const peter_acc = make_account(100);
const paul_acc = peter_acc;
(peter_acc("withdraw"))(10);
(peter_acc("withdraw"))(20);
(paul_acc("withdraw"))(50);
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <TEXT>
    In the first situation, the two bank accounts are distinct.
    Transactions made by Peter will not affect Paul<APOS/>s account, and vice
    versa.  In the second situation, however, we have defined 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>paul-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to be <EM>the same thing</EM> as 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In effect, Peter and Paul now have a joint bank account, and if Peter makes
    a withdrawal from 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    Paul will observe less money in 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>paul-acc</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    These two similar but distinct situations can cause confusion in building
    computational models.  With the shared account, in particular, it can be
    especially confusing that there is one object (the bank account) that has
    two different names 
    <SPLITINLINE>
      <SCHEME>
	(<SCHEMEINLINE>peter-acc</SCHEMEINLINE> and
	<SCHEMEINLINE>paul-acc</SCHEMEINLINE>);
      </SCHEME>
      <JAVASCRIPT>
	(<JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE>);
      </JAVASCRIPT>
    </SPLITINLINE>
    if we are searching for all the places in our program where 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>paul-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be changed, we must remember to look also at things that change 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>The
    phenomenon of a single computational object being accessed by more than one
    name is known as 
    <INDEX>aliasing</INDEX>
    <EM>aliasing</EM>.  The joint bank account situation illustrates a very
    simple example of an alias.  In section<SPACE/><REF NAME="sec:mutable-data"/>
    we will see much more complex examples, such as <QUOTE>distinct</QUOTE>
    compound data structures that share parts.  Bugs can occur in our programs if
    <INDEX>side-effect bug</INDEX>
    <INDEX>bug<SUBINDEX>side effect with aliasing</SUBINDEX></INDEX>
    <INDEX>assignment<SUBINDEX>bugs associated with</SUBINDEX></INDEX>
    we forget that a change to an object may also, as a
    <QUOTE>side effect,</QUOTE> change a <QUOTE>different</QUOTE> object because
    the two <QUOTE>different</QUOTE> objects are actually a single object
    appearing under different aliases.  These so-called <EM>side-effect
    bugs</EM> are so difficult to locate and to analyze that some people have
    proposed that programming languages be designed in such a way as to not
    allow side effects or aliasing
    <INDEX>Lampson, Butler</INDEX>
    <INDEX>Morris, J. H.</INDEX>
    <INDEX>Schmidt, Eric</INDEX>
    <INDEX>Wadler, Philip</INDEX>
    (<CITATION>Lampson et al.<SPACE/>1981</CITATION>; 
    <CITATION>Morris, Schmidt, and Wadler 1980</CITATION>).</FOOTNOTE>
  </TEXT>

  <TEXT>
    With reference to the above remarks on <QUOTE>sameness</QUOTE> and
    <QUOTE>change,</QUOTE> observe that if Peter and Paul could only examine
    their bank balances, and could not perform operations that changed the
    balance, then the issue of whether the two accounts are distinct would be
    moot.  In general, so long as we never modify data objects, we can regard a
    compound data object to be precisely the totality of its pieces.  For
    example, a rational number is determined by giving its numerator and
    its denominator.  But this view is no longer valid in the presence of
    change, where a compound data object has an <QUOTE>identity</QUOTE> that is
    something different from the pieces of which it is composed.  A bank
    account is still <QUOTE>the same</QUOTE> bank account even if we change the
    balance by making a withdrawal; conversely, we could have two
    different bank accounts with the same state information.  This
    complication is a consequence, not of our programming language, but of
    our perception of a bank account as an object.  We do not, for
    example, ordinarily regard a rational number as a changeable object
    with identity, such that we could change the numerator and still have
    <QUOTE>the same</QUOTE> rational number.
    <INDEX>sameness and change<SUBINDEX>meaning of|)</SUBINDEX></INDEX>
    <INDEX>change and sameness<SUBINDEX>meaning of|)</SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING>
    <NAME>Pitfalls of imperative programming</NAME>
  </SUBHEADING>

  <TEXT>
    In contrast to functional programming, programming that makes extensive use
    of assignment is known as 
    <INDEX>imperative programming</INDEX>
    <INDEX>programming<SUBINDEX>imperative</SUBINDEX></INDEX>
    <EM>imperative programming</EM>.  In addition to raising complications about
    computational models, programs written in imperative style are susceptible
    to bugs that cannot occur in functional programs.  For example, recall the
    iterative factorial program from
    section<SPACE/><REF NAME="sec:recursion-and-iteration"/>:
    <SNIPPET EVAL="yes">
      <NAME>factorial_iterative</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
   function iter(product,counter) {
      if (counter &gt; n) {
          return product;
      } else {
          return iter(counter*product,
                       counter+1);
      }
   }
   return iter(1,1);
}
      </JAVASCRIPT>
    </SNIPPET>
    Instead of passing arguments in the internal iterative loop, we could
    adopt a more imperative style by using explicit assignment
    to update the values of the variables <SCHEMEINLINE>product</SCHEMEINLINE>
    and <SCHEMEINLINE>counter</SCHEMEINLINE>:
            <!-- \indcode*{factorial}[with assignment] -->
    <SNIPPET EVAL="yes">
      <NAME>factorial_imperative</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (let ((product 1)
        (counter 1))
    (define (iter)
      (if (&gt; counter n)
          product
          (begin (set! product (* counter product))
                 (set! counter (+ counter 1))
                 (iter))))
    (iter)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
   let product = 1;
   let counter = 1;
   function iter() {
      if (counter &gt; n) {
          return product;
      } else {
          product = counter * product;
          counter = counter + 1;
          return iter();
      }
   }
   return iter();
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>bug<SUBINDEX>order of assignments</SUBINDEX></INDEX>
    <INDEX>assignment<SUBINDEX>bugs associated with</SUBINDEX></INDEX>
    This does not change the results produced by the program, but it does
    introduce a subtle trap.  How do we decide the order of the assignments?
    As it happens, the program is correct as written.  But writing the
    assignments in the opposite order
    <SNIPPET EVAL="no">
      <SCHEME>
(set! counter (+ counter 1))
(set! product (* counter product))
      </SCHEME>
      <JAVASCRIPT>
counter = counter + 1;
product = counter * product;
      </JAVASCRIPT>
    </SNIPPET>
    would have produced a different, incorrect result. In general, programming
    with assignment forces us to carefully consider the relative orders of the
    assignments to make sure that each statement is using the correct version
    of the variables that have been changed.  This issue simply does not arise
    in functional programs.<FOOTNOTE>In view of this, it is ironic that
    introductory programming is most often taught in a highly imperative style.
    This may be a vestige of a belief, common throughout the 1960s and 1970s,
    that programs that call
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    must inherently be less efficient than programs that perform assignments.  
    (<CITATION>Steele (1977)</CITATION> 
    <INDEX>Steele, Guy Lewis Jr.</INDEX>
    debunks this argument.)  Alternatively it may reflect a view that
    step-by-step assignment is easier for beginners to visualize than
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call. Whatever the reason, it often saddles beginning programmers with
    <QUOTE>should I set this variable before or after that one</QUOTE> concerns
    that can complicate programming and obscure the important ideas.</FOOTNOTE>
  </TEXT>

  <TEXT>
    The complexity of imperative programs becomes even worse if we consider
    applications in which several processes execute concurrently.  We will
    return to this in section<SPACE/><REF NAME="sec:time-is-of-the-essence"/>.
    First, however, we will address the issue of providing a computational
    model for expressions that involve assignment, and explore the uses of
    objects with local state in designing simulations.
  </TEXT>

  <EXERCISE>
    <INDEX>bank account<SUBINDEX>joint</SUBINDEX></INDEX>
    Consider the bank account objects created by 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-account</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_account</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    with the password modification described in
    exercise<SPACE/><REF NAME="ex:password-protection"/>.  Suppose that our
    banking system requires the ability to make joint accounts.  Define a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <!-- \indcode{make-joint} -->
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-joint</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that accomplishes this.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-joint</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should take three arguments.  The first is a password-protected account.
    The second argument must match the password with which the account was
    defined in order for the 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-joint</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operation to proceed.  The third argument is a new password.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-joint</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is to create an additional access to the original account using the new
    password.  For example, if 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is a bank account with
    password 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>open-sesame</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"open sesame"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    then
    <SNIPPET EVAL="yes">
      <NAME>make_joint_example</NAME>
      <SCHEME>
(define paul-acc
  (make-joint peter-acc 'open-sesame 'rosebud))
      </SCHEME>
      <JAVASCRIPT>
const paul_acc = make_joint(peter_acc, "open sesame", "rosebud");
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
// make_joint to be written by students
const paul_acc = make_joint(peter_acc, "open sesame", "rosebud");
      </JAVASCRIPT_RUN>
    </SNIPPET>
    will allow one to make transactions on 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    using the name
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>paul-acc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and the password
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>rosebud</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"rosebud"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    You may wish to modify your solution to
    exercise<SPACE/><REF NAME="ex:password-protection"/> to accommodate this
    new feature.
    <SOLUTION>
      <SNIPPET>
	<NAME>make_joint</NAME>
	<EXAMPLE>joint_acc_example</EXAMPLE>
	<EXPECTED>40</EXPECTED>
	<JAVASCRIPT>
function make_joint(linked_acc, linked_pw, joint_pw) {
    return (message, input_pw) => {
        
        // Check authentication for joint account
        if (input_pw !== joint_pw) {
            return x => "Wrong joint account password";
        } else {
            const access_linked = linked_acc(message, linked_pw);
            
            // Check authentication for linked account
            if (access_linked(0) === "Incorrect Password") {
                // access_linked(0) does deposit / withdrawal of 0
                // to test for "Incorrect Password" message. 
                return x => "Wrong linked account password";
            } else {
                // All authentication passed, return accessed
	        // account to user
                return access_linked;
            }
        }
    };
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>joint_acc_example</NAME>
	<REQUIRES>make_account_password_protected</REQUIRES>
	<JAVASCRIPT>
const peter_acc = make_account(100, "open sesame");
(peter_acc("withdraw", "open sesame"))(10); // Withdraws 10
(peter_acc("withdraw", "ben"))(40); // Incorrect Password

// Make Joint Account
const paul_acc = make_joint(peter_acc, "open sesame", "rosebud");

(paul_acc("withdraw", "rosebud"))(50); // Withdraws 50, should return 40
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <INDEX>order of evaluation<SUBINDEX>Scheme@in Scheme</SUBINDEX></INDEX>
    <INDEX>order of evaluation<SUBINDEX>assignment and</SUBINDEX></INDEX>
    When we defined the evaluation model in
    section<SPACE/><REF NAME="sec:evaluating-combinations"/>, we said that the
    first step in evaluating an expression is to evaluate its subexpressions.
    But we never specified the order in which the subexpressions should be
    evaluated (e.g., left to right or right to left).
    <SPLITINLINE>
      <SCHEME>
	When we introduce
	assignment, the order in which the arguments to a procedure
	are evaluated can make a difference to the result.
      </SCHEME>
      <JAVASCRIPT>
	When we introduce
	assignment, the order in which for example the operands of an
	operator combination are evaluated can make a difference to the result.
      </JAVASCRIPT>
    </SPLITINLINE>
    Define a simple
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>f</SCHEMEINLINE> such that evaluating
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ (f 0) (f 1))</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>f(0) + f(1)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will return 0 if the
    <SPLITINLINE>
      <SCHEME>arguments to <SCHEMEINLINE>+</SCHEMEINLINE> are</SCHEME>
      <JAVASCRIPT>operands of <SCHEMEINLINE>+</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    evaluated from left to right but will return 1 if the
    <SPLITINLINE>
      <SCHEME>arguments</SCHEME>
      <JAVASCRIPT>operands</JAVASCRIPT>
    </SPLITINLINE>
    are evaluated from right to left.
    <LABEL NAME="ex:order-of-evaluation"/>
  </EXERCISE>
  <INDEX>assignment|)</INDEX>
  <INDEX>local state|)</INDEX>
  <INDEX>assignment<SUBINDEX>costs of|)</SUBINDEX></INDEX>
</SUBSECTION>
