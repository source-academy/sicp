<SECTION>
     <NAME>赋值与局部状态</NAME> 

     <SECTIONCONTENT></SECTIONCONTENT> 

    <LABEL NAME="sec:assignment"></LABEL>
     <INDEX>赋值<OPEN></OPEN></INDEX> 
     <INDEX>局部状态<OPEN></OPEN></INDEX> 

     <TEXT>
      我们通常将世界视为由独立对象组成，每个对象都有一个随时间变化的状态。一个对象如果其行为受到历史的影响，则称其<QUOTE>具有状态</QUOTE>。例如，一个银行账户具有状态，因为对于<QUOTE>我可以提现<DOLLAR></DOLLAR>100吗？</QUOTE>这个问题的答案取决于存款和取款交易的历史。我们可以通过一个或多个<INDEX>状态变量</INDEX><EM>state variables</EM>来表征对象的状态，这些变量之间保持足够的历史信息以确定对象当前的行为。在一个简单的银行系统中，我们可以通过当前余额来表征账户的状态，而不是记住账户交易的整个历史。
    </TEXT> 

     <TEXT>
      在由许多对象组成的系统中，这些对象很少完全独立。它们可能通过交互影响其他对象的状态，这些交互用来耦合一个对象的状态变量与其他对象的状态变量。实际上，当一个系统的状态变量可以分组为紧密耦合的子系统，并且这些子系统与其他子系统仅松散耦合时，认为一个系统由独立对象组成的观点才是最有用的。
    </TEXT> 

     <TEXT>
      这种系统观可以成为组织系统计算模型的强大框架。为了使这种模型具有模块化，应该将其分解为模拟系统中实际对象的计算对象。每个计算对象都必须有自己的<EM>局部状态变量</EM>来描述实际对象<APOS></APOS>的状态。由于被建模系统中的对象状态随时间变化，相应计算对象的状态变量也必须变化。如果我们选择用计算机中经过的时间来模拟系统中的时间流动，那么就必须构建计算对象，使得随着程序的运行，其行为会发生变化。特别是，如果我们希望用编程语言中普通的符号名称来建模状态变量，那么语言必须提供一个
      <SPLITINLINE>
	
	  <INDEX>赋值运算符</INDEX>
	  <EM>assignment operator</EM>
	
	<JAVASCRIPT>
	  <INDEX>赋值<SUBINDEX>赋值操作</SUBINDEX></INDEX>
	  <EM>assignment operation</EM>
	</JAVASCRIPT>
      </SPLITINLINE>
      来让我们能够改变与名称相关的值。
    </TEXT> 

    <!--  Subsection 1 : Local State Variables  -->
    &amp;subsection3.1.1;

    <!--  Subsection 2 : The Benefits of Introducing Assignment  -->
    &amp;subsection3.1.2;

    <!--  Subsection 3 : The Costs of Introducing Assignment  -->
    &amp;subsection3.1.3;

  </SECTION>
