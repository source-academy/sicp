[{"id":"/sicpjs/2.1.3","tag":"TITLE","body":"2.1.3  \n    What Is Meant by Data?"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We began the rational-number implementation in\n    section ","tag":"#text"},{"tag":"REF","body":"2.1.1","href":"/sicpjs/2.1.1"},{"body":" by implementing the\n    rational-number operations\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_rat"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sub_rat"},{"body":",\n    and so on in terms of three unspecified\n    functions:","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":". At that point, we could think of the\n    operations as being defined in terms of data objects—numerators,\n    denominators, and rational numbers—whose behavior was specified\n    by the latter three\n    functions.","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    But exactly what is meant by ","tag":"#text"},{"tag":"EM","child":[{"body":"data","tag":"#text"}]},{"body":"?  It is not enough to say\n    \"","tag":"#text"},{"body":"whatever is implemented by the given selectors and\n    constructors.","tag":"#text"},{"body":"\" Clearly, not every arbitrary set of three\n    functions\n    can serve as an appropriate basis for the rational-number\n    implementation.  We need to guarantee that,\n    \n    if we construct a rational number ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" from a\n    pair of integers ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"n"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"d"},{"body":", then extracting the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":" and the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":" of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and\n    dividing them should yield the same result as dividing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"n"},{"body":" by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"d"},{"body":". In\n    other words,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":" must satisfy the condition that, for\n    any integer ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"n"},{"body":" and any nonzero\n    integer ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"d"},{"body":", if ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat(n, d)"},{"body":",\n      \n    then\n    ","tag":"#text"},{"body":"\n          \\[\n\t  \\begin{array}{lll}\n          \\dfrac{\\texttt{numer}(\\texttt{x})}{\\texttt{denom}(\\texttt{x})}\n          &=&\n          \\dfrac{\\texttt{n}}{\\texttt{d}}\n\t  \\end{array}\n          \\]\n        ","tag":"LATEX"},{"body":"\n    In fact, this is the only condition\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_rat"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"numer"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"denom"},{"body":" must fulfill in order to form a\n    suitable basis for a rational-number representation.  In general, we can\n    think of data as defined by some collection of selectors and\n    constructors, together with specified conditions that these\n    functions\n    must fulfill in order to be a valid\n    representation.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.1.3#footnote-1"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    This point of view can serve to define not only\n    \"","tag":"#text"},{"body":"high-level","tag":"#text"},{"body":"\" data objects, such as rational numbers, but\n    lower-level objects as well.\n    Consider the notion of a\n    \n    pair, which we used in order to define our\n    rational numbers.  We never actually said what a pair was, only that\n    the language supplied\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    for operating on pairs.  But the only thing we need to know about these\n    three operations \n    is that if we glue two objects together using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    we can retrieve the objects using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".\n    That is, the operations satisfy the condition that, for any objects\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":", if\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(x, y)"},{"body":"\n    then\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(z)"},{"body":"\n    is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail(z)"},{"body":"\n    is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".  Indeed, we mentioned that these three\n    functions\n    are included as primitives in our language. However, any triple of\n    functions\n    that satisfies the above condition can be used as the basis for\n    implementing pairs.  This point is illustrated strikingly by the fact\n    that we could implement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    without using any data structures at all but only using\n    functions.\n    Here are the definitions:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/2.1.3#footnote-2"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuAzAVwDsBjAFwEsB7E0ABwEMqAnACgA8AaUATwCUoAN65Q40MXLU6oACZUAzswpkAFuwC2Q0RL2hWAUwpFW9TaAC810AAZQY-U4kB+UJ0fOnALlAXrlqAYDl7ObnyeoRK+hqysNByavABETKwA5kSahiQUoCQ0efYJQaAAtGWMLKzJAgDckQC+kUYmZvJKKup1AJBOuM1SlLT0aoZMcuwAXjoGxqb0U+y29aDNhKTDshQsADbTs60LoEsYq+tkdIp5nFZVbOwYvCj1uGMTXPVAA","body":"function pair(x, y) {\n    function dispatch(m) {\n        return m === 0 \n               ? x\n               : m === 1 \n               ? y\n               : error(m, \"argument not 0 or 1 -- pair\");\n    }\n    return dispatch;\t      \n}\nfunction head(z) { return z(0); }\n\nfunction tail(z) { return z(1); } "},{"body":"\n    This use of\n    functions\n    corresponds to nothing like our intuitive notion of what data should be.\n    Nevertheless, all we need to do to show that this is a valid way to\n    represent pairs is to verify that these\n    functions\n    satisfy the condition given above.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    The subtle point to notice is that the value returned by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(x, y)"},{"body":"\n    is a\n    function—namely\n    the internally defined\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dispatch"},{"body":", which takes one argument and returns\n    either ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" or ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":"\n    depending on whether the argument is 0 or 1.  Correspondingly,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(z)"},{"body":"\n    is defined to apply ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" to 0.  Hence, if\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" is the\n    function\n    formed by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(x, y)"},{"body":",\n    then ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" applied to 0 will yield\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":". Thus, we have shown that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(pair(x, y))"},{"body":"\n    yields ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", as desired.  Similarly,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail(pair(x, y))"},{"body":"\n    applies the\n    function\n    returned by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(x, y)"},{"body":"\n    to 1, which returns ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".\n    Therefore, this \n    \n        functional\n      \n    implementation of pairs is a valid\n    implementation, and if we access pairs using only\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    we cannot distinguish this implementation from one that uses\n    \"","tag":"#text"},{"body":"real","tag":"#text"},{"body":"\" data structures.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The point of exhibiting the \n    \n        functional\n      \n    representation of pairs is not that our language works this way \n    (an efficient implementation of pairs\n      might use JavaScript's native\n      ","tag":"#text"},{"tag":"EM","child":[{"body":"vector","tag":"#text"}]},{"body":" data structure)\n      \n    but that it could work this way. The \n    \n        functional\n      \n    representation, although obscure, is a perfectly adequate way to represent\n    pairs, since it fulfills the only conditions that pairs need to fulfill.\n    This example also demonstrates that the ability to manipulate\n    functions\n    as objects automatically provides the ability to represent compound data.\n    This may seem a curiosity now, but \n    \n        functional\n      \n    representations of data will play a central role in our programming\n    repertoire.  This style of programming is often called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"message passing","tag":"#text"}]},{"body":", and we will be using it as a basic tool in\n    chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":" when we address the issues of modeling and simulation.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.4","id":"#ex-2.4","child":[{"body":" \n    Here is an alternative \n    \n        functional\n      \n    representation of pairs.  For this\n    representation, verify that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(pair(x, y))"},{"body":"\n    yields ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" for any objects\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":".\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuAzAVwDsBjAFwEsB7E0ABwEMqAnACgA8AaUATwCUoAN65Q40KwCmFIq3oBbUAF4AfKAVdeggNy4AvoVKVa9ABZSmAE3YAvIaImSZc+rfbsGvAI5C1jAT1DXDI6AGcKUE4VRhYODF4UQNwLay5AoA","body":"function pair(x, y) {\n    return m => m(x, y);\n}\nfunction head(z) {\n    return z((p, q) => p);\n} "},{"body":"\n    What is the corresponding definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"?\n    (Hint: To verify that this works, make use of the substitution model of\n    section ","tag":"#text"},{"tag":"REF","body":"1.1.5","href":"/sicpjs/1.1.5"},{"body":".)\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":8,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuAzAVwDsBjAFwEsB7E0ABwEMqAnACgA8AaUATwCUoAN65Q40KwCmFIq3oBbUAF4AfKAVdeggNy4AvoVKVa9ABZSmAE3YAvIaImSZc+rfbsGvAI5C1jAT1DI3JqOlAKFgAbOwcxCWlZeVB3Tx8-dV8g-DI6AGcKUE4VRhYODF4UQNxIqhjOQKA","body":"function tail(z) {\n    return z((p, q) => q);\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.5","id":"#ex-2.5","child":[{"body":" \n    Show that we can represent pairs of nonnegative integers using only\n    numbers and arithmetic operations if we represent the pair\n    ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":" as the\n    integer that is the product ","tag":"#text"},{"body":"$2^a 3^b$","tag":"LATEX"},{"body":".  Give the\n    corresponding definitions of the\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":".","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":17,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9TgDdOJbiUEjxEzlJmh6AUlSgAvB9AAGVRsKlKWnoCVgYKI14ABwpuACMAGkcrUXFJaXp6DzdvFJs8gH5QDFy88QAuPUMTMwt+EtLQQuY2Lm4QsIjouMT6MBR+OoabCtiFUHbwziiYhMdQAFoi-l9NAJ16SNYqdm5WRNjkmzSHCc6YlETWQUVTqa7sfeX1f20g0AALTlYAE25Iw9SdnSoEioBcKHcni89VKhU+Pz+oD6ggA1EUYXkKj5nlpAroKFsADZ-AFiY4bMGgbCQ7JeUAYmyFAlUYmgsDYVHooblbwrXDM1lbHYPUAAFgGyiAA","body":"function pair(a, b) {\n    return fast_expt(2, a) * fast_expt(3, b);\n}\nfunction head(p) {\n    return p % 2 === 0\n           ? head(p / 2) + 1\n           : 0;\n}\nfunction tail(p) {\n    return p % 3 === 0 \n           ? tail(p / 3) + 1\n           : 0;\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.6","id":"#ex-2.6","child":[{"body":" \n    In case representing pairs as\n    functions\n    (exercise ","tag":"#text"},{"tag":"REF","body":"2.4","href":"/sicpjs/2.1.3#ex-2.4"},{"body":")\n    wasn't mind-boggling enough, consider that, in a language that can\n    manipulate\n    functions,\n    we can get by without numbers (at least insofar as nonnegative integers\n    are concerned) by implementing 0 and the operation of adding 1 as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuBjAewDsBnAF1AC8BTAJyNAF5QAzFgPlAA8veA3PjYBXEgQoBLUqACGAE3kB9DAAoSASlABvXKH2h6tCiPol2-Ps25t1qthtU8NGoQF8gA","body":"const zero = f => x => x;\n\nfunction add_1(n) {\n    return f => x => f(n(f)(x));\n} "},{"body":"\n    This representation is known as \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Church numerals","tag":"#text"}]},{"body":", after its inventor, \n    \n    Alonzo Church, the logician who invented the\n    ","tag":"#text"},{"body":"$\\lambda$","tag":"LATEX"},{"body":" calculus.\n    ","tag":"#text"},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Define ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"one"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"two"},{"body":"\n    directly (not in terms of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"zero"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_1"},{"body":").\n    (Hint: Use substitution to evaluate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_1(zero)"},{"body":").\n      \n    Give a direct definition of the addition\n    function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"plus"},{"body":"\n    (not in terms of repeated application of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_1"},{"body":").","tag":"#text"}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQEY0GYBQuBjAewDsBnAF1FIFNQBeUAMwYD5QAPN5gCg4EoA3IVKVQFAO5EGzbl3rsmPJQKH4mAVxIEKAS1KgADgBsNZHiQA0oALb9QAb1ygXoAE40KGtyVkLO3CTK-Dw2wXz8agC++CDiNJS6JADm+MTkVBQAFh50jCZmPLTWkkRquJraegYEWd61APoURA0kGjYARjRuPAT2Tq7unt6+BBaBoADUoBghAAzRhHVujc2t7V092blCQA","body":"const one = f => x => f(x);\nconst two = f => x => f(f(x));\n\nfunction plus(n, m) {\n    return f => x => n(f)(m(f)(x));\n}\n\n// testing\n\nconst three = plus(one, two);\n\nfunction church_to_number(c) {\n    return c(n => n + 1)(0);\n}\nchurch_to_number(three); "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.1.3#footnote-link-1","child":[{"body":"Surprisingly, this idea is very difficult to\n    formulate rigorously. There are two approaches to giving such a\n    formulation.  One, pioneered by\n    \n    C. A. R. Hoare (1972), is known as the method of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"abstract models","tag":"#text"}]},{"body":".  It formalizes the\n    \"","tag":"#text"},{"body":"functions plus conditions","tag":"#text"},{"body":"\"\n    specification as outlined in the rational-number example above.  Note\n    that the condition on the rational-number representation was stated in\n    terms of facts about integers (equality and division).  In general,\n    abstract models define new kinds of data objects in terms of previously\n    defined types of data objects.  Assertions about data objects can\n    therefore be checked by reducing them to assertions about previously\n    defined data objects. Another approach, introduced by \n    \n    Zilles at MIT, by \n    \n    Goguen, \n    \n    Thatcher,\n    \n    Wagner, and \n    \n    Wright at IBM (see Thatcher, Wagner, and Wright\n    1978), and by \n    \n    Guttag at Toronto (see Guttag 1977),\n    is called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"algebraic specification","tag":"#text"}]},{"body":".  It regards the\n    \"","tag":"#text"},{"body":"functions","tag":"#text"},{"body":"\"\n    as elements of an abstract algebraic system whose behavior is\n    specified by axioms that correspond to our \"","tag":"#text"},{"body":"conditions,","tag":"#text"},{"body":"\"\n    and uses the techniques of abstract algebra to check assertions about\n    data objects.  Both methods are surveyed in the paper by \n    \n    Liskov and Zilles\n    (1975).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/2.1.3#footnote-link-2","child":[{"body":"The function\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"error"},{"body":" introduced in\n    section ","tag":"#text"},{"tag":"REF","body":"1.3.3","href":"/sicpjs/1.3.3"},{"body":"\n    takes as optional second argument\n    a string that gets displayed before the first argument—for example, if\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"m"},{"body":" is 42:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":false,"output":"Error in line 7: argument not 0 or 1 -- pair: 42"}]}]