[{"id":"/sicpjs/3.3.2","tag":"TITLE","body":"3.3.2  \n    Representing Queues"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The mutators\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_tail"},{"body":"\n    enable us to use pairs to construct data structures that cannot be built\n    with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    alone.  This section shows how to use pairs to represent a data structure\n    called a queue.  Section ","tag":"#text"},{"tag":"REF","body":"3.3.3","href":"/sicpjs/3.3.3"},{"body":" will show how to\n    represent data structures called tables.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    A ","tag":"#text"},{"tag":"EM","child":[{"body":"queue","tag":"#text"}]},{"body":" is a sequence in which items are inserted at one end\n    (called the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"rear","tag":"#text"}]},{"body":" of the queue) and deleted from the other end (the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"front","tag":"#text"}]},{"body":").\n    Figure ","tag":"#text"},{"tag":"REF","body":"3.18","href":"/sicpjs/3.3.2#fig-3.18"},{"body":"\n    shows an initially empty queue in which the items\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" are\n    inserted.  Then ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" is removed,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"c"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"d"},{"body":" are\n    inserted, and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" is removed.  Because items are\n    always removed in the order in which they are inserted, a queue is\n    sometimes called a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"FIFO","tag":"#text"}]},{"body":" (first in, first out) buffer.\n    ","tag":"#text"},{"tag":"FIGURE","table":{"tag":"TABLE","child":[{"tag":"TR","child":[{"tag":"TD","child":[{"body":"\n\t\tOperation\n\t      ","tag":"#text"}]},{"tag":"TD","child":[{"body":"\n\t\tResulting Queue\n\t      ","tag":"#text"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"const q = make_queue();"}]},{"tag":"TD"}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"insert_queue(q, \"a\");"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"a"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"insert_queue(q, \"b\");"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"a  b"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"delete_queue(q);"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"b"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"insert_queue(q, \"c\");"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"b c"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"insert_queue(q, \"d\");"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"b c d"}]}]},{"tag":"TR","child":[{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"delete_queue(q);"}]},{"tag":"TD","child":[{"tag":"JAVASCRIPTINLINE","body":"c d"}]}]}]},"captionHref":"/sicpjs/3.3.2#fig-3.18","captionName":"Figure 3.18 ","captionBody":[{"body":"Queue operations.","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    In terms of\n    \n    data abstraction, we can regard a queue as defined by the\n    following set of operations:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\ta constructor:\n\t","tag":"#text"},{"tag":"BR"},{"tag":"JAVASCRIPTINLINE","body":"make_queue()"},{"tag":"BR"},{"body":"\n          returns an empty queue (a queue containing no items).\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        a predicate:\n        ","tag":"#text"},{"tag":"BR"},{"tag":"JAVASCRIPTINLINE","body":"is_empty_queue("},{"tag":"META","body":"queue"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n          tests if the queue is empty.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        a selector:\n        ","tag":"#text"},{"tag":"BR"},{"tag":"JAVASCRIPTINLINE","body":"front_queue("},{"tag":"META","body":"queue"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n          returns the object at the front of the queue, signaling an error if\n\t  the queue is empty; it does not modify the queue.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        two mutators:\n\t","tag":"#text"},{"tag":"BR"},{"tag":"JAVASCRIPTINLINE","body":"insert_queue("},{"tag":"META","body":"queue"},{"tag":"JAVASCRIPTINLINE","body":", "},{"tag":"META","body":"item"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n          inserts\n           \n\t  the item at the rear of the queue and returns the modified\n          queue as its value.","tag":"#text"},{"tag":"BR"},{"tag":"JAVASCRIPTINLINE","body":"delete_queue("},{"tag":"META","body":"queue"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n          removes\n           \n\t  the item at the front of the queue and returns the modified\n\t  queue as its value, signaling an error if the queue is empty before\n\t  the deletion.\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Because a queue is a sequence of items, we could certainly represent\n    it as an ordinary list; the front of the queue would be the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of the list, inserting an item in the queue would amount to appending\n    a new element at the end of the list, and deleting an item from the\n    queue would just be taking the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the list.  However, this representation is inefficient, because in order\n    to insert an item we must scan the list until we reach the end.  Since the\n    only method we have for scanning a list is by successive\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    operations, this scanning requires ","tag":"#text"},{"body":"$\\Theta(n)$","tag":"LATEX"},{"body":"\n    steps for a list of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" items.  A simple\n    modification to the list representation overcomes this disadvantage by\n    allowing the queue operations to be implemented so that they require\n    ","tag":"#text"},{"body":"$\\Theta(1)$","tag":"LATEX"},{"body":" steps; that is, so that the number\n    of steps needed is independent of the length of the queue.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The difficulty with the list representation arises from the need to\n    scan to find the end of the list.  The reason we need to scan is that,\n    although the standard way of representing a list as a chain of pairs\n    readily provides us with a pointer to the beginning of the list, it\n    gives us no easily accessible pointer to the end.  The modification\n    that avoids the drawback is to represent the queue as a list, together\n    with an additional pointer that indicates the final pair in the list.\n    That way, when we go to insert an item, we can consult the rear\n    pointer and so avoid scanning the list.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    A queue is represented, then, as a pair of pointers,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"front_ptr"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rear_ptr"},{"body":",\n    which indicate, respectively, the first and last pairs in an ordinary list.\n    Since we would like the queue to be an identifiable object, we can use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    to combine the two pointers.  Thus, the queue itself will be the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    of the two pointers.\n    Figure ","tag":"#text"},{"tag":"REF","body":"3.19","href":"/sicpjs/3.3.2#fig-3.19"},{"body":"\n    illustrates this representation.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-19.svg","id":"#fig-3.19","captionHref":"/sicpjs/3.3.2#fig-3.19","captionName":"Figure 3.19 ","captionBody":[{"body":"\n\t    Implementation of a queue as a list with front and rear pointers.\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    To define the queue operations we use the following\n    functions,\n    which enable us to select and to modify the front and rear pointers of a\n    queue:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe7YJDQ+ZKDcoAC8oKyOXACMEZhZ2IkBjEQspTwRACzj6gCQ+DNzZtxZQA","body":"function front_ptr(queue) { return head(queue); }\n\nfunction rear_ptr(queue) { return tail(queue); }\n\nfunction set_front_ptr(queue, item) { set_head(queue, item); }\n\nfunction set_rear_ptr(queue, item) { set_tail(queue, item); } "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Now we can implement the actual queue operations.  We will consider a\n    queue to be empty if its front pointer is the empty list:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05JDQ+ZKDcoAC8oKyOXFMzEZhZ2BPdMX0D5TxZQA","body":"function is_empty_queue(queue) { return is_null(front_ptr(queue)); } "},{"body":"\n    The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_queue"},{"body":"\n    constructor returns, as an initially empty queue, a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    are both the empty list:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6gMQoA1nzMofyc8TbStKyOXEQETk4RUzMtOSQ0PmSg3KAAvJ09fQN8Q+r4jEQspTxZQA","body":"function make_queue() { return pair(null, null); } "},{"body":"\n    To select the item at the front of the queue, we return the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of the pair indicated by the front pointer:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":11,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GcyyDfMOi2KD7RrbjXT1k-VvDewfXBwD8oHz0jGXhoABEGwPloCQKM3xKUAAdyislAClop16oC2b0EVxu1wAXKBkipPostoIstgciQaD4yDDQABeUCsRxcCkULgARgimEEERQOM+F24WSAA","body":"function front_queue(queue) {\n    return is_empty_queue(queue)\n           ? error(queue, \"front_queue called with an empty queue\")\n           : head(front_ptr(queue));\n} "}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    To insert an item in a queue, we follow the method whose result is\n    indicated in\n    figure ","tag":"#text"},{"tag":"REF","body":"3.20","href":"/sicpjs/3.3.2#fig-3.20"},{"body":".\n    We first create a new\n    pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is the item to be inserted and whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is the empty list.  If the queue was initially empty, we set the front and\n    rear pointers of the queue to this new pair.  Otherwise, we modify the\n    final pair in the queue to point to the new pair, and also set the\n    rear pointer to the new pair.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-20.svg","id":"#fig-3.20","captionHref":"/sicpjs/3.3.2#fig-3.20","captionName":"Figure 3.20 ","captionBody":[{"body":"\n\t    Result of using\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"insert_queue(q, \"d\")"},{"body":" on the\n\t    queue of figure ","tag":"#text"},{"tag":"REF","body":"3.19","href":"/sicpjs/3.3.2#fig-3.19"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":22,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GMQoA1nwD5ZwjkmOgrI5cUzMR507LHu2GSnxOkjuDfMOi2KBfkXignBPdGJ9XYWJYfb4Q0B8eiMMrhUAAIgeT2iIP4oBIChmfCUoAA7lFZKAFLQemReqBXgisp9vlooU4-ODIV9EgFGPNgo17I5ZhyFmZXoJhepaSzRnZXqKIToVnkOhQiH56CxXtyMtURGKMTQfGRQEQ+Hi2KdQABeY6nf5VS7Ta7S74UX7-Lpk-pqoVWbUQtlzAVw-iXI0mij0Gks1mFYxc15B40nUPhukMplaiO1Fj1FxFEqC8qCOMhsMOllsnMx8qFhPF7U6CES2hS7A5Ei6-XcACM5tAG22aLeNMVytVe07EQRCmpmm+2CH0JHoLHiIARlOIdhkc9+zwOzTN6iPbv1EA","body":"function insert_queue(queue, item) {\n    const new_pair = pair(item, null);\n    if (is_empty_queue(queue)) {\n        set_front_ptr(queue, new_pair);\n        set_rear_ptr(queue, new_pair);\n    } else {\n        set_tail(rear_ptr(queue), new_pair);\n        set_rear_ptr(queue, new_pair);\n    }\n    return queue;\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    To delete the item at the front of the queue, we merely modify the\n    front pointer so that it now points at the second item in the queue,\n    which can be found by following the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointer of the first item (see\n    figure ","tag":"#text"},{"tag":"REF","body":"3.21","href":"/sicpjs/3.3.2#fig-3.21"},{"body":"):","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.3.2#footnote-1"},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch3-Z-G-21.svg","id":"#fig-3.21","captionHref":"/sicpjs/3.3.2#fig-3.21","captionName":"Figure 3.21 ","captionBody":[{"body":"\n\t    Result of using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"delete_queue(q)"},{"body":"\n\t    on the queue of figure ","tag":"#text"},{"tag":"REF","body":"3.20","href":"/sicpjs/3.3.2#fig-3.20"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":25,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GMQoA1nwD5ZwjkmOgrI5cUzMR507LHu2GFER+9CyDfI2VmaLYoD+gJDQ+MigIh8ADubFOoAAvMdTpwMjFLtNrupvr8KHhQPCuj0yP1Xksvr9ibUWHMFmZXpcwRCKPQsmiSaTmEUSpTytTwSc6QziVpQHwnH4iUzmfUXKzgsNObT6ajRczJYsqcCady5Yz3MTRnZXqiVnkOkpBZIdgTXlZNRisRNujE+rsLISRJriXx6IwyuFQAAiY1OU2O-h-BQzPhKUCgqKyUAKWi43qgV4+3m-fmC4UuhWJAKMeZSlXizjkgvlQTl+WinW0PWanQ5f6PIHcACM0NAG22QbeDIeTxee1bER9ChTml+2D77oHTqHvoARmPidh-YHzS2Gavot2eBv1EA","body":"function delete_queue(queue) {\n    if (is_empty_queue(queue)) {\n        error(queue, \"delete_queue called with an empty queue\");\n    } else {\n        set_front_ptr(queue, tail(front_ptr(queue)));\n        return queue;\n    }\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.21","id":"#ex-3.21","child":[{"body":"\n    Ben Bitdiddle decides to test the queue implementation described\n    above.  He types in the\n    functions\n    to the\n    JavaScript\n    interpreter and proceeds to try them out:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":3,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQEcCXuAKASlABvUACcWZAqNoAHBhVG8iBADYqANKGVr+AblABfXCRoBnMqA4BGUAF56zdlx4sBuoA","body":"const q1 = make_queue(); "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":27,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GFER+9CyDfI2VmaLYoCegJDQ+ZKBEfADubI70oAC8oKyPnBkxEVMzWcenCh4UCfLo9Mj9XZLI6nWG1FhzBZmXY-O4PCj0f5w06JZhFErI8qo+7vDFY05aUB8Jx+GHY+HMeoufHBYbE9GY9QA7G4lmLFHXNGkznc9yw0Z2XZclZ5DoxBQAaz4A3KnBGkjGbw+vycP2mTmWuHOmyu3AAjC9QPKlSqLGqudgNlsdqrzREAEQKd1ZIA","body":"insert_queue(q1, \"a\"); ","output":"[[\"a\", null], [\"a\", null]]"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":29,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GFER+9CyDfI2VmaLYoCegJDQ+ZKBEfADubI70oAC8oKyPnBkxEVMzWcenCh4UCfLo9Mj9XZLI6nWG1FhzBZmXY-O4PCj0f5w06JZhFErI8qo+7vDFY05aUB8Jx+GHY+HMeoufHBYbE9GY9QA7G4lmLFHXNGkznc9yw0Z2XZclZ5DoxBQAaz4A3KnBGkjGbw+vycP2mTmWuHOmyu3AAjC9QPKlSqLGqudgNlsdqrzREAEQKd3-R2bPjbW1DN2gd0AI296iAA","body":"insert_queue(q1, \"b\"); ","output":"[[\"a\", [\"b\", null]], [\"b\", null]]"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":40,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GFER+9CyDfI2VmaLYoCegJDQ+ZKBEfADubI70oAC8oKyPnBkxEVMzWcenCh4UCfLo9Mj9XZLI6nWG1FhzBZmXY-O4PCj0f5w06JZhFErI8qo+7vDFY05aUB8Jx+GHY+HMeoufHBYbE9GY9QA7G4lmLFHXNGkznc9yw0Z2XZclZ5DoxBQAaz4A3KnBGkjGbw+vycP2mTmWuHOmyu3AAjC9QPKlSqLGqudgNlsdqrzREAEQKd3-R2bPjbW1DN2gd0AI29DtW+VASmpkmVUN2VlFQJBE26MT6gb2SeT9Kp9EYZXCIdjTnj2bOChmfCUoFuUVkoAUtHBvVAuwjosp1NpIlFsNxiNZAqZnGH-PKgmnXPzEtoUu72ByZYribNWSAA","body":"delete_queue(q1); ","output":"[[\"b\", null], [\"b\", null]]"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":42,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQ8AnGsgfQAcz6AKARwIFN+ASlABvUPT5kC9WgAs+AQwAmPfkIDcoAL65CpSjXGL6bDqoF9hYiVJmgyCigBtzG7buLlqtAM6TmDEymXLwWADSgFGR8ALZWoH4s8squfBFRsYKaOvieBr7+Egom7CFqaZHRcaIJ-g7OqelVWe65+t6RPsyx7ACezKH8qfE20rQUXUQETi6BRCylwy05el6GFER+9CyDfI2VmaLYoCegJDQ+ZKBEfADubI70oAC8oKyPnBkxEVMzWcenCh4UCfLo9Mj9XZLI6nWG1FhzBZmXY-O4PCj0f5w06JZhFErI8qo+7vDFY05aUB8Jx+GHY+HMeoufHBYbE9GY9QA7G4lmLFHXNGkznc9yw0Z2XZclZ5DoxBQAaz4A3KnBGkjGbw+vycP2mTmWuHOmyu3AAjC9QPKlSqLGqudgNlsdqrzREAEQKd3-R2bPjbW1DN2gd0AI29DtW+VASmpkmVUN2VlFQJBE26MT6gb2SeT9Kp9EYZXCIdjTnj2bOChmfCUoFuUVkoAUtHBvVAuwjosp1NpIlFsNxiNZAqZnGH-PKgmnXPzEtoUu72ByZYribNPtX0WzPA36iAA","body":"delete_queue(q1); ","output":"[null, [\"b\", null]]"},{"body":"\"","tag":"#text"},{"body":"It's all wrong!","tag":"#text"},{"body":"\" he complains.\n    \"","tag":"#text"},{"body":"The interpreter's response shows that the last item is inserted\n    into the queue twice.  And when I delete both items, the second\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" is still there, so the queue isn't\n    empty, even though it's supposed to be.","tag":"#text"},{"body":"\"  Eva Lu Ator suggests\n    that Ben has misunderstood what is happening.  \"","tag":"#text"},{"body":"It's not that the\n    items are going into the queue twice,","tag":"#text"},{"body":"\" she explains.\n    \"","tag":"#text"},{"body":"It's just that the standard\n    JavaScript\n    printer doesn't know how to make sense of the queue representation.\n    If you want to see the queue printed correctly, you'll have to define\n    your own print\n    function\n    for queues.","tag":"#text"},{"body":"\" Explain what Eva Lu is talking about.  In particular,\n    show why Ben's examples produce the printed results that they do.\n    Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_queue"},{"body":"\n    that takes a queue as input and prints the sequence of items in the queue.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":34,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChsDMBXAOwGMAXASwHsjQBbAQwGsBTAfQEcCXuAKASlABvUACcWZAqNoAHBhVG8iBADYqANKGVr+AblABfXIVKUaoPKJpk2Msoq48WgkeMnTQACxYMAJr0duPUNjYnJqWnEGUVt7AO4g4TEJKVoyeRV4p2CjfDCzWgBnCTZLa1iHBJZNCjIWOhdQYptvPyzuGrqG-VyTcPNmtiiYu0qnTvrGwfSKTMDq0FrJntDTCMWiYtEbefaFpYbhbFAT0BIaQrItFgB3W3lRUABeUDkFXgPNbRU9Y9OKPCgD6FNj1OwAT04VT2-Bcf1Op0GZSINlGey+t3uCl+CIRg2GFXR1zub1EONOBlALBUxSOuMRJRmmQJaPm-AxJIe5Pp+J8Izi8w5WLJunhIQRblSoHmot6+XWFBBYLIkN2bKSko8irY314yNRAqqsJWeTW5l81Ik7DVRrp-0BwNBdAhUKcMLh9JOLFEVjGHVAACILSora7uGcGGoWL5QDdap5QAxaMrwdKqgHuYYqTSWHaeSV9YTBaAmXqrCii0bjWKJSkPDKxUY5WbZKIKBW1R7TpraL5FTIVAxwbxWv4ONXcudNlcOABGZ70ZjW6G-GRtjvQufBECvddkQoALi0qhU2HbWx2m9nmgDDAzorX7cvbq3+h3j5Rh9AAG1bwGvieAC6Z6bN6z58HON4AEb3tgH7gSwASztuYDwV+v53pov4wQBaiAcBwahmqyEPnuYaIa+oDvnu6EBjhx54UAA","body":"function print_queue(q) {\n    return display(head(q));\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.22","id":"#ex-3.22","child":[{"body":"\n    Instead of representing a queue as a pair of pointers, we can build a\n    queue as a\n    function\n    with local state.  The local state will consist of pointers to the\n    beginning and the end of an ordinary list.  Thus, the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_queue"},{"body":"function\n    will have the form\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction make_queue() {\n    let front_ptr = $\\ldots$;\n    let rear_ptr = $\\ldots$;\n    $\\langle{}$declarations of internal functions$\\rangle$\n    function dispatch(m) {$\\ldots$}\n    return dispatch;\n}\n      "},{"body":"\n    Complete the definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_queue"},{"body":"\n    and provide implementations of the queue operations using this\n    representation.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChslAA4BOA9gG4CWAJgKZWgBGAnqAOIUAuAEgK4Og8AzjSKhalAHZEmPAJChQ2eYoBmPCQGMOFEhNABbAIYBrGgH0AjjxrWAFAEpQAb2wKFAGxodQK0hI5mBByiALygEjzu7gDcrm6e3kQ0hkSBwaBhEVGxbj7qWjp6FIJmNPpBTJbWdo4uublJHDxERSVZ7ra+ugFBRPY5bgC+cQpqmtq6oBQSwkQBVjY0tpxltSP1CeE0AO6BhhShhPtEyxxlADThke7967kUKqDLJWUVVYsOa-XfPn496ZkdnsDgMfm4kik0ocJECCMdQfVBqAaO5hM47j9hAEOPsOhDUr1LjDdnCDrcwQ1kgSAVsSfCMQphrkmW4xgVJrQEuYFjV0WCHk9iqVyhxKjylvYvhSFCJSCcAEQAMQASgB5AByABVQBpDFE6KBtpwABagQx6V6i0Di+Xkn5IlFourS37dKEZUA4igdLr+KF274sxnrNkTPTEabzaoSvk-KjFAjuQxMTp-f0IoN5caFMQJwwcDTG2z6KXfRrNPT6DIhMLy6azKOLeUM0AAfimMxEjesLYAXAZq7XOV5udHm2D28Ozu8e2D+1Wa7WhZaxWOW+3lyLV4s+wPF6B5RG-Tb14QiJGZzRd7KSCd9Jd5QBVCTGCQkbagEgEET5nMAWj-UAABFIHAWAAEFNWgLhbQzdZyxaXNBDhAtjViYZQxzesu0vWxxUuFYS1jBQEL0cVbDrTs5kvW1TlWdDsEwjkURHXDxVLUBSOtaMKKnUcm3sBwGKY8Nz2PHj2OIzivArbiPkPMTuxoWjbmGbANF0QRvAsD0jFMXDbiPJS8P6UB8CMwR+3abBsOo8iLAfQxYOwIy2NM8zFMs0AAG15ScolrgAXRsqjjIcg8GGc1z7PcsALP7Xz-J8+VIoCqJAuCvi3NiaKJNis9Iy83zUqudKgA","body":"// provided by GitHub user devinryu\t  \n\t  \nfunction make_queue() {\n    let front_ptr = null;\n    let rear_ptr = null;\n    function is_empty_queue() {\n        return is_null(front_ptr);\n    }\n    function insert_queue(item) {\n        let new_pair = pair(item, null);\n        if (is_empty_queue()) {\n            front_ptr = new_pair;\n            rear_ptr = new_pair;\n        } else {\n            set_tail(rear_ptr, new_pair);\n            rear_ptr = new_pair;\n        }\n    }\n    function delete_queue() {\n        if (is_empty_queue()) {\n            error(\"FRONT called with an empty queue\");\n        } else {\n            front_ptr = tail(front_ptr);\n        }\n    }\n    function print_queue() {\n        display(front_ptr);\n    }\n    function dispatch(m) {\n        return m === \"insert_queue\"\n        ? insert_queue\n        : m === \"delete_queue\"\n        ? delete_queue\n        : m === \"is_empty_queue\"\n        ? is_empty_queue\n        : m === \"print_queue\"\n        ? print_queue\n        : error(m, \"Unknow operation -- DISPATCH\");\n    }\n    return dispatch;\n}\nfunction insert_queue(queue, item) {\n    return queue(\"insert_queue\")(item);\n}\nfunction delete_queue(queue) {\n    return queue(\"delete_queue\")();\n}\nfunction print_queue(queue) {\n    return queue(\"print_queue\")();\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.23","id":"#ex-3.23","child":[{"body":"\n    A ","tag":"#text"},{"tag":"EM","child":[{"body":"deque","tag":"#text"}]},{"body":"\n    (\"","tag":"#text"},{"body":"double-ended queue","tag":"#text"},{"body":"\") is a sequence in which\n    items can be inserted and deleted\n    \n\teither at the front or at\n      \n    the rear.\n    Operations on deques are the constructor\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_deque"},{"body":",\n    the predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_empty_deque"},{"body":",\n    \n    selectors\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"front_deque"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rear_deque"},{"body":",\n    and mutators\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"front_insert_deque"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"front_delete_deque"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rear_insert_deque"},{"body":",\n      \n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rear_delete_deque"},{"body":".\n      \n    Show how to represent deques using pairs, and give implementations of the\n    operations.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.3.2#footnote-2"},{"body":"\n    All operations should be accomplished in\n    ","tag":"#text"},{"body":"$\\Theta(1)$","tag":"LATEX"},{"body":" steps.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHToEwChslAM4D2ANgK4AuAlkQHagAOATkQG5UAmAph6AEYBPUAHEqFABJk+oMgS5NQAYxJcAhrQCcG7ADMytRdTqgAtqoDWXAPrcAjmS4AKAJSgA3tlBfQTLhTJM9AyqVEyOtGQkJAA0oBFRzgDc2AC+uHoGRvQ6LLQUVgwUYXYOrh7ePn4B9AAWahyOJVxJqen6hjT0vqpMBUWNXPbN7p7evv6BoBQhJANDLWm67VmEflY5dPmFxYMOsWJcJmWjXnL5daoNTfsUhwttmZ2r+d2923N7oAdHIxVnVtMqLNrl9bkdkosMh1jFQCFZDoUBDZdk4mscKuNql84fFZhs8n0dvNnCcKhUAPxTJgOUYASG8AC5sVZcY5XoSPs0SV56V5KUUaTzGaAdKoSHIIQ9ofRYVY6NZvsihpz0WMqpN8Vt+mjQABefWVHoctGSpaPYyaqxUWhyJj5Jqcm53X7efCyLigdRECh1BTBUJTIiEChEXyekWhgDuPV4DCI1tuTFJijoBAocS4kYKIQUusYOcc-rC31iuOcpciJBaFSoOlAjllCIoSIdaNVZOe61yWqJn1omezoWrHc77PeIP7WaLw68KVAXHFHvKI-+gNmk8HTFilvHKOcM7J+DOEaY0aYsfjeXkgYzU5zpL+azXjguDR32r35dvm4Pj-y797LhSwHadkgqNJIWWJ5LW4FRbiVBwVRdLxa3rRsTERBDUU-ZCyXkFhANiAAiGCFz8awmiUMUVF4SMxBqT16CbIQmiIg85wXOQvh0Bs4XlK0wSwlV2zJf4AMdOJK1-bx-jHD8hgrBIwJHTFJiaZTZ3nRdcL-LtNmNFFYmfcS22krxVPodTSQgqUVnZa1bXtFEJO+ETUN4+EMObIS2x07wUxtdMNyLPV81CQsCxLSSEkUqsNNEtYTMM79QIfGS1jkwiUpzditK45cOyPPxsoDHQoxjRhL0TG8SFUNNQUONKvAC+rgpzUKiwi8Kosy4TYrMztn16tFgLvId4t04bkra8brNaM1pUNXpYPIny91w9z0Mw1scIKvCmAIiSiPZFb4MoxRqJ4UA6J9Rj5y8liUTY+KOO02sPP4xUduJPzTkS7sDIU6K4qa0c1DeeS+ykia1QmSyURevKl1Bt0GA4VRbiWwkarq9NvgAcgIE8zwvBN5FB2TwcBz5n1fNkqd3Yl9xh8z1XhoYXtSIA","body":"// solution provided by GitHub user clean99\nfunction make_deque() {\n    return pair(null, null);\n}\n\nfunction front_ptr(deque) {\n    return head(deque);\n}\n\nfunction rear_ptr(deque) {\n    return tail(deque);\n}\n\nfunction set_front_ptr(deque, item) {\n    set_head(deque, item);\n}\n\nfunction set_rear_ptr(deque, item) {\n    set_tail(deque, item);\n}\n\nfunction is_empty_deque(deque) {\n    return is_null(front_ptr(deque))\n           ? true\n  \t   : is_null(rear_ptr(deque))\n  \t   ? true\n  \t   : false;\n}\n\nfunction is_one_item_deque(deque) {\n    return front_ptr(deque) === rear_ptr(deque);\n}\n\nfunction front_insert_deque(deque, item) {\n    // use another pair to store a forward pointer\n    const new_pair = pair(pair(item, null), null);\n    if (is_empty_deque(deque)) {\n        set_front_ptr(deque, new_pair);\n        set_rear_ptr(deque, new_pair);\n    } else {\n        set_tail(new_pair, front_ptr(deque));\n        // set forward pointer to new_pair\n        set_tail(head(front_ptr(deque)), new_pair);\n        set_front_ptr(deque, new_pair);\n    }\n}\n\nfunction front_delete_deque(deque) {\n    if (is_empty_deque(deque)) {\n        error(deque, \"front_delete_deque called with an empty deque\");\n    } else if(is_one_item_deque(deque)) {\n        set_front_ptr(deque, null);\n        set_rear_ptr(deque, null);\n        return deque;\n    } else {\n        set_front_ptr(deque, tail(front_ptr(deque)));\n        return deque;\n    }\n}\n\nfunction rear_insert_deque(deque, item) {\n    if (is_empty_deque(deque)) {\n        const new_pair = pair(pair(item, null), null);\n        set_front_ptr(deque, new_pair);\n        set_rear_ptr(deque, new_pair);\n    } else {\n        // set new_pair forward pointer to last item\n        const new_pair = pair(pair(item, rear_ptr(deque)), null);\n        set_tail(rear_ptr(deque), new_pair);\n        set_rear_ptr(deque, new_pair);\n    }\n}\n\nfunction rear_delete_deque(deque) {\n    if (is_empty_deque(deque)) {\n        error(deque, \"rear_delete_deque called with an empty deque\");\n    } else if(is_one_item_deque(deque)) {\n        set_front_ptr(deque, null);\n        set_rear_ptr(deque, null);\n        return deque;\n    } else {\n        // update rear_ptr to last item's forward pointer\n        set_rear_ptr(deque, tail(head(rear_ptr(deque))));\n        return deque;\n    }\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.3.2#footnote-link-1","child":[{"body":"If the first item is\n    the final item in the queue, the front pointer will be the empty list after\n    the deletion, which will mark the queue as empty; we needn't worry\n    about updating the rear pointer, which will still point to the deleted\n    item, because\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_empty_queue"},{"body":"\n    looks only at the front pointer.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.3.2#footnote-link-2","child":[{"body":"Be careful not to make the interpreter try to print a\n    structure that contains cycles.  (See\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.13","href":"/sicpjs/3.3.1#ex-3.13"},{"body":".)","tag":"#text"}]}]