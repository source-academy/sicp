<SUBSECTION> 
   <NAME>
    评估规则
  </NAME> 

  <LABEL NAME="sec:env-model-rules"></LABEL>
  

  <LONG_PAGE LINES="2"></LONG_PAGE>
  <TEXT>
    The overall specification of how the interpreter
    <INDEX>function application<SUBINDEX>environment model of</SUBINDEX></INDEX>
    <INDEX>environment model of evaluation<SUBINDEX>function application</SUBINDEX></INDEX>
    evaluates a
    <SPLITINLINE>
      <SCHEME>
	combination
      </SCHEME>
      <JAVASCRIPT>
	function application
      </JAVASCRIPT>
    </SPLITINLINE>
    remains the same as when we first introduced it in
    section<SPACE></SPACE><REF NAME="sec:compound-procedures"></REF>:
    <UL>
      <LI>
        To evaluate
	<SPLITINLINE>
	  <SCHEME>
	    a combination:
	  </SCHEME>
	  <JAVASCRIPT>
	    an application:
	  </JAVASCRIPT>
	</SPLITINLINE>
        <OL>
	  <LI>
	    Evaluate the subexpressions
	    of the
	    <SPLITINLINE>
	      <SCHEME>
		combination.<FOOTNOTE>Assignment introduces a subtlety into step
		1 of the evaluation rule.  As shown in
		exercise<SPACE></SPACE><REF NAME="ex:order-of-evaluation"></REF>, the
		presence of assignment allows us to write expressions that will
		produce different values depending on the
		<INDEX>order of evaluation<SUBINDEX>implementation-dependent</SUBINDEX></INDEX>
		<INDEX>implementation dependencies<SUBINDEX>order of subexpression evaluation</SUBINDEX></INDEX>
		order in which the subexpressions in a combination
		are evaluated. Thus, to be precise, we should specify an
		evaluation order in step 1 (e.g., left to right or right to
		left). However, this order should always be considered to be an
		implementation detail, and one should never write programs that
		depend on some particular order. For instance, a sophisticated
		compiler might optimize a program by varying the order in which
		subexpressions are evaluated. The ECMAScript standard specifies
		evaluation of subexpressions from left to right.</FOOTNOTE>
	      </SCHEME>
	      <JAVASCRIPT>
		application.<FOOTNOTE>Assignment introduces a subtlety
		into step 1 of the evaluation rule.  As shown in
		exercise<SPACE></SPACE><REF NAME="ex:order-of-evaluation"></REF>, the
		presence of assignment allows us to write expressions that will
		produce different values depending on the order in which the
		subexpressions in a combination
		are evaluated. To eliminate such ambiguities,
		<INDEX>order of evaluation<SUBINDEX><ORDER>JavaScript</ORDER>in JavaScript</SUBINDEX></INDEX>
		JavaScript specifies left-to-right evaluation of the
		subexpressions of combinations and of the argument expressions
		of applications.</FOOTNOTE>
	      </JAVASCRIPT>
	    </SPLITINLINE>
	  </LI>
          <LI>
	    Apply the value of the
	    <SPLITINLINE>
	      <SCHEME>
		operator
	      </SCHEME>
	      <JAVASCRIPT>
		function
	      </JAVASCRIPT>
	    </SPLITINLINE>
	    subexpression
	    to the values of the
	    <SPLITINLINE>
	      <SCHEME>
		operand
	      </SCHEME>
	      <JAVASCRIPT>
		argument
	      </JAVASCRIPT>
	    </SPLITINLINE>
	    subexpressions.
	  </LI>
        </OL>
      </LI>
    </UL>
    The environment model of evaluation replaces the substitution model in
    specifying what it means to apply a compound
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to arguments.
  </TEXT><!-- Error occurred while translating this section -->

   
  <TEXT>
    在求值的环境模型中，一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    总是由一段代码和一个指向环境的指针构成的一对。
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    只通过一种方式创建：通过求值一个
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>	
    表达式。
    <INDEX><FUNCTION></FUNCTION><SUBINDEX>通过
      <SPLITINLINE>
        <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
        <JAVASCRIPT>lambda 表达式</JAVASCRIPT>
      </SPLITINLINE>
    创建</SUBINDEX></INDEX>
    这产生了一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，其代码取自于
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>	
    表达式的文本，而其环境则是评估该
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>	
    表达式以生成该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    时所在的环境。
    例如，考虑下面的
    <SPLITINLINE>
      <SCHEME>过程定义</SCHEME>
      <JAVASCRIPT>函数声明</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>square</USE><SUBINDEX><ORDER>在环境模型中的环境</ORDER><OPEN></OPEN></SUBINDEX></INDEX>
    <SNIPPET EVAL="yes">
      <EXAMPLE>square_example</EXAMPLE>
      <EXPECTED>196</EXPECTED>
      <SCHEME>
(define (square x)
  (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    在
    <SPLITINLINE>
      <SCHEME>
	global
      </SCHEME>
      <JAVASCRIPT>
	program
      </JAVASCRIPT>
    </SPLITINLINE>
    环境中进行求值。该
    <SPLITINLINE>
      <SCHEME>过程定义</SCHEME>
      <JAVASCRIPT>函数声明</JAVASCRIPT>
    </SPLITINLINE>
    语法
    <SPLITINLINE>
      <SCHEME>只是语法糖，相当于</SCHEME>
      <JAVASCRIPT>等同于</JAVASCRIPT>
    </SPLITINLINE>
    一个底层隐含的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    表达式。使用下面的方式也会得到等价的结果<FOOTNOTE>
	脚注<SPACE></SPACE><REF NAME="foot:function-decl-vs-lambda"></REF> 第一章中提到，在完整的 JavaScript 中二者存在细微差别，但在本书中我们将忽略这些差别。</FOOTNOTE>
    <SNIPPET EVAL="yes">
      <EXAMPLE>square_example</EXAMPLE>
      <EXPECTED>196</EXPECTED>
      <SCHEME>
(define square
  (lambda (x) (* x x)))
      </SCHEME>
      <JAVASCRIPT>
const square = x =&gt; x * x;
      </JAVASCRIPT>
    </SNIPPET>
    这一步评估了
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(lambda (x) (* x x))</SCHEMEINLINE>
      </SCHEME></SPLITINLINE>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>x =&gt; x * x</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    &lt;/SPLITINLINE&gt;
    并将 <SCHEMEINLINE>square</SCHEMEINLINE> 绑定到所得值上，所有这些都发生在
    <SPLITINLINE>
      <SCHEME>
	global
      </SCHEME>
      <JAVASCRIPT>
	program
      </JAVASCRIPT>
    </SPLITINLINE>
    环境中。
  </TEXT>


  
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	    图 <SPACE></SPACE><REF NAME="fig:evaluating-square_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	    图 <SPACE></SPACE><REF NAME="fig:evaluating-square"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    显示了计算这个
    <INDEX>声明<SUBINDEX>环境模型的</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE> 表达式。</SCHEME>
      <JAVASCRIPT>声明语句。</JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
	    全局环境包含程序环境。为减少冗杂，在这幅图之后我们将不再显示全局环境（因为它始终保持不变），但程序环境向上的指针提醒了我们它的存在。
      </JAVASCRIPT>
    </SPLIT>
    该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象是一对，其代码指明该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    具有一个
    <SPLITINLINE><SCHEME>形式参数</SCHEME></SPLITINLINE>
    ，即 <SCHEMEINLINE>x</SCHEMEINLINE>，以及一个
    <SPLITINLINE>
      <SCHEME>过程体</SCHEME>
      <JAVASCRIPT>函数体</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的环境部分是一个指向程序环境的指针，因为正是在该环境中对
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    表达式求值生成了该
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    一个新的绑定已被添加到程序帧中，它将该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象与
    <SPLITINLINE>
      <SCHEME>
	    符号
      </SCHEME>
      <JAVASCRIPT>
	    名称
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>square</SCHEMEINLINE> 关联。
    <SPLIT>
      <SCHEME>
	    通常，<SCHEMEINLINE>define</SCHEMEINLINE> 通过向帧中添加绑定来创建定义。
      </SCHEME>
      <JAVASCRIPT>
      </JAVASCRIPT>
    </SPLIT>

    <SPLIT>
      <SCHEME>
	    <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-3.svg" SPLIT_SCALE="0.75"></FIGURE>
          <LABEL NAME="fig:evaluating-square_scheme"></LABEL>
          <CAPTION>
	        在全局环境中计算 <SCHEMEINLINE>(define (square x) (* x x))</SCHEMEINLINE> 所产生的环境结构。
	      </CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	    <FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-3.svg" SPLIT_SCALE="0.75" WEB_SCALE="0.5"></FIGURE>
          <LABEL NAME="fig:evaluating-square"></LABEL>
          <CAPTION>
	        在程序环境中计算 <JAVASCRIPTINLINE>function square(x) { return x * x; }</JAVASCRIPTINLINE> 所产生的环境结构。
	      </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>


  
  <SPLIT>
    <SCHEME>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        一般来说，<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>、<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE> 和 <JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> 会向帧中添加绑定。常量禁止赋值，因此我们的环境模型需要区分指向常量的名称与指向变量的名称。我们通过在名称后跟的冒号之后写上等号来表示该名称是常量。我们将函数声明视为等同于常量声明；<FOOTNOTE>我们在第 1 章的脚注<SPACE></SPACE><REF NAME="foot:function-decl-vs-lambda"></REF>中提到，完整的 JavaScript 语言允许对通过函数声明声明的名称进行赋值。</FOOTNOTE>请注意图<SPACE></SPACE><REF NAME="fig:evaluating-square"></REF>中冒号后面的等号。
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

   <TEXT>
    既然我们已经了解了如何创建
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，那么我们就可以描述如何应用
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。环境模型规定：要将一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用于参数，需创建一个含有帧的新环境，该帧将形式参数绑定到实际参数的值上。这个帧的外围环境就是由
    <SPLITINLINE>
      <SCHEME>过程.</SCHEME>
      <JAVASCRIPT>函数.</JAVASCRIPT>
    </SPLITINLINE>
    所规定的环境。现在，在这个新环境中，对
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的函数体进行求值。
  </TEXT> 

   <TEXT>
为了展示如何遵循这一规则，
<SPLITINLINE>
  <SCHEME>
	图<SPACE></SPACE><REF NAME="fig:square5-eval_scheme"></REF>
  </SCHEME>
  <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:square5-eval"></REF>
  </JAVASCRIPT>
</SPLITINLINE>
展示了通过求值表达式所创建的环境结构
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>(square 5)</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>square(5)</JAVASCRIPTINLINE></JAVASCRIPT>
</SPLITINLINE>
在<SPLITINLINE>
  <SCHEME>全局</SCHEME>
  <JAVASCRIPT>程序</JAVASCRIPT>
</SPLITINLINE>
环境中，其中<SCH EEINLINE="EEINLINE">square&lt;/SCHEMEINLINE&gt;是通过
<SPLITINLINE>
  <SCHEME>
	图<SPACE></SPACE><REF NAME="fig:evaluating-square_scheme"></REF>.
  </SCHEME>
  <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:evaluating-square"></REF>.
  </JAVASCRIPT>
</SPLITINLINE>
生成的<SPLITINLINE>
  <SCHEME>过程</SCHEME>
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
。应用该<SPLITINLINE>
  <SCHEME>过程</SCHEME>
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
会创建一个新的环境（图中标记为 E1），该环境以一个帧开始，在这个帧中<SPLITINLINE>
  <SCHEMEINLINE>x</SCHEMEINLINE>
</SPLITINLINE>
，即作为<SPLITINLINE>
  <SCHEME>形式参数</SCHEME>
</SPLITINLINE>
对<SPLITINLINE>
  <SCHEME>过程,</SCHEME>
  <JAVASCRIPT>函数,</JAVASCRIPT>
</SPLITINLINE>
的参数被绑定为数值 5。
<SPLITINLINE>
  <JAVASCRIPT>
	注意，在环境 E1 中，名称 <SCHEMEINLINE>x</SCHEMEINLINE> 后面跟有冒号而没有等号，这表明参数 <SCHEMEINLINE>x</SCHEMEINLINE> 被视为一个变量。<FOOTNOTE>本例未利用参数 <SCHEMEINLINE>x</SCHEMEINLINE> 为变量的特性，但请回忆章节<SPACE></SPACE><REF NAME="sec:local-state-variables"></REF>中函数 <JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE>，它正是依赖于其参数作为变量的特性。</FOOTNOTE>
  </JAVASCRIPT>
</SPLITINLINE>
从该帧向上延伸的指针表明，该帧的外围环境为
<SPLITINLINE>
  <SCHEME>全局</SCHEME>
  <JAVASCRIPT>程序</JAVASCRIPT>
</SPLITINLINE>
环境。此<SPLITINLINE>
  <SCHEME>全局</SCHEME>
  <JAVASCRIPT>程序</JAVASCRIPT>
</SPLITINLINE>
环境之所以被选择，是因为它被指定为<SPLITINLINE>
  <SCHEMEINLINE>square</SCHEMEINLINE>
</SPLITINLINE>
<SPLITINLINE>
  <SCHEME>过程</SCHEME>
  <JAVASCRIPT>函数</JAVASCRIPT>
</SPLITINLINE>
对象的一部分。在 E1 中，我们对<SPLITINLINE>
  <SCHEME>过程,</SCHEME>
  <JAVASCRIPT>函数,</JAVASCRIPT>
</SPLITINLINE>
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE>.</JAVASCRIPT>
</SPLITINLINE>
的函数体进行求值。由于在 E1 中 <SCHEMEINLINE>x</SCHEMEINLINE> 的值为 5，因此结果为
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>(*<SPACE></SPACE>5<SPACE></SPACE>5)</SCHEMEINLINE>,</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>5 * 5</JAVASCRIPTINLINE>,</JAVASCRIPT>
</SPLITINLINE>
即 25。
<INDEX><USE>square</USE><SUBINDEX><ORDER>环境</ORDER>在环境模型中<CLOSE></CLOSE></SUBINDEX></INDEX>
<SPLIT>
  <SCHEME>
    <FIGURE>
      <FIGURE SRC="img_original/ch3-Z-G-4.svg"></FIGURE>
      <LABEL NAME="fig:square5-eval_scheme"></LABEL>
      <CAPTION>
	    在全局环境中求值<SCHEMEINLINE>(square 5)</SCHEMEINLINE>所创建的环境。
	  </CAPTION>
    </FIGURE>
  </SCHEME>
  <JAVASCRIPT>
    <FIGURE>
      <FIGURE SRC="img_javascript/ch3-Z-G-4.svg"></FIGURE>
      <LABEL NAME="fig:square5-eval"></LABEL>
      <CAPTION>
	    在程序环境中求值<JAVASCRIPTINLINE>square(5)</JAVASCRIPTINLINE>所创建的环境。
	  </CAPTION>
    </FIGURE>
  </JAVASCRIPT>
</SPLIT>
</SCH></TEXT> 

   <TEXT>
    过程/函数应用的环境模型可以用两条规则来概括：
    <UL>
      <LI>
	一个<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>对象通过构建一个框架来应用于一组参数，
	<SPLITINLINE>
	  <SCHEME>将过程的形式参数绑定</SCHEME>
	  <JAVASCRIPT>将函数的参数绑定</JAVASCRIPT>
	</SPLITINLINE>到调用的参数上，然后在新构造的环境中求值该
	<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>的函数体。新帧的外围环境是被应用的
	<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>对象的环境部分。该应用的结果是求值函数体时遇到的第一个返回语句的返回表达式的值。
      </LI>
      <LI>
	通过在给定环境下求值<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>lambda 表达式</JAVASCRIPT>
	</SPLITINLINE>表达式来创建一个<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>。生成的
	<INDEX>lambda 表达式<SUBINDEX>值</SUBINDEX></INDEX>
	<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>对象是一个对，该对由<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>lambda</JAVASCRIPT>
	</SPLITINLINE>表达式的文本和一个指向创建该
	<SPLITINLINE>
	  <SCHEME>过程</SCHEME>
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>的环境的指针组成。
      </LI>
    </UL>
  </TEXT> 

   <TEXT>
    <SPLIT>
      <SCHEME>
	<INDEX>define<SUBINDEX>environment model of</SUBINDEX></INDEX>
	我们还规定，使用<SCHEMEINLINE>define</SCHEMEINLINE>定义符号会在当前环境帧中创建一个绑定，并将所指示的值赋给该符号。
      </SCHEME>
      <JAVASCRIPT>
	<COMMENT>
	  我们在JavaScript版本中省略这一点，因为在<SPACE></SPACE><REF NAME="sec:env-internal-def"></REF>节中有更详细的讨论。
	</COMMENT>
      </JAVASCRIPT>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	在某个环境中求值表达式<SCHEMEINLINE>(set! </SCHEMEINLINE><LATEXINLINE>variable value</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>将定位该环境中该变量的绑定。为此，需要在环境中找到第一个包含该变量绑定的帧并修改该帧。如果该变量在环境中未被绑定，则<SCHEMEINLINE>set!</SCHEMEINLINE>会发出错误信号。
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>assignment<SUBINDEX>evaluation of</SUBINDEX></INDEX>
	最后，我们规定赋值的行为，这一操作正是促使我们最初引入环境模型的原因。在某个环境中求值表达式<META>name</META><SPACE></SPACE><JAVASCRIPTINLINE>=</JAVASCRIPTINLINE><SPACE></SPACE><META>value</META>会定位该名称在环境中的绑定。也就是说，需要找到环境中第一个包含该名称绑定的帧。如果该绑定是变量绑定——在名称后仅用<JAVASCRIPTINLINE>:</JAVASCRIPTINLINE>指示，则该绑定将被修改以反映变量的新值。否则，如果该帧中的绑定是常量绑定——在名称后由<JAVASCRIPTINLINE>:=</JAVASCRIPTINLINE>指示，则此次赋值会触发<JAVASCRIPTINLINE>&quot;assignment to constant&quot;</JAVASCRIPTINLINE>错误。如果该名称在环境中未被绑定，则赋值会触发<JAVASCRIPTINLINE>&quot;variable undeclared&quot;</JAVASCRIPTINLINE>错误。
      </JAVASCRIPT>
    </SPLIT>
  </TEXT> 

   <TEXT>
    这些求值规则虽然比替换模型复杂得多，但仍相当直观。此外，尽管求值模型较为抽象，但它正确描述了解释器如何求值表达式。在<SPACE></SPACE><REF NAME="chap:meta"></REF>章中，我们将看到该模型如何作为构建可运行解释器的蓝图。以下各节通过分析一些示例程序详细阐述了该模型的细节。
    <INDEX>environment model of evaluation<SUBINDEX>rules for evaluation<CLOSE></CLOSE></SUBINDEX></INDEX>
  </TEXT> 
</SUBSECTION>
