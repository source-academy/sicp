[{"id":"/sicpjs/acknowledgements","tag":"TITLE","body":"Acknowledgments"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n      The JavaScript adaptation of ","tag":"#text"},{"tag":"EM","child":[{"body":"Structure and Interpretation of Computer\n      Programs","tag":"#text"}]},{"body":" (SICP JS) was developed at the National\n      University of Singapore (NUS) for the course CS1101S. The course\n      was co-taught for six years and counting by Low Kok Lim, whose\n      sound pedagogical judgment was crucial for the success of\n      the course and this project. The CS1101S teaching team has included many\n      NUS colleagues and more than 300\n      undergraduate student assistants. Their continuous feedback over\n      the past nine years allowed us to resolve countless JavaScript-specific\n      issues and remove unnecessary complications and yet retain the\n      essential features of both SICP and JavaScript.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n      SICP JS is a software project in addition to a book project. We obtained\n      the ","tag":"#text"},{"tag":"LATEX","body":"$\\LaTeX$"},{"body":" book sources from the original authors in 2008.\n      An early SICP JS tool chain\n      was developed by Liu Hang and refined by Feng Piaopiao. Chan Ger\n      Hean developed the first tools for the print edition, based on which Jolyn\n      Tan developed the tools for the first e-book edition and He Xinyue and\n      Wang Qian repurposed these tools for the current comparison edition.\n      Samuel Fang designed and developed the online edition of SICP JS.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n      The online edition of SICP JS and CS1101S rely heavily on a software system\n      called ","tag":"#text"},{"tag":"EM","child":[{"body":"Source Academy","tag":"#text"}]},{"body":", and the JavaScript sublanguages it\n      supports are called ","tag":"#text"},{"tag":"EM","child":[{"body":"Source","tag":"#text"}]},{"body":". Many dozens of students have\n      contributed to the Source Academy during the preparation of SICP JS, and\n      the system lists them prominently as \"","tag":"#text"},{"body":"Contributors.","tag":"#text"},{"body":"\"\n      Since 2020, the students of the NUS course CS4215, Programming\n      Language Implementation, contributed several programming language\n      implementations that are used in SICP JS: The concurrent version\n      of Source used in section 3.4 was developed by Zhengqun Koo and\n      Jonathan Chan; the lazy implementation used in section 4.2 was developed\n      by Jellouli Ahmed, Ian Kendall Duncan, Cruz Jomari Evangelista, and\n      Alden Tan; the nondeterministic implementation used in section\n      4.3 was developed by Arsalan Cheema and Anubhav; and Daryl Tan\n      helped integrate these implementations into the Academy.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n      We are grateful to STINT, The Swedish Foundation for\n      International Cooperation in Research and Higher Education,\n      whose sabbatical program connected Martin and Tobias and allowed\n      Tobias to work as a co-teacher of CS1101S and join the SICP JS\n      project.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n      We would like to acknowledge the courageous work of the\n      committee of ECMAScript 2015, led by Allen Wirfs-Brock. SICP JS\n      relies heavily on constant and let declarations and lambda expressions,\n      all of which were added to JavaScript with ECMAScript 2015. Those\n      additions allowed us to stay close to the original in the presentation\n      of the most important ideas of SICP. Guy Lewis Steele\n      Jr., who led the first ECMAScript standardization, provided\n      detailed and useful feedback on some exercises of chapter ","tag":"#text"},{"tag":"REF","body":"4","href":"/sicpjs/4"},{"body":".\n    ","tag":"#text"}]},{"tag":"EPIGRAPH","child":[{}],"author":" Martin Henz and Tobias Wrigstad"},{"tag":"SUBHEADING","id":"#h1","child":[{"child":[{"body":"Acknowledgments from the Second Edition of SICP, 1996","tag":"#text"}]}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\nWe would like to thank the many people who have helped us develop this\nbook and this curriculum.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\nOur subject is a clear intellectual descendant of \"","tag":"#text"},{"body":"6.231,","tag":"#text"},{"body":"\" a\nwonderful subject on programming linguistics and the lambda calculus\ntaught at MIT in the late 1960s by Jack Wozencraft and Arthur Evans,\nJr.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\nWe owe a great debt to Robert Fano, who reorganized MIT's introductory\ncurriculum in electrical engineering and computer science to emphasize\nthe principles of engineering design.  He led us in starting out on\nthis enterprise and wrote the first set of subject notes from which\nthis book evolved.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\nMuch of the style and aesthetics of programming that we try to teach\nwere developed in conjunction with Guy Lewis Steele Jr., who\ncollaborated with Gerald Jay Sussman in the initial development of the\nScheme language.  In addition, David Turner, Peter Henderson, Dan\nFriedman, David Wise, and Will Clinger have taught us many of the\ntechniques of the functional programming community that appear in this\nbook.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\nJoel Moses taught us about structuring large systems.  His experience\nwith the Macsyma system for symbolic computation provided the insight\nthat one should avoid complexities of control and concentrate on\norganizing the data to reflect the real structure of the world being\nmodeled.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\nMarvin Minsky and Seymour Papert formed many of our attitudes about\nprogramming and its place in our intellectual lives.  To them we owe\nthe understanding that computation provides a means of expression for\nexploring ideas that would otherwise be too complex to deal with\nprecisely.  They emphasize that a student's ability to write and\nmodify programs provides a powerful medium in which exploring becomes\na natural activity.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\nWe also strongly agree with Alan Perlis that programming is lots of\nfun and we had better be careful to support the joy of programming.\nPart of this joy derives from observing great masters at work.  We are\nfortunate to have been apprentice programmers at the feet of Bill\nGosper and Richard Greenblatt.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\nIt is difficult to identify all the people who have contributed to the\ndevelopment of our curriculum.  We thank all the lecturers, recitation\ninstructors, and tutors who have worked with us over the past fifteen\nyears and put in many extra hours on our subject, especially Bill\nSiebert, Albert Meyer, Joe Stoy, Randy Davis, Louis Braida, Eric\nGrimson, Rod Brooks, Lynn Stein, and Peter Szolovits.\nWe would like to specially acknowledge the outstanding teaching\ncontributions of Franklyn Turbak, now at Wellesley; his work\nin undergraduate instruction set a standard that we can\nall aspire to.\nWe are grateful to Jerry Saltzer and Jim Miller for\nhelping us grapple with the mysteries of concurrency, and to\nPeter Szolovits and David McAllester for their contributions\nto the exposition of nondeterministic evaluation in chapter ","tag":"#text"},{"tag":"REF","body":"4","href":"/sicpjs/4"},{"body":".\n","tag":"#text"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\nMany people have put in significant effort presenting this material at\nother universities.  Some of the people we have worked closely with\nare Jacob Katzenelson at the Technion, Hardy Mayer at the University\nof California at Irvine, Joe Stoy at Oxford, Elisha Sacks at Purdue,\nand Jan Komorowski at the Norwegian University of Science and\nTechnology.  We are exceptionally proud of our colleagues who have\nreceived major teaching awards for their adaptations of this subject\nat other universities, including Kenneth Yip at Yale, Brian Harvey at\nthe University of California at Berkeley, and Dan Huttenlocher at\nCornell.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\nAl Moyé arranged for us to teach this material to engineers at\nHewlett-Packard, and for the production of videotapes of these\nlectures.\nWe would like to thank the talented instructors—in\nparticular Jim Miller, Bill Siebert, and Mike Eisenberg—who have\ndesigned continuing education courses incorporating these tapes and\ntaught them at universities and industry all over the world.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p16","child":[{"body":"\nMany educators in other countries have put in significant\nwork translating the first edition.\nMichel Briand, Pierre Chamard, and André Pic produced a French edition;\nSusanne Daniels-Herold produced a German\nedition; and Fumio Motoyoshi produced a Japanese edition.\nWe do not know who produced the Chinese edition,\nbut we consider it an honor to have been selected as the\nsubject of an \"","tag":"#text"},{"body":"unauthorized","tag":"#text"},{"body":"\" translation.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p17","child":[{"body":"\nIt is hard to enumerate all the people who have made technical\ncontributions to the development of the Scheme systems we use for\ninstructional purposes.  In addition to Guy Steele, principal wizards\nhave included Chris Hanson, Joe Bowbeer, Jim Miller, Guillermo Rozas,\nand Stephen Adams.  Others who have put in significant time are\nRichard Stallman, Alan Bawden, Kent Pitman, Jon Taft, Neil Mayle, John\nLamping, Gwyn Osnos, Tracy Larrabee, George Carrette, Soma\nChaudhuri, Bill Chiarchiaro, Steven Kirsch, Leigh Klotz, Wayne Noss,\nTodd Cass, Patrick O'Donnell, Kevin Theobald, Daniel Weise, Kenneth\nSinclair, Anthony Courtemanche, Henry M. Wu, Andrew Berlin, and Ruth\nShyu.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p18","child":[{"body":"\nBeyond the MIT implementation, we would like to thank the many people\nwho worked on the IEEE Scheme standard, including William Clinger and\nJonathan Rees, who edited the R","tag":"#text"},{"body":"$^4$","tag":"LATEX"},{"body":"RS,\nand Chris Haynes, David Bartley, Chris Hanson, and Jim Miller,\nwho prepared the IEEE standard.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p19","child":[{"body":"\nDan Friedman has been a long-time leader of the Scheme community.\nThe community's broader work goes beyond issues of language design to\nencompass significant educational innovations, such as the high-school\ncurriculum based on EdScheme by Schemer's Inc., and the wonderful\nbooks by Mike Eisenberg and by Brian Harvey and Matthew Wright.\n","tag":"#text"}]},{"tag":"TEXT","id":"#p20","child":[{"body":"\nWe appreciate the work of those who contributed to making this a real\nbook, especially Terry Ehling, Larry Cohen, and Paul Bethge at the MIT\nPress.  Ella Mazel found the wonderful cover image.  For the second\nedition we are particularly grateful to Bernard and Ella Mazel for\nhelp with the book design, and to David Jones, ","tag":"#text"},{"tag":"LATEX","body":"$\\TeX$"},{"body":" wizard\nextraordinaire.  We also are indebted to those readers who made\npenetrating comments on the new draft: Jacob Katzenelson, Hardy\nMayer, Jim Miller, and especially Brian Harvey, who did unto this book\nas Julie did unto his book ","tag":"#text"},{"tag":"EM","child":[{"body":"Simply Scheme","tag":"#text"}]},{"body":".\n","tag":"#text"}]},{"tag":"TEXT","id":"#p21","child":[{"body":"\nFinally, we would like to acknowledge the support of the organizations\nthat have encouraged this work over the years, including support from\nHewlett-Packard, made possible by Ira Goldstein and Joel Birnbaum, and\nsupport from DARPA, made possible by Bob Kahn.\n","tag":"#text"}]},{"tag":"EPIGRAPH","child":[{}],"author":" Harold Abelson and Gerald Jay Sussman"}]