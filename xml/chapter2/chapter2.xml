<CHAPTER>
  <NAME>Building Abstractions with Data</NAME>

  <HISTORY> 
    % fall '97 Add tex '\label's for manual to reference.
    % 8/26/97  FIX TYPOS FOR THIRD PRINTING -- p.112, 179, 181

    % 4/15 fix multiple entries that landed on same page
    % 4/13-15 Indexing [after final printout of chapters]
    % 4/11 Corrections and adjustments based on <QUOTE>final</QUOTE> check and
    %      spell-checking
    % 4/9  trivial fixes based on comparison to before-indexing
    % 4/7-... Julie index fixes (and 4/8 change 'ns')
    % 4/6/96 Julie: pagination change; add Thatcher reference; index fixes
    % 4/5/96 Hal indexing
    % 4/5/96 Julie: index fixes; typo fixes
    % 4/4/96 content fixes; pagination adjustments; rest of pagination
    % 4/3/96 indexing changes
    % 4/2/96 paginate through 2.2
    % 4/1/96 Julie: paginate up to Rogers footnote
    % 4/1/96 Julie misc improvements
    % 3/29/96 Julie indexing fixes
    % 3/20/96 Julie indexing fixes
    % 3/18/96 'atan' edit &amp; minor indexing fixes
    % 3/17/96 Julie minor indexing changes
    % 3/15/96 Julie minor indexing changes
    % 3/10-3/13/96 indexing by Hal, minor indexing fixes/additions by Julie

    % 3/9/96 fix spacing in some exercise parts; break out lines in get/put spec;
    %        other minor edits
    % 3/6/96 minor wording and line-break improvements
    % 3/4/96 reword to 'fix' most triple hyphenation; misc other typesetting
    %        fixes
    % 3/3/96 change countleaves to count-leaves (makes things fit)
    % 3/3/96 fix bug in poly gcd footnote (pointed out by Albert Meyer)
    % 2/26-3/2/96 fix some bad line breaks
    % 2/24/96 flush \noindent after {lisp} by closing up space with 
    % 2/24/96 fix loose footnote (#49)
    % 2/23/96 move 8-queens fig into ex to avoid extra inter-ex space
    % 2/22/96 new spec for epigraph
    % 2/21/96 fixed format of a tabular
    % 2/19/96 fixed () in a reference
  </HISTORY>

  <EPIGRAPH>
    We now come to the decisive step of mathematical abstraction: we
    forget about what the symbols stand for. <ELLIPSIS/> [The mathematician]
    need not be idle; there are many operations which he may carry out
    with these symbols, without ever having to look at the things they
    stand for.
    <INDEX>Weyl, Hermann</INDEX>
    <ATTRIBUTION>
      <AUTHOR>Hermann Weyl</AUTHOR>
      <TITLE>The Mathematical Way of Thinking</TITLE>
    </ATTRIBUTION>
  </EPIGRAPH>

  <CHAPTERCONTENT/>

  <TEXT>
    <INDEX>compound data, need for<OPEN/></INDEX>
    <INDEX>data<SUBINDEX>compound</SUBINDEX><OPEN/></INDEX>
    <NOINDENT/>
    We concentrated in chapter<SPACE/>1 on computational processes and on the    
    role of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in program design.  We saw how to use primitive data (numbers) and primitive
    operations (arithmetic operations), how to combine
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to form compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    through composition, conditionals, and the use of parameters, and how to
    abstract
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>processes</JAVASCRIPT>
    </SPLITINLINE>
    by using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>function declarations.</JAVASCRIPT>
    </SPLITINLINE>
    We saw that a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can be regarded as a pattern for the local evolution of a process, and we
    classified, reasoned about, and performed simple algorithmic analyses of
    some common patterns for processes as embodied in
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    We also saw that higher-order
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    enhance the power of our language by enabling us to manipulate, and thereby
    to reason in terms of, general methods of computation.  This is much of the
    essence of programming.
  </TEXT>

  <TEXT>
    In this chapter we are going to look at more complex data.  All the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in chapter<SPACE/>1 operate on simple numerical data, and simple data are
    not sufficient for many of the problems we wish to address using
    computation.  Programs are typically designed to model complex phenomena,
    and more often than not one must construct computational objects that have
    several parts in order to model real-world phenomena that have several
    aspects.  Thus, whereas our focus in chapter<SPACE/>1 was on building
    abstractions by combining
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to form compound
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    we turn in this chapter to another key aspect of any programming language:
    the means it provides for building abstractions by combining data objects
    to form <EM>compound data</EM>.
  </TEXT>

  <TEXT>
    Why do we want compound data in a programming language?  For the same
    reasons that we want compound
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    to elevate the conceptual level at which we can design our programs, to
    increase the modularity of our designs, and to enhance the expressive power
    of our language. Just as the ability to 
    <SPLITINLINE>
      <SCHEME>define procedures</SCHEME>
      <JAVASCRIPT>declare functions</JAVASCRIPT>
    </SPLITINLINE>
    enables us to deal with processes at a higher conceptual level than that of
    the primitive operations of the language, the ability to construct compound
    data objects enables us to deal with data at a higher conceptual level than
    that of the primitive data objects of the language.
  </TEXT>

  <TEXT>
    Consider the task of designing a system to perform
    <INDEX>rational-number arithmetic<SUBINDEX>need for compound data</SUBINDEX></INDEX>
    arithmetic with rational
    numbers.  We could imagine an operation
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that takes two rational numbers and produces their sum.  In terms of
    simple data, a rational number can be thought of as two integers: a
    numerator and a denominator.  Thus, we could design a program in which
    each rational number would be represented by two integers (a numerator
    and a denominator) and where
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    would be implemented by two
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (one producing the numerator of the sum and one producing
    the denominator).  But this would be awkward, because we would then
    need to explicitly keep track of which numerators corresponded to
    which denominators.  In a system intended to perform many operations
    on many rational numbers, such bookkeeping details would clutter the
    programs substantially, to say nothing of what they would do to our
    minds.  It would be much better if we could <QUOTE>glue together</QUOTE>
    a numerator and denominator to form a pair<EMDASH/>a <EM>compound data
    object</EM><EMDASH/>that our programs could manipulate in a way that would
    be consistent with regarding a rational number as a single conceptual
    unit.
  </TEXT>

  <TEXT>
    The use of compound data also enables us to increase the modularity of
    our programs.  If we can manipulate rational numbers directly as
    objects in their own right, then we can separate the part of our
    program that deals with rational numbers per se from the details of
    how rational numbers may be represented as pairs of integers.  The
    general technique of isolating the parts of a program that deal with
    how data objects are represented from the parts of a program that deal
    with how data objects are used is a powerful design methodology called
    <INDEX>data abstraction</INDEX>
    <EM>data abstraction</EM>.  We will see how data abstraction makes
    programs much easier to design, maintain, and modify.
  </TEXT>

  <TEXT>
    The use of compound data leads to a real increase in the expressive power
    of our programming language.  Consider the idea of forming a
    <QUOTE>linear combination</QUOTE> <LATEXINLINE>$ax+by$</LATEXINLINE>.  We
    might like to write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that would accept <LATEXINLINE>$a$</LATEXINLINE>,
    <LATEXINLINE>$b$</LATEXINLINE>, <LATEXINLINE>$x$</LATEXINLINE>, and
    <LATEXINLINE>$y$</LATEXINLINE> as arguments and return the value of
    <LATEXINLINE>$ax+by$</LATEXINLINE>.  This presents no difficulty if the
    arguments are to be numbers, because we can readily 
    <SPLITINLINE>
      <SCHEME>define the procedure</SCHEME>
      <JAVASCRIPT>declare the function</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <EXAMPLE>linear_combination_example</EXAMPLE>
      <SCHEME>
(define (linear-combination a b x y) 
   (+ (* a x) (* b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return a * x + b * y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>linear_combination_example</NAME>
      <JAVASCRIPT>
	linear_combination(1, 2, 3, 4);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    But suppose we are not concerned only with numbers. Suppose we would like to
    <SPLITINLINE>
      <SCHEME>express, in procedural terms, the idea that one can form</SCHEME>
      <JAVASCRIPT>describe a process that forms</JAVASCRIPT>
    </SPLITINLINE>
    linear combinations whenever addition and multiplication are
    defined<EMDASH/>for rational numbers, complex numbers, polynomials, or
    whatever.  We could express this as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of the form
    <SNIPPET EVAL="no">
      <SCHEME>
(define (linear-combination a b x y)
   (add (mul a x) (mul b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return add(mul(a, x), mul(b, y));
}
      </JAVASCRIPT>
    </SNIPPET>
    where <SCHEMEINLINE>add</SCHEMEINLINE> and <SCHEMEINLINE>mul</SCHEMEINLINE>
    are not the primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>+</SCHEMEINLINE> and <SCHEMEINLINE>*</SCHEMEINLINE> but rather
    more complex things that will perform the appropriate operations for
    whatever kinds of data we pass in as the arguments
    <SCHEMEINLINE>a</SCHEMEINLINE>, <SCHEMEINLINE>b</SCHEMEINLINE>,
    <SCHEMEINLINE>x</SCHEMEINLINE>, and <SCHEMEINLINE>y</SCHEMEINLINE>. The key
    point is that the only thing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should need to know about <SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>, and
    <SCHEMEINLINE>y</SCHEMEINLINE> is that the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>add</SCHEMEINLINE> and <SCHEMEINLINE>mul</SCHEMEINLINE> will
    perform the appropriate manipulations.  From the perspective of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    it is irrelevant what <SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>, and
    <SCHEMEINLINE>y</SCHEMEINLINE> are and even more irrelevant how they might
    happen to be represented in terms of more primitive data.  This same example
    shows why it is important that our programming language provide the ability
    to manipulate compound objects directly: Without this, there is no way for a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>linear-combination</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to pass its arguments along to <SCHEMEINLINE>add</SCHEMEINLINE> and
    <SCHEMEINLINE>mul</SCHEMEINLINE> without having to know their detailed
    structure.<FOOTNOTE>The ability to directly manipulate
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    provides an analogous increase in the expressive power of a programming
    language.  For example, in
    section<SPACE/><REF NAME="sec:procedures-as-parameters"/> we introduced the
    <SCHEMEINLINE>sum</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which takes a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>term</SCHEMEINLINE> as an argument and computes the sum of
    the values of <SCHEMEINLINE>term</SCHEMEINLINE> over some specified interval.
    In order to define <SCHEMEINLINE>sum</SCHEMEINLINE>, it is crucial that we
    be able to speak of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as <SCHEMEINLINE>term</SCHEMEINLINE> as an entity in its own right,
    without regard for how <SCHEMEINLINE>term</SCHEMEINLINE> might be expressed
    with more primitive operations.  Indeed, if we did not have the notion of
    <QUOTE>a <SPLITINLINE><SCHEME>procedure,</SCHEME><JAVASCRIPT>function,</JAVASCRIPT></SPLITINLINE></QUOTE>
    it is doubtful that we would ever even think of the possibility of defining
    an operation such as <SCHEMEINLINE>sum</SCHEMEINLINE>.  Moreover, insofar as
    performing the summation is concerned, the details of how
    <SCHEMEINLINE>term</SCHEMEINLINE> may be constructed from more primitive
    operations are irrelevant.</FOOTNOTE>
    <INDEX>compound data, need for<CLOSE/></INDEX>
    <INDEX>data<SUBINDEX>compound</SUBINDEX><CLOSE/></INDEX>
  </TEXT>

  <TEXT>
    We begin this chapter by implementing the rational-number arithmetic system
    mentioned above.  This will form the background for our discussion of
    compound data and data abstraction.  As with compound
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    the main issue to be addressed is that of abstraction as a technique for
    coping with complexity, and we will see how data abstraction enables us to
    erect suitable 
    <INDEX>abstraction barriers</INDEX>
    <EM>abstraction barriers</EM>
    between different parts of a program.
  </TEXT>

  <TEXT>
    We will see that the key to forming compound data is that a programming
    language should provide some kind of <QUOTE>glue</QUOTE> so that data
    objects can be combined to form more complex data objects.  There are
    many possible kinds of glue.  Indeed, we will discover how to form compound
    data using no special <QUOTE>data</QUOTE> operations at all, only
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    This will further blur the distinction between
    <SPLITINLINE>
      <SCHEME><QUOTE>procedure</QUOTE></SCHEME>
      <JAVASCRIPT><QUOTE>function</QUOTE></JAVASCRIPT>
    </SPLITINLINE>
    and <QUOTE>data,</QUOTE> which was already becoming tenuous toward the end
    of chapter<SPACE/>1.  We will also explore some conventional techniques for
    representing sequences and trees.  One key idea in dealing with compound
    data is the notion of 
    <INDEX>closure</INDEX>
    <EM>closure</EM><EMDASH/>that the
    glue we use for combining data objects should allow us to combine not only
    primitive data objects, but compound data objects as well. Another key idea
    is that compound data objects can serve as 
    <INDEX>conventional interface</INDEX>
    <EM>conventional interfaces</EM> for combining program modules in
    mix-and-match ways.  We illustrate some of these ideas by presenting a
    simple graphics language that exploits closure.
  </TEXT>

  <TEXT>
    We will then augment the representational power of our language by
    introducing 
    <INDEX>symbolic expression</INDEX>
    <INDEX>expression<SUBINDEX>symbolic</SUBINDEX></INDEX>
    <EM>symbolic expressions</EM><EMDASH/>data whose elementary parts
    can be arbitrary symbols rather than only numbers.  We explore various
    alternatives for representing sets of objects.  We will find that,
    just as a given numerical function can be computed by many different
    computational processes, there are many ways in which a given data
    structure can be represented in terms of simpler objects, and the
    choice of representation can have significant impact on the time and
    space requirements of processes that manipulate the data.  We will
    investigate these ideas in the context of symbolic differentiation,
    the representation of sets, and the encoding of information.
  </TEXT>

  <TEXT>
    Next we will take up the problem of working with data that may be
    represented differently by different parts of a program.  This leads
    to the need to implement 
    <INDEX>generic operation</INDEX>
    <INDEX>operation<SUBINDEX>generic</SUBINDEX></INDEX>
    <EM>generic operations</EM>, which must handle many different types of data.
    Maintaining modularity in the presence of generic operations requires more
    powerful abstraction barriers than can be erected with simple data
    abstraction alone. In particular, we introduce <EM>data-directed
    programming</EM> as a technique that allows individual data representations
    to be designed in isolation and then combined 
    <INDEX>additivity</INDEX>
    <EM>additively</EM> (i.e., without modification).  To illustrate the power
    of this approach to system design, we close the chapter by applying what we
    have learned to the implementation of a package for performing symbolic
    arithmetic on polynomials, in which the coefficients of the polynomials can
    be integers, rational numbers, complex numbers, and even other polynomials.
  </TEXT>

  <CHAPTERCONTENT/>

  <!-- Section 1 : Introduction to Data Abstraction -->
  &amp;section2.1;

  <!-- Section 2 : Hierarchical Data and the Closure Property -->
  &amp;section2.2;

  <!-- Section 3 : Symbolic Data -->
  &amp;section2.3;

  <!-- Section 4 : Multiple Representations for Abstract Data -->
  &amp;section2.4;

  <!-- Section 5 : Systems with Generic Operations -->
  &amp;section2.5;

</CHAPTER>
