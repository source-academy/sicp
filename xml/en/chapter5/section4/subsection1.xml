<SUBSECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>The Core of the Explicit-Control Evaluator</SCHEME>
      <JAVASCRIPT>The Dispatcher and Basic Evaluation</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:eceval-core"/>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>controller<OPEN/></SUBINDEX></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>controller<OPEN/></SUBINDEX></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE>

  <TEXT>
    The central element in the evaluator is the sequence of instructions beginning at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>. </JAVASCRIPT>
    </SPLITINLINE>
    This corresponds to the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of the metacircular evaluator described in section<SPACE/><REF
    NAME="sec:core-of-evaluator"/>. When the controller starts at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    it evaluates the 
    <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>component</JAVASCRIPT></SPLITINLINE>
    specified by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>exp</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>comp</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in the environment specified by <SCHEMEINLINE>env</SCHEMEINLINE>. When evaluation is
    complete, the controller will go to the entry point stored in
    <SCHEMEINLINE>continue</SCHEMEINLINE>, and the <SCHEMEINLINE>val</SCHEMEINLINE>
    register will hold the value of the
    <SPLITINLINE><SCHEME>expression.</SCHEME><JAVASCRIPT>component.</JAVASCRIPT></SPLITINLINE>
    As with the metacircular
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    the structure of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a case analysis on the syntactic type of the
    <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>component</JAVASCRIPT></SPLITINLINE>
    to be evaluated.<FOOTNOTE>In our controller, the dispatch is written as a sequence of
    <SCHEMEINLINE>test</SCHEMEINLINE> and <SCHEMEINLINE>branch</SCHEMEINLINE>
    instructions. Alternatively, it could have been written in a data-directed 
    <SPLITINLINE>
      <SCHEME>style (and in a real system it probably would have been) to avoid</SCHEME>
      <JAVASCRIPT>style, which avoids</JAVASCRIPT>
    </SPLITINLINE>
    the need to perform sequential tests and
    <SPLITINLINE>
      <SCHEME>to facilitate</SCHEME>
      <JAVASCRIPT>facilitates</JAVASCRIPT>
    </SPLITINLINE>
    the definition of new
    <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>component</JAVASCRIPT></SPLITINLINE>
    types.
    <SPLITINLINE>
      <SCHEME>
        A machine designed to run Lisp would probably include a
        <SCHEMEINLINE>dispatch-on-type</SCHEMEINLINE> instruction
        that would efficiently execute such data-directed
        dispatches.
      </SCHEME>
      <!-- <JAVASCRIPT> -->
      <!--   Most common JavaScript implementations today do not interpret the JavaScript -->
      <!--   source code directly. Instead, the source code is transformed into an intermediate -->
      <!--   representation called <EM>bytecode</EM>, which is typically interpreted in a loop -->
      <!--   that branches on the value of each bytecode, similar to -->
      <!--   <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>. Some JavaScript interpreters are register -->
      <!--   machines, like ours; others are stack machines, in which operations pop and push -->
      <!--   operands from and to a stack instead of keeping a large number of registers. For -->
      <!--   performance reasons, most JavaScript interpreters compile commonly executed parts -->
      <!--   of a program from bytecode to machine code. This is called Just-In-Time -->
      <!--   compilation (JIT). We will address compilation in section -->
      <!--   <REF NAME="sec:compilation"/>. -->
      <!-- </JAVASCRIPT> -->
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET EVAL="no" POSTPADDING="no">
      <INDEX><DECLARATION>eval_dispatch</DECLARATION></INDEX> 
      <SCHEME>
eval-dispatch
(test (op self-evaluating?) (reg exp))
(branch (label ev-self-eval))
(test (op variable?) (reg exp))
(branch (label ev-variable))
(test (op quoted?) (reg exp))
(branch (label ev-quoted))
(test (op assignment?) (reg exp))
(branch (label ev-assignment))
(test (op definition?) (reg exp))
(branch (label ev-definition))
(test (op if?) (reg exp))
(branch (label ev-if))
(test (op lambda?) (reg exp))
(branch (label ev-lambda))
(test (op begin?) (reg exp))
(branch (label ev-begin))
(test (op application?) (reg exp))
(branch (label ev-application))
(goto (label unknown-expression-type))
      </SCHEME>
      <JAVASCRIPT>
"eval_dispatch",
  test(list(op("is_literal"), reg("comp"))),
  branch(label("ev_literal")),
  test(list(op("is_name"), reg("comp"))),
  branch(label("ev_name")),
  test(list(op("is_application"), reg("comp"))),
  branch(label("ev_application")),
  test(list(op("is_operator_combination"), reg("comp"))),
  branch(label("ev_operator_combination")),
  test(list(op("is_conditional"), reg("comp"))),
  branch(label("ev_conditional")),
  test(list(op("is_lambda_expression"), reg("comp"))),
  branch(label("ev_lambda")),
  test(list(op("is_sequence"), reg("comp"))),
  branch(label("ev_sequence")),
  test(list(op("is_block"), reg("comp"))),
  branch(label("ev_block")),
  test(list(op("is_return_statement"), reg("comp"))),
  branch(label("ev_return")),
  test(list(op("is_function_declaration"), reg("comp"))),
  branch(label("ev_function_declaration")),
  test(list(op("is_declaration"), reg("comp"))),
  branch(label("ev_declaration")),
  test(list(op("is_assignment"), reg("comp"))),
  branch(label("ev_assignment")),
  go_to(label("unknown_component_type")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING>
    <NAME>Evaluating simple expressions</NAME>
  </SUBHEADING>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>expressions with no subexpressions to evaluate<OPEN/></SUBINDEX></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>expressions with no subexpressions to evaluate<OPEN/></SUBINDEX></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE>

  <TEXT>
    Numbers and strings<SPLITINLINE><SCHEME> (which are self-evaluating)</SCHEME></SPLITINLINE>,
    <SPLITINLINE>
      <SCHEME>variables, quotations,</SCHEME>
      <JAVASCRIPT>names,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    expressions have no subexpressions to be evaluated. For these, the evaluator simply
    places the correct value in the <SCHEMEINLINE>val</SCHEMEINLINE> register and
    continues execution at the entry point specified by
    <SCHEMEINLINE>continue</SCHEMEINLINE>. Evaluation of simple expressions is performed
    by the following controller code:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>ev_literal</DECLARATION></INDEX> 
      <INDEX><DECLARATION>ev_name</DECLARATION></INDEX> 
      <INDEX><DECLARATION>ev_lambda</DECLARATION></INDEX> 
      <SCHEME>
ev-self-eval
(assign val (reg exp))
(goto (reg continue))
ev-variable
(assign val (op lookup-variable-value) (reg exp) (reg env))
(goto (reg continue))
ev-quoted
(assign val (op text-of-quotation) (reg exp))
(goto (reg continue))
ev-lambda
(assign unev (op lambda-parameters) (reg exp))
(assign exp (op lambda-body) (reg exp))
(assign val (op make-procedure)
(reg unev) (reg exp) (reg env))
(goto (reg continue))
      </SCHEME>
      <JAVASCRIPT>
"ev_literal",
  assign("val", list(op("literal_value"), reg("comp"))),
  go_to(reg("continue")),

"ev_name",
  assign("val", list(op("symbol_of_name"), reg("comp"), reg("env"))),
  assign("val", list(op("lookup_symbol_value"),
                     reg("val"), reg("env"))),
  go_to(reg("continue")),

"ev_lambda",
  assign("unev", list(op("lambda_parameter_symbols"), reg("comp"))),
  assign("comp", list(op("lambda_body"), reg("comp"))),
  assign("val", list(op("make_function"),
                     reg("unev"), reg("comp"), reg("env"))),
  go_to(reg("continue")),
      </JAVASCRIPT>
    </SNIPPET>
    Observe how
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_lambda</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    uses the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>unev</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>unev</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>exp</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    registers to hold the parameters and body of the lambda expression so
    that they can be passed to the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_function</JAVASCRIPTINLINE>
    </JAVASCRIPT></SPLITINLINE>
    operation, along with the environment in <SCHEMEINLINE>env</SCHEMEINLINE>.
  </TEXT>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>expressions with no subexpressions to evaluate<CLOSE/></SUBINDEX></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>expressions with no subexpressions to evaluate<CLOSE/></SUBINDEX></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE>
  
  <SPLIT>
    
    <SCHEME>
      <SUBHEADING> 
	<NAME>
	  Evaluating procedure applications
	</NAME>
      </SUBHEADING>

      <TEXT>
	<INDEX>explicit-control evaluator for Scheme<SUBINDEX>procedure application<OPEN/></SUBINDEX></INDEX>
	<INDEX>explicit-control evaluator for Scheme<SUBINDEX>combinations<OPEN/></SUBINDEX></INDEX>
	A procedure application is specified by a combination containing an
	operator and operands. The operator is a subexpression whose value is a
	procedure, and the operands are subexpressions whose values are the
	arguments to which the procedure should be applied. The metacircular
	<SCHEMEINLINE>eval</SCHEMEINLINE>
	handles applications by calling itself recursively to
	evaluate each element of the combination, and then passing the results
	to <SCHEMEINLINE>apply</SCHEMEINLINE>, which performs the actual
	procedure
	application.  The
	explicit-control evaluator does the same thing; these recursive calls
	are implemented by
	<SCHEMEINLINE>goto</SCHEMEINLINE>
	instructions, together with 
	<INDEX>explicit-control evaluator for JavaScript<SUBINDEX>stack usage</SUBINDEX></INDEX>
	use of the stack to save registers that will be restored after the recursive
	call returns.  Before each call we will be careful to identify which
	registers must be saved (because their values will be needed
	later).<FOOTNOTE>This is an important but subtle point in translating
	algorithms from a procedural language, such as Lisp,
	to a register-machine language.  As an alternative to saving only what is
	needed, we could save all the registers (except
	<SCHEMEINLINE>val</SCHEMEINLINE>) before each recursive call.
	This is called a 
	<INDEX>framed-stack discipline</INDEX>
	<INDEX>stack<SUBINDEX>framed</SUBINDEX></INDEX>
	<EM>framed-stack</EM> discipline.  This
	would work but might save more registers than necessary; this could be
	an important consideration in a system where stack operations are
	expensive.  Saving registers whose contents will not be needed later
	may also hold on to useless data that could otherwise be
	garbage-collected, freeing space to be reused.</FOOTNOTE>
      </TEXT>
      <TEXT>
	We begin the evaluation of an application by evaluating the
	operator to produce a procedure, which will later be applied to the evaluated
	operands. To evaluate the operator, we move it to the 
	<SCHEMEINLINE>exp</SCHEMEINLINE>
	register and go to <SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>.
	The environment in the <SCHEMEINLINE>env</SCHEMEINLINE> register is already
	the correct one in which to evaluate the operator.
	However, we save <SCHEMEINLINE>env</SCHEMEINLINE> because we will need it
	later to evaluate the operands. We also extract the operands
	into <SCHEMEINLINE>unev</SCHEMEINLINE> and save this on the stack.  We set
	up <SCHEMEINLINE>continue</SCHEMEINLINE> so that
	<SCHEMEINLINE>eval-dispatch</SCHEMEINLINE> will resume at
	<SCHEMEINLINE>ev-appl-did-operator</SCHEMEINLINE>
	after the operator has been evaluated.  First, however, we save the old value of
	<SCHEMEINLINE>continue</SCHEMEINLINE>, which tells the controller where to
	continue after the application.
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>ev_operator_combination</DECLARATION></INDEX> 
	  <INDEX><DECLARATION>ev_application</DECLARATION></INDEX> 
	  <SCHEME>
ev-application
  (save continue)
  (save env)
  (assign unev (op operands) (reg exp))
  (save unev)
  (assign exp (op operator) (reg exp))
  (assign continue (label ev-appl-did-operator))
  (goto (label eval-dispatch))
	  </SCHEME>
	</SNIPPET>
      </TEXT>
      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>operand evaluation<OPEN/></SUBINDEX></INDEX>
      <TEXT>
	Upon returning from evaluating the operator subexpression,
	we proceed to evaluate the operands of the combination
	and to accumulate the resulting arguments in a list, held in
	<SCHEMEINLINE>argl</SCHEMEINLINE>.
	First we restore the unevaluated operands and the environment.  We
	initialize <SCHEMEINLINE>argl</SCHEMEINLINE> to an empty list.  Then we
	assign to the
	<SCHEMEINLINE>proc</SCHEMEINLINE>
	register the procedure that was produced by evaluating the operator.
	If there are no operands, we go directly to
	<SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>. Otherwise we save
	<SCHEMEINLINE>proc</SCHEMEINLINE>
	on the stack and start the argument-evaluation
	loop:<FOOTNOTE>We add to the evaluator data-structure
	procedures
	in section<SPACE/><REF NAME="sec:eval-data-structures"/> the following two
	procedures for manipulating argument lists:
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>empty_arglist</DECLARATION></INDEX> 
	  <INDEX><DECLARATION>adjoin_arg</DECLARATION></INDEX> 
	  <NAME>empty_arglist_duplicate</NAME>
	  <SCHEME>
(define (empty-arglist) '())

(define (adjoin-arg arg arglist)
  (append arglist (list arg)))
	  </SCHEME>
	</SNIPPET>
	We also use an additional syntax procedure
	to test for the last
	operand in a combination:
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>is_last_argument_expression</DECLARATION></INDEX> 
	  <NAME>is_last_argument_expression_duplicate</NAME>
	  <SCHEME>
(define (last-operand? ops)
(null? (cdr ops)))
	  </SCHEME>
	</SNIPPET></FOOTNOTE>
	<SNIPPET EVAL="no">
	  <SCHEME>
ev-appl-did-operator
  (restore unev)                  ; the operands
  (restore env)
  (assign argl (op empty-arglist))
  (assign proc (reg val))         ; the operator
  (test (op no-operands?) (reg unev))
  (branch (label apply-dispatch))
  (save proc)
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	Each cycle of the argument-evaluation loop evaluates an 
	operand
	from the list in <SCHEMEINLINE>unev</SCHEMEINLINE> and accumulates the
	result into <SCHEMEINLINE>argl</SCHEMEINLINE>. To evaluate an
	operand, we place it in the 
	<SCHEMEINLINE>exp</SCHEMEINLINE>
	register and go to
	<SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,
	after setting <SCHEMEINLINE>continue</SCHEMEINLINE> so that execution will
	resume with the argument-accumulation phase.  But first we save the
	arguments accumulated so far (held in <SCHEMEINLINE>argl</SCHEMEINLINE>), the
	environment (held in <SCHEMEINLINE>env</SCHEMEINLINE>), and the remaining
	operands
	to be evaluated (held in <SCHEMEINLINE>unev</SCHEMEINLINE>).  A special case
	is made for the evaluation of the last
	operand which is handled at
	<SCHEMEINLINE>ev-appl-last-arg</SCHEMEINLINE>.
	<SNIPPET EVAL="no">
	  <SCHEME>
ev-appl-operand-loop
  (save argl)
  (assign exp (op first-operand) (reg unev))
  (test (op last-operand?) (reg unev))
  (branch (label ev-appl-last-arg))
  (save env)
  (save unev)
  (assign continue (label ev-appl-accumulate-arg))
  (goto (label eval-dispatch))
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	When an operand has been evaluated, the value is accumulated into the list
	held in <SCHEMEINLINE>argl</SCHEMEINLINE>.  The operand
	is then removed from the list of unevaluated operands
	in <SCHEMEINLINE>unev</SCHEMEINLINE>, and
	the argument-evaluation loop continues.
	<SNIPPET EVAL="no">
	  <SCHEME>
ev-appl-accumulate-arg
  (restore unev)
  (restore env)
  (restore argl)
  (assign argl (op adjoin-arg) (reg val) (reg argl))
  (assign unev (op rest-operands) (reg unev))
  (goto (label ev-appl-operand-loop))
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	Evaluation of the last argument is handled differently.  There is no
	need to save the environment or the list of unevaluated 
	operands before going to
	<SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,
	since they will not be required after the last
	operand	is evaluated.
	Thus, we return from the evaluation to a special entry point
	<SCHEMEINLINE>ev-appl-accum-last-arg</SCHEMEINLINE>,
	which restores the argument list, accumulates the new argument, restores the
	saved procedure, and goes off to perform the application.<FOOTNOTE>The
	optimization of	treating the last operand specially is known as
	<INDEX>evlis tail recursion</INDEX>
	<EM>evlis tail recursion</EM> (see 
	<INDEX>Wand, Mitchell</INDEX>
	<CITATION>Wand 1980</CITATION>). We could be somewhat more efficient
	in the argument evaluation loop if we made evaluation of the first
	operand a special case too.  This would permit us to postpone
	initializing <SCHEMEINLINE>argl</SCHEMEINLINE> until after evaluating the
	first operand, so
	as to avoid saving <SCHEMEINLINE>argl</SCHEMEINLINE> in this case.  The
	compiler in section<SPACE/><REF NAME="sec:compilation"/> performs this
	optimization. (Compare the
	<SCHEMEINLINE>construct-arglist</SCHEMEINLINE> procedure
	of section<SPACE/><REF NAME="sec:compiling-combinations"/>.)</FOOTNOTE>
	<SNIPPET EVAL="no">
	  <SCHEME>
ev-appl-last-arg
  (assign continue (label ev-appl-accum-last-arg))
  (goto (label eval-dispatch))
ev-appl-accum-last-arg
  (restore argl)
  (assign argl (op adjoin-arg) (reg val) (reg argl))
  (restore proc)
  (goto (label apply-dispatch))
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	The details of the argument-evaluation loop determine the
	<INDEX>order of evaluation<SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
	order in which the interpreter evaluates the
	operands of a combination (e.g.,
	left to right or right to left<EMDASH/>see
	exercise<SPACE/><REF NAME="ex:order-of-evaluation"/>).  This order is not
	determined by the metacircular evaluator, which inherits its control
	structure from the underlying Scheme in which it is implemented.<FOOTNOTE>
        The order of operand evaluation in the metacircular evaluator is
        determined by the order of evaluation of the arguments to
        <SCHEMEINLINE>cons</SCHEMEINLINE> in the procedure
        <SCHEMEINLINE>list-of-values</SCHEMEINLINE> of section<SPACE/><REF
        NAME="sec:core-of-evaluator"/> (see exercise<SPACE/><REF
        NAME="ex:arg-eval-order"/>).</FOOTNOTE>
        Because the <SCHEMEINLINE>first-operand</SCHEMEINLINE> selector (used in
        <SCHEMEINLINE>ev-appl-operand-loop</SCHEMEINLINE> to extract successive
        operands from <SCHEMEINLINE>unev</SCHEMEINLINE>) is implemented as
        <SCHEMEINLINE>car</SCHEMEINLINE> and the
        <SCHEMEINLINE>rest-operands</SCHEMEINLINE> selector is implemented as
        <SCHEMEINLINE>cdr</SCHEMEINLINE>, the explicit-control evaluator will
        evaluate the operands of a combination in left-to-right order.
      </TEXT>

      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>operand evaluation<CLOSE/></SUBINDEX></INDEX>
      
      <SUBHEADING> 
	<NAME>
	  Procedure application
	</NAME>
      </SUBHEADING>

      <LABEL NAME="sec:procedure-application"/>
      <TEXT>
	The entry point
	<SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>
	corresponds to the <SCHEMEINLINE>apply</SCHEMEINLINE>
	procedure of the metacircular evaluator.  By the time we get to
	<SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>,
	the <SCHEMEINLINE>proc</SCHEMEINLINE> register contains the
	procedure
	to apply and <SCHEMEINLINE>argl</SCHEMEINLINE> contains the list of
	evaluated arguments to which it must be applied.  The saved value of
	<SCHEMEINLINE>continue</SCHEMEINLINE> (originally passed to
	<SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>
	and saved at
	<SCHEMEINLINE>ev-application</SCHEMEINLINE>),
	which tells where to return with the result of the
	procedure application, is on the stack.  When the application is complete, the
	controller transfers to the entry point specified by the saved
	<SCHEMEINLINE>continue</SCHEMEINLINE>, with the result of the application in
	<SCHEMEINLINE>val</SCHEMEINLINE>.  As with the metacircular
	<SCHEMEINLINE>apply</SCHEMEINLINE>, there are two cases to consider.  Either
	the procedure to be applied is a primitive or it is a compound
	procedure.
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>apply_dispatch</DECLARATION></INDEX> 
	  <SCHEME>
apply-dispatch
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-apply))
  (test (op compound-procedure?) (reg proc))  
  (branch (label compound-apply))
  (goto (label unknown-procedure-type))
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	We assume that each
	<INDEX>explicit-control evaluator for JavaScript<SUBINDEX>primitive procedures</SUBINDEX></INDEX>
	primitive is implemented so as to obtain its
	arguments from <SCHEMEINLINE>argl</SCHEMEINLINE> and place its result in
	<SCHEMEINLINE>val</SCHEMEINLINE>.  To specify how the machine handles
	primitives, we would have to provide a sequence of controller instructions
	to implement each primitive and arrange for
	<SCHEMEINLINE>primitive-apply</SCHEMEINLINE>
	to dispatch to the
	instructions for the primitive identified by the
	contents of
	<SCHEMEINLINE>proc</SCHEMEINLINE>.
	Since we are interested in the structure of the evaluation process rather
	than the details of the primitives, we will instead just use an
	<SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE> operation
	that applies the
	procedure in proc
	to the arguments in <SCHEMEINLINE>argl</SCHEMEINLINE>.  For the purpose of
	simulating the evaluator with the simulator
	of section<SPACE/><REF NAME="sec:simulator"/> we use the
	procedure <SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>,
	which calls on the underlying Scheme system to perform the application,
	just as we did for the metacircular
	evaluator in section<SPACE/><REF NAME="sec:running-eval"/>.  After computing
	the value of the primitive application, we restore
	<SCHEMEINLINE>continue</SCHEMEINLINE> and go
	to the designated entry point.
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>primitive_apply</DECLARATION></INDEX> 
	  <SCHEME>
primitive-apply
  (assign val (op apply-primitive-procedure)
              (reg proc)
              (reg argl))
  (restore continue)
  (goto (reg continue))
	  </SCHEME>
	</SNIPPET>
      </TEXT>

      <TEXT>
	<INDEX>explicit-control evaluator for JavaScript<SUBINDEX>compound <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
	To apply a compound procedure, we proceed just as with
	the metacircular evaluator.  We construct a frame
	that binds the
	procedure<APOS/>s
	parameters to the arguments, use this frame to extend the environment
	carried by the procedure,
	and evaluate in this extended environment 
	the sequence of expressions that forms the body of the
	procedure.
        <SCHEMEINLINE>Ev-sequence</SCHEMEINLINE>, described below
        in section<SPACE/><REF NAME="sec:sequence-evaluation"/>,
        handles the evaluation of the sequence.
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>compound_apply</DECLARATION></INDEX> 
	  <SCHEME>
compound-apply
  (assign unev (op procedure-parameters) (reg proc))
  (assign env (op procedure-environment) (reg proc))
  (assign env (op extend-environment)
              (reg unev) (reg argl) (reg env))
  (assign unev (op procedure-body) (reg proc))
  (goto (label ev-sequence))
	  </SCHEME>
	</SNIPPET>
      </TEXT>
      <TEXT>
	<SCHEMEINLINE>Compound-apply</SCHEMEINLINE> is the only
	place in the interpreter where the
	<SCHEMEINLINE>env</SCHEMEINLINE> register is ever assigned a
	new value. Just as in the metacircular evaluator, the new environment
	is constructed from the environment carried by the
	procedure, together with the argument list and the corresponding list of
	variables to be bound.
      </TEXT>

      <INDEX>explicit-control evaluator for Scheme<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> application<CLOSE/></SUBINDEX></INDEX>
      <INDEX>explicit-control evaluator for Scheme<SUBINDEX>combinations<CLOSE/></SUBINDEX></INDEX>
    </SCHEME>

    <JAVASCRIPT>
      
      <SUBHEADING> 
        <NAME>
          Conditionals
        </NAME>
      </SUBHEADING>

      <TEXT>
        As with the metacircular evaluator, syntactic forms are handled by selectively
        evaluating fragments of the component. For a
        <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>conditionals</SUBINDEX></INDEX>
	conditional, we must evaluate the
        predicate and decide, based on the value of predicate, whether to evaluate the
        consequent or the alternative.
      </TEXT>

      <TEXT>
        Before evaluating the predicate, we save the conditional itself, which is in
        <JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE>, so that we can later extract the
        consequent or alternative. To evaluate the predicate expression, we move it to
        the <JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE> register and go to
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>. The environment in the
        <JAVASCRIPTINLINE>env</JAVASCRIPTINLINE> register is already the correct one in
        which to evaluate the predicate. However, we save
        <JAVASCRIPTINLINE>env</JAVASCRIPTINLINE> because we will need it later to
        evaluate the consequent or the alternative. We set up
        <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> so that evaluation will resume at
        <JAVASCRIPTINLINE>ev_conditional_decide</JAVASCRIPTINLINE> after the predicate
        has been evaluated. First, however, we save the old value of
        <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE>, which we will need later in order
        to return to the evaluation of the statement that is waiting for the value of
        the conditional.
        <SNIPPET EVAL="no">
          <INDEX><DECLARATION>ev_conditional</DECLARATION></INDEX> 
          <JAVASCRIPT>
"ev_conditional",
  save("comp"), // save conditional for later
  save("env"),
  save("continue"),
  assign("continue", label("ev_conditional_decide")),
  assign("comp", list(op("conditional_predicate"), reg("comp"))),
  go_to(label("eval_dispatch")), // evaluate the predicate
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <LONG_PAGE lines="2"/>
      <TEXT>
        When we resume at <JAVASCRIPTINLINE>ev_conditional_decide</JAVASCRIPTINLINE> after
	evaluating the predicate, we test whether it was true or false
        and, depending on the result, place either the consequent or the alternative in
        <JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE> before going to
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>.<FOOTNOTE>
        In this chapter, we will use the function
        <INDEX><DECLARATION>is_falsy</DECLARATION><SUBINDEX>why used in explicit-control evaluator</SUBINDEX></INDEX>
        <JAVASCRIPTINLINE>is_falsy</JAVASCRIPTINLINE> to test the value of the predicate.
        This allows us to write the consequent and alternative branches in the same
        order as in a conditional, and simply fall through to the consequent
        branch when the predicate holds. The function <JAVASCRIPTINLINE>is_falsy</JAVASCRIPTINLINE>
        is declared as the opposite of the
        <JAVASCRIPTINLINE>is_truthy</JAVASCRIPTINLINE> function used to test predicates of
        conditionals in section<SPACE/><REF NAME="sec:core-of-evaluator"/>.</FOOTNOTE>
	Notice that restoring
	<JAVASCRIPTINLINE>env</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> here sets up
	<JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE> to have the correct environment
	and to continue at the right place to receive the value of the conditional.
	<SNIPPET EVAL="no" POSTPADDING="no">
          <JAVASCRIPT>
"ev_conditional_decide",
  restore("continue"),
  restore("env"),
  restore("comp"),
  test(list(op("is_falsy"), reg("val"))),
  branch(label("ev_conditional_alternative")),
"ev_conditional_consequent",
  assign("comp", list(op("conditional_consequent"), reg("comp"))),
  go_to(label("eval_dispatch")),
"ev_conditional_alternative",
  assign("comp", list(op("conditional_alternative"), reg("comp"))),
  go_to(label("eval_dispatch")),
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <SUBHEADING> 
        <NAME>
          Sequence Evaluation
        </NAME>
      </SUBHEADING>

      <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>sequences of statements<OPEN/></SUBINDEX></INDEX>
      
      <TEXT>
        The portion of the explicit-control evaluator beginning at
        <JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE>, which handles
	sequences of statements, is analogous to the metacircular evaluator's
        <JAVASCRIPTINLINE>eval_@sequence</JAVASCRIPTINLINE> function.  
      </TEXT>
      <TEXT>
        The entries at <JAVASCRIPTINLINE>ev_sequence_next</JAVASCRIPTINLINE> and
        <JAVASCRIPTINLINE>ev_sequence_continue</JAVASCRIPTINLINE> form a loop that
        successively evaluates each statement in a sequence.
        The list of unevaluated
        statements is kept in <JAVASCRIPTINLINE>unev</JAVASCRIPTINLINE>.
        At <JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE> we place the sequence of
        statements to be evaluated in <JAVASCRIPTINLINE>unev</JAVASCRIPTINLINE>. If the
        sequence is empty, we set <JAVASCRIPTINLINE>val</JAVASCRIPTINLINE> to <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> and jump to
        <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> via
        <JAVASCRIPTINLINE>ev_sequence_empty</JAVASCRIPTINLINE>. Otherwise we start the
        sequence-evaluation loop, first saving the value of <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> on the stack, because
        the <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> register will be used for local flow of control in the loop, and the original
        value is needed for continuing after the statement sequence. Before evaluating
        each statement, we check to see if there are additional statements to be evaluated
        in the sequence. If so, we save the rest of the unevaluated statements (held in
        <JAVASCRIPTINLINE>unev</JAVASCRIPTINLINE>) and the environment in which these must
        be evaluated (held in <JAVASCRIPTINLINE>env</JAVASCRIPTINLINE>) and call
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE> to evaluate the statement,
        which has been placed in <JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE>. The
        two saved registers are restored after this evaluation, at
        <JAVASCRIPTINLINE>ev_sequence_continue</JAVASCRIPTINLINE>.
      </TEXT>
      <LONG_PAGE lines="2"/>
      <TEXT>
        The final statement in the sequence is handled differently, at the entry point
        <JAVASCRIPTINLINE>ev_sequence_last_statement</JAVASCRIPTINLINE>. Since there are
        no more statements to be evaluated after this one, we need not save
        <JAVASCRIPTINLINE>unev</JAVASCRIPTINLINE> or
        <JAVASCRIPTINLINE>env</JAVASCRIPTINLINE> before going to
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>. The value of the whole
        sequence is the value of the last statement, so after the evaluation of the last
        statement there is nothing left to do except continue at the entry point that was
        saved at <JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE>.
        Rather than setting up <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> to arrange
        for <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE> to return here and then
        restoring <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> from the stack and
        continuing at that entry point, we restore
        <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> from the stack before going to
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>, so that
        <JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE> will continue at that entry
        point after evaluating the statement.
      </TEXT>
      <!-- There should be exactly one newline in the following SNIPPET: just before
	   "ev_sequence_empty" -->
      <SNIPPET EVAL="no">
	<INDEX><DECLARATION>ev_sequence</DECLARATION></INDEX>
        <JAVASCRIPT>
"ev_sequence",
  assign("unev", list(op("sequence_statements"), reg("comp"))),
  test(list(op("is_empty_sequence"), reg("unev"))), 
  branch(label("ev_sequence_empty")),
  save("continue"),
"ev_sequence_next",
  assign("comp", list(op("first_statement"), reg("unev"))),
  test(list(op("is_last_statement"), reg("unev"))),
  branch(label("ev_sequence_last_statement")),
  save("unev"),
  save("env"),
  assign("continue", label("ev_sequence_continue")),
  go_to(label("eval_dispatch")),
"ev_sequence_continue",
  restore("env"),
  restore("unev"),
  assign("unev", list(op("rest_statements"), reg("unev"))),
  go_to(label("ev_sequence_next")),
"ev_sequence_last_statement",
  restore("continue"),
  go_to(label("eval_dispatch")),

"ev_sequence_empty",
  assign("val", constant(undefined)),
  go_to(reg("continue")), 
        </JAVASCRIPT>
      </SNIPPET>

      <TEXT>
        Unlike <JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE> in the metacircular
        evaluator, <JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE> does not need to check whether a return statement was
        evaluated so as to terminate the sequence evaluation. The <QUOTE>explicit
        control</QUOTE> in this evaluator allows a return statement to jump directly to
        the continuation of the current function application without resuming the
        sequence evaluation. Thus sequence evaluation does not need to be concerned
        with returns, or even be aware of the existence of return statements in the
        language. Because a return statement jumps out of the sequence-evaluation code,
        the restores of saved registers at <JAVASCRIPTINLINE>ev_sequence_continue</JAVASCRIPTINLINE>
        won<APOS/>t be executed. We will see later how the return statement removes these values from the stack. 
      </TEXT>

      <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>sequences of statements<CLOSE/></SUBINDEX></INDEX>
      
    </JAVASCRIPT>
  </SPLIT>
</SUBSECTION>

