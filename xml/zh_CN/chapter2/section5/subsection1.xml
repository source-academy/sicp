<SUBSECTION>
   
  <NAME>通用算术操作</NAME> 


  <LABEL NAME="sec:generic-arithmetic-operators"></LABEL>
  
  <INDEX>通用算术操作<OPEN></OPEN></INDEX>

  
  <TEXT>
    设计通用算术操作的任务类似于设计通用复数运算的任务。例如，我们希望拥有一个通用加法
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>add</SCHEMEINLINE>，其行为在普通数字上就像普通基本加法
    <SCHEMEINLINE>+</SCHEMEINLINE>
    一样，在有理数上则像
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的运算，在复数上则像
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的运算。我们可以实现<SCHEMEINLINE>add</SCHEMEINLINE>以及其他通用算术操作，方法是<DO_BREAK_PAGE></DO_BREAK_PAGE>采用我们在第<SPACE></SPACE><REF NAME="sec:data-directed"></REF>节中为复数实现通用选择器时所使用的相同策略。我们将为每种数字附加一个类型标签，并使通用
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    根据其参数的数据类型调度到相应的包中。
  </TEXT>

   
  <TEXT>
    通用算术 
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的定义如下：
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>add</DECLARATION> (通用)</INDEX>
      <INDEX><DECLARATION>sub</DECLARATION> (通用)</INDEX>
      <INDEX><DECLARATION>mul</DECLARATION> (通用)</INDEX>
      <INDEX><DECLARATION>div</DECLARATION> (通用)</INDEX>
      <NAME>ops</NAME>
      <REQUIRES>apply_generic</REQUIRES>
      <SCHEME>
(define (add x y) (apply-generic &apos;add x y))
(define (sub x y) (apply-generic &apos;sub x y))
(define (mul x y) (apply-generic &apos;mul x y))
(define (div x y) (apply-generic &apos;div x y))
      </SCHEME>
      <JAVASCRIPT>
function add(x, y) { return apply_generic(&quot;add&quot;, list(x, y)); }
<SHORT_SPACE></SHORT_SPACE>
function sub(x, y) { return apply_generic(&quot;sub&quot;, list(x, y)); }
<SHORT_SPACE></SHORT_SPACE>
function mul(x, y) { return apply_generic(&quot;mul&quot;, list(x, y)); }
<SHORT_SPACE></SHORT_SPACE>
function div(x, y) { return apply_generic(&quot;div&quot;, list(x, y)); }
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    我们首先安装一个用于处理
    <INDEX>数字<SUBINDEX><ORDER>通用</ORDER>在通用算术系统中</SUBINDEX></INDEX>
    <INDEX>普通数字（在通用算术系统中）</INDEX>
    <EM>普通</EM>数字，即我们语言中的原始数字。  我们
    <SPLITINLINE>
      <SCHEME>
	will
      </SCHEME>
    </SPLITINLINE>
    为这些数字打上标记，
    使用 
    <SPLITINLINE>
      <SCHEME>符号 <SCHEMEINLINE>scheme-number</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT>
	string <JAVASCRIPTINLINE>&quot;javascript_number&quot;</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLITINLINE>
    本包中的算术运算是原始算术
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    （因此不需要定义额外的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来处理未打标记的数字）。 由于这些运算各接受两个参数，
    它们被安装在以以下列表为键的表中：
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>(scheme-number scheme-number)</SCHEMEINLINE>：
      </SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>list(&quot;javascript_number&quot;, &quot;javascript_number&quot;)</JAVASCRIPTINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>JavaScript-number</SUBINDEX></INDEX>
      <INDEX><USE>javascript_number</USE> package</INDEX>
      <INDEX><DECLARATION>install_javascript_number_package</DECLARATION></INDEX> 
      <NAME>install_javascript_number_package</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <SCHEME>
(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag &apos;scheme-number x))    
  (put &apos;add &apos;(scheme-number scheme-number)
    (lambda (x y) (tag (+ x y))))
  (put &apos;sub &apos;(scheme-number scheme-number)
    (lambda (x y) (tag (- x y))))
  (put &apos;mul &apos;(scheme-number scheme-number)
    (lambda (x y) (tag (* x y))))
  (put &apos;div &apos;(scheme-number scheme-number)
    (lambda (x y) (tag (/ x y))))
  (put &apos;make &apos;scheme-number
    (lambda (x) (tag x)))
  &apos;done)
      </SCHEME>
      <JAVASCRIPT>
function install_javascript_number_package() {
    function tag(x) {
        return attach_tag(&quot;javascript_number&quot;, x);
    }
    put(&quot;add&quot;, list(&quot;javascript_number&quot;, &quot;javascript_number&quot;), 
        (x, y) =&gt; tag(x + y));
    put(&quot;sub&quot;, list(&quot;javascript_number&quot;, &quot;javascript_number&quot;), 
        (x, y) =&gt; tag(x - y));
    put(&quot;mul&quot;, list(&quot;javascript_number&quot;, &quot;javascript_number&quot;), 
        (x, y) =&gt; tag(x * y));
    put(&quot;div&quot;, list(&quot;javascript_number&quot;, &quot;javascript_number&quot;), 
        (x, y) =&gt; tag(x / y));
    put(&quot;make&quot;, &quot;javascript_number&quot;, 
        x =&gt; tag(x));
    return &quot;done&quot;;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    使用
    <SPLITINLINE>
      <SCHEME>Scheme-number package</SCHEME>
      <JAVASCRIPT>JavaScript-number package</JAVASCRIPT>
    </SPLITINLINE>
    的用户将通过以下
    <SPLITINLINE>
      <SCHEME>过程:</SCHEME>
      <JAVASCRIPT>函数:</JAVASCRIPT>
    </SPLITINLINE>
    创建（带标签的）普通数字。
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>actually_install_javascript_number_package</NAME>
      <JAVASCRIPT>
install_javascript_number_package();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <INDEX><DECLARATION>make_javascript_number</DECLARATION></INDEX> 
      <NAME>install_javascript_number_package_usage</NAME>
      <REQUIRES>install_javascript_number_package</REQUIRES>
      <REQUIRES>actually_install_javascript_number_package</REQUIRES>
      <EXAMPLE>install_javascript_number_package_usage_example</EXAMPLE>
      <EXPECTED>[ &apos;javascript_number&apos;, 9 ]</EXPECTED>
      <SCHEME>
(define (make-scheme-number n)
  ((get &apos;make &apos;scheme-number) n))
      </SCHEME>
      <JAVASCRIPT>
function make_javascript_number(n) {
    return get(&quot;make&quot;, &quot;javascript_number&quot;)(n);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>install_javascript_number_package_usage_example</NAME>
      <JAVASCRIPT>
const n1 = make_javascript_number(4);
const n2 = make_javascript_number(5);

add(n1, n2);
      </JAVASCRIPT>
    </SNIPPET>
    
  </TEXT>

  
  <TEXT>
    既然通用算术系统的框架已经建立，
    我们就可以轻松地引入新的数字类型。下面是一个执行有理算术的包。请注意，由于可加性的优势，
    我们可以直接使用来自第<SPACE></SPACE><REF NAME="sec:rationals"></REF>节的有理数代码，
    作为包内的内部<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ：
    <SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>rational-number</SUBINDEX></INDEX>
      <INDEX><USE>rational</USE> package</INDEX>
      <INDEX>rational-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>
      <INDEX><DECLARATION>install_rational_package</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_rational</DECLARATION></INDEX> 
      <NAME>benefit_of_additivity</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>benefit_of_additivity_example</EXAMPLE>
      <EXPECTED>[ &apos;rational&apos;, [ 11, 15 ] ]</EXPECTED>
      <SCHEME>
(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))

  ;; interface to rest of the system
  (define (tag x) (attach-tag &apos;rational x))
  (put &apos;add &apos;(rational rational)
    (lambda (x y) (tag (add-rat x y))))
  (put &apos;sub &apos;(rational rational)
    (lambda (x y) (tag (sub-rat x y))))
  (put &apos;mul &apos;(rational rational)
    (lambda (x y) (tag (mul-rat x y))))
  (put &apos;div &apos;(rational rational)
    (lambda (x y) (tag (div-rat x y))))

  (put &apos;make &apos;rational
    (lambda (n d) (tag (make-rat n d))))
  &apos;done)

(define (make-rational n d)
  ((get &apos;make &apos;rational) n d))
      </SCHEME>
      <JAVASCRIPT>
function install_rational_package() {
    // internal functions
    function numer(x) { return head(x); }
    function denom(x) { return tail(x); }
    function make_rat(n, d) {
        const g = gcd(n, d);
        return pair(n / g, d / g);
    }
    function add_rat(x, y) {
        return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function sub_rat(x, y) {
        return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function mul_rat(x, y) {
        return make_rat(numer(x) * numer(y),
                        denom(x) * denom(y));
    }
    function div_rat(x, y) {
        return make_rat(numer(x) * denom(y),
                        denom(x) * numer(y));
    }
    // interface to rest of the system
    function tag(x) {
        return attach_tag(&quot;rational&quot;, x);
    }
    put(&quot;add&quot;, list(&quot;rational&quot;, &quot;rational&quot;),
        (x, y) =&gt; tag(add_rat(x, y)));
    put(&quot;sub&quot;, list(&quot;rational&quot;, &quot;rational&quot;),
        (x, y) =&gt; tag(sub_rat(x, y)));
    put(&quot;mul&quot;, list(&quot;rational&quot;, &quot;rational&quot;),
        (x, y) =&gt; tag(mul_rat(x, y)));
    put(&quot;div&quot;, list(&quot;rational&quot;, &quot;rational&quot;),
        (x, y) =&gt; tag(div_rat(x, y)));
    put(&quot;make&quot;, &quot;rational&quot;,
        (n, d) =&gt; tag(make_rat(n, d)));
    return &quot;done&quot;;  
}

function make_rational(n, d) {
    return get(&quot;make&quot;, &quot;rational&quot;)(n, d);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>benefit_of_additivity_example</NAME>
      <JAVASCRIPT>
install_rational_package();

const r1 = make_rational(1, 3);
const r2 = make_rational(2, 5);

add(r1, r2);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT> 
    我们可以安装一个类似的包来处理复数，使用标签
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>&quot;complex&quot;</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    在创建该包时，我们从表中提取了运算操作
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-mag-ang</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_from_mag_ang</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    这些操作由矩形和极坐标包定义。  
    <INDEX>加法性</INDEX>
    加法性允许我们使用相同的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>，</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>，</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>，</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>，</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>，</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>，</JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为内部运算，来自节<SPACE></SPACE><REF NAME="sec:representations-complex-numbers"></REF>.
<SNIPPET CHAP="4">
      <INDEX>package<SUBINDEX>complex-number</SUBINDEX></INDEX>
      <INDEX><USE>complex</USE> package</INDEX>
      <INDEX>complex-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>
      <INDEX><DECLARATION>install_complex_package</DECLARATION></INDEX> 
      <NAME>install_complex_package</NAME>
      <REQUIRES>ops</REQUIRES>
      <REQUIRES>generic_selectors</REQUIRES>
      <REQUIRES>operation_table_from_chapter_3</REQUIRES>
      <REQUIRES>operation_table</REQUIRES>
      <REQUIRES>install_rectangular_package</REQUIRES>
      <REQUIRES>install_rectangular_package_usage</REQUIRES>
      <REQUIRES>install_polar_package_usage</REQUIRES>
      <REQUIRES>attach_tag</REQUIRES>
      <EXAMPLE>actually_install_complex_package</EXAMPLE>
      <EXPECTED>&apos;done&apos;</EXPECTED>
      <SCHEME>
(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get &apos;make-from-real-imag &apos;rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get &apos;make-from-mag-ang &apos;polar) r a))

  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag &apos;complex z))
  (put &apos;add &apos;(complex complex)
    (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put &apos;sub &apos;(complex complex)
    (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put &apos;mul &apos;(complex complex)
    (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put &apos;div &apos;(complex complex)
    (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put &apos;make-from-real-imag &apos;complex
    (lambda (x y) (tag (make-from-real-imag x y))))
  (put &apos;make-from-mag-ang &apos;complex
    (lambda (r a) (tag (make-from-mag-ang r a))))
  &apos;done)
      </SCHEME>
      <JAVASCRIPT>
function install_complex_package() {
    // imported functions from rectangular and polar packages
    function make_from_real_imag(x, y) {
        return get(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;)(x, y);
    }
    function make_from_mag_ang(r, a) {
        return get(&quot;make_from_mag_ang&quot;, &quot;polar&quot;)(r, a);
    }
    // internal functions
    function add_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) + real_part(z2),
                                   imag_part(z1) + imag_part(z2));
    }
    function sub_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) - real_part(z2),
                                   imag_part(z1) - imag_part(z2));
    }
    function mul_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) * magnitude(z2),
                                 angle(z1) + angle(z2));
    }
    function div_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) / magnitude(z2),
                                 angle(z1) - angle(z2));
    }
    // interface to rest of the system
    function tag(z) { return attach_tag(&quot;complex&quot;, z); }
    put(&quot;add&quot;, list(&quot;complex&quot;, &quot;complex&quot;), 
        (z1, z2) =&gt; tag(add_complex(z1, z2)));
    put(&quot;sub&quot;, list(&quot;complex&quot;, &quot;complex&quot;), 
        (z1, z2) =&gt; tag(sub_complex(z1, z2)));
    put(&quot;mul&quot;, list(&quot;complex&quot;, &quot;complex&quot;), 
        (z1, z2) =&gt; tag(mul_complex(z1, z2)));
    put(&quot;div&quot;, list(&quot;complex&quot;, &quot;complex&quot;), 
        (z1, z2) =&gt; tag(div_complex(z1, z2)));
    put(&quot;make_from_real_imag&quot;, &quot;complex&quot;, 
        (x, y) =&gt; tag(make_from_real_imag(x, y)));
    put(&quot;make_from_mag_ang&quot;, &quot;complex&quot;, 
        (r, a) =&gt; tag(make_from_mag_ang(r, a)));
    return &quot;done&quot;;    
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   
  <TEXT>
    复数包外的程序可以通过实部和虚部构造复数，也可以通过幅度和角度构造复数。请注意，最初在矩形和极坐标包中定义的底层
    <SPLITINLINE>
      <SCHEME>过程,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    被导出到复数包中，并由此导出到外部世界。
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>actually_install_complex_package</NAME>
      <JAVASCRIPT>
install_complex_package();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <INDEX><DECLARATION>make_complex_from_real_imag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_complex_from_mag_ang</DECLARATION></INDEX> 
      <NAME>install_complex_package_usage</NAME>
      <REQUIRES>install_complex_package</REQUIRES>
      <REQUIRES>actually_install_complex_package</REQUIRES>
      <EXPECTED>[ &apos;rectangular&apos;, [ 8.387912809451864, 5.397127693021015 ] ]</EXPECTED>
      <EXAMPLE>install_complex_package_example</EXAMPLE>
      <SCHEME>
(define (make-complex-from-real-imag x y)
  ((get &apos;make-from-real-imag &apos;complex) x y))

(define (make-complex-from-mag-ang r a)
  ((get &apos;make-from-mag-ang &apos;complex) r a))
      </SCHEME>
      <JAVASCRIPT>
function make_complex_from_real_imag(x, y){
   return get(&quot;make_from_real_imag&quot;, &quot;complex&quot;)(x, y);
}
function make_complex_from_mag_ang(r, a){
   return get(&quot;make_from_mag_ang&quot;, &quot;complex&quot;)(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>install_complex_package_example</NAME>
      <JAVASCRIPT>
const r = make_complex_from_real_imag(4, 3);
const p = make_complex_from_mag_ang(5, 0.5);

add(r, p);    // results in a complex number in rectangular coordinates
// mul(r, p); // results in a complex number in polar coordinates
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const r = make_complex_from_real_imag(4, 3);
const p = make_complex_from_mag_ang(5, 0.5);
tail(add(r, p));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

   
  <TEXT>
    这里我们所展示的是一个
    <INDEX>类型标签<SUBINDEX>双层</SUBINDEX></INDEX>
    双层标签系统。一个典型的复数，例如以矩形形式表示的 <LATEXINLINE>$3+4i$</LATEXINLINE>，将被表示为如下所示
    <SPLITINLINE>
      <SCHEME>
	图形<SPACE></SPACE><REF NAME="fig:complex-number-structure_scheme"></REF>。
      </SCHEME>
      <JAVASCRIPT>
	图形<SPACE></SPACE><REF NAME="fig:complex-number-structure"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE>
      外层标签
    <SPLITINLINE><SCHEME>(<SCHEMEINLINE>complex</SCHEMEINLINE>)</SCHEME>
    <JAVASCRIPT>(<JAVASCRIPTINLINE>&quot;complex&quot;</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    用于将该数字定向到复数包中。一旦进入复数包，下一个标签
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>rectangular</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>&quot;rectangular&quot;</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    用于将该数字定向到矩形包中。在一个庞大而复杂的系统中可能存在许多层级，每一层均通过通用操作与下一层接口。当数据对象向下传递时，用于将其定向到相应包的外层标签被剥离（通过应用
    <SCHEMEINLINE>contents</SCHEMEINLINE>），而下一层标签（如果有）将变得可见以用于进一步分发。
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.7" SRC="img_original/ch2-Z-G-65.svg"></FIGURE>
          <CAPTION>
	    以矩形形式表示的 <LATEXINLINE>$3+4i$</LATEXINLINE>。
	  </CAPTION>
          <LABEL NAME="fig:complex-number-structure_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SRC="img_javascript/ch2-Z-G-65.svg"></FIGURE>
          <CAPTION>
	    以矩形形式表示的 <LATEXINLINE>$3+4i$</LATEXINLINE>。
	  </CAPTION>
          <LABEL NAME="fig:complex-number-structure"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

   
  <TEXT>
    在上述包中，我们使用了
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    和其他算术
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    完全与原始编写相同。一旦这些声明成为不同安装
    <SPLITINLINE>
      <SCHEME>过程,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    的内部部分，它们便不再需要相互区分的名称：我们可以仅在两个包中简单地将它们命名为 <SCHEMEINLINE>add</SCHEMEINLINE>,
    <SCHEMEINLINE>sub</SCHEMEINLINE>, <SCHEMEINLINE>mul</SCHEMEINLINE> 和
    <SCHEMEINLINE>div</SCHEMEINLINE>。
  </TEXT>

  <EXERCISE>
  <TEXT>
    Louis Reasoner 尝试计算表达式
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    其中
  </TEXT>
<SCHEMEINLINE>z</SCHEMEINLINE>
  <TEXT>
    是图中所示的对象
    <SPLITINLINE>
      <SCHEME>
	    图<SPACE></SPACE><REF NAME="fig:complex-number-structure_scheme"></REF>.
      </SCHEME>
      <JAVASCRIPT>
	    图<SPACE></SPACE><REF NAME="fig:complex-number-structure"></REF>.
      </JAVASCRIPT>
    </SPLITINLINE>
    令他惊讶的是，答案却不是 
  </TEXT>
<LATEXINLINE>$5$</LATEXINLINE>
    他收到了来自
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>，</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    的错误信息，提示没有针对该操作的方法
<SCHEMEINLINE>magnitude</SCHEMEINLINE> 在这些类型上
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(复数)</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(&quot;复数&quot;)</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    他向 Alyssa P. Hacker 展示了这一交互过程，她说 <QUOTE>问题在于，复数选择器从未为
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>复数</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>&quot;复数&quot;</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    数定义，而只为
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>极坐标</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>&quot;polar&quot;</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>直角坐标</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>&quot;rectangular&quot;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    数定义。要使其工作，你只需在
    <SCHEMEINLINE>复数</SCHEMEINLINE>
    包中添加以下内容：</QUOTE>
<SNIPPET CHAP="4">
      <NAME>use_generic_magnitude</NAME>
      <REQUIRES>install_complex_package_usage</REQUIRES>
      <REQUIRES>actually_install_complex_package</REQUIRES>
      <EXAMPLE>use_generic_magnitude_example</EXAMPLE>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(put &apos;real-part &apos;(complex) real-part)
(put &apos;imag-part &apos;(complex) imag-part)
(put &apos;magnitude &apos;(complex) magnitude)
(put &apos;angle &apos;(complex) angle)
      </SCHEME>
      <JAVASCRIPT>
put(&quot;real_part&quot;, list(&quot;complex&quot;), real_part);
put(&quot;imag_part&quot;, list(&quot;complex&quot;), imag_part);
put(&quot;magnitude&quot;, list(&quot;complex&quot;), magnitude);
put(&quot;angle&quot;,     list(&quot;complex&quot;), angle);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>use_generic_magnitude_example</NAME>
      <EXAMPLE>use_generic_magnitude_example</EXAMPLE>
      <JAVASCRIPT>
const z = make_complex_from_real_imag(3, 4);

magnitude(z);
      </JAVASCRIPT>
    </SNIPPET>详细描述为何这个方法能够奏效。例如，跟踪评估表达式时调用的所有
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的过程，其中
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
<SCHEMEINLINE>z</SCHEMEINLINE> 是下列图中所示的对象
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE></SPACE><REF NAME="fig:complex-number-structure_scheme"></REF>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE></SPACE><REF NAME="fig:complex-number-structure"></REF>.
      </JAVASCRIPT>
    </SPLITINLINE>
    特别是，调用了多少次
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    函数？每种情况下分别调度到哪个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ？
    <SOLUTION>
      将上述代码行添加到包中会展开
      <SCHEMEINLINE>z</SCHEMEINLINE>，而这些代码行起到了传递的作用。
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      将被调用两次。我们将用替换模型跟踪程序的求值过程。
      <SNIPPET EVAL="no">
        <JAVASCRIPT>
magnitude(z);
apply_generic(&quot;magnitude&quot;, list(z));
// 在这种情况下：
// type_tags = map(type_tag, list(z))
// 计算结果为：
// type_tags = list(&quot;复数&quot;);
// 且
// fun = get(&quot;magnitude&quot;, list(&quot;复数&quot;));
// 由于添加了
// put(&quot;magnitude&quot;, list(&quot;复数&quot;), magnitude);
// 因此 fun = magnitude;
apply(magnitude, map(contents, list(z)));
apply(magnitude, pair(&quot;rectangular&quot;, pair(3, 4)));
magnitude(pair(&quot;rectangular&quot;), pair(3, 4));
apply_generic(&quot;magnitude&quot;, list(pair(&quot;rectangular&quot;), pair(3, 4)));
// type_tags = map(type_tag, list(z)) 的计算结果为 list(&quot;矩形&quot;)
// fun = get(&quot;magnitude&quot;, list(&quot;矩形&quot;)) 的计算结果为
// z =&gt; math_sqrt(square(real_part(z)) + square(imag_part(z)))
// 即 z =&gt; math_sqrt(square(head(z)) + square(tail(z)))
apply(fun, map(contents, list(pair(&quot;rectangular&quot;), pair(3, 4))));
apply(fun, pair(3, 4));
(z =&gt; math_sqrt(square(head(z)) + square(tail(z))))(pair(3, 4));
math_sqrt(square(head(pair(3, 4))) + square(tail(pair(3, 4))));
...
math_sqrt(square(3) + square(4));
...
math_sqrt(9 + 16);
math_sqrt(25);
5
        </JAVASCRIPT>
        <SCHEME>
;;*** 使用替换规则：
(magnitude z)

;;** 第一次调用 apply-generic：
(apply-generic &apos;magnitude z)
;; 其中 z 是包含符号 &apos;complex 的整个对象。

;;回顾
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
            &quot;这些类型没有对应的方法 -- APPLY-GENERIC&quot;
            (list op type-tags)))))
;; 替换
(let ((type-tags &apos;(complex))  ... ))
(let ((proc (get op &apos;(complex))) ... ))
(let ((proc magnitude) ... ))
(if proc...  ;; 真
    (apply magnitude (contents z))
    (magnitude z-prime)) ;; 其中 z-prime 是原始对象的内容（即 cdr），也就是去掉 &apos;complex 后的部分。

;;** 第二次调用 apply-generic：
(let ((type-tags &apos;(rectangular)) ... ))
(let ((proc (get op &apos;(rectangular))) ... ))
(let ((proc (get &apos;magnitude &apos;(rectangular))) ... ))
(let ((proc (lambda (z) (sqrt (+ (square (real-part z))
                                 (square (imag-part z))))))  ... )))
(if proc... ;; 真
    (apply (lambda (z) (sqrt (+ (square (real-part z))
                                 (square (imag-part z))))) (contents z-prime))
    (sqrt (+ (square 3) (square 4)))
    5
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
<LABEL NAME="ex:2_77"></LABEL>
  </EXERCISE>

   
  <EXERCISE> 
    内部的
    <INDEX>JavaScript<SUBINDEX>内部类型系统</SUBINDEX></INDEX>
    <INDEX>数据类型<SUBINDEX>在 JavaScript 中</SUBINDEX></INDEX>
    <INDEX><USE>is_number</USE>（基本函数）<SUBINDEX>数据类型和</SUBINDEX></INDEX>
    <INDEX><USE>is_string</USE>（基本函数）<SUBINDEX>数据类型和</SUBINDEX></INDEX>
    <INDEX><USE>attach_tag</USE><SUBINDEX>使用 JavaScript 数据类型</SUBINDEX></INDEX>
    <INDEX><USE>type_tag</USE><SUBINDEX>使用 JavaScript 数据类型</SUBINDEX></INDEX>
    <INDEX><USE>contents</USE><SUBINDEX>使用 JavaScript 数据类型</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    在
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>javascript_number</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    包中，本质上不过是对基本
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>+</SCHEMEINLINE>、<SCHEMEINLINE>-</SCHEMEINLINE>等的调用。由于我们的类型标签系统要求每个数据对象都必须附有一个类型，因此不能直接使用语言的原始基本函数。实际上，所有
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    实现都有一个内部类型系统，用于它们自身的内部操作。像
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>symbol?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_string</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    这样的基本谓词决定了数据对象是否属于特定类型。请修改来自章节<SPACE></SPACE><REF NAME="sec:manifest-types"></REF>中
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>type-tag</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>contents</SCHEMEINLINE>以及
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>attach-tag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>attach_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的定义，使我们的泛型系统能利用
    <SPLITINLINE>
      <SCHEME>Scheme的</SCHEME>
      <JAVASCRIPT>JavaScript的</JAVASCRIPT>
    </SPLITINLINE>
    内部类型系统。也就是说，除了一点之外，系统的运行方式应与以前相同，即普通数字应仅表示为
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    数字，而不是表示为对，其中
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    为
    <SPLITINLINE>
      <SCHEME>符号 <SCHEMEINLINE>scheme-number</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	string <JAVASCRIPTINLINE>&quot;javascript_number&quot;</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:internal-type-system"></LABEL>
    <SOLUTION>
      以下修改将利用 JavaScript 数字实现：
      <SNIPPET>
        <JAVASCRIPT>
function attach_tag(type_tag, contents) {
  return is_number(contents) 
    ? pair(&quot;javascript_number&quot;, contents)
    : pair(type_tag, contents);
}
function type_tag(datum) {
  return is_number(datum)
    ? &quot;javascript_number&quot;
    : is_pair(datum)
      ? head(datum)
      : error(datum, &quot;bad tagged datum -- type_tag&quot;);
}
function contents(datum) {
  return is_number(datum)
    ? datum
    : is_pair(datum)
      ? tail(datum)
      : error(datum, &quot;bad tagged datum -- contents&quot;);
}
        </JAVASCRIPT>
        <SCHEME>
(define (attach-tag type-tag contents) 
  (if (number? contents) 
      contents 
      (cons type-tag contents))) 

(define (type-tag datum) 
  (cond ((number? datum) &apos;scheme-number) 
        ((pair? datum) (car datum)) 
        (else (error &quot;Wrong datum -- TYPE-TAG&quot; datum)))) 

(define (contents datum) 
  (cond ((number? datum) datum) 
        ((pair? datum) (cdr datum)) 
        (else (error &quot;Wrong datum -- CONTENTS&quot; datum)))) 
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    定义一个通用相等谓词
    <INDEX><USE>is_equal</USE>（通用谓词）</INDEX>
    <INDEX>相等<SUBINDEX><ORDER>通用</ORDER>在通用算术系统中</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equ?</SCHEMEINLINE></SCHEME><JAVASCRIPT>
      <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    用于测试两个数字的相等性，并将其安装在通用算术包中。该操作应适用于普通数字、有理数和复数。
    <LABEL NAME="ex:equ?"></LABEL>
    <SOLUTION>
      <SNIPPET EVAL="no">
	<JAVASCRIPT>
// 由 GitHub 用户 clean99 提供

function is_equal(x, y) {
    return apply_generic(&quot;is_equal&quot;, list(x, y));
}

function install_javascript_number_package() {
    // ...

    put(&quot;is_equal&quot;, list(&quot;javascript_number&quot;, &quot;javascript_number&quot;),
           (x, y) =&gt; x === y);

    // ...
}

function install_rational_package() {
    // ...

    function is_equal(x, y) {
        return numer(x) * denom(y) === numer(y) * denom(x);
    }

    put(&quot;is_equal&quot;, list(&quot;rational&quot;, &quot;rational&quot;), is_equal);

    // ...
}

function install_complex_package() {
    // ...

    function is_equal(z1, z2) {
        return real_part(z1) === real_part(z2)
               ? imag_part(z1) === imag_part(z2)
               : false;
    }

    put(&quot;is_equal&quot;, list(&quot;complex&quot;, &quot;complex&quot;),
            is_equal);

    //...
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    定义一个通用谓词
    <INDEX><USE>is_equal_to_zero</USE> (通用)</INDEX>
    <INDEX>零测试 (通用)</INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>=zero?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_equal_to_zero</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    定义一个操作，用于测试其参数是否为零，并将其安装到通用算术包中。该操作应适用于普通数字、有理数以及复数。
    <LABEL NAME="ex:=zero?"></LABEL>
    <SOLUTION>
      <SNIPPET EVAL="no">
	<JAVASCRIPT>
// 由 GitHub 用户 clean99 提供

function is_equal_to_zero(x) {
    return apply_generic(&quot;is_equal_to_zero&quot;, list(x));
}

function install_javascript_number_package() {
    // ...

    put(&quot;is_equal_to_zero&quot;, &quot;javascript_number&quot;,
          x =&gt; x === 0);

    // ...
}

function install_rational_package() {
    // ...

    function is_equal_to_zero(x) {
        return numer(x) === 0;
    }

    put(&quot;is_equal_to_zero&quot;, &quot;rational&quot;,
           is_equal_to_zero);

    // ...
}

function install_complex_package() {
    // ...

    function is_equal_to_zero(z) {
        return real_part(z) === 0
               ? imag_part(z) === 0
               : false;
    }

    put(&quot;is_equal_to_zero&quot;, &quot;complex&quot;,
            is_equal_to_zero);

    //...
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <INDEX>通用算术操作<CLOSE></CLOSE></INDEX>

</SUBSECTION>
