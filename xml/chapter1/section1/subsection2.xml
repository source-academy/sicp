<SUBSECTION>
  <NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"/>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
    <INDEX>naming<SUBINDEX>of computational objects</SUBINDEX></INDEX>
    names to refer to computational
    <SPLITINLINE>
      <SCHEME>objects.</SCHEME>
      <PYTHON>objects, and our first such means are <EM>constants</EM>.
      </PYTHON>
    </SPLITINLINE>
    <COMMENT>The second such means are variables, which are syntactically
    distinct from constants in JavaScript and which are introduced in
    chapter 3.</COMMENT>
    We say that the
    <INDEX>primitive expression<SUBINDEX>name of constant</SUBINDEX></INDEX>
    name identifies a
    <INDEX>constant (in JavaScript)</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>variable</EM></SCHEME>
      <PYTHON>constant</PYTHON>
    </SPLITINLINE>
    whose
    <SPLITINLINE>
      <SCHEME>
	<INDEX>variable<SUBINDEX>value of</SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
	<INDEX>constant (in JavaScript)<SUBINDEX>value of</SUBINDEX></INDEX>
      </PYTHON>
    </SPLITINLINE>
    <EM>value</EM> is the object.
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	In the Scheme dialect of Lisp, we name things with
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	In JavaScript, we name constants with 
	<INDEX>constant declaration</INDEX>
	<INDEX>declaration<SUBINDEX><ORDER>constant</ORDER>of constant (<PYTHONINLINE>const</PYTHONINLINE>)</SUBINDEX></INDEX>
	<INDEX>syntactic forms<SUBINDEX>constant declaration</SUBINDEX></INDEX>
	<INDEX><USE>const</USE> (keyword)</INDEX>
	<INDEX>keywords<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>semicolon (<PYTHONINLINE>;</PYTHONINLINE>)<SUBINDEX>ending statement</SUBINDEX></INDEX>
	<EM>constant declarations</EM>.	
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <PYTHON>
const size = 2;
      </PYTHON>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>.<FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"/>
    <SPLITINLINE>
      <SCHEME>    
        In this book, we do not
        <INDEX><DECLARATION>define</DECLARATION><SUBINDEX>value of</SUBINDEX></INDEX>
        <INDEX>unspecified values<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
	show the interpreter<APOS/>s response to
        evaluating definitions, since this is highly
        implementation-dependent.
      </SCHEME>
      <PYTHON>
        In this book, we do not show the interpreter<APOS/>s response to
        evaluating programs that end with declarations, since this might depend
        on previous statements. See exercise<SPACE/><REF NAME="ex:value_producing"/>
	for details.
      </PYTHON>
    </SPLITINLINE></FOOTNOTE>
    Once the name <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <PYTHON>
size;
      </PYTHON>
      <PYTHON_OUTPUT>
2
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <PYTHON>
5 * size;
      </PYTHON>
      <PYTHON_OUTPUT>
10
      </PYTHON_OUTPUT>
    </SNIPPET>
  </TEXT>
  <SPLIT>
    <PYTHON>
      <TEXT>
	<WEB_ONLY>
          The JavaScript interpreter needs to execute the constant
          declaration for <PYTHONINLINE>size</PYTHONINLINE>
          before the name <PYTHONINLINE>size</PYTHONINLINE> can be used
          in an expression. In this online book, the statements that need to be
          evaluated before a new statement are omitted for brevity. However,
	  to see and play with the program, you can click on it. The
	  program then appears in a new
	  browser tab, with the option <QUOTE>Show Dependencies</QUOTE>.
	  Thus, as a result of clicking on
          <SNIPPET>
            <REQUIRES>var_size</REQUIRES>
            <PYTHON>
5 * size;
            </PYTHON>
          </SNIPPET>
          a new tab appears that contains the program, and after clicking
	   <QUOTE>Show Dependencies</QUOTE>, you see:
          <SNIPPET>
	    <EXPECTED>10</EXPECTED>
            <PYTHON>
const size = 2;
5 * size;
            </PYTHON>
          </SNIPPET>
	</WEB_ONLY>
      </TEXT>
    </PYTHON>
  </SPLIT>
  <TEXT>
    Here are further examples of the use of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>:
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>const</PYTHONINLINE>:
      </PYTHON>
    </SPLITINLINE>

    <SNIPPET>
      <NAME>pi</NAME>
      <SCHEME>
(define pi 3.14159)
      </SCHEME>
      <PYTHON>
const pi = 3.14159;
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <NAME>radius</NAME>
      <SCHEME>
(define radius 10)
      </SCHEME>
      <PYTHON>
const radius = 10;
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <NAME>pi_radius_radius</NAME>
      <EXPECTED>314.159</EXPECTED>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(* pi (* radius radius))
      </SCHEME>
      <SCHEMEOUTPUT>
314.159
      </SCHEMEOUTPUT>
      <PYTHON>
pi * radius * radius;
      </PYTHON>
      <PYTHON_OUTPUT>
314.159
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>circumference_definition</NAME>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(define circumference (* 2 pi radius))
      </SCHEME>
      <PYTHON>
const circumference = 2 * pi * radius;
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <EXPECTED>62.8318</EXPECTED>
      <NAME>circumference_use</NAME>
      <REQUIRES>circumference_definition</REQUIRES>
      <SCHEME>
circumference
      </SCHEME>
      <SCHEMEOUTPUT>
62.8318
      </SCHEMEOUTPUT>
      <PYTHON>
circumference;
      </PYTHON>
      <PYTHON_OUTPUT>
62.8318
      </PYTHON_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>means of abstraction<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
	<SCHEMEINLINE>Define</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	Constant
	<INDEX>means of abstraction<SUBINDEX>constant declaration as</SUBINDEX></INDEX>
	declaration
      </PYTHON>
    </SPLITINLINE>
    is our language<APOS/>s
    simplest means of abstraction, for it allows us to use simple names to
    refer to the results of compound operations, such as the
    <SCHEMEINLINE>circumference</SCHEMEINLINE> computed above.
    In general, computational objects may have very complex
    structures, and it would be extremely inconvenient to have to remember
    and repeat their details each time we want to use them.  Indeed,
    complex programs are constructed by building, step by step,
    computational objects of increasing complexity. The
    interpreter makes this step-by-step program construction particularly
    convenient because name-object associations can be created
    incrementally in successive interactions.  This feature encourages the
    <INDEX>incremental development of programs</INDEX>
    <INDEX>program<SUBINDEX>incremental development of</SUBINDEX></INDEX>
    incremental development and testing of programs and is largely
    responsible for the fact that a
    <INDEX>program<SUBINDEX>structure of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	Lisp
      </SCHEME>
      <PYTHON>
        JavaScript
      </PYTHON>
    </SPLITINLINE>
    program usually consists of a large
    number of relatively simple
    <SPLITINLINE>
      <SCHEME>
	procedures.
      </SCHEME>
      <PYTHON>
        functions.
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    It should be clear that the possibility of associating values with
    names and later retrieving them means that the interpreter must
    maintain some sort of memory that keeps track of the name-object
    pairs.  This memory is called the
    <INDEX>environment</INDEX>
    <EM>environment</EM>
    (more precisely the
    <SPLITINLINE>
      <SCHEME>
	<INDEX>global environment</INDEX>
	<EM>global environment</EM>,
      </SCHEME>
      <PYTHON>
	<INDEX>program environment</INDEX>
	<EM>program environment</EM>,
      </PYTHON>
    </SPLITINLINE>
    since we will see later that a
    computation may involve a number of different
    environments).<FOOTNOTE>Chapter<SPACE/><REF NAME="chap:state"></REF> will show that this notion of
    environment is crucial for understanding how the interpreter works.
    Chapter<SPACE/><REF NAME="chap:meta"></REF> will use environments for implementing
    interpreters.</FOOTNOTE>
  </TEXT>
</SUBSECTION>
