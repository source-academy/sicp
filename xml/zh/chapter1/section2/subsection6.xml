<SUBSECTION>

   <NAME>示例：素性测试</NAME> 

  <LABEL NAME="sec:primality"></LABEL>
   <INDEX>质数<SUBINDEX>测试<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX>质数<OPEN></OPEN></INDEX> 

   <TEXT>
    本节描述了两种检测整数 <LATEXINLINE>$n$</LATEXINLINE> 是否为质数的方法，一种算法的增长阶为 <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>，另一种为 <QUOTE>概率</QUOTE> 算法，增长阶为 <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>。本节末的练习建议基于这些算法进行编程项目。
  </TEXT> 

   <SUBHEADING>
    <NAME>寻找因数</NAME>
  </SUBHEADING> 

   <TEXT>
    自古以来，数学家们一直对素数相关的问题着迷，许多人致力于研究判定一个数是否为素数的方法。判定一个数是否为素数的一个方法是寻找这个数的因数。以下程序用于寻找给定数<SPACE></SPACE><LATEXINLINE>$n$</LATEXINLINE>的最小整数因数（大于1）。它以直接的方法实现，通过依次检测从2开始的整数是否能整除<LTEXINLINE>$n$&lt;/LATEXINLINE&gt;。
    <SNIPPET PAGE="50">
      <INDEX><DECLARATION>find_divisor</DECLARATION></INDEX>
      <INDEX><DECLARATION>divides</DECLARATION></INDEX>
      <INDEX><DECLARATION>smallest_divisor</DECLARATION></INDEX>
      <NAME>smallest_divisor_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>smallest_divisor_example</EXAMPLE>
      <SCHEME>
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))
      </SCHEME>
      <JAVASCRIPT>
function smallest_divisor(n) {
    return find_divisor(n, 2);
}
function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, test_divisor + 1);
}
function divides(a, b) {
    return b % a === 0;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="50" HIDE="yes">
      <NAME>smallest_divisor_example</NAME>
      <REQUIRES>smallest_divisor_definition</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(smallest-divisor 42)
      </SCHEME>
      <JAVASCRIPT>
smallest_divisor(42);
      </JAVASCRIPT>
    </SNIPPET>
  </LTEXINLINE></TEXT> 

   <TEXT>
    我们可以如下测试一个数是否为素数：
    <LATEXINLINE>$n$</LATEXINLINE> 是素数当且仅当
    <LATEXINLINE>$n$</LATEXINLINE> 是其自身的最小因数。
    <SNIPPET PAGE="50">
      <INDEX><DECLARATION>is_prime</DECLARATION></INDEX>
      <NAME>prime_definition</NAME>
      <REQUIRES>smallest_divisor_definition</REQUIRES>
      <EXAMPLE>prime_example</EXAMPLE>
      <SCHEME>
(define (prime? n)
  (= n (smallest-divisor n)))
      </SCHEME>
      <JAVASCRIPT>
function is_prime(n) {
    return n === smallest_divisor(n);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="50" HIDE="yes">
      <NAME>prime_example</NAME>
      <REQUIRES>prime_definition</REQUIRES>
      <EXPECTED>false</EXPECTED>
      <SCHEME>
(prime? 42)
      </SCHEME>
      <JAVASCRIPT>
is_prime(42);
      </JAVASCRIPT>
    </SNIPPET>

  </TEXT> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    <SCHEME><SCHEMEINLINE>find-divisor</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>find_divisor</JAVASCRIPTINLINE></JAVASCRIPT>
    的终止测试基于这样一个事实：如果 <LATEXINLINE>$n$</LATEXINLINE> 不是素数，它一定有一个不大于 <LATEXINLINE>$\sqrt{n}$</LATEXINLINE> 的因数。<FOOTNOTE>如果 <LATEXINLINE>$d$</LATEXINLINE> 是 <LATEXINLINE>$n$</LATEXINLINE> 的因数，那么 <LATEXINLINE>$n/d$</LATEXINLINE> 也是因数。但 <LATEXINLINE>$d$</LATEXINLINE> 和 <LATEXINLINE>$n/d$</LATEXINLINE> 不可能都大于 <LATEXINLINE>$\sqrt{n}$</LATEXINLINE>。</FOOTNOTE>这意味着算法只需要测试介于 1 和 <LATEXINLINE>$\sqrt{n}$</LATEXINLINE> 之间的因数。因此，识别 <LATEXINLINE>$n$</LATEXINLINE> 为素数所需的步骤数增长的阶为 <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>。
  </TEXT> 

   <SUBHEADING>
    <NAME>费马测试</NAME>
  </SUBHEADING> 

   <TEXT>
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 费马测试基于数论中的一个结果，称为
    <INDEX>费马素性测试<OPEN></OPEN></INDEX>
    <INDEX>素数<SUBINDEX>费马测试 for<OPEN></OPEN></SUBINDEX></INDEX>
    费马小定理。<FOOTNOTE>皮埃尔
    <INDEX><ORDER>费马</ORDER>皮埃尔·德·费马</INDEX>
    （1601<ENDASH></ENDASH>1665）被认为是现代
    <INDEX>数论</INDEX>
    的创始人之一。他获得了许多重要的数论结果，但他通常只公布结果，而不提供证明。
    <INDEX><ORDER>费马小定理</ORDER>费马小定理的证明</INDEX>
    费马小定理最初是在他1640年写的一封信中提出的。第一个公开的证明由
    <INDEX>欧拉，莱昂哈德<SUBINDEX>费马小定理的证明</SUBINDEX></INDEX>
    欧拉于1736年给出（之前在
    <INDEX>莱布尼茨，巴伦·戈特弗里德·威廉·冯<SUBINDEX>费马小定理的证明</SUBINDEX></INDEX>
    莱布尼茨的未公开手稿中发现了相同的证明）。费马最著名的结果之一——
    被称为费马大定理——于1637年写在他那本
    <EM>算术</EM>（是三世纪希腊数学家
    <INDEX>丢番图的<EM>算术</EM>，费马的副本</INDEX>
    丢番图的著作）的边缘，并附有批注<QUOTE>我发现了一个真正卓越的证明，但此边空太小，无法容纳。</QUOTE>。寻找费马大定理的证明成为数论中最著名的挑战之一。1995年
    <INDEX>怀尔斯，安德鲁</INDEX>
    普林斯顿大学的安德鲁·怀尔斯最终给出了完整的解决方案。</FOOTNOTE>

    <BLOCKQUOTE>
      <B>费马小定理:</B> 
      <INDEX><ORDER>费马小定理</ORDER>费马小定理</INDEX>
      如果 <LATEXINLINE>$n$</LATEXINLINE> 是素数，且 
      <LATEXINLINE>$a$</LATEXINLINE> 是任何小于 
      <LATEXINLINE>$n$</LATEXINLINE> 的正整数，那么 <LATEXINLINE>$a$</LATEXINLINE> 的 
      <LATEXINLINE>$n$</LATEXINLINE> 次幂模
      <LATEXINLINE>$n$</LATEXINLINE> 余数与
      <LATEXINLINE>$a$</LATEXINLINE> 相同。
    </BLOCKQUOTE>
    （两个数被称为
    <INDEX>同余于 <LATEXINLINE>$n$</LATEXINLINE></INDEX>
    <EM>模同余</EM>
    <LATEXINLINE>$n$</LATEXINLINE> 是指当被
    <LATEXINLINE>$n$</LATEXINLINE> 除时余数相同。一个数
    <LATEXINLINE>$a$</LATEXINLINE> 除以 
    <LATEXINLINE>$n$</LATEXINLINE> 的余数也称为
    <INDEX>余数<SUBINDEX>模 <LATEXINLINE>$n$</LATEXINLINE></SUBINDEX></INDEX>
    <INDEX>模 <LATEXINLINE>$n$</LATEXINLINE></INDEX>
    <EM>余数</EM> <LATEXINLINE>$a$</LATEXINLINE> <EM>模</EM>
    <LATEXINLINE>$n$</LATEXINLINE>，或简称为 <LATEXINLINE>$a$</LATEXINLINE> 
    <EM>模</EM> <LATEXINLINE>$n$</LATEXINLINE>。)
  </TEXT> 

   <TEXT>
    如果 <LATEXINLINE>$n$</LATEXINLINE> 不是素数，那么通常大多数小于
    <LATEXINLINE>$n$</LATEXINLINE> 的数 <LATEXINLINE>$a$</LATEXINLINE> 不会满足上述关系。 这就产生了以下的素性测试算法：
    给定一个数字 <LATEXINLINE>$n$</LATEXINLINE>，选择一个
    <INDEX>随机数生成器<SUBINDEX><ORDER>素性</ORDER>在素性测试中</SUBINDEX></INDEX>
    随机数 <LATEXINLINE>$a &lt; n$</LATEXINLINE> 并计算
    <LATEXINLINE>$a^n$</LATEXINLINE> 模
    <LATEXINLINE>$n$</LATEXINLINE> 的余数。 如果结果不等于
    <LATEXINLINE>$a$</LATEXINLINE>，那么 <LATEXINLINE>$n$</LATEXINLINE> 肯定不是素数。 如果结果等于
    <LATEXINLINE>$a$</LATEXINLINE>，那么 <LATEXINLINE>$n$</LATEXINLINE> 很可能是素数。 现在再选择另一个随机数
    <LATEXINLINE>$a$</LATEXINLINE>，用相同的方法测试它。 如果它也满足该等式，那么我们可以更加确信
    <LATEXINLINE>$n$</LATEXINLINE> 是素数。 通过尝试更多的
    <LATEXINLINE>$a$</LATEXINLINE> 值，我们可以提高对结果的置信度。 该算法称为费马测试。
  </TEXT> 

   <TEXT>
    为了实现费马测试，我们需要一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算模另一个数的
    <INDEX>指数运算<SUBINDEX>模 <LATEXINLINE>$n$</LATEXINLINE></SUBINDEX></INDEX>
    指数：
    <SNIPPET PAGE="51">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>expmod_definition</NAME>
      <EXAMPLE>expmod_example</EXAMPLE>
      <REQUIRES>even_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (square (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))        
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
           ? square(expmod(base, exp / 2, m)) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="51" HIDE="yes">
      <NAME>expmod_example</NAME>
      <REQUIRES>expmod_definition</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(expmod 4 3 5)
      </SCHEME>
      <JAVASCRIPT>
expmod(4, 3, 5);
      </JAVASCRIPT>
    </SNIPPET>
    这与第
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    篇<SPACE></SPACE><REF NAME="sec:exponentiation"></REF>中的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    非常相似。它使用连乘平方法，因此步骤数随指数的增长呈对数增长。<FOOTNOTE>当指数
    <LATEXINLINE>$e$</LATEXINLINE> 大于 1 时的化简步骤基于这样一个事实：对于任意整数
    <LATEXINLINE>$x$</LATEXINLINE>、<LATEXINLINE>$y$</LATEXINLINE> 和
    <LATEXINLINE>$m$</LATEXINLINE>，计算 <LATEXINLINE>$x$</LATEXINLINE> 乘
    <LATEXINLINE>$y$</LATEXINLINE> 对
    <LATEXINLINE>$m$</LATEXINLINE> 取模的余数，可以通过分别计算
    <LATEXINLINE>$x$</LATEXINLINE> 对
    <LATEXINLINE>$m$</LATEXINLINE> 的余数和
    <LATEXINLINE>$y$</LATEXINLINE> 对
    <LATEXINLINE>$m$</LATEXINLINE> 的余数，将它们相乘，然后对结果再次取模
    <LATEXINLINE>$m$</LATEXINLINE> 来实现。例如，当
    <LATEXINLINE>$e$</LATEXINLINE> 为偶数时，我们先计算
    <LATEXINLINE>$b^{e/2}$</LATEXINLINE> 对
    <LATEXINLINE>$m$</LATEXINLINE> 取模的余数，将其平方，再对
    <LATEXINLINE>$m$</LATEXINLINE> 取模。该技术的优势在于计算过程中我们永远不需要处理大于
    <LATEXINLINE>$m$</LATEXINLINE> 很多数量级的数。（参见练习<SPACE></SPACE><REF NAME="ex:Alyssas-expmod"></REF>。）</FOOTNOTE>
  </TEXT> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    费马测试通过随机选择一个数
    <LATEXINLINE>$a$</LATEXINLINE>，范围在 1 到
    <LATEXINLINE>$n-1$</LATEXINLINE>（含）之间，并检查
    <LATEXINLINE>$a$</LATEXINLINE> 的
    <LATEXINLINE>$n$</LATEXINLINE> 次方对
    <LATEXINLINE>$n$</LATEXINLINE> 取模的余数是否等于
    <LATEXINLINE>$a$</LATEXINLINE>。随机数
    <LATEXINLINE>$a$</LATEXINLINE> 是用
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>random</SCHEMEINLINE> 过程 
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE> 原始函数 
      </JAVASCRIPT>
    </SPLITINLINE>
    选取的，我们假设它作为 Scheme 的原始函数被包含。 
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>random</USE> (原始函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>random</USE></SUBINDEX></INDEX>
        <SCHEMEINLINE>random</SCHEMEINLINE>
	返回一个非负整数，小于其输入整数。因此，为了得到一个介于 1 和
	<LATEXINLINE>$n-1$</LATEXINLINE> 之间的随机数，我们用
	输入
	<LATEXINLINE>$n-1$</LATEXINLINE> 调用
	<SCHEMEINLINE>random</SCHEMEINLINE> 并将结果加 1：
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><USE>math_random</USE> (原始函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_random</USE><ECMA>Math.random</ECMA></SUBINDEX></INDEX>
	该函数返回一个小于 1 的非负数。因此，为了得到一个介于 1 到
	<LATEXINLINE>$n-1$</LATEXINLINE> 的随机数，我们将
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE> 的返回值乘以
	<LATEXINLINE>$n-1$</LATEXINLINE>，利用原始函数
	<INDEX><USE>math_floor</USE> (原始函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_floor</USE><ECMA>Math.floor</ECMA></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>math_floor</JAVASCRIPTINLINE> 向下取整后加 1：
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 

   <TEXT>
    以下 
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    运行测试若干次，由参数指定。如果每次测试均成功，其值为真，否则为假。
    <SNIPPET PAGE="52" POSTPADDING="no">
      <INDEX><DECLARATION>fast_is_prime</DECLARATION></INDEX>
      <NAME>fast_prime_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>expmod_definition</REQUIRES>
      <REQUIRES>random_definition</REQUIRES>
      <REQUIRES>fermat_test_definition</REQUIRES>
      <EXAMPLE>fast_prime_example</EXAMPLE>
      <SCHEME>
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))
      </SCHEME>
      <JAVASCRIPT>
function fast_is_prime(n, times) {
    return times === 0
           ? true
           : fermat_test(n)
           ? fast_is_prime(n, times - 1)
           : false;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="52" HIDE="yes">
      <NAME>fast_prime_example</NAME>
      <REQUIRES>fast_prime_definition</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(fast-prime? 97 3)
      </SCHEME>
      <JAVASCRIPT>
fast_is_prime(97, 3);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT> 

   <SUBHEADING>
    <NAME>概率方法</NAME>
  </SUBHEADING> 

   <INDEX>概率算法<OPEN></OPEN></INDEX> 
   <INDEX>算法<SUBINDEX>概率算法<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    费马测试的性质不同于大多数熟悉的算法，后者计算出的答案是保证正确的。而这里得到的答案只是可能正确的。更准确地说，如果<N>$n$</N>在费马测试中失败，我们可以确定<N>$n$</N>不是素数。但<N>$n$</N>通过测试虽然是一个极其有力的指示，但仍不能保证<N>$n$</N>是素数。我们希望说的是，对于任何数字<N>$n$</N>，如果我们进行足够多次的测试并发现<N>$n$</N>总是通过测试，那么我们素性测试的错误概率可以被降低到任意小的程度。
  </TEXT> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
   <TEXT>
    不幸的是，这个断言并不完全正确。确实存在一些数字能够欺骗费马测试：这些数字<N>$n$</N>不是素数，但却具有这样一个性质，即对于所有小于<N>$n$</N>的整数<N>$a$</N>，<N>$a^n$</N>模<N>$n$</N>同余于<N>$a$</N>。这种数字极其罕见，因此费马测试在实践中是相当可靠的。<FOOTNOTE>
    <LABEL NAME="foot:carmichaelfn"></LABEL>
    能够欺骗费马测试的数字称为
    <INDEX>卡迈克尔数</INDEX>
    <EM>卡迈克尔数</EM>，除了它们极其罕见之外，人们对它们知之甚少。在一亿以下共有255个卡迈克尔数。最小的几个包括561、1105、1729、2465、2821和6601。在对随机选择的非常大数字进行素性测试时，偶然遇到能欺骗费马测试的数字的概率甚至比
    <INDEX>宇宙射线</INDEX>
    宇宙射线导致计算机在执行一个<QUOTE>正确</QUOTE>算法时产生错误的概率还低。将算法认为因第一种原因而不充分，但因第二种原因却充分，体现了
    <INDEX>数学与工程学的区别</INDEX>
    数学与工程学的区别。
  </FOOTNOTE>
    费马测试有一些变体不会被欺骗。在这些测试中，与费马方法一样，人们通过选择一个小于<N>$n$</N>的随机整数<N>$a$</N>并检查一个依赖于<N>$n$</N>和<N>$a$</N>的条件来测试整数<N>$n$</N>的素性。（参见
    习题<SPACE></SPACE><REF NAME="ex:miller-rabin"></REF>，该习题提供了此类测试的例子。）另一方面，与费马测试不同的是，可以证明，对于任何<N>$n$</N>，除非<N>$n$</N>是素数，否则大多数小于<N>$n$</N>的整数<N>$a$</N>不满足该条件。因此，如果<N>$n$</N>对某个随机选择的<N>$a$</N>通过了测试，那么<N>$n$</N>为素数的概率超过一半。如果<N>$n$</N>对两个随机选择的<N>$a$</N>都通过了测试，那么<N>$n$</N>为素数的概率超过四分之三。通过用越来越多随机选择的<N>$a$</N>运行该测试，我们可以将错误概率降低到任意小的程度。
    <INDEX>费马素性测试</INDEX>
    <INDEX>素数&lt;与费马测试相关&gt;</INDEX>
  </TEXT> 

   <TEXT>
    存在一种测试，可以证明其错误概率可以任意接近零，这激发了人们对这类算法的兴趣，这类算法被称为
    <EM>概率算法</EM>。这一领域有大量的研究活动，概率算法已被成功应用于许多领域。<FOOTNOTE>
    概率素性测试最引人注目的应用之一是应用于
    <INDEX>密码学</INDEX>
    密码学领域。
    <SPLITINLINE>
      <SCHEME>
	虽然现在分解任意一个200位数在计算上是不可行的，但这样的数的素性可以用费马测试在几秒钟内检验。
      </SCHEME>
      <JAVASCRIPT>
	截至2021年，分解任意一个300位数在计算上仍然不可行，但这样的数的素性可以用费马测试在几秒钟内检验。
      </JAVASCRIPT>
    </SPLITINLINE>
    这一事实构成了一种技术的基础，该技术用于构造
    <QUOTE>不可破解的密码</QUOTE>，由
    <INDEX>罗纳德·L·里维斯特</INDEX>
    里维斯特，
    <INDEX>阿迪·沙密尔</INDEX>
    沙密尔，和
    <INDEX>伦纳德·阿德曼</INDEX>
    阿德曼（1977年）提出。由此产生的
    <INDEX>RSA算法</INDEX>
    <EM>RSA算法</EM>已成为增强电子通信安全的广泛使用的技术。正因如此及相关的发展，
    <INDEX>素数<SUBINDEX>密码学与</SUBINDEX></INDEX>
    曾被认为是仅仅为自身研究的“纯”数学顶峰的素数，现在被发现对密码学、电子资金转账和信息检索具有重要的实际应用。</FOOTNOTE>
  </TEXT> 

   <EXERCISE>
    <LABEL NAME="ex:use-smallest-divisor"></LABEL> 
    使用
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>smallest-divisor</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    找出下列数字的最小除数：199，1999，19999。
    <SOLUTION>
      <SNIPPET>
	<NAME>smallest_division_solution</NAME>
	<EXPECTED>199</EXPECTED>
	<REQUIRES>smallest_divisor_definition</REQUIRES>
	<JAVASCRIPT>
smallest_divisor(199);
// smallest_divisor(1999);
// smallest_divisor(19999);
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
  <EXERCISE>
    <LABEL NAME="ex:search-for-primes"></LABEL>
     <SPLITINLINE>
      <SCHEME>
        大多数 Lisp 实现包含一个原语，称为 
        <INDEX><DECLARATION>运行时</DECLARATION></INDEX> 
        <INDEX><DECLARATION>原语 <SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>（标记为<EM>ns</EM>的内容不属于 IEEE Scheme 标准）</DECLARATION><SUBINDEX><ORDER>运行时</ORDER><SCHEMEINLINE>runtime</SCHEMEINLINE> (<EM>ns</EM>)</SUBINDEX></INDEX>
        <SCHEMEINLINE>运行时</SCHEMEINLINE>
        ，它返回一个整数，指明系统运行的时间长度（例如，以微秒为单位）。 以下
        <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE>
        过程，
      </SCHEME>
      <JAVASCRIPT>
        假设有一个原语函数
        <INDEX><USE>get_time</USE>（原语函数）</INDEX>
        <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>get_time</USE><ECMA>new Date().getTime</ECMA></SUBINDEX></INDEX>
        <JAVASCRIPTINLINE>get_time</JAVASCRIPTINLINE>
        无参数，返回自 1970 年 1 月 1 日星期四 UTC 时间 00:00:00 以来经过的毫秒数。<FOOTNOTE>此日期称为
        <INDEX>UNIX<SUBINDEX>纪元</SUBINDEX></INDEX>
        <EM>UNIX 纪元</EM>，并且是处理 UNIX
        <LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> 操作系统中时间函数规定的一部分。</FOOTNOTE>
        以下
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
        函数，
      </JAVASCRIPT>
    </SPLITINLINE>
    当传入一个整数时 <LATEXINLINE>$n$</LATEXINLINE>，打印<LATEXINLINE>$n$</LATEXINLINE>并检查是否<LATEXINLINE>$n$</LATEXINLINE>是素数。如果<LATEXINLINE>$n$</LATEXINLINE> 是素数，<SPLITINLINE> <SCHEME>过程</SCHEME> <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 打印三个星号<SPLITINLINE><JAVASCRIPT><FOOTNOTE>原始函数 <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 返回其参数，但也打印它。在这里 <JAVASCRIPTINLINE>&quot;</JAVASCRIPTINLINE><FIXED_SPACE></FIXED_SPACE><JAVASCRIPTINLINE>***</JAVASCRIPTINLINE><FIXED_SPACE></FIXED_SPACE><JAVASCRIPTINLINE>&quot;</JAVASCRIPTINLINE> 是一个 <EM>字符串</EM>，一个字符序列，我们将其作为参数传递给 <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 函数。章节<SPACE></SPACE><REF NAME="sec:strings"></REF> 更详细地介绍了字符串。</FOOTNOTE></JAVASCRIPT></SPLITINLINE>，后面跟着执行测试所用的时间。<SPLITINLINE> <SCHEME> <INDEX><DECLARATION>换行</DECLARATION></INDEX> </SCHEME> </SPLITINLINE> <SNIPPET PAGE="52">
      <INDEX><USE>display</USE> (primitive function)<FRAGILE></FRAGILE></INDEX>
      <INDEX><USE>timed_prime_test</USE><FRAGILE></FRAGILE></INDEX>
      <NAME>timed_prime_definition</NAME>
      <REQUIRES>prime_definition</REQUIRES>
      <EXAMPLE>timed_prime_example</EXAMPLE>
      <SCHEME>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display &quot; *** &quot;)
  (display elapsed-time))
      </SCHEME>
      <JAVASCRIPT>
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
<SHORT_SPACE_AND_ALLOW_BREAK></SHORT_SPACE_AND_ALLOW_BREAK>
function start_prime_test(n, start_time) {
    return is_prime(n)
           ? report_prime(get_time() - start_time)
           : false;
}
<SHORT_SPACE_AND_ALLOW_BREAK></SHORT_SPACE_AND_ALLOW_BREAK>
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
    return true;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="52" HIDE="yes">
      <NAME>timed_prime_example</NAME>
      <REQUIRES>timed_prime_definition</REQUIRES>
      <SCHEME>
(timed-prime-test 43)
      </SCHEME>
      <JAVASCRIPT>
timed_prime_test(43);
      </JAVASCRIPT>
    </SNIPPET> 
    使用此
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    编写一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>search-for-primes</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>search_for_primes</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    用于检查指定范围内连续奇数的素数性。
    使用你的
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    找出大于1000、大于10000、
    大于100000、大于1000000的三个最小素数。记录测试
    每个素数所需的时间。由于测试算法的增长阶为
     <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>，你应该预期测试  
    约10,000左右的素数大约需要  
     <LATEXINLINE>$\sqrt{10}$</LATEXINLINE> 大约是测试约1000以内素数所需时间的 倍。你的时间数据是否支持这一点？对于 100,000 和 1,000,000 的数据表现如何，<LATEXINLINE>$\sqrt{n}$</LATEXINLINE> 
    预测？你的结果是否与这样一种观点相符，即你机器上的程序运行时间与计算所需的步骤数成正比？
    <SOLUTION>
      <SNIPPET>
        <NAME>search_for_primes_definition</NAME>
        <EXAMPLE>search_for_primes_example</EXAMPLE>
        <REQUIRES>timed_prime_definition</REQUIRES>
        <JAVASCRIPT>
function search_for_primes(start, times) {
    return times === 0
           ? true
           : start &gt; 2 &amp;&amp; start % 2 === 0
           ? search_for_primes(start + 1, times)
           // if we get true, it&apos;s a prime
           : timed_prime_test(start)
           ? search_for_primes(start + 2, times - 1)
           : search_for_primes(start + 2, times);
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
      <NAME>search_for_primes_example</NAME>
      <REQUIRES>search_for_primes_definition</REQUIRES>
      <JAVASCRIPT>
search_for_primes(10000, 3);
// search_for_primes(10000000, 3);
// search_for_primes(10000000000, 3);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
      时间数据相当清楚地支持了对于足够大的数字（如100,000和1,000,000）而言，<LATEXINLINE>$\sqrt{n}$</LATEXINLINE>的预测。
    </SOLUTION>
   </EXERCISE>

   
  <EXERCISE>
    <LABEL NAME="ex:better-smallest-divisor"></LABEL> 
    在本节开头展示的
    <INDEX><USE>smallest_divisor</USE><SUBINDEX>更高效的版本</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>smallest-divisor</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> 
    做了大量不必要的测试：在检查了数字是否能被2整除之后，再去检查它是否能被更大的偶数整除就没有意义了。这表明
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>test-divisor</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>test_divisor</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的取值不应该是 2、3、4、5、6、<ELLIPSIS></ELLIPSIS>，而是 2、3、5、7、9、<ELLIPSIS></ELLIPSIS>。要实现这个改动，
    <SPLITINLINE>
      <SCHEME>定义一个过程</SCHEME>
      <JAVASCRIPT>声明一个函数</JAVASCRIPT>
    </SPLITINLINE> 
    <SCHEMEINLINE>next</SCHEMEINLINE>，当输入等于2时返回3，其他情况下返回输入加<SPACE></SPACE>2。修改
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>smallest-divisor</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    以使用
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>(next test-divisor)</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>next(test_divisor)</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    替代
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ test-divisor 1)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>test_divisor + 1</JAVASCRIPTINLINE>.
      </JAVASCRIPT></SPLITINLINE>
    使用包含此修改版本的
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>smallest-divisor</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
      </SPLITINLINE>
    对练习<SPACE></SPACE><REF NAME="ex:search-for-primes"></REF>中找到的12个质数分别进行测试。由于该改动将测试步骤减半，你应该预期它运行速度大约提高一倍。这个预期是否得到证实？如果没有，两个算法的速度比是多少？你如何解释它与2不同的原因？
    <SOLUTION>
      <SNIPPET>
        <NAME>better_smallest_divisor_solution</NAME>
        <JAVASCRIPT>
function next(input) {
    return input === 2 
           ? 3 
           : input + 2;
}

function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, next(test_divisor));
}
        </JAVASCRIPT>
	<JAVASCRIPT_RUN>
function square(x) {
    return x * x;
}
function smallest_divisor(n) {
    return find_divisor(n, 2);
}
function divides(a, b) {
    return b % a === 0;
}
function is_prime(n) {
    return n === smallest_divisor(n);
}
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
function start_prime_test(n, start_time) {
    return is_prime(n)
           ? report_prime(get_time() - start_time)
           : true;
}
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
}
function next(input) {
    return input === 2 
           ? 3 
           : input + 2;
}
function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, next(test_divisor));
}

timed_prime_test(43);
	</JAVASCRIPT_RUN>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
      两个算法的速度比不完全是2，这可能是由于硬件或网络问题导致。
      相较于之前的方案，速度约提高了1.5倍。
    </SOLUTION>
  </EXERCISE> 


   
  <EXERCISE> 
    修改习题<SPACE></SPACE><REF NAME="ex:search-for-primes"></REF>中的
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    以使用
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>fast-prime?</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    (费马方法)，并测试你在该练习中找到的12个质数的每一个。由于费马测试具有
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>的增长，
    你期望测试接近1,000,000的质数所需的时间与测试接近1000的质数所需的时间相比如何？你的数据支持这一点吗？你能解释发现的任何差异吗？
    <LABEL NAME="ex:mod-timed-prime-test"></LABEL>
    <SOLUTION>
      <SNIPPET>
        <EXAMPLE>mod_timed_prime_test_example</EXAMPLE>
	<NAME>mod_timed_prime_test_solution</NAME>
	<REQUIRES>fast_prime_definition</REQUIRES>
	<JAVASCRIPT>
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}
function start_prime_test(n, start_time) {
    return fast_is_prime(n, math_floor(math_log(n)))
           ? report_prime(get_time() - start_time)
           : true;
}
function report_prime(elapsed_time) {
    display(&quot; *** &quot;);
    display(elapsed_time);
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
      <NAME>mod_timed_prime_test_example</NAME>
      <REQUIRES>mod_timed_prime_test_solution</REQUIRES>
      <JAVASCRIPT>
timed_prime_test(10007);
// timed_prime_test(10009);
// timed_prime_test(10037);
// timed_prime_test(100003, 3);
// timed_prime_test(100019, 3);
// timed_prime_test(100043, 3);
// timed_prime_test(1000003, 3);
// timed_prime_test(1000033, 3);
// timed_prime_test(1000037, 3);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
    使用<JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE>测试接近1,000,000的质数所需时间约为4毫秒，是测试接近1000的质数所需时间的4倍。这比我们使用<JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE>时达到的8毫秒要快得多。然而，尽管它速度比后者慢4倍，这一事实不能让我们认为它的增长超过了
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>，因为要更准确地理解函数的增长，应该用更大的数进行测试。
    </SOLUTION>
  </EXERCISE> 


   
  <EXERCISE> 
    Alyssa P. Hacker 抱怨我们在编写
    <SCHEMEINLINE>expmod</SCHEMEINLINE> 时做了很多额外的工作。毕竟，她说，既然我们已经知道如何计算指数，我们本可以简单地写成
    <SNIPPET PAGE="55">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>no_extra_work</NAME>
      <REQUIRES>expt_log_definition</REQUIRES>
      <EXAMPLE>expmod_example</EXAMPLE>
      <SCHEME>
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return fast_expt(base, exp) % m;
}
      </JAVASCRIPT>
    </SNIPPET>
    她说得对吗？这
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>  
    能否同样用于我们的快速质数测试？请解释。
    <LABEL NAME="ex:Alyssas-expmod"></LABEL>
    <SOLUTION>
      表面上看，Alyssa 的建议是正确的：她的
      <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> 函数计算了
      <LATEXINLINE>$\textit{base}^{\textit{exp}}$</LATEXINLINE> 然后计算其对
      <LATEXINLINE>$m$</LATEXINLINE> 的余数，正是费马测试所需的。
      <P></P>
      但是，对于较大的底数，Alyssa 的方法很快会遇到限制，因为JavaScript使用64位表示数字，遵循双精度浮点标准。当数字变得太大，无法在该标准中精确表示时，结果将变得不可靠。更糟的是，该方法可能超过该标准能表示的最大数字，计算将导致错误。
      <P></P>
      然而，对于较小的底数，Alyssa 的方法可能比原始的
      <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> 函数更快，因为它只执行一次取余操作。
    </SOLUTION>
  </EXERCISE> 


  <LONG_PAGE LINES="1"></LONG_PAGE>
   
  <EXERCISE>
    <LABEL NAME="ex:louis-fast-prime"></LABEL>
    Louis Reasoner 在做练习
    <SPACE></SPACE><REF NAME="ex:mod-timed-prime-test"></REF>时遇到了很大困难。
    他的
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>fast-prime?</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    测试似乎比他的
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>prime?</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    测试运行得更慢。Louis 叫来了他的朋友 Eva Lu Ator 给予帮助。当他们检查 Louis 的代码时，发现他重写了
    <SCHEMEINLINE>expmod</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，使用显式乘法，而不是调用
    <SCHEMEINLINE>square</SCHEMEINLINE>：
    <SNIPPET PAGE="55">
      <INDEX><DECLARATION>expmod</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <REQUIRES>even_definition</REQUIRES>
      <EXAMPLE>expmod_example</EXAMPLE>
      <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (* (expmod base (/ exp 2) m)
              (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))
      </SCHEME>
      <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
           ? (  expmod(base, exp / 2, m)
              * expmod(base, exp / 2, m)) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
      </JAVASCRIPT>
    </SNIPPET>
    Louis 说：“我不明白这有什么不同。”Eva 回答：“我明白。通过这样写这个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>，
    你已经把
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 的过程转变成了
    <LATEXINLINE>$\Theta(n)$</LATEXINLINE> 的过程。” 请解释。

    <SOLUTION>
      Eva 是对的：在计算过程中，
      <SNIPPET EVAL="no">
	<JAVASCRIPT>
(expmod(base, exp / 2, m) * expmod(base, exp / 2, m)) % m    
	</JAVASCRIPT>
      </SNIPPET>
      表达式
      <JAVASCRIPTINLINE>expmod(base, exp / 2, m)</JAVASCRIPTINLINE>
      在指数为偶数时的每一步计算中被计算了两次，这消除了快速幂算法的优势——该算法在指数为偶数时会将指数减半——因此消除了算法提速的特性。
    </SOLUTION>
  </EXERCISE>


   
  <EXERCISE>
    证明
    <INDEX>卡迈克尔数</INDEX>
    注释<SPACE></SPACE><REF NAME="foot:carmichaelfn"></REF>中列出的卡迈克尔数确实能够欺骗费马测试。也就是说，编写一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，该过程接受一个整数 <LATEXINLINE>$n$</LATEXINLINE> 并测试对于所有 <LATEXINLINE>$a &lt; n$</LATEXINLINE>，是否都有 <LATEXINLINE>$a^n$</LATEXINLINE> 同余于 <LATEXINLINE>$a$</LATEXINLINE> （模 <LATEXINLINE>$n$</LATEXINLINE>），并在给定的卡迈克尔数上测试你的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>。
    <SOLUTION>
      <SNIPPET>
        <NAME>carmichael</NAME>
        <EXAMPLE>example_1.29</EXAMPLE>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function carmichael(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
               ? square(expmod(base, exp / 2, m)) % m
               : (base * expmod(base, exp - 1, m)) % m;
    }
    function fermat_test(n, a) {
        return expmod(a, n, n) === a;
    }
    function iter(n, i) {
        return i === n
               ? true
               : fermat_test(n, i)
               ? iter(n, i + 1)
               : false;
    }
    return iter(n, 2);
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.29</NAME>
      <REQUIRES>carmichael</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <JAVASCRIPT>
carmichael(561);
// carmichael(1105);
// carmichael(1729);
// carmichael(2465);
// carmichael(2821);
// carmichael(6601);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
    <LABEL NAME="ex:1_27"></LABEL>
  </EXERCISE> 

        
  <EXERCISE> 
    费马测试中有一种不会被欺骗的变体称为
    <INDEX>素数<SUBINDEX>米勒<ENDASH></ENDASH>拉宾测试</SUBINDEX></INDEX>
    <INDEX>费马素性测试<SUBINDEX>的变体</SUBINDEX></INDEX>
    <INDEX>米勒<ENDASH></ENDASH>拉宾素性测试</INDEX>
    <INDEX>Gary L. 米勒</INDEX>
    <INDEX>Michael O. 拉宾</INDEX>
    <EM>米勒<ENDASH></ENDASH>拉宾测试</EM>（<CITATION>米勒 1976</CITATION>;
    <CITATION>拉宾 1980</CITATION>）。该测试基于
    <INDEX><ORDER>费马</ORDER>费马小定理<SUBINDEX>的另一种形式</SUBINDEX></INDEX>
    费马小定理的另一种形式，其内容为如果
<LATEXINLINE>$n$</LATEXINLINE> 是一个素数且 <LATEXINLINE>$a$</LATEXINLINE> 是小于 的任意正整数 <LATEXINLINE>$n$</LATEXINLINE> ，那么 <LATEXINLINE>$a$</LATEXINLINE> 提出
    到 <LATEXINLINE>$(n-1)$</LATEXINLINE> 第 st 次幂同余于 1  
    模<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> . 测试一个数的素性 <LATEXINLINE>$n$</LATEXINLINE> 通过米勒－拉宾测试，我们选择一个随机数 <LATEXINLINE>$a &lt; n$</LATEXINLINE> 并提升 <LATEXINLINE>$a$</LATEXINLINE> 到 <LATEXINLINE>$(n-1)$</LATEXINLINE> 幂模 <LATEXINLINE>$n$</LATEXINLINE> 使用 <SCHEMEINLINE>expmod</SCHEMEINLINE> 
     <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    但是，每当我们执行平方步骤时
     <SCHEMEINLINE>expmod</SCHEMEINLINE>，我们检查是否发现了一个
    <QUOTE>模<SPACE></SPACE><LATEXINLINE>$n$</LATEXINLINE>的
    非平凡平方根</QUOTE>，即一个不等于1或 <LATEXINLINE>$n-1$</LATEXINLINE>  其平方模 <LATEXINLINE>$n$</LATEXINLINE>。可以证明，如果存在这样的非平凡的1的平方根，那么<LATEXINLINE>$n$</LATEXINLINE> 不是质数。同样可以证明，如果 <LATEXINLINE>$n$</LATEXINLINE> 是一个非质数的奇数，  
    则对于至少一半的数字 <LATEXINLINE>$a &lt; n$</LATEXINLINE> ,  
    计算 <LATEXINLINE>$a^{n-1}$</LATEXINLINE>  以这种方式将揭示一个非平凡的模 1 的平方根<SPACE></SPACE> <LATEXINLINE>$n$</LATEXINLINE> 。  
    （这就是为什么 Miller–Rabin 测试不会被欺骗。） 修改  
     <SCHEMEINLINE>expmod</SCHEMEINLINE> 
     <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    以在发现非平凡的 1 的平方根时发出信号，并利用此来实现具有与
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    类似的 Miller<ENDASH></ENDASH>Rabin 测试
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>费马-测试</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fermat_test</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    通过测试各种已知的素数和合数来检查你的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    。提示：一个方便的方法是<SCHEMEINLINE>expmod</SCHEMEINLINE>信号是让它返回 0。 <LABEL NAME="ex:miller-rabin"></LABEL>
     
<SOLUTION>
  <SNIPPET>
    <NAME>miller_rabin_test</NAME>
    <EXAMPLE>example_1.30</EXAMPLE>
    <REQUIRES>even_definition</REQUIRES>
    <REQUIRES>square_definition</REQUIRES>
    <JAVASCRIPT>
function random(n) {
    return math_floor(math_random() * n);
}
function miller_rabin_test(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
               ? square(trivial_test(expmod(base,
                                            exp / 2,
                                            m), 
                                     m))
                 % m
               : (base * expmod(base, exp - 1, m)) 
                 % m;
    }
    function trivial_test(r, m) {
        return r === 1 || r === m - 1
               ? r
               : square(r) % m === 1
               ? 0
               : r;
    }
    function try_it(a) {
        return expmod(a, n - 1, n) === 1;
    }
    return try_it(1 + random(n - 1));
}
function do_miller_rabin_test(n, times) {
    return times === 0
           ? true
           : miller_rabin_test(n)
           ? do_miller_rabin_test(n, times - 1)
           : false;
}
    </JAVASCRIPT>
    <SCHEME>
    </SCHEME>
  </SNIPPET>
</SOLUTION>
<SNIPPET HIDE="yes">
      <NAME>example_1.30</NAME>
      <REQUIRES>miller_rabin_test</REQUIRES>
      <EXPECTED>true</EXPECTED>
      <JAVASCRIPT>
do_miller_rabin_test(104743, 1000);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE>
   <INDEX>素数&lt;汉语索引&gt;判定&lt;/汉语索引&gt; </INDEX>
</SUBSECTION>
