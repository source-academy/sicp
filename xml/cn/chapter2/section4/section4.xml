<SECTION>
   <NAME>抽象数据的多重表示</NAME> 

   <SECTIONCONTENT></SECTIONCONTENT> 

  <LABEL NAME="sec:multiple-reps"></LABEL>

   <INDEX>数据抽象</INDEX> 

  <TEXT> 
    我们引入了数据抽象，这是一种用于构建系统的方法，使程序的大部分可以独立于实现程序操作的数据对象的选择之外进行指定。例如，我们在
    section<SPACE></SPACE><REF NAME="sec:rationals"></REF>看到如何将设计使用有理数的程序的任务与用计算机语言实现有理数的任务分开
    的基本机制来构建复合数据。关键思路是构建一个<INDEX>抽象屏障</INDEX>
    ——在这种情况下，有理数的选择器和构造器
    <SPLITINLINE>
      (make-rat,
      <JAVASCRIPT>(<JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>numer</SCHEMEINLINE>,
    <SCHEMEINLINE>denom</SCHEMEINLINE> )<EMDASH></EMDASH>将有理数的使用方式与其底层表示的列表结构隔离开来。类似的抽象屏障将执行有理算术的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的细节隔离开来
    <SPLITINLINE>
      (add-rat,
      <JAVASCRIPT>(<JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      sub-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      mul-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      div-rat)
      <JAVASCRIPT><JAVASCRIPTINLINE>div_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    与使用有理数的<QUOTE>高层</QUOTE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    隔离开。生成的程序具有在figure<SPACE></SPACE><REF NAME="fig:abstraction-barriers"></REF>中显示的结构。
   </TEXT>
   <TEXT>
    这些数据抽象屏障是控制复杂性的强大工具。通过隔离数据对象的底层表示，我们可以将设计大型程序的任务划分为可以单独执行的较小任务。但这种数据抽象还不够强大，因为并非总是有意义地谈论数据对象的<QUOTE>底层表示</QUOTE>。
  </TEXT> 
   <TEXT>
    一方面，一个数据对象可能有不止一种有用的表示，我们可能希望设计能够处理多种表示形式的系统。举个简单的例子，复数可以用两种几乎等效的方式表示：直角坐标形式（实部和虚部）和极坐标形式（模和角）。有时直角坐标形式更合适，有时极坐标形式更合适。事实上，完全可以想象一个系统，其中复数可以以这两种方式表示，并且用于操作复数的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以处理任一表示形式。
  </TEXT> 
   <TEXT>
    更重要的是，编程系统通常是由多人在长时间内设计的，并且受到随时间变化的需求的影响。在这样的环境中，不可能所有人事先就数据表示的选择达成一致。因此，除了将表示与使用隔离的数据抽象屏障外，我们还需要将不同设计选择彼此隔离并允许不同选择在单个程序中共存的抽象屏障。此外，由于大型程序通常是通过组合
    <SPLITINLINE>
      预先存在的
      <JAVASCRIPT>预先存在的</JAVASCRIPT>
    </SPLITINLINE>
    模块而创建，这些模块是在隔离中设计的，因此我们需要允许程序员将模块
    <INDEX>加性</INDEX>
    <EM>加性</EM>地合并到更大系统中的约定，也就是说，不需要重新设计或重新实现这些模块。
  </TEXT> 
   <TEXT>
    在本节中，我们将学习如何处理程序的不同部分可能采用不同表示的数据。这需要构建<INDEX>通用
    <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE></INDEX>
    <INDEX><FUNCTION></FUNCTION><SUBINDEX>通用</SUBINDEX></INDEX>
    <EM>通用
    <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE></EM><EMDASH></EMDASH><SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>
    ，这些过程或函数可以对可能以多种方式表示的数据进行操作。我们构建通用
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的主要技术是使用带有<INDEX>类型标签</INDEX><EM>类型标签</EM>的数据对象，即包含有关如何处理信息的数据对象。我们还将讨论
    <INDEX>数据导向编程</INDEX>
    <EM>数据导向</EM>编程，这是一种强大且便捷的实现策略，用于通过通用操作在构建系统时进行加性组合。
  </TEXT> 
  <TEXT> 
    我们从简单的复数示例开始。我们将看到类型标签和数据导向风格如何使我们能够为复数设计独立的直角坐标和极坐标表示，同时保持抽象的概念【38:18†cn.txt】。
<INDEX>复数算术</INDEX>
    <INDEX>算术<SUBINDEX>在复数上</SUBINDEX></INDEX>
    <QUOTE>复数</QUOTE> 
    数据对象。
    我们将通过定义算术【50:3†cn.txt】
<SPLITINLINE>
      <SCHEME>procedures</SCHEME>
       <JAVASCRIPT>函数</JAVASCRIPT>
     </SPLITINLINE> 
    对于复数
     <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT>(<JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
     </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
     </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
     </SPLITINLINE> 
    和
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE>)</SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
     </SPLITINLINE> 
    根据通用选择器访问复数的部分，这与数字的表示方式无关。生成的复数系统，如图中所示【30:15†cn.txt】。
<SPLITINLINE>
      <SCHEME>
	figure<SPACE></SPACE><REF NAME="fig:complex-system_scheme"></REF>,
      </SCHEME>
       <JAVASCRIPT>
	figure<SPACE></SPACE><REF NAME="fig:complex-system"></REF>,
      </JAVASCRIPT>
     </SPLITINLINE> 
    包含两种不同类型的
     <INDEX> 
    在复数系统中的抽象屏障【80:0†cn.txt】
     </INDEX> 
    抽象屏障。 <QUOTE> 
    水平 
     </QUOTE> 抽象屏障
    起到与
    figure 中相同的作用 
      <SPACE></SPACE><REF NAME="fig:abstraction-barriers"></REF>。它们将<QUOTE>高层</QUOTE>操作与<QUOTE>低层</QUOTE>表示隔离开。此外，还有一个<QUOTE>垂直</QUOTE>屏障，使我们能够单独设计和安装替代表示。
    <SPLIT>
      
	<FIGURE>
          <FIGURE WEB_SCALE="0.6" SRC="img_original/ch2-Z-G-54.svg"></FIGURE>
	  <CAPTION>
	    复数系统中的数据抽象屏障 。
	  </CAPTION>
	  
	</FIGURE>
      
      <JAVASCRIPT>
	<FIGURE>
          <FIGURE WEB_SCALE="0.6" SCALE="0.65" SRC="img_javascript/ch2-Z-G-54.svg"></FIGURE>
	  <CAPTION>
	    复数系统中的数据抽象屏障 。
	  </CAPTION>
	  
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
   </TEXT>
   <TEXT>
    在section<SPACE></SPACE><REF NAME="sec:generic-operators"></REF>中，我们将展示如何使用类型标签和数据导向风格来开发一个通用算术包。这提供了
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    (add，mul，等等)可以用来操作各种<QUOTE>数字</QUOTE>，并且当需要数字的新类型时可以轻松扩展。在section<SPACE></SPACE><REF NAME="sec:symbolic-algebra"></REF>中，我们将展示如何在执行符号代数的系统中使用通用算术【96:2†cn.txt】。
  </TEXT> 

  <!--  Subsection 1 : Representations for Complex Numbers  -->
  &amp;subsection2.4.1;

  <!--  Subsection 2 : Tagged Data  -->
  &amp;subsection2.4.2;

  <!--  Subsection 3 : Data-Directed Programming and Additivity  -->
  &amp;subsection2.4.3;

</SECTION>
