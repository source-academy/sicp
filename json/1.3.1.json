[{"id":"/sicpjs/1.3.1","tag":"TITLE","body":"1.3.1  \n    \n      \n      Functions\n    \n    as Arguments"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Consider the following three\n    functions.\n    The first computes the sum of the integers from\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" through ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgPqXHkCmA5pwE70AFAEMANKABGASlABvHKEWg+ncoT51hoAHySFSg0oD8oAAz7DBgFygtAagbM2HHvyH3U46QG4cAXzxGVnYuXgFBFHEUUylvIA","body":"function sum_integers(a, b) {\n    return a > b\n           ? 0\n           : a + sum_integers(a + 1, b);\n} "},{"body":"\n    The second computes the sum of the cubes of the integers in the given range:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbAPoMWO1gEMANKEbc+g4aPF1zoAHw3+D76AD8oAAYvH0EALnomNnNuAGpdA2NIs1c4lGtbZTUcPSMTZjMMawB2TkUgA","body":"function sum_cubes(a, b) {\n    return a > b\n           ? 0\n           : cube(a) + sum_cubes(a + 1, b);\n} "},{"body":"\n    The third computes the sum of a sequence of terms in the series\n    ","tag":"#text"},{"body":"\n      \\[ \\frac{1}{1\\cdot3}+\\frac{1}{5\\cdot7}+\\frac{1}{9\\cdot11}+\\cdots \\]\n    ","tag":"LATEX"},{"body":"\n    which converges to ","tag":"#text"},{"body":"$\\pi/8$","tag":"LATEX"},{"body":" (very\n    slowly):","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.3.1#footnote-1"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgAOlA+gM6EC2AFAIYA0oAIwCUoAN45Qk0ACcApuULS63UAD5BEqVqkB+UAAZN2rQC5UoMD1AAqUFYDUoAExCRjxqw4PQAFn7CAbhwAXzwADhsGZjYuFH4UfUShAKA","body":"function pi_sum(a, b) {\n    return a > b\n           ? 0\n           : 1 / (a * (a + 2)) + pi_sum(a + 4, b);\n} "}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    These three\n    functions\n    clearly share a common underlying pattern. They are for the most part\n    identical, differing only in the name of the\n    function,\n    the function of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" used to compute the term to\n    be added, and the function that provides the next value of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":". We could generate each of the\n    functions\n    by filling in slots in the same template:\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction $name$(a, b) {\n    return a > b\n           ? 0\n           : $term$(a) + $name$($next$(a), b);\n}\n      "}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    The presence of such a common pattern is strong evidence that there is a\n    useful\n    \n    abstraction waiting to be brought to the surface.  Indeed,\n    mathematicians long ago identified the abstraction of\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"summation of a series","tag":"#text"}]},{"body":" and invented \"","tag":"#text"},{"body":"sigma\n    notation,","tag":"#text"},{"body":"\" for example\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      \\displaystyle\\sum_{n=a}^{b}\\ f(n)&=&f(a)+\\cdots+f(b)\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    to express this concept.  The power of sigma notation is that it allows\n    mathematicians to deal with the concept of summation itself rather than only\n    with particular sums—for example, to formulate general results about\n    sums that are independent of the particular series being summed.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Similarly, as program designers, we would like our language to be powerful\n    enough so that we can write a\n    function\n    that expresses the concept of summation itself rather than only\n    functions\n    that compute particular sums.  We can do so readily in our\n    functional\n    language by taking the common template shown above and transforming the\n    \"","tag":"#text"},{"body":"slots","tag":"#text"},{"body":"\" into\n    parameters:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function sum(term, a, next, b) {\n    return a > b\n           ? 0\n           : term(a) + sum(term, next(a), next, b);\n}"},{"body":"\n    Notice that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" takes as its arguments the\n    lower and upper bounds ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" together with the\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"term"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"next"},{"body":".\n    We can use ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" just as we would any\n    function.\n    For example, we can use it (along with a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"inc"},{"body":" that increments its argument by 1) to define\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_cubes"},{"body":":","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":11,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SjJWYmdItzEJbNBUlFLyzSq0-QB9BhYdRMcG1xFmuj1DQeYLa1Aa0lHOnGmBpmZhlAsUMJKgA","body":"function inc(n) {\n    return n + 1;\n}\nfunction sum_cubes(a, b) {\n    return sum(cube, a, inc, b);\n} "},{"body":"\n    Using this, we can compute the sum of the cubes of the integers from 1 to 10:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":18,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SjJWYmdItzEJbNBUlFLyzSq0-QB9BhYdRMcG1xFmuj1DQeYLa1Aa0lHOnGmBpmZhlAsUMJKgA","body":"sum_cubes(1, 10); ","output":"3025"},{"body":"\n    With the aid of an identity\n    function\n    to compute the term, we can define\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_integers"},{"body":"\n    in terms of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGiUAmApsVeQJ4AUAHgJSgBvHKBGgATk3KExdbgG4cAXzyMWbLgBYATLzlA","body":"function identity(x) {\n    return x;\n} "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":15,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSglGQsxDLyhipqGt6grihhkQQkFDR0lAAm7MRU5ACeLCIplsqq6nQieVGFsXSMTAD6CRwA5lz0jpINac2ZPSxlFVXVfILxZOPtOD39lezDnKMofChmoUA","body":"function sum_integers(a, b) {\n    return sum(identity, a, inc, b);\n} "},{"body":"\n    Then we can add up the integers from 1 to 10:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":19,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSglGQsxDLyhipqGt6grihhkQQkFDR0lAAm7MRU5ACeLCIplsqq6nQieVGFsXSMTAD6CRwA5lz0jpINac2ZPSxlFVXVfILxZOPtOD39lezDnKMofChmoUA","body":"sum_integers(1, 10); ","output":"55"},{"body":"\n    We can also \n    define ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pi_sum"},{"body":"\n    in the same way:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.3.1#footnote-2"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgAA6UAPqMrILBcpag0RQ0dIlJ9qwiMvJWiipqGqigYCwioABUoPWgrgBMUqFZkYY5sfnJPuT1pVmGlep0Da4ALGGGvUqT1aksBUV86QXDkt2ROAAcTQnJayh8KGbXoUA","body":"function pi_sum(a, b) {\n    function pi_term(x) {\n        return 1 / (x * (x + 2));\n    }\n    function pi_next(x) {\n        return x + 4;\n    }\n    return sum(pi_term, a, pi_next, b);\n} "},{"body":"\n    Using these\n    functions,\n    we can compute an approximation to ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":17,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgAA6UAPqMrILBcpag0RQ0dIlJ9qwiMvJWiipqGqigYCwioABUoPWgrgBMUqFZkYY5sfnJPuT1pVmGlep0Da4ALGGGvUqT1aksBUV86QXDkt2ROAAcTQnJayh8KGbXoUA","body":"8 * pi_sum(1, 1000); ","output":"3.139592655589783"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Once we have ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":", we can use it as a building\n    block in formulating further concepts.  For instance, the \n    \n    definite integral of a function ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" between the\n    limits ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":" can\n    be approximated numerically using the formula\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      \\displaystyle\\int_{a}^{b}f & = &\n      \\left[\\,f\\!\\left( a+\\dfrac{dx}{2} \\right)\\,+\\,f\\!\\left(a+dx+\\dfrac{dx}{2}\n      \\right)\\,+\\,f\\!\\left( a+2dx+\\dfrac{dx}{2}\\right)\\,+\\,\\cdots\n      \\right] dx\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    for small values of ","tag":"#text"},{"body":"$dx$","tag":"LATEX"},{"body":". We can express this\n    directly as a\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":11,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOhAtgBTkCmATkwDSgCGfYuwAe5PgCMAlKADeOUItCd25Qpzr9QAPlASFSw0oD8oAAwGjhgFygO3FvxkBqBszZdeoYWMdShouJ6UgDcOAC+eERkVLSgpIQS7CwiMvKGKmoaoCKgAFQ5+TlhkQQkFDR0lMQcAOac-AA2LPh8gnp8ACapcpag0RVx-J2dAPrdKWl9GarqdLmu3WGGkTNZdIysrQKgi7lgAExtI+MikjIFSxF41XUNzQlJfGZ8KM9oZiihQA","body":"function integral(f, a, b, dx) {\n    function add_dx(x) {\n        return x + dx;\n    }\n    return sum(f, a + dx / 2, add_dx, b) * dx;\n} "},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":18,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SmJjAHMhSwAbVnwLaz8LABMuXkjQDUrtSy6ugH0ejmd+1xExCTlQVJ7lVzVZ9wW9QzarJdAe0DAAJnbRifZHblkV1Twa+saWhhYLMIsUN7QwlBKgA","body":"integral(cube, 0, 1, 0.01); ","output":"0.24998750000000042"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":18,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SmJjAHMhSwAbVnwLaz8LABMuXkjQDUrtSy6ugH0ejmd+1xExCTlQVJ7lVzVZ9wW9QzarJdAe0DAAJnbRifZHblkV1TwQA8sROOo4oQBPcLQwsJRQAHdKOQABagGp+ITUf46EzBHA1eqNFoMFgWMIWFBo75hY4lIA","body":"integral(cube, 0, 1, 0.001); ","output":"0.249999875000001"},{"body":"\n\n    (The exact value of the integral of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cube"},{"body":" between\n    0 and 1 is 1/4.)\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 1.29","id":"#ex-1.29","child":[{"body":"\n    Simpson's Rule is a more accurate method of numerical integration than\n\n    the method illustrated above.  Using Simpson's Rule, the integral of a\n    function ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" between\n    ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":" is\n    approximated as\n    ","tag":"#text"},{"body":"\n      \\[\n      \\frac{h}{3}[ y_0 +4y_1 +2y_2 +4y_3 +2y_4 +\\cdots+2y_{n-2}\n      +4y_{n-1}+y_n ]\n      \\]\n    ","tag":"LATEX"},{"body":"\n    where ","tag":"#text"},{"body":"$h=(b-a)/n$","tag":"LATEX"},{"body":", for some even integer\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$y_k =f(a+kh)$","tag":"LATEX"},{"body":". (Increasing\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" increases the accuracy of the approximation.)\n    Declare a function\n    that takes as arguments ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":",\n    ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" and returns the value of the integral,\n    computed using Simpson's Rule. Use your\n    function\n    to integrate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cube"},{"body":" between 0 and 1 (with\n    ","tag":"#text"},{"body":"$n=100$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$n=1000$","tag":"LATEX"},{"body":"),\n    and compare the results to those of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"function\n    shown above.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":11,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6Dho8XUugAfKEb9XQNAAflAABgCgwQAuUGNTVktuAGpdAyMTc1Bbe0TOGzsHP05lNQISCho6SjJWAGtnSLcxCVA60FSUUvLNKt1KfQAHHVodAH0hQgAbZjGa4wBzIUsp1nwLaz8bRtcNSu0AC2YpwZNWA52ova06AE9651AmqOaPUHxWeplQC46rEuegjUAEhrn14oYGrxAUERC06O0ALzI8KgAA+aLaoGRiOyMJerlC9wa+IJAli7QApKAAEzYlERMlM0J02TEzikpmgWIAFm+7OULzULzhbz0hghFjCFhqpG233OoDAGABrmFglFrSOJzOrEYoAAtP8ldkAWUdANhqMJtNZvNmEsVqwGCwpRYUO6wmESkA","body":"function inc(k) {\n    return k + 1;\n}\nfunction simpsons_rule_integral(f, a, b, n) {\n    function helper(h) {\n        function y(k) { \n            return f((k * h) + a);\n        }\n\tfunction term(k) {\n            return k === 0 || k === n\n                   ? y(k)\n                   : k % 2 === 0\n                     ? 2 * y(k)\n                     : 4 * y(k);\n        }\n        return sum(term, 0, inc, n) * (h / 3);\n    }\n    return helper((b - a) / n);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.30","id":"#ex-1.30","child":[{"body":" \n    The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":"function\n    above generates a linear recursion.  The\n    function\n    can be rewritten so that the sum is performed iteratively. Show how to do\n    this by filling in the missing expressions in the following\n    declaration:","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction sum(term, a, next, b) {\n    function iter(a, result) {\n        return $\\langle{}$??$\\rangle$\n               ? $\\langle{}$??$\\rangle$\n               : iter($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$);\n    }\n    return iter($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$);\n}\n      "}],"solution":[{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGimEBGApgBQAeAlKAN46gDQAJ2blCQuu1AAqUFNnsA3DgC+eImSq1QAZ0IBbVuWZD9AGlABDC8WbtyFxtz6DQGijTqVjQ1teHMegA25M78roIiYhJWoAB8oIzhESkCAPwBweTJqREAXKDeJqy29n6cFiJZoADUoD6Glpycyq5qrlHiXj5+FgAMLarqJB7alGQlYR2iXaB0dSjKau5adHr6APoMLDq9iVORMzHrrNvMFv7jpI6DautbTIGsKBYoA4pAA","body":"function sum(term, a, next, b) {\n    function iter(a, result) {\n        return a > b\n               ? result\n               : iter(next(a), result + term(a));\n    }\n    return iter(a, 0);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.31","id":"#ex-1.31","child":[{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tThe\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":"function\n\tis only the simplest of a vast number of similar abstractions that can\n\tbe captured as higher-order\n\tfunctions.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/1.3.1#footnote-3"},{"body":"  \n\tWrite an analogous\n\tfunction\n\tcalled\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":" that returns the product of\n\tthe values of a function at points over a given range. Show how to\n\tdefine \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":" in terms of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":".  Also use\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":" to compute approximations to\n\t","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":" using the formula","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/1.3.1#footnote-4"},{"body":"\n          \\[\n\t  \\begin{array}{lll}\n\t  \\dfrac{\\pi}{4} & = & \\dfrac{2 \\cdot 4\\cdot 4\\cdot 6\\cdot 6\\cdot 8\\cdots}{3\\cdot\n          3\\cdot 5\\cdot 5\\cdot 7\\cdot 7\\cdots}\n\t  \\end{array}\n\t  \\]\n\t","tag":"LATEX"}]},{"tag":"LI","child":[{"body":"\n        If your ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":"function\n        generates a recursive process, write one that generates an iterative\n\tprocess. If it generates an iterative process, write one that generates\n        a recursive process.\n      ","tag":"#text"}]}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":27,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGj4CGF1ATpQwDYAUxAlKAG8coEfRIUadcgFMWAWy6V+Q0atAtp5QizqUA3MNEBfQyKJkqtUMWkAPcouWm1GrTtCVQAalQHVJ1VdtOgAHFmoAE0IKAH0WLhl5ABpUFJt7NN4DExwQEM8wyOjyAnFLUMoeJ1VzCStKAGcYyIjHQWdAzWCPUABSUAAmUABeUd9nANFa8tBEhSV2tVEg90bmiNalDqXVAH5QRW9UfjBDnwHebZ2RAC4Dz3OT+6OULInnaclrOwcFlR2VroXn5jM5AaAACygABUB0KUVilTmKXQAAY0j9Mm8ciANKRtA1KAA3aSgQqkaQNBqlCxfeHFOIJWRyFIMDEZUAAI2qyy67gYoAAfFyrntUKLRHc5lwGPxYfTYvFkd97DLeOzyCludk8CBKIkGFQSWTwhSqTS6qFwgjyDEkczWRqtTyzGUvvrZDKUhoGoQOOQXS4+XQBcLORKlvsfX6StcdncPfF0g5ZSlpbKYepKTG3v4wcGPIkvccdQQmORWOxuABWN4gMmVFAAdiyQA","body":"//recursive process\nfunction product_r(term, a, next, b) {\n    return a > b\n           ? 1\n           : term(a) * product_r(term, next(a), next, b);\n}\n\n//iterative process\nfunction product_i(term, a, next, b) {\n    function iter(a, result) {\n        return a > b\n               ? result\n               : iter(next(a), term(a) * result);\n    }\n    return iter(a, 1);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.32","id":"#ex-1.32","child":[{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n        Show that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":"\n        (exercise ","tag":"#text"},{"tag":"REF","body":"1.31","href":"/sicpjs/1.3.1#ex-1.31"},{"body":") are both special cases of a\n\tstill more general notion called\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":"\n\tthat combines a collection of terms, using some general accumulation\n\tfunction:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"accumulate(combiner, null_value, term, a, next, b);"},{"body":"\n\t    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":"\n        takes as arguments the same term and range specifications as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":", together with a\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"combiner"},{"body":"function\n        (of two arguments) that specifies how the current term is to be combined\n\twith the accumulation of the preceding terms and a \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null_value"},{"body":"\n        that specifies what base value to use when the terms run out.  Write\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":" and show how\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":"\n\tcan both be\n\tdeclared\n\tas simple calls to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        If your ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":"function\n        generates a recursive process, write one that generates an iterative\n\tprocess. If it generates an iterative process, write one that generates\n        a recursive process.\n      ","tag":"#text"}]}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":27,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGj4CGF1ATpQwDYAUxAlKAG8coEfRIUadcgFMWAWy6V+Q0atAtp5QizqUA3MNEBfQyKJkqtUMWkAPcouWm1GrTtCVQAalQHVJ1VdtOgAHFmoAE0IKAH0WLhl5ABpUFJt7NN4DExwQEM8wyOjyAnFLUMoeJ1VzCStKAGcYyIjHQWdAzWCPUABSUAAmUABeUd9nANFa8tBEhSV2tVEg90bmiNalDqXVAH5QRW9UfjBDnwHebZ2RAC4Dz3OT+6OULInnaclrOwcFlR2VroXn5jM5AaAACygABUB0KUVilTmKXQAAY0j9Mm8ciANKRtA1KAA3aSgQqkaQNBqlCxfJj4uSEDgMGRxLikahyABGlBsLDSTI4MSJnEI0hSyNADAxGVAXOqyy67gYoAAfHKrntrILhaLpJrRHcOdzebIErIFAxeCkDdc1PTCIzmaz4saeXybXavd61MQdSKOGLPT6Q3bJekHFaZeQUvLsTS6nQGo62ZLpd9ZfLFlMyl8QoGGlxbCkAJ4Kpbg2xHEsgkSTETgh1OlnSNn5wgNFLo2YWlLpiOx+OfKzw4qp3tS6OD7NmXNWKhySlF0vllxKuhV2E196dNx0JtMlupyiLzupHvJScZmNy+O5YCURIs4mk8mU6nD-ekBmH1mVN2mvy2ocEKAZBhech9lOt4zmItL1IkXDphoyYcOQq67t0KrqlytpqPsKFMiUoagHcj5mhGSHWqAAF8ua8hUSkhFobwbz+GC64eIh-b+nqQ5zkmKZIhO-aYjB-yzvBoQFsuoBlrBmHuFWPjbuxilfj+zqtpU7Znt2abQfK2QJjMo6IvRkFXgO4kfAJswnkuxZyRhip7qAm5ybWoD1uonEHlpMRIg5Z4oBKImGXejDMGwnBcAArFkQA","body":"//recursive process\nfunction accumulate_r(combiner, null_value, term, a, next, b) {\n    return a > b\n           ? null_value\n           : combiner(term(a), \n                      accumulate_r(combiner, \n                                   null_value, \n                                   term, next(a), next, b));\n}\nfunction sum_r(term, a, next, b) {\n    function plus(x, y) {\n        return x + y;\n    }\n    return accumulate_r(plus, 0, term, a, next, b);\n}\nfunction product_r(term, a, next, b) {\n    function times(x, y) {\n        return x * y;\n    }\n    return accumulate_r(times, 1, term, a, next, b);\n}\n\n//iterative process\nfunction accumulate_i(combiner, null_value, term, a, next, b) {\n    function iter(a, result) {\n        return a > b\n               ? result\n               : iter(next(a), combiner(term(a), result));\n    }\n    return iter(a, null_value);\n}\nfunction sum_i(term, a, next, b) {\n    function plus(x, y) {\n        return x + y;\n    }\n    return accumulate_i(plus, 0, term, a, next, b);\n}\nfunction product_i(term, a, next, b) {\n    function times(x, y) {\n        return x * y;\n    }\n    return accumulate_i(times, 1, term, a, next, b);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.33","id":"#ex-1.33","child":[{"body":" \n    You can\n    obtain an even more general version of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":"\n    (exercise ","tag":"#text"},{"tag":"REF","body":"1.32","href":"/sicpjs/1.3.1#ex-1.32"},{"body":")\n    by introducing the notion of a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"filter","tag":"#text"}]},{"body":" on the terms to be combined.  That is, combine only those\n    terms derived from values in the range that satisfy a specified condition.\n    The resulting \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filtered_accumulate"},{"body":"\n    abstraction takes the same arguments as accumulate, together with an\n    additional predicate of one argument that specifies the filter. Write\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filtered_accumulate"},{"body":"\n    as a\n    function.\n    Show how to express the following using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filtered_accumulate"},{"body":":\n      ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n        the sum of the squares of the prime numbers in the interval \n        ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" to ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":" \n        (assuming that you have an \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_prime"},{"body":" \n        predicate already written)\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        the product of all the positive integers less than\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"\n        that are\n        \n\trelatively prime to ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" (i.e.,\n\tall positive integers ","tag":"#text"},{"body":"$i < n$","tag":"LATEX"},{"body":" such that \n        ","tag":"#text"},{"body":"$\\textrm{GCD}(i,n)=1$","tag":"LATEX"},{"body":").\n      ","tag":"#text"}]}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":31,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0oFA4GYCuAdgMYAuAlgPbGgDOAtgIYA2rApveQPoAmlAG6V61AE4AKYgEpQAbxygloMR3KExdfJWJ9+QkeKkAaUACZpAbhwBfAiQo0tOvQOGjJxU+S683hsVkFZRU1DTp6AEdCZlUJH259d3FZAD5QYkUQ7NAAfgysnOUALlB-Pi543ySA0xlCorzQBL8DDwai0u1dGo8TZur-D1AAalQrW3syKloygwr6CWZTACMghtV1TVAV0ABSUGZQAF5T0AAGazspx1mRHgAHMUpGDil1kM3wjJOzpjZOIkhkYZFc8ERpk4GNFYm8AB4fZRfbZw0AAKlAcLBNxmdB0pHe8g2YW2dDGKGxENudAA5qQ+EtVoilMi6LtTscLk0jqU6QyVqYjgc1pSHLjQNpWD5VHpmKRSIRGIRWMwfBJSNRGCsdBwxHVlaweII2IQOMYOo1LUVpYxBXUOHDyKtTJLpczQls6Ed0isLdl8sQDUaTRw-SEupQpbqltIw-7QBqtTrJDaY6Y41bXbqOLL5Yrlaq3ontcRdfr2MHWKb01ba3Wcjb7Y60xkHU7QBn612lAKJZG3bH6xGozKeHKFUqVWri8ny4bjVWzR3uyuQo3W83mNIm+3O6uir2s4FRZDZk8XhweFEYqp6FfFYydu6qeKHlXFnDTABPd2fEl0VExi-awQjsP9PT7EcczHPNJ0LCQ30IehTHOc193ra9YTtUB8WdZd0Nre5z1eCY7BfKFVCnIRL2ImixGoPhCAoQk5BCBpyNmKhXg-b9fyRf9MXRUBgIaMDlA4vEKmIKhyC-CQESJRpWUxEDlDEpQJIGbgJEoPiWQEvkdLqWQOVQVSlHUj1viPaDx3zKc3i4rhTBQNCCKtSgpJkr8XNMXCMjc9zGhaUi8Foq8YVve9GAkAAWFzzisUAQFAAB2WKcBSyjVWox5nlePKGKY8gJAADiSlKUHOABWIA","body":"function filtered_accumulate(combiner, null_value,\n                             term, a, next, b, filter) {\n    return a > b\n           ? null_value\n           : filter(a)\n             ? combiner(term(a), \n                   filtered_accumulate(combiner, null_value, \n                                       term, next(a), next, \n                                       b, filter))\n             : filtered_accumulate(combiner, null_value, \n                                   term, next(a), next, \n                                   b, filter);\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.3.1#footnote-link-1","child":[{"body":"This series,\n    \n    usually written in the equivalent form \n    ","tag":"#text"},{"body":"$\\frac {\\pi}{4} = 1-\\frac{1}     {3}+\\frac{1}{5}-\\frac{1}{7}+\\cdots$","tag":"LATEX"},{"body":", \n    is due to Leibniz.  We'll see how to use this as the basis for some\n    fancy numerical tricks in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.3","href":"/sicpjs/3.5.3"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.3.1#footnote-link-2","child":[{"body":"Notice that we have used block structure\n    (section ","tag":"#text"},{"tag":"REF","body":"1.1.8","href":"/sicpjs/1.1.8"},{"body":") to embed the \n    declarations of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pi_next"},{"body":"\n    and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pi_term"},{"body":"\n    within\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pi_sum"},{"body":",\n    since these\n    functions\n    are unlikely to be useful for any other purpose.  We will see how to get rid\n    of them altogether in section ","tag":"#text"},{"tag":"REF","body":"1.3.2","href":"/sicpjs/1.3.2"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/1.3.1#footnote-link-3","child":[{"body":"The intent of exercises ","tag":"#text"},{"tag":"REF","body":"1.31","href":"/sicpjs/1.3.1#ex-1.31"},{"body":"–","tag":"#text"},{"tag":"REF","body":"1.33","href":"/sicpjs/1.3.1#ex-1.33"},{"body":" is to demonstrate the expressive\n\tpower that is attained by using an appropriate abstraction to\n\tconsolidate many seemingly disparate operations.  However, though\n\taccumulation and filtering are elegant ideas, our hands are somewhat\n\ttied in using them at this point since we do not yet have data\n\tstructures to provide suitable means of combination for these\n\tabstractions.  We will return to these ideas in\n\tsection ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":" when\n\twe show how to use ","tag":"#text"},{"tag":"EM","child":[{"body":"sequences","tag":"#text"}]},{"body":" as interfaces for combining\n\tfilters and accumulators to build even more powerful abstractions.  We\n\twill see there how these methods really come into their own as a\n\tpowerful and elegant approach to designing programs.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/1.3.1#footnote-link-4","child":[{"body":"This formula\n\twas discovered by the seventeenth-century\n\tEnglish mathematician\n\t\n\tJohn Wallis.","tag":"#text"}]}]