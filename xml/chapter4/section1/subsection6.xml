<SUBSECTION>
  <NAME>
    Internal <SPLITINLINE><SCHEME>Definitions</SCHEME><JAVASCRIPT>Declarations</JAVASCRIPT></SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:internal-definitions"/>
  <SPLIT>
    <SCHEME>
      <INDEX>internal definition<SUBINDEX>scope of name|(</SUBINDEX></INDEX>
      <INDEX>scope of a variable<SUBINDEX>internal <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>internal declaration<SUBINDEX>scope of name|(</SUBINDEX></INDEX>
      <INDEX>scope of a name<SUBINDEX>internal declaration</SUBINDEX></INDEX>
    </JAVASCRIPT>
  </SPLIT>
  <INDEX>block structure|(</INDEX>

  <TEXT>
    Our environment model of evaluation and our metacircular evaluator execute
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    in sequence, extending the environment frame one
    <SPLITINLINE><SCHEME>definition</SCHEME>
    <JAVASCRIPT>declaration</JAVASCRIPT></SPLITINLINE>
    at a time.
    This is particularly convenient for interactive
    program development, in which the programmer needs to freely mix the
    application of
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    with the
    <SPLITINLINE><SCHEME>definition</SCHEME>
    <JAVASCRIPT>declaration</JAVASCRIPT></SPLITINLINE>
    of new
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
    However, if we think carefully about the internal
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    used to implement block structure (introduced in
    section<SPACE/><REF NAME="sec:black-box"/>), we will find that
    name-by-name extension
    of the environment may not be the best way to
    <SPLITINLINE><SCHEME>define local variables.</SCHEME>
    <JAVASCRIPT>declare local names.</JAVASCRIPT></SPLITINLINE>
  </TEXT>

  <TEXT>
    Consider a
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    with internal 
    <SPLITINLINE><SCHEME>definitions,</SCHEME>
    <JAVASCRIPT>declarations,</JAVASCRIPT></SPLITINLINE>
    such as

    <SNIPPET EVAL="no">
      <SCHEME>
(define (f x)
   (define (even? n)
      (if (= n 0)
          true
          (odd? (- n 1))))
   (define (odd? n)
      (if (= n 0)
          false
          (even? (- n 1))))
   ^rest of body of^ f)
      </SCHEME>
      <JAVASCRIPT>
function f(x) {
    function is_even(n) {
        return n === 0
               ? true
               : is_odd(n - 1);
    }
    function is_odd(n) {
        return n === 0
               ? false
               : is_even(n - 1);
    }
    // rest of body of f
}    
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Our intention here is that the name
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in the body of the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE><SCHEME><SCHEMEINLINE>even?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    should refer to the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that is 
    <SPLITINLINE>
      <SCHEME>defined after <SCHEMEINLINE>even?</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>declared after <JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The scope of the name
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the entire body of <SCHEMEINLINE>f</SCHEMEINLINE>,
    not just the portion of the body of <SCHEMEINLINE>f</SCHEMEINLINE>
    starting at the point where the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE> for
      </SCHEME>
      <JAVASCRIPT>declaration of</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> occurs.
    Indeed, when we consider that
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is itself defined in terms of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>even?</SCHEMEINLINE><EMDASH/>so
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE><EMDASH/>so
      </JAVASCRIPT>
    </SPLITINLINE>
    that
    <SPLITINLINE><SCHEME><SCHEMEINLINE>even?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    are mutually recursive
    <SPLITINLINE><SCHEME>procedures<EMDASH/>we</SCHEME>
    <JAVASCRIPT>functions<EMDASH/>we</JAVASCRIPT></SPLITINLINE>
    see that the only satisfactory
    interpretation of the two
    <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE>s</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    is to regard them as if the names
    <SPLITINLINE><SCHEME><SCHEMEINLINE>even?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    were being added to the environment simultaneously.
    More generally, in block structure, the scope of a local name is the
    entire
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    body in which the
    <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>declaration</JAVASCRIPT></SPLITINLINE>
    is evaluated.
  </TEXT>

  <TEXT>
    As it happens, our interpreter will evaluate calls to
    <SCHEMEINLINE>f</SCHEMEINLINE>
    correctly, but for an <QUOTE>accidental</QUOTE> reason:
    Since the
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    of the internal
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    come first, no calls to these
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    will be evaluated until all of them have been
    <SPLITINLINE><SCHEME>defined.</SCHEME>
    <JAVASCRIPT>declared.</JAVASCRIPT></SPLITINLINE>
    Hence,
    <SPLITINLINE><SCHEME><SCHEMEINLINE>odd?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will have been
    <SPLITINLINE><SCHEME>defined</SCHEME>
    <JAVASCRIPT>declared</JAVASCRIPT></SPLITINLINE>
    by the time
    <SPLITINLINE><SCHEME><SCHEMEINLINE>even?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is executed.  In fact, our sequential evaluation mechanism will give the
    same result as a mechanism that directly implements simultaneous
    <SPLITINLINE><SCHEME>definition</SCHEME>
    <JAVASCRIPT>declaration</JAVASCRIPT></SPLITINLINE>
    for any
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    in which the 
    <INDEX>internal definition<SUBINDEX>restrictions on</SUBINDEX></INDEX>
    internal
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    come first in a body and
    evaluation of the value expressions for the 
    <SPLITINLINE><SCHEME>defined variables</SCHEME>
    <JAVASCRIPT>declared names</JAVASCRIPT></SPLITINLINE>
    doesn<APOS/>t
    actually use any of the
    <SPLITINLINE><SCHEME>defined variables.</SCHEME>
    <JAVASCRIPT>declared names.</JAVASCRIPT></SPLITINLINE>
    (For an example of a
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    that doesn<APOS/>t obey these restrictions,
    so that sequential
    <SPLITINLINE><SCHEME>definition</SCHEME>
    <JAVASCRIPT>declaration</JAVASCRIPT></SPLITINLINE>
    isn<APOS/>t equivalent to
    simultaneous
    <SPLITINLINE><SCHEME>definition,</SCHEME>
    <JAVASCRIPT>declaration,</JAVASCRIPT></SPLITINLINE>
    see exercise<SPACE/><REF NAME="ex:simultaneous-def"/>.)<FOOTNOTE>Wanting
    programs to not depend on this evaluation mechanism is the reason for the
    <QUOTE>management is not responsible</QUOTE> remark in
    footnote<SPACE/><REF NAME="foot:management"/> of chapter<SPACE/>1.
    <SPLITINLINE>
      <SCHEME>
	By insisting that internal definitions come first and do not use each
	other while the definitions are being evaluated, the IEEE standard
	for Scheme leaves implementors some choice in the mechanism used to
	evaluate these definitions.  The choice of one evaluation rule rather
	than another here may seem like a small issue, affecting only the
	interpretation of <QUOTE>badly formed</QUOTE> programs.
	However, we will see in
	section<SPACE/><REF NAME="sec:lexical-addressing"/> that moving to a
	model of simultaneous scoping for internal definitions
	avoids some nasty
	difficulties that would otherwise arise in implementing a compiler.
      </SCHEME>
      <JAVASCRIPT>
	The designers of JavaScript chose to resolve this issue by moving
	all internal function declarations to the beginning of the function
	body, and thus the discussion might seem moot.
	However, this mechanism is only applied to function declarations
	and not to
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>
	declarations.<!-- FIXME: remove uncommenting once Chapter 5.5.6 is added -->
  <!-- , and we will see in -->
  <!--   section<SPACE/><REF NAME="sec:lexical-addressing"/> that moving to a -->
  <!--   model of simultaneous scoping for internal declarations avoids some nasty -->
  <!--   difficulties that would otherwise arise in implementing a compiler. -->
      </JAVASCRIPT>
    </SPLITINLINE>
    </FOOTNOTE>
  </TEXT>

  <TEXT>
    There is, however, a simple way to treat
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    so that
    internally
    <SPLITINLINE><SCHEME>defined</SCHEME>
    <JAVASCRIPT>declared</JAVASCRIPT></SPLITINLINE>
    names have truly simultaneous scope<EMDASH/>just create
    all local
    <SPLITINLINE><SCHEME>variables</SCHEME>
    <JAVASCRIPT>names</JAVASCRIPT></SPLITINLINE>
    that will be in the current environment before
    evaluating any of the value expressions.
    One way to do this is by a
    syntax transformation on
    <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE> expressions.</SCHEME>
    <JAVASCRIPT>function definition expressions.<FOOTNOTE>We can view function
    declaration statements as a combination of
    constant declaration statements and function definition expressions,
    as explained in section<SPACE/><REF NAME="sec:lambda"/>, and thus the
    same technique applies to function declaration statements.</FOOTNOTE>
  </JAVASCRIPT>
    </SPLITINLINE>
    Before evaluating the body of a
    <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE> expression,</SCHEME>
    <JAVASCRIPT>function definition expression,</JAVASCRIPT></SPLITINLINE>
    we 
    <INDEX>scanning out internal definitions</INDEX>
    <INDEX>internal definition<SUBINDEX>scanning out</SUBINDEX></INDEX>
    <QUOTE>scan out</QUOTE> and eliminate all the internal
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    in the body.  The internally
    <SPLITINLINE><SCHEME>defined variables</SCHEME>
    <JAVASCRIPT>declared names</JAVASCRIPT></SPLITINLINE>
    will be created with a
    <SPLITINLINE><SCHEME><SCHEMEINLINE>let</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE>
    and then set to their
    values by assignment.
    <SPLITINLINE><JAVASCRIPT>In the following, we shall focus on
    variable declarations using
    <JAVASCRIPTINLINE>let</JAVASCRIPTINLINE>; constant declarations
    using <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>function</JAVASCRIPTINLINE> can be handled
    similarly.</JAVASCRIPT></SPLITINLINE>
    For example, the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE>

    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(lambda ^vars^
   (define u ^e1^)
   (define v ^e2^)
   ^e3^)
      </SCHEME>
      <JAVASCRIPT>
($\textit{vars}$) => {
    let u = $e_1$;
    let v = $e_2$;
    $\textit{statement}$
}
      </JAVASCRIPT>
    </SNIPPET>

    would be transformed into

    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(lambda ^vars^
   (let ((u '*unassigned*)
         (v '*unassigned*))
      (set! u ^e1^)
      (set! v ^e2^)
      ^e3^))
      </SCHEME>
      <JAVASCRIPT>
( $\textit{vars}$ ) => {
    return ( (u, v) => {
               u = $e_1$;
               v = $e_2$;
               $\textit{statement}$
           })("*unassigned*", "*unassigned*");
}
      </JAVASCRIPT>
    </SNIPPET>
    where
    <SPLITINLINE><SCHEME><SCHEMEINLINE>*unassigned*</SCHEMEINLINE>
    is a special symbol</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>
    is a special symbol</JAVASCRIPT>
    </SPLITINLINE>
    that causes looking up a
    <SPLITINLINE><SCHEME>variable</SCHEME>
    <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    to signal an error if an attempt is made to use the
    value of the not-yet-assigned
    <SPLITINLINE><SCHEME>variable.</SCHEME>
    <JAVASCRIPT>name.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    An alternative strategy for scanning out internal
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT>
    </SPLITINLINE>
    is shown in exercise<SPACE/><REF NAME="ex:alternative-scanout"/>.
    Unlike the transformation
    shown above, this enforces the restriction that the
    <SPLITINLINE><SCHEME>defined variables<APOS/></SCHEME>
    <JAVASCRIPT>declared names<APOS/></JAVASCRIPT>
    </SPLITINLINE>
    values can be evaluated without using any of the
    <SPLITINLINE><SCHEME>variables<APOS/></SCHEME>
    <JAVASCRIPT>names<APOS/></JAVASCRIPT>
    </SPLITINLINE>
    values.<SPLITINLINE><SCHEME><FOOTNOTE>The IEEE standard for Scheme
    allows for different implementation strategies by specifying that it
    is up to the programmer to obey this restriction, not up to the
    implementation to enforce it.  Some Scheme implementations, including
    <INDEX>MIT Scheme<SUBINDEX>internal definitions</SUBINDEX></INDEX>
    MIT Scheme, use the transformation shown above.  Thus, some programs
    that don<APOS/>t obey this restriction will in fact run in such
    implementations.</FOOTNOTE></SCHEME></SPLITINLINE>
    <INDEX>internal definition<SUBINDEX>scope of name|)</SUBINDEX></INDEX>
    <INDEX>block structure|)</INDEX>
  </TEXT>

  <EXERCISE>
    In this exercise we implement the method just described for
    interpreting internal definitions.
    <SPLITINLINE><SCHEME>
      We assume that the evaluator supports <SCHEMEINLINE>let</SCHEMEINLINE>
      (see exercise<SPACE/><REF NAME="ex:implement-let"/>).
    </SCHEME></SPLITINLINE>
    <OL>
      <!--  \indcode{lookup-variable-value}[for scanned-out definitions] -->
      <LI>
	Change
	<SPLITINLINE><SCHEME>
	  <SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>
	</SCHEME>
	<JAVASCRIPT>
	  <JAVASCRIPTINLINE>lookup_name_value</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
	(section<SPACE/><REF NAME="sec:operations-on-environments"/>)
	to signal an error if
	the value it finds is the
	<SPLITINLINE>
	  <SCHEME>symbol <SCHEMEINLINE>*unassigned*</SCHEMEINLINE>.
	  </SCHEME>
	  <JAVASCRIPT>string <JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	<!--  \indcode{scan-out-defines} -->
	Write a
	<SPLITINLINE><SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
	<SPLITINLINE><SCHEME><SCHEMEINLINE>scan-out-defines</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>scan_out_let</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
	that takes a
	<SPLITINLINE><SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
	body and returns an equivalent one that has no internal
	definitions, by making the transformation described above.
      </LI>
      <LI>
	Install
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>scan-out-defines</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>scan_out_let</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	in the interpreter, either in 
	<SPLITINLINE><SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>make_function</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
	<SCHEMEINLINE></SCHEMEINLINE>
	or in
	<SPLITINLINE><SCHEME><SCHEMEINLINE>procedure-body</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>function_body</JAVASCRIPTINLINE>
	</JAVASCRIPT></SPLITINLINE>
	(see section<SPACE/><REF NAME="sec:eval-data-structures"/>).
	Which place is better?
	Why?
      </LI>
    </OL>
    <LABEL NAME="ex:internal-defs"/>
  </EXERCISE>


  <EXERCISE>
    Draw diagrams of the environment in effect when evaluating the
    <SPLITINLINE>
      <SCHEME>
	expression <LATEXINLINE>e3</LATEXINLINE> in the
	procedure
      </SCHEME>
      <JAVASCRIPT>
	<LATEXINLINE>$\textit{statement}$</LATEXINLINE> in the
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    in the text, comparing how this
    will be structured when
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    are interpreted sequentially with
    how it will be structured if
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    are scanned out as described.
    Why is there an extra frame in the transformed program?  Explain why
    this difference in environment structure can never make a difference
    in the behavior of a correct program.  Design a way to make the
    interpreter implement the <QUOTE>simultaneous</QUOTE> scope rule for
    internal 
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    without constructing the extra frame.
  </EXERCISE>


  <EXERCISE>
    Consider an alternative strategy for scanning out
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT>
    </SPLITINLINE>
    that translates the example in the text to
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(lambda ^vars^
   (let ((u '*unassigned*)
         (v '*unassigned*))
      (let ((a ^e1^)
            (b ^e2^))
         (set! u a)
   (set! v b))
   ^e3^))
      </SCHEME>
      <JAVASCRIPT>
( $\textit{vars}$ ) => {
    return ( (u, v) => {
               return ( (a, b) => {
                          u = a;
                          v = b;
                          $\textit{statement}$
		      })($e_1$, $e_2$);
           })("*unassigned*", "*unassigned*");
}
      </JAVASCRIPT>
    </SNIPPET>

    Here <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE>
    are meant to represent new variable names, created by the interpreter,
    that do not appear in the user<APOS/>s program. Consider the
    <SCHEMEINLINE>solve</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    from section<SPACE/><REF NAME="sec:streams-and-delayed-evaluation"/>:

    <SNIPPET>
      <SCHEME>
<!-- \indcodeplus*{solve}{differential equation}[scan@with scanned-out definitions]-->
(define (solve f y0 dt)
(define y (integral (delay dy) y0 dt))
(define dy (stream-map f y))
      y)
      </SCHEME>
      <JAVASCRIPT>
function solve(f, y0, dt) {
    const y = integral( () => dy, y0, dt);
    const dy = stream_map(f, y);
    return y;
}
      </JAVASCRIPT>
    </SNIPPET>

    Will this
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    work if internal definitions are scanned out as
    shown in this exercise?  What if they are scanned out as shown in the
    text?  Explain.
    <LABEL NAME="ex:alternative-scanout"/>
  </EXERCISE>

  <EXERCISE>
    Ben Bitdiddle, Alyssa P. Hacker, and Eva Lu Ator are arguing about
    the desired result of evaluating the expression
    <SNIPPET>
      <SCHEME>
(let ((a 1))
   (define (f x)
      (define b (+ a x))
      (define a 5)
      (+ a b))
   (f 10))
      </SCHEME>
      <JAVASCRIPT>
let a = 1;
function f(x) {      
    let b = a + x;
    let a = 5;
    return a + b;
}
f(10);    
      </JAVASCRIPT>
    </SNIPPET>

    Ben asserts that the result should be obtained using the sequential
    rule for
    <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE>:</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>let</JAVASCRIPTINLINE>:</JAVASCRIPT></SPLITINLINE>
    <SCHEMEINLINE>b</SCHEMEINLINE> is
    <SPLITINLINE><SCHEME>defined</SCHEME>
    <JAVASCRIPT>declared</JAVASCRIPT></SPLITINLINE>
    to be 11, then
    <SCHEMEINLINE>a</SCHEMEINLINE> is
    <SPLITINLINE><SCHEME>defined</SCHEME>
    <JAVASCRIPT>declared</JAVASCRIPT></SPLITINLINE>
    to be 5, so the result is 16.  Alyssa objects that mutual
    recursion requires the simultaneous scope rule for internal
    <SPLITINLINE><SCHEME>procedure definitions,</SCHEME>
    <JAVASCRIPT>function declarations,</JAVASCRIPT></SPLITINLINE>
    and that it is unreasonable to treat
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    names
    differently from other names.  Thus, she argues for the mechanism
    implemented in exercise<SPACE/><REF NAME="ex:internal-defs"/>.
    This would lead to
    <SCHEMEINLINE>a</SCHEMEINLINE> being unassigned at the time that the value for <SCHEMEINLINE>b</SCHEMEINLINE> is to
    be computed.  Hence, in Alyssa<APOS/>s view the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    should produce an
    error.  Eva has a third opinion.  She says that if the
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    of
    <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE>
    are truly meant to be simultaneous, then the value 5 for
    <SCHEMEINLINE>a</SCHEMEINLINE> should be used in evaluating
    <SCHEMEINLINE>b</SCHEMEINLINE>.  Hence, in Eva<APOS/>s
    view <SCHEMEINLINE>a</SCHEMEINLINE> should be 5,
    <SCHEMEINLINE>b</SCHEMEINLINE> should be 15, and the result should
    be 20.  Which (if any) of these viewpoints do you support?  Can you
    devise a way to implement internal
    <SPLITINLINE><SCHEME>definitions</SCHEME>
    <JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE>
    so that they behave as
    Eva prefers?<FOOTNOTE>The
    <SPLITINLINE><SCHEME>MIT implementors of Scheme</SCHEME>
    <JAVASCRIPT>designers of JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    support Alyssa on
    the following grounds: Eva is in principle correct<EMDASH/>the definitions
    should be regarded as simultaneous.  But it seems difficult to
    implement a general, efficient mechanism that does what Eva requires.
    In the absence of such a mechanism, it is better to generate an error
    in the difficult cases of simultaneous definitions (Alyssa<APOS/>s notion)
    than to produce an incorrect answer (as Ben would have it).</FOOTNOTE>
    <LABEL NAME="ex:simultaneous-def"/>
  </EXERCISE>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<LABEL NAME="ex:letrec"/>
	<!-- 
	     \indsf*{letrec}
	     \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[letrec@<SCHEMEINLINE>letrec</SCHEMEINLINE>]
	-->
	Because internal definitions look sequential but are actually
	simultaneous, some people prefer to avoid them entirely, and use the
	special form <SCHEMEINLINE>letrec</SCHEMEINLINE> instead.  
	<SCHEMEINLINE>Letrec</SCHEMEINLINE> looks like
	<SCHEMEINLINE>let</SCHEMEINLINE>,
	so it is not surprising that the variables it binds are bound
	simultaneously and have the same scope as each other.  The sample
	procedure <SCHEMEINLINE>f</SCHEMEINLINE> above can be written without
	internal definitions, but with exactly the same meaning, as
	<SNIPPET EVAL="no">
	  <SCHEME>
(define (f x)
   (letrec ((even?
               (lambda (n)
                  (if (= n 0)
                      true
                      (odd? (- n 1)))))
            (odd?
               (lambda (n)
                  (if (= n 0)
                      false
                      (even? (- n 1))))))
      ^rest of body of^ f))
	  </SCHEME>
	</SNIPPET>
	<SCHEMEINLINE>Letrec</SCHEMEINLINE> expressions, which have the form
	<SNIPPET EVAL="no">
	  <SCHEME>
	    (letrec ((^var$_{1}$^ ^exp$_{1}$^) ^$\ldots$^ (^var$_{n}$^ ^exp$_{n}$^))
	    ^body^)
	  </SCHEME>
	</SNIPPET>
	are a variation on <SCHEMEINLINE>let</SCHEMEINLINE> in which the
	expressions <LATEXINLINE>exp$_{k}$</LATEXINLINE> that provide the
	initial values for the variables <LATEXINLINE>var$_{k}$</LATEXINLINE>
	are evaluated in an environment that includes all the
	<SCHEMEINLINE>letrec</SCHEMEINLINE>
	bindings.  This permits recursion in the bindings, such as the mutual
	recursion of <SCHEMEINLINE>even?</SCHEMEINLINE> and
	<SCHEMEINLINE>odd?</SCHEMEINLINE>
	in the example above, or
	<INDEX>factorial<SUBINDEX>letrec@with
	<SCHEMEINLINE>letrec</SCHEMEINLINE></SUBINDEX></INDEX>
	the evaluation of 10 factorial with
	<SNIPPET>
	  <SCHEME>
(letrec ((fact
            (lambda (n)
               (if (= n 1)
                   1
                   (* n (fact (- n 1)))))))
        (fact 10))
	  </SCHEME>
	</SNIPPET>
	<OL>
	  <LI>
	    Implement <SCHEMEINLINE>letrec</SCHEMEINLINE> as a derived
	    expression, by transforming
	    a <SCHEMEINLINE>letrec</SCHEMEINLINE> expression into a
	    <SCHEMEINLINE>let</SCHEMEINLINE> expression as shown in
	    the text above or in
	    exercise<SPACE/><REF NAME="ex:alternative-scanout"/>.
	    That is, the <SCHEMEINLINE>letrec</SCHEMEINLINE> variables
	    should be created with a <SCHEMEINLINE>let</SCHEMEINLINE>
	    and then be assigned their values with
	    <SCHEMEINLINE>set!</SCHEMEINLINE>.
	  </LI>
	  <LI>
	    Louis Reasoner is confused by all this fuss about internal
	    definitions.  The way he sees it, if you don<APOS/>t like to use
	    <SCHEMEINLINE>define</SCHEMEINLINE> inside a
	    procedure, you can just use <SCHEMEINLINE>let</SCHEMEINLINE>.
	    Illustrate what is loose about his reasoning by drawing an
	    environment diagram that shows the environment in which the 
	    <SCHEMEINLINE>^rest of body of^ f</SCHEMEINLINE>
	    is evaluated during evaluation of the expression
	    <SCHEMEINLINE>(f 5)</SCHEMEINLINE>, with
	    <SCHEMEINLINE>f</SCHEMEINLINE> defined as in this exercise.
	    Draw an environment diagram for the same evaluation, but with
	    <SCHEMEINLINE>let</SCHEMEINLINE> in
	    place of <SCHEMEINLINE>letrec</SCHEMEINLINE> in the definition of
	    <SCHEMEINLINE>f</SCHEMEINLINE>.
	  </LI>
	</OL>
      </EXERCISE>
    </SCHEME>
  </SPLIT>

  <EXERCISE>
    <INDEX>recursive procedure<SUBINDEX>specifying without
    <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	Amazingly, Louis<APOS/>s intuition in
	exercise<SPACE/><REF NAME="ex:letrec"/>
	is correct.
    It is indeed possible to specify recursive
    procedures
    without using <SCHEMEINLINE>letrec</SCHEMEINLINE>
    (or even <SCHEMEINLINE>define</SCHEMEINLINE>),
    although the method for accomplishing this is much more subtle than
    Louis imagined.
      </SCHEME>
      <JAVASCRIPT>
	For recursion, we currently make use of the fact that the
	scope of a constant declaration is the surrounding block.
	An occurrence of the function name in its body can refer
	to the function, because it lies in the scope of the
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> 
	that declares the name.
	Louis Reasoner thinks that there ought to be a way to
	specify recursive functions without using 
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> or
	<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>. 
	Amazingly, Louis<APOS/>s intuition 
	is correct.
	It is indeed possible to specify recursive
	functions without using
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> or
	<JAVASCRIPTINLINE>let</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>,
	although the method for accomplishing this is much more subtle
	than Louis imagined.
      </JAVASCRIPT>
    </SPLITINLINE>
    The following expression computes 10 factorial by
    applying a recursive
    <INDEX>factorial<SUBINDEX>letrec@without
    <SCHEMEINLINE>letrec</SCHEMEINLINE> or
    <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
    factorial
    <SPLITINLINE><SCHEME>procedure:</SCHEME><JAVASCRIPT>function:</JAVASCRIPT></SPLITINLINE><FOOTNOTE>This example illustrates a programming
    trick for formulating recursive
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    without using
    <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE>.</SCHEME>
    <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> or
	<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>.
    </JAVASCRIPT></SPLITINLINE>
    The
    <INDEX>Y@<LATEXINLINE>$Y$</LATEXINLINE> operator</INDEX>
    most general trick of this sort is the <LATEXINLINE>$Y$</LATEXINLINE>
    <EM>operator</EM>, which can
    be used to give a <QUOTE>pure
    <LATEXINLINE>$\lambda$</LATEXINLINE>-calculus</QUOTE> implementation of
    <INDEX>Stoy, Joseph E.</INDEX><INDEX>Gabriel, Richard P.</INDEX>
    recursion.  (See <CITATION>Stoy 1977</CITATION> for details on the
    lambda calculus, and
    <CITATION>Gabriel 1988</CITATION> for an exposition of the
    <LATEXINLINE>$Y$</LATEXINLINE> operator in Scheme.)</FOOTNOTE>
    <SNIPPET>
      <SCHEME>
((lambda (n)
    ((lambda (fact)
        (fact fact n))
     (lambda (ft k)
        (if (= k 1)
            1
            (* k (ft ft (- k 1)))))))
 10)
      </SCHEME>
      <JAVASCRIPT>
(n => (fact => fact(fact, n))
      ( (ft, k) => k === 1
                   ? 1
                   : k * ft(ft, k - 1) 
      )
)
(10);
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Check (by evaluating the expression) that this really does compute
	factorials.  Devise an analogous expression for computing Fibonacci
	numbers.
      </LI>
      <LI>
	Consider the following
	<SPLITINLINE><SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>,
	which includes mutually recursive internal definitions:
	<SNIPPET>
          <SCHEME>
(define (f x)
   (define (even? n)
      (if (= n 0)
          true
      (odd? (- n 1))))
   (define (odd? n)
      (if (= n 0)
          false
          (even? (- n 1))))
   (even? x))
          </SCHEME>
          <JAVASCRIPT>
function f(x) {
    function is_even(n) {
        return n === 0
               ? true
               : is_odd(n - 1);
    }
    function is_odd(n) {
        return n === 0
               ? false
               : is_even(n - 1);
    }
    return is_even(x);
}    
	  </JAVASCRIPT>
	</SNIPPET>
	Fill in the missing expressions to complete an alternative definition
	of <SCHEMEINLINE>f</SCHEMEINLINE>, which uses
	<SPLITINLINE>
	  <SCHEME>
	    neither internal definitions nor <SCHEMEINLINE>letrec</SCHEMEINLINE>:
	  </SCHEME>
	  <JAVASCRIPT>
	    neither 
	    <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> nor
	    <JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> nor
	    internal
	    function declarations:
	  </JAVASCRIPT>
	</SPLITINLINE>

	<SNIPPET EVAL="no">
          <SCHEME>
(define (f x)
   ((lambda (even? odd?)
  (even? even? odd? x))
    (lambda (ev? od? n)
  (if (= n 0) true (od? ^??^ ^??^ ^??^)))
    (lambda (ev? od? n)
  (if (= n 0) false (ev? ^??^ ^??^ ^??^)))))
          </SCHEME>
	  <JAVASCRIPT>
function f(x) {
    return (
        (is_even, is_odd) => 
           is_even(is_even, is_odd, x)
      )
      ( (ev, od, n) =>
           n === 0 ? true : od(??, ??, ??),
        (ev, od, n) =>
           n === 0 ? false : ev(??, ??, ??) 
      );
}
	  </JAVASCRIPT>
	</SNIPPET>
      </LI>
    </OL>
  </EXERCISE>
  
</SUBSECTION>
