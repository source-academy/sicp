<SUBSECTION>
   <NAME>
    扩展练习: 区间算术
  </NAME> 

  <LABEL NAME="sec:interval-arith"></LABEL>
   <INDEX>区间算术<OPEN></OPEN></INDEX> 
   <INDEX>算术<SUBINDEX>区间上</SUBINDEX><OPEN></OPEN></INDEX> 
   <TEXT>
    Alyssa P. Hacker 正在设计一个系统来帮助人们解决工程问题。她希望在其系统中提供一个功能，即可以操作具有已知精度的不精确数量（例如物理设备的测量参数），这样当对这些近似数量进行计算时，结果将是具有已知精度的数字。
  </TEXT> 
   <TEXT>
    电气工程师将使用 Alyssa 的系统来计算电气量。有时他们需要通过公式
    $R_{p}$ 计算两个电阻 $R_{1}$ 和 $R_{2}$ 的并联等效<INDEX>电阻<SUBINDEX>并联电阻公式</SUBINDEX></INDEX>，公式如下：
    
      \[
      \begin{array}{lll}
      R_{p} &amp; = &amp; \dfrac{1}{1/R_{1}+1/R_{2}}
      \end{array}
      \]
    
    电阻值通常仅在由电阻制造商保证的某种 <INDEX>电阻<SUBINDEX>电阻容差</SUBINDEX></INDEX> 容差范围内是已知的。例如，如果您购买一个标有 <QUOTE>6.8 ohms with 10% tolerance</QUOTE> 的电阻，您只能确定电阻在 $6.8-0.68=6.12$ 到 $6.8+0.68=7.48$ 欧姆之间。因此，如果您将 6.8 欧姆 10% 的电阻与 4.7 欧姆 5% 的电阻并联，其组合电阻可以从约 2.58 欧姆（如果两个电阻处于下限）到约 2.97 欧姆（如果两个电阻处于上限）。
  </TEXT> 
   <TEXT>
    Alyssa 的想法是实现 “区间算术”，作为用于组合 “区间”（代表不精确数量可能值范围的对象）的一组算术运算。添加、减去、乘以或除以两个区间的结果本身就是一个区间，代表结果的范围。
  </TEXT> 
  <TEXT> 
    Alyssa 假设存在一个称为“区间”的抽象对象，该对象有两个端点：下限和上限。她还假设，给定一个区间的端点，她可以使用数据构造器 <INDEX><USE>make_interval</USE></INDEX> 
    <SPLITINLINE>
      make-interval.
      <JAVASCRIPT><JAVASCRIPTINLINE>make_interval</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Alyssa 首先编写了一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    用于两个区间的加法。她推理出，和的最小值可能是两个下限之和，和的最大值可能是两个上限之和：
<SNIPPET PAGE="94">
      <INDEX><DECLARATION>add_interval</DECLARATION></INDEX>
      <NAME>add_interval</NAME>
      <REQUIRES>make_interval</REQUIRES>
      <REQUIRES>print_interval</REQUIRES>
      <EXPECTED>[ 4, 7 ]</EXPECTED>
      <EXAMPLE>add_interval_example</EXAMPLE>
      <SCHEME>
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
      </SCHEME>
      <JAVASCRIPT>
function add_interval(x, y) {
    return make_interval(lower_bound(x) + lower_bound(y),
                         upper_bound(x) + upper_bound(y));
}
      </JAVASCRIPT>
    </SNIPPET> 
    Alyssa 还通过找到边界积的最小值和最大值，并将它们用作结果区间的边界来求两个区间的积。
    <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_min</USE><ECMA>Math.min</ECMA></SUBINDEX></INDEX>
    <INDEX><USE>math_min</USE> (原语函数)</INDEX>
    <SPLITINLINE>
      (Min
      <JAVASCRIPT>(The functions <JAVASCRIPTINLINE>math_min</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    并且
    <INDEX><USE>math_max</USE> (原语函数)</INDEX>
    <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_max</USE><ECMA>Math.max</ECMA></SUBINDEX></INDEX>
    <SPLITINLINE>
      max
      <JAVASCRIPT><JAVASCRIPTINLINE>math_max</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    是用于查找任意数量参数的最小值或最大值的原语。
<SNIPPET PAGE="94">
      <INDEX><DECLARATION>mul_interval</DECLARATION></INDEX>
      <NAME>mul_interval</NAME>
      <REQUIRES>make_interval</REQUIRES>
      <REQUIRES>print_interval</REQUIRES>
      <EXPECTED>&apos;[ 3 , 10 ]&apos;</EXPECTED>
      <EXAMPLE>mul_interval_example</EXAMPLE>
      <SCHEME>
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
      </SCHEME>
      <JAVASCRIPT>
function mul_interval(x, y) {
    const p1 = lower_bound(x) * lower_bound(y);
    const p2 = lower_bound(x) * upper_bound(y);
    const p3 = upper_bound(x) * lower_bound(y);
    const p4 = upper_bound(x) * upper_bound(y);
    return make_interval(math_min(p1, p2, p3, p4),
                         math_max(p1, p2, p3, p4));
}
      </JAVASCRIPT>
    </SNIPPET> 
    为了将两个区间相除，Alyssa 将第一个区间乘以第二个区间的倒数。注意，倒数区间的边界是上限的倒数和下限的倒数，顺序不变。
<SNIPPET PAGE="94" POSTPADDING="no">
      <INDEX><DECLARATION>div_interval</DECLARATION></INDEX>
      <NAME>div_interval</NAME>
      <REQUIRES>mul_interval</REQUIRES>
      <REQUIRES>print_interval</REQUIRES>
      <EXPECTED>&apos;[ 0.2 , 0.6666666666666666 ]&apos;</EXPECTED>
      <EXAMPLE>div_interval_example</EXAMPLE>
      <SCHEME>
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
      </SCHEME>
      <JAVASCRIPT>
function div_interval(x, y) {
    return mul_interval(x, make_interval(1 / upper_bound(y),
                                         1 / lower_bound(y)));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <EXERCISE> 
    Alyssa 的程序是不完整的，因为她尚未指定区间抽象的实现。以下是区间构造器的定义：
<SNIPPET PAGE="94" HIDE="yes">
      <NAME>make_interval</NAME>
      <SCHEME>
(define (make-interval a b) (cons a b))
      </SCHEME>
      <JAVASCRIPT>
function make_interval(x, y) { 
    return pair(x, y); 
}
function lower_bound(i) { 
    return head(i);
}
function upper_bound(i) { 
    return tail(i);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="94" HIDE="yes">
      <NAME>print_interval</NAME>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
// printing the interval in one line requires some string
// manipulation: stringify turns a number into a string 
// and the operator + can be applied to strings for
// string concatenation
function print_interval(i) {
    return &quot;[ &quot;  + stringify(lower_bound(i)) + 
           &quot; , &quot; + stringify(upper_bound(i)) + &quot; ]&quot;;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="94" EVAL="no">
      <INDEX><DECLARATION>make_interval</DECLARATION><FRAGILE></FRAGILE></INDEX>
      <NAME>make_interval_exercise</NAME>
      <SCHEME>
(define (make-interval a b) (cons a b))
      </SCHEME>
      <JAVASCRIPT>
function make_interval(x, y) { return pair(x, y); }
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="94" HIDE="yes">
      <NAME>add_interval_example</NAME>
      <SCHEME>
(add-interval (make-interval 1 2) (make-interval 3 5))
      </SCHEME>
      <JAVASCRIPT>
print_interval(add_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
add_interval(make_interval(1, 2), 
             make_interval(3, 5));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET PAGE="94" HIDE="yes">
      <NAME>mul_interval_example</NAME>
      <SCHEME>
(mul-interval (make-interval 1 2) (make-interval 3 5))
      </SCHEME>
      <JAVASCRIPT>
print_interval(mul_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="94" HIDE="yes">
      <NAME>div_interval_example</NAME>
      <SCHEME>
(div-interval (make-interval 1 2) (make-interval 3 5))
      </SCHEME>
      <JAVASCRIPT>
print_interval(div_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
      </JAVASCRIPT>
    </SNIPPET> 
    定义选择器 
    <INDEX><USE>upper_bound</USE></INDEX> 
    <SPLITINLINE>
      upper-bound
      <JAVASCRIPT><JAVASCRIPTINLINE>upper_bound</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和 
     <INDEX><USE>lower_bound</USE></INDEX> 
    <SPLITINLINE>
      lower-bound
      <JAVASCRIPT><JAVASCRIPTINLINE>lower_bound</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    来完成实现。
<LABEL NAME="ex:alyssa-interval-start"></LABEL>
     <SOLUTION>
      
	<NAME>upper_bound</NAME>
	<JAVASCRIPT>
function make_interval(x, y) {
    return pair(x, y);
}
function lower_bound(x) { 
    return head(x); 
}
function upper_bound(x) { 
    return tail(x); 
}
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
     <LABEL NAME="ex:2_7"></LABEL>
  </EXERCISE>

   <EXERCISE> 
    使用类似于 Alyssa 的推理，描述如何计算两个区间的差。定义一个对应的减法
    <SPLITINLINE>
      过程,
    <JAVASCRIPT>函数,</JAVASCRIPT></SPLITINLINE>
    叫做 
     <INDEX><USE>sub_interval</USE></INDEX> 
    <SPLITINLINE>
      sub-interval.<JAVASCRIPT><JAVASCRIPTINLINE>sub_interval</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <SOLUTION>
      
	<REQUIRES>make_interval</REQUIRES>
	<REQUIRES>print_interval</REQUIRES>
	<EXPECTED>&apos;[ -1.5 , 0.4 ]&apos;</EXPECTED>
	<EXAMPLE>sub_interval_example</EXAMPLE>      
	<JAVASCRIPT>
function sub_interval(x, y) {
    return make_interval(lower_bound(x) - upper_bound(y),
                         upper_bound(x) - lower_bound(y));
}
	</JAVASCRIPT>
      
      
	<NAME>sub_interval_example</NAME>
	<JAVASCRIPT>
print_interval(sub_interval(make_interval(0, 1), 
                            make_interval(0.6, 1.5)));
	</JAVASCRIPT>
      
    </SOLUTION>
    
  </EXERCISE> 

  <EXERCISE>  
    <INDEX>区间宽度</INDEX>
    <EM>区间的宽度</EM>是其上限与下限之间差的一半。宽度是区间所指定数值的一个不确定性度量。对于某些算术运算，合并两个区间的结果的宽度仅仅是参数区间宽度的函数，而对于其他运算，组合的宽度不是参数区间宽度的函数。证明两个区间的和（或差）的宽度仅仅是被加（或减）的区间宽度的函数。举例说明这对于乘法或除法不成立。
 <SOLUTION>
      我们用 $W(i)$ 表示区间 $i$ 的宽度，其下限和上限分别用 $L(i)$ 和 $U(i)$ 表示。两个区间 $i_1$ 和 $i_2$ 的宽度根据定义分别为 $(U(i_1) - L(i_1))/2$ 和 $(U(i_2) - L(i_2))/2$。将两个区间相加得到区间 $[ L(i_1) + L(i_2), U(i_1) + U(i_2)]$，其宽度为
      \[(U(i_1) + U(i_2) - (L(i_1) + L(i_2)))/2\]
      \[= (U(i_1) - L(i_1))/2 + (U(i_2) - L(i_2))/2\]
      \[= W(i_1) + W(i_2)\]
      减法的推理类似。
      <P></P>
      乘法结果的区间宽度没有这样好的性质。例如，将任何区间与宽度为零的区间 $[ 0, 0 ]$ 相乘得到的是宽度为零的区间，而将任何区间 $i$ 与宽度为零的区间 $[ 1, 1 ]$ 相乘得到的区间宽度为 $W(i)$。除法的推理类似。
    </SOLUTION>
     <LABEL NAME="ex:2_9"></LABEL>
  </EXERCISE>

   <EXERCISE>
    Ben Bitdiddle, 一个专家系统程序员，看到 Alyssa 的程序后评论说，除以跨越零的区间含义不明确。修改 Alyssa 的程序以检查此情况，并在发生时发出错误信号。
    <INDEX><USE>div_interval</USE><SUBINDEX>除以零</SUBINDEX></INDEX>
    
    <SOLUTION>
      
	<REQUIRES>upper_bound</REQUIRES>
	<REQUIRES>mul_interval</REQUIRES>
	<REQUIRES>print_interval</REQUIRES>
	<EXPECTED>&apos;[ 0.2 , 0.6666666666666666 ]&apos;</EXPECTED>
	<EXAMPLE>div_interval_example</EXAMPLE>
	<JAVASCRIPT>
function div_interval(x, y) {
    return lower_bound(y) &lt;= 0 &amp;&amp; upper_bound(y) &gt;= 0
        ? error(&quot;division error (interval spans 0)&quot;)
        : mul_interval(x, make_interval(1 / upper_bound(y),
                                        1 / lower_bound(y)));
}
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
  </EXERCISE> 

  <EXERCISE> 
    顺便提一下，Ben 还隐晦地评论道：通过测试区间端点的符号，可以将
    <INDEX><USE>mul_interval</USE><SUBINDEX>更高效版本</SUBINDEX></INDEX>
    <SPLITINLINE>mul-interval
    <JAVASCRIPT><JAVASCRIPTINLINE>mul_interval</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    分为九种情况，其中只有一种情况需要超过两次乘法。根据 Ben 的建议重写这个
    <SPLITINLINE>
      过程
    <JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>。
<LABEL NAME="ex:alyssa-interval-end"></LABEL>
     <SOLUTION>
      
	<REQUIRES>upper_bound</REQUIRES>
	<REQUIRES>print_interval</REQUIRES>
	<EXAMPLE>mul_interval_example</EXAMPLE>
	<EXPECTED>&apos;[ 3 , 10 ]&apos;</EXPECTED>
	<JAVASCRIPT>
function p(n) {
    return n &gt;= 0;
}
function n(n) {
    return ! p(n);
}
function the_trouble_maker(xl, xu, yl, yu) {
    const p1 = xl * yl;
    const p2 = xl * yu;
    const p3 = xu * yl;
    const p4 = xu * yu;
    return make_interval(math_min(p1, p2, p3, p4),
                  math_max(p1, p2, p3, p4));
}
function mul_interval(x, y) {  
    const xl = lower_bound(x);
    const xu = upper_bound(x);
    const yl = lower_bound(y);
    const yu = upper_bound(y);
    return p(xl) &amp;&amp; p(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
           ? make_interval(xl * yl, xu * yu)
           : p(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
           ? make_interval(xu * yl, xu * yu)
           : p(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
           ? make_interval(xu * yl, xl * yu)
           : n(xl) &amp;&amp; p(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
           ? make_interval(xl * yu, xu * yu)
           : n(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
           ? make_interval(xu * yl, xl * yl)
           : n(xl) &amp;&amp; n(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
           ? make_interval(xl * yu, xu * yl)
           : n(xl) &amp;&amp; n(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
           ? make_interval(xl * yu, xl * yl)
           : n(xl) &amp;&amp; n(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
           ? make_interval(xu * yu, xl * yl)
           : n(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
           ? the_trouble_maker(xl, xu, yl, yu)
           : error(&quot;lower larger than upper&quot;);
}
	</JAVASCRIPT>
      
    </SOLUTION>
   </EXERCISE>
   &lt;练习后跟文本&gt;&lt;/练习后跟文本&gt; 
   &lt;简短页面 LINES=&quot;4&quot;&gt;&lt;/简短页面&gt;  
   <TEXT>
    修正程序后，Alyssa 向一个潜在用户展示了她的程序，该用户抱怨她的程序解决了错误的问题。他想要一个可以处理表示为中心值和加法容差的数字的程序；例如，他希望使用诸如 $3.5\pm 0.15$ 而不是 $[3.35, 3.65]$ 的区间。Alyssa 回到她的办公桌前，通过提供一个可选的构造器和可选的选择器解决了这个问题：
    
      <INDEX><DECLARATION>make_center_width</DECLARATION></INDEX>
      <INDEX><DECLARATION>center</DECLARATION></INDEX>
      <INDEX><DECLARATION>width</DECLARATION></INDEX>
      <NAME>make_center_width</NAME>
      <REQUIRES>make_interval</REQUIRES>
      <EXAMPLE>make_center_width_example</EXAMPLE>
      <EXPECTED>0.5</EXPECTED>
      
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
      
      <JAVASCRIPT>
function make_center_width(c, w) {
    return make_interval(c - w, c + w);
}
function center(i) {
    return (lower_bound(i) + upper_bound(i)) / 2;
}
function width(i) {
    return (upper_bound(i) - lower_bound(i)) / 2;
}
      </JAVASCRIPT>
    
    
      <NAME>make_center_width_example</NAME>
      <REQUIRES>make_interval</REQUIRES>
      
      
      <JAVASCRIPT>
const my_interval = make_center_width(1, 0.5);
width(my_interval);
      </JAVASCRIPT>
    
  </TEXT> 
   <TEXT>
    不幸的是，Alyssa 的大多数用户是工程师。实际的工程情况通常涉及测量仅有小的不确定性，以区间的宽度与中心的比率来衡量。不确定性测量为区间宽度与区间中点的比率。工程师通常对子系统的参数指定百分比容差，如前面给出的电阻规格。
  </TEXT> 

   <EXERCISE>
    定义一个构造器 
     <INDEX><USE>make_center_percent</USE></INDEX> 
    <SPLITINLINE>
      make-center-percent
      <JAVASCRIPT><JAVASCRIPTINLINE>make_center_percent</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    该构造器接受一个中心值和一个百分比容差，并生成所需的区间。您还必须定义一个选择器
    percent，用于生成给定区间的百分比容差。center 选择器与上面显示的相同。
    
    <SOLUTION>
      
	<NAME>make_center_percent</NAME>
	<REQUIRES>make_center_width</REQUIRES>
	<EXAMPLE>make_center_percent_example</EXAMPLE>
	<EXPECTED>9.999999999999993</EXPECTED>
	<JAVASCRIPT>
function make_center_percent(center, percent) {
    const width = center * (percent / 100);
    return make_center_width(center, width);
}
function percent(i) {
    return (width(i) / center(i)) * 100;
}
	</JAVASCRIPT>
      
      
	<NAME>make_center_percent_example</NAME>
	<JAVASCRIPT>
const my_interval = make_center_percent(6.0, 10);
percent(my_interval);
	</JAVASCRIPT>
      
    </SOLUTION>
  </EXERCISE> 

   <EXERCISE> 
    在假设小百分比容差的前提下，证明在因数的容差方面存在一个用于近似的简单公式，表示两个区间乘积的百分比容差。您可以通过假设所有数字为正来简化问题。
    
    <SOLUTION>
      设一个以 $i$ 为中心的区间的最大误差为 $\Delta i$，以 $j$ 为中心的区间的最大误差为 $\Delta j$，以及乘积结果以 $k$ 为中心的最大误差为 $\Delta k$。那么：
      \[ k + \Delta k = (i+\Delta i) * (j+\Delta j)
      =  ij + j \Delta i + i\Delta j + \Delta i \Delta j \]
      由于 $k = i j$
      \[ \Delta k = j\Delta i + i \Delta j + \Delta i\Delta j \] 
      由于我们假设 $\Delta i \ll i$ 且 $\Delta j \ll j$，因此可以忽略项 $\Delta i \Delta j$，并得到
      \[ \Delta k = j \Delta i + i \Delta j \]
      用容差表示，我们得到：
      \[ \Delta k / k
      = (j \Delta i + i \Delta j) / ij = \Delta i/i + \Delta j/j \]
      因此，区间乘积结果的容差（大致上）是其参数容差之和。
    </SOLUTION>
  </EXERCISE> 【94:1†source】
   &lt;练习后跟文本&gt;&lt;/练习后跟文本&gt; 
  <TEXT> 
    经过大量的工作，Alyssa P. Hacker 交付了她完成的系统。几年后，在她已经完全忘记这件事的时候，她接到了一个愤怒用户 Lem E. Tweakit 的狂热电话。似乎 Lem 发现
    <INDEX>电阻<SUBINDEX>并联电阻公式</SUBINDEX></INDEX>
    的公式可以用两种代数上等效的方式书写：
<LATEX>
      \[
      \dfrac{R_{1}R_{2}}{R_{1}+R_{2}}
      \]
    </LATEX> 
    和
     <LATEX>
      \[
      \dfrac{1}{1/R_{1}+1/R_{2}}
      \]
    </LATEX> 
    他编写了以下两个程序，每个程序计算并联电阻公式的方式不同：
     <SNIPPET PAGE="95">
      <NAME>par</NAME>
      <REQUIRES>add_interval</REQUIRES>
      <REQUIRES>mul_interval</REQUIRES>
      <REQUIRES>div_interval</REQUIRES>
      <REQUIRES>print_interval</REQUIRES>
      <EXAMPLE>par_example</EXAMPLE>
      <EXPECTED>&apos;[ 2 , 4.363636363636363 ][ 2.5454545454545454 , 3.428571428571429 ]&apos;</EXPECTED>
      <SCHEME>
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1))) 
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))
      </SCHEME>
      <JAVASCRIPT>
function par1(r1, r2) {
    return div_interval(mul_interval(r1, r2),
                        add_interval(r1, r2));
}
function par2(r1, r2) {
    const one = make_interval(1, 1);
    return div_interval(one,
                        add_interval(div_interval(one, r1),
                                     div_interval(one, r2)));
}
      </JAVASCRIPT>                
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>par_example</NAME>
      <JAVASCRIPT>
display(print_interval(par1(pair(4, 6), pair(7, 8))));

display(print_interval(par2(pair(4, 6), pair(7, 8))));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
print_interval(par1(pair(4, 6), pair(7, 8)))
+
print_interval(par2(pair(4, 6), pair(7, 8)));
      </JAVASCRIPT_TEST>
    </SNIPPET> 
    Lem 抱怨 Alyssa 的程序对这两种计算方式给出了不同的答案。这是一个严重的抱怨。
   </TEXT>
   <EXERCISE> 
    证明 Lem 是对的。研究系统在各种算术表达式上的表现。创建一些区间 $A$ 和 $B$，并用它们计算表达式 $A/A$ 和 $A/B$。使用宽度为中心值的小百分比的区间将会获得更多的洞察。检查以中心百分比形式计算的结果（参见练习 <REF NAME="ex:make-center-percent"></REF>）。
    
    <SOLUTION>
      表达式 $A/A$ 很有意思，因为如果区间是为了表示一个特定的（虽然精确度不够）值，结果应该是完全为 1（宽度为 0），然而区间除法将导致一个宽度为正的区间。上面的方法没有识别出相同项的多次出现，因此它们将会遇到该问题。
    </SOLUTION>
  </EXERCISE> 

   <EXERCISE>
    Eva Lu Ator，另一位用户，也注意到了由不同但在代数上等效的表达式计算出的不同区间。她说，使用 Alyssa 的系统进行区间运算的公式，如果能够写成这样一种形式，即没有代表不确定数字的
    <SPLITINLINE>
      
	变量
      
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>
    是重复的，将生成更严格的误差界限。因此，她说，par2 比 par1 是一个“更好”的并联电阻程序。她对吗？为什么？
    <SOLUTION>
      她是对的。区间算术中所谓的<EM>依赖问题</EM>出现在同一输入值（或中间项）出现在区间函数中时。第二种表述更好，因为每个输入只出现一次，因此天真的区间计算的结果是最优的。
    </SOLUTION>
    
  </EXERCISE> 

   <EXERCISE>
    一般来说，解释一下为什么等效的代数表达式可能导致不同的答案。你能设计一个没有这个缺点的区间算术包吗，还是这个任务不可能完成？（警告：这个问题非常困难。）

    <SOLUTION>
      使用线性和多项式逼近来解决区间算术中的依赖问题，分别形成仿射算术和泰勒级数方法。
    </SOLUTION>
    
  </EXERCISE> 
   <INDEX>区间算术<CLOSE></CLOSE></INDEX> 
   <INDEX>算术<SUBINDEX>区间上</SUBINDEX><CLOSE></CLOSE></INDEX> 
</SUBSECTION>
