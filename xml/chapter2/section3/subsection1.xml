    <SUBSECTION>
      <NAME>
        <SPLITINLINE><SCHEME>Quotation</SCHEME><JAVASCRIPT>Strings</JAVASCRIPT></SPLITINLINE>
      </NAME>

      <LABEL NAME="sec:quotation"/>
      <LABEL NAME="sec:strings"/>

      <SPLIT>
        <SCHEME>
	  <INDEX>quotation|(</INDEX>
        </SCHEME>
        <JAVASCRIPT>
	  <INDEX>strings|(</INDEX>
        </JAVASCRIPT>
      </SPLIT>

      <SPLIT>
        <SCHEME>
          <TEXT>
            If we can form compound data using symbols, we can have lists such as

                <INDEX>Sussman, Julie Esther Mazel, nieces of</INDEX>

            <SNIPPET EVAL="no">
              <SCHEME>
(a b c d)
(23 45 17)
((Norah 12) (Molly 9) (Anna 7) (Lauren 6) (Charlotte 4))
              </SCHEME>
            </SNIPPET>

            Lists containing symbols can look just like the expressions of our
            language:

            <SNIPPET EVAL="no">
              <SCHEME>
(* (+ 23 45) (+ x 9))

(define (fact n) (if (= n 1) 1 (* n (fact (- n 1)))))
              </SCHEME>
            </SNIPPET>
          </TEXT>
          <TEXT>
            In order to manipulate symbols we need a new element in our language:
            the ability to <EM>quote</EM> a data object.  Suppose we want to
            construct the list <SCHEMEINLINE>(a b)</SCHEMEINLINE>.  We can<APOS/>t 
            accomplish this with <SCHEMEINLINE>(list a b)</SCHEMEINLINE>, because 
            this expression constructs
            a list of the <EM>values</EM> of <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> rather than
            the symbols themselves.  This issue is well known in the context of
            <INDEX>quotation<SUBINDEX>natural@in natural language</SUBINDEX></INDEX>
            <INDEX>natural language<SUBINDEX>quotation in</SUBINDEX></INDEX>
            natural languages, where words and sentences may be regarded either as
            semantic entities or as character strings (syntactic entities).  The
            common practice in natural languages is to use quotation marks to
            indicate that a word or a sentence is to be treated literally as a
            string of characters.  For instance, the first letter of <QUOTE>John</QUOTE> is
            clearly <QUOTE>J.</QUOTE>  If we tell somebody <QUOTE>say your name aloud,</QUOTE> we expect
            to hear that person<APOS/>s name.  However, if we tell somebody <QUOTE>say <QUOTE>your name</QUOTE> aloud,</QUOTE> we expect to hear the words <QUOTE>your name.</QUOTE>  Note that
            we are forced to nest quotation marks to describe what somebody else
            might say.<FOOTNOTE>Allowing quotation in a language wreaks havoc
              with the ability to reason about the language in simple terms, because
              it destroys the notion that equals can be substituted for equals.  For
              example, three is one plus two, but the word <QUOTE>three</QUOTE> is not the
              phrase <QUOTE>one plus two.</QUOTE>  Quotation is powerful because it gives us a way
              to build expressions that manipulate other expressions (as we will see
              when we write an interpreter in chapter<SPACE/>4). But allowing statements in
              a language that talk about other statements in that language makes it
              very difficult to maintain any coherent principle of what <QUOTE>equals can
                be substituted for equals</QUOTE> should mean.  For example, if we know that
              <INDEX>Venus</INDEX>
              the evening star is the morning star, then from the statement <QUOTE>the
                evening star is Venus</QUOTE> we can deduce <QUOTE>the morning star is Venus.</QUOTE>
              However, given that <QUOTE>John knows that the evening star is Venus</QUOTE> we
              cannot infer that <QUOTE>John knows that the morning star is Venus.</QUOTE></FOOTNOTE>
          </TEXT>
          <TEXT>
            <INDEX>quotation<SUBINDEX>Lisp@of Lisp data objects</SUBINDEX></INDEX>
            We can follow this same practice to identify lists and symbols that are
            to be treated as data objects rather than as expressions to be
            evaluated.  However, our format for quoting differs from that of
            natural languages in that we place a quotation mark (traditionally,
            the single 
            <!--\indcodeplus{'}{(single quote)}-->
            quote symbol<SPACE/><SCHEMEINLINE>'</SCHEMEINLINE>) only at the beginning of the object
            to be quoted.  We can get away with this in Scheme syntax because we
            rely on blanks and parentheses to delimit objects.  Thus, the meaning
            of the single quote character is to quote the next object.<FOOTNOTE>The single quote is different 
              <INDEX>quotation mark, single vs.<SPACE/>double</INDEX>
              <INDEX>quotation<SUBINDEX>character@of character strings</SUBINDEX></INDEX>
              <INDEX>character strings<SUBINDEX>quotation of</SUBINDEX></INDEX>
              <!-- \indcodeplus{""}{(double quote)} -->
              from the double quote we have
              been using to enclose character strings to be printed.  Whereas the
              single quote can be used to denote lists or symbols, the double quote
              is used only with character strings.  In this book, the only use for
              character strings is as items to be printed.</FOOTNOTE>
          </TEXT>
          <TEXT>
            <INDEX>symbol(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
            Now we can distinguish between symbols and their values:

            <SNIPPET>
              <NAME>ab</NAME>
              <SCHEME>
(define a 1)

(define b 2)
              </SCHEME>
            </SNIPPET>

            <SNIPPET>
              <REQUIRES>ab</REQUIRES>
              <SCHEME>
(list a b)
              </SCHEME>
              <SCHEMEOUTPUT>
                (1 2)
              </SCHEMEOUTPUT>
            </SNIPPET>

            <SNIPPET>
              <SCHEME>
(list 'a 'b)
              </SCHEME>
              <SCHEMEOUTPUT>
                (a b)
              </SCHEMEOUTPUT>
            </SNIPPET>

            <SNIPPET>
              <REQUIRES>ab</REQUIRES>
              <SCHEME>
                (list 'a b)
              </SCHEME>
              <SCHEMEOUTPUT>
                (a 2)
              </SCHEMEOUTPUT>
            </SNIPPET>
          </TEXT>
          <TEXT>
            <INDEX>list(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
            Quotation also allows us to type in compound objects, using the
            conventional printed representation for lists:<FOOTNOTE>Strictly, our
              use of the quotation mark violates the general rule that all compound
              expressions in our language should be delimited by parentheses
              and look like lists.  We
              <!--
                  \indsf*{quote}
                  \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[quote@<SCHEMEINLINE>quote</SCHEMEINLINE>]
                -->
              can recover this consistency by introducing a special form <SCHEMEINLINE>quote</SCHEMEINLINE>, which serves the same purpose as the quotation mark.  Thus, we
              would type <SCHEMEINLINE>(quote a)</SCHEMEINLINE> instead of <SCHEMEINLINE>'a</SCHEMEINLINE>, and we would type <SCHEMEINLINE>(quote (a b c))</SCHEMEINLINE> instead of <SCHEMEINLINE>'(a b c)</SCHEMEINLINE>.  This is precisely how the
              interpreter works.  The quotation mark is just a single-character
              abbreviation for wrapping the next complete expression with 
              <SCHEMEINLINE>quote</SCHEMEINLINE> 
              to form <SCHEMEINLINE>(quote ^expression^)</SCHEMEINLINE>.  This is important
              because it maintains the principle that any expression seen by the
              interpreter can be manipulated as a data object.  For instance, we
              could construct the expression
              <SCHEMEINLINE>(car '(a b c))</SCHEMEINLINE>, which is the same as <SCHEMEINLINE>(car (quote (a b c)))</SCHEMEINLINE>,
              by evaluating <SCHEMEINLINE>(list 'car (list 'quote '(a b c)))</SCHEMEINLINE>.</FOOTNOTE>

            <SNIPPET>
              <SCHEME>
(car '(a b c))
              </SCHEME>
              <SCHEMEOUTPUT>
a
              </SCHEMEOUTPUT>
            </SNIPPET>

            <SNIPPET>
              <SCHEME>
(cdr '(a b c))
              </SCHEME>
              <SCHEMEOUTPUT>
(b c)
              </SCHEMEOUTPUT>
            </SNIPPET>

            <INDEX>empty list<SUBINDEX>denoted as <SCHEMEINLINE>'()</SCHEMEINLINE></SUBINDEX></INDEX>
            <!-- \indcode{nil}[dispensing with] -->
            In keeping with this, we can obtain the empty list by evaluating <SCHEMEINLINE>'()</SCHEMEINLINE>, 
            and thus dispense with the variable <SCHEMEINLINE>nil</SCHEMEINLINE>.
          </TEXT>
          <TEXT>
            One additional primitive used in manipulating symbols is 
            <INDEX>equality<SUBINDEX>symbols@of symbols</SUBINDEX></INDEX>
            <INDEX>symbol(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
            <!--\indprim*{eq?}-->
            <!--\ind*{primitive
                <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
                (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[eq?@<SCHEMEINLINE>eq?</SCHEMEINLINE>]
                -->
            <SCHEMEINLINE>eq?</SCHEMEINLINE>,
            which takes two symbols as arguments and tests whether they are the
            same.<FOOTNOTE>We can consider two symbols to be <QUOTE>the same</QUOTE> if they
              consist of the same characters in the same order.  Such a definition
              skirts a deep issue that we are not yet ready to address: the meaning
              of <QUOTE>sameness</QUOTE> in a programming language.  We will return to this in
              chapter<SPACE/>3 (section<SPACE/><REF NAME="sec:costs-of-assignment"/>).</FOOTNOTE>
	      Using <SCHEMEINLINE>eq?</SCHEMEINLINE>,
              we can implement a useful procedure
              called <SCHEMEINLINE>memq</SCHEMEINLINE>.  This takes two
              arguments, a symbol and a list.  If the symbol is not contained in the
            list (i.e., is not <SCHEMEINLINE>eq?</SCHEMEINLINE> to any item in the list),
	    then <SCHEMEINLINE>memq</SCHEMEINLINE> returns false.  Otherwise, it returns the sublist of
            the list beginning with the first occurrence of the symbol:

            <SNIPPET>
              <NAME>memq</NAME>
              <EXAMPLE>memq_example</EXAMPLE>
              <SCHEME>
                <!-- \indcode*{memq} -->
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
              </SCHEME>
            </SNIPPET>

            For example, the value of

            <SNIPPET>
              <NAME>memq_example</NAME>
              <REQUIRES>memq</REQUIRES>
              <SCHEME>
(memq 'apple '(pear banana prune))
              </SCHEME>
            </SNIPPET>

            is false, whereas the value of

            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <SCHEME>
(memq 'apple '(x (apple sauce) y apple pear))
              </SCHEME>
            </SNIPPET>

            is <SCHEMEINLINE>(apple pear)</SCHEMEINLINE>.
          </TEXT>

          <EXERCISE>
            What would the interpreter print in response to evaluating each of the
            following expressions?

            <SNIPPET>
              <SCHEME>
(list 'a 'b 'c)
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <SCHEME>
(list (list 'george))
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <SCHEME>
(cdr '((x1 x2) (y1 y2)))
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <SCHEME>
(cadr '((x1 x2) (y1 y2)))
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <SCHEME>
(pair? (car '(a short list)))
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <SCHEME>
(memq 'red '((red shoes) (blue socks)))
              </SCHEME>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <SCHEME>
(memq 'red '(red shoes blue socks))
              </SCHEME>
            </SNIPPET>
          </EXERCISE>

          <EXERCISE> 
            Two lists are said to be 
            <!-- \indcode{equal?} -->
            <INDEX>equality<SUBINDEX>lists@of lists</SUBINDEX></INDEX>
            <INDEX>list(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
            <SCHEMEINLINE>equal?</SCHEMEINLINE> if they contain equal elements
            arranged in the same order.  For example,

            <SNIPPET HIDE="yes">
              <NAME>equal_definition</NAME>
              <SCHEME>
;; procedure equal? to be written by student
              </SCHEME>
            </SNIPPET>

            <SNIPPET>
              <REQUIRES>equal_definition</REQUIRES>
              <SCHEME>
(equal? '(this is a list) '(this is a list))
              </SCHEME>
            </SNIPPET>

            is true, but

            <SNIPPET>
              <REQUIRES>equal_definition</REQUIRES>
              <SCHEME>
(equal? '(this is a list) '(this (is a) list))
              </SCHEME>
            </SNIPPET>

            is false.  To be more precise, we can define <SCHEMEINLINE>equal?</SCHEMEINLINE>
            recursively in terms of the basic <SCHEMEINLINE>eq?</SCHEMEINLINE> equality of symbols by
            saying that <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are <SCHEMEINLINE>equal?</SCHEMEINLINE> if they are both
            symbols and the symbols are <SCHEMEINLINE>eq?</SCHEMEINLINE>, or if they are both lists such
            that <SCHEMEINLINE>(car a)</SCHEMEINLINE> is <SCHEMEINLINE>equal?</SCHEMEINLINE> to <SCHEMEINLINE>(car b)</SCHEMEINLINE> and 
            <SCHEMEINLINE>(cdr a)</SCHEMEINLINE> is <SCHEMEINLINE>equal?</SCHEMEINLINE> to <SCHEMEINLINE>(cdr b)</SCHEMEINLINE>.  
            Using this idea, implement
            <SCHEMEINLINE>equal?</SCHEMEINLINE> as a
            procedure.<FOOTNOTE>In practice, programmers
              use <SCHEMEINLINE>equal?</SCHEMEINLINE> to compare lists that contain numbers as well as
              symbols.  Numbers are not considered to be symbols.  The question
              <INDEX>number(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
              <INDEX>equality<SUBINDEX>numbers@of numbers</SUBINDEX></INDEX>
              of whether two numerically equal numbers (as tested by <SCHEMEINLINE>=</SCHEMEINLINE>) are also
              <SCHEMEINLINE>eq?</SCHEMEINLINE> is highly implementation-dependent.  A better definition
              of <SCHEMEINLINE>equal?</SCHEMEINLINE> (such as the one that comes as a primitive in Scheme)
              would also stipulate that if <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
              both numbers, then <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are <SCHEMEINLINE>equal?</SCHEMEINLINE> if they are
              numerically equal.</FOOTNOTE>
            <LABEL NAME="ex:equal?"/>
          </EXERCISE>

          <EXERCISE>
            Eva Lu Ator types to the interpreter the expression
            <SNIPPET>
              <SCHEME>
(car ''abracadabra)
              </SCHEME>
            </SNIPPET>

            To her surprise, the interpreter prints back <SCHEMEINLINE>quote</SCHEMEINLINE>.  Explain.
            <LABEL NAME="ex:double-quote"/>
          </EXERCISE>
        </SCHEME>

        <JAVASCRIPT>
	  <TEXT>
	    So far, we have used strings in order to display messages, using the functions
	    <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> and
	    <JAVASCRIPTINLINE>error</JAVASCRIPTINLINE>, as for example in 
	    exercise<SPACE/><REF NAME="ex:search-for-primes"/>). 
            We can form compound data using strings and have lists such as

                <INDEX>Sussman, Julie Esther Mazel, nieces of</INDEX>

            <SNIPPET EVAL="no" LATEX="yes">
              <JAVASCRIPT>
["a", ["b", ["c", ["d", null]]]]
list( ["Norah", 12], ["Molly", 9], ["Anna", 7],
      ["Lauren", 6], ["Charlotte", 4] )
              </JAVASCRIPT>
            </SNIPPET>

            Note that in order to distinguish strings from names, we surround them with
            double quotation marks. For example, the JavaScript expression <JAVASCRIPTINLINE>z</JAVASCRIPTINLINE>
            denotes the value of the name <JAVASCRIPTINLINE>z</JAVASCRIPTINLINE>, whereas the 
            JavaScript expression <JAVASCRIPTINLINE>"z"</JAVASCRIPTINLINE> denotes a string that consists of
            one single character, namely the last letter in the English alphabet in lower case.
            JavaScript follows the
            common practice in natural languages, where quotation marks
            indicate that a word or a sentence is to be treated literally as a
            string of characters.  For instance, the first letter of <QUOTE>John</QUOTE> is
            clearly <QUOTE>J.</QUOTE>  If we tell somebody <QUOTE>say your name aloud,</QUOTE> we expect
            to hear that person<APOS/>s name.  However, if we tell
	    somebody <QUOTE>say <QUOTE>your name</QUOTE> aloud,</QUOTE> we expect to hear the
	    words <QUOTE>your name.</QUOTE>  Note that
            we are forced to nest quotation marks to describe what somebody else
            might say.<FOOTNOTE>Allowing quotation in a language wreaks havoc
              with the ability to reason about the language in simple terms, because
              it destroys the notion that equals can be substituted for equals.  For
              example, three is one plus two, but the word <QUOTE>three</QUOTE> is not the
              phrase <QUOTE>one plus two.</QUOTE>  Quotation is powerful because it gives us a way
              to build expressions that manipulate other expressions (as we will see
              when we write an interpreter in chapter<SPACE/>4). But allowing statements in
              a language that talk about other statements in that language makes it
              very difficult to maintain any coherent principle of what <QUOTE>equals can
                be substituted for equals</QUOTE> should mean.  For example, if we know that
              <INDEX>Venus</INDEX>
              the evening star is the morning star, then from the statement <QUOTE>the
                evening star is Venus</QUOTE> we can deduce <QUOTE>the morning star is Venus.</QUOTE>
              However, given that <QUOTE>John knows that the evening star is Venus</QUOTE> we
              cannot infer that <QUOTE>John knows that the morning star is Venus.</QUOTE></FOOTNOTE>
          </TEXT>
          <TEXT>
            <INDEX>symbol(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
            Via quotation marks, we can distinguish between strings and names:

            <SNIPPET>
              <NAME>ab</NAME>
              <JAVASCRIPT>
const a = 1;
const b = 2;
            </JAVASCRIPT>
            </SNIPPET>

            <SNIPPET>
              <REQUIRES>ab</REQUIRES>
              <JAVASCRIPT>
list(a, b);
// [1, [2, null]]
            </JAVASCRIPT>
            </SNIPPET>

            <SNIPPET>
              <JAVASCRIPT>
list("a", "b");
// ["a", ["b", null]]
              </JAVASCRIPT>
            </SNIPPET>

            <SNIPPET>
              <REQUIRES>ab</REQUIRES>
              <JAVASCRIPT>
list("a", b);
// ["a", [2, null]]
              </JAVASCRIPT>
            </SNIPPET>
          </TEXT>
          <TEXT>
	    We can test whether two strings are the same, using
	    the operator <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>.<FOOTNOTE>
            We can consider two strings to be <QUOTE>the same</QUOTE> if they consist of
	    the same characters in the same order. 
	    Such a definition
              skirts a deep issue that we are not yet ready to address: the meaning
              of <QUOTE>sameness</QUOTE> in a programming language.  We will return to this in
              chapter<SPACE/>3 (section<SPACE/><REF NAME="sec:costs-of-assignment"/>).</FOOTNOTE> Using 
            <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>,
            we can implement a useful
            function
            called <JAVASCRIPTINLINE>member</JAVASCRIPTINLINE>.  This takes two
            arguments, a string and a list.  If the string is not contained in the
            list (i.e., is not <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> to any item in the list), 
            then <JAVASCRIPTINLINE>member</JAVASCRIPTINLINE> returns false.  Otherwise, it returns the sublist of
            the list beginning with the first occurrence of the string:

            <!-- \indcode*{memq} -->
            <SNIPPET>
              <NAME>memq</NAME>
              <EXAMPLE>memq_example</EXAMPLE>
              <JAVASCRIPT>
function member(item, x) {
    return is_null(x)
        ? false
        : item === head(x)
          ? x
          : member(item, tail(x));
}
              </JAVASCRIPT>
            </SNIPPET>

            For example, the value of

            <SNIPPET>
              <NAME>memq_example</NAME>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("apple", list("pear", "banana", "prune"));
              </JAVASCRIPT>
            </SNIPPET>

            is false, whereas the value of

            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("apple", 
     list("x", list("apple","sauce"), "y", "apple", "pear"));
	      </JAVASCRIPT>
            </SNIPPET>

            is <JAVASCRIPTINLINE>["apple", ["pear", null]]</JAVASCRIPTINLINE>.
          </TEXT>

          <EXERCISE>
            What would the interpreter print in response to evaluating each of the
            following expressions?
            <SNIPPET>
              <JAVASCRIPT>
list("a", "b", "c");
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
list(list("george"));
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
tail(list(list("x1", "x2"), list("y1", "y2")));
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
tail(head(list(list("x1", "x2"), list("y1", "y2"))));
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("red", list(list("red", "shoes"), list("blue", "socks")));
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("red", list("red", "shoes", "blue", "socks"));
              </JAVASCRIPT>
            </SNIPPET>

<SOLUTION>
            <SNIPPET>
              <JAVASCRIPT>
list("a", "b", "c");
// ["a", ["b", ["c", null]]]
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
list(list("george"));
// [["george", null], null]
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
tail(list(list("x1", "x2"), list("y1", "y2")));
// [["y1", ["y2", null]], null]
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <JAVASCRIPT>
tail(head(list(list("x1", "x2"), list("y1", "y2"))));
// ["x2", null]
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("red", list(list("red", "shoes"), list("blue", "socks")));
// false
              </JAVASCRIPT>
            </SNIPPET>
            <SNIPPET>
              <REQUIRES>memq</REQUIRES>
              <JAVASCRIPT>
member("red", list("red", "shoes", "blue", "socks"));
// ["red", ["shoes", ["blue", ["socks", null]]]]
              </JAVASCRIPT>
            </SNIPPET>
</SOLUTION>
	    
          </EXERCISE>

          <EXERCISE> <LABEL NAME="ex:equal?"/>
            We would like to define a function
            <!-- \indcode{equal?} -->
            <INDEX>equality<SUBINDEX>lists@of lists</SUBINDEX></INDEX>
            <INDEX>list(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
            <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> that checks whether two lists contain equal elements
            arranged in the same order.  For example,

            <SNIPPET HIDE="yes">
              <NAME>equal_definition</NAME>
              <JAVASCRIPT>
// function is_equal to be written by student
            </JAVASCRIPT>
            </SNIPPET>

            <SNIPPET>
	      <NAME>equal_example_1</NAME>
              <REQUIRES>equal_definition</REQUIRES>
              <JAVASCRIPT>
is_equal(list("this", "is", "a", "list"), 
         list("this", "is", "a", "list"));
              </JAVASCRIPT>
            </SNIPPET>

            is true, but

            <SNIPPET>
              <REQUIRES>equal_definition</REQUIRES>
              <JAVASCRIPT>
is_equal(list("this", "is", "a", "list"),
         list("this", list("is", "a"), "list"));
              </JAVASCRIPT>
            </SNIPPET>

            is false.  To be more precise, we can define <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE>
            recursively in terms of the basic <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> equality of strings by
            saying that <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> and <JAVASCRIPTINLINE>b</JAVASCRIPTINLINE> 
            are equal with respect to <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> if they are both
            strings and the strings are equal with respect to <JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>, 
            or if they are both lists such
            that <JAVASCRIPTINLINE>head(a)</JAVASCRIPTINLINE> is equal with respect to <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> to <JAVASCRIPTINLINE>head(b)</JAVASCRIPTINLINE> and 
            <JAVASCRIPTINLINE>tail(a)</JAVASCRIPTINLINE> is equal with respect to <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> to <JAVASCRIPTINLINE>tail(b)</JAVASCRIPTINLINE>.  
            Using this idea, implement
            <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> as a function.<FOOTNOTE>In practice, programmers
              use <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> to compare lists that contain numbers as well as
              strings.  Numbers are not considered to be strings.  A better definition
              of <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> 
              would also stipulate that if <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> and <JAVASCRIPTINLINE>b</JAVASCRIPTINLINE> are
              both numbers, then <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> and <JAVASCRIPTINLINE>b</JAVASCRIPTINLINE> are equal with respect to <JAVASCRIPTINLINE>is_equal</JAVASCRIPTINLINE> if they are equal with respect to<SPACE/><JAVASCRIPTINLINE>===</JAVASCRIPTINLINE>.</FOOTNOTE>
     <SOLUTION>       
        <SNIPPET>
          <NAME>is_equal</NAME>
	  <EXAMPLE>equal_example_1</EXAMPLE>
        <JAVASCRIPT>
function is_equal(a, b) {
    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;
            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))
           || 
           a === b;
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET></SOLUTION>
          </EXERCISE>

          <EXERCISE>
	    The JavaScript interpreter reads the characters after the double quotation mark
	    <JAVASCRIPTINLINE>"</JAVASCRIPTINLINE> 
	    until it finds another double quotation mark. All characters between
	    the two are part of the string, excluding the 
	    double quotation marks, themselves. What if we want a string to contain
	    double quotation marks? For this purpose, JavaScript also allows to use <EM>single</EM>
	    quotation marks to form strings, as for example in
	    <JAVASCRIPTINLINE>'say your name aloud'</JAVASCRIPTINLINE>.
	    Within singly-quoted strings, we can use double quotation marks, and vice versa,
	    so <JAVASCRIPTINLINE>'say "your name" aloud'</JAVASCRIPTINLINE> and
	    <JAVASCRIPTINLINE>"say 'your name' aloud"</JAVASCRIPTINLINE> are valid 
	    strings that have different characters in positions 5 and 15, if we start counting
	    at 1. Depending on the font in use, two single quotation marks might not be
	    easily distinguishable from a double quotation mark. Can you spot which is which
	    and work out the value of the following expression?
            <SNIPPET>
              <JAVASCRIPT>
" '' === '' "
	      </JAVASCRIPT>
              <JAVASCRIPT_RUN>
" '' === '' ";
	      </JAVASCRIPT_RUN>
            </SNIPPET>

	    <SOLUTION>
	      The given expression consists of a single string that contains four single quotation marks.
	    </SOLUTION>
            <LABEL NAME="ex:double-quote"/>
	  </EXERCISE>
	  
        </JAVASCRIPT>
      </SPLIT>

      <SPLIT>
        <SCHEME>
	  <INDEX>quotation|)</INDEX>
        </SCHEME>
        <JAVASCRIPT>
	  <INDEX>strings|)</INDEX>
        </JAVASCRIPT>
      </SPLIT>
      
    </SUBSECTION>
