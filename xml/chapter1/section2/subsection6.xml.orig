      <SUBSECTION>

        <NAME>Example: Testing for Primality</NAME>

        <LABEL NAME="sec:primality"/>
        <INDEX>prime number(s)<SUBINDEX>testing for|(</SUBINDEX></INDEX>
        <INDEX>prime number(s)|(</INDEX>

        <TEXT>
          This section describes two methods for checking the primality of an
          integer <LATEXINLINE>$n$</LATEXINLINE>, one with order of growth <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>, and a
          <QUOTE>probabilistic</QUOTE> algorithm with order of growth <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>.  The
          exercises at the end of this section suggest programming
          projects based on these algorithms.
        </TEXT>

        <SUBHEADING>
          <NAME>Searching for divisors</NAME>
        </SUBHEADING>

        <TEXT>
          Since ancient times, mathematicians have been fascinated by problems
          concerning prime numbers, and many people have worked on the problem
          of determining ways to test if numbers are prime.  One way
          to test if a number is prime is to find the number<APOS/>s divisors.  The
          following program finds the smallest integral divisor (greater than 1)
          of a given number<SPACE/><LATEXINLINE>$n$</LATEXINLINE>.  It does this in a straightforward way, by
          testing <LATEXINLINE>$n$</LATEXINLINE> for divisibility by successive integers starting with 2.

        <SNIPPET PAGE="50">
          <NAME>smallest_divisor_definition</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>smallest_divisor_example</EXAMPLE>
          <SCHEME>
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))
          </SCHEME>
          <JAVASCRIPT>
function smallest_divisor(n) {
    return find_divisor(n, 2);
}
function find_divisor(n, test_divisor) {
     return square(test_divisor) &gt; n
            ? n
            : divides(test_divisor, n)
              ? test_divisor
              : find_divisor(n, test_divisor + 1);
}
function divides(a, b) {
    return b % a === 0;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="50" HIDE="yes">
          <NAME>smallest_divisor_example</NAME>
          <REQUIRES>smallest_divisor_definition</REQUIRES>
          <SCHEME>
(smallest-divisor 42)
          </SCHEME>
          <JAVASCRIPT>
smallest_divisor(42)
          </JAVASCRIPT>
        </SNIPPET>
              <!-- \indcode*{find-divisor} -->
              <!-- \indcode*{divides?} -->
              <!-- \indcode*{smallest-divisor} -->
        </TEXT>

        <TEXT>
          We can test whether a number is prime as follows: <LATEXINLINE>$n$</LATEXINLINE> is prime if
          and only if <LATEXINLINE>$n$</LATEXINLINE> is its own smallest divisor.

              <!-- \indcode*{prime?} -->
        <SNIPPET PAGE="50">
          <NAME>prime_definition</NAME>
          <REQUIRES>smallest_divisor_definition</REQUIRES>
          <EXAMPLE>prime_example</EXAMPLE>
          <SCHEME>
(define (prime? n)
  (= n (smallest-divisor n)))
          </SCHEME>
          <JAVASCRIPT>
function is_prime(n) {
    return n === smallest_divisor(n);
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="50" HIDE="yes">
          <NAME>prime_example</NAME>
          <REQUIRES>prime_definition</REQUIRES>
          <SCHEME>
(prime? 42)
          </SCHEME>
          <JAVASCRIPT>
is_prime(42);
          </JAVASCRIPT>
        </SNIPPET>

        </TEXT>

        <TEXT>
          The end test for 
          <SPLITINLINE><SCHEME><SCHEMEINLINE>find-divisor</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>find_divisor</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
          is based on the fact that if <LATEXINLINE>$n$</LATEXINLINE>
          is not prime it must have a divisor less than or equal to
          <LATEXINLINE>$\sqrt{n}$</LATEXINLINE>.<FOOTNOTE>If 
            <LATEXINLINE>$d$</LATEXINLINE> is a divisor of 
            <LATEXINLINE>$n$</LATEXINLINE>, then so is 
            <LATEXINLINE>$n/d$</LATEXINLINE>.
            But <LATEXINLINE>$d$</LATEXINLINE> and 
            <LATEXINLINE>$n/d$</LATEXINLINE> cannot both be greater than 
            <LATEXINLINE>$\sqrt{n}$</LATEXINLINE>.</FOOTNOTE> 
          This means that the algorithm need only test divisors between 1 and
          <LATEXINLINE>$\sqrt{n}$</LATEXINLINE>.  Consequently, the number of steps required to identify
          <LATEXINLINE>$n$</LATEXINLINE> as prime will have order of growth <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>.
        </TEXT>

        <SUBHEADING>
          <NAME>The Fermat test</NAME>
        </SUBHEADING>

        <TEXT>
          <INDEX>Fermat test for primality|(</INDEX>
          <INDEX>prime number(s)<SUBINDEX>Fermat test for|(</SUBINDEX></INDEX>
          The <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> primality test is based on a result from number
          theory known as Fermat<APOS/>s Little 
          Theorem.<FOOTNOTE>Pierre de Fermat (1601<ENDASH/>1665) is 
            considered to be the founder of
            <INDEX>Fermat@Fermat, Pierre de</INDEX>
            <INDEX>number theory</INDEX>
            modern number theory.  He obtained many important number-theoretic
            results, but he usually announced just the results, without providing
            his proofs.  
            <INDEX>Fermats@Fermat<APOS/>s Little Theorem<SUBINDEX>proof</SUBINDEX></INDEX>
            Fermat<APOS/>s Little Theorem was stated in a letter he wrote in
            1640.  The first published proof was given by 
            <INDEX>Euler, Leonhard<SUBINDEX>proof of Fermat<APOS/>s Little Theorem</SUBINDEX></INDEX>
            Euler in 1736 (and an
            <INDEX>Leibniz, Baron Gottfried Wilhelm von<SUBINDEX>proof of Fermat<APOS/>s Little Theorem</SUBINDEX></INDEX>
            earlier, identical proof was discovered in the unpublished manuscripts
            of Leibniz).  The most famous of Fermat<APOS/>s results<EMDASH/>known as Fermat<APOS/>s
            Last Theorem<EMDASH/>was jotted down in 1637 in his copy of the book 
            <EM>Arithmetic</EM> (by the third-century Greek mathematician 
            <INDEX>Diophantus<APOS/>s <EM>Arithmetic</EM>, Fermat<APOS/>s copy of</INDEX>
            Diophantus) with the
            remark <QUOTE>I have discovered a truly remarkable proof, but this margin is
              too small to contain it.</QUOTE>  Finding a proof of Fermat<APOS/>s Last Theorem
            became one of the most famous challenges in number theory.  A complete
            <INDEX>Wiles, Andrew</INDEX>
            solution was finally given in 1995 by Andrew Wiles of Princeton University.</FOOTNOTE>

          <INDEX>Fermats@Fermat<APOS/>s Little Theorem</INDEX>
          <P>
            <B>Fermat<APOS/>s Little Theorem:</B> 
            If <LATEXINLINE>$n$</LATEXINLINE> is a prime number and 
            <LATEXINLINE>$a$</LATEXINLINE> is any positive integer less than 
            <LATEXINLINE>$n$</LATEXINLINE>, then <LATEXINLINE>$a$</LATEXINLINE> raised to the
            <LATEXINLINE>$n$</LATEXINLINE>th power is congruent to <LATEXINLINE>$a$</LATEXINLINE> 
            modulo <LATEXINLINE>$n$</LATEXINLINE>.
          </P>
          <INDEX>congruent modulo <LATEXINLINE>$n$</LATEXINLINE></INDEX>
          (Two numbers are said to be <EM>congruent modulo</EM> <LATEXINLINE>$n$</LATEXINLINE> if
          they both have the same remainder when divided by <LATEXINLINE>$n$</LATEXINLINE>.  The
          remainder of a number <LATEXINLINE>$a$</LATEXINLINE> when divided by 
          <LATEXINLINE>$n$</LATEXINLINE> is also referred to as
          the 
          <INDEX>remainder modulo <LATEXINLINE>$n$</LATEXINLINE></INDEX><INDEX>modulo <LATEXINLINE>$n$</LATEXINLINE></INDEX>
          <EM>remainder of</EM> <LATEXINLINE>$a$</LATEXINLINE> <EM>modulo</EM> <LATEXINLINE>$n$</LATEXINLINE>, or simply as <LATEXINLINE>$a$</LATEXINLINE> 
          <EM>modulo</EM> <LATEXINLINE>$n$</LATEXINLINE>.)
        </TEXT>

        <TEXT>
          If <LATEXINLINE>$n$</LATEXINLINE> is not prime, then, in general, most of the numbers <LATEXINLINE>$a&lt; n$</LATEXINLINE> will not
          satisfy the above relation.  This leads to the following algorithm for
          testing primality: Given a number <LATEXINLINE>$n$</LATEXINLINE>, pick a 
          <INDEX>random-number generator<SUBINDEX>primality@in primality testing</SUBINDEX></INDEX>
          random number <LATEXINLINE>$a &lt; n$</LATEXINLINE> and
          compute the remainder of <LATEXINLINE>$a^n$</LATEXINLINE> modulo <LATEXINLINE>$n$</LATEXINLINE>.  If the result is not equal to
          <LATEXINLINE>$a$</LATEXINLINE>, then <LATEXINLINE>$n$</LATEXINLINE> is certainly not prime.  If it is <LATEXINLINE>$a$</LATEXINLINE>, then chances are good
          that <LATEXINLINE>$n$</LATEXINLINE> is prime.  Now pick another random number <LATEXINLINE>$a$</LATEXINLINE> and test it with the
          same method.  If it also satisfies the equation, then we can be even more
          confident that <LATEXINLINE>$n$</LATEXINLINE> is prime.  By trying more and more values of <LATEXINLINE>$a$</LATEXINLINE>, we can
          increase our confidence in the result.  This algorithm is known as the
          Fermat test.
        </TEXT>

        <TEXT>
              <INDEX>exponentiation<SUBINDEX>modulo <LATEXINLINE>$n$</LATEXINLINE></SUBINDEX></INDEX>
              To implement the Fermat test, we need a <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> that computes the
              exponential of a number modulo another number:

        <SNIPPET PAGE="51">
          <NAME>expmod_definition</NAME>
          <EXAMPLE>expmod_example</EXAMPLE>
          <REQUIRES>even_definition</REQUIRES>
          <REQUIRES>square_definition</REQUIRES>
          <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (square (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))        
          </SCHEME>
          <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
             ? square(expmod(base, exp / 2, m)) % m
             : (base * expmod(base, exp - 1, m)) % m;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="51" HIDE="yes">
          <NAME>expmod_example</NAME>
          <REQUIRES>expmod_definition</REQUIRES>
          <SCHEME>
(expmod 4 3 5)
          </SCHEME>
          <JAVASCRIPT>
expmod(4, 3, 5);
          </JAVASCRIPT>
        </SNIPPET>
        </TEXT>

        <TEXT>
              This is very similar to the 
              <SPLITINLINE><SCHEME><SCHEMEINLINE>fast-expt</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> of
              Section<SPACE/><REF NAME="sec:exponentiation"/>.  It uses successive squaring, so
              that the number of steps grows logarithmically with the
              exponent.<FOOTNOTE>The reduction steps in the cases where the exponent
                <LATEXINLINE>$e$</LATEXINLINE> is greater than 1 are based on the fact that, for any integers
                <LATEXINLINE>$x$</LATEXINLINE>, <LATEXINLINE>$y$</LATEXINLINE>, and <LATEXINLINE>$m$</LATEXINLINE>, we can find the remainder of <LATEXINLINE>$x$</LATEXINLINE> times <LATEXINLINE>$y$</LATEXINLINE> modulo
                <LATEXINLINE>$m$</LATEXINLINE> by computing separately the remainders of <LATEXINLINE>$x$</LATEXINLINE> modulo <LATEXINLINE>$m$</LATEXINLINE> and <LATEXINLINE>$y$</LATEXINLINE>
                modulo <LATEXINLINE>$m$</LATEXINLINE>, multiplying these, and then taking the remainder of the
                result modulo <LATEXINLINE>$m$</LATEXINLINE>.  For instance, in the case where <LATEXINLINE>$e$</LATEXINLINE> is even, we
                compute the remainder of <LATEXINLINE>$b^{e/2}$</LATEXINLINE> modulo <LATEXINLINE>$m$</LATEXINLINE>, square this, and take
                the remainder modulo <LATEXINLINE>$m$</LATEXINLINE>.  This technique is useful because it means
                we can perform our computation without ever having to deal with
                numbers much larger than <LATEXINLINE>$m$</LATEXINLINE>.  (Compare
                Exercise<SPACE/><REF NAME="ex:Alyssas-expmod"/>.)</FOOTNOTE>
        </TEXT>

        <TEXT>
              The Fermat test is performed by choosing at random a number <LATEXINLINE>$a$</LATEXINLINE>
              between 1 and <LATEXINLINE>$n-1$</LATEXINLINE> inclusive and checking whether the remainder
              modulo <LATEXINLINE>$n$</LATEXINLINE> of the <LATEXINLINE>$n$</LATEXINLINE>th power of <LATEXINLINE>$a$</LATEXINLINE> is equal to <LATEXINLINE>$a$</LATEXINLINE>.  The random
              number <LATEXINLINE>$a$</LATEXINLINE> is chosen using the <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
              <!--
              \indprim*{random}
              \ind*{primitive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[random@<SCHEMEINLINE>random</SCHEMEINLINE> (<EM>ns</EM>)]
                -->
              <SCHEMEINLINE>random</SCHEMEINLINE>, which we assume 
	      <SPLITINLINE>
		<SCHEME>is included as a primitive in Scheme.</SCHEME>
		<JAVASCRIPT>our JavaScript environment defines as a primitive function.c</JAVASCRIPT>
	      </SPLITINLINE>
              <SPLITINLINE>
                <SCHEME>
                  <SCHEMEINLINE>Random</SCHEMEINLINE> 
                </SCHEME>
                <JAVASCRIPT>
                  The function <JAVASCRIPTINLINE>random</JAVASCRIPTINLINE>
                </JAVASCRIPT>
              </SPLITINLINE>
              returns a
              nonnegative integer less than its integer input.  Hence, to obtain a random
              number between 1 and <LATEXINLINE>$n-1$</LATEXINLINE>, 
              we call <SCHEMEINLINE>random</SCHEMEINLINE> with an input of
              <LATEXINLINE>$n-1$</LATEXINLINE> and add 1 to the result:

              <!--  \ind*{fermattest@<SCHEMEINLINE>fermat-test</SCHEMEINLINE>} -->

        <SNIPPET PAGE="52" HIDE="yes">
          <NAME>random_definition</NAME>
          <SCHEME>
;; random is predefined in Scheme
          </SCHEME>
          <JAVASCRIPT>
function random(n) {
    return math_floor(math_random() * n);
}
          </JAVASCRIPT>
        </SNIPPET>
     
        <SNIPPET PAGE="52">
          <NAME>fermat_test_definition</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <REQUIRES>expmod_definition</REQUIRES>
          <REQUIRES>random_definition</REQUIRES>
          <EXAMPLE>fermat_test_example</EXAMPLE>
          <SCHEME>
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
          </SCHEME>
          <JAVASCRIPT>
function fermat_test(n) {
    function try_it(a) {
        return expmod(a, n, n) === a;
    }
    return try_it(1 + random(n - 1));
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="51" HIDE="yes">
          <NAME>fermat_test_example</NAME>
          <SCHEME>
(fermat-test 91)
          </SCHEME>
          <JAVASCRIPT>
fermat_test(91);
          </JAVASCRIPT>
        </SNIPPET>
        </TEXT>

        <TEXT>
          The following 
          <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
          runs the test a given number of times, as
          specified by a parameter.  Its value is true if the test succeeds
          every time, and false otherwise.
        <SNIPPET PAGE="52">
          <NAME>fast_prime_definition</NAME>
          <REQUIRES>fermat_test_definition</REQUIRES>
          <EXAMPLE>fast_prime_example</EXAMPLE>
          <SCHEME>
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))
          </SCHEME>
          <JAVASCRIPT>
function fermat_test(n) {
    function try_it(a) {
        return expmod(a, n, n) === a;
    }
    return try_it(1 + random(n - 1));
}
function fast_is_prime(n, times) {
    return times === 0
           ? true
           : fermat_test(n)
             ? fast_is_prime(n, times - 1)
             : false;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="52" HIDE="yes">
          <NAME>fast_prime_example</NAME>
          <REQUIRES>fast_prime_definition</REQUIRES>
          <SCHEME>
(fast-prime? 91 3)
          </SCHEME>
          <JAVASCRIPT>
fast_is_prime(91, 3);
          </JAVASCRIPT>
        </SNIPPET>
        <!-- \indcode*{fast-prime?} -->
        </TEXT>

        <SUBHEADING>
          <NAME>Probabilistic methods</NAME>
        </SUBHEADING>

        <INDEX>probabilistic algorithm|(</INDEX>
        <INDEX>algorithm<SUBINDEX>probabilistic|(</SUBINDEX></INDEX>

        <TEXT>
          The Fermat test differs in character from most familiar algorithms, in
          which one computes an answer that is guaranteed to be correct.  Here,
          the answer obtained is only probably correct.  More precisely, if <LATEXINLINE>$n$</LATEXINLINE>
          ever fails the Fermat test, we can be certain that <LATEXINLINE>$n$</LATEXINLINE> is not prime.
          But the fact that <LATEXINLINE>$n$</LATEXINLINE> passes the test, while an extremely strong
          indication, is still not a guarantee that <LATEXINLINE>$n$</LATEXINLINE> is prime.  What we would
          like to say is that for any number <LATEXINLINE>$n$</LATEXINLINE>, if we perform the test enough
          times and find that <LATEXINLINE>$n$</LATEXINLINE> always passes the test, then the probability
          of error in our primality test can be made as small as we like.
        </TEXT>

        <TEXT>
          Unfortunately, this assertion is not quite correct.  There do exist
          numbers that fool the Fermat test: numbers <LATEXINLINE>$n$</LATEXINLINE> that are not prime and
          yet have the property that <LATEXINLINE>$a^n$</LATEXINLINE> is congruent to <LATEXINLINE>$a$</LATEXINLINE> modulo <LATEXINLINE>$n$</LATEXINLINE> for
          all integers <LATEXINLINE>$a &lt; n$</LATEXINLINE>.  Such numbers are extremely rare, so the Fermat
          test is quite reliable in practice.<FOOTNOTE>Numbers that fool the
            <INDEX>Carmichael numbers</INDEX>
            Fermat test are called <EM>Carmichael numbers</EM>, and little is known
            about them other than that they are extremely rare.  There are 255
            Carmichael numbers below 100,000,000.  The smallest few are 561, 1105,
            1729, 2465, 2821, and 6601.  In testing primality of very large
            numbers chosen at random, the chance of stumbling upon a value that
            fools the Fermat test is less than the chance that 
            <INDEX>cosmic radiation</INDEX>
            cosmic radiation
            will cause the computer to make an error in carrying out a <QUOTE>correct</QUOTE>
            algorithm.  Considering an algorithm to be inadequate for the first
            reason but not for the second illustrates the difference between
            <INDEX>engineering vs.<SPACE/>mathematics</INDEX>
            <INDEX>mathematics<SUBINDEX>engineering vs.</SUBINDEX></INDEX>
            mathematics and engineering.
            <LABEL NAME="foot:carmichaelfn"/></FOOTNOTE>
        </TEXT>

        <TEXT>
          There are variations of the Fermat test that cannot be fooled.  In
          these tests, as with the Fermat method, one tests the primality of an
          integer <LATEXINLINE>$n$</LATEXINLINE> by choosing a random integer <LATEXINLINE>$a&lt;n$</LATEXINLINE> and checking some
          condition that depends upon <LATEXINLINE>$n$</LATEXINLINE> and <LATEXINLINE>$a$</LATEXINLINE>.  (See
          Exercise<SPACE/><REF NAME="ex:miller-rabin"/> for an example of such a test.)  On the
          other hand, in contrast to the Fermat test, one can prove that, for
          any <LATEXINLINE>$n$</LATEXINLINE>, the condition does not hold for most of the integers <LATEXINLINE>$a&lt;n$</LATEXINLINE>
          unless <LATEXINLINE>$n$</LATEXINLINE> is prime.  Thus, if <LATEXINLINE>$n$</LATEXINLINE> passes the test for some random
          choice of<SPACE/><LATEXINLINE>$a$</LATEXINLINE>, the chances are better than even that <LATEXINLINE>$n$</LATEXINLINE> is prime.  If
          <LATEXINLINE>$n$</LATEXINLINE> passes the test for two random choices of <LATEXINLINE>$a$</LATEXINLINE>, the chances are better
          than 3 out of 4 that <LATEXINLINE>$n$</LATEXINLINE> is prime. By running the test with more and
          more randomly chosen values of <LATEXINLINE>$a$</LATEXINLINE> we can make the probability of
          error as small as we like.
          <INDEX>Fermat test for primality|)</INDEX>
          <INDEX>prime number(s)<SUBINDEX>Fermat test for|)</SUBINDEX></INDEX>
        </TEXT>

        <TEXT>
          The existence of tests for which one can prove that the chance of
          error becomes arbitrarily small has sparked interest in algorithms of
          this type, which have come to be known as <EM>probabilistic
            algorithms</EM>.  There is a great deal of research activity in this area,
          and probabilistic algorithms have been fruitfully applied to many
          fields.<FOOTNOTE>One of the most striking applications of
            <INDEX>cryptography</INDEX>
            probabilistic prime testing has been to the field of cryptography.
            Although it is now computationally infeasible to factor an arbitrary
            200-digit number, the primality of such a number can be checked in a
            few seconds with the Fermat test.  This fact forms the basis of a
            technique for constructing <QUOTE>unbreakable codes</QUOTE> suggested by 
            <INDEX>Rivest, Ronald L.</INDEX>
            Rivest,
            <INDEX>Shamir, Adi</INDEX>
            Shamir, and 
            <INDEX>Adelman, Leonard</INDEX>
            Adleman (1977).  The resulting 
            <INDEX>RSA algorithm</INDEX>
            <EM>RSA algorithm</EM> has
            become a widely used technique for enhancing the security of
            electronic communications.  Because of this and related developments,
            the study of 
            <INDEX>prime number(s)<SUBINDEX>cryptography and</SUBINDEX></INDEX>
            prime numbers, once considered the epitome of a topic in
            <QUOTE>pure</QUOTE> mathematics to be studied only for its own sake, now turns
            out to have important practical applications to cryptography,
            electronic funds transfer, and information retrieval.</FOOTNOTE>
          <INDEX>probabilistic algorithm|)</INDEX>
          <INDEX>algorithm<SUBINDEX>probabilistic|)</SUBINDEX></INDEX>
          <INDEX>prime number(s)|)</INDEX>
        </TEXT>

        <EXERCISE><LABEL NAME="ex:use-smallest-divisor"/> 
            Use the 
<SPLITINLINE><SCHEME><SCHEMEINLINE>smallest-divisor</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            to find the smallest divisor
            of each of the following numbers: 199, 1999, 19999.
        <SNIPPET SOLUTION="yes">
        <REQUIRES>square_definition</REQUIRES>
        <EXAMPLE>example_1.23</EXAMPLE>
        <JAVASCRIPT>
function smallest_divisor(n) {
    return find_divisor(n, 2);
}

function find_divisor(n, test_divisor) {
    return square(test_divisor) &gt; n
           ? n
           : divides(test_divisor, n)
             ? test_divisor
             : find_divisor(n, test_divisor + 1);
}
function divides(x, y) {
    return y % x === 0 ? 1 : 0;
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        <SNIPPET HIDE="yes">
        <NAME>example_1.23</NAME>
        <JAVASCRIPT>
smallest_divisor(99)
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        </EXERCISE>

        <EXERCISE><LABEL NAME="ex:compose"/>
            <!--
                \indprim*{runtime}
                \ind*{primitive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[runtime@<SCHEMEINLINE>runtime</SCHEMEINLINE> (<EM>ns</EM>)]
              -->
            <SPLITINLINE>
              <SCHEME>
                Most Lisp implementations include a primitive called 
            <SCHEMEINLINE>runtime</SCHEMEINLINE>
            that returns an integer that specifies the amount of time the system
            has been running (measured, for example, in microseconds).  The
            following 
            <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE>
	    procedure,
              </SCHEME>
              <JAVASCRIPT>
                Assume that our JavaScript environment defines a primitive function called 
            <SCHEMEINLINE>runtime</SCHEMEINLINE>
            that returns an integer that specifies the amount of time the system
            has been running (measured in microseconds).  The
            following 
            <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
	    function,
              </JAVASCRIPT>
            </SPLITINLINE>
            when called with an
            integer <LATEXINLINE>$n$</LATEXINLINE>, prints <LATEXINLINE>$n$</LATEXINLINE> and 
            checks to see if <LATEXINLINE>$n$</LATEXINLINE> is prime.  
            If <LATEXINLINE>$n$</LATEXINLINE> is
            prime, the 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            prints three asterisks followed by the amount of time
            used in performing the test.<SPLITINLINE><JAVASCRIPT><FOOTNOTE>Note that
	    the function <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> takes a string as argument
	    and displays it in the programming environment. The operator
	    <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> can be applied to two strings, in which case
	    it concatenates them. If one argument is a string, and the other a different value,
	    that value is <QUOTE>converted</QUOTE> into a string and the two strings are
	    concatenated. For example, the number 123 gets converted into the string
	    <JAVASCRIPTINLINE>"123"</JAVASCRIPTINLINE> and the value true gets converted into
	    the string 
	    <JAVASCRIPTINLINE>"true"</JAVASCRIPTINLINE>.
	    </FOOTNOTE></JAVASCRIPT></SPLITINLINE>
            <!-- \indcode*{timed-prime-test} -->
            <!-- \indprim{newline}\indprim{display} -->
        <SNIPPET PAGE="52">
          <NAME>timed_prime_definition</NAME>
          <REQUIRES>prime_definition</REQUIRES>
          <EXAMPLE>timed_prime_example</EXAMPLE>
          <SCHEME>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
          </SCHEME>
          <JAVASCRIPT>
function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, runtime());
}
function start_prime_test(n, start_time) {
    return is_prime(n)
           ? report_prime(runtime() - start_time)
           : true;
}
function report_prime(elapsed_time) {
    return display(" *** " + elapsed_time);
}
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET PAGE="52" HIDE="yes">
          <NAME>timed_prime_example</NAME>
          <REQUIRES>timed_prime_definition</REQUIRES>
          <SCHEME>
(timed-prime-test 43)
          </SCHEME>
          <JAVASCRIPT>
timed_prime_test(43);
          </JAVASCRIPT>
        </SNIPPET>
        Using this 
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>,
        write a 
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE>
          <SCHEME>
            <SCHEMEINLINE>search-for-primes</SCHEMEINLINE> 
          </SCHEME>
          <JAVASCRIPT>
            <JAVASCRIPTINLINE>search_for_primes</JAVASCRIPTINLINE> 
          </JAVASCRIPT>
        </SPLITINLINE>
        that checks the primality of consecutive odd integers in a specified range.
        Use your 
          <SPLITINLINE>
            <SCHEME>
              procedure
            </SCHEME>
            <JAVASCRIPT>
              function
            </JAVASCRIPT>
          </SPLITINLINE>
        to find the three smallest primes larger than 1000;
        larger than 10,000; larger than 100,000; larger than 1,000,000.  Note
        the time needed to test each prime.  Since the testing algorithm has
        order of growth of <LATEXINLINE>$\Theta(\sqrt{n})$</LATEXINLINE>, 
        you should expect that testing
        for primes around 10,000 should take about <LATEXINLINE>$\sqrt{10}$</LATEXINLINE> 
        times as long
        as testing for primes around 1000.  Do your timing data bear this out?
        How well do the data for 100,000 and 1,000,000 support the 
        <LATEXINLINE>$\sqrt{n}$</LATEXINLINE>
        prediction?  Is your result compatible with the notion that programs
        on your machine run in time proportional to the number of steps
        required for the computation?
        <LABEL NAME="ex:search-for-primes"/>
        </EXERCISE>

        <EXERCISE><LABEL NAME="ex:display"/> 
            <!-- \indcode{smallest-divisor}[more efficient version] -->
            The 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>smallest-divisor</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            shown at the start of this section
            does lots of needless testing: After it checks to see if the
            number is divisible by 2 there is no point in checking to see if
            it is divisible by any larger even numbers.  This suggests that the
            values used for 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>test-divisor</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>test_divisor</JAVASCRIPTINLINE>
              </JAVASCRIPT>
            </SPLITINLINE>
            should not be 2, 3, 4, 5, 6, <ELLIPSIS/>
            but rather 2, 3, 5, 7, 9, <ELLIPSIS/>.
            To implement this
            change, define a 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            <SCHEMEINLINE>next</SCHEMEINLINE> that returns 3 if its input is
            equal to 2 and otherwise returns its input plus<SPACE/>2.  
            Modify the 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>smallest-divisor</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            to use 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>(next test-divisor)</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>next(test_divisor)</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            instead of 
            <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ test-divisor 1)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>test_divisor + 1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
            With 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE>
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
              </JAVASCRIPT>
            </SPLITINLINE>
            incorporating this modified version of 
            <SPLITINLINE><SCHEME><SCHEMEINLINE>smallest-divisor</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>smallest_divisor</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
            run the
            test for each of the 12 primes found in
            Exercise<SPACE/><REF NAME="ex:search-for-primes"/>.  
            Since this modification halves the
            number of test steps, you should expect it to run about twice as fast.
            Is this expectation confirmed?  If not, what is the observed ratio of
            the speeds of the two algorithms, and how do you explain the fact that
            it is different from 2?
        </EXERCISE>

        <EXERCISE> 
            Modify the 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>timed-prime-test</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>timed_prime_test</JAVASCRIPTINLINE>
              </JAVASCRIPT>
            </SPLITINLINE>
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            of Exercise<SPACE/><REF NAME="ex:search-for-primes"/> to use 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>fast-prime?</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            (the Fermat method), and test each of the 12 primes you found in that
            exercise.  Since the Fermat test has <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 
            growth, how would you expect the time to test primes near 1,000,000 to compare
            with the time needed to test primes near 1000?  Do your data bear this
            out?  Can you explain any discrepancy you find?
            <LABEL NAME="ex:mod-timed-prime-test"/>
        </EXERCISE>

        <EXERCISE> 
            Alyssa P. Hacker complains that we went to a lot of extra work in
            writing <SCHEMEINLINE>expmod</SCHEMEINLINE>.  
            After all, she says, since we already know how
            to compute exponentials, we could have simply written
            <!-- \indcode*{expmod} -->
            <SNIPPET PAGE="55">
              <REQUIRES>expt_log_definition</REQUIRES>
              <EXAMPLE>expmod_example</EXAMPLE>
              <SCHEME>
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
              </SCHEME>
              <JAVASCRIPT>
function expmod(base, exp, m) {
    return fast_expt(base, exp) % m;
}
              </JAVASCRIPT>
            </SNIPPET>
            Is she correct?  
            Would this 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            serve as well for our fast prime tester?  Explain.
            <LABEL NAME="ex:Alyssas-expmod"/>
        <SNIPPET SOLUTION="yes">
        <JAVASCRIPT><TEXT>
/* Alyssa's suggestion is correct: her expmod procedure computes and then finds its remainder modulo n, as per the description in the text of the Fermat test. However, the original expmod procedure is faster than Alyssa's for large prime candidates.

The original expmod procedure performs "reduction steps" to constrain the computation to numbers not much larger than n, the primality candidate. When the result of a computation exceeds the largest value that can be stored in a machine register, the Scheme implementation must resort to pure software implementations of arithmetic (that is, assuming the Scheme implementation handles arbitrary-precision integer arithmetic at all). 

The performance of these software-based arithmetic procedures is dependent on the size of the integers (i.e., the performance of the procedures has non-constant order of growth), so the reduction-based expmod given in the text will generally have better performance than Alyssa's method for large n, since an (as computed by Alyssa's expmod procedure) is much larger than numbers near n for large n and a > 1.

For small prime candidate numbers, however, Alyssa's method may be slightly faster than the original expmod procedure, because Alyssa's method performs fewer remainder operations. */

       </TEXT> </JAVASCRIPT>
        </SNIPPET>
        </EXERCISE>

        <EXERCISE><LABEL NAME="louis-fast-prime"/>
            Louis Reasoner is having great difficulty doing
            Exercise<SPACE/><REF NAME="ex:mod-timed-prime-test"/>.
            His 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>fast-prime?</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>fast_is_prime</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            test seems to run more slowly than his 
            <SPLITINLINE>
              <SCHEME>
                <SCHEMEINLINE>prime?</SCHEMEINLINE> 
              </SCHEME>
              <JAVASCRIPT>
                <JAVASCRIPTINLINE>is_prime</JAVASCRIPTINLINE> 
              </JAVASCRIPT>
            </SPLITINLINE>
            test.
            Louis calls his friend Eva Lu Ator over to help.  When they examine Louis<APOS/>s code, they
            find that he has rewritten the 
            <SCHEMEINLINE>expmod</SCHEMEINLINE> 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            to use an
            explicit multiplication, rather than calling <SCHEMEINLINE>square</SCHEMEINLINE>:

            <SNIPPET PAGE="55">
              <REQUIRES>even_definition</REQUIRES>
              <EXAMPLE>expmod_example</EXAMPLE>
              <SCHEME>
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
           (* (expmod base (/ exp 2) m)
              (expmod base (/ exp 2) m))
           m))
        (else
         (remainder 
           (* base (expmod base (- exp 1) m))
           m))))
              </SCHEME>
              <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
             ? expmod(base, exp / 2, m) 
               * expmod(base, exp / 2, m)
               % m
             : base
               * expmod(base, exp - 1, m) 
               % m;
}
              </JAVASCRIPT>
            </SNIPPET>
            <!-- \indcode*{expmod} -->

            <QUOTE>I don<APOS/>t see what difference that could make,</QUOTE> says Louis.  
            <QUOTE>I do.</QUOTE>  says Eva.  
            <QUOTE>By writing the 
             <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
              like that, you have
              transformed the <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE> 
              process into a <LATEXINLINE>$\Theta(n)$</LATEXINLINE> process.</QUOTE>
            Explain.
        <SNIPPET SOLUTION="yes">
        <JAVASCRIPT><TEXT>
Eva is correct: by evaluating the expression:
remainder(expmod(base,exp/2,m)*expmod(base,exp/2,m)*m)

the combination"expmod(base,exp/2,m)" is evaluated twice at each step in the computation when the exponent is even, eliminating the benefit of the fast exponentiation algorithm -- which halves the exponent when the exponent is even -- therefore eliminating the feature of the algorithm that makes it faster. 

        </TEXT></JAVASCRIPT>
        </SNIPPET>
        </EXERCISE>

        <EXERCISE>
            <INDEX>Carmichael numbers</INDEX>
            Demonstrate that the Carmichael numbers listed in
            footnote<SPACE/><REF NAME="foot:carmichaelfn"/> really do fool
            the Fermat test.  That is, write a 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            that takes an integer <LATEXINLINE>$n$</LATEXINLINE>
            and tests whether <LATEXINLINE>$a^n$</LATEXINLINE> is congruent to 
            <LATEXINLINE>$a$</LATEXINLINE> modulo <LATEXINLINE>$n$</LATEXINLINE> for every
            <LATEXINLINE>$a&lt;n$</LATEXINLINE>, and try your 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            on the given Carmichael numbers.
        <SNIPPET SOLUTION="yes">
        <EXAMPLE>example_1.29</EXAMPLE>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function carmichael(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
                 ? square(expmod(base, exp / 2, m)) % m;
                 : (base * expmod(base, exp - 1, m)) % m;
    }
    function fermat_test(n, a) {
        return expmod(a, n, n) === a;
    }
    function iter(n, i) {
        return i === n
               ? true
               : fermat_test(n, i)
                 ? iter(n, i + 1)
                   false;
    }
    return iter(n, 2);
}
</JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        <SNIPPET HIDE="yes">
        <NAME>example_1.29</NAME>
        <JAVASCRIPT>
carmichael(1105)

        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        </EXERCISE>
        
        <EXERCISE>
            <INDEX>prime number(s)<SUBINDEX>Miller-Rabin test for</SUBINDEX></INDEX>
            <INDEX>Fermat test for primality<SUBINDEX>variant of</SUBINDEX></INDEX>
            <INDEX>Miller-Rabin test for primality</INDEX>
            <INDEX>Miller, Gary L.</INDEX><INDEX>Rabin, Michael O.</INDEX>
            One variant of the Fermat test that cannot be fooled is called the
            <EM>Miller-Rabin test</EM> (<CITATION>Miller 1976</CITATION>; 
            <CITATION>Rabin 1980</CITATION>).  This starts from
            <INDEX>Fermats@Fermat<APOS/>s Little Theorem<SUBINDEX>alternate form</SUBINDEX></INDEX>
            an alternate form of Fermat<APOS/>s Little Theorem, which states that if <LATEXINLINE>$n$</LATEXINLINE>
            is a prime number and <LATEXINLINE>$a$</LATEXINLINE> is any positive integer less 
            than <LATEXINLINE>$n$</LATEXINLINE>, then
            <LATEXINLINE>$a$</LATEXINLINE> raised to the <LATEXINLINE>$(n-1)$</LATEXINLINE>st 
            power is congruent to 1 modulo<SPACE/><LATEXINLINE>$n$</LATEXINLINE>.  To test
            the primality of a number <LATEXINLINE>$n$</LATEXINLINE> by the Miller-Rabin test, 
            we pick a random number <LATEXINLINE>$a&lt;n$</LATEXINLINE> and raise 
            <LATEXINLINE>$a$</LATEXINLINE> to the <LATEXINLINE>$(n-1)$</LATEXINLINE>st power 
            modulo<SPACE/><LATEXINLINE>$n$</LATEXINLINE>
            using the <SCHEMEINLINE>expmod</SCHEMEINLINE> 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.
            However, whenever we perform the
            squaring step in <SCHEMEINLINE>expmod</SCHEMEINLINE>, we check to see if we have 
            discovered a
            <QUOTE>nontrivial square root of 1 
              modulo<SPACE/><LATEXINLINE>$n$</LATEXINLINE>,
            </QUOTE> 
            that is, a number not
            equal to 1 or <LATEXINLINE>$n-1$</LATEXINLINE> whose square is equal to 1 
            modulo<SPACE/><LATEXINLINE>$n$</LATEXINLINE>.  It is
            possible to prove that if such a nontrivial square root of 1 exists,
            then <LATEXINLINE>$n$</LATEXINLINE> is not prime.  
            It is also possible to prove that if <LATEXINLINE>$n$</LATEXINLINE> is an
            odd number that is not prime, then, for at least half the numbers
            <LATEXINLINE>$a&lt;n$</LATEXINLINE>, computing <LATEXINLINE>$a^{n-1}$</LATEXINLINE> 
            in this way will reveal a nontrivial
            square root of 1 modulo<SPACE/><LATEXINLINE>$n$</LATEXINLINE>.  
            (This is why the Miller-Rabin test
            cannot be fooled.)  Modify the 
            <SCHEMEINLINE>expmod</SCHEMEINLINE> 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            to signal if it
            discovers a nontrivial square root of 1, and use this to implement
            the Miller-Rabin test with a 
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            analogous to 
            <SPLITINLINE><SCHEME><SCHEMEINLINE>fermat-test</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>fermat_test</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
            Check your
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
            by testing various known primes and non-primes.
            Hint: One convenient way to make <SCHEMEINLINE>expmod</SCHEMEINLINE>
            signal is to have it return 0.
            <LABEL NAME="ex:miller-rabin"/>
            <INDEX>prime number(s)<SUBINDEX>testing for|)</SUBINDEX></INDEX>

        <SNIPPET SOLUTION="yes">
        <EXAMPLE>example_1.30</EXAMPLE>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <JAVASCRIPT>
function random(n) {
    return Math.floor(Math.random() * n);
}
function miller_rabin_test(n) {
    function expmod(base, exp, m) {
        return exp === 0
               ? 1
               : is_even(exp)
                 ? square(trivial_test(expmod(base, exp / 2, m), m))%m;
                 : (base*expmod(base, exp - 1, m))%m;
    }
    function trivial_test(r, m) {
        return r === 1 || r === m - 1
               ? r
               : square(r) % m === 1
                 ? 0
                 : r;
    }
    function try_it(a) {
        return expmod(a, n - 1, n) === 1;
    }
    return try_it(1+random(n-1));
}
function do_miller_rabin_test(n, times) {
    return times === 0
           ? true
           : miller_rabin_test(n)
             ? do_miller_rabin_test(n, times - 1);
             : false;
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        <SNIPPET HIDE="yes">
        <NAME>example_1.30</NAME>
        <JAVASCRIPT>
do_miller_rabin_test(104743, 1000)
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
        </SNIPPET>
        </EXERCISE>
      </SUBSECTION>
