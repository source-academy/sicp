<SUBSECTION>
   <NAME>
    什么是数据？
</NAME> 

  <LABEL NAME="sec:data?"></LABEL>
   <INDEX>数据<SUBINDEX>含义</SUBINDEX><OPEN></OPEN></INDEX> 
   <SHORT_PAGE LINES="2"></SHORT_PAGE> 
   <TEXT>
    我们在章节<SPACE></SPACE><REF NAME="sec:rationals"></REF>开始实现有理数运算，通过实现
    有理数运算
    <SPLITINLINE>
      add-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      sub-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    等等，基于三个未指定的
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      make-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    numer和
    denom。在那时，我们可以认为这些操作是基于数据对象的定义——分子，
    分母和有理数——其行为由后面三个
    <SPLITINLINE>
      过程。
    <JAVASCRIPT>函数。</JAVASCRIPT></SPLITINLINE>
  </TEXT> 
  <TEXT> 
    但究竟什么是<EM>数据</EM>？ 仅仅说<QUOTE>由给定的选择器和构造器实现的任何东西</QUOTE>是不够的。显然，并非每一组三个<SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    都能作为有理数实现的合适基础。我们需要保证
    <INDEX><USE>make_rat</USE><SUBINDEX>公理</SUBINDEX></INDEX>
    <INDEX><USE>numer</USE><SUBINDEX>公理</SUBINDEX></INDEX>
    <INDEX><USE>denom</USE><SUBINDEX>公理</SUBINDEX></INDEX>
    如果我们构造一个有理数 <SCHEMEINLINE>x</SCHEMEINLINE>  从一个整数对  <SCHEMEINLINE>n</SCHEMEINLINE> 和 <SCHEMEINLINE>d</SCHEMEINLINE> ，然后提取  <SCHEMEINLINE>numer</SCHEMEINLINE> 和  <SCHEMEINLINE>denom</SCHEMEINLINE> 的 <SCHEMEINLINE>x</SCHEMEINLINE> 和 将它们除应产生与除结果相同的结果 <SCHEMEINLINE>n</SCHEMEINLINE> 除以  <SCHEMEINLINE>d</SCHEMEINLINE> 。换句话说， <SPLITINLINE> make-rat, <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> <SCHEMEINLINE>numer</SCHEMEINLINE> ，和 <SCHEMEINLINE>denom</SCHEMEINLINE> ，必须满足条件，对于任何整数 <SCHEMEINLINE>n</SCHEMEINLINE> ，以及任何非零 整数 <SCHEMEINLINE>d</SCHEMEINLINE> ，如果 <SCHEMEINLINE>x</SCHEMEINLINE> ，是 <SPLITINLINE> (make-rat n d), <JAVASCRIPT> <JAVASCRIPTINLINE>make_rat(n, d)</JAVASCRIPTINLINE>, </JAVASCRIPT> </SPLITINLINE> 然后 <SPLIT> <JAVASCRIPT>  \[ \begin{array}{lll} \dfrac{\texttt{numer}(\texttt{x})}{\texttt{denom}(\texttt{x})} &amp;=&amp; \dfrac{\texttt{n}}{\texttt{d}} \end{array} \]  </JAVASCRIPT>   \[ \begin{array}{lll} \dfrac{(\texttt{numer}~\texttt{x})}{(\texttt{denom}~\texttt{x})} &amp;=&amp; \dfrac{\texttt{n}}{\texttt{d}} \end{array} \]   </SPLIT> 事实上，这是唯一的条件 <SPLITINLINE> make-rat, <JAVASCRIPT><JAVASCRIPTINLINE BREAK="true">make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> <SCHEMEINLINE>numer</SCHEMEINLINE> ，和 <SCHEMEINLINE>denom</SCHEMEINLINE> ，必须满足形成有理数表示的合适基础的一些条件。一般而言，我们可以将数据视为由某些选择器和构造器的集合定义的，加上一些指定条件，这些<SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE>必须满足这些条件才能成为有效的表示。 <FOOTNOTE> 令人惊讶的是，这个概念很难严格地形式化。给予这样一个描述有两种方法。其中一种由<INDEX>Hoare, Charles Antony Richard</INDEX> C. A. R. Hoare（1972）首创，被称为<INDEX>数据<INDEX>的抽象模型</INDEX>方法。它形式化了如上所述的有理数示例中的<SPLITINLINE> <QUOTE>过程加条件</QUOTE>  <JAVASCRIPT><QUOTE>函数加条件</QUOTE> </JAVASCRIPT> </SPLITINLINE>规范。请注意，有理数表示上的条件是以关于整数的事实（相等性和除法）来陈述的。通常来说，抽象模型是通过先前定义的数据对象类型定义新的数据对象类型。关于数据对象的断言因此可以通过简化为关于先前定义的数据对象的断言来检验。另一种方法由<INDEX>Zilles, Stephen N.</INDEX> Zilles 在麻省理工学院引入，再由<INDEX>Goguen, Joseph</INDEX> Goguen、<INDEX>Thatcher, James W.</INDEX> Thatcher、<INDEX>Wagner, Eric G.</INDEX> Wagner 和<INDEX>Wright, Jesse B.</INDEX> Wright 在 IBM （见<CITATION>Thatcher, Wagner, 和 Wright 1978</CITATION>）和<INDEX>Guttag, John Vogel</INDEX> Guttag 在多伦多（见<CITATION>Guttag 1977</CITATION>）引入，被称为<INDEX>数据<INDEX>的代数规约</INDEX></INDEX><EM>代数规约</EM>。它把<SPLITINLINE> <QUOTE>过程</QUOTE> <JAVASCRIPT><QUOTE>函数</QUOTE></JAVASCRIPT> </SPLITINLINE>视为一个抽象代数系统的元素，其行为由对我们行为相符的公理来规范。 </INDEX> <QUOTE>条件,</QUOTE> 并使用抽象代数的技术来检查关于数据对象的断言。这两种方法都在<INDEX>Liskov, Barbara Huberman</INDEX> Liskov 和 Zilles (1975) 的论文中进行了综述。 </FOOTNOTE>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
        <INDEX>data<SUBINDEX>procedural representation of</SUBINDEX><OPEN></OPEN></INDEX>
        <INDEX>procedural representation of data<OPEN></OPEN></INDEX>
      </SCHEME>
       <JAVASCRIPT> <INDEX>数据<INDEX>的函数表示<OPEN></OPEN></INDEX> <INDEX>数据的函数表示<OPEN></OPEN></INDEX> </INDEX></JAVASCRIPT> </SPLITINLINE> 这种观点不仅可以用来定义  <QUOTE> 这种观点不仅可以用来定义高级  </QUOTE> 数据对象，如有理数，也可以用来定义低级对象。考虑一下  <SPLITINLINE>
      <SCHEME>
        <INDEX>pair(s)<SUBINDEX>procedural representation of</SUBINDEX><OPEN></OPEN></INDEX>
      </SCHEME>
       <JAVASCRIPT> <INDEX>序对<INDEX>的函数表示<OPEN></OPEN></INDEX> </INDEX></JAVASCRIPT> </SPLITINLINE> 序对，我们用它来定义我们的有理数。我们实际上从未说过什么是序对，只是说语言提供了 <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
       <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT> <JAVASCRIPTINLINE>序对</JAVASCRIPTINLINE>, </JAVASCRIPT> </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> 和 <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 用于操作序对。但我们需要知道关于这三个操作的唯一事情是，如果我们使用 <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>序对</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 我们可以使用   <SPLITINLINE> car <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 和 <SPLITINLINE> cdr. <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>.</JAVASCRIPT> </SPLITINLINE> <INDEX><USE>pair</USE> (原语函数)<SUBINDEX>公理</SUBINDEX></INDEX> <INDEX><USE>head</USE> (原语函数)<SUBINDEX>公理</SUBINDEX></INDEX> <INDEX><USE>tail</USE> (原语函数)<SUBINDEX>公理</SUBINDEX></INDEX> <INDEX>序对<INDEX>的公理定义</INDEX></INDEX> 也就是说，操作满足以下条件，对于任何对象 <SCHEMEINLINE>x</SCHEMEINLINE> 和 <SCHEMEINLINE>y</SCHEMEINLINE> ，如果 <SCHEMEINLINE>z</SCHEMEINLINE> ，是 <SPLITINLINE> (cons x y) <JAVASCRIPT><JAVASCRIPTINLINE>pair(x, y)</JAVASCRIPTINLINE> </JAVASCRIPT> </SPLITINLINE> 然后 <SPLITINLINE> (car z) <JAVASCRIPT><JAVASCRIPTINLINE>head(z)</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 是 <SCHEMEINLINE>x</SCHEMEINLINE> 和 <SPLITINLINE> (cdr z) <JAVASCRIPT><JAVASCRIPTINLINE>tail(z)</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 是 <SCHEMEINLINE>y</SCHEMEINLINE> 事实上，我们提到过这三个 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 在我们的语言中被包括为原语。然而，任何一组三个 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 只要满足上述条件，就可以用作实现序对的基础。这个观点通过我们可以实现的事实得到了鲜明的证明 <SPLITINLINE> cons, <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> <SPLITINLINE> car, <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> 和 <SPLITINLINE> cdr <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 而不使用任何数据结构，而只是使用 <SPLITINLINE> 过程。 <JAVASCRIPT>函数。</JAVASCRIPT></SPLITINLINE> 这里是定义个：<SPLITINLINE><JAVASCRIPT><FOOTNOTE>函数 <INDEX><USE>error</USE> (原语函数)<SUBINDEX>可选第二参数</SUBINDEX></INDEX> <JAVASCRIPTINLINE>error</JAVASCRIPTINLINE> 介绍在章节<SPACE></SPACE><REF NAME="sec:proc-general-methods"></REF> ，可以使用字符串作为可选的第二个参数， 该字符串在第一个参数之前显示——例如， 如果 <JAVASCRIPTINLINE>m</JAVASCRIPTINLINE> 是 42：  <JAVASCRIPT_OUTPUT> Error in line 7: argument not 0 or 1 -- pair: 42 </JAVASCRIPT_OUTPUT>  </FOOTNOTE> </JAVASCRIPT></SPLITINLINE> <SNIPPET PAGE="91">
      <INDEX><DECLARATION>pair</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <INDEX><DECLARATION>head</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <INDEX><DECLARATION>tail</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <NAME>cons_with_dispatch</NAME>
      <EXAMPLE>cons_1_2_run</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else (error &quot;Argument not 0 or 1 -- CONS&quot; m))))
  dispatch)

(define (car z) (z 0))

(define (cdr z) (z 1))
      </SCHEME>
      <JAVASCRIPT>
function pair(x, y) {
    function dispatch(m) {
        return m === 0 
               ? x
               : m === 1 
               ? y
               : error(m, &quot;argument not 0 or 1 -- pair&quot;);
    }
    return dispatch;	      
}
function head(z) { return z(0); }
<SHORT_SPACE></SHORT_SPACE>
function tail(z) { return z(1); }
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>cons_1_2_run</NAME>
      <JAVASCRIPT>
const x = pair(1, 2);
head(x);
      </JAVASCRIPT>
    </SNIPPET> 这种使用 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 并不符合我们对数据应该是什么的直观概念。然而，我们需要做的只是验证这些 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 满足上面给出的条件，以证明这是表示序对的一种有效方法。 </TEXT>
  <TEXT> 这里要注意的微妙之处在于 <SPLITINLINE> (cons x y) <JAVASCRIPT><JAVASCRIPTINLINE>pair(x, y)</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 返回的值是一个 <SPLITINLINE> 过程<EMDASH></EMDASH>也就是说 <JAVASCRIPT>函数<EMDASH></EMDASH>也就是说</JAVASCRIPT> </SPLITINLINE> 内部定义的 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> <SCHEMEINLINE>dispatch</SCHEMEINLINE> ，它接受一个参数并返回任意一个 <SCHEMEINLINE>x</SCHEMEINLINE> 或 <SCHEMEINLINE>y</SCHEMEINLINE> 取决于参数是 0 还是 1。因此， <SPLITINLINE> (car z) <JAVASCRIPT><JAVASCRIPTINLINE>head(z)</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 被定义为应用 <SCHEMEINLINE>z</SCHEMEINLINE> 取决于 0。因此，如果  <SCHEMEINLINE>z</SCHEMEINLINE> 是由 <SPLITINLINE>过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 通过 <SPLITINLINE> (cons x y), <JAVASCRIPT><JAVASCRIPTINLINE>pair(x, y)</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE>形成的，然后 <SCHEMEINLINE>z</SCHEMEINLINE> 应用到 0 将产生 <SCHEMEINLINE>x</SCHEMEINLINE> 。因此，我们已经证明 <SPLITINLINE> (car (cons x y)) <JAVASCRIPT><JAVASCRIPTINLINE>head(pair(x, y))</JAVASCRIPTINLINE> </JAVASCRIPT> </SPLITINLINE> 产生了 <SCHEMEINLINE>x</SCHEMEINLINE> 。因此，我们已经证明 <SPLITINLINE> (cdr (cons x y)) <JAVASCRIPT><JAVASCRIPTINLINE>tail(pair(x, y))</JAVASCRIPTINLINE> </JAVASCRIPT> </SPLITINLINE> 应用返回的 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 由 <SPLITINLINE> (cons x y) <JAVASCRIPT><JAVASCRIPTINLINE>pair(x, y)</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 到 1，这将返回 <SCHEMEINLINE>y</SCHEMEINLINE> 。因此，这种 <SPLITINLINE> 过程型 <JAVASCRIPT>函数型</JAVASCRIPT> </SPLITINLINE> 实现的序对是一种有效的实现，如果我们仅通过 <SPLITINLINE> cons, <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> <SPLITINLINE> car, <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> 和 <SPLITINLINE> cdr <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT> </SPLITINLINE> 访问序对，我们就无法将这种实现与使用<QUOTE>真实</QUOTE>数据结构的实现区分开来。 </TEXT>
   <TEXT> 显示 <SPLITINLINE>  过程 <JAVASCRIPT>函数 </JAVASCRIPT></SPLITINLINE> 表示的目的是为了说明我们的语言虽然不是这样工作的 <SPLITINLINE>  (Scheme 和 Lisp 系统一般直接实现序对，为了效率)  <JAVASCRIPT> (序对的高效实现可能会使用 JavaScript 的本地 <EM>向量</EM> 数据结构) </JAVASCRIPT> </SPLITINLINE> 但它可以这样工作。尽管这种 <SPLITINLINE> 过程型 <JAVASCRIPT>函数型 </JAVASCRIPT></SPLITINLINE> 表示不常用，它却是一种完全足够的表示序对的方法，因为它满足序对需要满足的唯一条件。这个例子还演示了操作 <SPLITINLINE>  过程 <JAVASCRIPT> 函数 </JAVASCRIPT></SPLITINLINE> 可以自动提供表示复合数据的能力。现在可能看起来有点好奇，但 <SPLITINLINE>  过程型 <JAVASCRIPT> 函数型 </JAVASCRIPT></SPLITINLINE> 数据的表示将在我们的编程曲目中起到核心作用。这种编程风格通常被称为 <INDEX>消息传递</INDEX> <EM>消息传递</EM>, 当我们在章节 <REF NAME="chap:state"></REF> 处理建模和仿真问题时，我们将其作为基础工具来使用。 </TEXT> 
  <EXERCISE>  
    这里是一个替代的 
    <SPLITINLINE> 过程型  <JAVASCRIPT>函数型 </JAVASCRIPT> </SPLITINLINE> 
    表示的序对。 对于这种表示，验证 <SPLITINLINE> (car (cons x y)) <JAVASCRIPT><JAVASCRIPTINLINE>head(pair(x, y))</JAVASCRIPTINLINE> </JAVASCRIPT> </SPLITINLINE> 产生了 【216:13†cn.txt】 <SCHEMEINLINE>x</SCHEMEINLINE> 对任何对象 <SCHEMEINLINE>x</SCHEMEINLINE>  对任何对象和  <SCHEMEINLINE>y</SCHEMEINLINE>.
    <SNIPPET PAGE="92">
      <INDEX><DECLARATION>pair</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <INDEX><DECLARATION>head</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <INDEX><USE>tail</USE> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <NAME>cons_lambda</NAME>
      <EXPECTED>1</EXPECTED>
      <EXAMPLE>cons_1_2_run</EXAMPLE>
      <SCHEME>
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))
      </SCHEME>
      <JAVASCRIPT>
function pair(x, y) {
    return m =&gt; m(x, y);
}
function head(z) {
    return z((p, q) =&gt; p);
}
      </JAVASCRIPT>
    </SNIPPET> 
    什么是对应的<QUOTE> <SPLITINLINE>  <INDEX><USE>cdr</USE> (原语函数)<SUBINDEX>过程实现</SUBINDEX></INDEX>  <JAVASCRIPT> <INDEX><USE>tail</USE> (原语函数)<SUBINDEX>函数实现</SUBINDEX><FRAGILE></FRAGILE></INDEX> </JAVASCRIPT> </SPLITINLINE> <SPLITINLINE> cdr? <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>?</JAVASCRIPT> </SPLITINLINE> 提示：为了验证这个方法，请使用<SPACE><REF NAME="sec:substitution-model"></REF>节的代换模型 。</SPACE></QUOTE>
<LABEL NAME="ex:lambda-cons"></LABEL>
     <SOLUTION>  <REQUIRES>cons_lambda</REQUIRES> <EXPECTED>2</EXPECTED> <EXAMPLE>cons_1_2_run_2</EXAMPLE> <JAVASCRIPT> function tail(z) { return z((p, q) =&gt; q); } </JAVASCRIPT>     <NAME>cons_1_2_run_2</NAME> <JAVASCRIPT> const x = pair(1, 2); tail(x); </JAVASCRIPT>  </SOLUTION> </EXERCISE>

   <EXERCISE> 
    证明我们可以仅使用数字和算术运算来表示非负整数的序对，如果我们将序对 $a$ 和 $b$ 表示为整数，其为积 $2^a 3^b$。给出对应的 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> 的定义 <SPLITINLINE> cons, <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> <SPLITINLINE> car, <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT> </SPLITINLINE> 和 <SPLITINLINE> cdr. <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>.</JAVASCRIPT> </SPLITINLINE> <SOLUTION>  <NAME>pair_with_fast_expt</NAME> <EXPECTED>4</EXPECTED> <EXAMPLE>example_2.5</EXAMPLE> <REQUIRES>expt_log_definition</REQUIRES> <JAVASCRIPT> function pair(a, b) { return fast_expt(2, a) * fast_expt(3, b); } function head(p) { return p % 2 === 0 ? head(p / 2) + 1 : 0; } function tail(p) { return p % 3 === 0 ? tail(p / 3) + 1 : 0; } </JAVASCRIPT>    </SOLUTION>  <NAME>example_2.5</NAME> <JAVASCRIPT> tail(pair(3, 4)); </JAVASCRIPT>     </EXERCISE> 
   <SPLITINLINE>  <INDEX>序对序对<INDEX>的过程表示的函数表示<CLOSE></CLOSE></INDEX> </INDEX> <JAVASCRIPT> <INDEX>序对序对<INDEX>的函数表示的函数表示<CLOSE></CLOSE></INDEX> </INDEX></JAVASCRIPT> </SPLITINLINE> 

  <EXERCISE>  
    如果将序对表示为以 <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> (练习<SPACE><REF NAME="ex:lambda-cons"></REF>) 的思想还不够令人费解的话，请考虑在一个可以操作 <SPLITINLINE> 过程， <JAVASCRIPT>函数，</JAVASCRIPT> </SPLITINLINE> 的语言中，我们可以通过实现 0 和加 1 的运算来解决没有数字 (至少在涉及非负整数时) 的问题       。 </SPACE><SNIPPET PAGE="93">
      <NAME>zero</NAME>
      <SCHEME>
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
      </SCHEME>
      <JAVASCRIPT>
const zero = f =&gt; x =&gt; x;

function add_1(n) {
    return f =&gt; x =&gt; f(n(f)(x));
}
      </JAVASCRIPT>
    </SNIPPET> 
    这种表示称为<INDEX>丘奇数</INDEX><EM>丘奇数</EM>，以其发明者逻辑学家<INDEX>丘奇, 阿隆佐</INDEX>阿隆佐·丘奇命名，他发明了【250:0†cn.txt】 。<LATEXINLINE>$\lambda$</LATEXINLINE> 
    这种表示法被称为<INDEX>丘奇数</INDEX><EM>丘奇数</EM>，其发明者是逻辑学家<INDEX>丘奇，阿隆佐<INDEX>，他发明了演算
    <TEXT>
    直接定义one和two（不是以zero为基础和
    <SPLITINLINE>
      add-1）。
      <JAVASCRIPT><JAVASCRIPTINLINE>add_1</JAVASCRIPTINLINE>）。</JAVASCRIPT>
    </SPLITINLINE>
    （提示：使用替换法来评估
    <SPLITINLINE>
      (add-1 zero)）。
      <JAVASCRIPT><JAVASCRIPTINLINE>add_1(zero)</JAVASCRIPTINLINE>）。
      </JAVASCRIPT>
    </SPLITINLINE>
    直接给出加法的定义
    <SPLITINLINE>
      过程+
      <JAVASCRIPT>函数<JAVASCRIPTINLINE>plus</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    （不是以
    <SPLITINLINE>add-1连续应用的）。
    <JAVASCRIPT><JAVASCRIPTINLINE>add_1</JAVASCRIPTINLINE>）。</JAVASCRIPT>
    </SPLITINLINE>
    </TEXT>
    <SOLUTION>
      
	<NAME>church_solution</NAME>
	<EXPECTED>3</EXPECTED>
	<JAVASCRIPT>
const one = f =&gt; x =&gt; f(x);
const two = f =&gt; x =&gt; f(f(x));

function plus(n, m) {
    return f =&gt; x =&gt; n(f)(m(f)(x));
}

// testing

const three = plus(one, two);

function church_to_number(c) {
    return c(n =&gt; n + 1)(0);
}
church_to_number(three);
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
 </INDEX></INDEX><LABEL NAME="ex:church-numerals"></LABEL>
  </EXERCISE>

   
    如果将序对表示为<LINEBREAK> <SPLITINLINE> 过程 <JAVASCRIPT>函数</JAVASCRIPT> </SPLITINLINE> (练习<SPACE><REF NAME="ex:lambda-cons"></REF>) 的思想还不够令人费解的话，请考虑在一个可以操作<LINEBREAK> <SPLITINLINE> 过程， <JAVASCRIPT>函数，</JAVASCRIPT> </SPLITINLINE> 的语言中，我们可以通过实现 0 和加 1 的运算来解决没有数字 (至少在涉及非负整数时) 的问题。这种表示法被称为 <INDEX>丘奇数</INDEX> <EM>丘奇数</EM>，以其发明者逻辑学家 <INDEX>丘奇, 阿隆佐</INDEX> 阿隆佐·丘奇命名，他发明了演算
    <TEXT>
    直接定义 one 和 two（不是以 zero 和
    <SPLITINLINE>
      add-1）。
      <JAVASCRIPT><JAVASCRIPTINLINE>add_1</JAVASCRIPTINLINE>）。</JAVASCRIPT>
    </SPLITINLINE>
    （提示：使用替换法来评估
    <SPLITINLINE>
      (add-1 zero)）。
      <JAVASCRIPT><JAVASCRIPTINLINE>add_1(zero)</JAVASCRIPTINLINE>）。
      </JAVASCRIPT>
    </SPLITINLINE>
    直接给出加法的定义
    <SPLITINLINE>
      过程+
      <JAVASCRIPT>函数<JAVASCRIPTINLINE>plus</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    （不是以
    <SPLITINLINE>add-1连续应用的）。
    <JAVASCRIPT><JAVASCRIPTINLINE>add_1</JAVASCRIPTINLINE>）。</JAVASCRIPT>
    </SPLITINLINE>
    </TEXT>
    <SOLUTION>
      
    <NAME>church_solution</NAME>
    <EXPECTED>3</EXPECTED>
    <JAVASCRIPT>
const one = f =&gt; x =&gt; f(x);
const two = f =&gt; x =&gt; f(f(x));

function plus(n, m) {
    return f =&gt; x =&gt; n(f)(m(f)(x));
}

// testing

const three = plus(one, two);

function church_to_number(c) {
    return c(n =&gt; n + 1)(0);
}
church_to_number(three);
    </JAVASCRIPT>
    
    
      
    </SOLUTION>
 【16:8†cn.txt】  </LINEBREAK></SPACE></LINEBREAK>
</SUBSECTION>
