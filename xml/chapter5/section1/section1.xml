<SECTION>
  <NAME>Designing Register Machines</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:designing-register-machines"/>

  <INDEX>register machine<SUBINDEX>design of<OPEN/></SUBINDEX></INDEX>
  <INDEX>register machine<SUBINDEX>data paths<OPEN/></SUBINDEX></INDEX>
  <INDEX>register machine<SUBINDEX>controller<OPEN/></SUBINDEX></INDEX>
  <INDEX>data paths for register machine<OPEN/></INDEX>
  <INDEX>controller for register machine<OPEN/></INDEX>
  <INDEX>operation<SUBINDEX>in register machine<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    To design a register machine, we must design its <EM>data paths</EM>
    (registers and operations) and the <EM>controller</EM> that sequences
    these operations.  To illustrate the design of a simple register
    machine, let us examine Euclid<APOS/>s Algorithm, which is used to compute
    <INDEX><USE>gcd</USE><SUBINDEX>register machine for<OPEN/></SUBINDEX></INDEX>
    the greatest common divisor (GCD) of two integers.  As we saw in
    section<SPACE/><REF NAME="sec:gcd"/>,
    <INDEX>Euclid<APOS/>s Algorithm</INDEX>
    Euclid<APOS/>s Algorithm can be
    carried out by an iterative process, as specified by the following
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
      </SPLITINLINE>
    <SNIPPET>
      <EXAMPLE>gcd_example</EXAMPLE>	
      <SCHEME>
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
      </SCHEME>
      <JAVASCRIPT>
function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    A machine to carry out this algorithm must keep track of two numbers,
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE>, so let us
    assume that these numbers are stored in two registers with those names. The
    basic operations required are testing whether the contents of register
    <SCHEMEINLINE>b</SCHEMEINLINE> is zero and computing the remainder of the
    contents of register <SCHEMEINLINE>a</SCHEMEINLINE> divided by the contents
    of register <SCHEMEINLINE>b</SCHEMEINLINE>.

    The remainder operation is a complex process, but assume for the moment that
    we have a primitive device that computes remainders. On each cycle of the
    GCD algorithm, the contents of register <SCHEMEINLINE>a</SCHEMEINLINE> must
    be replaced by the contents of register <SCHEMEINLINE>b</SCHEMEINLINE>, and
    the contents of <SCHEMEINLINE>b</SCHEMEINLINE> must be replaced by the
    remainder of the old contents of <SCHEMEINLINE>a</SCHEMEINLINE> divided by
    the old contents of <SCHEMEINLINE>b</SCHEMEINLINE>. It would be convenient
    if these replacements could be done simultaneously, but in our model of
    register machines we will assume that only one register can be assigned a
    new value at each step. To accomplish the replacements, our machine will use
    a third <QUOTE>temporary</QUOTE> register, which we call
    <SCHEMEINLINE>t</SCHEMEINLINE>. (First the remainder will be placed in
    <SCHEMEINLINE>t</SCHEMEINLINE>, then the contents of
    <SCHEMEINLINE>b</SCHEMEINLINE> will be placed in
    <SCHEMEINLINE>a</SCHEMEINLINE>, and finally the remainder stored in
    <SCHEMEINLINE>t</SCHEMEINLINE> will be placed in
    <SCHEMEINLINE>b</SCHEMEINLINE>.)
  </TEXT>

  <TEXT>
    We can illustrate the registers and operations required for this
    machine by using the
    <INDEX>data paths for register machine<SUBINDEX>data-path diagram</SUBINDEX></INDEX>
    <INDEX>register machine<SUBINDEX>data-path diagram</SUBINDEX></INDEX>
    data-path diagram shown in
    figure<SPACE/><REF NAME="fig:gcd-machine"/>.  In this
    diagram, the registers (<SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, and <SCHEMEINLINE>t</SCHEMEINLINE>) are
    represented by rectangles.  Each way to assign a value to a register is
    indicated by an arrow with an <SCHEMEINLINE>X</SCHEMEINLINE> behind the
    head, pointing from the source of data to the register.  We can think of
    the <SCHEMEINLINE>X</SCHEMEINLINE> as a button that, when pushed, allows
    the value at the source to <QUOTE>flow</QUOTE> into the designated register.
    The label next to each button is the name we will use to refer to the
    button.  The names are arbitrary, and can be chosen to have mnemonic value
    (for example, <SCHEMEINLINE>a&lt;-b</SCHEMEINLINE> denotes pushing the
    button that assigns the contents of register <SCHEMEINLINE>b</SCHEMEINLINE>
    to register <SCHEMEINLINE>a</SCHEMEINLINE>).  The source of data for a
    register can be another register (as in the
    <SCHEMEINLINE>a&lt;-b</SCHEMEINLINE> assignment), an operation result (as in
    the <SCHEMEINLINE>t&lt;-r</SCHEMEINLINE> assignment), or a constant
    (a built-in value that cannot be changed, represented in a data-path
    diagram by a triangle containing the constant).
  </TEXT>

  <TEXT>
    An operation that computes a value from constants and the contents
    of registers is represented in a data-path diagram by a trapezoid
    containing a name for the operation.  For example, the box marked
    <SCHEMEINLINE>rem</SCHEMEINLINE> in
    figure<SPACE/><REF NAME="fig:gcd-machine"/> represents an operation that
    computes the remainder of the contents of the registers
    <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> to which
    it is attached.  Arrows (without buttons) point from the input registers and
    constants to the box, and arrows connect the operation<APOS/>s output value
    to registers. A test is represented by a circle containing a name for the
    test.  For  example, our GCD machine has an operation that tests whether the
    contents of register <SCHEMEINLINE>b</SCHEMEINLINE> is zero.  A
    <INDEX>test operation in register machine</INDEX>
    <INDEX>register machine<SUBINDEX>test operation</SUBINDEX></INDEX>
    test also has arrows from its input
    registers and constants, but it has no output
    arrows; its value is used by the controller rather than by the data
    paths.  Overall, the data-path diagram shows the registers and
    operations that are required for the machine and how they must be
    connected.  If we view the arrows as wires and the
    <SCHEMEINLINE>X</SCHEMEINLINE> buttons as switches, the data-path diagram
    is very like the wiring diagram for a machine that could be constructed
    from electrical components.
    <FIGURE>
      <FIGURE scale_factor="3" src="img_original/Fig5.1a.std.svg"/>
      <LABEL NAME="fig:gcd-machine"/>
      <CAPTION>Data paths for a GCD machine. </CAPTION>
    </FIGURE>
  </TEXT>

  <TEXT>
    In order for the data paths to actually compute GCDs, the buttons must
    be pushed in the correct sequence.  We will describe this sequence in
    terms of a
    <INDEX>register machine<SUBINDEX>controller diagram</SUBINDEX></INDEX>
    <INDEX>controller for register machine<SUBINDEX>controller diagram</SUBINDEX></INDEX>
    controller diagram, as illustrated in
    figure<SPACE/><REF NAME="fig:gcd-controller"/>.  The elements of the
    controller diagram indicate how the data-path components should be operated.
    The rectangular boxes in the controller diagram identify data-path buttons
    to be pushed, and the arrows describe the sequencing from one step to the
    next.  The diamond in the diagram represents a decision.  One of the two
    sequencing arrows will be followed, depending on the value of the data-path
    test identified in the diamond.  We can interpret the controller in terms
    of a physical analogy: Think of the diagram as a maze in which a marble is
    rolling.  When the marble rolls into a box, it pushes the data-path button
    that is named by the box.  When the marble rolls into a decision node (such
    as the test for
    <SCHEMEINLINE>b</SCHEMEINLINE><LATEXINLINE>$\, =0$</LATEXINLINE>), it leaves
    the node on the path determined by the result of the indicated test.
    Taken together, the data paths and the controller completely describe
    a machine for computing GCDs.  We start the controller (the rolling
    marble) at the place marked <SCHEMEINLINE>start</SCHEMEINLINE>, after
    placing numbers in registers <SCHEMEINLINE>a</SCHEMEINLINE> and
    <SCHEMEINLINE>b</SCHEMEINLINE>.  When the controller reaches
    <SCHEMEINLINE>done</SCHEMEINLINE>, we will find the value of the GCD in
    register <SCHEMEINLINE>a</SCHEMEINLINE>.
    <FIGURE>
      <FIGURE scale_factor="5" src="img_original/Fig5.2.std.svg"/>
      <LABEL NAME="fig:gcd-controller"/>
      <CAPTION>Controller for a GCD machine.</CAPTION>
    </FIGURE>
  </TEXT>

  <INDEX><USE>gcd</USE><SUBINDEX>register machine for<CLOSE/></SUBINDEX></INDEX>
  
  <EXERCISE>
    <LABEL NAME="ex:iterative-fact"/>
    Design a register machine to compute
    <INDEX><USE>factorial</USE><SUBINDEX>register machine for (iterative)</SUBINDEX></INDEX>
    factorials using the iterative
    algorithm specified by the following
    <SPLITINLINE POSTPADDING="no">
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Draw data-path and
    controller diagrams for this machine.
    <SNIPPET>
      <EXAMPLE>factorial_example</EXAMPLE>
      <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        return counter &gt; n 
               ? product
               : iter(counter * product,
                      counter + 1);
   }
   return iter(1, 1);
}    
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>

  <INDEX>data paths for register machine<CLOSE/></INDEX>
  <INDEX>controller for register machine<CLOSE/></INDEX>
  <INDEX>register machine<SUBINDEX>data paths<CLOSE/></SUBINDEX></INDEX>
  <INDEX>register machine<SUBINDEX>controller<CLOSE/></SUBINDEX></INDEX>
  <INDEX>operation<SUBINDEX>in register machine<CLOSE/></SUBINDEX></INDEX>

  <!-- Subsection 1 : A Language for Describing Register Machines -->
  &amp;subsection5.1.1;

  <!-- Subsection 2 : Abstraction in Machine Design -->
  &amp;subsection5.1.2;

  <!-- Subsection 3 : Subroutines -->
  &amp;subsection5.1.3;

  <!-- Subsection 4 : Using a Stack to Implement Recursion -->
  &amp;subsection5.1.4;

  <!-- Subsection 5 : Instruction Summary -->
  &amp;subsection5.1.5;

</SECTION>
