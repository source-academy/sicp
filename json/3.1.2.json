[{"id":"/sicpjs/3.1.2","tag":"TITLE","body":"3.1.2  \n    The Benefits of Introducing Assignment"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    As we shall see, introducing assignment into our programming language\n    leads us into a thicket of difficult conceptual issues.  Nevertheless,\n    viewing systems as\n    \n    collections of objects with local state is a\n    powerful technique for maintaining a\n    \n    modular design.  As a simple\n    example, consider the design of a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":" that, whenever\n    it is called, returns an integer chosen at random.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    It is not at all clear what is meant by \"","tag":"#text"},{"body":"chosen at random.","tag":"#text"},{"body":"\"\n    What we presumably want is for successive calls to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":" to produce a sequence of numbers that has\n    statistical properties of uniform distribution.  We will not discuss methods\n    for generating suitable sequences here.  Rather, let us assume that we have a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    that has the property that if we start with a given number\n    ","tag":"#text"},{"body":"$x_{1}$","tag":"LATEX"},{"body":" and form\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$x_2$ = rand_update($x_1$);\n$x_3$ = rand_update($x_2$);\n      "},{"body":"\n    then the sequence of values\n    ","tag":"#text"},{"body":"$x_1, x_2, x_3, \\ldots$","tag":"LATEX"},{"body":", will have the desired\n    statistical properties.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.1.2#footnote-1"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We can implement ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":" as a\n    function\n    with a local state variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" that is\n    initialized to some fixed value \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"random_init"},{"body":".\n    Each call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":" computes \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    of the current value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", returns this as the\n    random number, and also stores this as the new value of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":".\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":18,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuRQBBUANwFMAnAT1AGcBLAWwAcAbc0SgQwDsATAPoBXFv24AXTgDNhvAMYSGAe16h5y1sKl1Q3UL2FMARlQJhplTaAAMoABQMFbYYwoBKUBOWhsNmwCsAGw2ACwAnDYYKBgO+mzclADmnCyUzOTu5qCW1vqk3C6cAB6gxrRMwmxK7NROSaAMEqAA7k0AFnrqqnQSfM3cADTZ3Pz89V0avL39ZYN6Al7t5Gp9ANYTEstc5EzcTvxmhMrSoOOkDOO8DU1ltFucCcmp6UzkaKAA6pyu5PyNzWWlE42WkykojTYLl6PCUqlAqjY1HmfH+-B8vGUzXkCWYC1o2RmSl6DHkhVAaWULCoSnIdDQuCmvVATFAAF5fP5gmFItEMABuUCMnoDdmgDAYGwoAIYALYUIBfnC6bNYxijDYFAKpW4WQKOFqHgCERiSTkezFTwAb1woDtOwkwkoans+gAVKBSgBqMqeACkLKVAF98Ezmkb0UxBE5bhyNVrggB2AAc4R1esUKjUezW5EEEfs1ttdo4zVKHIjmmjvCaSvtwMdzocnjZAD5QDb7V3u3by1xUSbxFILe46z3xw2nWpimPx6Ag8HlcyI2Kc3mC6P8OM6OxuNR7BvN9vd-vD0rjwlT6jC6OgA","body":"function make_rand() {\n   let x = random_init;\n   return () => {\n              x = rand_update(x);\n              return x;\n          };\n}\nconst rand = make_rand(); "}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Of course, we could generate the same sequence of random numbers\n    without using assignment by simply calling \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    directly. However, this would mean that any part of our program that used\n    random numbers would have to explicitly remember the current value of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" to be passed as an argument to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":".\n    To realize what an annoyance this would be, consider using random numbers\n    to implement a technique called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Monte Carlo simulation","tag":"#text"}]},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The Monte Carlo method consists of choosing sample experiments at random\n    from a large set and then making deductions on the basis of the\n    probabilities estimated from tabulating the results of those experiments.\n    For example, we can approximate \n    ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":" using the fact that\n    ","tag":"#text"},{"body":"$6/\\pi^2$","tag":"LATEX"},{"body":" is the probability that two integers\n    chosen at random will have no factors in common; that is, that their\n    greatest common divisor will be 1.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.1.2#footnote-2"},{"body":"\n    To obtain the approximation to ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":", we perform\n    a large number of experiments. In each experiment we choose two integers at\n    random and perform a test\n    \n    to see if their GCD is 1.  The fraction of times that the test is passed\n    gives us our estimate of ","tag":"#text"},{"body":"$6/\\pi^2$","tag":"LATEX"},{"body":", and from this\n    we obtain our approximation to ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The heart of our program is a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"monte_carlo"},{"body":",\n    which takes as arguments the number of times to try an experiment, together\n    with the experiment, represented as a no-argument\n    function\n    that will return either true or false each time it is run.\n    \n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"monte_carlo"},{"body":"\n    runs the experiment for the designated number of trials and returns a\n    number telling the fraction of the trials in which the experiment was\n    found to be true.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":31,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuRQBBUANwFMAnAT1AGcBLAWwAcAbc0SgQwDsATAPoBXFv24AXTgDNhvAMYSGAe16h5y1sKl1Q3UL2FMARlQJhplTaAAMoABQMFbYYwoBKUBOWhsNmwCsAGw2ACwAnDYYKBgO+mzclADmnCyUzOTu5qCW1vqk3C6cAB6gxrRMwmxK7NROSaAMEqAA7k0AFnrqqnQSfM3cADTZ3Pz89V0avL39ZYN6Al7t5Gp9ANYTEstc5EzcTvxmhMrSoOOkDOO8DU1ltFucCcmp6UzkaKAA6pyu5PyNzWWlE42WkykojTYLl6PCUqlAqjY1HmfH+-B8vGUzXkCWYC1o2RmSl6DHkhVAaWULCoSnIdDQuCmvVATFAAF5fP5gmFItEMABuUCMnoDdmgDAYGwoAIYALYUIBfnC6bNYxijDYFAKpW4WQKOFqHgCERiSTkezFTwAb1woDtOwkwkoans+gAVKBSgBqMqeACkLKVAF98Ezmkb0UxBE5bhyNVrggB2AAc4R1esUKjUezW5EEEfs1ttdo4zVKHIjmmjvCaSvtwMdzocnjZAD5QDb7V3u3by1xUSbxFILe46z3xw2nWpimPx6Ag8HlcyI2Kc3mC6P8BmDaAkvJ+K75sYi13J021WzL7ZQAB+LoALl3+-sxhRoADx8XurkmfhdKUexSIILAMPYEjpIUdAnvW5CNtmkjtIIdAAI6UBI9hBKAYBMKoQFkpQbDKGBEFsHQ8zjOk8jtKWgg6BI7ibiG25ZmcDCUdRsG0f+hYdsWdpnmoe4Hhu8wbi2V4CrgTE-juOG8HhiSEcRDCQfM5DFNSrwrPRvFdsx8JNFQymQfmuz7DW1zzOBKmkcB3B0HQfzQT2AleCRdCmXsMbXOyV42Hxc5dne1kmSw9mOf8YAhaRAWBXaj7qZpGTyYWsVxXehmUMZtnAl5FkNAAtOKVnuXZDl-KAPoYFkcXdo+mXZR5uXmRMRUYCVNkeWF5X8JuXYhqesFTgCRnRWRtiMfg-7MGawGgZK-g2KOQA","body":"function estimate_pi(trials) {\n    return math_sqrt(6 / monte_carlo(trials, dirichlet_test));\n}\nfunction dirichlet_test() {\n    return gcd(rand(), rand()) === 1;\n}\nfunction monte_carlo(trials, experiment) {\n    function iter(trials_remaining, trials_passed) {\n        return trials_remaining === 0\n               ? trials_passed / trials\n               : experiment()\n               ? iter(trials_remaining - 1, trials_passed + 1)\n               : iter(trials_remaining - 1, trials_passed);\n    }\n    return iter(trials, 0);\n} "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Now let us try the same computation using \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    directly rather than ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":", the way we would be\n    forced to proceed if we did not use assignment to model local state:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":31,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuRQBBUANwFMAnAT1AGcBLAWwAcAbc0SgQwDsATAPoBXFv24AXTgDNhvAMYSGAe16h5y1sKl1Q3UL2FMARlQJhplTaAAMoABQMFbYYwoBKUBOWhsNmwCsAGw2ACwAnDYYKBgO+mzclADmnCyUzOTu5qCW1vqk3C6cAB6gxrRMwmxK7NROSaAMEqAA7k0AFnrqqnQSfM3cADTZ3Pz89V0avL39ZYN6Al7t5Gp9ANYTEstc5EzcTvxmhMrSoOOkDOO8DU1ltFucCcmp6UzkaKAA6pyu5PyNzWWlE42WkykojTYLl6PCUqlAqjY1HmfH+-B8vGUzXkCWYC1o2RmSl6DHkhVAaWULCoSnIdDQuCmvVATFAAF5fP5gmFItEMABuUCMnoDdmgDAYGwoAIYALYUIBfnC6bNYxijDYFAKpW4WQKOFqHgCERiSTkezFTwAb1woDtOwkwkoans+gAVKBSgBqMqeACkLKVAF98Ezmkb0UxBE5bhyNVrggB2AAc4R1esUKjUezW5EEEfs1ttdo4zVKHIjmmjvCaSvtwMdzocnjZAD5QDb7V3u3by1xUSbxFILe46z3xw2nWpimPx6Ag8HlcyI2Kc3mC6P8BmDaAkvJ+K75sYi13J021WzL7ZQAB+LoALl3+-sxhRoADx8XurkmfhdKUexSIILAMPYEjpIUdAnvW5CNtmkjtIIdAAI6UBI9hBKAYCVlGe5CDo6HgQwkHzDh1ZNO4m4htuWb9gIVZ4YIBFgRBbB0PMMZKIUgiWh2xZ2jR8JNFQLHEWx+a7PsNbXPMRGQcB3B0HQfzzLxnbjmGnqxBWA6iEO5qWrO3aacU2BihGg5mhaGCbnOZ6rKxdASXsMbXOyV42Pxc5dnecniSwinKf8YB+XQXneXaj54dZqnYC2V4YOFEV3sJlCifJwIudJDQALTirJjkKUpfygD6GCxVkEXdo+qXpeJmVSRMeXlV4hUBcV-AVUZIanrBU4AiJoXzDYHE1lxbA8VR+D-swZrAaBkr+DYo5AA","body":"function estimate_pi(trials) {\n    return math_sqrt(6 / random_gcd_test(trials, random_init));\n}\nfunction random_gcd_test(trials, initial_x) {\n    function iter(trials_remaining, trials_passed, x) {\n        const x1 = rand_update(x);\n        const x2 = rand_update(x1);\n        return trials_remaining === 0\n               ? trials_passed / trials\n               : gcd(x1, x2) === 1\n               ? iter(trials_remaining - 1, trials_passed + 1, x2)\n               : iter(trials_remaining - 1, trials_passed, x2);\n    }\n    return iter(trials, 0, initial_x);\n} "}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    While the program is still simple, it betrays some painful breaches of\n    modularity.  In our first version of the program, using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":", we can express the Monte Carlo method\n    directly as a general \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"monte_carlo"},{"body":"function\n    that takes as an argument an arbitrary\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"experiment"},{"body":"function.\n    In our second version of the program, with no local state for the\n    random-number generator, \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"random_gcd_test"},{"body":" \n    must explicitly manipulate the random numbers\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x2"},{"body":" and\n    recycle ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x2"},{"body":" through the iterative loop as the\n    new input to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":".\n    This explicit handling of the random numbers intertwines the structure of\n    accumulating test results with the fact that our particular experiment uses\n    two random numbers, whereas other Monte Carlo experiments might use one\n    random number or three.  Even the top-level\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"estimate_pi"},{"body":"\n    has to be concerned with supplying an initial random number.  The fact that\n    the random-number generator's insides are leaking out into other parts\n    of the program makes it difficult for us to isolate the Monte Carlo idea so\n    that it can be applied to other tasks.  In the first version of the program,\n    assignment encapsulates the state of the random-number generator within the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":"function,\n    so that the details of random-number generation remain independent of the\n    rest of the program.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    The general phenomenon illustrated by the Monte Carlo example is this: From\n    the point of view of one part of a complex process, the other parts appear\n    to change with time.  They have hidden time-varying local state.  If we wish\n    to write computer programs whose structure reflects this decomposition, we\n    make computational objects (such as bank accounts and random-number\n    generators) whose behavior changes with time.  We model state with local\n    state variables, and we model the changes of state with assignments to those\n    variables.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    It is tempting to conclude this discussion by saying that, by introducing\n    assignment and the technique of hiding state in local variables, we are able\n    to structure systems in a more modular fashion than if all state had to be\n    manipulated explicitly, by passing additional parameters.  Unfortunately,\n    as we shall see, the story is not so simple.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.5","id":"#ex-3.5","child":[{"tag":"EM","child":[{"body":"Monte Carlo integration","tag":"#text"}]},{"body":"\n    is a method of estimating definite\n    integrals by means of Monte Carlo simulation.  Consider computing the\n    area of a region of space described by a predicate\n    ","tag":"#text"},{"body":"$P(x, y)$","tag":"LATEX"},{"body":" that is true for points\n    ","tag":"#text"},{"body":"$(x, y)$","tag":"LATEX"},{"body":" in the region and false for points not\n    in the region.  For example, the region contained within a circle of radius\n    ","tag":"#text"},{"body":"$3$","tag":"LATEX"},{"body":" centered at\n    ","tag":"#text"},{"body":"$(5, 7)$","tag":"LATEX"},{"body":" is described by the predicate that tests\n    whether ","tag":"#text"},{"body":"$(x-5)^2 + (y-7)^2\\leq 3^2$","tag":"LATEX"},{"body":".  To estimate\n    the area of the region described by such a predicate, begin by choosing a\n    rectangle that contains the region.  For example, a rectangle with diagonally\n    opposite corners at ","tag":"#text"},{"body":"$(2, 4)$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$(8, 10)$","tag":"LATEX"},{"body":" contains the circle above. The desired\n    integral is the area of that portion of the rectangle that lies in the\n    region.  We can estimate the integral by picking, at random, points\n    ","tag":"#text"},{"body":"$(x, y)$","tag":"LATEX"},{"body":" that lie in the rectangle, and testing\n    ","tag":"#text"},{"body":"$P(x, y)$","tag":"LATEX"},{"body":" for each point to determine whether the\n    point lies in the region. If we try this with many points, then the fraction\n    of points that fall in the region should give an estimate of the proportion\n    of the rectangle that lies in the region.  Hence, multiplying this fraction\n    by the area of the entire rectangle should produce an estimate of the\n    integral.\n    \n    Implement Monte Carlo integration as a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"estimate_integral"},{"body":"\n    that takes as arguments a predicate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"P"},{"body":", upper\n    and lower bounds ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x1"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x2"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y1"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y2"},{"body":" for the rectangle, and the number of trials\n    to perform in order to produce the estimate.  Your\n    function\n    should use the same \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"monte_carlo"},{"body":"function\n    that was used above to estimate ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":".  Use your \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"estimate_integral"},{"body":"\n    to produce an estimate of ","tag":"#text"},{"body":"$\\pi$","tag":"LATEX"},{"body":" by measuring the\n    area of a unit circle.\n    \n    You will find it useful to have a\n    function\n    that returns a number chosen at random from a given range.  The following \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"random_in_range"},{"body":"function\n    implements this in terms of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_random"},{"body":"\n\tfunction\n      \n    used in section ","tag":"#text"},{"tag":"REF","body":"1.2.6","href":"/sicpjs/1.2.6"},{"body":", which returns a\n    nonnegative number less \n    \n\tthan 1.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AJwEMSATGgWwAoSBKUAN65QIxgFMKRBvQ5MKACwD6BADY0aDLrIWLmbTl34AqUHwDcuAL75i5anUYt2HRVRK6WAczFc1AdwAaUHkqT3l+IVFQMjoAZwpHEm9QAF5g0PlQAFpQfwsohgkpen9QAGpQbSU9Z0NQEz1vC2tcGs5Xd0afAA4ABn7eoO6MAd4zIA","body":"function random_in_range(low, high) {\n    const range = high - low;\n    return low + math_random() * range;\n} "}],"solution":[{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":52,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvhCgAgqABundgE9GVALYAHADacJrEgBMA+kQsPWFW8XLU6oMjSWRJ4MoKygJERmAEaGuFoE7IGgAAyg3FTkVkQMVAaCFDSg2CkpAKwAbCkALACcKRgoGOnhVhwA5rYW7Oac-PFgicnheqzZtnLRJmZEVtTWRpntoFQUoADuqwAWYf50DBT2a6wANANhDg5LuwEkB0eg0SdhjqAUW5z0hwDW1++2XDMrEyDjiWhoBFAVz0VCuJGWq0eJn+oDa7E6oG6vTQoAA6rYcpwHCs1h8uKBzgQaOwVlZsgd2B5aPQ6FYjM97MSHEUSDQ1mQ2uYXiZzvdqAcqGQxpikhZDNROAw0LhbgdQGZQABeYqlSo1eqNDDKCmq45a0AYDApFBlDBlbDVMqqU2Pc0YbAoR2qQikSjMuyOFxuDw8ATCUTiSTSejccKKOQAakeggApOrVBoVfs1ozHIEnJlEdr3Z7KgB2AActW93j9fiB304TlzDm4ghE4hsazk2pb+cLFFUkc4Uhk6UEmoAfOHxLO52IewHnK53J4+Pwh-Ot1GxyoI1vQGoM1m7jnOeaG02W22a77fPR2mRW6dkzPh6P6NEtZrtWkAPy7AAXKAj6tk8uxptEG7qPgtb3qAirUECnhOBYVDcBQPRjAw7b7hII7RuqHhbE4zDsBQ3AVKAYBmHQKFSuwVg0BhWFWAwzxXD0ZBbF2TghBQ-DQRocH+pxko8SOfGIW2b5iDuD5Ptw178M8ykTj+FrHiJ9Z0U2DFMSxVDYc8nC8HKPRmJ8AmyaA2n0KshiGdhzacEChbws8mFGWxqGsAwDBErhB7yW8rEMC5bkkNcP6-nhB7iABXnORYfkBcSYBJWxcXxaAwGmeZvQkBR-Q5XOAEOewTk+YCwJRfCoAALQWp5YW+f5RKgEmGAlaV4jARVVXhTV7nLE1GAtd54Upe1DjQbOGiziFA2ZexqRCbBd7+n2ZgFiQzb2J03BMeszxbFQ7RbEF4gurmGLamdF2NaiNDrJuckEWOx2dUR7z7XmZgyYot2cFpm1+Ih5ghrtnjtIyVjcN0RLPLw41KNgzxGKjRjo6Fk1XWILocJwrAuZQ5p8NgT0o4IijcNjT2Y3N76EbRRV6RwBkrWcvWlTJU4ykSSmcv2e3A3wqO8NgKnZTzstLiLf2HZjGNS4JChhFwJNcJQx4+j4-qZLkoIuFFFBOGQVDsAKoYY-j+EfowLBE+u33MGwXB04IAA8xbHhDyFNpkMNwxkdywk2pCrOblvW88DWo6j8fPKjZSlKUG5AA","body":"function random_in_range(low, high) {\n    const range = high - low;\n    return low + math_random() * range;\n}\nfunction estimate_integral(pred, x1, x2, y1, y2, trials) {\n    const area_rect = (x2 - x1) * (y2 - y1);\n    return monte_carlo(trials,\n                       () => pred(random_in_range(x1, x2),\n                                  random_in_range(y1, y2))) * area_rect;\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.6","id":"#ex-3.6","child":[{"body":"\n    It is useful to be able to\n    \n    reset a random-number generator to produce\n    a sequence starting from a given value.  Design a new\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand"},{"body":"function\n    that is called with an argument that is either the\n    \n\tstring ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"generate\""},{"body":" or the string\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"reset\""},{"body":"\n    and behaves as follows:\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand(\"generate\")"},{"body":"\n    produces a new random number; \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand(\"reset\")("},{"tag":"META","body":"new-value"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n    resets the internal state variable to the designated ","tag":"#text"},{"tag":"META","body":"new-value"},{"body":". Thus, by resetting the\n    state, one can generate repeatable sequences.  These are very handy to have\n    when testing and debugging programs that use random numbers.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0CYBQuAbAUwBdQBnEgQxKNAF5RsBufAMwFcA7AYxIEsA9l1AAnKlwAmACnIBPALYAjQQQCUoAN65Qu0PzahZilQQb1GAIlFFypSxu17nY0h1EiuRAO4B9SjR09AB8WjouEZEBtAygXn7RRKyRKQC+yXqpoEQEdmEpIBQmqvrkoJYA5kRe4rSW4RGJsbLUMQBUoBgADN0aAKSd3RgZETYk7iKJI6BZuKn4kvzkAA4EVHLS4lLSldVEtUQOaqyLK2sbWzK7NYFHJ0ur65sSV1U3dWrH+IUAKgAWSwof0EHAIklAp0eclAAE4MDCADSgAAsAHYkRhsKj8JcdjY7CQHNJsF9cIVwK06ID8aRQCRBExQFQKlR+FwFg9zs9ttd9rdPvczk9cbyDndcJCuSK3nyPqTCgAhIg8KgcPJs-gCKhmJqAkh-OjkKgKIhIuGIlHozpY0oQznrIjg5msrhAA","body":"let state = 2;\n\nfunction rand(symbol) {\n    if (symbol === \"reset\") {\n        return new_state => {\n                   state = new_state;\n               };\n    } else {\n        // symbol is \"generate\"\n        state = (state * 1010) % 1101;\n        return state;\n    } \n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.1.2#footnote-link-1","child":[{"body":"One common way to implement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    is to use the rule that ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is updated to\n    ","tag":"#text"},{"body":"$ax+b$","tag":"LATEX"},{"body":" modulo ","tag":"#text"},{"body":"$m$","tag":"LATEX"},{"body":",\n    where ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":", and\n    ","tag":"#text"},{"body":"$m$","tag":"LATEX"},{"body":" are appropriately chosen integers.\n    Chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":" of\n    Knuth 1997b includes an extensive\n    discussion of techniques for generating sequences of random numbers and\n    establishing their statistical properties.  Notice that the \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":"function\n    computes a mathematical function: Given the same input twice, it\n    produces the same output.  Therefore, the number sequence produced by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rand_update"},{"body":" \n    certainly is not \"","tag":"#text"},{"body":"random,","tag":"#text"},{"body":"\" if by \"","tag":"#text"},{"body":"random","tag":"#text"},{"body":"\" we\n    insist that each number in the sequence is unrelated to the preceding\n    number.  The relation between \"","tag":"#text"},{"body":"real randomness","tag":"#text"},{"body":"\" and so-called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"pseudo-random","tag":"#text"}]},{"body":" sequences, which are produced by well-determined\n      computations and yet have suitable statistical properties, is a\n      complex question involving difficult issues in mathematics and\n      philosophy.  \n      \n      Kolmogorov,\n      \n      Solomonoff, and\n      \n      Chaitin have made great\n      progress in clarifying these issues; a discussion can be found in\n      Chaitin 1975.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.1.2#footnote-link-2","child":[{"body":"This theorem is due to G. \n    \n    Lejeune Dirichlet.  See section 4.5.2 of\n    Knuth 1997b for a discussion and a proof.","tag":"#text"}]}]