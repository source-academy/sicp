<SUBSECTION>
  <NAME>
    Example: Huffman Encoding Trees
  </NAME>

  <LABEL NAME="sec:huffman"/>
  <INDEX>Huffman code<OPEN/></INDEX>

  <TEXT>
    This section provides practice in the use of list structure and data
    abstraction to manipulate sets and trees.  The application is to
    methods for representing data as sequences of ones and zeros (bits).
    For example, the
    <INDEX>ASCII code</INDEX>
    <INDEX>code<SUBINDEX>ASCII</SUBINDEX></INDEX>
    ASCII standard code used to represent text in
    computers encodes each
    <INDEX>character, ASCII encoding</INDEX>
    character as a sequence of seven bits.  Using
    seven bits allows us to distinguish <LATEXINLINE>$2^7$</LATEXINLINE>, or
    128, possible different characters.  In general, if we want to distinguish
    <LATEXINLINE>$n$</LATEXINLINE> different symbols, we will need to use
    <LATEXINLINE>$\log_2 n$</LATEXINLINE> bits per symbol.  If all our messages
    are made up of the eight symbols A, B, C, D, E, F, G, and H, we can choose
    a code with three bits per character, for example
      <LATEX>
      \[\begin{array}{llllllllllllllllll}
      \textrm{A} &amp; 000 &amp; &amp; &amp;  &amp; \textrm{C} &amp; 010 &amp; &amp; &amp;  &amp;
      \textrm{E} &amp; 100 &amp; &amp; &amp;  &amp; \textrm{G} &amp; 110         \\
      \textrm{B} &amp; 001 &amp; &amp; &amp;  &amp; \textrm{D} &amp; 011 &amp; &amp; &amp;  &amp;
      \textrm{F} &amp; 101 &amp; &amp; &amp;  &amp; \textrm{H} &amp; 111 
      \end{array}\]
      </LATEX>
    With this code, the message
    <BLOCKQUOTE>
BACADAEAFABBAAAGAH
    </BLOCKQUOTE>
    is encoded as the string of 54 bits
    <BLOCKQUOTE>
001000010000011000100000101000001001000000000110000111
    </BLOCKQUOTE>
  </TEXT>
  <TEXT>
    Codes such as ASCII and the A-through-H code above are known as
    <INDEX>fixed-length code</INDEX>
    <INDEX>code<SUBINDEX>fixed-length</SUBINDEX></INDEX>
    <EM>fixed-length</EM> codes, because they represent each symbol in the
    message with the same number of bits.  It is sometimes advantageous to use
    <INDEX>variable-length code</INDEX>
    <INDEX>code<SUBINDEX>variable-length</SUBINDEX></INDEX>
    <EM>variable-length</EM> codes, in which different symbols may be
    represented by different numbers of bits.  For example,
    <INDEX>Morse code</INDEX>
    <INDEX>code<SUBINDEX>Morse</SUBINDEX></INDEX>
    Morse code does not use the same number of dots and dashes for each letter
    of the alphabet.  In particular, E, the most frequent letter, is represented
    by a single dot.  In general, if our messages are such that some symbols
    appear very frequently and some very rarely, we can encode data more
    efficiently (i.e., using fewer bits per message) if we assign shorter
    codes to the frequent symbols.  Consider the following alternative code for
    the letters A through H:
      <LATEX>
      \[\begin{array}{llllllllllllllllll}
      \textrm{A} &amp; 0 &amp; &amp; &amp;  &amp; \textrm{C} &amp; 1010 &amp; &amp; &amp;  &amp;
      \textrm{E} &amp; 1100 &amp; &amp; &amp;  &amp; \textrm{G} &amp; 1110        \\
      \textrm{B} &amp; 100 &amp; &amp; &amp;  &amp; \textrm{D} &amp; 1011 &amp; &amp; &amp;  &amp;
      \textrm{F} &amp; 1101 &amp; &amp; &amp;  &amp; \textrm{H} &amp; 1111  
      \end{array}\]
      </LATEX>
    With this code, the same message as above is encoded as the string
    <BLOCKQUOTE>
100010100101101100011010100100000111001111
    </BLOCKQUOTE>
    This string contains 42 bits, so it saves more than 20% in space in
    comparison with the fixed-length code shown above.
  </TEXT>
  <TEXT>
    One of the difficulties of using a variable-length code is knowing
    when you have reached the end of a symbol in reading a sequence of
    zeros and ones.  Morse code solves this problem by using a special
    <INDEX>separator code</INDEX>
    <EM>separator code</EM> (in this case, a pause) after the sequence of
    dots and dashes for each letter.  Another solution is to design the
    code in such a way that no complete code for any symbol is the
    beginning (or <EM>prefix</EM>) of the code for another symbol.  Such a
    code is called a
    <INDEX>prefix code</INDEX>
    <INDEX>code<SUBINDEX>prefix</SUBINDEX></INDEX>
    <EM>prefix code</EM>.  In the example above, A is encoded by 0 and B is
    encoded by 100, so no other symbol can have a code that begins with 0 or
    with 100.
  </TEXT>
  <TEXT>
    In general, we can attain significant savings if we use
    variable-length prefix codes that take advantage of the relative
    frequencies of the symbols in the messages to be encoded.  One
    particular scheme for doing this is called the Huffman encoding
    method, after its discoverer,
    <INDEX>Huffman, David</INDEX>
    David Huffman.  A Huffman code can be represented as a
    <INDEX>binary tree<SUBINDEX>for Huffman encoding</SUBINDEX></INDEX>
    <INDEX>tree<SUBINDEX>Huffman</SUBINDEX></INDEX>
    binary tree whose leaves are the symbols that are encoded.  At each
    non-leaf node of the tree there is a set containing all the symbols in the
    leaves that lie below the node.  In addition, each symbol at a leaf is
    assigned a weight (which is its relative frequency), and each non-leaf
    node contains a weight that is the sum of all the weights of the leaves
    lying below it.  The weights are not used in the encoding or the decoding
    process.  We will see below how they are used to help construct the tree.
  </TEXT>
  <TEXT>
    <FIGURE>
      <FIGURE web_scale="0.7" src="img_original/ch2-Z-G-53.svg"></FIGURE>
      <CAPTION>A Huffman encoding tree.</CAPTION>
      <LABEL NAME="fig:huffman"/>
    </FIGURE>
    Figure<SPACE/><REF NAME="fig:huffman"/> shows the Huffman tree for the
    A-through-H code given above.  The weights at the leaves indicate that the
    tree was designed for messages in which A appears with relative frequency
    8, B with relative frequency 3, and the other letters each with relative
    frequency 1.
  </TEXT>
  <TEXT>
    Given a Huffman tree, we can find the encoding of any symbol by
    starting at the root and moving down until we reach the leaf that
    holds the symbol.  Each time we move down a left branch we add a 0 to
    the code, and each time we move down a right branch we add a 1.  (We
    decide which branch to follow by testing to see which branch either is
    the leaf node for the symbol or contains the symbol in its set.)  For
    example, starting from the root of the tree in
    figure<SPACE/><REF NAME="fig:huffman"/>, we arrive at the leaf for D by
    following a right branch, then a left branch, then a right branch, then a
    right branch; hence, the code for D is 1011.
  </TEXT>
  <TEXT>
    To decode a bit sequence using a Huffman tree, we begin at the root
    and use the successive zeros and ones of the bit sequence to determine
    whether to move down the left or the right branch.  Each time we come
    to a leaf, we have generated a new symbol in the message, at which
    point we start over from the root of the tree to find the next symbol.
    For example, suppose we are given the tree above and the sequence
    10001010.  Starting at the root, we move down the right branch, (since
    the first bit of the string is<SPACE/>1), then down the left branch (since
    the second bit is<SPACE/>0), then down the left branch (since the third bit
    is also<SPACE/>0).  This brings us to the leaf for<SPACE/>B, so the first
    symbol of the decoded message is<SPACE/>B.  Now we start again at the root,
    and we make a left move because the next bit in the string is<SPACE/>0.
    This brings us to the leaf for<SPACE/>A.  Then we start again at the root
    with the rest of the string 1010, so we move right, left, right, left and
    reach<SPACE/>C. Thus, the entire message is BAC.
  </TEXT>

  <SUBHEADING>
    <NAME>Generating Huffman trees</NAME>
  </SUBHEADING>

  <TEXT>
    Given an <QUOTE>alphabet</QUOTE> of symbols and their relative frequencies,
    how do we construct the <QUOTE>best</QUOTE> code?  (In other words, which
    tree will encode messages with the fewest bits?)  Huffman gave an algorithm
    for doing this and showed that the resulting code is indeed the best
    variable-length code for messages where the relative frequency of the
    symbols matches the frequencies with which the code was constructed.
    <INDEX>optimality<SUBINDEX>of Huffman code</SUBINDEX></INDEX>
    <INDEX>Huffman code<SUBINDEX>optimality of</SUBINDEX></INDEX>
    We will not prove this optimality of Huffman codes here, but we will
    show how Huffman trees are constructed.<FOOTNOTE>See
    <INDEX>Hamming, Richard Wesley</INDEX>
    <CITATION>Hamming 1980</CITATION>
    for a discussion of the mathematical properties of Huffman codes.</FOOTNOTE>
  </TEXT>
  <TEXT>
    The algorithm for generating a Huffman tree is very simple. The idea
    is to arrange the tree so that the symbols with the lowest frequency
    appear farthest away from the root. Begin with the set of leaf nodes,
    containing symbols and their frequencies, as determined by the initial data
    from which the code is to be constructed. Now find two leaves with
    the lowest weights and merge them to produce a node that has these
    two nodes as its left and right branches. The weight of the new node
    is the sum of the two weights. Remove the two leaves from the
    original set and replace them by this new node. Now continue this
    process. At each step, merge two nodes with the smallest weights,
    removing them from the set and replacing them with a node that has
    these two as its left and right branches. The process stops when
    there is only one node left, which is the root of the entire tree.
    Here is how the Huffman tree of figure<SPACE/><REF NAME="fig:huffman"/> was
    generated:
    <SPLIT>
      <SCHEME>
	<FIGURE src="img_tex/ch2_3_4-3.png"></FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <BLOCKQUOTE>
	<TABLE>
	  <TR>
            <TD>
	      Initial leaves
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (B,3), (C,1), (D,1), (E,1), (F,1), (G,1), (H,1)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (B,3), (\{C, D\},2), (E,1), (F,1), (G,1), (H,1)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (B,3), (\{C, D\},2), (\{E,F\},2), (G,1), (H,1)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (B,3), (\{C, D\},2), (\{E,F\},2), (\{G,H\},2)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (B,3), (\{C, D\},2), (\{E,F,G,H\},4)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (\{B,C,D\},5), (\{E,F,G,H\},4)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(A,8), (\{B,C,D,E,F,G,H\},9)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      Final merge
	    </TD>
            <TD>
	      <LATEXINLINE>$\{$</LATEXINLINE>(\{A,B,C,D,E,F,G,H\},17)<LATEXINLINE>$\}$</LATEXINLINE>
	    </TD>
	  </TR>
	</TABLE>
        </BLOCKQUOTE>
      </JAVASCRIPT>
    </SPLIT>
    The algorithm does not always specify a unique tree, because there may
    not be unique smallest-weight nodes at each step.  Also, the choice of
    the order in which the two nodes are merged (i.e., which will be the
    right branch and which will be the left branch) is arbitrary.
  </TEXT>

  <SUBHEADING>
    <NAME>Representing Huffman trees</NAME>
  </SUBHEADING>

  <TEXT>
    In the exercises below we will work with a system that uses
    Huffman trees to encode and decode messages and generates Huffman
    trees according to the algorithm outlined above.  We will begin by
    discussing how trees are represented.
  </TEXT>
  <TEXT>
    Leaves of the tree are represented by a list consisting of the
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>leaf</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"leaf"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    the symbol at the leaf, and the weight:
    <SNIPPET>
      <INDEX><DECLARATION>make_leaf</DECLARATION></INDEX> 
      <INDEX><DECLARATION>is_leaf</DECLARATION></INDEX> 
      <INDEX><DECLARATION>symbol_leaf</DECLARATION></INDEX> 
      <INDEX><DECLARATION>weight_leaf</DECLARATION></INDEX> 
      <NAME>make_leaf</NAME>
      <EXAMPLE>make_leaf_example</EXAMPLE>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))
      </SCHEME>
      <JAVASCRIPT>
function make_leaf(symbol, weight) {
    return list("leaf", symbol, weight);
}
function is_leaf(object) {
    return head(object) === "leaf";
}
function symbol_leaf(x) {
    return head(tail(x));
}
function weight_leaf(x) {
    return head(tail(tail(x)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_leaf_example</NAME>
      <JAVASCRIPT>
const my_leaf = make_leaf("A", 8);

weight_leaf(my_leaf);
      </JAVASCRIPT>
    </SNIPPET>
    A general tree will be a list of
    <SPLITINLINE>
      <JAVASCRIPT>
	a string <JAVASCRIPTINLINE>"code_tree"</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    a left branch, a right branch, a set
    of symbols, and a weight.  The set of symbols will be simply a list of
    the symbols, rather than some more sophisticated set representation.
    When we make a tree by merging two nodes, we obtain the weight of the
    tree as the sum of the weights of the nodes, and the set of symbols as
    the union of the sets of symbols for the nodes.  Since our symbol sets are
    represented as lists, we can form the union by using the
    <SCHEMEINLINE>append</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    we defined in section<SPACE/><REF NAME="sec:sequences"/>:
    <SNIPPET>
      <INDEX><DECLARATION>make_code_tree</DECLARATION></INDEX> 
      <NAME>make_code_tree</NAME>
      <EXAMPLE>make_code_tree_example</EXAMPLE>
      <EXPECTED>[ 'leaf', [ 'A', [ 8, null ] ] ]</EXPECTED>
      <REQUIRES>tree_property</REQUIRES>
      <SCHEME>
(define (make-code-tree left right)
  (list left
    right
    (append (symbols left) (symbols right))
    (+ (weight left) (weight right))))
      </SCHEME>
      <JAVASCRIPT>
function make_code_tree(left,right) {
    return list("code_tree", left, right,
                append(symbols(left), symbols(right)),
                weight(left) + weight(right));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_code_tree_example</NAME>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

make_code_tree(my_leaf_1, my_leaf_2);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

head(tail(make_code_tree(my_leaf_1, my_leaf_2)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    If we make a tree in this way, we have the following selectors:
    <SNIPPET>
      <INDEX><DECLARATION>left_branch</DECLARATION></INDEX> 
      <INDEX><DECLARATION>right_branch</DECLARATION></INDEX> 
      <INDEX><DECLARATION>symbols</DECLARATION></INDEX> 
      <INDEX><DECLARATION>weight</DECLARATION></INDEX> 
      <NAME>tree_property</NAME>
      <REQUIRES>make_leaf</REQUIRES>
      <EXAMPLE>tree_property_example</EXAMPLE>
      <EXPECTED>11</EXPECTED>
      <SCHEME>
(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
    (list (symbol-leaf tree))
    (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
    (weight-leaf tree)
    (cadddr tree)))
      </SCHEME>
      <JAVASCRIPT>
function left_branch(tree) {
    return head(tail(tree));
}
function right_branch(tree) {
    return head(tail(tail(tree)));
}
function symbols(tree) {
    return is_leaf(tree)
           ? list(symbol_leaf(tree))
           : head(tail(tail(tail(tree))));
}
function weight(tree) {
    return is_leaf(tree)
           ? weight_leaf(tree)
           : head(tail(tail(tail(tail(tree)))));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>tree_property_example</NAME>
      <REQUIRES>make_code_tree</REQUIRES>
      <REQUIRES>make_leaf</REQUIRES>
      <EXAMPLE>tree_property_example</EXAMPLE>
      <JAVASCRIPT>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);
const my_tree = make_code_tree(my_leaf_1, my_leaf_2);

weight(my_tree);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    The
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>symbols</SCHEMEINLINE> and
    <SCHEMEINLINE>weight</SCHEMEINLINE> must do something slightly different
    depending on whether they are called with a leaf or a general tree.
    These are simple examples of
    <INDEX>generic <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></INDEX>
    <INDEX><FUNCTION/><SUBINDEX>generic</SUBINDEX></INDEX>
    <EM>
      generic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    </EM>
    <SPLITINLINE><SCHEME>(procedures</SCHEME>
    <JAVASCRIPT>(functions</JAVASCRIPT></SPLITINLINE>
    that can handle more than one kind of data), which we will have much more
    to say about in sections<SPACE/><REF NAME="sec:multiple-reps"/>
    and<SPACE/><REF NAME="sec:generic-operators"/>.
  </TEXT>

  <SUBHEADING>
    <NAME>
      The decoding
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
    </NAME>
  </SUBHEADING>

  <TEXT>
    The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    implements the decoding algorithm. It takes as arguments a list of zeros
    and ones, together with a Huffman tree.
    <SNIPPET>
      <INDEX><DECLARATION>decode</DECLARATION></INDEX> 
      <NAME>decode_function</NAME>
      <REQUIRES>make_leaf</REQUIRES>
      <REQUIRES>make_code_tree</REQUIRES>
      <REQUIRES>tree_property</REQUIRES>
      <EXAMPLE>decode_function_example</EXAMPLE>
      <EXPECTED>[ 'B', [ 'B', [ 'A', null ] ] ]</EXPECTED>
      <SCHEME>
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
      '()
      (let ((next-branch
              (choose-branch (car bits) current-branch)))
        (if (leaf? next-branch)
          (cons (symbol-leaf next-branch)
                (decode-1 (cdr bits) tree))
          (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
      </SCHEME>
      <JAVASCRIPT>
function decode(bits, tree) {
    function decode_1(bits, current_branch) {
        if (is_null(bits)) {
            return null;
        } else {
            const next_branch = choose_branch(head(bits),
                                    current_branch);
            return is_leaf(next_branch)
                   ? pair(symbol_leaf(next_branch),
                          decode_1(tail(bits), tree))
                   : decode_1(tail(bits), next_branch);
        }
    }
    return decode_1(bits, tree);
}
function choose_branch(bit, branch) {
    return bit === 0
           ? left_branch(branch)
           : bit === 1
           ? right_branch(branch)
           : error(bit, "bad bit -- choose_branch");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>decode_function_example</NAME>
      <JAVASCRIPT>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

const my_tree = make_code_tree(my_leaf_1, my_leaf_2);

decode(list(0, 1, 1, 0), my_tree);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

const my_tree = make_code_tree(my_leaf_1, my_leaf_2);

tail(decode(list(0, 1, 1, 0), my_tree));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>decode-1</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>decode_1</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    takes two arguments: the list of remaining bits and the current position in
    the tree.  It keeps moving <QUOTE>down</QUOTE> the tree, choosing a left or
    a right branch according to whether the next bit in the list is a zero or a
    one.  (This is done with the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>choose-branch</SCHEMEINLINE>.)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>choose_branch</JAVASCRIPTINLINE>.)
      </JAVASCRIPT>
    </SPLITINLINE>
    When it reaches a leaf, it returns the symbol at that leaf as the next
    symbol in the message by
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>cons</SCHEMEINLINE>ing
	it onto the result of decoding the rest of the message,
	starting at the root of the tree.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>ing
	it onto the result of decoding the rest of the message,
	starting at the root of the tree.
      </JAVASCRIPT>
    </SPLITINLINE>
    Note the error check in the final clause of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>choose-branch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>choose_branch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
      which complains if the
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
    finds something other than a zero or a one in the input data.
  </TEXT>

  <SUBHEADING>
    <NAME>Sets of weighted elements</NAME>
  </SUBHEADING>

  <TEXT>
    In our representation of trees, each non-leaf node contains a set of
    symbols, which we have represented as a simple list.  However, the
    tree-generating algorithm discussed above requires that we also work
    with sets of leaves and trees, successively merging the two smallest
    items.  Since we will be required to repeatedly find the smallest item
    in a set, it is convenient to use an ordered representation for this
    kind of set.
  </TEXT>
  <TEXT>
    We will represent a set of leaves and trees as a list of elements,
    arranged in increasing order of weight.
    The following
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>adjoin-set</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>adjoin_set</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for constructing sets is similar to the one
    described in exercise<SPACE/><REF NAME="ex:adjoin-set"/>; however, items
    are compared by their weights, and the element being added to the set is
    never already in it.
    <SNIPPET>
      <INDEX><DECLARATION>adjoin_set</DECLARATION><SUBINDEX><ORDER>weighted</ORDER>for weighted sets</SUBINDEX></INDEX>
      <NAME>adjoin_set3</NAME>
      <REQUIRES>tree_property</REQUIRES>
      <EXAMPLE>adjoin_set3_example</EXAMPLE>
      <EXPECTED>[ 'leaf', [ 'B', [ 3, null ] ] ]</EXPECTED>
      <SCHEME>
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((&lt; (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))
      </SCHEME>
      <JAVASCRIPT>
function adjoin_set(x, set) {
    return is_null(set)
           ? list(x)
           : weight(x) &lt; weight(head(set))
           ? pair(x, set)
           : pair(head(set), adjoin_set(x, tail(set)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>adjoin_set3_example</NAME>
      <JAVASCRIPT>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

adjoin_set(my_leaf_1, adjoin_set(my_leaf_2, null));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const my_leaf_1 = make_leaf("A", 8);
const my_leaf_2 = make_leaf("B", 3);

head(adjoin_set(my_leaf_1, adjoin_set(my_leaf_2, null)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    takes a list of symbol-frequency pairs such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>((A 4) (B 2) (C 1) (D 1))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<SNIPPET EVAL="no">
	  <JAVASCRIPT>
	    list(list("A", 4), list("B", 2), list("C", 1), list("D", 1))
	  </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLITINLINE>
    and constructs an initial ordered set of leaves, ready to be merged
    according to the Huffman algorithm:
    <SNIPPET>
      <INDEX><DECLARATION>make_leaf_set</DECLARATION></INDEX> 
      <NAME>make_leaf_set</NAME>
      <REQUIRES>make_leaf</REQUIRES>
      <REQUIRES>adjoin_set3</REQUIRES>
      <EXAMPLE>make_leaf_set_example</EXAMPLE>
      <EXPECTED>[ 'leaf', [ 'leaf', [ 'A', null ] ] ]</EXPECTED>
      <SCHEME>
(define (make-leaf-set pairs)
  (if (null? pairs)
    '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf (car pair)    ; symbol
                             (cadr pair))  ; frequency
                  (make-leaf-set (cdr pairs))))))
      </SCHEME>
      <JAVASCRIPT>
function make_leaf_set(pairs) {
    if (is_null(pairs)) {
        return null;
    } else {
        const first_pair = head(pairs);
        return adjoin_set(
                   make_leaf(head(first_pair),        // symbol
                             head(tail(first_pair))), // frequency
                   make_leaf_set(tail(pairs)));
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_leaf_set_example</NAME>
      <JAVASCRIPT>
make_leaf_set( list( make_leaf("A", 4),
                     make_leaf("B", 2),
                     make_leaf("C", 1),
                     make_leaf("D", 1) ) );
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
head(make_leaf_set( list( make_leaf("A", 4),
                          make_leaf("B", 2),
                          make_leaf("C", 1),
                          make_leaf("D", 1) ) ) );
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>Define</SCHEME>
      <JAVASCRIPT>Declare</JAVASCRIPT>
    </SPLITINLINE>
    an encoding tree and a sample message:
    <SNIPPET>
      <NAME>sample_tree</NAME>
      <REQUIRES>make_leaf</REQUIRES>
      <REQUIRES>make_code_tree</REQUIRES>
      <SCHEME>
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                    (make-leaf 'B 2)
                    (make-code-tree (make-leaf 'D 1)
                                    (make-leaf 'C 1)))))

(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
      </SCHEME>
      <JAVASCRIPT>
const sample_tree =
    make_code_tree(
        make_leaf("A",4),
        make_code_tree(
            make_leaf("B",2),
            make_code_tree(
                make_leaf("D",1),
                make_leaf("C",1))));
const sample_message =						 
    list(0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0);
      </JAVASCRIPT>
    </SNIPPET>
    Use the <SCHEMEINLINE>decode</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to decode the message, and give the result.
    <LABEL NAME="ex:sample-tree"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>decode_solution</NAME>
        <REQUIRES>decode_function</REQUIRES>
	<REQUIRES>sample_tree</REQUIRES>
	<JAVASCRIPT>
decode(sample_message, sample_tree);
// should be: ["A", ["D", ["A", ["B", ["B", ["C", ["A", null]]]]]]]
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:encode-symbol"/>
    The <SCHEMEINLINE>encode</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments a message and a tree and produces the list of bits that
    gives the encoded message.
    <SNIPPET>
      <INDEX><DECLARATION>encode</DECLARATION><FRAGILE/></INDEX> 
      <NAME>encode</NAME>
      <REQUIRES>encode_symbol</REQUIRES>
      <SCHEME>
(define (encode message tree)
  (if (null? message)
    '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))
      </SCHEME>
      <JAVASCRIPT>
function encode(message, tree) {
    return is_null(message)
           ? null
           : append(encode_symbol(head(message), tree),
                    encode(tail(message), tree));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>encode_symbol</NAME>
      <JAVASCRIPT>
      // encode_symbol function to be written by students
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Encode-symbol</SCHEMEINLINE> is a procedure,
	which you must write, that returns the list of bits that encodes a given
	symbol according to a given tree.
      </SCHEME>
      <JAVASCRIPT>
	The function <JAVASCRIPTINLINE>encode_symbol</JAVASCRIPTINLINE>,
	which you must write, returns the list of bits that encodes a given symbol
	according to
	a given tree.
      </JAVASCRIPT>
    </SPLITINLINE>
    You should design
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>encode-symbol</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>encode_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    so that it signals an error if the symbol is not in the tree at all.
    Test your
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    by encoding the result you obtained in
    exercise<SPACE/><REF NAME="ex:sample-tree"/> with the sample tree and
    seeing whether it is the same as the original sample message.
    <SOLUTION>
      <SNIPPET>
	<NAME>encode_symbol_solution</NAME>
	<EXAMPLE>encode_symbol_example</EXAMPLE>
	<EXPECTED>true</EXPECTED>
	<JAVASCRIPT>
function encode_symbol(symbol, tree) {
    function contains_symbol(symbol, current_tree) {
        return ! is_null(member(symbol, symbols(current_tree)));
    }
    if (is_leaf(tree)) {
        return null;
    } else {
        const left_tree = left_branch(tree);
	const right_tree = right_branch(tree);
	return contains_symbol(symbol, left_tree)
               ? pair(0, encode_symbol(symbol, left_tree))
               : contains_symbol(symbol, right_tree)
               ? pair(1, encode_symbol(symbol, right_tree))
               : error("symbol not found -- encode_symbol");
    }
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>encode_symbol_example</NAME>
	<REQUIRES>decode_function</REQUIRES>
	<REQUIRES>encode</REQUIRES>
	<REQUIRES>sample_tree</REQUIRES>
	<JAVASCRIPT>
equal(encode(decode(sample_message, sample_tree),
             sample_tree),
      sample_message);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    takes as its argument a list of symbol-frequency pairs (where no symbol
    appears in more than one pair) and generates a Huffman encoding tree
    according to the Huffman algorithm.
    <SNIPPET>
      <INDEX><DECLARATION>generate_huffman_tree</DECLARATION><FRAGILE/></INDEX> 
      <NAME>generate_huffman_tree</NAME>
      <REQUIRES>make_leaf_set</REQUIRES>
      <REQUIRES>successive_merge</REQUIRES>
      <SCHEME>
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
      </SCHEME>
      <JAVASCRIPT>
function generate_huffman_tree(pairs) {
    return successive_merge(make_leaf_set(pairs));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>successive_merge</NAME>
      <JAVASCRIPT>
	// successive_merge function to be written by student
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        <SCHEMEINLINE>Make-leaf-set</SCHEMEINLINE> is the procedure
        given above that transforms the
        list of pairs into an ordered set of leaves.
	<SCHEMEINLINE>Successive-merge</SCHEMEINLINE>
        is the procedure
        you must write, using <SCHEMEINLINE>make-code-tree</SCHEMEINLINE> to
        successively merge the smallest-weight elements of the set until there
        is only one element left, which is the desired Huffman tree.
      </SCHEME>
      <JAVASCRIPT>
        The function <JAVASCRIPTINLINE>make_leaf_set</JAVASCRIPTINLINE> 
        that transforms the list of pairs into an ordered set of leaves is
	given above. Write the function
	<JAVASCRIPTINLINE>successive_merge</JAVASCRIPTINLINE> using
	<JAVASCRIPTINLINE>make_code_tree</JAVASCRIPTINLINE> to successively
	merge the smallest-weight elements of the set until there is only one
	element left, which is the desired Huffman tree.
      </JAVASCRIPT>
    </SPLIT>
    (This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is slightly tricky, but not really complicated.  If you find yourself
    designing a complex
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
    <JAVASCRIPT>function,</JAVASCRIPT></SPLITINLINE>
    then you are almost certainly doing something wrong.  You can take
    significant advantage of the fact that we are using an ordered set
    representation.)<LABEL NAME="ex:generate-huffman-tree"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>successive_merge_solution</NAME>
	<REQUIRES>make_code_tree</REQUIRES>
	<REQUIRES>adjoin_set3</REQUIRES>
	<REQUIRES>generate_huffman_tree</REQUIRES>
	<EXAMPLE>generate_huffman_tree_example</EXAMPLE>
	<EXPECTED>true</EXPECTED>
	<JAVASCRIPT>
function successive_merge(leaves) {
    return length(leaves) === 1
           ? head(leaves)
           : successive_merge(
                 adjoin_set(
                     make_code_tree(head(leaves),
                                    head(tail(leaves))),
                     tail(tail(leaves))));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>generate_huffman_tree_example</NAME>
	<JAVASCRIPT>
const sample_tree =
    make_code_tree(make_leaf("A", 4),
                   make_code_tree(
                       make_leaf("B", 2),
                       make_code_tree(
                           make_leaf("D", 1),
                           make_leaf("C", 1))));
const sample_frequencies = list(list("A", 4), 
                                list("B", 2), 
                                list("C", 1), 
                                list("D", 1));

equal(sample_tree, 
      generate_huffman_tree(sample_frequencies));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    The following eight-symbol alphabet with associated relative
    frequencies was designed to efficiently encode the lyrics of 1950s
    <INDEX>rock songs, 1950s</INDEX>
    rock songs.  (Note that the <QUOTE>symbols</QUOTE> of an
    <QUOTE>alphabet</QUOTE> need not be individual letters.)
    <SPLIT>
      <SCHEME>
	<FIGURE src="img_tex/ch2_3_4-4.png"></FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<TABLE>
	  <TR>
            <TD>
	      A
	    </TD>
            <TD>
	      2
	    </TD>
            <TD>
	      <SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/>
	      <SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/>
	      <SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/><SPACE/>
	    </TD>
            <TD>
	      NA
	    </TD>
            <TD>
	      16
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      BOOM
	    </TD>
            <TD>
	      1
	    </TD>
            <TD>
	      <SPACE/>
	    </TD>
            <TD>
	      SHA
	    </TD>
            <TD>
	      3
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      GET
	    </TD>
            <TD>
	      2
	    </TD>
            <TD>
	      <SPACE/>
	    </TD>
            <TD>
	      YIP
	    </TD>
            <TD>
	      9
	    </TD>
	  </TR>
	  <TR>
            <TD>
	      JOB
	    </TD>
            <TD>
	      2
	    </TD>
            <TD>
	      <SPACE/>
	    </TD>
            <TD>
	      WAH
	    </TD>
            <TD>
	      1
	    </TD>
	  </TR>
	</TABLE>
      </JAVASCRIPT>
    </SPLIT>
    Use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>generate-huffman-tree</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>generate_huffman_tree</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    (exercise<SPACE/><REF NAME="ex:generate-huffman-tree"/>) to generate a
    corresponding Huffman tree, and use <SCHEMEINLINE>encode</SCHEMEINLINE>
    (exercise<SPACE/><REF NAME="ex:encode-symbol"/>) to encode the following
    message:
    <BLOCKQUOTE>
      Get a job <BR/>
      Sha na na na na na na na na <BR/>
      Get a job <BR/>
      Sha na na na na na na na na <BR/>
      Wah yip yip yip yip yip yip yip yip yip <BR/>
      Sha boom
    </BLOCKQUOTE>
    How many bits are required for the encoding?  What is the smallest number
    of bits that would be needed to encode this song if we used a fixed-length
    code for the eight-symbol alphabet?
    <SOLUTION>
      <SNIPPET>
	<NAME>boom_yip</NAME>
	<REQUIRES>successive_merge_solution</REQUIRES>
	<REQUIRES>generate_huffman_tree</REQUIRES>
	<REQUIRES>encode_symbol_solution</REQUIRES>
	<REQUIRES>encode</REQUIRES>
	<EXPECTED>84</EXPECTED>
	<JAVASCRIPT>
const lyrics_frequencies = 	  
    list(list("A", 2),
         list("NA", 16),
         list("BOOM", 1),
         list("SHA", 3),
         list("GET", 2),
         list("YIP", 9),
         list("JOB", 2),
         list("WAH", 2));
const lyrics_tree = generate_huffman_tree(lyrics_frequencies);
const lyrics = list(
    'GET', 'A', 'JOB',
    'SHA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA',
    'GET', 'A', 'JOB', 'SHA', 'NA', 'NA', 'NA', 'NA', 'NA', 
    'NA', 'NA', 'NA', 'WAH', 'YIP', 'YIP', 'YIP', 'YIP',
    'YIP', 'YIP', 'YIP', 'YIP', 'YIP', 'SHA', 'BOOM'
   );
 
length(encode(lyrics, lyrics_tree));
// 84
	</JAVASCRIPT>
      </SNIPPET>
      We have an alphabet of <LATEXINLINE>$n = 8$</LATEXINLINE> symbols, and a
      message of <LATEXINLINE>$m = 36$</LATEXINLINE> symbols. Then the minimum
      number of bits to encode a specific symbol using a fixed-length code is
      <LATEXINLINE>$\lceil \log_2{n} \rceil = 3$</LATEXINLINE>. Thus the minimum
      number of bits to encode all the lyrics is 
      <LATEXINLINE>$m \lceil\log_2{n}\rceil = 36 \times 3 = 108$</LATEXINLINE>.
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Suppose we have a Huffman tree for an alphabet of
    <LATEXINLINE>$n$</LATEXINLINE> symbols, and that the relative frequencies
    of the symbols are 1, 2, 4, <ELLIPSIS/>,
    <LATEXINLINE>$2^{n-1}$</LATEXINLINE>.  Sketch the tree for
    <LATEXINLINE>$n$</LATEXINLINE>=5; for <LATEXINLINE>$n$</LATEXINLINE>=10.
    In such a tree (for general <LATEXINLINE>$n$</LATEXINLINE>) how may bits
    are required to encode the most frequent symbol?  the least frequent symbol?
    <LABEL NAME="ex:huffman-count"/>
    <SOLUTION>
      <TEXT>
	The tree will be unbalanced, similar to the tree given in
	figure<SPACE/><REF NAME="fig:unbalanced-tree"/>. Encoding the most
	frequent symbol requires one bit, whereas
	<LATEXINLINE>$n - 1$</LATEXINLINE> bits are required to encode the
	least frequent symbol.
      </TEXT>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Consider the encoding
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    that you designed in exercise<SPACE/><REF NAME="ex:encode-symbol"/>.  What
    is the
    <INDEX>Huffman code<SUBINDEX>order of growth of encoding</SUBINDEX></INDEX>
    order of growth in the number of steps needed to encode a symbol?
    Be sure to include the number of steps needed to search the symbol list at
    each node encountered.  To answer this question in general is difficult.
    Consider the special case where the relative frequencies of the
    <LATEXINLINE>$n$</LATEXINLINE> symbols are as described in
    exercise<SPACE/><REF NAME="ex:huffman-count"/>, and give the order of
    growth (as a function of <LATEXINLINE>$n$</LATEXINLINE>) of the number of
    steps needed to encode the most frequent and least frequent symbols in the
    alphabet.
    <SOLUTION>
      Consider the special case in
      exercise<SPACE/><REF NAME="ex:encode-symbol"/>. At each step down the path
      of length <LATEXINLINE>$n$</LATEXINLINE>, we need to do a linear search in
      a list of length <LATEXINLINE>$n, n-1, \ldots, 1$</LATEXINLINE>. In the
      worst case, there are
      <LATEXINLINE>$O(n \times n / 2) = O(n^2)$</LATEXINLINE> number of steps.
      <LATEXINLINE>$O(n^2)$</LATEXINLINE>.
    </SOLUTION>
  </EXERCISE>
  <INDEX>Huffman code<CLOSE/></INDEX>
</SUBSECTION>
