<SUBSECTION>
   <NAME>
    带标签数据
  </NAME> 

  <LABEL NAME="sec:manifest-types"></LABEL>
   <INDEX>复数<SUBINDEX>表示为带标签数据</SUBINDEX><OPEN></OPEN></INDEX> 
   <INDEX>带标签数据<OPEN></OPEN></INDEX> 
   <INDEX>数据<SUBINDEX>带标签</SUBINDEX><OPEN></OPEN></INDEX> 

  
  <TEXT>
    一种看待数据抽象的方法是将其视为
    <INDEX>最少承诺原则</INDEX>
    <INDEX>最少承诺原则</INDEX>
    <QUOTE>最少承诺原则。</QUOTE> 的一种应用。在第<SPACE></SPACE><REF NAME="sec:representations-complex-numbers"></REF>节中实现复数系统时，我们可以使用本杰明的直角坐标表示法或艾丽莎的极坐标表示法。由选择器和构造器构成的抽象屏障使我们能够将数据对象具体表示的选择推迟到最后时刻，从而在系统设计中保留最大的灵活性。
  </TEXT>

  
  <TEXT>
    最少承诺原则甚至可以被推向更极端的程度。如果我们愿意，即使在设计了选择器和构造器之后，我们仍然可以保持表示的不确定性，并选择同时使用本杰明的表示法和艾丽莎的表示法。然而，如果在一个系统中同时包含这两种表示方式，我们就需要某种方法来区分极坐标形式的数据与直角坐标形式的数据。否则，例如，如果要求我们求出序对
    <SCHEMEINLINE>magnitude</SCHEMEINLINE>
    <LATEXINLINE>$(3,4)$</LATEXINLINE>的值，我们将不知道该回答 5（将数字解释为直角坐标形式）还是 3（将数字解释为极坐标形式）。实现这种区分的一种直接方法是，在每个复数中包含一个
    <INDEX>类型标签</INDEX>
    <EM>类型标签</EM><EMDASH>—</EMDASH>作为其一部分。然后，当我们需要操作一个复数时，就可以利用该标签来决定应用哪个选择器。
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>直角坐标</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>&quot;直角坐标&quot;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    或
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>极坐标</SCHEMEINLINE><EMDASH>—</EMDASH>as</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>&quot;极坐标&quot;</JAVASCRIPTINLINE><EMDASH>—</EMDASH>as
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  
  <TEXT>
    为了操作带标签的数据，我们假设我们拥有
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>类型标签</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和<SCHEMEINLINE>contents</SCHEMEINLINE>，它从数据对象中提取标签和实际内容（对于复数而言，是极坐标或直角坐标）。我们还假设存在一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>附加标签</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>attach_tag</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，它接受一个标签和内容并生成一个带标签的数据对象。实现这一点的一个直接方法是使用普通的列表结构：
    <SNIPPET>
      <INDEX><DECLARATION>attach_tag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>type_tag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>contents</DECLARATION></INDEX> 
      <NAME>attach_tag</NAME>
      <EXAMPLE>attach_tag_example</EXAMPLE>
      <EXPECTED>&apos;frequency_list&apos;</EXPECTED>
      <SCHEME>
(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
    (car datum)
    (error &quot;Bad tagged datum -- TYPE-TAG&quot; datum)))

(define (contents datum)
  (if (pair? datum)
    (cdr datum)
    (error &quot;Bad tagged datum -- CONTENTS&quot; datum)))
      </SCHEME>
      <JAVASCRIPT>
function attach_tag(type_tag, contents) {
    return pair(type_tag, contents);
}
function type_tag(datum) {
    return is_pair(datum)
           ? head(datum)
           : error(datum, &quot;bad tagged datum -- type_tag&quot;);
}
function contents(datum) {
    return is_pair(datum)
           ? tail(datum)
           : error(datum, &quot;bad tagged datum -- contents&quot;);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>attach_tag_example</NAME>
      <JAVASCRIPT>
const f_1 = list(&quot;A&quot;, 4);
const my_frequency_1 = 
    attach_tag(&quot;frequency_list&quot;, f_1);

type_tag(my_frequency_1);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
        使用这些过程，
      </SCHEME>
      <JAVASCRIPT>
	使用
	<JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    我们可以定义谓词
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rectangular?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_rectangular</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>polar?</SCHEMEINLINE>，
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_polar</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    它们分别用于识别直角坐标数和极坐标数：
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>is_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>is_polar</DECLARATION></INDEX> 
      <NAME>rectangular_or_polar</NAME>
      <EXAMPLE>rectangular_or_polar_example</EXAMPLE>
      <REQUIRES>attach_tag</REQUIRES>
      <SCHEME>
(define (rectangular? z)
  (eq? (type-tag z) &apos;rectangular))

(define (polar? z)
  (eq? (type-tag z) &apos;polar))
      </SCHEME>
      <JAVASCRIPT>
function is_rectangular(z) {
    return type_tag(z) === &quot;rectangular&quot;;
}
function is_polar(z) {
    return type_tag(z) === &quot;polar&quot;;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    利用类型标签，Ben 和 Alyssa 现在可以修改他们的代码，使得他们两种不同的表示法能够共存在同一个系统中。每当 Ben 构造一个复数时，他就将其标记为 rectangular。每当 Alyssa 构造一个复数时，她就将其标记为 polar。此外，Ben 和 Alyssa 必须确保他们的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的名称不会发生冲突。一种实现方法是让 Ben 在名称后附加后缀
<SCHEMEINLINE>rectangular</SCHEMEINLINE>把后缀附加到他每个表示法的名称上
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    并让 Alyssa 附加<SCHEMEINLINE>polar</SCHEMEINLINE>到她的名称。下面是 Ben<APOS></APOS>s 修订后的矩形表示法，摘自章节<SPACE></SPACE><REF NAME="sec:representations-complex-numbers"></REF>:<SNIPPET>
      <INDEX><DECLARATION>real_part_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>imag_part_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>magnitude_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>angle_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_real_imag_rectangular</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang_rectangular</DECLARATION></INDEX> 
      <NAME>make_complex_number_rectangular</NAME>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_rectangular_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part-rectangular z) (car z))

(define (imag-part-rectangular z) (cdr z))

(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))

(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))

(define (make-from-real-imag-rectangular x y)
  (attach-tag &apos;rectangular (cons x y)))

(define (make-from-mag-ang-rectangular r a) 
  (attach-tag &apos;rectangular
              (cons (* r (cos a)) (* r (sin a)))))
      </SCHEME>
      <JAVASCRIPT>
function real_part_rectangular(z) { return head(z); }
<SHORT_SPACE></SHORT_SPACE>
function imag_part_rectangular(z) { return tail(z); }
<SHORT_SPACE></SHORT_SPACE>
function magnitude_rectangular(z) {
    return math_sqrt(square(real_part_rectangular(z)) +
                     square(imag_part_rectangular(z)));
}
function angle_rectangular(z) {
    return math_atan2(imag_part_rectangular(z),
                     real_part_rectangular(z));
}
function make_from_real_imag_rectangular(x, y) {
    return attach_tag(&quot;rectangular&quot;, pair(x, y));
}
function make_from_mag_ang_rectangular(r, a) {
    return attach_tag(&quot;rectangular&quot;,
                      pair(r * math_cos(a), r * math_sin(a)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_rectangular_example</NAME>
      <JAVASCRIPT>
const bens_co_num = make_from_mag_ang_rectangular(	  
                        3.0, 0.7);

imag_part_rectangular(contents(bens_co_num));
      </JAVASCRIPT>
    </SNIPPET>
    下面是 Alyssa 的修订后的极坐标表示法：
<SNIPPET>
      <INDEX><DECLARATION>real_part_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>imag_part_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>magnitude_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>angle_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_real_imag_polar</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang_polar</DECLARATION></INDEX> 
      <NAME>make_complex_number_polar</NAME>
      <REQUIRES>attach_tag</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_polar_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part-polar z)
  (* (magnitude-polar z) (cos (angle-polar z))))

(define (imag-part-polar z)
  (* (magnitude-polar z) (sin (angle-polar z))))

(define (magnitude-polar z) (car z))

(define (angle-polar z) (cdr z))

(define (make-from-real-imag-polar x y) 
  (attach-tag &apos;polar
              (cons (sqrt (+ (square x) (square y)))
              (atan y x))))

(define (make-from-mag-ang-polar r a)
  (attach-tag &apos;polar (cons r a)))
      </SCHEME>
      <JAVASCRIPT>
function real_part_polar(z) {
    return magnitude_polar(z) * math_cos(angle_polar(z));
}
function imag_part_polar(z) {
    return magnitude_polar(z) * math_sin(angle_polar(z));
}
function magnitude_polar(z) { return head(z); }
<SHORT_SPACE></SHORT_SPACE>
function angle_polar(z) { return tail(z); }
<SHORT_SPACE></SHORT_SPACE>
function make_from_real_imag_polar(x, y) {
    return attach_tag(&quot;polar&quot;,
                      pair(math_sqrt(square(x) + square(y)),
                           math_atan2(y, x)));
}
<ALLOW_BREAK></ALLOW_BREAK>
function make_from_mag_ang_polar(r, a) {
    return attach_tag(&quot;polar&quot;, pair(r, a));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_polar_example</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang_polar(
                           3.0, 0.7);

imag_part_polar(contents(alyssas_co_num));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  
  <TEXT>
    <INDEX>选择器<SUBINDEX>通用</SUBINDEX></INDEX>
    <INDEX>通用 <SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE><SUBINDEX>通用选择器</SUBINDEX></INDEX>
    每个通用选择器均实现为一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，它检查其参数的标签，并调用适用于该类型数据处理的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。例如，为了获得复数的实部，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    检查标签以确定是否使用 Ben 的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part-rectangular</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part_rectangular</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    或 Alyssa 的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part-polar</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_@part_@polar</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    在任一情况下，我们使用 <SCHEMEINLINE>contents</SCHEMEINLINE> 来提取裸数据（无标签的数据），并将其传送到直角坐标或极坐标
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    进行处理：
    <SNIPPET>
      <INDEX><DECLARATION>real_part</DECLARATION><SUBINDEX>带标签数据</SUBINDEX></INDEX>
      <INDEX><DECLARATION>imag_part</DECLARATION><SUBINDEX>带标签数据</SUBINDEX></INDEX>
      <INDEX><DECLARATION>magnitude</DECLARATION><SUBINDEX>带标签数据</SUBINDEX></INDEX>
      <INDEX><DECLARATION>angle</DECLARATION><SUBINDEX>带标签数据</SUBINDEX></INDEX>
      <NAME>make_complex_number</NAME>
      <REQUIRES>rectangular_or_polar</REQUIRES>
      <REQUIRES>make_complex_number_rectangular</REQUIRES>
      <REQUIRES>make_complex_number_polar</REQUIRES>
      <EXAMPLE>make_complex_number_example_2</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (real-part z)
  (cond ((rectangular? z) 
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else (error &quot;未知类型 -- REAL-PART&quot; z))))

(define (imag-part z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else (error &quot;未知类型 -- IMAG-PART&quot; z))))

(define (magnitude z)
  (cond ((rectangular? z)
         (magnitude-rectangular (contents z)))
        ((polar? z)
         (magnitude-polar (contents z)))
        (else (error &quot;未知类型 -- MAGNITUDE&quot; z))))

(define (angle z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else (error &quot;未知类型 -- ANGLE&quot; z))))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) {
    return is_rectangular(z)
           ? real_part_rectangular(contents(z))
           : is_polar(z)
           ? real_part_polar(contents(z))
           : error(z, &quot;未知类型 -- real_part&quot;);
}
function imag_part(z) {
    return is_rectangular(z)
           ? imag_part_rectangular(contents(z))
           : is_polar(z)
           ? imag_part_polar(contents(z))
           : error(z, &quot;未知类型 -- imag_part&quot;);
}
function magnitude(z) {
    return is_rectangular(z)
           ? magnitude_rectangular(contents(z))
           : is_polar(z)
           ? magnitude_polar(contents(z))
           : error(z, &quot;未知类型 -- magnitude&quot;);
}
function angle(z) {
    return is_rectangular(z)
           ? angle_rectangular(contents(z))
           : is_polar(z)
           ? angle_polar(contents(z))
           : error(z, &quot;未知类型 -- angle&quot;);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_example_2</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang_polar(	  
                           3.0, 0.7);

imag_part(alyssas_co_num);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

   
  <TEXT>
    为了实现复数的算术运算，我们可以使用相同的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    来自 <REF NAME="sec:representations-complex-numbers"></REF> 节，
    因为它们所调用的选择器是通用的，所以可以适用于任一表示方式。例如，
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    仍然是
    <SNIPPET EVAL="no">
      <SCHEME>
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
      </SCHEME>
      <JAVASCRIPT>
function add_complex(z1, z2) {
   return make_from_real_imag(real_part(z1) + real_part(z2),
                              imag_part(z1) + imag_part(z2));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    最后，我们必须选择使用 Ben 的表示法还是 Alyssa 的表示法来构造复数。一个合理的选择是：在有实部和虚部时构造矩形复数，而在有模长和角度时构造极坐标复数：
    <SNIPPET>
      <INDEX><DECLARATION>make_from_real_imag</DECLARATION></INDEX> 
      <INDEX><DECLARATION>make_from_mag_ang</DECLARATION></INDEX> 
      <NAME>make_complex_number_generic</NAME>
      <REQUIRES>make_complex_number</REQUIRES>
      <REQUIRES>make_complex_number_rectangular</REQUIRES>
      <REQUIRES>make_complex_number_polar</REQUIRES>
      <EXAMPLE>make_complex_number_generic_example</EXAMPLE>
      <EXPECTED>1.932653061713073</EXPECTED>
      <SCHEME>
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))

(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))
      </SCHEME>
      <JAVASCRIPT>
function make_from_real_imag(x, y) {
    return make_from_real_imag_rectangular(x, y);
}
function make_from_mag_ang(r, a) {
    return make_from_mag_ang_polar(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_generic_example</NAME>
      <JAVASCRIPT>
const alyssas_co_num = make_from_mag_ang(	  
                           3.0, 0.7);

imag_part(alyssas_co_num);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch2-Z-G-62.svg"></FIGURE>
          <CAPTION>通用复数算术系统的结构。</CAPTION>
          <LABEL NAME="fig:generic-complex-system_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SPLIT_SCALE="1" WEB_SCALE="0.6" SCALE="0.65" SRC="img_javascript/ch2-Z-G-62.svg"></FIGURE>
          <CAPTION>
	    结构
	    <INDEX>复数算术<SUBINDEX>系统的结构</SUBINDEX></INDEX>
	    的通用复数算术系统。
	  </CAPTION>
          <LABEL NAME="fig:generic-complex-system"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    <PDF_ONLY>$\!$</PDF_ONLY>最终得到的复数系统具有如下所示的结构，
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE></SPACE><REF NAME="fig:generic-complex-system_scheme"></REF>。
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE></SPACE><REF NAME="fig:generic-complex-system"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE>
    该系统被分解成三个相对独立的部分：复数算术运算、Alyssa的极坐标实现，以及Ben的矩形实现。极坐标和矩形实现可以由Ben和Alyssa各自独立编写，并且这两种实现都可以作为底层表示，由第三个程序员利用抽象构造器/选择器接口来实现复数算术
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。
  </TEXT>

  
  <TEXT>
    由于每个数据对象都带有其类型标签，因此选择器以
    <INDEX>selector<SUBINDEX>通用的</SUBINDEX></INDEX>
    <INDEX>通用<SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE><SUBINDEX>通用选择器</SUBINDEX></INDEX>
    方式操作数据。也就是说，每个选择器的定义都有一种行为，这种行为取决于它所应用数据的特定类型。注意连接各个独立表示之间的一般接口机制：
    在某个具体的表示实现中（例如，Alyssa<APOS></APOS>的极坐标包），复数是一个无类型的对（模长，角度）。当一个通用选择器对一组<SCHMEINLINE>极坐标</SCHMEINLINE>类型进行操作时，它会剥离标签并将内容传递给Alyssa<APOS></APOS>的代码。反过来，当Alyssa构造一个供通用使用的数字时，她会为其加上类型标签，以便它能被上层
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    正确识别。正如我们将在章节<SPACE></SPACE><REF NAME="sec:generic-operators"></REF>中看到的那样，在数据对象自上而下传递过程中剥离和附加标签的这种做法可以成为一种重要的组织策略。
    <INDEX>复数<SUBINDEX>以带标签的数据表示</SUBINDEX><CLOSE></CLOSE></INDEX>
    <INDEX>带标签的数据<CLOSE></CLOSE></INDEX>
    <INDEX>数据<SUBINDEX>带标签的</SUBINDEX><CLOSE></CLOSE></INDEX>
  </TEXT>

</SUBSECTION>
