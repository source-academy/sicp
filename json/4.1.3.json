[{"id":"/sicpjs/4.1.3","tag":"TITLE","body":"4.1.3  \n    Evaluator Data Structures"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In addition to defining the \n    representation of components,\n    the evaluator implementation must also define the data structures that the\n    evaluator manipulates internally, as part of the execution of a\n    program, such as the representation of\n    functions\n    and environments and the representation of true and false.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Testing of predicates","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n\tIn order to limit the predicate expressions of conditionals to proper\n\tpredicates (expressions that evaluate to a boolean value) as we do throughout\n\tthis book, we insist here that the function \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_truthy"},{"body":" gets applied only to\n\tboolean values, and we accept only the boolean value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"true"},{"body":" to be truthy.\n      The opposite of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_truthy"},{"body":" is called\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_falsy"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.1.3#footnote-1"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0KAnIigCwE8AKAB4BKUAG9coSaDYBTCkTb0mzAEY0aAGxkBDEoJESpRqQH5QAw8aMAuUDLZsabQQBpQAIjWad9GQIAOMpQyACZusmQyVABuoe5CANy4AL6EpJS0SiwE2hqM-MJi0nIK9ACEDCzsnLz6CaCpuMrV3Pw5eTKJoCCgjFw0RBohxfKKoO2MMqAqQdpEk6B0Gjyg1VNMqxytQA","body":"function is_truthy(x) {\n    return is_boolean(x) \n           ? x\n           : error(x, \"boolean expected, received\");\n}\nfunction is_falsy(x) { return ! is_truthy(x); } "}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Representing\n    functions","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    To handle primitives, we assume that we have available the following\n    functions:","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"apply_primitive_function("},{"tag":"META","body":"fun"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"args"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n\n\tapplies the given primitive\n\tfunction\n\tto the argument values in the list ","tag":"#text"},{"tag":"META","body":"args"},{"body":" and returns the result of\n\tthe application.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"is_primitive_function("},{"tag":"META","body":"fun"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n\n\ttests whether\n\t","tag":"#text"},{"tag":"META","body":"fun"},{"body":"\n        is a primitive\n        function.","tag":"#text"}]}]},{"body":"\n\n    These mechanisms for handling primitives are further described in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Compound\n    functions\n    are constructed from parameters,\n    function\n    bodies, and environments using the constructor \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_function"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":11,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajpQOTIBGkYqEg5mOQA3OzoJFxF87R1jU3N6dioBUpI8zUjQOMJSSlp6AjtGCmYCIzZihqbdSrMLL24fUebW-HESPrD1bmkKAE9cxsKSYvlQINASIgEBaPbErtAJNgBrdQTOuhEbIeKKbiNGJQAjGi8TZKMq6fSGEyTehCPoiABE4n8pH4zySJDhSnew1M31+oABQJBjWasSuL0sLERMmRAw6aJEBHK4IMkOqDBY7C4fEEwgZSgRjhoNNRXThJLiIuSkpI1jYHxxPwZ5QmbJh-RMBD5oAw8za0tA0uYBM2SvGrKmauYGq1ACZdfE6TdDfk9gdRIyzVULcIrdxNQQlNh7bglisJNt9cdmbcHk9Ha9o4ZQGr4QAPDGgOGbMUKROGFNw80yvpsL5ujPvRjcNOgADUoE2kTFmlzSaTqjWG22LqMRRcJN4TCkAjYJqsVKFJBR8ZIInDtOudE0A6HI5Nhqxn1xc4jM+X0UHjGHo4ZM6NgJN8+l+9wh+P67PPb78h3C-J+6AA","body":"function make_function(parameters, body, env) {\n    return list(\"compound_function\", parameters, body, env);\n}\nfunction is_compound_function(f) {\n    return is_tagged_list(f, \"compound_function\");\n}\nfunction function_parameters(f) { return list_ref(f, 1); }\n\nfunction function_body(f) { return list_ref(f, 2); }\n\nfunction function_environment(f) { return list_ref(f, 3); } "}]},{"tag":"SUBHEADING","id":"#h3","child":[{"body":"Representing return values","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tWe saw in section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" that the\n\tevaluation of a sequence terminates when a return statement\n\tis encountered, and that the evaluation of a function application needs\n\tto return the value ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":" if\n\tthe evaluation of the function body does not encounter a\n\treturn statement. In order to recognize that a value resulted from a\n\t\n\treturn statement, we introduce ","tag":"#text"},{"tag":"EM","child":[{"body":"return values","tag":"#text"}]},{"body":" as evaluator data\n\tstructures.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":11,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajpQOTIBGkYqEg5mOQA3OzoJFxF87R1jU3N6dioBUpI8zUjQOMJSSlp6AjtGCmYCIzZihqbdSrMLL24fUebW-HESPrD1bmkKAE9cxsKSYvlQINASIgEBaPbErtAJNgBrdRNJkmY8tgEibgd5F3L9QzPaqgIR9EQAIiBFjeHy+4KUSwof2icQSnWSVihr3en2+OK+-0ME2BVnYXD4gmEInx3CUkKq0Jp4OasSu6PoWJhuOYiJKNMJgIZ9G8vlq9X5LLaSxWEm2nJpR1uDyeQq5XxEKAATCzeEwpAI2JsRJjVTSRLLmPLYdxNDq9QajVbubz5Oa5abrbbIkA","body":"function make_return_value(content) {\n    return list(\"return_value\", content);\n}\nfunction is_return_value(value) {\n    return is_tagged_list(value, \"return_value\");\n}\nfunction return_value_content(value) {\n    return head(tail(value));\n} "}]},{"tag":"SUBHEADING","id":"#h4","child":[{"body":"Operations on Environments","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The evaluator needs operations for\n    \n    manipulating environments.  As explained\n    in section ","tag":"#text"},{"tag":"REF","body":"3.2","href":"/sicpjs/3.2"},{"body":", an environment is a\n    sequence of frames, where each frame is a table of bindings that associate\n    symbols\n    with their corresponding values.  We use the following operations for\n    manipulating environments:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"lookup_symbol_value("},{"tag":"META","body":"symbol"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"env"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n\n\t  returns the value that is bound to\n\t  ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":" in the environment\n\t  ","tag":"#text"},{"tag":"META","body":"env"},{"body":", or signals an error if\n\t  ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":" is unbound.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"extend_environment("},{"tag":"META","body":"symbols"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"values"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"base-env"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n\n\t    returns a new environment, consisting of a new frame in which the\n\t    symbols in the list ","tag":"#text"},{"tag":"META","body":"symbols"},{"body":"\n\t    are bound to the corresponding elements in the list\n\t    ","tag":"#text"},{"tag":"META","body":"values"},{"body":", where the enclosing\n\t    environment is the environment\n\t    ","tag":"#text"},{"tag":"META","body":"base-env"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value("},{"tag":"META","body":"symbol"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"value"},{"tag":"JAVASCRIPTINLINE","body":","},{"tag":"META","body":"env"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n\n\t    finds the innermost frame of\n\t    ","tag":"#text"},{"tag":"META","body":"env"},{"body":"\n\t    in which ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":"\n\t    is bound, and changes that frame\n\t    so that\n\t    ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":"\n\t    is now bound to \n\t    ","tag":"#text"},{"tag":"META","body":"value"},{"body":", or signals an\n\t    error if ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":" is\n\t    unbound.\n\t  ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    To implement these operations we\n    \n    represent an environment as a list of\n    frames.  The enclosing environment of an environment is the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the list.  The empty environment is simply the empty list.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0AU3IBsaBnKkgcwH0mA3KgCc6AWyYUAFAICUoAN6ghDCkSH0KAQyrNpJfjIDcoAL75i5anVAFhbCjwJDN4vQYVKVa+gAsGmgBM3I1N8Mjp7UAo-PlEABwoATz59YTEJUABeUBIiZmZDfGiGWITkgTSScRIKQyA","body":"function enclosing_environment(env) { return tail(env); }\n\nfunction first_frame(env) { return head(env); }\n\nconst the_empty_environment = null; "},{"body":"\n    Each frame of an environment is represented as a pair of lists: a list\n    of the\n    names\n    bound in that frame and a list of the associated\n    values.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.1.3#footnote-2"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0CAnJhtgBQBnAJ4MARjQA2QgDSgAbkylE2QgJSgA3qG5sKRbvQAOTKt2FjJM+UpVr1AblABffMXLU6oHn06iJaSEBX35NHT0DI1AACzYmABMQ3jDnN0JSSlp6UM47VWDc8N19Q3oKMylkvydXfDI6IQpGES4UtlAAXkZWTlyBKSomgQAiAA8R+RGREfV5QeGMeQAmdSdCdo4A62CGVqLHIA","body":"function make_frame(symbols, values) { return pair(symbols, values); }\n\nfunction frame_symbols(frame) { return head(frame); }\n\nfunction frame_values(frame) { return tail(frame); } "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    To extend an environment by a new frame that associates\n    symbols\n    with values, we make a frame consisting of the list of\n    symbols\n    and the list of values, and we adjoin this to the environment.  We signal\n    an error if the number of\n    symbols\n    does not match the number of values.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":13,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0AU3IBsaBnKkgcwH0mA3KgCc6AWyYUAFAICUoAN6ghDCkSH0KAQyrNpJfjIDcoAL75i5anVAFhbCjwJDN4vQYVKVa+gAsGmgBM3I1N8Mjp7UAo-PlEABwoATz59YTEJUABeUBIiZmZDc1JKWnpRTQBrBkdnVzZE0QAjGmY2ABpQfk1mIgY2OUVlVXVQOO0hSXqmlvbO7t7+4zNCYqt6JxdqqebWyQ3xAc9h338g-YYQ5YsS63OeLp6+vdqLjyHvKO1dc8uiy1LGAAPChMAIpQQiEjiEhSbYzDoPWaNTRsaqyBS4UBYo4fZhMLjRSYNHb9LKZbJ47iExEyTHY+nYgD8o3GknKVRqmyJ01aCO6-Q6yNR4NpDLFAC5QJSCT5uSS5AAeKX46n80Vi+nMhhCEQTABEFBoNFA5RIiVAmiEXCI0IobFAbCIcTizCoDACkr1oAA1KA6RqA1j7EJOFwqAREnKZnJfXqOl7ff7Axrg6Hw5GaerA5LtbrJAajTYGAB3C1Wm0Se2O52u92en1+5OB1PcdNR1ox0BxrsNpNN+ktsMRySZwrLBjA0HgtJQiSSV32fOA7t6xIrgBeepkbT7-axC6kGA6ACYOtht7u99E0fEktPIbajEA","body":"function extend_environment(symbols, vals, base_env) {\n    return length(symbols) === length(vals)\n           ? pair(make_frame(symbols, vals), base_env)\n           : error(pair(symbols, vals), \n                   length(symbols) < length(vals)\n                   ? \"too many arguments supplied\"\n                   : \"too few arguments supplied\");\n} "},{"body":"\n\tThis is used by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" in\n\tsection ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" to bind the\n\tparameters of a function to its arguments. \n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    To look up a\n    symbol\n    in an environment, we scan the list of\n    symbols\n    in the first frame.  If we find the desired\n    symbol,\n    we return the corresponding element in the list of values. If we do not\n    find the\n    symbol\n    in the current frame, we search the enclosing environment, and so on.\n    If we reach the empty environment, we signal an\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"unbound name\""},{"body":"  \n    error.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":25,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0AU3IBsaBnKkgcwH0mA3KgCc6AWyYUAFAICUoAN6ghDCkSH0KAQyrNpJfjIDcoAL75i5anVAFhbCjwJDN4vQYVKVa+gAsGmgBM3I1N8Mjp7UAo-PlEABwoATz59YTEJUABeUBIiZmZDc1JKWnoGAA8KJgCUwREScRIpNkTRACMaZjYAGlB+TS7ets02Blq5eVxQac9VdVBmJi5oyRb2zrY5TO2FpZX+rpkpmZOZgH5QOO0hSVFNAGsxpxcGVdaOwb6BzaGRsdljqcTgAuXbcFZrD6bUAAHjByx8kgOm0BQOmFwYQhENwARBQaDRQHcSIlQJohFwiI0KGxQGwiHE4swqAwAqCcaAANSgVFovn2IScLhUAiJN7rQ5c0A43oc7m8vlAgVCkVi5EyI6K6agzHYyR4gk2BgAdzJFKpElp9MZzNZ7KlCq1M2V3FV4qhcm5MulDqd-IogtdoqR3w1hTMhGKVnod0ejmcrkhG16ByIDGhimUc3oV2E7uTX2Yac2xgjFhK1me4h4Sa6kirDAms28oD8gXrCcbpaKllKNk7PFT6Y7LybWZbWh0I-EITLUb7rBo9wZNfenUHAzT+eYvVkClR5ejjH0PEXcWC+75h77bDImhI256hYzjtO4-mVDYPFy+Ufmr9QIYieZ56GQrAcNwtRpA0EjBP+AEgnSa7MFkOxtkEtYoghpwXOhIaHK+Tqgre96SJOuiYTIvTkfhmxGK+Zh8iKoBuKh2TRP88RJFB9TUhMhEzLqNA3LWsqkB0pABDkLw4vRfImIwXQMJeTrhCQkQNlkNh2A4DbBIUfrvvQJEPg2q4Smw06Nr0ZlDpZDZhgxqKMTMRnHvwp4EuesjhmEEQUESyQCNB1JZKiFRVCQNTBbxsHMvY+rlN6OKJMlABesndAJAHxVIGC9AATL02BUdlfocbECRBaksVNPRuCLsucTmR8G5Fq8OJJb0ojVXU6R1YYQA","body":"function lookup_symbol_value(symbol, env) {\n    function env_loop(env) {\n        function scan(symbols, vals) {\n            return is_null(symbols)\n                   ? env_loop(enclosing_environment(env))\n                   : symbol === head(symbols)\n                   ? head(vals)\n                   : scan(tail(symbols), tail(vals));\n        }\n        if (env === the_empty_environment) {\n            error(symbol, \"unbound name\");\n        } else {\n            const frame = first_frame(env);\n            return scan(frame_symbols(frame), frame_values(frame));\n        }\n    }\n    return env_loop(env);\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"To assign \n      a new value to a symbol in a specified environment, we scan\n      for the symbol, just as in \n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lookup_symbol_value"},{"body":",\n      and change the corresponding value when we find it.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":442,"program":"chap=4&prgrm=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-KAAAZLS0A5MxBSH8WzaKUUYpEufNi-Zn1ZjhHpAQ0CITJwOCxTivFWC6EkQFZ4GQz1V6ePcIKm5bKTCBGBaKxlzL-FVhoEK35zTPpFIdLKrww0yWhS1VKmVyq5VJI2WUo1rTZgDGvs8EV-VxW4p8lK3CJE3UKtVochwJr+jegCfgy1YMbWBuSYEmQzqQ2bwTeot1NKCkgqZSypQeqDU3yTZQhCWFUJqs1V6lwJKfX4p+NKlZSQg0HKLfWj8jzhWZq1dm3VVLvxdtzT2n8uk0mfRbTnD5VTxm1PbeWwyfa839v1YOwtGTUFiIgT8m+nrDLeslQS-1adhG-DeZxUAAAfU9TYd2+r3eeUi0gzJSFbA6Y9xhz2Xsrdi6tfrb3RPii+3lrS3lXOaBmmdtFU2-XTXOgdhDh2AbXcBUZE6vmnI9R2-q0HF3ztgwB5NYaD0fjeUoN1ehhqfJqWQaNIKbUEaPQh4kDqSOOpmshijy7MUuAjAaI0rHvmge2Vqq9Nauk-plW6HjkIUMMEbZ48TlLyo+lxIsxB8ot2hvmJG65kHvR6Ew-mpBcHk1cajJw2M06BMYZ1Qu782HQK6Vw0WsNxmJPVL42Vb0lU9BSLU19WtYnIwucnWQB17mKqYiBlIhzK6XB-vo6h1TJgACQGqLPbo-RK69tb-WxYPuumTrSctAVwemstqWHBqOsEQOhGBDNFsK+I1coXFMqc2D5ira06Gotqxk+r66OFcNK4Taj30SkddwtgbrG9CvPjoOKaOhGvz8aG1q-DsjD37yK48FxV0Q0bYa+GwYdTttObk7xrbX9euIaa5VJW23AiXdwYlJdUWOOjdFfA4WvzDYUqrburLomslVjLtofLybKmSYo0tq1lmc22cNS90Qsxeb0xxpu9DaXuUZeE9K5HaoWhnek6+i9gohPfsmaRXH-MPsg8m6ISnMtTKbRoCzd1CWigxpG5V6rtOHD04ZnNq2ImvvDw577LnuEuseNaXzyIctMQK1Z61kXw2xdjZ-RNhHYqL7j21rrMlP3P1-c3IHUisCSyg6LWbh02SEFzz16YSw7Os1WfnYHeziqCvF2p8b+e33nc5rjjz0KWcZ5AkD37rVrv55S+Tabc2Jkrd26DhHit-Rf5J-0fxPlnHELT2Bz7u2+uQWuvT1Hwv7HEcuDYVD6HGPfuZaF2c6JbCLcZLYf1szwuwPathzBuzMfHN2gdNXm3Svu82pb8koHOTkia91HSLEjJ8SEnQWq5Ljuyu6nkSwEyC+GS4mX6yKdX230k6ryvnfPQMSL4P8yFfMFQID+ixo7Il+9-Ylv40e-8Wlfr4sN30nG9cnaJbfXfa-ffJkL-I-YLIPWYFkEEMA+kD-SA+Ah-YXP-Z5ZbVPevbHf1eAt-cA5Aw-YCVvDed-RkNtLvTfdrKrXCGrJ-KbL3PfSUGvUXX4cXH9SXD3ZNFMXmK-ekFgwbclFXdgtXYAjXVeJtDJMNESZndBNqCHb5CSMEJ+JIcjb5YJdHcrAlEiWQlmVYJJO7BQ1zVYZQ0EVQj8AnJgCvBwcgz-VAtkWbPQ1fczSwJhOwvOOw4DfTeUauClUA-gm-FA7-Y-G+dCGQzkOQ50MNdNOwlKaZQIKVbuH6cAwQuzIhcGIfDkRYKIx4GIiNOIgFVxJIpg1I1lEWO7L+XgqWQI4Rcow1GwhCSI-Q0ItDJ3QTdLL9IApvXQ5okgoPYwoLKHMGPTQdBg4SMEdQo+YY-3btLDPvBo-ZKFNWGFOFLgRFXgFFHADFSvZ8UmCmA4K4KjDojhZoZlNYI4zA7YUIK4f8I6IiK4UiJoM44RcQG4I8RQD+UKEsGgDSCUUg3YogPRQ4mSWvBwAAQl1BJjJkpiUCOK4lAGDUH2KS0iUGu3Cy81M3OXHx0K8iyi0hCy9DC0zkxJjATizxdU8h8G8l8hDVvGOOwMNwb1vAp2pPxLVgBIcFKiJOa3pIdzYNGyqyID0HoMRJ2K5LVg7z5PVQFK52FNAElzFKkKm0lIsU6lnCIFBNlI63lI1yVONSyNKRiG8G0DH2oJ0KNPaAdVfDmlgJcEtOUAtR80ANrU2WiQdM5LBNGRtNnCdK0J7zmO-AtUaOLDbAeDIHBDVM6UOB6RlJBXnVmX1M9ybkdAUxjKMH5NmPTO4iVKYS5TNjUAtijI3DzhITIXFMyJRLTOU1IzKU0LBNAE9GpRrOY0BBzKRJ6wU28KqgUy1KzNhW9HbIrIHNyFbh7MHMzMjwHRHLbgRI7I3gynfmygkA6mjJbOiAi0QgdHyXHy0FBApk01SXZVUT3IPI3NvlCCbKIjDRnMPMDFrMDF-AaC3OXIyJkFPPJjvOCQAB4wgPylBzz0J7ilASJsQ6BMiyBahbJzCEFN4qgcjNoMgSJQAABqK4uqH4MyCM+SA4ZTYwNCh1ZCtCyoiwTCwkUEHCgCvRZBfCFgQiECsC4gMQKiaCiwvWOCyIxC6JVC9C4qMi7CogXChNYJAi0iHikizeEmciyi88xotsCoKobwm5RZbE+7VpcYVwMoSGHcqYT6IRNYdc6ilOR2YvLIdPPCiSykAwTS9EGM48OgcMyMnKSxWcDmCSjIRZY8gMr82+KYUIPtQCr+Dy7eazHyvQedWSpeV6K0L2cYLy-M+PZc1cjcS1F5Oi46FSkAsgJobyUAQNaRYoD2ZOBhIKWRVgb0POZI1MiNIFMMMGfS28Ls5TRqwcvQGcsclq3Id3KYfiRybvDS+S7SxeSQ5YkNVYjgdYngZFfgFACs5SMyNSWgDSWkyhE6SjZ0zoo3Na0iFSRa34sQRtZU0QXaiyZwVSRYGfeQ5KScmHQMta+zXMsqk6payyMavOKVAUG1LtB1SwLtVKeIoIG1PNH6iwPNf6gFG1K8kGxsqlFgcGz6nQrBaGrBeG4oG1EvUhB1DGmQT4AGxInQqURgRYKQWoB1Qm4mqC7YPGywG1e4kG+4sMamiwG1W0CmOYBoRgJJVm8mdm5gKYJm3zTcEiFC6GywOEvQWoYwKKOGRiNCymgWm1JiUWiwcW0ASWqJRiVieWiGnQpiUAkGxiQIaWywViQ2hWnQxJPQVIVW9W42xiGJNWiwc2vzYAZWxSR4tWqWmW0AMAbWhGvzAAUjdptq9tAEYgDsdtAGdqFo5SilFpDo1q8slp1r83BI5Xjo9ttu9rTpimTv9qFu-ODsztDsYl-IsDzrRp0O-LjqtsCATrttAGrvLujpAphiLolpLtADhmbpTqFphhrutuLsTv7p7vzpAvBLdrDqCGNosEhIsCOIFB6iYWev2pWtwWU2ikmCAS7T0BXuWuhSXqeoWtOvijoAaAACsPiVEt6NMhAolIbj6XqHVRjuoii97XrKF9FcBl7H7V7aMVFBaXQdCwVXYHUQHNoBaEibVIAyAXZ3BSaraYG4HbpIHpkWaFAebYBIAQbubnAsHUGGl0G2aABRaG3B4hgh4onQgAOSkGobdtoeod8oAUPrfEbN-uWto27M3sCCAQoCiT7QoF-Hfrm3fCDh4h-vMhetEfW2Gmvt4Y034eNtGKEeEY4YdH-p6iOocGMlMikdXtRJskkiwQZMMl0cJBf0PBYFEnIucHPqkGkC3jMkLNuTShEfOvfI3CusozMJMbnxTFsGqGLNnFMfViuDMSSpcoKjfhYJEfihrIkpahEa4bwqKLsRif8TiclLPsvuoGcQSMFGSbWw-Dkcoa-gSsLJMmCb8H2TzKZWcFBDbGfPx2cvVO0EET6iCdaejK0ZHSwiUobkyuiFUtanUussGuzOMosD0pCsMsfKmdDlMrT1IR8ssoTBsqGvsscsibac3DcqCpTXwS8r7Qsq-lCACecACpsWY2YZ1Aatd2Et-AiuooKtSCchivcjitjtAAqaLO6ZSoWcCGAsyrImyt3klDyoqpYiMhLQbVeaCCKqHiKiYRnMqq91vNqs7hBQavauapnN-Harkc6rbnhb6rJawMMgGq0uzNqbKvYBMjYTzjKhTBAvVXfMikYhigwARM5YVLnIVULnpYSj4XKHCvqcabPsiGqdnyAA","body":"function assign_symbol_value(symbol, val, env) {\n    function env_loop(env) {\n        function scan(symbols, vals) {\n            return is_null(symbols)\n                   ? env_loop(enclosing_environment(env))\n                   : symbol === head(symbols)\n                   ? set_head(vals, val)\n                   : scan(tail(symbols), tail(vals));\n        } \n        if (env === the_empty_environment) {\n            error(symbol, \"unbound name -- assignment\");\n        } else {\n            const frame = first_frame(env);\n            return scan(frame_symbols(frame), frame_values(frame));\n        }\n    }\n    return env_loop(env);\n} "}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    The method described here is only one of many plausible ways to represent\n    environments.  Since we used\n    \n    data abstraction to isolate the rest of the\n    evaluator from the detailed choice of representation, we could change the\n    environment representation if we wanted to.  (See\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.9","href":"/sicpjs/4.1.3#ex-4.9"},{"body":".)  In a\n    production-quality\n    JavaScript\n    system, the speed of the evaluator's environment\n    operations—especially that of\n    symbol\n    lookup—has a major\n    impact on the performance of the system.  The representation described here,\n    although conceptually simple, is not efficient and would not ordinarily be\n    used in a production system.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.1.3#footnote-3"}]},{"tag":"EXERCISE","title":"Exercise 4.9","id":"#ex-4.9","child":[{"body":"\n    Instead of representing a frame as a pair of lists, we can represent a frame\n    as a list of bindings, where each binding is a symbol-value pair. Rewrite the\n    environment operations to use this alternative representation.            \n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.10","id":"#ex-4.10","child":[{"body":"\n    The\n    functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lookup_symbol_value"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":"\n    can be expressed in terms of \n    a more abstract function\n    for traversing the environment structure. \n    \n\tDefine an abstraction that captures the common pattern and redefine the\n\ttwo functions in terms of this abstraction.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.11","id":"#ex-4.11","child":[{"body":"\n\tOur language distinguishes constants from variables by using \n\tdifferent keywords—","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const"},{"body":"\n\tand ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":"—and prevents\n\tassignment to constants. However, our interpreter\n\tdoes not make use of this distinction; the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":" will happily\n\tassign a new value to a given symbol, regardless whether it is declared\n\tas a constant or a variable.\n\t\n\tCorrect this flaw by calling the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"error"},{"body":" whenever an attempt is\n\tmade to use a constant on the left-hand side of an assignment.\n\tYou may proceed as follows:\n\t","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\t    Introduce predicates\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_constant_declaration"},{"body":"\n\t    and\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_variable_declaration"},{"body":"\n\t    that allow you to distinguish the two kinds. As shown in\n\t    section ","tag":"#text"},{"tag":"REF","body":"4.1.2","href":"/sicpjs/4.1.2"},{"body":",\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" \n\t    distinguishes them by using the tags\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"constant_declaration\""},{"body":"\n\t    and\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"variable_declaration\""},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Change \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan_out_declarations"},{"body":"\n\t    and (if necessary)\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"extend_environment"},{"body":"\n\t    such that constants are distinguishable from variables in\n\t    the frames in which they are bound.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Change \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":" such\n\t    that it checks whether the given symbol has been declared as\n\t    a variable or as a constant, and in the latter case signals\n\t    an error that assignment operations are not allowed on constants.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Change\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_declaration"},{"body":"\n\t    such that when it encounters a constant declaration,\n\t    it calls a new function, \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_constant_value"},{"body":", which\n\t    does not perform the check that you introduced in\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    If necessary, change\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" to ensure that\n\t    assignment to function parameters remains possible.\n\t  ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.12","id":"#ex-4.12","child":[{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    JavaScript's specification requires an implementation to\n\t    signal a runtime error upon an attempt to access the\n\t    value of a name before its declaration is evaluated (see\n\t    the end of section ","tag":"#text"},{"tag":"REF","body":"3.2.4","href":"/sicpjs/3.2.4"},{"body":").\n\t    To achieve this behavior in the evaluator,\n\t    \n\t    change ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lookup_symbol_value"},{"body":"\n\t    to signal an error if the value it finds is\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"*unassigned*\""},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Similarly, we must not assign a new value to a variable if\n\t    we have not evaluated its ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":"\n\t    declaration yet. Change the evaluation of assignment\n\t    such that assignment to a variable declared with\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":" signals an error\n\t    in this case.\n\t  ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.13","id":"#ex-4.13","child":[{"body":"\n\t  Prior to ECMAScript 2015's strict mode that we are using in this book,\n\t  JavaScript variables\n\t  worked quite differently from Scheme variables, which would have made\n\tthis adaptation to JavaScript considerably less compelling.\n\t","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    Before ECMAScript 2015, the only way to declare a local variable in\n\t    JavaScript was using the keyword\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"var"},{"body":"\n\t    instead of the keyword ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":".\n\t    The scope of variables declared with\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"var"},{"body":" is the entire body of the\n\t    immediately surrounding function declaration or lambda expression,\n\t    rather than just the immediately enclosing block. Modify\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan_out_declarations"},{"body":" and \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_block"},{"body":" such that\n\t    names declared with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const"},{"body":" and\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":" follow the scoping rules\n\t    of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"var"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    When not in strict mode, JavaScript permits undeclared\n\t    names to appear to the left of the\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"="},{"body":" in assignments. \n\t    Such an assignment adds the new binding to the global\n\t    environment. Modify the function \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":"\n\t    to make assignment behave this way. The strict mode, which forbids\n\t    such assignments, was introduced\n\t    in JavaScript in order to make programs more secure. What\n\t    security issue is addressed by preventing assignment from\n\t    adding bindings to the global environment?\n\t  ","tag":"#text"}]}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.1.3#footnote-link-1","child":[{"body":"Conditionals\n      \n      in full JavaScript accept ","tag":"#text"},{"tag":"EM","child":[{"body":"any","tag":"#text"}]},{"body":" value, not just a boolean,\n      as the result of evaluating the\n\t\"","tag":"#text"},{"body":"predicate","tag":"#text"},{"body":"\" expression. JavaScript's notion of\n\ttruthiness and falsiness is captured by the following variants of \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_truthy"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_falsy"},{"body":":\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0KAnIigCwE8AKAB4BKUAG9QbAKYUibegEIGLAgEMANo37CA3KAC++YuWp0lzVRq0jRuUHYnTZ9Pk2YAjGjTWSVJQSIAyANB5AVARe0ioqIAfGNtoyJcWEiIAWzdJNn9QINBBUABeYtAABlA40DD5ErChETiExLtk5kZ2KhIAcxy8sOLC0AAiIYjmyMbxu1dUtTUcqcXmyanXUgATSQJOyXX-bVw9IA","body":"function is_truthy(x) { return ! is_falsy(x); }\n\nfunction is_falsy(x) {\n    return (is_boolean(x) && !x )                  ||\n           (is_number(x) && (x === 0 || x !== x )) ||\n           (is_string(x) && x === \"\")              ||\n           is_null(x)                              ||\n           is_undefined(x);\n} "},{"body":"\n\tThe test ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x !== x"},{"body":" is not a typo;\n\tthe only JavaScript value for which\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x !== x"},{"body":" yields true is the value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"NaN"},{"body":" (\"","tag":"#text"},{"body":"Not a Number","tag":"#text"},{"body":"\"),\n\t\n\twhich is considered to be a falsy number (also not a typo), along with 0.\n\tThe numerical value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"NaN"},{"body":" is the result of certain\n\tarithmetic border cases such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"0 / 0"},{"body":".\n\t","tag":"#text"},{"tag":"TEXT","id":"#p12","child":[{"body":"\n\t  The terms \"","tag":"#text"},{"body":"truthy","tag":"#text"},{"body":"\" and \"","tag":"#text"},{"body":"falsy","tag":"#text"},{"body":"\" were coined\n\t  by\n\t  \n\t  Douglas Crockford, one of whose books\n\t  (Crockford 2008) inspired this JavaScript adaptation.\n\t","tag":"#text"}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.1.3#footnote-link-2","child":[{"body":"Frames are not really a data\n    \n\tabstraction:\n      \n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assign_symbol_value"},{"body":"\n\tbelow uses\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_head"},{"body":"\n\tto directly modify the values in a frame.\n      \n    The purpose of the frame\n    functions\n    is to make the environment-manipulation\n    functions\n    easy to read.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.1.3#footnote-link-3","child":[{"body":"The drawback of this representation (as\n    well as the variant in\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.9","href":"/sicpjs/4.1.3#ex-4.9"},{"body":") is that the\n    evaluator may have to search through many frames in order to find the binding\n    for a given variable.\n    (Such an approach is referred to as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"deep binding","tag":"#text"}]},{"body":".) One way to avoid\n    this inefficiency is to make use of a strategy called\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"lexical addressing","tag":"#text"}]},{"body":", which will be discussed in\n\tsection ","tag":"#text"},{"tag":"REF","body":"5.5.6","href":"/sicpjs/5.5.6"},{"body":".\n  ","tag":"#text"}]}]