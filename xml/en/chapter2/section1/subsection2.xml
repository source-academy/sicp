<SUBSECTION>
  <NAME>
    Abstraction Barriers
  </NAME>

  <LABEL NAME="sec:abstraction-barriers"/>

  <TEXT>
    <INDEX>abstraction barriers<OPEN/></INDEX>
    Before continuing with more examples of compound data and data
    abstraction, let us consider some of the issues raised by the
    rational-number example.  We defined the rational-number operations in
    terms of a constructor
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_@rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and selectors <SCHEMEINLINE>numer</SCHEMEINLINE> and
    <SCHEMEINLINE>denom</SCHEMEINLINE>.  In general, the underlying idea of data
    abstraction is to identify for each type of data object a basic set of
    operations in terms of which all manipulations of data objects of that type
    will be expressed, and then to use only those operations in manipulating the
    data.
  </TEXT>
  <SPLIT>
    <SCHEME>
      <FIGURE src="img_original/ch2-Z-G-6.svg">
        <LABEL NAME="fig:abstraction-barriers_scheme"/>
        <CAPTION>Data-abstraction barriers in the rational-number package.
        </CAPTION>
      </FIGURE>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE scale="0.65" src="img_javascript/ch2-Z-G-6.svg">
        <LABEL NAME="fig:abstraction-barriers"/>
        <CAPTION>Data-abstraction barriers in the rational-number package.
        </CAPTION>
      </FIGURE>
    </JAVASCRIPT>
  </SPLIT>
  <SHORT_PAGE lines="1"/>
  <TEXT>
    We can envision the structure of the rational-number system as
    shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:abstraction-barriers_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:abstraction-barriers"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The horizontal lines represent <EM>abstraction barriers</EM> that isolate
    different <QUOTE>levels</QUOTE> of the system.  At each level, the barrier
    separates the programs (above) that use the data abstraction from the
    programs (below) that implement the data abstraction.  Programs that
    use rational numbers manipulate them solely in terms of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    supplied <QUOTE>for public use</QUOTE> by the rational-number package:
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equal-rat?</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>equal_rat</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    These, in turn, are implemented solely in terms of the
    <INDEX>constructor<SUBINDEX>as abstraction barrier</SUBINDEX></INDEX>
    constructor and
    <INDEX>selector<SUBINDEX>as abstraction barrier</SUBINDEX></INDEX>
    selectors
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, and <SCHEMEINLINE>denom</SCHEMEINLINE>,
    which themselves are implemented in terms of pairs.  The details of how
    pairs are implemented are irrelevant to the rest of the rational-number
    package so long as pairs can be manipulated by the use of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In effect,
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    at each level are the interfaces that define the abstraction barriers and
    connect the different levels.
  </TEXT>
  <TEXT>
    This simple idea has many advantages.  One advantage is that it makes
    programs much easier to maintain and to modify.  Any complex data
    structure can be represented in a variety of ways with the primitive
    data structures provided by a programming language.  Of course, the
    choice of representation influences the programs that operate on it;
    thus, if the representation were to be changed at some later time, all
    such programs might have to be modified accordingly.  This task could
    be time-consuming and expensive in the case of large programs unless
    the dependence on the representation were to be confined by design to
    a very few program modules.
  </TEXT>
  <TEXT>
    For example, an alternate way to address the problem of
    <INDEX>rational number(s)<SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
    <INDEX>reducing to lowest terms</INDEX>
    <INDEX><DECLARATION>make_rat</DECLARATION></INDEX>
    <INDEX><DECLARATION>denom</DECLARATION><SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
    <INDEX><DECLARATION>numer</DECLARATION><SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
    reducing rational
    numbers to lowest terms is to perform the reduction whenever we
    access the parts of a rational number, rather than when we construct
    it.  This leads to different constructor and selector
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="89">
      <NAME>make_rat_4</NAME>
      <EXPECTED>[ 1, 2 ]</EXPECTED>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>print_rat_example5</EXAMPLE>
      <SCHEME>
(define (make-rat n d)
  (cons n d))

(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))

(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))
      </SCHEME>
      <JAVASCRIPT>
function make_rat(n, d) {
    return pair(n, d);
}
function numer(x) {
    const g = gcd(head(x), tail(x));
    return head(x) / g;
}
function denom(x) {
    const g = gcd(head(x), tail(x));
    return tail(x) / g;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>print_rat_example5</NAME>
      <JAVASCRIPT>
// printing the rational in one line requires some string
// manipulation: stringify turns a number into a string 
// and the operator + can be applied to strings for
// string concatenation
function print_rat(x) {
    return display(stringify(numer(x)) + "/" + stringify(denom(x)));
}

const one_half = make_rat(1, 2);

print_rat(one_half);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const one_half = make_rat(1, 2);

one_half;
      </JAVASCRIPT_TEST>
    </SNIPPET>
    The difference between this implementation and the previous one lies in when
    we compute the <SCHEMEINLINE>gcd</SCHEMEINLINE>. If in our typical use of
    rational numbers we access the numerators and denominators of the same
    rational numbers many times, it would be preferable to compute the
    <SCHEMEINLINE>gcd</SCHEMEINLINE> when the rational numbers are constructed.
    If not, we may be better off waiting until access time to compute the
    <SCHEMEINLINE>gcd</SCHEMEINLINE>.  In any case, when we change from one
    representation to the other, the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and so on do not have to be modified at all.
  </TEXT>
  <TEXT>
    Constraining the dependence on the representation to a few interface
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    helps us design programs as well as modify them, because it allows us to
    maintain the flexibility to consider alternate implementations.  To continue
    with our simple example, suppose we are designing a rational-number package
    and we can<APOS/>t decide initially whether to perform the
    <SCHEMEINLINE>gcd</SCHEMEINLINE> at construction time or at selection time.
    The data-abstraction methodology gives us a way to defer that decision
    without losing the ability to make progress on the rest of the system.
  </TEXT>
  <SHORT_PAGE lines="2"/>
  <EXERCISE>
    <LABEL NAME="ex:segments1"/>
    Consider the problem of representing 
    <INDEX>line segment<SUBINDEX>represented as pair of points</SUBINDEX></INDEX>
    line segments in a plane.  Each segment is represented as a pair of points:
    a starting point and an ending point.
    <SPLITINLINE>
      <SCHEME>Define</SCHEME>
      <JAVASCRIPT>Declare</JAVASCRIPT>
    </SPLITINLINE>
    a constructor 
     <INDEX><USE>make_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_segment</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and selectors 
     <INDEX><USE>start_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>start-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>start_segment</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and 
     <INDEX><USE>end_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>end-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>end_segment</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that define the representation of segments in
    terms of points.  Furthermore, a point 
    <INDEX>point, represented as a pair</INDEX>
    can be represented as a pair
    of numbers: the <LATEXINLINE>$x$</LATEXINLINE> coordinate and the
    <LATEXINLINE>$y$</LATEXINLINE> coordinate.  Accordingly, specify a
    constructor 
     <INDEX><USE>make_point</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-point</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_point</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and selectors
    <SPLITINLINE><SCHEME><SCHEMEINLINE>x-point</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>x_point</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>y-point</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>y_point</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that define this representation. Finally, using your selectors and
    constructors,
    <SPLITINLINE>
      <SCHEME>define a procedure</SCHEME>
    <JAVASCRIPT>declare a function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>midpoint_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>midpoint-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>midpoint_segment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes a line segment as argument and returns its midpoint (the point
    whose coordinates are the average of the coordinates of the endpoints).
    To try your
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
    <JAVASCRIPT>functions,</JAVASCRIPT></SPLITINLINE>
    you<APOS/>ll need a way to print points:
    <SNIPPET PAGE="89" EVAL="no" POSTPADDING="no">
      <INDEX><DECLARATION>print_point</DECLARATION><FRAGILE/></INDEX>
      <NAME>print_point</NAME>
      <EXAMPLE>x_point</EXAMPLE>
      <SCHEME>
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
      </SCHEME>
      <JAVASCRIPT>
function print_point(p) {
    return display("(" + stringify(x_point(p)) + ", "
                       + stringify(y_point(p)) +        ")");
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="89" HIDE="yes">
      <NAME>x_point</NAME>
      <SCHEME>
;; make-segment, start-segment, end-segment,
;; make-point, x-point, and y-point to be
;; written by student
      </SCHEME>
      <JAVASCRIPT>
// make_segment, start_segment, end_segment,
// make_point, x_point, and y_point to be
// written by student
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>        
      <SNIPPET>
	<EXPECTED>[ 0.5, 0.5 ]</EXPECTED>
	<REQUIRES>print_point</REQUIRES>
	<EXAMPLE>example_2.2</EXAMPLE>
	<JAVASCRIPT>
function x_point(x) {
    return head(x);
}
function y_point(x) {
    return tail(x);
}
function make_point(x, y) {
    return pair(x, y);
}
function make_segment(start_point, end_point) {
    return pair(start_point, end_point);
}
function start_segment(x) {
    return head(x);
}
function end_segment(x) {
    return tail(x);
}
function average(a, b) {
    return (a + b) / 2;
}
function mid_point_segment(x) {
    const a = start_segment(x);
    const b = end_segment(x);
    return make_point(average(x_point(a),
                              x_point(b)),
                      average(y_point(a),
                              y_point(b)));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_2.2</NAME>
      <JAVASCRIPT>
const one_half = make_segment(make_point(0, 0), 
                              make_point(1, 1));
print_point(mid_point_segment(one_half));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const one_half = make_segment(make_point(0, 0), 
                              make_point(1, 1));
mid_point_segment(one_half);
      </JAVASCRIPT_TEST>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE>
  <EXERCISE>
    Implement a representation for
    <INDEX>rectangle, representing</INDEX>
    rectangles in a plane. (Hint: You may want to
    make use of exercise<SPACE/><REF NAME="ex:segments1"/>.) In terms of your
    constructors and selectors, create
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that compute the perimeter and the area of a given rectangle.  Now implement
    a different representation for rectangles.  Can you design your system with
    suitable abstraction barriers, so that the same perimeter and area
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    will work using either representation?
    <LABEL NAME="ex:rectangles"/>
    <SOLUTION>
      First implementation:
      <SNIPPET>
	<EXAMPLE>example_2.3</EXAMPLE>
	<EXPECTED>8</EXPECTED>
	<JAVASCRIPT>
function make_point(x, y){
    return pair(x, y);
}
function x_point(x){
    return head(x);
}
function y_point(x){
    return tail(x);
}

function make_rect(bottom_left, top_right){
    return pair(bottom_left, top_right);
}

function top_right(rect){
    return tail(rect);
}

function bottom_right(rect){
    return make_point(x_point(tail(rect)),
                      y_point(head(rect)));
}

function top_left(rect){
    return make_point(x_point(head(rect)),
                      y_point(tail(rect)));
}
  
function bottom_left(rect){
    return head(rect);
}
  
function abs(x){
    return x &lt; 0 ? - x : x;
}

function width_rect(rect){
    return abs(x_point(bottom_left(rect)) - 
               x_point(bottom_right(rect)));
}

function height_rect(rect){
    return abs (y_point(bottom_left(rect)) - 
                y_point(top_left(rect)));
}

function area_rect(rect){
  return width_rect(rect) * height_rect(rect);
}

function perimeter_rect(rect){
  return 2 * (width_rect(rect) + height_rect(rect));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_2.3</NAME>
	<JAVASCRIPT>
const v = make_rect(make_point(0, 1), make_point(2, 3));

perimeter_rect(v);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      Second implementation:
      <SNIPPET>
	<EXAMPLE>example_2.3_2</EXAMPLE>
	<JAVASCRIPT>
function make_point(x, y){
    return pair(x, y);
}

function make_rect(bottom_left, width, height){
    return pair(bottom_left, pair(width, height));
}

function height_rect(rect){
    return tail(tail(rect));
}

function width_rect(rect){
  return head(tail(rect));
}

function area_rect(rect){
  return width_rect(rect) * height_rect(rect);
}

function perimeter_rect(rect){
  return 2 * (width_rect(rect) + height_rect(rect));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_2.3_2</NAME>
	<JAVASCRIPT>
const v = make_rect(make_point(1, 2), 2, 2);

perimeter_rect(v);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>abstraction barriers<CLOSE/></INDEX>
</SUBSECTION>
