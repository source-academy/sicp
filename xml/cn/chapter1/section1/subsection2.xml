<SUBSECTION>
   <NAME>命名与环境</NAME><NAME>命名与环境</NAME>
  <LABEL NAME="sec:naming"></LABEL><NAME>命名与环境</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    编程语言的一个关键方面是它提供的使用
    <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
  </TEXT> <NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
     <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
   </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	在Lisp的Scheme方言中，我们用
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（那些标记为<EM>ns</EM>的不在IEEE Scheme标准中）</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>命名。
      </SCHEME>
      <JAVASCRIPT>
	在JavaScript中，我们用
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>常量(<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号(<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>语句结束</SUBINDEX></INDEX>
	<EM>常量声明</EM>来命名。	
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"></LABEL>
    <SPLITINLINE>
      <SCHEME>    
        本书中，我们没有
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>define</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        计算定义的响应，因为这是依赖于具体实现的。
      </SCHEME>
      <JAVASCRIPT>
        本书中，我们没有显示解释器<APOS></APOS>对
        计算以声明结束的程序的响应，因为这可能依赖于前面的语句。详情请参见习题<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称  <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT><NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
     <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
   </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	在Lisp的Scheme方言中，我们用
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（那些标记为<EM>ns</EM>的不在IEEE Scheme标准中）</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>命名。
      </SCHEME>
      <JAVASCRIPT>
	在JavaScript中，我们用
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>常量(<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号(<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>语句结束</SUBINDEX></INDEX>
	<EM>常量声明</EM>来命名。	
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"></LABEL>
    <SPLITINLINE>
      <SCHEME>    
        本书中，我们没有
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>define</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        计算定义的响应，因为这是依赖于具体实现的。
      </SCHEME>
      <JAVASCRIPT>
        本书中，我们没有显示解释器<APOS></APOS>对
        计算以声明结束的程序的响应，因为这可能依赖于前面的语句。详情请参见习题<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称  <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <SPLIT> 
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY>
          JavaScript解释器需要在变量名<JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>被用于表达式之前执行常量声明。为了简洁，在本在线书中，要求在新语句之前计算的语句被省略。然而，要查看和运行程序，您可以点击它。程序将显示在新的浏览器标签页中，并带有<QUOTE>显示依赖项</QUOTE>选项。因此，点击
          <SNIPPET>
            <REQUIRES>var_size</REQUIRES>
            <JAVASCRIPT>
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
          时，将出现一个新标签页，包含程序，并在点击<QUOTE>显示依赖项</QUOTE>后，您将看到：
          <SNIPPET>
	    <EXPECTED>10</EXPECTED>
            <JAVASCRIPT>
const size = 2;
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
   </SPLIT><NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
     <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
   </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	在Lisp的Scheme方言中，我们用
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（那些标记为<EM>ns</EM>的不在IEEE Scheme标准中）</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>命名。
      </SCHEME>
      <JAVASCRIPT>
	在JavaScript中，我们用
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>常量(<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号(<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>语句结束</SUBINDEX></INDEX>
	<EM>常量声明</EM>来命名。	
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"></LABEL>
    <SPLITINLINE>
      <SCHEME>    
        本书中，我们没有
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>define</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        计算定义的响应，因为这是依赖于具体实现的。
      </SCHEME>
      <JAVASCRIPT>
        本书中，我们没有显示解释器<APOS></APOS>对
        计算以声明结束的程序的响应，因为这可能依赖于前面的语句。详情请参见习题<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称  <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <SPLIT> 
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY>
          JavaScript解释器需要在变量名<JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>被用于表达式之前执行常量声明。为了简洁，在本在线书中，要求在新语句之前计算的语句被省略。然而，要查看和运行程序，您可以点击它。程序将显示在新的浏览器标签页中，并带有<QUOTE>显示依赖项</QUOTE>选项。因此，点击
          <SNIPPET>
            <REQUIRES>var_size</REQUIRES>
            <JAVASCRIPT>
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
          时，将出现一个新标签页，包含程序，并在点击<QUOTE>显示依赖项</QUOTE>后，您将看到：
          <SNIPPET>
	    <EXPECTED>10</EXPECTED>
            <JAVASCRIPT>
const size = 2;
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>
  <TEXT>
    Here are further examples of the use of
     <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>：
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>

     <SNIPPET>
      <NAME>pi</NAME>
      <SCHEME>
(define pi 3.14159)
      </SCHEME>
      <JAVASCRIPT>
const pi = 3.14159;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>radius</NAME>
      <SCHEME>
(define radius 10)
      </SCHEME>
      <JAVASCRIPT>
const radius = 10;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>pi_radius_radius</NAME>
      <EXPECTED>314.159</EXPECTED>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(* pi (* radius radius))
      </SCHEME>
      <SCHEMEOUTPUT>
314.159
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pi * radius * radius;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
314.159
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>circumference_definition</NAME>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(define circumference (* 2 pi radius))
      </SCHEME>
      <JAVASCRIPT>
const circumference = 2 * pi * radius;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXPECTED>62.8318</EXPECTED>
      <NAME>circumference_use</NAME>
      <REQUIRES>circumference_definition</REQUIRES>
      <SCHEME>
circumference
      </SCHEME>
      <SCHEMEOUTPUT>
62.8318
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
circumference;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
62.8318
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT><NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
     <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
   </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	在Lisp的Scheme方言中，我们用
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（那些标记为<EM>ns</EM>的不在IEEE Scheme标准中）</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>命名。
      </SCHEME>
      <JAVASCRIPT>
	在JavaScript中，我们用
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>常量(<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号(<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>语句结束</SUBINDEX></INDEX>
	<EM>常量声明</EM>来命名。	
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"></LABEL>
    <SPLITINLINE>
      <SCHEME>    
        本书中，我们没有
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>define</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        计算定义的响应，因为这是依赖于具体实现的。
      </SCHEME>
      <JAVASCRIPT>
        本书中，我们没有显示解释器<APOS></APOS>对
        计算以声明结束的程序的响应，因为这可能依赖于前面的语句。详情请参见习题<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称  <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <SPLIT> 
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY>
          JavaScript解释器需要在变量名<JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>被用于表达式之前执行常量声明。为了简洁，在本在线书中，要求在新语句之前计算的语句被省略。然而，要查看和运行程序，您可以点击它。程序将显示在新的浏览器标签页中，并带有<QUOTE>显示依赖项</QUOTE>选项。因此，点击
          <SNIPPET>
            <REQUIRES>var_size</REQUIRES>
            <JAVASCRIPT>
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
          时，将出现一个新标签页，包含程序，并在点击<QUOTE>显示依赖项</QUOTE>后，您将看到：
          <SNIPPET>
	    <EXPECTED>10</EXPECTED>
            <JAVASCRIPT>
const size = 2;
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>
  <TEXT>
    Here are further examples of the use of
     <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>：
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>

     <SNIPPET>
      <NAME>pi</NAME>
      <SCHEME>
(define pi 3.14159)
      </SCHEME>
      <JAVASCRIPT>
const pi = 3.14159;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>radius</NAME>
      <SCHEME>
(define radius 10)
      </SCHEME>
      <JAVASCRIPT>
const radius = 10;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>pi_radius_radius</NAME>
      <EXPECTED>314.159</EXPECTED>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(* pi (* radius radius))
      </SCHEME>
      <SCHEMEOUTPUT>
314.159
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pi * radius * radius;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
314.159
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>circumference_definition</NAME>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(define circumference (* 2 pi radius))
      </SCHEME>
      <JAVASCRIPT>
const circumference = 2 * pi * radius;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXPECTED>62.8318</EXPECTED>
      <NAME>circumference_use</NAME>
      <REQUIRES>circumference_definition</REQUIRES>
      <SCHEME>
circumference
      </SCHEME>
      <SCHEMEOUTPUT>
62.8318
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
circumference;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
62.8318
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	<INDEX>抽象方式<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
	<SCHEMEINLINE>Define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	常量
	<INDEX>抽象方式<SUBINDEX>常量声明为</SUBINDEX></INDEX>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    是我们语言<APOS></APOS>
    最简单的抽象方式，因为它允许我们使用简单的名字来引用复合操作的结果，例如
     <SCHEMEINLINE>circumference</SCHEMEINLINE> computed above.
    In general, computational objects may have very complex
    structures, and it would be extremely inconvenient to have to remember
    and repeat their details each time we want to use them.  Indeed,
    complex programs are constructed by building, step by step,
    computational objects of increasing complexity. The
    interpreter makes this step-by-step program construction particularly
    convenient because name-object associations can be created
    incrementally in successive interactions.  This feature encourages the
     <INDEX>程序的增量开发</INDEX>
    <INDEX>程序<SUBINDEX>增量开发</SUBINDEX></INDEX>
    程序的增量开发和测试在很大程度上
    负责
    <INDEX>程序<SUBINDEX>结构</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	Lisp
      </SCHEME>
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    程序通常由大量相对简单的
    <SPLITINLINE>
      <SCHEME>
	过程。
      </SCHEME>
      <JAVASCRIPT>
        函数。
      </JAVASCRIPT>
    </SPLITINLINE>
   </TEXT><NAME>Naming and the Environment</NAME>
  <LABEL NAME="sec:naming"></LABEL>

  <TEXT>
    A critical aspect of a programming language is the means it provides
    for using
     <INDEX>命名<SUBINDEX>计算对象</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      <SCHEME>对象。</SCHEME>
      <JAVASCRIPT>对象，我们的第一种方式是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二种方式是变量，在JavaScript中语法上与常量不同，并在第三章介绍。</COMMENT>
    我们说
    <INDEX>原始表达式<SUBINDEX>常量名称</SUBINDEX></INDEX>
    名称识别一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <SCHEME><EM>变量</EM></SCHEME>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其中的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
   </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	在Lisp的Scheme方言中，我们用
        <INDEX><DECLARATION>define</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（那些标记为<EM>ns</EM>的不在IEEE Scheme标准中）</DECLARATION><SUBINDEX><ORDER>define</ORDER>{\tt define}</SUBINDEX></INDEX>
        <SCHEMEINLINE>define</SCHEMEINLINE>命名。
      </SCHEME>
      <JAVASCRIPT>
	在JavaScript中，我们用
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>常量(<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号(<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>语句结束</SUBINDEX></INDEX>
	<EM>常量声明</EM>来命名。	
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET>
    causes the interpreter to associate the value 2 with the
    name <SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    <LABEL NAME="foot:toplevel_value"></LABEL>
    <SPLITINLINE>
      <SCHEME>    
        本书中，我们没有
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>define</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        计算定义的响应，因为这是依赖于具体实现的。
      </SCHEME>
      <JAVASCRIPT>
        本书中，我们没有显示解释器<APOS></APOS>对
        计算以声明结束的程序的响应，因为这可能依赖于前面的语句。详情请参见习题<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称  <SCHEMEINLINE>size</SCHEMEINLINE>
    has been associated with the number 2, we can
    refer to the value 2 by name:
    <SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <SPLIT> 
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY>
          JavaScript解释器需要在变量名<JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>被用于表达式之前执行常量声明。为了简洁，在本在线书中，要求在新语句之前计算的语句被省略。然而，要查看和运行程序，您可以点击它。程序将显示在新的浏览器标签页中，并带有<QUOTE>显示依赖项</QUOTE>选项。因此，点击
          <SNIPPET>
            <REQUIRES>var_size</REQUIRES>
            <JAVASCRIPT>
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
          时，将出现一个新标签页，包含程序，并在点击<QUOTE>显示依赖项</QUOTE>后，您将看到：
          <SNIPPET>
	    <EXPECTED>10</EXPECTED>
            <JAVASCRIPT>
const size = 2;
5 * size;
            </JAVASCRIPT>
          </SNIPPET>
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>
  <TEXT>
    Here are further examples of the use of
     <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>：
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>

     <SNIPPET>
      <NAME>pi</NAME>
      <SCHEME>
(define pi 3.14159)
      </SCHEME>
      <JAVASCRIPT>
const pi = 3.14159;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>radius</NAME>
      <SCHEME>
(define radius 10)
      </SCHEME>
      <JAVASCRIPT>
const radius = 10;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>pi_radius_radius</NAME>
      <EXPECTED>314.159</EXPECTED>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(* pi (* radius radius))
      </SCHEME>
      <SCHEMEOUTPUT>
314.159
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pi * radius * radius;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
314.159
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>circumference_definition</NAME>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      <SCHEME>
(define circumference (* 2 pi radius))
      </SCHEME>
      <JAVASCRIPT>
const circumference = 2 * pi * radius;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXPECTED>62.8318</EXPECTED>
      <NAME>circumference_use</NAME>
      <REQUIRES>circumference_definition</REQUIRES>
      <SCHEME>
circumference
      </SCHEME>
      <SCHEMEOUTPUT>
62.8318
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
circumference;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
62.8318
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT> 
    <SPLITINLINE>
      <SCHEME>
	<INDEX>抽象方式<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
	<SCHEMEINLINE>Define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	常量
	<INDEX>抽象方式<SUBINDEX>常量声明为</SUBINDEX></INDEX>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    是我们语言<APOS></APOS>
    最简单的抽象方式，因为它允许我们使用简单的名字来引用复合操作的结果，例如
     <SCHEMEINLINE>circumference</SCHEMEINLINE> computed above.
    In general, computational objects may have very complex
    structures, and it would be extremely inconvenient to have to remember
    and repeat their details each time we want to use them.  Indeed,
    complex programs are constructed by building, step by step,
    computational objects of increasing complexity. The
    interpreter makes this step-by-step program construction particularly
    convenient because name-object associations can be created
    incrementally in successive interactions.  This feature encourages the
     <INDEX>程序的增量开发</INDEX>
    <INDEX>程序<SUBINDEX>增量开发</SUBINDEX></INDEX>
    程序的增量开发和测试在很大程度上
    负责
    <INDEX>程序<SUBINDEX>结构</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	Lisp
      </SCHEME>
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    程序通常由大量相对简单的
    <SPLITINLINE>
      <SCHEME>
	过程。
      </SCHEME>
      <JAVASCRIPT>
        函数。
      </JAVASCRIPT>
    </SPLITINLINE>
   </TEXT>
  <TEXT>
    It should be clear that the possibility of associating values with
    names and later retrieving them means that the interpreter must
    maintain some sort of memory that keeps track of the name-object
    pairs.  This memory is called the
     <INDEX>环境</INDEX>
    <EM>环境</EM>
    （更准确地说是
    <SPLITINLINE>
      <SCHEME>
	<INDEX>全局环境</INDEX>
	<EM>全局环境</EM>，
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>程序环境</INDEX>
	<EM>程序环境</EM>，
      </JAVASCRIPT>
    </SPLITINLINE>
    因为我们稍后会看到，一个计算可能涉及多个不同的环境）。<FOOTNOTE>Chapter<SPACE></SPACE><REF NAME="chap:state"></REF>将展示这个环境概念对于理解解释器如何工作至关重要。Chapter<SPACE></SPACE><REF NAME="chap:meta"></REF>将使用环境来实现解释器。</FOOTNOTE>
   </TEXT></SUBSECTION>