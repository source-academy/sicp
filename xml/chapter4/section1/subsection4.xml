<SUBSECTION>
  <NAME>
    Running the Evaluator as a Program
  </NAME>

  <LABEL NAME="sec:running-eval"/>

  <INDEX>metacircular evaluator for JavaScript<SUBINDEX>running<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Given the evaluator, we have in our hands a description
    <SPLITINLINE>
      <SCHEME>(expressed in Lisp)</SCHEME>
      <JAVASCRIPT>(expressed in JavaScript)</JAVASCRIPT>
    </SPLITINLINE>
    of the process by which
    <SPLITINLINE>
      <SCHEME>Lisp expressions</SCHEME>
      <JAVASCRIPT>JavaScript statements and expressions</JAVASCRIPT>
    </SPLITINLINE>
    are evaluated.  One advantage of expressing the evaluator as a program is
    that we can run the program.  This gives us, running within
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    a working model of how
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    itself evaluates expressions.  This can serve as a framework for
    experimenting with evaluation rules, as we shall do later in this chapter.
  </TEXT>

  <TEXT>
    Our evaluator program reduces expressions ultimately to the application of
    <SPLITINLINE>
      <SCHEME>
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>primitive procedures<OPEN/></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX>primitive functions<OPEN/></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    primitive
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Therefore, all that we need to run the evaluator is to create a mechanism
    that calls on the underlying
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system to model the application of primitive
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    There must be a binding for each primitive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    name and operator, so that when
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    evaluates the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <JAVASCRIPT>function expression</JAVASCRIPT>
    </SPLITINLINE>
    of an application of a primitive, it will find an
    object to pass to <SCHEMEINLINE>apply</SCHEMEINLINE>.  We thus set up a 
    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>global environment</SUBINDEX></INDEX>
    <INDEX>global environment<SUBINDEX><ORDER>metacircular</ORDER>in metacircular evaluator</SUBINDEX></INDEX>
    global environment that associates unique objects with the names of the
    primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions and operators</JAVASCRIPT>
    </SPLITINLINE>
    that can appear in the expressions we will be evaluating.  
    <INDEX>symbol(s)<SUBINDEX>in global environment</SUBINDEX></INDEX>
    <SPLIT>
      <SCHEME>
	The global environment also includes bindings for the symbols 
	<INDEX>metacircular evaluator for Scheme<SUBINDEX><ORDER>true and false</ORDER><SCHEMEINLINE>true</SCHEMEINLINE> and <SCHEMEINLINE>false</SCHEMEINLINE></SUBINDEX></INDEX>
	<SCHEMEINLINE>true</SCHEMEINLINE> and <SCHEMEINLINE>false</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	The global environment also includes bindings for
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX><ORDER>undefined</ORDER><USE>undefined</USE></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>
	and other names,
      </JAVASCRIPT>
    </SPLIT>
    so that they can be used as constants in expressions to be evaluated.
    <SNIPPET PAGE="365" HIDE="yes" EVAL="no">
      <NAME>headline_4_1_4</NAME>
      <JAVASCRIPT>
// functions from SICP JS 4.1.4
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="381">
      <INDEX><DECLARATION>setup_environment</DECLARATION></INDEX>
      <NAME>setup_environment</NAME>
      <EXAMPLE>setup_environment_example</EXAMPLE>
      <REQUIRES>tagged_list</REQUIRES>
      <REQUIRES>extend_environment</REQUIRES>
      <REQUIRES>enclosing_environment</REQUIRES>
      <REQUIRES>make_frame</REQUIRES>
      <REQUIRES>primitive_constants</REQUIRES>
      <REQUIRES>primitive_procedures</REQUIRES>
      <REQUIRES>primitive_procedure</REQUIRES>
      <EXPECTED>'/'</EXPECTED>
      <SCHEME>
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
      </SCHEME>
      <JAVASCRIPT>
function setup_environment() {
    return extend_environment(append(primitive_function_symbols,
                                     primitive_constant_symbols),
                              append(primitive_function_objects, 
                                     primitive_constant_values),
                              the_empty_environment);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="381" HIDE="yes">
      <NAME>setup_environment_example</NAME>
      <JAVASCRIPT>
const the_global_environment = setup_environment();

the_global_environment;
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const the_global_environment = setup_environment();

list_ref(head(head(the_global_environment)), 12);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET PAGE="381">
      <INDEX><DECLARATION>the_global_environment</DECLARATION></INDEX>
      <NAME>the_global_environment</NAME>
      <REQUIRES>setup_environment</REQUIRES>
      <EXAMPLE>the_global_environment_example</EXAMPLE>
      <SCHEME>
(define the-global-environment (setup-environment))
      </SCHEME>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="381" HIDE="yes">
      <NAME>the_global_environment_example</NAME>
      <JAVASCRIPT>
the_global_environment;
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	It does not matter how we represent the primitive procedure objects, so
	long as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and apply them
	by using the procedures <SCHEMEINLINE>primitive-procedure?</SCHEMEINLINE>
	and <SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>. We have
	chosen to represent a primitive procedure as a list beginning with the
	symbol <SCHEMEINLINE>primitive</SCHEMEINLINE> and containing a procedure
	in the underlying Lisp that implements that primitive.
	<SNIPPET PAGE="382">
	  <NAME>primitive_procedure</NAME>
	  <SCHEME>
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))

(define (primitive-implementation proc) (cadr proc))
	  </SCHEME>
	</SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	It does not matter how we represent primitive function objects, so long
	as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and apply them using
	the functions <JAVASCRIPTINLINE>is_primitive_function</JAVASCRIPTINLINE>
	and <JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE>.  We
	have chosen to represent a primitive function as a list beginning with
	the string <JAVASCRIPTINLINE>"primitive"</JAVASCRIPTINLINE> and
	containing a function in the underlying JavaScript that implements that
	primitive.
	<SNIPPET PAGE="382">
	  <INDEX><DECLARATION>is_primitive_function</DECLARATION></INDEX>
	  <INDEX><DECLARATION>primitive_implementation</DECLARATION></INDEX>
	  <NAME>primitive_procedure</NAME>
	  <REQUIRES>tagged_list</REQUIRES>
	  <EXAMPLE>primitive_procedure_example</EXAMPLE>
	  <EXPECTED>true</EXPECTED>
	  <JAVASCRIPT>
function is_primitive_function(fun) {
    return is_tagged_list(fun, "primitive");
}
function primitive_implementation(fun) {
    return head(tail(fun));
}
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET PAGE="382" HIDE="yes">
	  <NAME>primitive_procedure_example</NAME>
	  <JAVASCRIPT>
const my_primitive_plus =
    list("primitive", (x, y) => x + y );
display(is_primitive_function(my_primitive_plus));
display(primitive_implementation(my_primitive_plus));
	  </JAVASCRIPT>
	  <JAVASCRIPT_TEST>
const my_primitive_plus =
    list("primitive", (x, y) => x + y );
primitive_implementation(my_primitive_plus);
is_primitive_function(my_primitive_plus);
	  </JAVASCRIPT_TEST>
	</SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Setup-environment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>setup_environment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will get the primitive names and implementation 
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    from a list:<FOOTNOTE>Any
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    defined in the underlying
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    can be used as a primitive for the metacircular evaluator.  The name of a
    primitive installed in the evaluator need not be the same as the name of its
    implementation in the underlying
    <SPLITINLINE>
      <SCHEME>Lisp;</SCHEME>
      <JAVASCRIPT>JavaScript;</JAVASCRIPT>
      </SPLITINLINE>
    the names are the same here because the metacircular evaluator implements
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>    
    itself.
    Thus, for example, we could put 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(list 'first car)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list("first", head)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE> 
    or 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(list 'square (lambda (x) (* x x)))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>list("square", x => x * x)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in the list of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>primitive-procedures</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>primitive_functions</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET PAGE="382" EVAL="no" LATEX="yes">
      <INDEX><DECLARATION>primitive_function_symbols</DECLARATION></INDEX>
      <INDEX><DECLARATION>primitive_function_objects</DECLARATION></INDEX>
      <NAME>primitive_procedures</NAME>
      <EXAMPLE>primitive_procedures_example</EXAMPLE>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'display display)
        (list 'read read)
        (list '+ +)
        (list '- -)
        (list '* *)
;;      more primitives
        ))

(define (primitive-procedure-names)
  (map car
       primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
      </SCHEME>
      <JAVASCRIPT>
const primitive_functions = list(list("head",    head             ),
                                 list("tail",    tail             ),
                                 list("pair",    pair             ),
                                 list("is_null", is_null          ),
                                 list("+",       (x, y) =&gt; x + y  ),
                                 <METAPHRASE>more primitive functions</METAPHRASE>
                                );
const primitive_function_symbols =
    map(f => head(f), primitive_functions);
const primitive_function_objects =
    map(f => list("primitive", head(tail(f))),
        primitive_functions);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const primitive_functions = list(
       list("head",    head             ),
       list("tail",    tail             ),
       list("pair",    pair             ),
       list("list",    list             ),
       list("is_null", is_null          ),
       list("display", display          ),
       list("error",   error            ),
       list("math_abs",math_abs         ),
       list("+",       (x, y) =&gt; x + y  ),
       list("-",       (x, y) =&gt; x - y  ),
       list("-unary",   x     =&gt;   - x  ),
       list("*",       (x, y) =&gt; x * y  ),
       list("/",       (x, y) =&gt; x / y  ),
       list("%",       (x, y) =&gt; x % y  ),
       list("===",     (x, y) =&gt; x === y),
       list("!==",     (x, y) =&gt; x !== y),
       list("&lt;",       (x, y) =&gt; x &lt;   y),
       list("&lt;=",      (x, y) =&gt; x &lt;=  y),
       list("&gt;",       (x, y) =&gt; x &gt;   y),
       list("&gt;=",      (x, y) =&gt; x &gt;=  y),
       list("!",        x     =&gt;   !   x)
       );
const primitive_function_symbols =
    map(head, primitive_functions);
const primitive_function_objects =
    map(fun => list("primitive", head(tail(fun))),
        primitive_functions);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET PAGE="382" HIDE="yes">
      <NAME>primitive_procedures_example</NAME>
      <JAVASCRIPT>
primitive_functions;
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(primitive_functions);
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	Similar to primitive functions, we define primitive values that are
	installed in the global environment by the function
	<JAVASCRIPTINLINE>setup_environment</JAVASCRIPTINLINE>.
	<SNIPPET PAGE="382" EVAL="no" LATEX="yes">
	  <NAME>primitive_constants</NAME>
	  <EXAMPLE>primitive_constants_example</EXAMPLE>
	  <EXPECTED>5</EXPECTED>
	  <JAVASCRIPT>
const primitive_constants = list(list("undefined", undefined),
                                 list("math_PI",   math_PI)
                                 <METAPHRASE>more primitive constants</METAPHRASE>
                                );
const primitive_constant_symbols =
    map(c => head(c), primitive_constants);
const primitive_constant_values =
    map(c => head(tail(c)), primitive_constants);
	  </JAVASCRIPT>
	  <JAVASCRIPT_RUN>
const primitive_constants = list(list("undefined", undefined),
                                 list("Infinity",  Infinity),
                                 list("math_PI",   math_PI),
                                 list("math_E",    math_E),
                                 list("NaN",       NaN)
                                );
const primitive_constant_symbols =
    map(c => head(c), primitive_constants);
const primitive_constant_values =
    map(c => head(tail(c)), primitive_constants);
	  </JAVASCRIPT_RUN>
	</SNIPPET>

	<SNIPPET PAGE="382" HIDE="yes">
	  <NAME>primitive_constants_example</NAME>
	  <JAVASCRIPT>
primitive_constants;
	  </JAVASCRIPT>
	  <JAVASCRIPT_TEST>
length(primitive_constants);
	  </JAVASCRIPT_TEST>
	</SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  
  <TEXT>
    To apply a 
    <SPLITINLINE>
      <SCHEME>primitive procedure,</SCHEME>
      <JAVASCRIPT>primitive function,</JAVASCRIPT>
    </SPLITINLINE>
    we simply apply the implementation
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to the arguments, using the underlying
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system:<FOOTNOTE>
    <SPLIT>
      <SCHEME>    
	<SCHEMEINLINE>Apply-in-underlying-scheme</SCHEMEINLINE> is the
	<SCHEMEINLINE>apply</SCHEMEINLINE> procedure we have used in earlier
	chapters.  The metacircular evaluator<APOS/>s
	<SCHEMEINLINE>apply</SCHEMEINLINE> procedure
	(section<SPACE/><REF NAME="sec:core-of-evaluator"/>) models the	working
	of this primitive.  Having two different things called
	<SCHEMEINLINE>apply</SCHEMEINLINE> leads to a technical problem in
	running the metacircular evaluator, because defining the metacircular
	evaluator<APOS/>s <SCHEMEINLINE>apply</SCHEMEINLINE> will mask the
	definition of the primitive.  One way around this is to	rename the
	metacircular <SCHEMEINLINE>apply</SCHEMEINLINE> to avoid conflict with
	the name of the primitive procedure. We have assumed instead that we
	have saved a reference to the underlying
	<SCHEMEINLINE>apply</SCHEMEINLINE> by doing
	<SNIPPET>
	  <NAME>apply_in_underlying</NAME>
	  <SCHEME>
(define apply-in-underlying-scheme apply)
	  </SCHEME>
	</SNIPPET>
	before defining the metacircular <SCHEMEINLINE>apply</SCHEMEINLINE>.
	This allows us to access the original version of
	<SCHEMEINLINE>apply</SCHEMEINLINE> under a different name.
      </SCHEME>
      <JAVASCRIPT>
	<LABEL NAME="foot:vector-array"/>
        JavaScript<APOS/>s <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE> method 
	expects the function arguments in a <EM>vector</EM>. (Vectors
	are called <QUOTE>arrays</QUOTE> in JavaScript.)
	Thus, the <JAVASCRIPTINLINE>arglist</JAVASCRIPTINLINE> is transformed into 
        a
	<INDEX>vector (data structure)<SUBINDEX><ORDER>arguments</ORDER>for arguments of <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE></SUBINDEX></INDEX>
	vector<EMDASH/>here using a while
	loop (see exercise<SPACE/><REF NAME="ex:while_loop"/>):
	<SNIPPET PAGE="382"  EVAL="no" LATEX="yes">
	  <INDEX><DECLARATION>apply_in_underlying_javascript</DECLARATION></INDEX>
	  <INDEX><DECLARATION>apply</DECLARATION> (primitive method)</INDEX>
	  <INDEX><PRIMITIVE/><SUBINDEX><DECLARATION>apply</DECLARATION><ECMA>apply</ECMA></SUBINDEX></INDEX>
	  <NAME>apply_in_underlying</NAME>
	  <JAVASCRIPT>
function apply_in_underlying_javascript(prim, arglist) {
    const arg_vector = [];               // empty vector
    let i = 0;
    while (!is_null(arglist)) {
        arg_vector[i] = head(arglist);   // store value at index $\texttt{i}$
        i = i + 1;
        arglist = tail(arglist);
    }
    return prim.apply(prim, arg_vector); // $\texttt{apply}$ is accessed via $\texttt{prim}$
}
	  </JAVASCRIPT>
	</SNIPPET>
	We also made use of
	<JAVASCRIPTINLINE>apply_in_underlying_javascript</JAVASCRIPTINLINE> in
	section<SPACE/><REF NAME="sec:data-directed"/>
	to declare the function
	<JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLIT></FOOTNOTE>
    <SNIPPET PAGE="382">
      <INDEX><DECLARATION>apply_primitive_function</DECLARATION></INDEX> 
      <NAME>apply_primitive_procedure</NAME>
      <EXAMPLE>apply_primitive_procedure_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))
      </SCHEME>
      <JAVASCRIPT>
function apply_primitive_function(fun, arglist) {
    return apply_in_underlying_javascript(
               primitive_implementation(fun),
               arglist);     
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="382" HIDE="yes">
      <NAME>apply_primitive_procedure_example</NAME>
      <REQUIRES>primitive_procedure</REQUIRES>
      <REQUIRES>primitive_procedure_example</REQUIRES>
      <JAVASCRIPT>
apply_primitive_function(my_primitive_plus, list(1, 2));
      </JAVASCRIPT>
    </SNIPPET>

    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>primitive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><CLOSE/></SUBINDEX></INDEX>
    
  </TEXT>

  <SNIPPET PAGE="383" HIDE="yes">
    <NAME>functions_4_1_4</NAME>
    <REQUIRES>headline_4_1_4</REQUIRES>
    <REQUIRES>true</REQUIRES>
    <REQUIRES>primitive_procedure</REQUIRES>
    <REQUIRES>primitive_procedures</REQUIRES>
    <REQUIRES>primitive_constants</REQUIRES>
    <REQUIRES>apply_primitive_procedure</REQUIRES>
    <REQUIRES>setup_environment</REQUIRES>
    <REQUIRES>the_global_environment</REQUIRES>
    <JAVASCRIPT></JAVASCRIPT>
  </SNIPPET>

  <TEXT>
  <SPLIT>
    <SCHEME>
	For convenience in running the metacircular evaluator, we provide a
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>driver loop</SUBINDEX></INDEX>
	<INDEX>driver loop<SUBINDEX><ORDER>metacircular</ORDER>in metacircular evaluator</SUBINDEX></INDEX>
	<EM>driver loop</EM> that models the read-eval-print loop of the
	underlying Lisp system.  It prints a 
	<INDEX>prompts</INDEX>
	<EM>prompt</EM>, reads an input expression, evaluates this expression in
	the global environment, and prints the result.  We precede each printed
	result by an <EM>output prompt</EM> so as to distinguish the value of
	the expression from other output that may be printed.<FOOTNOTE>The
	primitive procedure
	<INDEX><DECLARATION>read</DECLARATION></INDEX>
	<INDEX><DECLARATION>primitive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</DECLARATION><SUBINDEX><ORDER>read</ORDER><SCHEMEINLINE>read</SCHEMEINLINE></SUBINDEX></INDEX>
	<SCHEMEINLINE>read</SCHEMEINLINE> waits for input from the user, and
	returns the next complete expression that is typed. For example, if the
	user types <SCHEMEINLINE>(+ 23 x)</SCHEMEINLINE>,
	<SCHEMEINLINE>read</SCHEMEINLINE> returns a three-element list
	containing the symbol <SCHEMEINLINE>+</SCHEMEINLINE>, the number 23, and
	the symbol <SCHEMEINLINE>x</SCHEMEINLINE>.
	<INDEX><USE>'</USE> (single quote)<SUBINDEX><ORDER>read</ORDER><SCHEMEINLINE>read</SCHEMEINLINE> and</SUBINDEX></INDEX>
	<INDEX><DECLARATION>quote</DECLARATION><SUBINDEX><ORDER>read</ORDER><SCHEMEINLINE>read</SCHEMEINLINE> and</SUBINDEX></INDEX>
	If the user types <SCHEMEINLINE>'x</SCHEMEINLINE>,
	<SCHEMEINLINE>read</SCHEMEINLINE> returns a two-element list containing
	the symbol <SCHEMEINLINE>quote</SCHEMEINLINE> and the symbol
	<SCHEMEINLINE>x</SCHEMEINLINE>.</FOOTNOTE>
	<SNIPPET PAGE="383">
	  <NAME>driver_loop</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <REQUIRES>user_print</REQUIRES>
	  <EXAMPLE>driver_loop_example</EXAMPLE>
	  <SCHEME>
(define input-prompt ";;; M-Eval input:\n")
(define output-prompt ";;; M-Eval value:\n")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (if (null? input)
      'EVALUATOR-TERMINATED
      (let ((output (eval input the-global-environment)))
        (announce-output output-prompt)
        (user-print output)
        (driver-loop)))))

(define (prompt-for-input string)
  (newline) (display string))

(define (announce-output string)
  (newline) (display string))
	  </SCHEME>
	</SNIPPET>
    </SCHEME>
    <JAVASCRIPT>
	For convenience in running the metacircular evaluator, we provide a
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX>driver loop</SUBINDEX></INDEX>
	<INDEX>driver loop<SUBINDEX><ORDER>metacircular</ORDER>in metacircular evaluator</SUBINDEX></INDEX>
	<EM>driver loop</EM> that models the read-evaluate-print loop of 
	the underlying JavaScript system. It prints a 
	<INDEX>prompts</INDEX>
	<INDEX>prompts<SUBINDEX>metacircular evaluator</SUBINDEX></INDEX>
	<EM>prompt</EM> and reads an input program as a string.
	It transforms the program string
	into a tagged-list representation of the statement as described in
	section<SPACE/><REF NAME="sec:representing-expressions"/><EMDASH/>a
	process called parsing and accomplished by the primitive function
	<JAVASCRIPTINLINE>parse</JAVASCRIPTINLINE>.
	We precede each printed result by
	an <EM>output prompt</EM> so as to distinguish the value of the
	program from other output that may be printed. The driver loop gets
	the program environment of the previous program as argument.
	Following section<SPACE/><REF NAME="sec:env-internal-def"/>, the
	new program environment is constructed by extending the given
	environment with a frame binding the names declared at top level to
	their initial value
	<JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>. The driver
	loop evaluates the program in the new program environment and
	prints the result.
	<SNIPPET PAGE="383">
	  <INDEX><DECLARATION>driver_loop</DECLARATION><SUBINDEX>for metacircular evaluator</SUBINDEX></INDEX>
	  <NAME>driver_loop</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <REQUIRES>user_print</REQUIRES>
	  <REQUIRES>user_read</REQUIRES>
	  <EXAMPLE>driver_loop_example</EXAMPLE>
	  <JAVASCRIPT>
const input_prompt = "M-evaluate input: ";
const output_prompt = "M-evaluate value: ";

function driver_loop(env) {
   const input = user_read(input_prompt);
   if (is_null(input)) {
       display("evaluator terminated");
   } else {
       const program = parse(input);
       const locals = scan_out_declarations(program);
       const unassigneds = list_of_unassigned(locals);
       const program_env = extend_environment(locals, unassigneds, env);
       const output = evaluate(program, program_env);
       user_print(output_prompt, output);
       return driver_loop(program_env);
   }
}
	  </JAVASCRIPT>
	  <JAVASCRIPT_RUN>
const input_prompt = "M-evaluate input: ";
const output_prompt = "M-evaluate value: ";

function driver_loop(env) {
    const input = user_read(input_prompt);
    if (is_null(input)) {
        display("--- evaluator terminated ---", "");
    } else {
        display("----------------------------",
                input_prompt + "\n" + input + "\n");
        const program = parse(input);
        const locals = scan_out_declarations(program);
        const unassigneds = list_of_unassigned(locals);
        const program_env = extend_environment(
                                locals, unassigneds, env);
        const output = evaluate(program, program_env);
        user_print(output_prompt, output);
        return driver_loop(program_env);
    }
}
"metacircular evaluator loaded";
	  </JAVASCRIPT_RUN>
	</SNIPPET>
    </JAVASCRIPT>
  </SPLIT>
    <SPLIT>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
	We use JavaScript's <JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE> function
	to request and read the input string from the user:
	<SNIPPET PAGE="383">
	  <INDEX><DECLARATION>user_read</DECLARATION></INDEX>
	  <NAME>user_read</NAME>
	  <JAVASCRIPT>
function user_read(prompt_string) {
    return prompt(prompt_string);
}
	  </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
    The function
    <INDEX><DECLARATION>prompt</DECLARATION> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><DECLARATION>prompt</DECLARATION> (\textit{ns})</SUBINDEX></INDEX>
    <JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE> returns
    <JAVASCRIPTINLINE>null</JAVASCRIPTINLINE> when the user cancels the
    input. We use a special printing
    <SPLITINLINE>
      <SCHEME>procedure <SCHEMEINLINE>user-print</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>function <JAVASCRIPTINLINE>user_print</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    to avoid printing the environment part of a compound
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which may be a very long list (or may even contain cycles).
    <SNIPPET PAGE="383">
      <INDEX><DECLARATION>user_print</DECLARATION></INDEX>
      <NAME>user_print</NAME>
      <EXAMPLE>user_print_example</EXAMPLE>
      <SCHEME>
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '&lt;-procedure-env-&gt;))
      (display object)))
      </SCHEME>
      <JAVASCRIPT>
function user_print(string, object) {
    function prepare(object) {
        return is_compound_function(object)
               ? "&lt; compound-function &gt;"
               : is_primitive_function(object)
               ? "&lt; primitive-function &gt;"
               : is_pair(object)
               ? pair(prepare(head(object)),
                      prepare(tail(object)))
               : object;
    }
    display(string + " " + stringify(prepare(object)));
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function user_print(prompt_string, object) {
    function to_string(object) {
        return is_compound_function(object)
               ? "&lt;compound-function&gt;"
               : is_primitive_function(object)
               ? "&lt;primitive-function&gt;"
               : is_pair(object)
               ? "[" + to_string(head(object)) + ", "
                     + to_string(tail(object)) + "]"
               : stringify(object);
    }
    display("----------------------------",
            prompt_string + "\n" + to_string(object) + "\n");
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET PAGE="383" HIDE="yes">
      <NAME>user_print_example</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <JAVASCRIPT> 
user_print("output: ", 
           evaluate(parse("1 + 2;"),
                    the_global_environment)); 
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Now all we need to do to run the evaluator is to initialize the global
    environment and start the driver loop.  Here is a sample interaction:
    <SNIPPET PAGE="383-384">
      <NAME>driver_loop_example</NAME>
      <REQUIRES>driver_loop</REQUIRES>
      <SCHEME>
(define the-global-environment (setup-environment))
(driver-loop)
      </SCHEME>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
driver_loop(the_global_environment);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
driver_loop(the_global_environment);
      </JAVASCRIPT_RUN>
    </SNIPPET>

    <SNIPPET>
      <NAME>meta_append</NAME>
      <REQUIRES>driver_loop</REQUIRES>
      <REQUIRES>driver_loop_example</REQUIRES>
      <SCHEMEPROMPT>
;;; M-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(define (append x y)
   (if (null? x)
       y
       (cons (car x)
         (append (cdr x) y))))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; M-Eval value:
ok
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
M-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
function append(xs, ys) { 
    return is_null(xs)
           ? ys
           : pair(head(xs), append(tail(xs), ys)); 
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
// press "Run" to start the driver loop
// M-evaluate input:
// function append(xs, ys) { return is_null(xs) ? ys : pair(head(xs), append(tail(xs), ys)); }
// M-evaluate value:
// undefined

// M-evaluate input:
// append(list("a", "b", "c"), list("d", "e", "f"));
// M-evaluate value:
// ["a", ["b", ["c", ["d", ["e", ["f", null]]]]]]
      </JAVASCRIPT_RUN>
      <JAVASCRIPT_OUTPUT>
M-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET POSTPADDING="no">
      <NAME>meta_append_example</NAME>
      <REQUIRES>driver_loop</REQUIRES>
      <REQUIRES>driver_loop_example</REQUIRES>
      <SCHEMEPROMPT>
;;; M-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(append '(a b c) '(d e f))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; M-Eval value:
(a b c d e f)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
M-evaluate input:    
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
append(list("a", "b", "c"), list("d", "e", "f"));
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
// press "Run" to start the driver loop
// M-evaluate input:
// function append(xs, ys) { return is_null(xs) ? ys : pair(head(xs), append(tail(xs), ys)); }
// M-evaluate value:
// undefined

// M-evaluate input:
// append(list("a", "b", "c"), list("d", "e", "f"));
// M-evaluate value:
// ["a", ["b", ["c", ["d", ["e", ["f", null]]]]]]
      </JAVASCRIPT_RUN>
      <JAVASCRIPT_OUTPUT>
M-evaluate value: 
["a", ["b", ["c", ["d", ["e", ["f", null]]]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    Eva Lu Ator and Louis Reasoner are each experimenting with the
    metacircular evaluator.  Eva types in the definition of
    <SCHEMEINLINE>map</SCHEMEINLINE>, and runs some test programs that use it.
    They work fine.  Louis, in contrast, has installed the system version of
    <SCHEMEINLINE>map</SCHEMEINLINE> as a primitive for the metacircular
    evaluator.  When he tries it, things go terribly wrong.  Explain why
    Louis<APOS/>s <SCHEMEINLINE>map</SCHEMEINLINE> fails even though
    Eva<APOS/>s works.
    <LABEL NAME="ex:mceval-map"/>
  </EXERCISE>

  <INDEX>metacircular evaluator for JavaScript<SUBINDEX>running<CLOSE/></SUBINDEX></INDEX>

</SUBSECTION>
