<SUBSECTION>
  <LABEL NAME="sec:substitution-model"></LABEL>
  <SPLITINLINE>
    <SCHEME>
      <INDEX>substitution model of procedure application<OPEN/></INDEX>
    </SCHEME>
    <PYTHON>
      <INDEX>substitution model of function application<OPEN/></INDEX>
    </PYTHON>
  </SPLITINLINE>
  <NAME>
    The Substitution Model for 
    <SPLITINLINE>
      <SCHEME>
        Procedure
      </SCHEME>
      <PYTHON>
        Function
      </PYTHON>
    </SPLITINLINE>
    Application
  </NAME>

  <TEXT>
    <SPLIT>
      <SCHEME>
        To evaluate a combination whose operator names a compound procedure, the
        interpreter follows much the same process as for combinations whose
        operators name primitive procedures, which we described in
        section<SPACE/><REF NAME="sec:evaluating-combinations"/>.
      </SCHEME>
      <PYTHON>
        To evaluate a function application, the interpreter follows the process
	described in section<SPACE/><REF NAME="sec:compound-procedures"/>.
      </PYTHON>
    </SPLIT>
    That is, the interpreter evaluates the elements of the
    <SPLITINLINE>
      <SCHEME>
	combination
      </SCHEME>
      <PYTHON>
        application
      </PYTHON>
    </SPLITINLINE>
    and	applies the
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    (which is the value of the
    <SPLITINLINE>
      <SCHEME>
	operator of the combination)
      </SCHEME>
      <PYTHON>
	function expression of the application)
      </PYTHON>
    </SPLITINLINE>
    to the arguments (which are the values of the
    <SPLITINLINE>
      <SCHEME>
	operands of the combination).
      </SCHEME>
      <PYTHON>
	argument expressions of the application).
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
    We can assume that the mechanism for applying primitive
	procedures
    to arguments is built into the interpreter.
      </SCHEME>
      <PYTHON>
	We can assume that the application of primitive
	functions is handled by the interpreter or libraries. 
      </PYTHON>
    </SPLITINLINE>
    For compound
    <SPLITINLINE>
      <SCHEME>
	procedures,
      </SCHEME>
      <PYTHON>
	functions,
      </PYTHON>
    </SPLITINLINE>
    the application process is as follows:
    <UL>
      <LI>
        To apply a compound
	<SPLITINLINE>
	  <SCHEME>
	    procedure
	  </SCHEME>
	  <PYTHON>
	    function
	  </PYTHON>
	</SPLITINLINE>
	to arguments, 
	<SPLITINLINE>
	  <SCHEME>
	    evaluate the body of the procedure
	  </SCHEME>
	  <PYTHON>
	    evaluate the return expression of the function
	  </PYTHON>
	</SPLITINLINE>
	with each
	<SPLITINLINE>
	  <SCHEME>formal</SCHEME>
	</SPLITINLINE>
	parameter replaced by the corresponding argument.<FOOTNOTE>If the
	body of the function is a sequence of statements, the
	body is evaluated with the parameters replaced, and the value of the
	application is the value of the return expression of the first
	return statement encountered.</FOOTNOTE>
      </LI>
    </UL>
    To illustrate this process, let<APOS/>s evaluate the
    <SPLITINLINE>
      <SCHEME>
	combination
      </SCHEME>
      <PYTHON>
	application
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET>
      <NAME>f_of_five</NAME>
      <REQUIRES>f</REQUIRES>
      <EXPECTED>136</EXPECTED>
      <SCHEME>
(f 5)
      </SCHEME>
      <PYTHON>
f(5)	
      </PYTHON>
      <PYTHON_RUN>
f(5);
      </PYTHON_RUN>
    </SNIPPET>
    where <SCHEMEINLINE>f</SCHEMEINLINE> is the
    <SPLITINLINE>
      <SCHEME>
	procedure defined
      </SCHEME>
      <PYTHON>
	function declared
      </PYTHON>
    </SPLITINLINE>
    in section<SPACE/><REF NAME="sec:compound-procedures"/>.
    We begin by retrieving the
    <SPLITINLINE>
      <SCHEME>
	body
      </SCHEME>
      <PYTHON>
	return expression
      </PYTHON>
    </SPLITINLINE>
    of <SCHEMEINLINE>f</SCHEMEINLINE>:
    <SNIPPET EVAL="no">
      <REQUIRES>f</REQUIRES>
      <SCHEME>
(sum-of-squares (+ a 1) (* a 2))
      </SCHEME>
      <PYTHON>
sum_of_squares(a + 1, a * 2)
      </PYTHON>
    </SNIPPET>
    Then we replace the parameter <SCHEMEINLINE>a</SCHEMEINLINE> 
    by the argument 5:
    <SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))
      </SCHEME>
      <PYTHON>
sum_of_squares(5 + 1, 5 * 2)
      </PYTHON>
    </SNIPPET>
    Thus the problem reduces to the evaluation of
    <SPLITINLINE>
      <SCHEME>
	a combination
      </SCHEME>
      <PYTHON>
	an application
      </PYTHON>
    </SPLITINLINE>
    with two
    <SPLITINLINE>
      <SCHEME>
	operands
      </SCHEME>
      <PYTHON>
	arguments
      </PYTHON>
    </SPLITINLINE>
    and 
    <SPLITINLINE>
      <SCHEME>
	an operator <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>.  
      </SCHEME>
      <PYTHON>
	a function expression
	<PYTHONINLINE>sum_of_squares</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Evaluating this
    <SPLITINLINE>
      <SCHEME>
	combination
      </SCHEME>
      <PYTHON>
	application
      </PYTHON>
    </SPLITINLINE>
    involves three subproblems.  We must evaluate the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <PYTHON>function expression</PYTHON>
    </SPLITINLINE>
    to get the
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    to be applied, and we must evaluate the
    <SPLITINLINE>
      <SCHEME>
	operands 
      </SCHEME>
      <PYTHON>
	argument expressions
      </PYTHON>
    </SPLITINLINE>
    to get the arguments. Now
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 + 1</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    produces 6 and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 * 2</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    produces 10, so we must apply the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>sum-of-squares</SCHEMEINLINE> procedure
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>sum_of_squares</PYTHONINLINE> function
      </PYTHON>
    </SPLITINLINE>
    to 6 and 10. These values are substituted for the
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE>
    parameters <SCHEMEINLINE>x</SCHEMEINLINE> and 
    <SCHEMEINLINE>y</SCHEMEINLINE> in the body of 
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>sum_of_squares</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    reducing the expression to
    <SNIPPET EVAL="no">
      <SCHEME>
(+ (square 6) (square 10))
      </SCHEME>
      <PYTHON>
square(6) + square(10)
      </PYTHON>
    </SNIPPET>
    If we use the
    <SPLITINLINE>
      <SCHEME>
	definition
      </SCHEME>
      <PYTHON>
	declaration
      </PYTHON>
    </SPLITINLINE>
    of <SCHEMEINLINE>square</SCHEMEINLINE>, this reduces to
    <SNIPPET EVAL="no">
      <SCHEME>
(+ (* 6 6) (* 10 10))
      </SCHEME>
      <PYTHON>
(6 * 6) + (10 * 10)
      </PYTHON>
    </SNIPPET>
    which reduces by multiplication to
    <SNIPPET EVAL="no">
      <SCHEME>
(+ 36 100)
      </SCHEME>
      <PYTHON>
36 + 100
      </PYTHON>
    </SNIPPET>
    and finally to
    <SNIPPET EVAL="no">
      <SCHEME>
136
      </SCHEME>
      <PYTHON>
136	
      </PYTHON>
    </SNIPPET>
  </TEXT>
  <DO_BREAK_PAGE/>
  <TEXT>
    The process we have just described is called the <EM>substitution
    model</EM> for 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE> 
    application.  It can be taken as a model that
    determines the <QUOTE>meaning</QUOTE> of 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE> 
    application, insofar as the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE> 
    in this chapter are concerned.  However, there are two
    points that should be stressed:
    <UL>
      <LI>
        The purpose of the substitution is to help us think about
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
        </SPLITINLINE> 
        application, not to provide a description of how the interpreter
	really works.  Typical interpreters do not evaluate
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
        </SPLITINLINE>  
        applications by manipulating the text of a 
        <SPLITINLINE>
	  <SCHEME>procedure to substitute values for the formal</SCHEME>
	  <PYTHON>function to substitute values for the</PYTHON>
        </SPLITINLINE> 
        parameters. In practice, the <QUOTE>substitution</QUOTE> is
	accomplished by using a local environment for the
        <SPLITINLINE>
	  <SCHEME>formal
	  </SCHEME>
	  <PYTHON>
	  </PYTHON>
	</SPLITINLINE>
	parameters. We will discuss this more fully in chapters 3 and
        4 when we examine the implementation of an interpreter in detail.
      </LI>
      <LI>
        Over the course of this book, we will present a sequence of
	increasingly elaborate models of how interpreters work, culminating
        with a complete implementation of an interpreter and compiler in
        chapter<SPACE/><REF NAME="chap:reg"></REF>.  The substitution model is only the first of
	these models<EMDASH/>a way to get started thinking formally
	about the evaluation process.  In general, when 
        <INDEX>modeling<SUBINDEX>in science and engineering</SUBINDEX></INDEX>
        modeling phenomena in science and engineering, we begin with
	simplified, incomplete models. As we examine things in greater detail,
	these simple models become inadequate and must be replaced by more
	refined models. The substitution model is no exception.  In particular,
	when we address in chapter<SPACE/><REF NAME="chap:state"></REF> the use of
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <PYTHON>functions</PYTHON>
        </SPLITINLINE> 
        with <QUOTE>mutable data,</QUOTE> we will see that the substitution
	model breaks down and must be replaced by a more complicated model of
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
        </SPLITINLINE> 
        application.<FOOTNOTE>Despite the
        simplicity of the substitution idea, it turns out to be
	surprisingly complicated to give a rigorous mathematical
	definition of the substitution process.  The problem arises
	from the possibility of confusion between the names used for the 
        <SPLITINLINE>
	  <SCHEME>formal parameters of a procedure</SCHEME>
	  <PYTHON>parameters of a function</PYTHON>
        </SPLITINLINE> 
        and the (possibly identical) names used in the expressions
        to which the 
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
        </SPLITINLINE> 
        may be applied.  Indeed, there is a long
        history of erroneous definitions of <EM>substitution</EM> in the
        literature of logic and programming semantics.  
        <INDEX>Stoy, Joseph E.</INDEX>
        See <CITATION>Stoy 1977</CITATION> for a
        careful discussion of substitution.</FOOTNOTE>
      </LI>
    </UL>
  </TEXT>

  <SUBHEADING> 
    <NAME>Applicative order versus normal order</NAME>
  </SUBHEADING>

  <TEXT>
    According to the description of evaluation given in
    <SPLITINLINE>
      <SCHEME>
	section<SPACE/><REF NAME="sec:evaluating-combinations"/>,
      </SCHEME>
      <PYTHON>
	section<SPACE/><REF NAME="sec:compound-procedures"/>,
      </PYTHON>
    </SPLITINLINE>
    the interpreter first evaluates the
    <SPLITINLINE>
      <SCHEME>
	operator
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME>
	operands
      </SCHEME>
      <PYTHON>
	argument expressions
      </PYTHON>
    </SPLITINLINE>
    and then applies the resulting
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    to the resulting arguments. This is not the only way to perform evaluation.
    An alternative evaluation model would not evaluate the
    <SPLITINLINE>
      <SCHEME>
	operands
      </SCHEME>
      <PYTHON>
	arguments
      </PYTHON>
    </SPLITINLINE>
    until their values were needed.  Instead it would first substitute
    <SPLITINLINE>
      <SCHEME>
	operand
      </SCHEME>
      <PYTHON>
	argument
      </PYTHON>
    </SPLITINLINE>
    expressions for parameters until it obtained an expression involving
    only 
    <SPLITINLINE>
      <SCHEME>primitive operators,</SCHEME>
      <PYTHON>operators and primitive functions,</PYTHON>
    </SPLITINLINE>
    and would then perform the evaluation.  If we
    used this method, the evaluation of
    <SNIPPET EVAL="no">
      <SCHEME>
(f 5)
      </SCHEME>
      <PYTHON>
f(5)
      </PYTHON>
    </SNIPPET>
    would proceed according to the sequence of expansions
    <SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))

(+  (square (+ 5 1))     (square (* 5 2))  )

(+  (* (+ 5 1) (+ 5 1))  (* (* 5 2) (* 5 2)))
      </SCHEME>
      <PYTHON>
sum_of_squares(5 + 1, 5 * 2)

square(5 + 1)     + square(5 * 2)

(5 + 1) * (5 + 1) + (5 * 2) * (5 * 2)
      </PYTHON>
    </SNIPPET>
    followed by the reductions
    <SNIPPET EVAL="no">
      <SCHEME>
(+        (* 6 6)            (* 10 10))

(+          36                  100)

                    136
      </SCHEME>
      <PYTHON>
6    *    6    +    10   *   10

    36         +        100

              136
      </PYTHON>
    </SNIPPET>
    This gives the same answer as our previous evaluation model, but the
    process is different.  In particular, the evaluations of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 + 1</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    and 
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 * 2</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    are each performed twice here, corresponding to the reduction of the
    expression
    <SNIPPET EVAL="no">
      <SCHEME>
(* x x)
      </SCHEME>
      <PYTHON>
x * x
      </PYTHON>
    </SNIPPET>
    with <SCHEMEINLINE>x</SCHEMEINLINE> replaced respectively by
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 + 1</PYTHONINLINE>       
      </PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 * 2</PYTHONINLINE>.      
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    This alternative <QUOTE>fully expand and then reduce</QUOTE>
    evaluation method is known as 
    <INDEX>normal-order evaluation</INDEX>
    <EM>normal-order evaluation</EM>, in contrast to the <QUOTE>evaluate
    the arguments and then apply</QUOTE> method that the interpreter actually
    uses, which is called 
    <INDEX>applicative-order evaluation</INDEX>
    <EM>applicative-order evaluation</EM>.  It can be shown that, for 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    applications that can be modeled using substitution (including all the 
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    in the first two chapters of this book) and that yield legitimate values,
    normal-order and applicative-order evaluation produce the same value.
    (See exercise<SPACE/><REF NAME="ex:normal-order-vs-appl-order-test"/>
    for an instance of an <QUOTE>illegitimate</QUOTE> value where normal-order
    and applicative-order evaluation do not give the same result.)
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	Lisp
        <INDEX>applicative-order evaluation<SUBINDEX><ORDER>Lisp</ORDER>in Lisp</SUBINDEX></INDEX>
        <INDEX>Lisp<SUBINDEX>applicative-order evaluation in</SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
	JavaScript
	<INDEX>applicative-order evaluation<SUBINDEX><ORDER>JavaScript</ORDER>in JavaScript</SUBINDEX></INDEX>
        <INDEX>JavaScript<SUBINDEX>applicative-order evaluation in</SUBINDEX></INDEX>
      </PYTHON>
    </SPLITINLINE>
    uses applicative-order evaluation, partly because of the
    additional efficiency obtained from avoiding multiple evaluations of
    expressions such as those illustrated with
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE> 
	and <SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>5 + 1</PYTHONINLINE> 
	and <PYTHONINLINE>5 * 2</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    above and, more significantly, because normal-order evaluation
    becomes much more complicated to deal with when we leave the realm of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    that can be modeled by substitution.  On the other hand,
    normal-order evaluation can be an extremely valuable tool, and we will
    investigate some of its implications in chapters 3 and 4.<FOOTNOTE>In
    chapter 3 we will introduce <EM>stream processing</EM>, which is a
    way of handling apparently <QUOTE>infinite</QUOTE> data structures
    by incorporating a limited form of normal-order evaluation.  In
    section<SPACE/><REF NAME="sec:lazy-evaluation"/> we will modify the
    <SPLITINLINE><SCHEME>Scheme</SCHEME>
    <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    interpreter to produce a normal-order variant of
    <SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <PYTHON>JavaScript.</PYTHON>
    </SPLITINLINE></FOOTNOTE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>substitution model of procedure application<CLOSE/></INDEX>
      </SCHEME>
      <PYTHON>
	<INDEX>substitution model of function application<CLOSE/></INDEX>
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
</SUBSECTION>
