<CHAPTER>
   <NAME>
    创建抽象 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
  </NAME> 
  <LABEL NAME="chap:fun"></LABEL>
   <HISTORY> 
    % 1997年秋季 添加 tex &apos;\\label&apos; 用于手动引用。
    % 1997年8月26日 修复第三版的排版错误 -- 第45页，第70页
    %
    % 1996年4月15日 修复与之前索引比较时发现的排版错误 -- 必须重新打印第60页
    % 1996年4月13日-4月15日 索引 [在章节最终打印后]
    % 1996年4月11日 根据<QUOTE>最终</QUOTE>检查和拼写检查进行修正和调整
    % 1996年4月9日 根据与之前索引的对比进行微小修正
    % 1996年4月6日-... Julie 索引修正 (以及4月8日更改&apos;ns&apos;)
    % 1996年4月5日 Hal 索引
    % 1996年3月29日, 4月3日 Julie: 索引修正
    % 1996年3月18日 继续页码，其他索引的细微更改
    % 1996年3月14日 &amp; 3月16日 已分页至第64页 (查找 \\pagekludge)
    % 1996年3月10日-3月14日 细微更改/修正；索引；移动练习
    % 1996年3月9日 修正某些练习部分的空格
    % 1996年3月6日 修正排版错误
    % 1996年3月5日 细微排版修正
    % 1996年3月4日 编辑一等过程的脚注以适应 PSZ；修复小错误
    % 1996年2月26日至3月1日 修复一些坏的换行
    % 1996年2月24日 在 {lisp} 后冲洗 \\noindent，通过关闭空格 %
    % 1996年2月24日 修复 GCD-简化方程的格式
    % 1996年2月23日 使用新的 smallequation 宏修复排版
    % 1996年2月22日 epigraph的新规范
    % 1996年2月21日 修复绝对值定义的格式
    % 1996年2月20日 修复箭头的绘制方式
    % 1996年2月19日 更改 exp-iter -&gt; expt-iter，fast-exp -&gt; fast-expt
    % 1996年2月19日 修复引用中的 ()
    % 1996年2月19日 修复 et al.
  </HISTORY> 

   <EPIGRAPH>
    思维的行为，其中它对简单思想施加其能力，
    主要有这三种：1. 将几个简单思想结合成一个复合思想，从而形成所有复杂思想。 2. 第二种是
    将两个思想，无论是简单还是复杂，放在一起，并将它们相邻摆放，以便同时观察它们，而不将其合并为一个，从中获取所有关系的思想。
    3. 第三种是将它们与在其实际存在中伴随它们的所有其他思想分开：这被称为抽象，从而形成所有
    一般思想。
    <ATTRIBUTION>
      <AUTHOR>约翰·洛克</AUTHOR> 
      <TITLE>关于人类理解的论文</TITLE>
      <INDEX>洛克，约翰</INDEX>
      <DATE>1690</DATE>
    </ATTRIBUTION>
  </EPIGRAPH> 

   <CHAPTERCONTENT></CHAPTERCONTENT> 

   <TEXT>
    <NOINDENT></NOINDENT>
    我们即将研究一个
    <EM>计算过程</EM>。
    <INDEX>过程</INDEX>
    <INDEX>计算过程</INDEX>
    计算过程是栖息在计算机中的抽象存在。
    随着它们的发展，过程操作其他称为
    <EM>数据</EM>的抽象事物。
    <INDEX>数据</INDEX>
    过程的发展由一组称为
    <INDEX>程序</INDEX>
    <EM>程序</EM>的规则模式所引导。
    人们创建程序来指导过程。
    实际上，我们用我们的咒语召唤计算机的灵魂。
  </TEXT> 

   <TEXT>
    计算过程确实很像魔术师对灵魂的想法。 它无法被看到或触摸。 它根本不由物质构成。 然而，它是非常真实的。 它可以执行智力工作。 它可以回答问题。 它可以通过在银行发放资金或通过控制工厂中的机器人臂来影响世界。 我们用来召唤过程的程序就像魔术师的咒语。 它们是由神秘和深奥的
    <EM>编程语言</EM>
    <INDEX>编程语言</INDEX>
    中的符号表达式巧妙地组合而成，规定了我们希望我们的过程执行的任务。
  </TEXT> 

   <TEXT>
    在一台正常工作的计算机中，计算过程精确且准确地执行程序。因此，像魔术师的学徒一样，初学的程序员必须学习理解和预见他们施法的后果。即使是小错误
    <SPLITINLINE>
      
    （通常称为 <INDEX>错误</INDEX> <EM>错误</EM> 或 <INDEX>故障</INDEX> <EM>故障</EM>）
      
      <JAVASCRIPT>
    （通常称为 <INDEX>错误</INDEX> <EM>错误</EM>）
      </JAVASCRIPT>
    </SPLITINLINE>
    在程序中也可能带来复杂且意想不到的后果。
  </TEXT> 

   <TEXT>
    幸运的是，学习编程远比学习魔法要安全得多，因为我们接触的“灵魂”以安全的方式被方便地包含在内。然而，现实世界中的编程需要小心、专业知识和智慧。例如，计算机辅助设计程序中的一个小错误可能导致飞机或大坝的灾难性坍塌，或工业机器人自我毁灭。
  </TEXT> 

   <TEXT>
    大师级的软件工程师能够组织程序，以便他们可以合理地确定生成的过程将执行预期的任务。 他们能够预见系统的行为。 他们知道如何构建程序，以便不可预见的问题不会导致灾难性的后果，并且当问题出现时，他们能够
    <INDEX>调试</INDEX>
    <EM>调试</EM>
    他们的程序。 设计良好的计算系统，像设计良好的汽车或核反应堆一样，采用模块化的方式构建，以便部件可以单独构造、替换和调试。
  </TEXT> 

   <SPLIT>
    
      <SUBHEADING> 
        <NAME>在 Lisp 中编程</NAME>
      </SUBHEADING>
    
    <JAVASCRIPT>
      <SUBHEADING>
        <NAME>在 JavaScript 中编程</NAME>
      </SUBHEADING>
    </JAVASCRIPT>
  </SPLIT> 

  <SPLIT>
    <SCHEME>
      <TEXT>
        We need an appropriate language for describing processes, and we will
        use for this purpose the programming language Lisp.  Just as our
        everyday thoughts are usually expressed in our natural language (such
        as English, Swedish, or German), and descriptions of quantitative
        phenomena are expressed with mathematical notations, our procedural
        thoughts will be expressed in Lisp. 
        <INDEX>Lisp<SUBINDEX>history of</SUBINDEX></INDEX>
        Lisp was invented in the late
        1950s as a formalism for reasoning about the use of certain kinds of
        logical expressions, called 
        <EM>recursion equations</EM>, as a model for
        computation.  The language was conceived by 
        <INDEX>McCarthy, John</INDEX>
        John McCarthy and is based
        on his paper <QUOTE>Recursive Functions of Symbolic Expressions and Their
        Computation by Machine</QUOTE> (<CITATION>McCarthy 1960</CITATION>).
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
        我们需要一种适合描述过程的语言，为此我们将使用编程语言 JavaScript。 就像我们日常思维通常用我们的自然语言（如英语、瑞典语或汉语）表达，量化现象的描述则用数学符号表示一样，我们的过程性思维将用 JavaScript 表达。
        <INDEX>JavaScript<SUBINDEX>历史</SUBINDEX></INDEX>
        JavaScript 于 1995 年开发，作为一种编程语言，用于通过嵌入网页的脚本控制万维网浏览器的行为。
        该语言由 
        <INDEX>Eich, Brendan</INDEX>
        <INDEX>Mocha</INDEX>
        Brendan Eich 构想，最初命名为 <EM>Mocha</EM>，后来改名为 <EM>LiveScript</EM>，最终更名为 JavaScript。
        <INDEX>Oracle Corporation</INDEX>
        名称 <QUOTE>JavaScript</QUOTE> 是 Oracle Corporation 的商标。
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>

  <SPLIT>
    <SCHEME>
      <TEXT>
        Despite its inception as a mathematical formalism, Lisp is a practical
        programming language.  A Lisp 
        <EM>interpreter</EM>
        is a machine that
        carries out processes described in the Lisp language.  The first Lisp
        interpreter was implemented by 
        <INDEX>McCarthy, John</INDEX>
        McCarthy with the help of colleagues
        and students in the Artificial Intelligence Group of the
        <INDEX>MIT<SUBINDEX>Research Laboratory of Electronics</SUBINDEX></INDEX>
        MIT Research
        Laboratory of Electronics and in the MIT Computation
        Center.<FOOTNOTE>The 
        <EM_NO_INDEX>Lisp 1 Programmer<APOS></APOS>s Manual</EM_NO_INDEX> 
        appeared in
        1960, and the 
        <EM_NO_INDEX>Lisp 1.5 Programmer<APOS></APOS>s Manual</EM_NO_INDEX>
        <INDEX>McCarthy, John</INDEX>
        (<CITATION>McCarthy 1965</CITATION>)
        was published in 1962.  The early history of Lisp is described in
        <CITATION>McCarthy 1978</CITATION>.
      </FOOTNOTE>
      Lisp, whose name is an acronym for
      <INDEX>Lisp<SUBINDEX>acronym for LISt Processing</SUBINDEX></INDEX>
      LISt Processing,
      was designed to provide symbol-manipulating capabilities for
      attacking programming problems such as the symbolic differentiation
      and integration of algebraic expressions.  It included for this
      purpose new data objects known as atoms and lists, which most
      strikingly set it apart from all other languages of the period.
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
        尽管 JavaScript 最初是一种用于脚本编写网页的语言，但 JavaScript 
        <INDEX>解释器</INDEX>
        是一种通用编程语言。 JavaScript 
        <EM>解释器</EM> 是执行用 JavaScript 语言描述的过程的机器。
        <INDEX>Eich, Brendan</INDEX>
        第一个 JavaScript 解释器是由 Eich 在网景通讯公司为网景导航器网页浏览器实现的。
        <INDEX>Netscape Communications Corporation</INDEX>
        <INDEX>Netscape Navigator</INDEX>
        JavaScript 从 
        <INDEX>Self</INDEX>
        <INDEX>Scheme<SUBINDEX><ORDER>JavaScript</ORDER>作为 JavaScript 先驱</SUBINDEX></INDEX>
        Scheme 和 Self 编程语言继承了其核心特性。Scheme 是 Lisp 的一种方言，而 
        <INDEX>Lisp<SUBINDEX>作为 JavaScript 祖先</SUBINDEX></INDEX>
        被用作本书原始版本的编程语言。 从 Scheme，JavaScript 继承了其最基本的设计原则，如 
        词法作用域的一等公民函数和动态类型。
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>

  <SPLIT>
    <SCHEME>
      <TEXT>
        Lisp was not the product of a concerted design effort.  Instead, it
        evolved informally in an experimental manner in response to users<APOS></APOS>
        needs and to pragmatic implementation considerations.  Lisp<APOS></APOS>s
	informal evolution has continued through the years, and the community of
	Lisp users has traditionally resisted attempts to promulgate any
        <QUOTE>official</QUOTE> definition of the language.  This evolution,
	together with the flexibility and elegance of the initial conception,
	has enabled Lisp, which is the second oldest language in widespread use
        today (only 
        <INDEX>Fortran</INDEX>
        Fortran is older), to continually adapt to encompass the
        most modern ideas about program design.  Thus, Lisp is by now a family
        of dialects, which, while sharing most of the original features, may
        differ from one another in significant ways.  The dialect of Lisp used
        in this book is called 
        <INDEX>Scheme</INDEX>
	<INDEX>Lisp dialects<SUBINDEX>Scheme</SUBINDEX></INDEX>
        Scheme.<FOOTNOTE>The two dialects in which most
        major Lisp programs of the 1970s were written are 
        <INDEX>MacLisp</INDEX>
	<INDEX>Lisp dialects<SUBINDEX>MacLisp</SUBINDEX></INDEX>
        MacLisp 
        <INDEX>Moon, David A.</INDEX>
        (<CITATION>Moon 1978</CITATION>;
        <INDEX>Pitman, Kent M.</INDEX>
        <CITATION>Pitman 1983</CITATION>), developed at the 
        <INDEX>MIT<SUBINDEX>Project MAC</SUBINDEX></INDEX>
        MIT Project MAC, and 
        <INDEX>Interlisp</INDEX>
	<INDEX>Lisp dialects<SUBINDEX>Interlisp</SUBINDEX></INDEX>
        Interlisp
        <INDEX>Teitelman, Warren</INDEX>
        (<CITATION>Teitelman 1974</CITATION>), developed at 
        <INDEX>Bolt Beranek and Newman Inc.</INDEX>
        Bolt Beranek and Newman Inc.<SPACE></SPACE>and the
        <INDEX>Xerox Palo Alto Research Center</INDEX>
        Xerox Palo Alto Research Center.  
        <INDEX>Portable Standard Lisp</INDEX>
        <INDEX>Lisp dialects<SUBINDEX>Portable Standard Lisp</SUBINDEX></INDEX>
        Portable Standard Lisp
        <INDEX>Hearn, Anthony C.</INDEX>
        (<CITATION>Hearn 1969</CITATION>;
        <INDEX>Griss, Martin Lewis</INDEX>
        <CITATION>Griss 1981</CITATION>) 
        was a Lisp dialect designed to be easily portable
        between different machines.  MacLisp spawned a number of subdialects,
        such as 
        <INDEX>Franz Lisp</INDEX>
        <INDEX>Lisp dialects<SUBINDEX>Franz Lisp</SUBINDEX></INDEX>
        Franz Lisp, which was developed at the 
        <INDEX>University of California at Berkeley</INDEX>
        University of
        California at Berkeley, and
        <INDEX>Zetalisp</INDEX>
        <INDEX>Lisp dialects<SUBINDEX>Zetalisp</SUBINDEX></INDEX>
        Zetalisp (<CITATION>Moon 1981</CITATION>), which was based on a
        special-purpose processor designed at the 
        <INDEX>MIT<SUBINDEX>Artificial Intelligence Laboratory</SUBINDEX></INDEX>
        MIT Artificial Intelligence
        Laboratory to run Lisp very efficiently.  The Lisp dialect used in
        this book, called
        <INDEX>Scheme<SUBINDEX>history of</SUBINDEX></INDEX>
        Scheme (<CITATION>Steele 1975</CITATION>), was invented in 1975 by
        <INDEX>Steele, Guy Lewis Jr.</INDEX>
        <INDEX>Sussman, Gerald Jay</INDEX>
        Guy Lewis Steele Jr.<SPACE></SPACE>and Gerald Jay Sussman of the MIT Artificial
        Intelligence Laboratory and later reimplemented for instructional use
        at MIT.  Scheme became an IEEE standard in 1990 
        (<CITATION>IEEE 1990</CITATION>).  The
        <INDEX>Common Lisp</INDEX>
        <INDEX>Lisp dialects<SUBINDEX>Common Lisp</SUBINDEX></INDEX>
        Common Lisp dialect (<CITATION>Steele 1982</CITATION>, 
        <CITATION>Steele 1990</CITATION>) was developed by the
        Lisp community to combine features from the earlier Lisp dialects
        to make an industrial standard for Lisp.  Common Lisp became an ANSI
        standard in 1994 (<CITATION>ANSI 1994</CITATION>).</FOOTNOTE>
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
	JavaScript 仅在表面上与其命名的 Java 语言相似；Java 和 JavaScript 都使用语言 C 的块结构。与通常采用编译方式转化为低级语言的 Java 和 C 相对，JavaScript 程序最初是由网页浏览器
	<EM>解释</EM>的。
	<INDEX>网页浏览器，解释 JavaScript</INDEX>
	在网景导航器之后，其他网页浏览器也为该语言提供了解释器，包括微软的 Internet Explorer，其 JavaScript 版本被称为
	<EM>JScript</EM>。JavaScript 在控制网页浏览器方面的普及促成了一项标准化工作，最终形成了 
	<EM>ECMAScript</EM>。 
	<INDEX>ECMAScript</INDEX>
	ECMAScript 标准的第一版由 Guy Lewis Steele Jr. 主导，并于 1997 年 6 月完成 
	（<CITATION>ECMA 1997</CITATION>）。第六版，被称为 ECMAScript 2015，由 Allen Wirfs-Brock 主导，并在 2015 年 6 月获得 ECMA 大会的通过 
	（<CITATION>ECMA 2015</CITATION>）。
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	Because of its experimental character and its emphasis on symbol
	manipulation, 
	<INDEX>Lisp<SUBINDEX>Fortran vs.</SUBINDEX></INDEX>
	<INDEX>Lisp<SUBINDEX>efficiency of</SUBINDEX></INDEX>
	<INDEX>efficiency<SUBINDEX>of Lisp</SUBINDEX></INDEX>
	Lisp was at first very inefficient for numerical
	computations, at least in comparison with Fortran.  Over the years,
	however, Lisp compilers have been developed that translate programs
	into machine code that can perform numerical computations reasonably
	efficiently.  And for special applications, Lisp has been used with
	great effectiveness.<FOOTNOTE>One such special application was a
	breakthrough computation of scientific importance<EMDASH></EMDASH>an integration of
	the motion of the 
	<INDEX>Solar System<APOS></APOS>s chaotic dynamics</INDEX>
	<INDEX>chaos in the Solar System</INDEX>
	Solar System that extended previous results by
	nearly two orders of magnitude, and demonstrated that the dynamics of
	the Solar System is chaotic.  This computation was made possible by
	new integration algorithms, a special-purpose compiler, and a
	special-purpose computer all implemented with the aid of software
	tools written in Lisp
	<INDEX>Abelson, Harold</INDEX>
	(<CITATION>Abelson et al.<SPACE></SPACE>1992</CITATION>; 
	<INDEX>Sussman, Gerald Jay</INDEX>
	<INDEX>Wisdom, Jack</INDEX>
	<CITATION>Sussman and Wisdom 1992</CITATION>).
      </FOOTNOTE>
      Although Lisp has not yet overcome its old reputation
      as hopelessly inefficient, Lisp is now used in many applications where
      efficiency is not the central concern.
      <INDEX>Lisp<SUBINDEX>history of</SUBINDEX></INDEX>
      For example, Lisp has become
      a language of choice for operating-system shell languages and for
      extension languages for editors and computer-aided design systems.
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
	嵌入 JavaScript 程序到网页中的做法促使网页浏览器的开发者实现 JavaScript 解释器。随着这些程序变得愈加复杂，解释器在执行它们时变得更加高效，最终使用了诸如即时（JIT）编译之类的复杂实现技术。
	截至撰写本文时（2021 年），大多数 JavaScript 程序嵌入在网页中，并由浏览器解释，但 JavaScript 正日益作为一种通用编程语言使用，利用像 Node.js 这样的系统。
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	If Lisp is not a mainstream language, why are we using it as the
	framework for our discussion of programming?  Because the language
	possesses 
	<INDEX>Lisp<SUBINDEX>unique features of</SUBINDEX></INDEX>
	unique features that make it an excellent medium for
	studying important programming constructs and data structures and for
	relating them to the linguistic features that support them.  The most
	significant of these features is the fact that Lisp descriptions of
	processes, called 
	<INDEX>procedure</INDEX>
	<INDEX>procedure<SUBINDEX><ORDER>data</ORDER>as data</SUBINDEX></INDEX>
	<EM>procedures</EM>, can    
	themselves be represented and manipulated as Lisp data.  The
	importance of this is that there are powerful program-design
	techniques that rely on the ability to blur the traditional
	distinction between <QUOTE>passive</QUOTE> data and <QUOTE>active</QUOTE> 
	processes.  As we
	shall discover, Lisp<APOS></APOS>s flexibility in handling procedures as data
	makes it one of the most convenient languages in existence for
	exploring these techniques.  The ability to represent procedures as
	data also makes Lisp an excellent language for writing programs that
	must manipulate other programs as data, such as the interpreters and
	compilers that support computer languages.  Above and beyond these
	considerations, programming in Lisp is great fun.
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT> 
	<COMMENT>
	  在这里，原作者正确地指出了 Scheme 的同构性，这使得第 4 章和第 5 章中的元编程特别容易。 JavaScript 的改编受益于原版中已包含的第 4.2 节的抽象层。凭借这一抽象层<EMDASH></EMDASH>以及一个附加的解析原语<EMDASH></EMDASH>第 4 章和第 5 章可以在不作根本性更改的情况下进行改编。
	</COMMENT>
	<WEB_ONLY>
	  然而，网页浏览器执行 JavaScript 程序的能力使其成为计算机程序书籍在线版本的理想语言。在网页上点击东西来执行程序自然地体现在 JavaScript 中<EMDASH></EMDASH>毕竟这就是 JavaScript 设计的目的！更根本地，
	</WEB_ONLY>
	ECMAScript 2015 具备一系列特性，使其成为学习重要编程结构和数据结构的优秀媒介，并将它们与支持它们的语言特性联系起来。其
	词法作用域的一等公民函数及其通过 lambda 表达式的语法支持为功能抽象提供了直接而简洁的访问，动态类型允许在整本书中保持与 Scheme 原版接近。除此之外，使用 JavaScript 编程非常有趣。
      </TEXT>
    </JAVASCRIPT> 
   </SPLIT>

   <CHAPTERCONTENT></CHAPTERCONTENT> 

  <!--  Section 1 : The Elements of Programming  -->
  &amp;section1.1;

  <!--  Section 2 : Functions and the Processes They Generate  -->
  &amp;section1.2;

  <!--  Formulating Abstractions with Higher-Order Functions  -->
  &amp;section1.3;

</CHAPTER>
