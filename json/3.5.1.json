[{"id":"/sicpjs/3.5.1","tag":"TITLE","body":"3.5.1  \n    Streams Are Delayed Lists"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    As we saw in\n    section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":",\n    sequences can serve as standard interfaces for combining program\n    modules.  We formulated powerful abstractions for manipulating\n    sequences, such as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filter"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":", that capture a wide variety of\n    operations in a manner that is both succinct and elegant.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Unfortunately, if we represent sequences as lists, this elegance is\n    bought at the price of severe inefficiency with respect to both the\n    time and space required by our computations.\n    When we represent manipulations on sequences as transformations\n    of lists, our programs must construct and copy data structures (which\n    may be huge) at every step of a process.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    To see why this is true, let us compare two programs for computing the\n    sum of all the prime numbers in an interval.  The first program is\n    written in standard iterative style:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.5.1#footnote-1"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":23,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMIh6SHQ2HXW6gB4I9xxUGgKhZJxkGikCjhVhkMjEx7TJGgFls0CNO5LaZiDqc7l6MXivrgqEwniCkgUfiy6YdRmcZms1X7Q7hFUUA1Snka5YMpncY0G7Acrk81TuDRPTwlK06m7hf7HDS4BjE0lK64AdnC2AAHFFlEA","body":"function sum_primes(a, b) {\n    function iter(count, accum) {\n        return count > b\n               ? accum\n               : is_prime(count)\n               ? iter(count + 1, count + accum)\n               : iter(count + 1, accum);\n    }\n    return iter(a, 0);\n} "},{"body":"\n    The second program performs the same computation using the sequence\n    operations of\n    section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKgTgkIiw9isLLmPxZdg2IzcQw0ADu4QAFlQAOasx5FTwlUCMpmgRrsrlLdpNIjGcXuPoQ1hUJyC0Iy6biYmkzjkynUrV0wwM5n7Q5sznc44afHnUqkyHQ2HXW6gB4Ip587ysMhkUlSik8PjhACegm+jTkB0DKrV0da-yjMYTvkMNO44KhMM44VVCejGrJfqpJBp+pu9345bxDFt6Yd3AA7OFsAAOKLKIA","body":"function sum_primes(a, b) {\n    return accumulate((x, y) => x + y,\n                      0,\n                      filter(is_prime, \n                             enumerate_interval(a, b)));\n} "}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    In carrying out the computation, the first program needs to store only\n    the sum being accumulated.  In contrast, the filter in the second\n    program cannot do any testing until \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"enumerate_interval"},{"body":"\n    has constructed a complete list of the numbers in the interval.\n    The filter generates another list, which in turn is passed to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"accumulate"},{"body":" before being collapsed to form\n    a sum.  Such large intermediate storage is not needed by the first program,\n    which we can think of as enumerating the interval incrementally, adding\n    each prime to the sum as it is generated.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The inefficiency in using lists becomes painfully apparent if we use\n    the sequence paradigm to compute the second prime in the interval from\n    10,000 to 1,000,000 by evaluating the expression\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"head(tail(filter(is_prime,\n                 enumerate_interval(10000, 1000000))));"},{"body":"\n    This expression does find the second prime, but the computational overhead\n    is outrageous. We construct a list of almost a million integers, filter\n    this list by testing each element for primality, and then ignore almost\n    all of the result.  In a more traditional programming style, we would\n    interleave the enumeration and the filtering, and stop when we reached\n    the second prime.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Streams are a clever idea that allows one to use sequence\n    manipulations without incurring the costs of manipulating sequences as\n    lists.  With streams we can achieve the best of both worlds: We can\n    formulate programs elegantly as sequence manipulations, while attaining\n    the efficiency of incremental computation.  The basic idea is to arrange\n    to construct a stream only partially, and to pass the partial\n    construction to the program that consumes the stream.  If the consumer\n    attempts to access a part of the stream that has not yet been\n    \n    constructed, the stream will automatically construct just enough more\n    of itself to produce the required part, thus preserving the illusion\n    that the entire stream exists.  In other words, although we will write\n    programs as if we were processing complete sequences, we design our\n    stream implementation to automatically and transparently interleave\n    the construction of the stream with its use.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n\tTo accomplish this, we will construct streams using pairs,\n\twith the first item of the stream in the head of the pair.\n\tHowever, rather than placing the value of the rest of the stream\n        \n\tinto the tail of the pair, we will put there a \"","tag":"#text"},{"body":"promise","tag":"#text"},{"body":"\"\n\tto compute the rest if it is ever requested.\n\tIf we have a data item\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"h"},{"body":" and a stream\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"t"},{"body":", we construct a stream\n\twhose head is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"h"},{"body":" and whose tail is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"t"},{"body":" by evaluating\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(h, () => t)"},{"body":"—the\n\ttail\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"t"},{"body":" of a stream is\n\t\"","tag":"#text"},{"body":"wrapped","tag":"#text"},{"body":"\" in a function of no arguments,\n        \n\tso that its evaluation will be ","tag":"#text"},{"tag":"EM","child":[{"body":"delayed","tag":"#text"}]},{"body":".\n        \n\tThe empty stream is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":", the same as the empty list.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n\tTo access the first data item of a nonempty stream,\n\twe simply select the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" of the pair, as with a list.\n\tBut to access the tail of a stream, we need to evaluate the\n\tdelayed expression.\n\tFor convenience, we define\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9C9qgDYAKJmy4BKUAG9coOaDYUizen0EiWHTuKHiA3LgC++UVt79hAB37MhAFgA0oXaAC8APlDWqtjE5ceoCREAgLi4XpAA","body":"function stream_tail(stream) {\n    return tail(stream)();\n} "},{"body":"\n\tThis selects the tail of the pair and applies the function\n\tfound there to obtain the next pair of the stream\n\t(or\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":" if the tail of the stream\n\tis empty)—in effect,\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"forcing","tag":"#text"}]},{"body":" the function in the\n\ttail of the pair to fulfill its promise.\n        ","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n        We can make and use streams, in just the same way as we can make\n        and use lists, to represent aggregate data arranged in a sequence.  In\n        particular, we can build stream analogs of the list operations from\n        chapter ","tag":"#text"},{"tag":"REF","body":"2","href":"/sicpjs/2"},{"body":", such as  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_ref"},{"body":",\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":", and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":":","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.5.1#footnote-2"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9C9qgDYAKJmy4BKUAG9coOaDYUizen0EiWHTuKHiA3LgC++YuWp1GmrtzYERAGlAlJM+QtZKVT0AF4-oAAZZNxDQAH5QAAsOABMRcWDQ+QAuSzEeWw103n5hBnFHegBaUGx9I0JSSlp6US1uTnYAByECR3zpRPdPeioGbhIiATyEpLcIweGupNSm-mZWoWj2OPyC6bGQ3V8APjT6xpa2-es1EfFy41NqizrrAhpmbg4ySNbSdpcuqgJQIT6BkNzp0xoplKpmERWAY3IZQKwBAxWCCkqYlrF4uVQR5wSceA8ni83qZ2lYeGdMTD5MZjLgyHQmKBOABPbh3Ti+UBzKgLAAsjm2Pj23IWGAFkiFTiBFwMMT6TQE7GZWXqmRZbLJjjK5XpJEZ6vZ3AATJzDYchAAPXagK0AalKjgNZPKhoJz3YryEcoYCqVjtZhqN+iAA","body":"function stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () => stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n} "},{"body":"\n\tThe function\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_for_each"},{"body":" is useful for\n\tviewing streams: ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9C9qgDYAKJmy4BKUAG9coOaDYUizen0EiWHTuKHiA3LgC++MnSahO7AB7cAJlQYAHAewCeoALygAnAeLlqOlB7JxdXblEtEUkZeVB-Slp6EOc3CM0ubioKVmYNABpQEhjZOPkqAlAhB24SIgFhJnESsvlDUFYBBlZQCqr6D0HQAAYW1rKUsKEAcmnCgCI0Jfn9Utb2zu7pNfG5SbchAAsOWw1mg124-fDIzOzcjTEeNUaKcUL6AFpQbFXd4ziAPk13STyyOTyDEKlhs11WxlwphI5k4NwynE8oEc-DyABZCrpPAA+LE4oQYAmSDwkuoNc64EG3ThCVGgrT6IA","body":"function display_stream(s) {\n    return stream_for_each(display, s);\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n\tTo make the stream implementation automatically and transparently\n\tinterleave the construction of a stream with its use, we have arranged\n\tfor the tail\n\tof a stream to be evaluated when it is accessed by the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_tail"},{"body":"\n\tfunction rather than when the stream is constructed by\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".\n\tThis implementation choice is reminiscent of our discussion of rational numbers\n\tin section ","tag":"#text"},{"tag":"REF","body":"2.1.2","href":"/sicpjs/2.1.2"},{"body":", where we saw\n\tthat we can choose to implement rational numbers so that the reduction\n\tof numerator and denominator to lowest terms is performed either at\n        construction time or at selection time.  The two rational-number\n        implementations produce the same data abstraction, but the choice has\n        an effect on efficiency.  There is a similar relationship between\n        streams and ordinary lists.  As a data abstraction, streams are the\n        same as lists.  The difference is the time at which the elements are\n        evaluated.  With ordinary lists, both the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" and the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n        are evaluated at construction time.  With streams, the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":" is evaluated at selection time.\n      ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Streams in action","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n        To see how this data structure behaves, let us analyze the\n        \"","tag":"#text"},{"body":"outrageous","tag":"#text"},{"body":"\" prime computation we saw above, reformulated\n\tin terms of streams:\n\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64LmcViWbiGz1kiiqm2+0nmXyGRncLXa9zgqEwzia6NJsTB42U6m0zj0kiM63cbD-Qv-cIFouF-gV6JAA","body":"head(stream_tail(stream_filter(\n                     is_prime,\n                     stream_enumerate_interval(10000, 1000000)))); "},{"body":"\n        We will see that it does indeed work efficiently.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n        We begin by calling\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":" with\n        the arguments 10,000 and 1,000,000.  The function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":"\n        is the stream analog of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"enumerate_interval"},{"body":"\n        (section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":"):\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":23,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64Q2cUnkynU2mcekkRnW7jYf5h-7hUPhsPRIA","body":"function stream_enumerate_interval(low, high) {\n    return low > high\n           ? null\n           : pair(low,\n                  () => stream_enumerate_interval(low + 1, high)); \n} "},{"body":"\n        and thus the result returned by\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":",\n        formed by the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",\n\tis","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/3.5.1#footnote-3"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64FVq7jYf4+-7hXU-A3Ezik8mU6m0zj0kiM61e33YcLe30+-jRIA","body":"pair(10000, () => stream_enumerate_interval(10001, 1000000)); "},{"body":"\n        That is, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":"\n        returns a stream represented as a pair whose\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n        is 10,000 and whose ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tis a promise to enumerate more of the\n        interval if so requested.  This stream is now filtered for primes,\n        using the stream analog of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filter"},{"body":"\n\tfunction\n        (section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":"):\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":19,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9C9qgDYAKJmy4BKUAG9coOaDYUizen0EiWHTuKHiA3LgC++MnSahO7AB7cAJlQYAHAewCeoALygAnAeLlqOlB7JxdXblEtEUkZeVB-Slp6EOc3CM0ubioKVmYNABpQEhjZOPkqAlAhB24SIgFhJnESsvlDUFYBBlZQCqr6D0HQAAYW1rKUsKEAcmnCgCI0Jfn9Utb2zu7pNfG5SbchAAsOWw1mg124-fDIzOzcjTEeNUaKcUL6AFpQbFXd4ziAPk13STyyOTyDEKlhs11WxkIpESQVuPAIgghQkcbFshVRYzkimU9BqdQajy04h24wA-EV6gJqa0AFygbGsU7HdinfFUy5yOmOfh5Lk8jLafJM-lyXSeAB8jHF3HRAkx7NxirBLwpEmaUrirNRyoxD3VeKV2t5BgRphI5k4N3FnjZwqEGEKso8CqFVDyADYPZIvS7fUIAOyB+X0hrNVa2+3hFUQjmgrSeHZGpMPKxRnMAUlAACZPENhtDHU9ViDUUIHcbVbkU-i9EA","body":"function stream_filter(pred, stream) {\n    return is_null(stream)\n           ? null\n           : pred(head(stream))\n           ? pair(head(stream),\n                  () => stream_filter(pred, stream_tail(stream)))\n           : stream_filter(pred, stream_tail(stream));\n} "},{"body":"\n        The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_filter"},{"body":" tests the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" of the stream (which is 10,000). Since\n\tthis is not prime, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_filter"},{"body":"\n\texamines the tail of its input stream.  The call to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_tail"},{"body":" forces evaluation of the\n\tdelayed ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":",\n\twhich now returns\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64FVq7jYf4+7DhXU-A3Ezik8mU6m0zj0kiM61en3-CLhb0Jn38aJAA","body":"pair(10001, () => stream_enumerate_interval(10002, 1000000)); "},{"body":"\n\tThe function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_filter"},{"body":" now\n\tlooks at the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" of this stream,\n        10,001, sees that this is not prime either, forces another \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_tail"},{"body":", and so on, until \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":" yields\n\tthe prime 10,007, whereupon\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_filter"},{"body":", according to its\n        definition, returns\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":false,"body":"pair(head(stream), \n     () => stream_filter(pred, stream_tail(stream)));"},{"body":"\n        which in this case is\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64FVq7jYf4+gDsmtaup+BuJnFJ5l8hkZ3C1rXBUJhnAD2taHqc3p9AA5kyntUH9USjeTKdTaZx6SRGdavT7-gBOcIZ2v-fit6JAA","body":"pair(10007,\n     () => stream_filter(\n              is_prime,\n              pair(10008,\n                   () => stream_enumerate_interval(10009, 1000000)))); "},{"body":"\n        This result is now passed to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_tail"},{"body":" in our original\n\texpression.  This forces the delayed\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_filter"},{"body":", \n\twhich in turn keeps forcing the delayed\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_enumerate_interval"},{"body":" until it\n\tfinds the next prime, which is 10,009.  Finally, the result passed to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" in our original expression is\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":30,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE64FVq7jYf4+gCcmtaup+BuJnFJ5l8hkZ3C1rXBUJhnAD2taHqc3v+3uTKe1Qf1RKN5Mp1NpnHpJEZ1q9Puw2HCGZ9Pv4zeiQA","body":"pair(10009,\n     () => stream_filter(\n              is_prime,\n              pair(10010,\n                   () => stream_enumerate_interval(10011, 1000000)))); "},{"body":"\n\tThe function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":" returns 10,009, and the\n\tcomputation is complete.  Only as many integers were tested for\n\tprimality as were necessary to find the second prime, and the interval\n\twas enumerated only as far as was necessary to feed the prime filter.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n        In general, we can think of delayed evaluation as \n        \"","tag":"#text"},{"body":"demand-driven","tag":"#text"},{"body":"\" programming, whereby each stage in the\n\tstream process is activated only enough to satisfy the next stage.  What\n\twe have done is to\n        \n        decouple the actual order of events in the computation from the apparent\n\tstructure of our functions. We write functions as if the streams existed\n\t\"","tag":"#text"},{"body":"all at once","tag":"#text"},{"body":"\" when, in reality, the computation is\n\tperformed incrementally, as in traditional programming styles.\n      ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"An optimization","tag":"#text"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n\tWhen we construct stream pairs, we delay the evaluation of their tail\n\texpressions by wrapping these expressions in a function. We force their\n\tevaluation when needed, by applying the function.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\n        This implementation suffices for streams to work as advertised, but\n\tthere is an important optimization that we shall consider where needed.\n\tIn many\tapplications, we end up forcing the same delayed object many\n\ttimes. This can lead to serious inefficiency in recursive programs\n\tinvolving streams.  (See\n\texercise ","tag":"#text"},{"tag":"REF","body":"3.57","href":"/sicpjs/3.5.2#ex-3.57"},{"body":".)\n\tThe solution is to build delayed objects so that the first time they are\n\tforced, they store the value that is computed.  Subsequent forcings will\n\tsimply return the stored value without repeating the computation.  In\n\tother words, we implement the construction of stream pairs as a\n        \n\tmemoized function similar to the one described in\n\texercise ","tag":"#text"},{"tag":"REF","body":"3.27","href":"/sicpjs/3.3.3#ex-3.27"},{"body":". One way to accomplish this\n\tis to use the following function, which takes as argument a function\n        (of no arguments) and returns a memoized version of the function.\n\tThe first time the memoized function is run, it saves the computed\n\tresult.\tOn subsequent evaluations, it simply returns\n\tthe result.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/3.5.1#footnote-4"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMARyIZRXUAFgC+oTI6QysmGztdUE3QACpzk0FhWuUqQwAHcRlVNgAiBmyqV6oyDJqHRQID5PIqO5QDQiBRPlwxt5GsNjtkZrh9iRDowWDR1Cs1hsLnpmKw2AT1kwtgjcI8Xm8PqS8RSiQEEaAQKBDAALGgAd0MoG+v1eaDQn1pT1e7zYTPxq0pWzZJg5YGUNGOoBINGkPP5Qp+dj+4jFnyAA","body":"function memo(fun) {\t    \n    let already_run = false;\n    let result = undefined;\n    return () => {\n               if (!already_run) {\n                   result = fun();\n                   already_run = true;\n                   return result;\n               } else {\n                   return result;\n               }\n           };\n} "}]},{"tag":"TEXT","id":"#p16","child":[{"body":"\n\tWe can make use of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"memo"},{"body":" whenever\n\twe construct a stream pair. For example, instead of \n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9T9gBwAUBADSMAlKADeuUHNBsKRZvSoNuJIgBstghuNnyj8gPyhNOw8aMAuUP3ZVmwwQAsOAEz3jxIq9YC5QUkAXgA+RhYOHj4hUUi2Lm4KR119HwBuXABffDI6JlBOAE9uJkTOUBD7R2cAFjFgqoiHJ0EMRtCIiy1MvIKKItLy6O4AJir-EaTYwQ81fi12YrESsqiucSzcaZ42AkE13fGxbC2djb3WA6PLk9AzrJBQCndzIk4AI1ZmUAxQNSMVw0ADu9AoIKoZFYuGe3zI7CIDFYLzeDC4KI8rCWxVYHlhYBonwAVqxKACGKACDRmNCPC9IdCgA","body":"function stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () => stream_map(f, stream_tail(s)));\n} "},{"body":"\n\twe can define an optimized function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map"},{"body":"\tas\n\tfollows:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":15,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3UaTeoGKgAvdw4AGlBDHl5a70bQKkN1EltxNkvJiIB+UGfxcQ-wgAuUCbGRUeQcNgAC1Kby4XFOALqzFYbACuiCSP6YmWiTWG22u32RxOBHOuNW6goYNel3hXBm+DIdGWjA0FJkDF0ILBEIALOd0cEeeC2BhBYEQr9xPCzLhmSRWQx2StOeoAEy6Woc-FbNjKB6bcQyVTnZXqHUM-A6zTONjmm3q87YK02xQEe0qvEa51WkCgCgwn5EBgAIyY8lAGHuhguUJoAHd6BQE1QyExcP7w2QZEReoGmBdOYWnMbVO5M2AaKGAFZMSgx-Q0eTp5QB1Pppks6QO1VrFBanF99ZbHZ7KgHY7KfWGstmr2rK24N123velC+swrj1rykb0Ausz+gvBsMRqONwzxpOgOjiVS38gZrP13P5oMjW-RAjNsiuADmlYBkGpYmu4t61vW0gPIwLA0CSyhAA","body":"function stream_map_optimized(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  memo(() =>\n                         stream_map_optimized(f, stream_tail(s))));\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.50","id":"#ex-3.50","child":[{"body":"\n\tDeclare a function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2"},{"body":"\n\tthat takes a binary function and two streams as arguments and returns\n\ta stream whose elements are the results of applying the function\n\tpairwise to the corresponding elements of the argument streams.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"function stream_map_2(f, s1, s2) {\n    ...\n}"},{"body":"\n\tSimilar to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_optimized"},{"body":",\n\tdeclare a function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2_optimized"},{"body":" by\n\tmodifying your\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2"},{"body":"\n\tsuch that the result stream employs memoization.\n\t","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":15,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3UAJg4AGlBDbEPDHZ5eWu9G0CpDdRJbcTZjngAfN9v7x-Fns65JsIAPygH7iQFCABcoE2Mio8g4bAAFqUXtguIcUSoXucMRDCgFdCFlok1httnsCKcVjI1hQ4X90dTSep6VQ-riuDN8JwFnQjjSyVtduoaJtqAwqAAvdwHI4nI7nPpCa5DO4PJ5o96fdVgnEAjIgsH46Gw+GIrHKLWY1H-PH9YTMVhsQnBAUs8kisUS6Wyqnu1ashnWgO0oPs-VcKPc3BkOjLW4kCjHXSJihMADmTHk9wI8hoDDY6LMcZICdcyYADKmK5ns7n84XK1zY-HpCplIZU2wAB6HVSBEI90AAalAqjMuGUd024hkqjYTAAbnJ1CTVi9BethXsO4ZDhXjgek4Zm4cMNGpzO5wvl6v17TNx6d6LxVRJTKrXvj8mFYez6AF5ckAA","body":"function stream_map_2(f, s1, s2) {\n    return is_null(s1) || is_null(s2)\n        ? null\n        : pair(f(head(s1), head(s2)),\n                () => stream_map_2(f, stream_tail(s1), stream_tail(s2)));\n}\n\nfunction stream_map_2_optimized(f, s1, s2) {\n    return is_null(s1) || is_null(s2)\n        ? null\n        : pair(f(head(s1), head(s2)),\n                memo(() => stream_map_2_optimized(f, stream_tail(s1), stream_tail(s2))));\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.51","id":"#ex-3.51","child":[{"body":"\n\tNote that our primitive function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":" returns its argument\n\tafter displaying it.\n\tWhat does the interpreter print in response to evaluating each\n\tstatement in the following sequence?","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/3.5.1#footnote-5"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":8,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwoCcBTAQwFsB9Vkozq2bsKrblRKjmAN3YAbABRyaAdwA0oABZUA5poCUoAN65QZ0GwpFm9ZStAA+Lbs2nz78wH5Q-OXLce7gBcoAAO7FTMSqpqAYHxZgqGALxOTGxcvPyCwqLikkKyinagANSg2Braevr6ANyguAC++HKsFKAAHqDJjCwcPJzsoQoAJlQMoXLsAJ4a6QNZAkIiYhJSRQoADBrYW7V1+AuZbAQKnRoY9Uf9J6xnF6AA7PVAA","body":"let x = stream_map(display, stream_enumerate_interval(0, 10));\n\nstream_ref(x, 5);\n\nstream_ref(x, 7); "},{"body":"\n\tWhat does the interpreter print if \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_optimized"},{"body":"\n\tis used instead of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map"},{"body":"?\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":52,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3UaTeoGKgAvdw4AGlBDHl5a70bQKkN1EltxNkvJiIB+UGfxcQ-wgAuUCbGRUeQcNgAC1Kby4XFOALqzFYbACuiCSP6YmWiTWG22u32RxOBHOuNW6goYNel3hXBm+E4CzoFwAjkQZIo2AAPK43BpDHmgABUoB5jLm5GorMMGz+TGW6mUVAAbg8aBDUtcvIL6C4SMplWqNVrzgAmBm4CbMmX61xGlXqwyatgkc4URUUY3OzX83WDJYcrlMNiepVO008EIkLFCb6xurAyNOQxhr0+03nbhx0DfcPeyMu+S54EGx0m4tuj0Zoua0AAalA2CtNvmdtAKcVbBk5wARv7hLchn3QABSWS6HR6AAMktti3uj028iozDdg6Ew-o9GnejlckkEcrru48-bi4pMjWTGezHkMk96lcnvkqrkbHENAA7ucoVQAHMoU3YY9QkH9QBCf8gNzBMXlLEEwQhL9f1zdJ0WCC4VmvdRbyIe9HyYZ8SFfd9XhQxtmz-QDgIZERZkscVdCwvF1i2HY9jXEllDYFVDE2cQZFUclsJvO8mAfJ8Xwksi2Bnc5sBneEzFwK81kUAheXODArVU0TNGcLTQAAdgZIA","body":"let x = stream_map_optimized(display, stream_enumerate_interval(0, 10));\n\nstream_ref(x, 5);\n\nstream_ref(x, 7); "}]},{"tag":"EXERCISE","title":"Exercise 3.52","id":"#ex-3.52","child":[{"body":"\n        Consider the sequence of statements\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":48,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdRgFtWAG0OcGFAPoATKgDcqDGu24lBI8RM5SZoAlRKWrW3tHZwAaUAAmflUNLUpael9-QLsHJxJwilMLa1THV1FxSWl6ZjYubiyzFOD2QQA+UBJC91aAfiaW1vEALlBcqktTSuyatPCXLu7QDqqcoLSp7r6kgIG0sNA5scdQAGpQbGj1QlJ43QGhhm5WcIAjAvdi7zvQAFJQVlAAXl-QAAYYpozjp6PZzAAHdhUPQ8FzCLrPej0X7ffRGEzVdYhFxA07aBKMChcVh6cycEhEWHsVhZcx+LLsGxGbiGGgAd3CAAsqABzLmPIqeEqgNns0CNHn8pbtJpEYwy9x9CGsKhOMWhRXTcTcQTfRpmElkilUzg0ukMs3Mwysjn7Q7cvkC6KgE7485ghjkmwU5yCsRIprvSI-P6At1kOhmUAGXiBBgQwysACeP1AAE5VHFQf17ImU+ZDZxSdwGP6fCDCdYE0nk4XicWyVRGaWKBNy+4qARQNxwZTjK3+B3xGpQJxDAxOKAuz2UWHh91q-nk9wAOSr8IAIjQO83x21o-Hk4R2vcS9r3C5xcsg-3p7E54LRdJ9Jbz7JFFVNrM-AmoAAtIcd7dBo7igeIj51u+r5mqW4SxvGy7HBouAmBQjBUmm4bujmrBkGQVJ8OWDCYWicgHCReiqE8wreJReKRiQ0aTkwabQQYEI3PhVLhNBJrUrSnD0iQjLWtw2DhBE-xDqouCMdGqZotBviGC24KcD6GSMJwTDHHJUboQAXmxDYvipLZyPqSjBhgoZov8vE6Xp0FcAQ3DJuEADsemQfWRrcIZ0RAA","body":"let sum = 0;\n\nfunction accum(x) {\n    sum = x + sum;\n    return sum;\n}\n\nconst seq = stream_map(accum, stream_enumerate_interval(1, 20));\n\nconst y = stream_filter(is_even, seq);\n\nconst z = stream_filter(x => x % 5 === 0, seq);\n\nstream_ref(y, 7);\n\ndisplay_stream(z); "},{"body":"\n        What is the value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum"},{"body":" after each of the\n\tabove statements is evaluated?\n        \n\tWhat is the printed response to\tevaluating the \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_ref"},{"body":" and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display_stream"},{"body":" expressions?\n\tWould these responses differ if we had applied the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"memo"},{"body":"\n\ton every tail of every constructed stream pair, as suggested in the\n\toptimization above? Explain.\n        ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.5.1#footnote-link-1","child":[{"body":"Assume that we have a\n    predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_prime"},{"body":"\n    (e.g., as in section ","tag":"#text"},{"tag":"REF","body":"1.2.6","href":"/sicpjs/1.2.6"},{"body":") that\n    tests for primality.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.5.1#footnote-link-2","child":[{"body":"This should\n\tbother you. The fact that we are defining such similar functions\n        for streams and lists indicates that we are missing some underlying\n\tabstraction.  Unfortunately, in order to exploit this abstraction, we\n\twill need to exert finer control over the process of evaluation than we\n\tcan at present.  We will discuss this point further at the end of\n\tsection ","tag":"#text"},{"tag":"REF","body":"3.5.4","href":"/sicpjs/3.5.4"},{"body":".\n        In section ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.2"},{"body":", we'll\n\tdevelop a framework that unifies lists and streams.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/3.5.1#footnote-link-3","child":[{"body":"The numbers shown here do not really appear in the delayed\n\texpression.  What actually appears is the original expression, in an\n\tenvironment in which the variables are bound to the appropriate numbers.\n\tFor example, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"low + 1"},{"body":" with\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"low"},{"body":" bound to 10,000 actually appears\n\twhere ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"10001"},{"body":" is shown.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/3.5.1#footnote-link-4","child":[{"body":"There are many possible implementations of streams\n\tother than the one described in this section.  Delayed evaluation, which\n\tis the key to making streams practical, was inherent in \n        \n        Algol 60's\n        ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-name","tag":"#text"}]},{"body":"\n        parameter-passing method.  The use of this mechanism to implement\n        streams was first described by \n        \n        Landin (1965).  Delayed evaluation for\n        streams was introduced into Lisp by \n        \n        Friedman and Wise (1976). In their\n        implementation,\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cons"},{"body":" (the Lisp\n\tequivalent of our\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":" function)\n\talways delays evaluating its arguments, so\n        that lists automatically behave as streams.  The memoizing\n        optimization is also known as \n        ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-need","tag":"#text"}]},{"body":".  The Algol community would refer to our original\n\tdelayed objects as\n        ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-name thunks","tag":"#text"}]},{"body":" and to the optimized\n\tversions as ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-need thunks","tag":"#text"}]},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/3.5.1#footnote-link-5","child":[{"body":"Exercises such\n\tas ","tag":"#text"},{"tag":"REF","body":"3.51","href":"/sicpjs/3.5.1#ex-3.51"},{"body":" and ","tag":"#text"},{"tag":"REF","body":"3.52","href":"/sicpjs/3.5.1#ex-3.52"},{"body":"\n\tare valuable for testing our understanding of how delayed evaluation\n\tworks. On the other hand, intermixing delayed evaluation with\n\t\n\tprinting—and, even worse, with assignment—is extremely\n\tconfusing, and instructors of courses on computer languages have\n\ttraditionally tormented their students with examination questions such\n\tas the ones in this section. Needless to say, writing programs that\n\tdepend on such subtleties is\n\t\n\todious programming style.  Part of the power of stream processing is\n\tthat it lets us ignore the order in which events actually happen in\n\tour programs.  Unfortunately, this is precisely what we cannot afford\n\tto do in the presence of assignment, which forces us to be concerned\n\twith time and change.","tag":"#text"}]}]