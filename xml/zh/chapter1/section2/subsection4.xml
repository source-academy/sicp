<SUBSECTION>
   <NAME>幂运算</NAME> 

  <LABEL NAME="sec:exponentiation"></LABEL>
   <INDEX>幂运算<OPEN></OPEN></INDEX> 

  <TEXT> 
    考虑计算给定数字的指数的问题。
    我们希望有一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，作为参数接受一个基数 
<LATEXINLINE>$b$</LATEXINLINE>  和一个正整数指数  <LATEXINLINE>$n$</LATEXINLINE>  和
    计算<SPACE></SPACE> <LATEXINLINE>$b^n$</LATEXINLINE>  .  实现这一点的一种方法是通过
    递归定义
 <LATEX>
      \[
      \begin{array}{lll}
      b^{n} &amp;=&amp; b\cdot b^{n-1}\\
      b^{0} &amp;=&amp; 1
      \end{array}
      \]
    </LATEX> 
    这很容易转化为
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
<SNIPPET PAGE="44">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>linear recursive version</SUBINDEX></INDEX>
      <NAME>expt_definition</NAME>
      <EXAMPLE>expt_example</EXAMPLE>
      <SCHEME>
(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return n === 0
           ? 1
           : b * expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>expt_example</NAME>
      <REQUIRES>expt_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET> 
    这是一个线性递归过程，要求
<LATEXINLINE>$\Theta(n)$</LATEXINLINE>  步骤和<LATEXINLINE>$\Theta(n)$</LATEXINLINE>  空间。正如在阶乘中一样，我们
    可以很容易地制定一个等效的线性迭代：
 <SNIPPET PAGE="45">
      <INDEX><DECLARATION>expt</DECLARATION><SUBINDEX>linear iterative version</SUBINDEX></INDEX>
      <NAME>expt_linear_definition</NAME>
      <EXAMPLE>expt_example2</EXAMPLE>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                (- counter 1)
                (* b product)))) 
      </SCHEME>
      <JAVASCRIPT>
function expt(b, n) {
    return expt_iter(b, n, 1);
}
function expt_iter(b, counter, product) {
    return counter === 0
           ? product
           : expt_iter(b, counter - 1, b * product);
} 
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>expt_example2</NAME>
      <SCHEME>
(expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET> 

    该版本要求 <LATEXINLINE>$\Theta(n)$</LATEXINLINE>  步骤和<LATEXINLINE>$\Theta(1)$</LATEXINLINE>  空间。</TEXT>

   <TEXT>
    我们可以通过使用
    <INDEX>逐次平方法</INDEX>
    更少的步骤来计算指数。
    例如，不是计算 $b^8$ 为
    
      \[
      \begin{array}{l}
      b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot(b\cdot b))))))
      \end{array}
      \]
    
    我们可以使用三次乘法来计算它：
    
      \[
      \begin{array}{lll}
      b^{2} &amp;= &amp; b\cdot b\\
      b^{4} &amp;= &amp; b^{2}\cdot b^{2}\\
      b^{8} &amp;= &amp; b^{4}\cdot b^{4}
      \end{array}
      \]
    
  </TEXT> 

  <TEXT> 
    这种方法对于以 2 为底的指数效果很好。如果我们使用规则，也可以在一般情况下利用逐次平方法来计算指数
<LATEX>
      \[
      \begin{array}{llll}
      b^{n} &amp;=&amp; (b^{n/2})^{2}  &amp;\qquad\,\mbox{if}\ n\ \mbox{is even}\\
      b^{n} &amp;=&amp; b\cdot b^{n-1} &amp;\qquad\mbox{if}\ n\ \mbox{is odd}
      \end{array}
      \]
    </LATEX> 
    我们可以将这种方法表示为
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
<SNIPPET PAGE="45">
      <INDEX><DECLARATION>fast_expt</DECLARATION></INDEX>
      <NAME>expt_log_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>even_definition</REQUIRES>
      <EXAMPLE>fast_expt_example</EXAMPLE>
      <SCHEME>
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) 
         (square (fast-expt b (/ n 2))))
        (else 
         (* b (fast-expt b (- n 1))))))

      </SCHEME>
      <JAVASCRIPT>
function fast_expt(b, n) {
    return n === 0
           ? 1
           : is_even(n)
           ? square(fast_expt(b, n / 2))
           : b * fast_expt(b, n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>fast_expt_example</NAME>
      <REQUIRES>expt_log_definition</REQUIRES>
      <EXPECTED>81</EXPECTED>
      <SCHEME>
(fast-expt 3 4)
      </SCHEME>
      <JAVASCRIPT>
fast_expt(3, 4);
      </JAVASCRIPT>
    </SNIPPET> 
    用于测试一个整数是否为偶数的谓词是通过
    <SPLITINLINE>
      
	原始过程
	<INDEX>余数<SUBINDEX><ORDER>整数</ORDER>整除后的余数</SUBINDEX></INDEX>
	<INDEX>{\tt &quot;%} (余数运算符)<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX>{\tt &quot;%} (余数)<ORDER>&quot;%</ORDER></SUBINDEX></INDEX>  
	余数,
      
      <JAVASCRIPT>
	<INDEX>余数<SUBINDEX><ORDER>整数</ORDER>整除后的余数</SUBINDEX></INDEX>
	<INDEX>{\tt &quot;%} (余数运算符)<ORDER>///</ORDER></INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX>{\tt &quot;%} (余数)<ORDER>///</ORDER></SUBINDEX></INDEX>
	运算符<SPACE></SPACE><JAVASCRIPTINLINE>%</JAVASCRIPTINLINE>,
	它计算整除后的余数,
      </JAVASCRIPT>
    </SPLITINLINE>
    来定义的
<SNIPPET PAGE="45">
      <INDEX><DECLARATION>is_even</DECLARATION></INDEX>
      <NAME>even_definition</NAME>
      <EXAMPLE>even_example</EXAMPLE>
      <SCHEME>
(define (even? n)
  (= (remainder n 2) 0))
      </SCHEME>
      <JAVASCRIPT>
function is_even(n) {
    return n % 2 === 0;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="44" HIDE="yes">
      <NAME>even_example</NAME>
      <REQUIRES>even_definition</REQUIRES>
      <SCHEME>
(even 7)
      </SCHEME>
      <JAVASCRIPT>
is_even(7);
      </JAVASCRIPT>
    </SNIPPET> 
    该过程通过 
    <SPLITINLINE>
      快速幂函数
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>增长阶<SUBINDEX>对数</SUBINDEX></INDEX>
    <INDEX>对数增长</INDEX>
    以对数方式增长 
<LATEXINLINE>$n$</LATEXINLINE>  在空间和步骤数量上都得到优化。为了证明这一点，可以观察到计算<LATEXINLINE>$b^{2n}$</LATEXINLINE>  使用 
    <SPLITINLINE>
      快速幂函数
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    只需比计算 
<LATEXINLINE>$b^n$</LATEXINLINE> .  因此，我们可以计算的指数的大小在每次允许的乘法中大约翻倍。因此，计算需要的乘法次数对于一个指数 <LATEXINLINE>$n$</LATEXINLINE>  以接近对数的速度增长 <LATEXINLINE>$n$</LATEXINLINE>  以 2 为底。该过程已 <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>  增长。<FOOTNOTE>更准确地说，所需的乘法次数等于 $n$ 的以 2 为底的对数减去 1，加上 $n$ 的二进制表示中 1 的数量。这个总数总是小于 $n$ 的对数的两倍。定义阶次符号的任意常数 $k_1$ 和 $k_2$ 意味着，对于对数过程，所取对数的底数并不重要，因此所有这样的过程都可描述为 $\Theta(\log n)$。</FOOTNOTE> </TEXT>

   <TEXT>
    $\Theta(\log n)$ 增长和 $\Theta(n)$ 增长之间的差异在 $n$ 变大时变得非常明显。例如， 
    <SPLITINLINE>
      快速幂函数
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    当 $n=1000$ 时，仅需 14 次乘法.<FOOTNOTE>你可能会想，为什么有人会关心将数字提高到 1000 次方。请参见
    section<SPACE></SPACE><REF NAME="sec:primality"></REF>.</FOOTNOTE> 
    同样可以利用逐次平方法的思想来设计一种迭代算法，该算法可以在以对数数量的步骤中计算指数(见 练习<SPACE></SPACE><REF NAME="ex:iter-expon-pro"></REF>)，尽管，正如迭代算法经常出现的那样，这种算法并没有像递归算法那样简洁地写下来.<FOOTNOTE>这个迭代算法是古老的。它出现在
    <INDEX>Chandah-sutra</INDEX>
    <EM>Chandah-sutra</EM> 由
    <INDEX>Pingala, <AACUTE_UPPER></AACUTE_UPPER>ch<AACUTE_LOWER></AACUTE_LOWER>rya</INDEX>
    <AACUTE_UPPER></AACUTE_UPPER>ch<AACUTE_LOWER></AACUTE_LOWER>rya，写于公元前 200 年之前。见
    <INDEX>Knuth, Donald E.</INDEX>
    <CITATION>Knuth 1997b</CITATION>，第 4.6.3 节，关于此和其他幂运算方法的全面讨论和分析。</FOOTNOTE>
    <INDEX>幂运算<CLOSE></CLOSE></INDEX>
  </TEXT> 

  <EXERCISE> 
    设计一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，该过程演变为一个迭代的幂运算过程，使用逐次平方法，并使用对数数量的步骤，正如   
    <SPLITINLINE>
      快速幂函数.
      <JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    （提示：使用观察到的结果
<LATEXINLINE>$(b^{n/2})^2 =(b^2)^{n/2}$</LATEXINLINE> 
    ，保持与
    指数一起 
<LATEXINLINE>$n$</LATEXINLINE> 
    和基数 
<LATEXINLINE>$b$</LATEXINLINE> 
    和一个额外的状态变量 
<LATEXINLINE>$a$</LATEXINLINE> 
    ，并以这样的方式定义状态转变，使得乘积 
<LATEXINLINE>$a b^n$</LATEXINLINE> 
    状态在每个状态之间保持不变。在过程开始时 
<LATEXINLINE>$a$</LATEXINLINE> 
    被视为 1，答案由
    $n$ 的值给出 
<LATEXINLINE>$a$</LATEXINLINE>  
    在过程结束时。一般而言，定义一个
    <INDEX>迭代过程的不变量</INDEX>
    <EM>不变量</EM>，使其在状态之间保持不变，是思考
    <INDEX>迭代过程<SUBINDEX>算法设计</SUBINDEX></INDEX>
    迭代算法设计的一种有效方法。)
<LABEL NAME="ex:iter-expon-pro"></LABEL>
     
    <SOLUTION>
      
	<NAME>fast_expt_iter</NAME>
	<EXAMPLE>example_1.17</EXAMPLE>
	<EXPECTED>8</EXPECTED>
	<REQUIRES>even_definition</REQUIRES>
	<JAVASCRIPT>
function fast_expt_iter(a, b, n){
    return n === 0
           ? a
           : is_even(n)
           ? fast_expt_iter(a, b * b, n / 2)
           : fast_expt_iter(a * b, b, n - 1);
}
function fast_expt(b, n){
    return fast_expt_iter(1, b, n);
}
	</JAVASCRIPT>
      
    </SOLUTION>
<SNIPPET HIDE="yes">
      <NAME>example_1.17</NAME>
      <REQUIRES>fast_expt_iter</REQUIRES>
      <JAVASCRIPT>
fast_expt(2, 3);
    </JAVASCRIPT>
    </SNIPPET>
    </EXERCISE>

    <EXERCISE>
      <LABEL NAME="ex:add-expon"></LABEL>  
    本节中的幂运算算法基于通过重复乘法进行幂运算。类似地，可以通过重复加法执行整数乘法。以下乘法
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      （假设我们的语言只能加法，而不能进行乘法）类似于 
<SCHEMEINLINE>expt</SCHEMEINLINE>
        
      <SPLITINLINE>
	过程：
	<JAVASCRIPT>函数：</JAVASCRIPT>
      </SPLITINLINE>
<SNIPPET PAGE="46">
        <NAME>times_definition</NAME>
        <EXAMPLE>times_example</EXAMPLE>
        <SCHEME>
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
        </SCHEME>
        <JAVASCRIPT>
function times(a, b) {
    return b === 0
           ? 0
           : a + times(a, b - 1);
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="46" HIDE="yes">
        <NAME>times_example</NAME>
	<EXPECTED>12</EXPECTED>
        <REQUIRES>times_definition</REQUIRES>
        <SCHEME>
(* 3 4)
        </SCHEME>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
      </SNIPPET> 
    该算法所需的步骤数量是线性的
<SCHEMEINLINE>b</SCHEMEINLINE> 
    现在假设我们包括，与
      加法一起，
      <SPLITINLINE>
	操作
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
<SCHEMEINLINE>double</SCHEMEINLINE> 
    ，它将一个整数翻倍，和 
<SCHEMEINLINE>halve</SCHEMEINLINE> 
    ，它将一个（偶）整数除以 2。使用这些，设计一个乘法
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      类似于 
      <SPLITINLINE>
	
	快速幂函数
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      使用对数数量的步骤。
      <SOLUTION>          
	
	  <NAME>example_1.18_definition</NAME>
	  <EXAMPLE>example_1.18</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function double(x) {
    return x + x;
}

function halve(x) {
    return x / 2;
}

function fast_times(a, b) { 
    return b === 1
           ? a
           : a === 0 || b === 0
           ? 0
           : is_even(b)
           ? double(fast_times(a, halve(b)))
           : a + fast_times(a, b - 1);
}
	  </JAVASCRIPT>
	  
	  
	
      </SOLUTION>
<SNIPPET HIDE="yes">
	<NAME>example_1.18</NAME>
	<REQUIRES>example_1.18_definition</REQUIRES>
	<EXPECTED>12</EXPECTED>
	<JAVASCRIPT>
fast_times(3, 4);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </EXERCISE>

    <EXERCISE>  
    使用练习的结果<SPACE></SPACE><REF NAME="ex:iter-expon-pro"></REF>
      和<SPACE></SPACE><REF NAME="ex:add-expon"></REF>，设计一个
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      ，生成一个迭代过程，以加法、翻倍和除以一半为基础
      用对数数量的步骤实现两个整数的乘法。<FOOTNOTE>这个
      算法，有时被称为
      <INDEX>俄罗斯农民乘法法</INDEX>
      <INDEX>俄罗斯农民法乘法</INDEX>
      <QUOTE>俄罗斯农民法</QUOTE> 的乘法，是古老的。它的使用示例在
      <INDEX>莱茵德纸草书</INDEX>
      莱茵德纸草书中可以找到，这是现存的两部最古老的数学文献之一，
      约公元前 1700 年由一位名叫
      <INDEX><ORDER>Ahmose</ORDER>A<APOS></APOS>h-mose</INDEX>
      A<APOS></APOS>h-mose 的埃及抄写员撰写（并复制自更古老的文献）。</FOOTNOTE>
<LABEL NAME="ex:it-pro-mult-int"></LABEL>
      <SOLUTION>                
        
	  <NAME>fast_times_iter</NAME>
          <EXAMPLE>example_1.19</EXAMPLE>
          <REQUIRES>even_definition</REQUIRES>
          <JAVASCRIPT>
function double(x) {
    return x + x;
}

function half(x) {
    return x / 2;
}

function fast_times_iter(total, a, b) {
    return b === 1
           ? total + a
           : a === 0 || b===0
           ? 0
           : is_even(b)
           ? fast_times_iter(total, double(a), half(b))
           : fast_times_iter(total + a, a, b - 1);
}

function times(a, b) {
  return fast_times_iter(0, a, b);
}
          </JAVASCRIPT>
          
          
        
      </SOLUTION><SNIPPET HIDE="yes">
        <NAME>example_1.19</NAME>
	<REQUIRES>fast_times_iter</REQUIRES>
	<EXPECTED>12</EXPECTED>
        <JAVASCRIPT>
times(3, 4);
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </EXERCISE>

     <SHORT_PAGE LINES="1"></SHORT_PAGE> 
    <EXERCISE>  
    有一个聪明的算法，用于在
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>对数版本</SUBINDEX></INDEX>
      对数步骤中计算斐波那契数。回想状态变量的转换 
<LATEXINLINE>$a$</LATEXINLINE>  和 <LATEXINLINE>$b$</LATEXINLINE>  
    在
      <SPLITINLINE>
	
	fib-iter
	<JAVASCRIPT><JAVASCRIPTINLINE>fib_iter</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      过程中，节<SPACE></SPACE><REF NAME="sec:tree-recursion"></REF>：
<LATEXINLINE>$a\leftarrow a+b$</LATEXINLINE>  和 <LATEXINLINE>$b\leftarrow a$</LATEXINLINE>  
    使用练习的结果<SPACE></SPACE><REF NAME="ex:iter-expon-pro"></REF>
      和<SPACE></SPACE><REF NAME="ex:add-expon"></REF>，设计一个
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      ，生成一个迭代过程，以加法、翻倍和除以一半为基础
      用对数数量的步骤实现两个整数的乘法。<FOOTNOTE>这个
      算法，有时被称为
      <INDEX>俄罗斯农民乘法法</INDEX>
      <INDEX>俄罗斯农民法乘法</INDEX>
      <QUOTE>俄罗斯农民法</QUOTE> 的乘法，是古老的。它的使用示例在
      <INDEX>莱茵德纸草书</INDEX>
      莱茵德纸草书中可以找到，这是现存的两部最古老的数学文献之一，
      约公元前 1700 年由一位名叫
      <INDEX><ORDER>Ahmose</ORDER>A<APOS></APOS>h-mose</INDEX>
      A<APOS></APOS>h-mose 的埃及抄写员撰写（并复制自更古老的文献）。</FOOTNOTE>
<LATEXINLINE>$T$</LATEXINLINE> 
    ，并观察应用 
<LATEXINLINE>$T$</LATEXINLINE> 
    一遍又一遍地 
<LATEXINLINE>$n$</LATEXINLINE>  
    次数，从 1 和 0 开始，
      产生这一对 
<LATEXINLINE>$\textrm{Fib}(n+1)$</LATEXINLINE>  和 <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>  
    .  换句话说，斐波那契数是通过应用 
<LATEXINLINE>$T^n$</LATEXINLINE>  
    .  也就是说，斐波那契数是通过应用 
<LATEXINLINE>$n$</LATEXINLINE>  
    次方的转换 
<LATEXINLINE>$T$</LATEXINLINE>  
    次方的转换 
<LATEXINLINE>$(1,0)$</LATEXINLINE>  
    .  现在考虑 
<LATEXINLINE>$T$</LATEXINLINE>  
    特殊情况 
<LATEXINLINE>$p=0$</LATEXINLINE>  和 <LATEXINLINE>$q=1$</LATEXINLINE>  
    在一系列变换中 
<LATEXINLINE>$T_{pq}$</LATEXINLINE>  
    在 
<LATEXINLINE>$T_{pq}$</LATEXINLINE>  
    变换序对 
<LATEXINLINE>$(a,b)$</LATEXINLINE>  
    根据 
<LATEXINLINE>$a\leftarrow bq+aq+ap$</LATEXINLINE>  和 <LATEXINLINE>$b\leftarrow bp+aq$</LATEXINLINE>  
    应用这种变换 
<LATEXINLINE>$T_{pq}$</LATEXINLINE>  
    两次，效果与使用单一变换相同 
<LATEXINLINE>$T_{p&apos;q&apos;}$</LATEXINLINE>  
    的相同形式，并计算 
<LATEXINLINE>$p&apos;$</LATEXINLINE>  和 <LATEXINLINE>$q&apos;$</LATEXINLINE>  
    以...的术语 
<LATEXINLINE>$p$</LATEXINLINE>  和<SPACE></SPACE> <LATEXINLINE>$q$</LATEXINLINE>  
    两次变换，这个效果与使用单一变换相同 
<LATEXINLINE>$T^n$</LATEXINLINE>  
    使用逐次平方法，如在  
      <SPLITINLINE>
	快速幂函数
	<JAVASCRIPT><JAVASCRIPTINLINE>fast_expt</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	过程。
	<JAVASCRIPT>函数。</JAVASCRIPT>
      </SPLITINLINE>
      将所有这些放在一起以完成以下  
      <SPLITINLINE>
	过程，
	<JAVASCRIPT>函数，</JAVASCRIPT>
	</SPLITINLINE>
      其运行在对数数量的步骤中：<FOOTNOTE>此练习是  
      <SPLITINLINE>
	
	  提出的
	
      </SPLITINLINE>
      由  
      <INDEX>Stoy, Joseph E.</INDEX>
      Joe Stoy，基于  
      <INDEX>Kaldewaij, Anne</INDEX>
      <CITATION>Kaldewaij 1990</CITATION> 中的一个例子。</FOOTNOTE>
<SNIPPET PAGE="47" EVAL="no" LATEX="yes" POSTPADDING="no">
        <NAME>fib_log_definition</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>fib_example</EXAMPLE>
        <SCHEME>
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   ??      ; compute p&apos;
                   ??      ; compute q&apos;
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
        </SCHEME>
        <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}
function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      <METAPHRASE>??</METAPHRASE>,           // compute p&apos;
                      <METAPHRASE>??</METAPHRASE>,           // compute q&apos;
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SOLUTION>        
	
	  <NAME>fib_log_solution</NAME>
	  <EXAMPLE>example_1.20</EXAMPLE>
	  <REQUIRES>even_definition</REQUIRES>
	  <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, 0, 1, n);
}

function fib_iter(a, b, p, q, count) {
    return count === 0
           ? b
           : is_even(count)
           ? fib_iter(a,
                      b,
                      p * p + q * q,
                      2 * p * q + q * q,
                      count / 2)
           : fib_iter(b * q + a * q + a * p,
                      b * p + a * q,
                      p,
                      q,
                      count - 1);
}
	  </JAVASCRIPT>
	  
	  
	
      </SOLUTION><SNIPPET HIDE="yes">
	<NAME>example_1.20</NAME>
	<REQUIRES>fib_log_solution</REQUIRES>
	<EXPECTED>5</EXPECTED>	
	<JAVASCRIPT>
fib(5);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <LABEL NAME="ex:1_19"></LABEL>
    </EXERCISE>
</SUBSECTION>
