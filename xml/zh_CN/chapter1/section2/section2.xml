<SECTION>
   <NAME>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    以及它们生成的进程
  </NAME> 

   <SECTIONCONTENT></SECTIONCONTENT> 

  <LABEL NAME="sec:procedures-and-processes"></LABEL> 

   <TEXT>
    我们现在已经考虑了编程的基本要素：我们使用了原始的算术运算，我们将这些运算组合起来，并且我们通过 
    <SPLITINLINE>
      <SCHEME>将它们定义为复合过程。</SCHEME>
      <JAVASCRIPT>将它们声明为复合函数。</JAVASCRIPT>
      </SPLITINLINE>
    进行了抽象。
    但这还不足以让我们说我们已经掌握了编程。我们的情况类似于一个学会了象棋棋子走法规则但并不了解典型开局、战术或策略的人。就像一个新手象棋玩家一样，我们还不知道该领域中常见的使用模式。
    我们缺乏知道哪些走法值得走的知识 
    <SPLITINLINE>
      <SCHEME>（哪些过程值得定义）。</SCHEME>
      <JAVASCRIPT>（哪些函数值得声明）。</JAVASCRIPT>
    </SPLITINLINE>
    我们缺乏预测走子后果的经验
    <SPLITINLINE>
      <SCHEME>（执行过程）。</SCHEME>
      <JAVASCRIPT>（执行函数）。</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 

   <TEXT>
    预见所考虑的操作后果的能力，对于成为一名专家程序员至关重要，正如在任何综合性的创造性活动中一样。例如，成为一名专家级摄影师，必须学会如何观察一个场景，并了解对于每种可能的曝光和
    <SPLITINLINE>
      <SCHEME>显影。</SCHEME>
      <JAVASCRIPT>处理选项。</JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>
      在数字时代，主流观众可能不熟悉“显影”一词。
    </COMMENT>
    只有这样，才能反向推理，规划构图、光线、曝光和
    <SPLITINLINE>
      <SCHEME>显影</SCHEME>
      <JAVASCRIPT>处理</JAVASCRIPT>
    </SPLITINLINE>
    ，以达到预期效果。编程也是如此，我们正在规划过程所采取的行动路线，并通过程序来控制该过程。要成为专家，我们必须学会预测由各种类型
    <SPLITINLINE>
      <SCHEME>过程产生的过程。</SCHEME>
      <JAVASCRIPT>函数产生的过程。</JAVASCRIPT>
    </SPLITINLINE>
    只有当我们具备了这种技能，才能学习可靠地构造出表现出理想行为的程序。
  </TEXT> 

   <TEXT>
    一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    是一个
    <INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>模式</ORDER> 作为过程局部演化的模式</SUBINDEX></INDEX>
    用于计算过程<EM>局部演化</EM>的模式。它规定了过程的每个阶段如何建立在前一阶段的基础上。我们希望能够对过程的整体，或<EM>全局</EM>行为进行陈述，而该过程的局部
    <INDEX>过程的局部演化</INDEX>
    <INDEX>过程<SUBINDEX>局部演化</SUBINDEX></INDEX>
    演化已经由一个
    <SPLITINLINE>
      <SCHEME>过程指定。</SCHEME>
      <JAVASCRIPT>函数指定。</JAVASCRIPT>
    </SPLITINLINE>
    一般来说，这非常困难，但我们至少可以尝试描述一些典型的过程演化模式。
  </TEXT> 

   <TEXT>
    在本节中，我们将考察一些由简单
    <SPLITINLINE>
      <SCHEME>过程生成</SCHEME>
      <JAVASCRIPT>函数生成</JAVASCRIPT>
    </SPLITINLINE>
    的常见<QUOTE>形态</QUOTE>。我们还将研究这些过程消耗重要计算资源——时间和空间的速率。
    我们将考虑的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    非常简单。它们的作用类似于摄影中的测试模式：作为过度简化的典型模式，而不是其自身的实用例子。
  </TEXT> 

  <!--  Subsection 1 : Linear Recursion and Iteration  -->
  &amp;subsection1.2.1;

  <!--  Subsection 2 : Tree Recursion  -->
  &amp;subsection1.2.2;

  <!--  Subsection 3 : Orders of Growth  -->
  &amp;subsection1.2.3;

  <!--  Subsection 4 : Exponentiation  -->
  &amp;subsection1.2.4;

  <!--  Subsection 5 : Greatest Comman Divisors  -->
  &amp;subsection1.2.5;

  <!--  Subsection 6 : Example: Testing for Primality  -->
  &amp;subsection1.2.6;

</SECTION>
