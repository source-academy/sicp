<SUBSECTION>
  <NAME>
    Streams and Delayed Evaluation
  </NAME>

  <LABEL NAME="sec:streams-and-delayed-evaluation"/>

  <INDEX>stream(s)<SUBINDEX>delayed evaluation and<OPEN/></SUBINDEX></INDEX>
  <INDEX>delayed evaluation<SUBINDEX>streams and<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    The <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    at the end of the preceding section shows how we can use streams to model
    signal-processing systems that contain
    <INDEX>feedback loop, modeled with streams</INDEX>
    feedback loops.  The feedback loop for the adder shown in
    figure<SPACE/><REF NAME="fig:integral"/> is modeled by the fact that
    <INDEX><USE>integral</USE><SUBINDEX>need for delayed evaluation</SUBINDEX></INDEX>
    <SCHEMEINLINE>integral</SCHEMEINLINE><APOS/>s
    internal stream
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>int</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>integ</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is defined in terms of itself:

    <SNIPPET EVAL="no">
      <SCHEME>
(define int
  (cons-stream initial-value
               (add-streams (scale-stream integrand dt)
  int)))
      </SCHEME>
      <JAVASCRIPT>
const integ = pair(initial_value, 
                   () => add_streams(
                             scale_stream(integrand, dt),
                             integ)
                  );
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
	The interpreter<APOS/>s ability to deal with such an implicit definition
	depends on the <SCHEMEINLINE>delay</SCHEMEINLINE> that is incorporated
	into <SCHEMEINLINE>cons-stream</SCHEMEINLINE>.  Without this
	<SCHEMEINLINE>delay</SCHEMEINLINE>, the interpreter could not construct
	<SCHEMEINLINE>int</SCHEMEINLINE> before evaluating both arguments to
	<SCHEMEINLINE>cons-stream</SCHEMEINLINE>, which would require that
	<SCHEMEINLINE>int</SCHEMEINLINE> already be defined.
	In general, <SCHEMEINLINE>delay</SCHEMEINLINE> is crucial for using
	streams to model signal-processing systems that contain loops.  Without
	<SCHEMEINLINE>delay</SCHEMEINLINE>, our models would have to be
	formulated so that the inputs to any signal-processing component would
	be fully evaluated before the output could be produced.  This would
	outlaw loops.
      </SCHEME>
      <JAVASCRIPT>
	The interpreter<APOS/>s ability to deal with such an implicit definition
	depends on the delay resulting from wrapping the call to
	<JAVASCRIPTINLINE>add_streams</JAVASCRIPTINLINE> in a lambda expression.
	Without this delay, the interpreter could not
	construct <SCHEMEINLINE>integ</SCHEMEINLINE> before evaluating the call
	to <SCHEMEINLINE>add_streams</SCHEMEINLINE>, which would require
	that <SCHEMEINLINE>integ</SCHEMEINLINE> already be defined.
	In general, such a delay is crucial for using streams to model
	signal-processing systems that contain loops.  Without a delay,
	our models would have to be formulated so that the inputs to any
	signal-processing component would be fully evaluated before the output
	could be produced.  This would outlaw loops.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <SPLIT>
    <SCHEME>
      <TEXT>
	Unfortunately, stream models of systems with loops may require uses of
	<SCHEMEINLINE>delay</SCHEMEINLINE> beyond the <QUOTE>hidden</QUOTE>
	<SCHEMEINLINE>delay</SCHEMEINLINE> supplied by
	<SCHEMEINLINE>cons-stream</SCHEMEINLINE>.  For instance,
	figure<SPACE/><REF NAME="fig:analog-computer_scheme"/> shows a
	signal-processing system for solving the 
	<INDEX>differential equation</INDEX>
	differential equation <LATEXINLINE>$dy/dt=f(y)$</LATEXINLINE> where
	<LATEXINLINE>$f$</LATEXINLINE> is a given function.  The figure shows a
	mapping component, which applies <LATEXINLINE>$f$</LATEXINLINE> to its
	input signal, linked in a feedback loop to an integrator in a manner
	very similar to that of the analog computer circuits that are actually
	used to solve such equations.
	<FIGURE>
	  <FIGURE web_scale="0.6" src="img_original/ch3-Z-G-52.svg"></FIGURE>
	  <CAPTION>
	    An
	    <INDEX>analog computer</INDEX>
	    <QUOTE>analog computer circuit</QUOTE> that solves the equation
	    <LATEXINLINE>$dy/dt = f(y)$</LATEXINLINE>.
	  </CAPTION>
	  <LABEL NAME="fig:analog-computer_scheme"/>
	</FIGURE>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	Unfortunately, stream models of systems with loops may require uses of a
	delay beyond the stream programming pattern seen so far. For instance,
	figure<SPACE/><REF NAME="fig:analog-computer"/> shows a
	signal-processing system for solving the 
	<INDEX>differential equation</INDEX>
	differential equation <LATEXINLINE>$dy/dt=f(y)$</LATEXINLINE> where
	<LATEXINLINE>$f$</LATEXINLINE> is a given function.  The figure shows a
	mapping component, which applies <LATEXINLINE>$f$</LATEXINLINE> to its
	input signal, linked in a feedback loop to an integrator in a manner
	very similar to that of the analog computer circuits that are actually
	used to solve such equations.
	<FIGURE>
	  <FIGURE web_scale="0.6" src="img_original/ch3-Z-G-52.svg"></FIGURE>
	  <CAPTION>
	    An
	    <INDEX>analog computer</INDEX>
	    <QUOTE>analog computer circuit</QUOTE> that solves the equation
	    <LATEXINLINE>$dy/dt = f(y)$</LATEXINLINE>.
	  </CAPTION>
	  <LABEL NAME="fig:analog-computer"/>
	</FIGURE>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  
  <TEXT>
    Assuming we are given an initial value <LATEXINLINE>$y_0$</LATEXINLINE> for
    <LATEXINLINE>$y$</LATEXINLINE>, we could try to model this system using the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>solve</DECLARATION> differential equation</INDEX>
      <SCHEME>
(define (solve f y0 dt)
  (define y (integral dy y0 dt))
  (define dy (stream-map f y))
  y)
      </SCHEME>
      <JAVASCRIPT>
function solve(f, y0, dt) {
    const y = integral(dy, y0, dt);
    const dy = stream_map(f, y);
    return y;
}
      </JAVASCRIPT>
    </SNIPPET>
    This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    does not work, because in the first line of
    <SCHEMEINLINE>solve</SCHEMEINLINE> the call to
    <SCHEMEINLINE>integral</SCHEMEINLINE> requires that the input
    <SCHEMEINLINE>dy</SCHEMEINLINE> be defined, which does not happen until the
    second line of <SCHEMEINLINE>solve</SCHEMEINLINE>.
  </TEXT>

  <TEXT>
    On the other hand, the intent of our definition does make sense, because we
    can, in principle, begin to generate the <SCHEMEINLINE>y</SCHEMEINLINE>
    stream without knowing <SCHEMEINLINE>dy</SCHEMEINLINE>.
    <SPLITINLINE>
      <SCHEME>
	Indeed, <SCHEMEINLINE>integral</SCHEMEINLINE> and many other stream
	operations have properties similar to those of
	<SCHEMEINLINE>cons-stream</SCHEMEINLINE>, in that we can generate part
	of the answer given only partial information about the arguments.
      </SCHEME>
      <JAVASCRIPT>
	Indeed, <SCHEMEINLINE>integral</SCHEMEINLINE> and many other stream
	operations can generate part of the answer given only partial
	information about the arguments.
      </JAVASCRIPT>
    </SPLITINLINE>
    For <SCHEMEINLINE>integral</SCHEMEINLINE>, the first element of the output
    stream is the specified <SCHEMEINLINE>initial_value</SCHEMEINLINE>.  Thus,
    we can generate the first element of the output stream without evaluating
    the integrand <SCHEMEINLINE>dy</SCHEMEINLINE>.  Once we know the first
    element of <SCHEMEINLINE>y</SCHEMEINLINE>, the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>stream-map</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>stream_map</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in the second line of <SCHEMEINLINE>solve</SCHEMEINLINE> can begin working
    to generate the first element of <SCHEMEINLINE>dy</SCHEMEINLINE>, which will
    produce the next element of <SCHEMEINLINE>y</SCHEMEINLINE>, and so on.
  </TEXT>

  <TEXT>
    To take advantage of this idea, we will redefine
    <SCHEMEINLINE>integral</SCHEMEINLINE> to expect the integrand stream to be a 
    <INDEX>delayed argument</INDEX>
    <INDEX>argument(s)<SUBINDEX>delayed</SUBINDEX></INDEX>
    <INDEX>delayed expression<SUBINDEX>explicit</SUBINDEX></INDEX>
    <EM>delayed argument</EM>.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Integral</SCHEMEINLINE> will
	<SCHEMEINLINE>force</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function <SCHEMEINLINE>integral</SCHEMEINLINE> will force
      </JAVASCRIPT>
    </SPLITINLINE>
    the integrand to be evaluated only when it is required to generate more than
    the first element of the output stream:
    <SNIPPET HIDE="yes">
      <NAME>integral_example_4</NAME>
      <JAVASCRIPT>
function numbers_starting_from(t, dt) {
    return pair(t,
                () => numbers_starting_from(t + dt, dt)
               );
}
const dt = 0.01;	
const linear = numbers_starting_from(0, dt);	       
const linear_integral = integral(() => linear, 0, dt);
// computing integral from 0 to 3 of f(x) = x
// (the integral is g(x) = 0.5 x^2, and therefore
// the result is near 0.5 * 3^2 = 4.5)
stream_ref(linear_integral, math_round(3 / dt));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>integral</DECLARATION><SUBINDEX><ORDER>delayed</ORDER>with delayed argument</SUBINDEX></INDEX>
      <NAME>integral</NAME>
      <REQUIRES>add_streams</REQUIRES>
      <REQUIRES>scale_stream</REQUIRES>
      <EXAMPLE>integral_example_4</EXAMPLE>
      <EXPECTED>4.484999999999992</EXPECTED>
      <SCHEME>
(define (integral delayed-integrand initial-value dt)
  (define int
          (cons-stream initial-value
                       (let ((integrand (force delayed-integrand)))
                         (add-streams (scale-stream integrand dt)
                                      int))))
  int)
      </SCHEME>
    <JAVASCRIPT>
function integral(delayed_integrand, initial_value, dt) {
    const integ =
        pair(initial_value,
             () => {
                 const integrand = delayed_integrand();
                 return add_streams(scale_stream(integrand, dt), 
                                    integ);
             });
    return integ;
}
    </JAVASCRIPT>
    </SNIPPET>
    Now we can implement our <SCHEMEINLINE>solve</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    by delaying the evaluation of <SCHEMEINLINE>dy</SCHEMEINLINE> in the
    <SPLITINLINE>
      <SCHEME>
	definition of
      </SCHEME>
      <JAVASCRIPT>
	declaration of
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>y</SCHEMEINLINE>:<SPLITINLINE><SCHEME><FOOTNOTE>This
    procedure is not guaranteed to work in all Scheme implementations, although
    for any implementation there is a simple variation that will work.  The
    problem has to do with subtle differences in the ways that Scheme
    implementations handle internal definitions. (See
    section<SPACE/><REF NAME="sec:internal-definitions"/>.)</FOOTNOTE>
    </SCHEME></SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>solve</DECLARATION> differential equation</INDEX>
      <NAME>solve</NAME>
      <EXAMPLE>e</EXAMPLE>
      <SCHEME>
(define (solve f y0 dt)
  (define y (integral (delay dy) y0 dt))
  (define dy (stream-map f y))
  y)
      </SCHEME>
      <JAVASCRIPT>
function solve(f, y0, dt) {
    const y = integral( () => dy, y0, dt);
    const dy = stream_map(f, y);
    return y;
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
      </JAVASCRIPT_RUN>
    </SNIPPET>
    In general, every caller of <SCHEMEINLINE>integral</SCHEMEINLINE> must now
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>delay</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>delay</JAVASCRIPT>
    </SPLITINLINE>
    the integrand argument.  We can demonstrate that the
    <SCHEMEINLINE>solve</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    works by approximating 
    <INDEX><ORDER>e</ORDER><LATEXINLINE>$e$</LATEXINLINE><SUBINDEX>as solution to differential equation</SUBINDEX></INDEX>
    <LATEXINLINE>$e\approx 2.718$</LATEXINLINE> by computing the value at
    <LATEXINLINE>$y=1$</LATEXINLINE> of the solution to the differential
    equation <LATEXINLINE>$dy/dt=y$</LATEXINLINE> with initial condition
    <LATEXINLINE>$y(0)=1$</LATEXINLINE>:<SPLITINLINE><JAVASCRIPT><FOOTNOTE>
    To complete in reasonable time, this calculation requires the use of the
    memoization optimization from section<SPACE/><REF NAME="sec:delayed-lists"/> in
    <JAVASCRIPTINLINE>integral</JAVASCRIPTINLINE> and in
    the function <JAVASCRIPTINLINE>add_streams</JAVASCRIPTINLINE> used in
    <JAVASCRIPTINLINE>integral</JAVASCRIPTINLINE>
    (using the function <JAVASCRIPTINLINE>stream_map_2_optimized</JAVASCRIPTINLINE>
    as suggested in
    exercise<SPACE/><REF NAME="ex:fib-stream-efficiency"/>).</FOOTNOTE></JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET HIDE="yes">
      <NAME>solve_optimized</NAME>
      <JAVASCRIPT>
function memo(fun) {	    
    let already_run = false;
    let result = undefined;
    return () => {
                     if (!already_run) {
                         result = fun();
                         already_run = true;
                         return result;
                     } else {
                         return result;
                     }
	         };
}
// note the use of the memoization optimization		 
function stream_combine(f, s1, s2) {
    return is_null(s1) &amp;&amp; is_null(s2)
           ? null
           : is_null(s1) || is_null(s2)
           ? error(null, "unexpected argument -- stream_combine")
           : pair(f(head(s1),head(s2)), 
                  memo(() => stream_combine(f, stream_tail(s1),
                                            stream_tail(s2))));
}
function add_streams(s1, s2) {
    return stream_combine((x1, x2) => x1 + x2, s1, s2);
}
function scale_stream(stream, factor) {
    return stream_map(x => x * factor,
                      stream);
}
// note the use of the memoization optimization		 
function integral(delayed_integrand, initial_value, dt) {
    const integ =
        pair(initial_value,
             memo(() => {
                  const integrand = delayed_integrand();
                  return add_streams(scale_stream(integrand, dt), 
                                     integ);
                 }));
    return integ;
}
function solve(f, y0, dt) {
    const y = integral( () => dy, y0, dt);
    const dy = stream_map(f, y);
    return y;
}	
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET POSTPADDING="no">
      <NAME>e</NAME>
      <REQUIRES>solve_optimized</REQUIRES>
      <EXPECTED>2.716923932235896</EXPECTED>
      <SCHEME>
(stream-ref (solve (lambda (y) y) 1 0.001) 1000)
      </SCHEME>
      <SCHEMEOUTPUT>
2.716924
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
stream_ref(solve(y => y, 1, 0.001), 1000);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2.716923932235896
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    The <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    used above was analogous to the <QUOTE>implicit</QUOTE> definition of the
    infinite stream of integers in
    section<SPACE/><REF NAME="sec:infinite-streams"/>.  Alternatively, we can
    give a definition of <SCHEMEINLINE>integral</SCHEMEINLINE> that is more
    like <SCHEMEINLINE>integers-starting-from</SCHEMEINLINE> (also in
    section<SPACE/><REF NAME="sec:infinite-streams"/>):
    <SNIPPET>
      <INDEX><DECLARATION>integral</DECLARATION><FRAGILE/></INDEX> 
      <SCHEME>
(define (integral integrand initial-value dt)
  (cons-stream initial-value
               (if (stream-null? integrand)
                   the-empty-stream
                   (integral (stream-cdr integrand)
                             (+ (* dt (stream-car integrand))
                                initial-value)
                             dt))))
      </SCHEME>
      <JAVASCRIPT>
function integral(integrand, initial_value, dt) {
    return pair(initial_value,
                is_null(integrand) 
                ? null
                : integral(stream_tail(integrand),
                           dt * head(integrand) + initial_value,
                           dt));
}
      </JAVASCRIPT>
    </SNIPPET>
    When used in systems with loops, this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    has the same problem
    as does our original version of <SCHEMEINLINE>integral</SCHEMEINLINE>.
    Modify the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    so that it expects the <SCHEMEINLINE>integrand</SCHEMEINLINE> as a
    delayed argument and hence can be used in the
    <SCHEMEINLINE>solve</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    shown above.
    <LABEL NAME="ex:integral"/>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:2nd-order"/>
    Consider the problem of designing a signal-processing system to study
    the homogeneous
    <INDEX>differential equation<SUBINDEX>second-order</SUBINDEX></INDEX>
    second-order linear differential equation
    <LATEX>
      \[\begin{array}{lll}
      \dfrac {d^{2} y}{dt^{2}}-a\dfrac{dy}{dt}-by &amp;=&amp; 0
      \end{array}\]
    </LATEX>
    The output stream, modeling <LATEXINLINE>$y$</LATEXINLINE>, is generated by
    a network that contains a loop. This is because the value of
    <LATEXINLINE>$d^{2}y/dt^{2}$</LATEXINLINE> depends upon the values of
    <LATEXINLINE>$y$</LATEXINLINE> and <LATEXINLINE>$dy/dt$</LATEXINLINE> and
    both of these are determined by integrating
    <LATEXINLINE>$d^{2}y/dt^{2}$</LATEXINLINE>.  The diagram we would like to
    encode is shown in figure<SPACE/><REF NAME="fig:2nd-order"/>.  Write a
    <SPLITINLINE>
      <SCHEME>procedure <SCHEMEINLINE>solve-2nd</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>function <JAVASCRIPTINLINE>solve_2nd</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments the constants <LATEXINLINE>$a$</LATEXINLINE>,
    <LATEXINLINE>$b$</LATEXINLINE>, and <LATEXINLINE>$dt$</LATEXINLINE> and the
    initial values <LATEXINLINE>$y_{0}$</LATEXINLINE> and
    <LATEXINLINE>$dy_{0}$</LATEXINLINE> for <LATEXINLINE>$y$</LATEXINLINE> and
    <LATEXINLINE>$dy/dt$</LATEXINLINE> and generates the stream of successive
    values of <LATEXINLINE>$y$</LATEXINLINE>.
    <FIGURE>
      <FIGURE web_scale="0.9" src="img_original/ch3-Z-G-53.svg"></FIGURE>
      <CAPTION>Signal-flow diagram for the solution to a second-order linear
      differential equation.
      </CAPTION>
      <LABEL NAME="fig:2nd-order"/>
    </FIGURE>
  </EXERCISE>

  <EXERCISE>
    Generalize the 
    <INDEX>differential equation<SUBINDEX>second-order</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>solve-2nd</SCHEMEINLINE> procedure</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>solve_2nd</JAVASCRIPTINLINE> function
      </JAVASCRIPT>
    </SPLITINLINE>
    of exercise<SPACE/><REF NAME="ex:2nd-order"/> so that it can be used to
    solve general second-order differential equations
    <LATEXINLINE>$d^{2} y/dt^{2}=f(dy/dt,\, y)$</LATEXINLINE>.
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:rlc_circuit"/>
    A <EM>series RLC circuit</EM>
    <INDEX>RLC circuit</INDEX>
    <INDEX>circuit<SUBINDEX>modeled with streams</SUBINDEX></INDEX>
    <INDEX>electrical circuits, modeled with streams</INDEX>
    consists of a resistor, a capacitor, and an
    inductor connected in series, as shown in
    figure<SPACE/><REF NAME="fig:series-rlc"/>. If
    <LATEXINLINE>$R$</LATEXINLINE>, <LATEXINLINE>$L$</LATEXINLINE>, and
    <LATEXINLINE>$C$</LATEXINLINE> are the resistance, inductance, and
    capacitance, then the relations between voltage
    (<LATEXINLINE>$v$</LATEXINLINE>) and current
    (<LATEXINLINE>$i$</LATEXINLINE>) for the three components are described
    by the equations
    <LATEX>
      \[\begin{array}{lll}
      v_{R} &amp;=&amp; i_{R} R\\[9pt]
      v_{L} &amp;=&amp; L\dfrac{di_{L}}{dt}\\[11pt]
      i_{C} &amp;=&amp; C\dfrac{dv_{C}}{dt}
      \end{array}\]
    </LATEX>
      and the circuit connections dictate the relations
    <LATEX>
      \[\begin{array}{lll}
      i_{R} &amp;=&amp; i_{L}=-i_{C}\\[3pt]
      v_{C} &amp;=&amp; v_{L}+v_{R}
      \end{array}\]
    </LATEX>
    Combining these equations shows that the state of the circuit (summarized by
    <LATEXINLINE>$v_{C}$</LATEXINLINE>, the voltage across the capacitor, and
    <LATEXINLINE>$i_{L}$</LATEXINLINE>, the current in the inductor) is
    described by the pair of differential equations
    <LATEX>
    \[\begin{array}{lll}
    \dfrac{dv_{C}}{dt}  &amp;=&amp; -\dfrac{i_{L}}{C}\\[11pt]
    \dfrac {di_{L}}{dt} &amp;=&amp; \dfrac{1}{L}v_{C}-\dfrac{R}{L}i_{L}
    \end{array}\]
    </LATEX>
    The signal-flow diagram representing this system of differential equations
    is shown in figure<SPACE/><REF NAME="fig:rlc-signal-flow"/>.
    <FIGURE>
      <FIGURE web_scale="0.6" src="img_original/ch3-Z-G-58.svg"></FIGURE>
      <CAPTION>A series RLC circuit.
      </CAPTION>
      <LABEL NAME="fig:series-rlc"/>
    </FIGURE>
    <FIGURE>
      <FIGURE web_scale="0.6" src="img_original/ch3-Z-G-59.svg"></FIGURE>
      <CAPTION>A signal-flow diagram for the solution to a series RLC circuit.
      </CAPTION>
      <LABEL NAME="fig:rlc-signal-flow"/>
    </FIGURE>
    Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>RLC</SCHEMEINLINE> that takes as arguments the parameters
    <LATEXINLINE>$R$</LATEXINLINE>, <LATEXINLINE>$L$</LATEXINLINE>, and
    <LATEXINLINE>$C$</LATEXINLINE> of the circuit and the time increment
    <LATEXINLINE>$dt$</LATEXINLINE>.  In a manner similar to that of the
    <SCHEMEINLINE>RC</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of exercise<SPACE/><REF NAME="ex:rc-circuit"/>,
    <SCHEMEINLINE>RLC</SCHEMEINLINE> should produce a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that takes the initial values of the state variables,
    <LATEXINLINE>$v_{C_{0}}$</LATEXINLINE> and
    <LATEXINLINE>$i_{L_{0}}$</LATEXINLINE>, and produces a pair 
    <SPLITINLINE>
      <SCHEME>(using <SCHEMEINLINE>cons</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT>(using <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    of the streams of states <LATEXINLINE>$v_{C}$</LATEXINLINE> and
    <LATEXINLINE>$i_{L}$</LATEXINLINE>.  Using <SCHEMEINLINE>RLC</SCHEMEINLINE>,
    generate the pair of streams that models the behavior of a series RLC
    circuit with <LATEXINLINE>$R = 1$</LATEXINLINE> ohm,
    <LATEXINLINE>$C= 0.2$</LATEXINLINE> farad,
    <LATEXINLINE>$L = 1$</LATEXINLINE> henry,
    <LATEXINLINE>$dt = 0.1$</LATEXINLINE> second, and initial values
    <LATEXINLINE>$i_{L_{0}} = 0$</LATEXINLINE> amps and
    <LATEXINLINE>$v_{C_{0}} = 10$</LATEXINLINE> volts.
  </EXERCISE>

  <INDEX>stream(s)<SUBINDEX>delayed evaluation and<CLOSE/></SUBINDEX></INDEX>
  <INDEX>delayed evaluation<SUBINDEX>streams and<CLOSE/></SUBINDEX></INDEX>

  <SUBHEADING> 
    <NAME>Normal-order evaluation</NAME>
  </SUBHEADING>

  <INDEX>normal-order evaluation<SUBINDEX>delayed evaluation and</SUBINDEX><OPEN/></INDEX>
  <INDEX>delayed evaluation<SUBINDEX>normal-order evaluation and</SUBINDEX><OPEN/></INDEX>
  
  <TEXT>
    The examples in this section illustrate how
    <SPLITINLINE>
      <SCHEME>the explicit use of
      <SCHEMEINLINE>delay</SCHEMEINLINE> and <SCHEMEINLINE>force</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>delayed evaluation</JAVASCRIPT>
    </SPLITINLINE>
    provides great programming flexibility, but the same examples also show how
    this can make our programs more complex. Our new
    <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    for instance, gives us the power to model systems with loops, but we must
    now remember that <SCHEMEINLINE>integral</SCHEMEINLINE> should be called
    with a delayed integrand, and every
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that  uses <SCHEMEINLINE>integral</SCHEMEINLINE> must be aware of this.
    In effect, we have created two classes of
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <JAVASCRIPT>functions:</JAVASCRIPT>
    </SPLITINLINE>
    ordinary
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that take delayed arguments.  In general, creating separate classes of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    forces us to create separate classes of higher-order
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    as well.<FOOTNOTE>This is a small reflection, in
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    of the difficulties that
    <SPLITINLINE>
      <SCHEME>
	<INDEX>higher-order procedures<SUBINDEX>strong typing and</SUBINDEX></INDEX>
	<INDEX>data types<SUBINDEX>in strongly typed languages</SUBINDEX></INDEX>
	<INDEX>Pascal, lack of higher-order procedures in</INDEX>
	<INDEX>strongly typed language</INDEX>
	<INDEX>programming language<SUBINDEX>strongly typed</SUBINDEX></INDEX>
	conventional strongly
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>higher-order functions<SUBINDEX>static typing and</SUBINDEX></INDEX>
	<INDEX>data types<SUBINDEX>in statically typed languages</SUBINDEX></INDEX>
	<INDEX>Pascal, lack of higher-order functions in</INDEX>
	<INDEX>statically typed language</INDEX>
	<INDEX>programming language<SUBINDEX>statically typed</SUBINDEX></INDEX>
	early statically
      </JAVASCRIPT>
    </SPLITINLINE>
    typed languages such as Pascal
    <SPLITINLINE>
      <SCHEME>have</SCHEME>
      <JAVASCRIPT>had</JAVASCRIPT>
    </SPLITINLINE>
    in coping with higher-order
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    In
    <SPLITINLINE>
      <SCHEME>such</SCHEME>
      <JAVASCRIPT>these</JAVASCRIPT>
    </SPLITINLINE>
    languages, the programmer
    <SPLITINLINE>
      <SCHEME>must</SCHEME>
      <JAVASCRIPT>had to</JAVASCRIPT>
    </SPLITINLINE>
    specify the data types of the
    arguments and the result of each
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    number, logical value, sequence, and so on. Consequently, we could not
    express an abstraction such as <QUOTE>map a given
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fun</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    over all the elements in a sequence</QUOTE> by a single higher-order
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>stream-map</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>stream_map</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Rather, we would need a different mapping
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for each different combination of argument and result data types that might
    be specified for a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fun</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Maintaining a practical notion of <QUOTE>data type</QUOTE> in the presence
    of higher-order
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    raises many difficult issues. One way of dealing with this problem is
    illustrated by the language
    <INDEX>ML</INDEX>
    ML
    <INDEX>Gordon, Michael</INDEX>
    <INDEX>Milner, Robin</INDEX>
    <INDEX>Wadsworth, Christopher</INDEX>
    (<CITATION>Gordon, Milner, and Wadsworth 1979</CITATION>), 
    whose
    <SPLITINLINE>
      <SCHEME><QUOTE>polymorphic data types</QUOTE></SCHEME>
      <JAVASCRIPT><QUOTE>parametrically polymorphic data types</QUOTE></JAVASCRIPT>
    </SPLITINLINE>
    include templates for
    higher-order transformations between data types. Moreover, data types for
    most
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in ML are never explicitly declared by the programmer.  Instead, ML
    includes a 
    <INDEX>type-inferencing mechanism</INDEX>
    <EM>type-inferencing</EM> mechanism that uses information in the environment
    to deduce the data types for newly defined
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <JAVASCRIPT>
	Type classes in Haskell further increase the power
	of type inference for programming practice.
	Today's statically typed languages (such as Java and Go)
	all have parametrically polymorphic data types (also
	called generic types).
      </JAVASCRIPT>
    </SPLITINLINE>
  </FOOTNOTE>
  </TEXT>

  <TEXT>
    One way to avoid the need for two different classes of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    is to make all
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    take delayed arguments.  We could adopt a model of evaluation in which all
    arguments to
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are automatically delayed and arguments are forced only when they are
    actually needed (for example, when they are required by a primitive
    operation).  This would transform our language to use normal-order
    evaluation, which we first described when we introduced the substitution
    model for evaluation in section<SPACE/><REF NAME="sec:substitution-model"/>.
    Converting to normal-order evaluation provides a uniform and elegant way to
    simplify the use of delayed evaluation, and this would be a natural strategy
    to adopt if we were concerned only with stream processing.  In
    section<SPACE/><REF NAME="sec:lazy-evaluation"/>, after we have studied the
    evaluator, we will see how to transform our language in just this way.
    Unfortunately, including delays in
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    calls wreaks havoc with our ability to design programs that depend on the
    order of events, such as programs that use assignment, mutate data, or
    perform input or output.
    <SPLITINLINE>
      <SCHEME>
	Even the single <SCHEMEINLINE>delay</SCHEMEINLINE> in
	<SCHEMEINLINE>cons-stream</SCHEMEINLINE> can cause great confusion, as
	illustrated by exercises<SPACE/><REF NAME="ex:delayed1"/>
	and<SPACE/><REF NAME="ex:delayed2"/>.
      </SCHEME>
      <JAVASCRIPT>
	Even a single delay in the tail of a pair can cause great confusion, as
	illustrated by exercise<SPACE/><REF NAME="ex:delayed1"/>
	and<SPACE/><REF NAME="ex:delayed2"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    As far as anyone knows, mutability and delayed evaluation do not mix well
    in programming
    <SPLITINLINE>
      <SCHEME>
	languages, and devising ways to deal with both of these at
	once is an active area of research.
      </SCHEME>
      <JAVASCRIPT>
	languages.
      </JAVASCRIPT>
    </SPLITINLINE>

    <INDEX>normal-order evaluation<SUBINDEX>delayed evaluation and</SUBINDEX><CLOSE/></INDEX>
    <INDEX>delayed evaluation<SUBINDEX>normal-order evaluation and</SUBINDEX><CLOSE/></INDEX>

  </TEXT>
</SUBSECTION>
