<SUBSECTION>
   <NAME>树形递归</NAME> 

  <LABEL NAME="sec:tree-recursion"></LABEL>
   <INDEX>树形递归过程<OPEN></OPEN></INDEX> 
   <INDEX>过程<SUBINDEX>树形递归<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX>递归过程<SUBINDEX>树形<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    另一种常见的计算模式称为<EM>树形递归</EM>。
    例如，考虑计算
    <INDEX>斐波那契数</INDEX>
    斐波那契数列，
    其中每个数字都是前两个数字的和：
    <LATEX>
      \[\begin{array}{l}
      0, 1, 1, 2, 3, 5, 8, 13, 21, \ldots
      \end{array}\]
    </LATEX>
    一般来说，斐波那契数可以由以下规则定义：
    <LATEX>
      \[\begin{array}{lll}
      \textrm{Fib}(n) &amp; = &amp; \left\{ \begin{array}{ll}
      0   &amp;  \mbox{如果 $n=0$}\\
      1   &amp;  \mbox{如果 $n=1$}\\
      \textrm{Fib}(n-1)+\textrm{Fib}(n-2) &amp; \mbox{否则}
      \end{array}
      \right.
      \end{array}\]
    </LATEX>
    我们可以立即将这个定义转化为一个递归
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算斐波那契数：
    <SNIPPET PAGE="37">
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>树形递归版本</SUBINDEX></INDEX>
      <NAME>fib_definition</NAME>
      <EXAMPLE>fib_example</EXAMPLE>
      <SCHEME>
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) {
    return n === 0
           ? 0
           : n === 1
           ? 1
           : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="37" HIDE="yes">
      <NAME>fib_example</NAME>
      <REQUIRES>fib_definition</REQUIRES>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(fib 6)
      </SCHEME>
      <JAVASCRIPT>
fib(6);
      </JAVASCRIPT>
    </SNIPPET>

      <SPLIT>
        <SCHEME>
	<FIGURE>
          <FIGURE SRC="img_original/ch1-Z-G-13.svg"></FIGURE>
	  <LABEL NAME="fig:fib-tree_scheme"></LABEL>
	  <CAPTION>计算
	  <SCHEMEINLINE>(fib 5)</SCHEMEINLINE>时生成的树形递归过程。
	  </CAPTION>
	</FIGURE>
	</SCHEME>
        <JAVASCRIPT>
	<FIGURE>
          <FIGURE SRC="img_javascript/ch1-Z-G-13.svg"></FIGURE>
	  <LABEL NAME="fig:fib-tree"></LABEL>
	  <CAPTION>计算
	  <JAVASCRIPTINLINE>fib(5)</JAVASCRIPTINLINE>时生成的树形递归过程。
	  </CAPTION>
	</FIGURE>
	</JAVASCRIPT>
      </SPLIT>
  </TEXT> 

   <TEXT>
  考虑这个计算的模式。为了计算
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 5)</SCHEMEINLINE>，</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(5)</JAVASCRIPTINLINE>，</JAVASCRIPT>
  </SPLITINLINE>
  我们计算
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 4)</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(4)</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  和
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 3)</SCHEMEINLINE>。</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(3)</JAVASCRIPTINLINE>。</JAVASCRIPT>
  </SPLITINLINE>
  为了计算
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 4)</SCHEMEINLINE>，</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(4)</JAVASCRIPTINLINE>，</JAVASCRIPT>
  </SPLITINLINE>
  我们计算
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 3)</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(3)</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  和
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(fib 2)</SCHEMEINLINE>。</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>fib(2)</JAVASCRIPTINLINE>。</JAVASCRIPT>
  </SPLITINLINE>
  一般来说，演化出的过程看起来像一棵树，如
  <SPLITINLINE>
    <SCHEME>
      图<SPACE></SPACE><REF NAME="fig:fib-tree_scheme"></REF>所示。
    </SCHEME>
    <JAVASCRIPT>
      图<SPACE></SPACE><REF NAME="fig:fib-tree"></REF>所示。
    </JAVASCRIPT>
  </SPLITINLINE>
  注意，树枝在每一层（底部除外）分成两个，这反映出
  <SCHEMEINLINE>fib</SCHEMEINLINE>
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  每次调用时都会调用自身两次。
</TEXT> 

   <TEXT>
    这个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为典型的树递归是有指导意义的，但它是计算斐波那契数的一种非常糟糕的方法，因为它执行了大量的冗余计算。注意在
    <SPLITINLINE>
      <SCHEME>
	图<SPACE></SPACE><REF NAME="fig:fib-tree_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:fib-tree"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    中，整个
    <SPLITINLINE>
      <SCHEME>
	计算<SCHEMEINLINE>(fib 3)</SCHEMEINLINE><EMDASH></EMDASH>几乎一半的工作<EMDASH></EMDASH>是
      </SCHEME>
      <JAVASCRIPT>
	计算<JAVASCRIPTINLINE>fib(3)</JAVASCRIPTINLINE><EMDASH></EMDASH>几乎一半的工作<EMDASH></EMDASH>是
      </JAVASCRIPT>
    </SPLITINLINE>
    被重复了。事实上，不难证明该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    计算
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(fib 1)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fib(1)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    或
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(fib 0)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>fib(0)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    （上面树中叶节点的数量，一般来说）恰好是
    <LATEXINLINE>$\textrm{Fib}(n+1)$</LATEXINLINE>。为了了解这种情况有多糟糕，可以证明
    <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>
    <INDEX>指数增长<SUBINDEX><ORDER>树递归的</ORDER>树递归斐波那契数计算</SUBINDEX></INDEX>
    随着<LATEXINLINE>$n$</LATEXINLINE>呈指数增长。更准确地说（参见练习<SPACE></SPACE><REF NAME="ex:fib-proof"></REF>），
    <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>是最接近整数的
    <LATEXINLINE>$\phi^{n} /\sqrt{5}$</LATEXINLINE>，其中
    <LATEX>
      \[\begin{array}{lllll}
      \phi &amp;= &amp; (1+\sqrt{5})/2 &amp; \approx &amp; 1.6180
      \end{array}\]
    </LATEX>
    是
    <INDEX>黄金分割比</INDEX>
    <EM>黄金分割比</EM>，满足方程
    <LATEX>
      \[\begin{array}{lll}
      \phi^{2} &amp;= &amp; \phi + 1
      \end{array}\]
    </LATEX>
    因此，该过程使用的步骤数量随输入呈指数增长。另一方面，所需的空间只随输入线性增长，因为我们只需要在计算过程中的任意时刻跟踪树中位于我们上方的那些节点。一般来说，一个树递归过程所需的步骤数量与树中节点数成正比，而所需空间与树的最大深度成正比。
  </TEXT> 

   <TEXT>
    我们也可以制定一个计算斐波那契数的迭代过程。其思想是使用一对整数
    <LATEXINLINE>$a$</LATEXINLINE>
    和
    <LATEXINLINE>$b$</LATEXINLINE>，初始值分别为
    <LATEXINLINE>$\textrm{Fib}(1)=1$</LATEXINLINE>和
    <LATEXINLINE>$\textrm{Fib}(0)=0$</LATEXINLINE>，然后反复应用同时变换
    <LATEX>
      \[\begin{array}{lll}
      a &amp; \leftarrow &amp; a+b \\
      b &amp; \leftarrow &amp; a
      \end{array}\]
    </LATEX>
    不难证明，在应用该变换
    <LATEXINLINE>$n$</LATEXINLINE>次之后，
    <LATEXINLINE>$a$</LATEXINLINE>和
    <LATEXINLINE>$b$</LATEXINLINE>
    分别等于
    <LATEXINLINE>$\textrm{Fib}(n+1)$</LATEXINLINE>和
    <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>。因此，我们可以使用以下
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    迭代计算斐波那契数：
    <SNIPPET PAGE="39">
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>线性迭代版本</SUBINDEX></INDEX>
      <EXAMPLE>fib_example</EXAMPLE>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) {
    return fib_iter(1, 0, n);
}
function fib_iter(a, b, count) {
    return count === 0
           ? b
           : fib_iter(a + b, a, count - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    这种计算
    <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>
    的第二种方法是线性迭代方法。两种方法所需步骤数量的差异——一种随
    <LATEXINLINE>$n$</LATEXINLINE>线性增长，另一种则以
    <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>本身的速度增长——即使对较小的输入，差异也是巨大的。
  </TEXT> 

   <TEXT>
    不应该因此断言树形递归过程是无用的。当我们考虑作用于层次结构数据而非数字的过程时，会发现树形递归是一种自然且强大的工具。<FOOTNOTE>这方面的一个例子已在第<SPACE></SPACE><REF NAME="sec:evaluating-combinations"></REF>节中有所暗示：解释器本身就是使用树形递归过程来计算表达式的。</FOOTNOTE>但即使在数值运算中，树形递归过程也有助于我们理解和设计程序。例如，尽管第一个
    <SCHEMEINLINE>fib</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    比第二个效率低得多，但它更直接，几乎只是对斐波那契数列定义的
    <SPLITINLINE>
      <SCHEME>
        Lisp
      </SCHEME>
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    的翻译。要构思迭代算法，就需要注意到计算可以重构为具有三个状态变量的迭代。
  </TEXT> 

   <SUBHEADING>
    <NAME>示例：计算零钱</NAME>
  </SUBHEADING> 
   <INDEX>计算零钱<OPEN></OPEN></INDEX> 

   <TEXT>
    仅需要一些巧思就能想出迭代斐波那契算法。相反，请考虑以下问题：
    有多少种不同的方法可以用半美元、四分之一美元、一角、五分和一分来找零
    <SPLITINLINE>
      <SCHEME>
	<LATEXINLINE>\$1.00</LATEXINLINE>，
      </SCHEME>
      <JAVASCRIPT>
	<DOLLAR></DOLLAR>1.00（100 美分），
      </JAVASCRIPT>
    </SPLITINLINE>
    它们分别是 50 美分、25 美分、10 美分、5 美分和 1 美分？
    更一般地，能否写一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算任何给定金额的找零方法数？
  </TEXT> 

   <TEXT>
    该问题有一个简单的递归
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    解决方案。假设我们将可用的硬币种类按某种顺序排列。
    则以下关系成立：
    <BLOCKQUOTE>
    使用
    <LATEXINLINE>$n$</LATEXINLINE> 种硬币换取金额 <LATEXINLINE>$a$</LATEXINLINE> 的方法数等于
    <UL>
      <LI>
        使用除了第一种硬币以外的所有硬币换取金额 <LATEXINLINE>$a$</LATEXINLINE> 的方法数，加上
      </LI>
      <LI>
        使用所有 <LATEXINLINE>$n$</LATEXINLINE> 种硬币换取金额 <LATEXINLINE>$a-d$</LATEXINLINE> 的方法数，
	其中 <LATEXINLINE>$d$</LATEXINLINE> 是第一种硬币的面值。
      </LI>
    </UL>
    </BLOCKQUOTE>
  </TEXT> 

   <TEXT>
    要理解这一点，观察找零的方法可以分为两类：一类是不使用第一种硬币，另一类是使用第一种硬币。因此，找零某个金额的方法总数等于不使用第一种硬币找零该金额的方法数，加上使用第一种硬币找零该金额的方法数。而后一种方法数等于使用一枚第一种硬币后剩余金额的找零方法数。
  </TEXT> 

   <TEXT>
    因此，我们可以递归地将找零给定金额的问题化简为找零较小金额或使用较少种类硬币的问题。仔细考虑这个化简规则，并确信如果我们指定以下退化情况，我们可以用它来描述一个算法：<FOOTNOTE>例如，详细推导如何运用该化简规则解决用便士和五分镍币找零10美分的问题。</FOOTNOTE>

    <UL>
      <LI>
        如果 <LATEXINLINE>$a$</LATEXINLINE> 恰好为0，我们应将其计为一种找零方法。
      </LI>
      <LI>
        如果 <LATEXINLINE>$a$</LATEXINLINE> 小于0，我们应将其计为零种找零方法。
      </LI>
      <LI> 如果 <LATEXINLINE>$n$</LATEXINLINE> 是0，我们应将其计为零种找零方法。
      </LI>
    </UL>
    我们可以很容易地将这一描述翻译成递归的
    <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>

    <SNIPPET PAGE="40-41">
      <INDEX><DECLARATION>count_change</DECLARATION></INDEX>
      <NAME>count_change_definition</NAME>
      <EXAMPLE>count_change_example</EXAMPLE>
      <SCHEME>
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (&lt; amount 0)
             (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination
                         kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
      </SCHEME>
      <JAVASCRIPT>
function count_change(amount) {
    return cc(amount, 5);
}
<SHORT_SPACE></SHORT_SPACE>
function cc(amount, kinds_of_coins) {
    return amount === 0
           ? 1
           : amount &lt; 0 || kinds_of_coins === 0
           ? 0
           : cc(amount, kinds_of_coins - 1)
             +
             cc(amount - first_denomination(kinds_of_coins),
                kinds_of_coins);
}
<SHORT_SPACE_AND_ALLOW_BREAK></SHORT_SPACE_AND_ALLOW_BREAK>
function first_denomination(kinds_of_coins) {
    return kinds_of_coins === 1 ? 1
         : kinds_of_coins === 2 ? 5
         : kinds_of_coins === 3 ? 10
         : kinds_of_coins === 4 ? 25
         : kinds_of_coins === 5 ? 50
         : 0;   
}
      </JAVASCRIPT>
    </SNIPPET>
    （
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>first-denomination</SCHEMEINLINE> 过程
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>first_denomination</JAVASCRIPTINLINE> 函数
      </JAVASCRIPT>
    </SPLITINLINE>
    接受可用硬币种类数作为输入，并返回第一种硬币的面值。这里我们将硬币按从大到小排序，但任何顺序都可。）我们现在可以回答最初关于兑换一美元的问题：

    <SNIPPET PAGE="41">
      <NAME>count_change_example</NAME>
      <REQUIRES>count_change_definition</REQUIRES>
      <EXPECTED>292</EXPECTED>
      <SCHEME>
(count-change 100)
      </SCHEME>
      <SCHEMEOUTPUT>
292	    
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
count_change(100);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
292
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT> 

   <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>count-change</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	函数 <JAVASCRIPTINLINE>count_change</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    生成了一个具有冗余的树形递归过程，其冗余类似于我们最初实现的 <SCHEMEINLINE>fib</SCHEMEINLINE> 中的情况。
    <SPLITINLINE>
      <SCHEME>
	（计算
	<SPLITINLINE>
	  <SCHEME>292</SCHEME>
	  <JAVASCRIPT>293</JAVASCRIPT>
	</SPLITINLINE>
	需要相当长的时间。）
      </SCHEME>
    </SPLITINLINE>
    另一方面，如何设计一个更好的算法来计算结果并不明显，我们将此问题作为挑战留给读者。观察到一个
    <INDEX>效率<SUBINDEX><ORDER>树形递归过程</ORDER></SUBINDEX></INDEX>
    树形递归过程可能非常低效，但通常易于指定和理解，这促使人们提出可以通过设计一个
    <QUOTE>智能编译器</QUOTE>
    来同时获得两者的优点，该编译器可以将树形递归
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    转换为更高效的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    并计算相同的结果。<FOOTNOTE>应对冗余计算的一种方法是安排在计算时自动构造一个数值表。每当我们被要求对某个参数应用
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    时，我们首先检查该值是否已存储在表中，在这种情况下，我们避免执行冗余计算。这种策略被称为
    <INDEX>表格法</INDEX>
    <EM>表格法</EM>或
    <INDEX>记忆化</INDEX>
    <EM>记忆化</EM>，可以用简单的方式实现。表格法有时可以将需要指数级步骤的过程
    <SPLITINLINE>
      <SCHEME>
	（如 <SCHEMEINLINE>count-change</SCHEMEINLINE>）
      </SCHEME>
      <JAVASCRIPT>
	（如 <JAVASCRIPTINLINE>count_change</JAVASCRIPTINLINE>）
      </JAVASCRIPT>
    </SPLITINLINE>
    转换为空间和时间需求随输入线性增长的过程。见练习<SPACE></SPACE><REF NAME="ex:memoization"></REF>。</FOOTNOTE>
    <INDEX>树形递归过程<CLOSE></CLOSE></INDEX>
    <INDEX>过程<SUBINDEX>树形递归<CLOSE></CLOSE></SUBINDEX></INDEX>
    <INDEX>递归过程<SUBINDEX>树形<CLOSE></CLOSE></SUBINDEX></INDEX>
    <INDEX>找零计数<CLOSE></CLOSE></INDEX>
  </TEXT> 

   <EXERCISE>
    函数 <LATEXINLINE>$f$</LATEXINLINE> 由以下
    <SPLITINLINE>
      <SCHEME>
	规则定义
      </SCHEME>
      <JAVASCRIPT>
	规则
      </JAVASCRIPT>
    </SPLITINLINE>
    如果 <LATEXINLINE>$n &lt; 3$</LATEXINLINE>，则 <LATEXINLINE>$f(n)=n$</LATEXINLINE>，如果
    <LATEXINLINE>$n\ge 3$</LATEXINLINE>，则 <LATEXINLINE>$f(n)={f(n-1)}+2f(n-2)+3f(n-3)$</LATEXINLINE>。
    编写一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>JavaScript函数</JAVASCRIPT>
    </SPLITINLINE>
    通过递归过程计算 <LATEXINLINE>$f$</LATEXINLINE>。
    编写一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过迭代过程计算 <LATEXINLINE>$f$</LATEXINLINE>。
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>example_1.12_1</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>
// 迭代函数
function f_iterative(n) {
    return n &lt; 3
           ? n
           : f_iterative_impl(2, 1, 0, n - 2);
}
function f_iterative_impl(a, b, c, count) {
    return count === 0
           ? a
           : f_iterative_impl(a + 2 * b + 3 * c, a, b, count - 1);
}
	</JAVASCRIPT>
      </SNIPPET>

      <SNIPPET>
	<EXAMPLE>example_1.12_2</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>
// 递归函数
function f_recursive(n) {
    return n &lt; 3
           ? n
           : f_recursive(n - 1) +
	     2 * f_recursive(n - 2) +
	     3 * f_recursive(n - 3);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>      
    <SNIPPET HIDE="yes">
      <NAME>example_1.12_1</NAME>
      <JAVASCRIPT>
f_iterative(5);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>example_1.12_2</NAME>
      <JAVASCRIPT>
f_recursive(5);
      </JAVASCRIPT>
    </SNIPPET>
    <LABEL NAME="ex:1_11"></LABEL>
  </EXERCISE> 

   <EXERCISE>
    下列数字模式称为
    <INDEX>帕斯卡三角形</INDEX>
    <EM>帕斯卡三角形</EM>。
    <LATEX>
      \[
      {
      \begin{array}{rrrrcrrrr}
      &amp;   &amp;   &amp;   &amp; 1 &amp;   &amp;   &amp;   &amp;     \\
      &amp;   &amp;   &amp;1  &amp;   &amp;1  &amp;   &amp;   &amp;     \\
      &amp;   &amp;1  &amp;   &amp; 2 &amp;   &amp;1  &amp;   &amp;     \\
      &amp;1  &amp;   &amp;3  &amp;   &amp;3  &amp;   &amp;1  &amp;     \\
      1  &amp;   &amp; 4 &amp;   &amp; 6 &amp;   &amp; 4 &amp;   &amp; 1   \\
      &amp;   &amp;   &amp;   &amp; \ldots &amp; &amp; &amp; &amp; 
      \end{array}}
      \]
    </LATEX>
    三角形边缘上的数字全是 1，三角形内部的每个数字是其上方两个数字之和。<FOOTNOTE>帕斯卡三角形的元素称为 <EM>二项式系数</EM>，因为第 <LATEXINLINE>$n$</LATEXINLINE> 行由
    <INDEX>二项式系数</INDEX>
    组成，即 <LATEXINLINE>$(x+y)^n$</LATEXINLINE> 展开项的系数。
    这种计算系数的模式出现在
    <INDEX><ORDER>帕斯卡</ORDER>布莱兹·帕斯卡</INDEX> 1653 年关于概率论的奠基著作
    <EM>算术三角形讲义</EM> 中。
    据
    <INDEX>安东尼·威廉·费尔班克·爱德华兹</INDEX>
    爱德华兹（2019 年）介绍，同样的模式还出现在十一世纪波斯数学家
    <INDEX>阿尔-卡拉吉</INDEX>
    阿尔-卡拉吉、十二世纪印度数学家
    <INDEX>巴斯卡拉</INDEX>
    巴斯卡拉和十三世纪中国数学家
    <INDEX>杨辉</INDEX>
    杨辉的著作中。
  </FOOTNOTE>
    编写一个
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过递归过程计算帕斯卡三角形的元素。
    <SOLUTION>                
      <SNIPPET>
	<NAME>pascal_triangle</NAME>
        <EXAMPLE>example_1.13</EXAMPLE>
        <JAVASCRIPT>
function pascal_triangle(row, index) {
    return index &gt; row
           ? false
           : index === 1 || index===row
             ? 1
             : pascal_triangle(row - 1, index - 1)
	       +
	       pascal_triangle(row - 1, index);
}
        </JAVASCRIPT>
        <SCHEME>
        </SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.13</NAME>
      <REQUIRES>pascal_triangle</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <JAVASCRIPT>
pascal_triangle(5, 4);
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
    <LABEL NAME="ex:1_12"></LABEL>
  </EXERCISE> 

   <EXERCISE>
    证明 <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE> 是 <LATEXINLINE>$\phi^n/\sqrt{5}$</LATEXINLINE> 的最接近的整数，其中
    <LATEXINLINE>$\phi= (1+\sqrt{5})/2$</LATEXINLINE>。
    <SPLIT>
      <SCHEME>
	提示：设
	<LATEXINLINE>$\psi= (1-\sqrt{5})/2$</LATEXINLINE>。利用归纳法和斐波那契数的定义（参见第<SPACE></SPACE><REF NAME="sec:tree-recursion"></REF>节）证明
	<LATEXINLINE>$\textrm{Fib}(n)=(\phi^n-\psi^n)/\sqrt{5}$</LATEXINLINE>。
      </SCHEME>
      <JAVASCRIPT>
	提示：利用归纳法和斐波那契数的定义证明
	<LATEXINLINE>$\textrm{Fib}(n)=(\phi^n-\psi^n)/\sqrt{5}$</LATEXINLINE>，
	其中
	<LATEXINLINE>$\psi= (1-\sqrt{5})/2$</LATEXINLINE>。
      </JAVASCRIPT>
    </SPLIT>
    <LABEL NAME="ex:fib-proof"></LABEL>
    <SOLUTION>
      首先，使用强归纳法证明
      <LATEXINLINE>$\textrm{Fib}(n) =
      \dfrac{\phi^n-\psi^n}{\sqrt{5}}$</LATEXINLINE>，
      其中
      <LATEXINLINE>$\psi = \dfrac{1-\sqrt{5}}{2}$</LATEXINLINE>。
      <BR></BR>
      <LATEXINLINE>$\textrm{Fib}(0) = 0$</LATEXINLINE>
      且
      <LATEXINLINE>$\dfrac{\phi^0-\psi^0}{\sqrt{5}} = 0$</LATEXINLINE>
      <BR></BR>
      <LATEXINLINE>$\textrm{Fib}(1) = 1$</LATEXINLINE>
      且
      <LATEXINLINE>$\dfrac{\phi^1-\psi^1}{\sqrt{5}} =
      \dfrac{\dfrac{1}{2}\left(1+\sqrt{5} - 1 + \sqrt{5}\right)}{\sqrt{5}} = 1$
      </LATEXINLINE>
      <BR></BR>
      因此该命题对 <LATEXINLINE>$n=0,1$</LATEXINLINE> 成立。
      给定 <LATEXINLINE>$n \geq 1$</LATEXINLINE>，假设命题对 <LATEXINLINE>$0, 1, \dots , n$</LATEXINLINE> 成立。
      <BR></BR>
      <LATEXINLINE>$\textrm{Fib}(n+1) =
      \textrm{Fib}(n) + \textrm{Fib}(n-1) =
      \dfrac{\phi^n-\psi^n + \phi^{n-1} - \psi^{n-1}}{\sqrt{5}}$</LATEXINLINE>
      <BR></BR>
      <LATEXINLINE>$= \dfrac{\phi^{n-1}(\phi + 1) -
      \psi^{n-1}(\psi + 1)}{\sqrt{5}}$
      </LATEXINLINE>
      <BR></BR>
      <LATEXINLINE>$=\dfrac{\phi^{n-1}(\phi^2) - \psi^{n-1}(\psi^2)}{\sqrt{5}}
      = \dfrac{\phi^{n+1} - \psi^{n+1}}{\sqrt{5}}$</LATEXINLINE>，
      因此命题成立。
      <BR></BR>
      注意由于 <LATEXINLINE>$|\psi| &lt; 1$</LATEXINLINE> 且
      <LATEXINLINE>$\sqrt{5} &gt; 2$</LATEXINLINE>，有
      <LATEXINLINE>$\left|\dfrac{\psi^n}{\sqrt{5}}\right| &lt;
      \dfrac{1}{2}$</LATEXINLINE>
      <BR></BR>
      因此最接近
      <LATEXINLINE>$\textrm{Fib}(n) + \dfrac{\psi^n}{\sqrt{5}} =
      \dfrac{\phi^n}{\sqrt{5}}$</LATEXINLINE>的整数是
      <LATEXINLINE>$\textrm{Fib}(n)$</LATEXINLINE>。
    </SOLUTION>
  </EXERCISE> 

</SUBSECTION>
