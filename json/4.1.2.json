[{"id":"/sicpjs/4.1.2","tag":"TITLE","body":"4.1.2  \n    Representing\n    \n      \n      Components"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n\tProgrammers write programs as text, i.e. sequences of characters, entered\n\tin a programming environment or a text editor. To run our evaluator, we need\n\tto start with a representation of this program text as a JavaScript value.\n\tIn section ","tag":"#text"},{"tag":"REF","body":"2.3.1","href":"/sicpjs/2.3.1"},{"body":" we introduced strings to represent\n\ttext. We would like to evaluate programs such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"const size = 2; 5 * size;\""},{"body":"\n\tfrom section ","tag":"#text"},{"tag":"REF","body":"1.1.2","href":"/sicpjs/1.1.2"},{"body":".\n\tUnfortunately, such program text does not provide enough structure to\n\tthe evaluator. In this example, the program parts\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"size = 2\""},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"5 * size\""},{"body":" look similar, but carry\n\tvery different meanings. Abstract syntax functions such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"declaration_value_expression"},{"body":" would be\n\tdifficult\n\tand error-prone to implement by examining the program text.\n\tIn this section, we therefore\n\tintroduce a function \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" that translates program text\n\tto a ","tag":"#text"},{"tag":"EM","child":[{"body":"tagged-list representation","tag":"#text"}]},{"body":", reminiscent of\n\tthe tagged data of section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":".\n\tFor example, the application of \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" to the program string\n\tabove produces a data structure that\n\treflects the structure of the program: a sequence consisting \n\tof a constant declaration associating the name\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"size"},{"body":"  with the value 2\n\tand a multiplication.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAHAQwCcBnAUwAoAiAYwHsA7MgF1DIEsAvC0AXlDYA3KACsoAFQceFYTQCUwoA","body":"parse(\"const size = 2; 5 * size;\"); ","output":"list(\"sequence\",\n     list(list(\"constant_declaration\",\n               list(\"name\", \"size\"), list(\"literal\", 2)),\n          list(\"binary_operator_combination\", \"*\",\n               list(\"literal\", 5), list(\"name\", \"size\"))))"},{"body":"\n\tThe syntax functions used by the evaluator access the tagged-list\n\trepresentation produced by \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":".\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The evaluator is reminiscent of the\n    \n    symbolic differentiation program\n    discussed in section ","tag":"#text"},{"tag":"REF","body":"2.3.2","href":"/sicpjs/2.3.2"},{"body":".\n    Both programs operate on symbolic\n    data.\n    In both programs, the\n    result of operating on \n    an object\n    is determined by\n    operating recursively on the pieces of the\n    object\n    and combining\n    the results in a way that depends on the type of the\n    object.\n    In both programs we used \n    \n    data abstraction to decouple the general rules\n    of operation from the details of how\n    the objects\n    are represented.  In\n    the differentiation program this meant that the same differentiation\n    function\n    could deal with algebraic expressions in prefix form, in\n    infix form, or in some other form.  For the evaluator, this means that\n    \n\tthe syntax of the language being evaluated is determined\n\tsolely by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" and\n\tthe functions that classify and extract pieces of the\n\ttagged lists produced by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":".\t\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch4-parse-abstraction.svg","id":"#fig-4.2","captionHref":"/sicpjs/4.1.2#fig-4.2","captionName":"Figure 4.2 ","captionBody":[{"body":"Syntax abstraction in the evaluator.","tag":"#text"}]},{"body":"\n\tFigure ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.1.2#fig-4.2"},{"body":" depicts the\n\t\n\tabstraction barrier\n\tformed by the syntax predicates and selectors,\n\twhich interface the evaluator to the tagged-list representation of programs,\n\twhich in turn is separated from the string representation by \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":". Below we\n\tdescribe the parsing of program components and list the\n\tcorresponding syntax predicates and selectors, as well as\n\tconstructors if they are needed.\n      ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Literal expression","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n\tLiteral expressions\n\t\n\tare parsed into tagged lists with\n\ttag ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"literal\""},{"body":" and\n\tthe actual value.\n\t","tag":"#text"},{"body":"\n\t    \\[\n      \\begin{align*}\n\t    \\ll\\ \\mathit{literal}\\textit{-}\\mathit{expression}\\ \\gg & = \n\t    \\texttt{list(\"literal\", }\\mathit{value}\\texttt{)}\n\t    \\end{align*}\n      \\]\n\t  ","tag":"LATEX"},{"body":"\n\t  where ","tag":"#text"},{"tag":"META","body":"value"},{"body":" is\n\t  the JavaScript value represented by the\n\t  ","tag":"#text"},{"tag":"META","body":"literal-expression"},{"body":" string.\n\t  Here ","tag":"#text"},{"body":"$\\ll\\ $","tag":"LATEX"},{"tag":"META","body":"literal-expression"},{"body":"$\\ \\gg$","tag":"LATEX"},{"body":" denotes the\n\t  result of parsing the string ","tag":"#text"},{"tag":"META","body":"literal-expression"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAHAQwCcBnAUwAoAiDAbhoEp6g","body":"parse(\"1;\"); ","output":"list(\"literal\", 1)"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAHAQwCcBnAUwAoAiAcgAsKAbZge1AHc2TmATOgG4aASkFA","body":"parse(\"'hello world';\"); ","output":"list(\"literal\", \"hello world\")"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAHAQwCcBnAUwAoAiAOwFcAbJgbhoEpWg","body":"parse(\"null;\"); ","output":"list(\"literal\", null)"},{"body":"\n\tThe syntax predicate for literal expressions is \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_literal"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFiEKbiM2AT8nF209Q2NTc0sWdi4+QWEcgMVQACI0jKz6zWi4hMpaeibMgWYANyyibhrnQN1C-UMTMwsvbh8Rdips8X9x1zbY-HESRgpQCQBPayMaDkyJUCDQGyNGUfqKIxHI0AxI1ui9g6PTl4jZgHNjpCQuG6gIQHZgmAgiaEUWHceEnM4XK5KDCaJQABm2Vl6WREaMB6hBYLykSAA","body":"function is_literal(component) {\n    return is_tagged_list(component, \"literal\");\n} "},{"body":"\n\tIt is defined in terms of the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_tagged_list"},{"body":",\n\twhich identifies lists that begin with a designated\n\tstring:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffCt2Lj5BYREhRlEAIhI2CW5MpUyAD0zNQpy80sigA","body":"function is_tagged_list(component, the_tag) {\n    return is_pair(component) && head(component) === the_tag;\n} "},{"body":"\n\tThe second element of the list that results from parsing a literal expression\n\tis its actual JavaScript value.\n\tThe selector for retrieving the value is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"literal_value"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AGyooFMAnAQwYH0A3LoiwAUZGgFsADnRYkKASlABvUCtC5VoNiwpE29ABYsOAEyEUOVBiPFSSM+XIDcuAL74mrTj34NBQiRxsAM7CAEQkRAwMjqFyTkA","body":"function literal_value(component) {    \n    return head(tail(component));\n} "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAbASwBcBTAJwEMCB9ANxoFcyAKAByooGc2AiAHZMCBANx8AlBNFA","body":"literal_value(parse(\"null;\")); ","output":"null"},{"body":"\n\tIn the rest of this section, we just list the syntax predicates and selectors,\n\tand omit their declarations if they just access the obvious list elements.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tWe provide a constructor for literals, which will come in handy:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0AbKitgJyZcAFADchRNgEpQAb1yhFofmwpF+9HgGcKwgEQ8+grnoA0ocV0lSA3LgC+QA","body":"function make_literal(value) {\n    return list(\"literal\", value);\n} "}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Names","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The tagged-list representation for\n    \n    names includes the tag ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"name\""},{"body":" as first\n    element and the string representing the name as second element.\n    ","tag":"#text"},{"body":"\n    \\[\n\t  \\begin{align*}\n\t  \\ll\\ \\mathit{name}\\ \\gg & = \n\t  \\texttt{list(\"name\", }\\mathit{symbol}\\texttt{)}\n\t  \\end{align*}\n    \\]\n\t","tag":"LATEX"},{"body":"\n\twhere ","tag":"#text"},{"tag":"META","body":"symbol"},{"body":" is a string\n\tthat contains the characters that make up the\n\t","tag":"#text"},{"tag":"META","body":"name"},{"body":" as written in the program.\n    \n\tThe syntax predicate for names is \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_name"},{"body":".\n\t    \n\tThe symbol is accessed using the selector \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"symbol_of_name"},{"body":".\t\n\t    \n\t    We provide a constructor for names, to be used by\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"operator_combination_to_application"},{"body":":\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajpQCTYAa3USNgluEUYATwkAIxoBbT1DY1NzeiFGUQAiLJyGpQLi0s1ouNxxEnqU-OZm9Xq2Cm4c+VAg0BsjRlyGgA9Ihq7cXiYpATZ8kSsRkQkhkeYxianXDa3GHb28wpKBZhoCYezck4+c8-ZLlyaLpAA","body":"function make_name(symbol) {\n    return list(\"name\", symbol);\n} "}]},{"tag":"SUBHEADING","id":"#h3","child":[{"body":"Expression statements","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    We do not need to distinguish between expressions and\n    \n    expression statements.\n    Consequently, \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" can ignore the difference\n    between the two kinds of components:\n    ","tag":"#text"},{"body":"\n\t  \\[\n    \\ll\\ \\mathit{expression}\\texttt{;}\\ \\gg {=} \\ll\\ \\mathit{expression}\\ \\gg\n    \\]\n\t","tag":"LATEX"}]},{"tag":"SUBHEADING","id":"#h4","child":[{"body":"Function applications","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Function applications\n    \n    are parsed as follows:\n    ","tag":"#text"},{"body":"\n    \\[\n    \\ll\\ \\mathit{fun}\\textit{-}\\mathit{expr}\\texttt{(}\\mathit{arg}\\textit{-}\\mathit{expr}_1\\texttt{, }\\ldots\\texttt{, } \\mathit{arg}\\textit{-}\\mathit{expr}_n \\texttt{)}\\ \\gg \\\\\n    = \\\\\n    \\texttt{list(\"application\",} \\ll\\ \\mathit{fun}\\textit{-}\\mathit{expr}\\gg\\texttt{, list(} \\ll\\ \\mathit{arg}\\textit{-}\\mathit{expr}_1\\;\\gg \\texttt{, }\\ldots\\texttt{, } \\ll\\ \\mathit{arg}\\textit{-}\\mathit{expr}_n\\;\\gg \\texttt{))}\n    \\]\n\t","tag":"LATEX"},{"body":"\n    We declare\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_application"},{"body":"\n    as the syntax predicate and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_expression"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"arg_expressions"},{"body":" as the selectors.\n    \n    We add a constructor for function applications, to be used by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"operator_combination_to_application"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":9,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFhI2CW4-JxdtPUNjU3NLFnYuPkFhLIDFUAAiNIzazWi4wlJKWnoJNgBrdTYpKSEyNiSSEQSOumZuAA8pE0ZGTqU2Iw4iDPkZ+cXlukZc-UMTMwtQIUZRWoGhqhGx2oVj-NfXybGdhe4lldA1jZbChfPadQ4tfDiEhXUASACezAa6iuo24QNAQVANiMjEytVmkSa0V4TCGbDhIisSJE8MR6WR7AoaJyzVwJMYZIpjDhEgARjQBMwaAQ6RkaQikcwUUygZpmkA","body":"function make_application(function_expression, argument_expressions) {\n    return list(\"application\",\n                function_expression, argument_expressions);\n} "}]},{"tag":"SUBHEADING","id":"#h5","child":[{"body":"Conditionals","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Conditional expressions\n    \n    are parsed as follows:\n      ","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n$\\ll\\ \\mathit{predicate}\\ \\texttt{?}\\ \\mathit{consequent}\\textit{-}\\mathit{expression}\\ \\texttt{:}\\ \\mathit{alternative}\\textit{-}\\mathit{expression}\\ \\gg\\ \\ = $\n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"conditional_expression\", \n     $\\ll\\ $$predicate$$\\ \\gg$,\n     $\\ll\\ $$consequent$-$expression$$\\ \\gg$,\n     $\\ll\\ $$alternative$-$expression$$\\ \\gg$)\n\t  "},{}]},{"body":"\n    Similarly, conditional statements are parsed as follows:\n      ","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n$\\ll\\ \\textbf{if}\\ \\texttt{(} \\mathit{predicate} \\texttt{)}\\ \\mathit{consequent}\\textit{-}\\mathit{block}\\ \\textbf{else}\\ \\mathit{alternative}\\textit{-}\\mathit{block}\\ \\gg\\ \\ =$\n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"conditional_statement\", \n     $\\ll\\ $$predicate$$\\ \\gg$,\n     $\\ll\\ $$consequent$-$block$$\\ \\gg$,\n     $\\ll\\ $$alternative$-$block$$\\ \\gg$)\n\t  "},{}]},{"body":"\n      The syntax predicate\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_conditional"},{"body":"\n      returns true for both kinds of conditionals, and the selectors\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conditional_predicate"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conditional_consequent"},{"body":", and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conditional_alternative"},{"body":"\n      can be applied to both kinds.\n\t    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h6","child":[{"body":"Lambda expressions","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    A lambda expression\n    \n    whose body is an expression is parsed as if the\n    body consisted of a block containing a single return statement whose\n    return expression is the body of the lambda expression.\n    ","tag":"#text"},{"body":"\n\\[\n \\ll\\ \\texttt{(}\\mathit{name}_1\\texttt{, }\\ldots\\texttt{, } \\mathit{name}_n \\texttt{) =>}\\ \\mathit{expression}\\ \\gg \\\\\n = \\\\\n \\ll\\ \\texttt{(}\\mathit{name}_1\\texttt{, }\\ldots\\texttt{, } \\mathit{name}_n \\texttt{) => \\{}\\ \\textbf{return} \\ \\mathit{expression}\\texttt{;}\\ \\texttt{\\}}\\ \\gg\n\\]\n\t","tag":"LATEX"},{"body":"A lambda expression whose body is a block is parsed as follows:\n\t\t","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n$\\ll\\ \\texttt{(}\\mathit{name}_1\\texttt{, }\\ldots\\texttt{, } \\mathit{name}_n \\texttt{) =>}\\ \\mathit{block}\\ \\gg\\ \\ =$\n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"lambda_expression\",\n     list($\\ll\\ name_1\\;\\gg$, $\\ldots$, $\\ll\\ name_n\\;\\gg$),\n     $\\ll\\ block\\ \\gg$)\n\t  "},{}]},{"body":"\nThe syntax predicate is\n","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_lambda_expression"},{"body":"\n\tand the selector for the body of the lambda expression is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lambda_body"},{"body":".\n\tThe selector for the parameters, called\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lambda_parameter_symbols"},{"body":",\n\tadditionally extracts the symbols from the names.\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":13,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFhI2CW4-JxdtPUNjU3NLFnYuPkFhLIDFUAAiNIzazWi4wlJKWnpGAE8JACMaAWYaAmYGzPF-Z0DdfUMTMwsvbh8RdioBKunXZtj49qTiwXS+3jZmbgAPKRNGRk6tnNn8haKUiJ5+IUZRSez5JS1AQnM4Xa63e50JotNqJTqgYH9UE2IzpUzcIzMHr9QaMR4zPLzQpLCRsKQibEDIYjMZopTeXzrTZ-aqaNkwhIdZKI07nAa8br41zPImLegMta2TZMoVs3atcQkH6gCTdY5ItigIKgFGMTK1S5agB8oEu0NwvCYUmBgqsPNBVxu3DuD1V6t57ItVptInt5xRaIoGKxvSpeLdfs9lsY1rYgr9zH5gojILY7KAA","body":"function lambda_parameter_symbols(component) {\n    return map(symbol_of_name, head(tail(component)));\n} "},{"body":"\n\t    The function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_decl_to_constant_decl"},{"body":"\n\t    needs a constructor for lambda expressions:\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":9,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFhI2CW4-JxdtPUNjU3NLFnYuPkFhLIDFUAAiNIzazWi4wlJKWnoJNgBrdQF0gCNeNmZuAA8pE0ZGTpEbI3TTbiNGJUGaXgBPXP1DEzMLUCFGUVqBiWHRianuGc7apQWlihW10A3t5tj8cRJT0ASLbMBrqU5sV4ZeSgIKgBaMTK1caRJrRXhMKQDLYiKygkRAkFLZjgyE5b7oxiYtjYxhbS40ATMGgEQkZfHA0HE9ikwLNIA","body":"function make_lambda_expression(parameters, body) {\n    return list(\"lambda_expression\", parameters, body);\n} "}]},{"tag":"SUBHEADING","id":"#h7","child":[{"body":"Sequences","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    A sequence statement\n    \n    packages a sequence of statements into a\n    single statement. A sequence of statements is parsed as follows:\n    ","tag":"#text"},{"body":"\n\\[\n\\ll\\ \\mathit{statement}_1 \\cdots \\mathit{statement}_n\\;\\gg \\\\\n= \\\\\n\\texttt{list(\"sequence\", list(}\n\\ll\\ \\mathit{statement}_1\\;\\gg \\texttt{, } \\ldots \\texttt{, }\n\\ll\\ \\mathit{statement}_n\\;\\gg \\texttt{))}\n\\]\n    ","tag":"LATEX"},{"body":"\n    The syntax predicate is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_sequence"},{"body":" and\n    the selector is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sequence_statements"},{"body":".\n    We retrieve the first of a list of statements using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_statement"},{"body":" and\n    the remaining statements using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rest_statements"},{"body":". We test\n    whether the list is empty using the predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_empty_sequence"},{"body":" and\n    whether it contains only one element\n    using the predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_last_statement"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.1.2#footnote-1"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFkZuAEciOTJuEUYKCVddfQMTMwsUiJ5+IXy8gsVQACI0zOzuJs1ouITKWnpWrPJ1fLYKbgkXRnrC7R1DEuNTc3pvX3YqARnXLtjCUj7kgjt85lHxyfltxjnFspWvbh9r3Z6DpPoTU-OJqZfiwz3CobLb5Qo3br7RL9SoTKQUACeZwyQxy-z0gOWFSsJCIAlBDQhe16H0qAjY33YFxc6LuWMsLFx+JEIJer3w4hI+VAEiRg3aoCCoBsRjSIiaGEiyiMWSlKAArJFOtFeEwpOSESIrPzhiJeci2sNNLtOdz9WxDlzBaAdTkzlTfvJpvrbdxdqrGOq2JqrHDEQbUblzZabu61RqtSxyZSxo7RMGPqGVeHvSJjqKKPbY5d40iLYnjcnPRGvpmfjnnXmQ4WgA","body":"function first_statement(stmts) { return head(stmts); }\n\nfunction rest_statements(stmts) { return tail(stmts); }\n\nfunction is_empty_sequence(stmts) { return is_null(stmts); }\n\nfunction is_last_statement(stmts) { return is_null(tail(stmts)); } "}]},{"tag":"SUBHEADING","id":"#h8","child":[{"body":"Blocks","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    Blocks\n    \n    are parsed as follows:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.1.2#footnote-2"},{"body":"\n    \\[\n\t  \\begin{align*}\n\t  \\ll\\ \\texttt{\\{}\\ \\mathit{statements}\\ \\texttt{\\}}\\ \\gg\n\t  & =\n\t  \\texttt{list(\"block\",}\\ \\ll\\ \\mathit{statements}\\ \\gg \\texttt{)}\n\t  \\end{align*}\n    \\]\n\t  ","tag":"LATEX"},{"body":"\n\tHere ","tag":"#text"},{"tag":"META","body":"statements"},{"body":" refers to a sequence of\n\tstatements, as shown above.\n\tThe syntax predicate is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_block"},{"body":"\n\tand the selector is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"block_body"},{"body":".\n\t    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h9","child":[{"body":"Return statements","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    Return statements\n    \n    are parsed as follows:\n    ","tag":"#text"},{"body":"\n    \\[\n\t  \\begin{align*}\n\t  \\ll\\ \\textbf{return}\\ \\mathit{expression} \\texttt{;}\\ \\gg\n\t  & =\n\t  \\texttt{list(\"return\\_statement\",}\\ \\ll\\ \\mathit{expression}\\ \\gg \\texttt{)}\n\t  \\end{align*}\n    \\]\n\t","tag":"LATEX"},{"body":"\n    The syntax predicate and selector are, respectively,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_return_statement"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"return_expression"},{"body":".\n\t    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h10","child":[{"body":"Assignments","tag":"#text"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n    Assignments\n    \n    are parsed as follows:\n    ","tag":"#text"},{"body":"\n    \\[\n\t  \\begin{align*}\n\t  \\ll\\ \\mathit{name}\\ \\ \\texttt{=}\\ \\ \\mathit{expression}\\ \\gg & = \n\t  \\texttt{list(\"assignment\", }\\ll\\ \\mathit{name}\\gg \\texttt{, }\\ll\\ \\mathit{expression}\\ \\gg \\texttt{)}\n\t  \\end{align*}\n    \\]\n\t","tag":"LATEX"},{"body":"\n    The syntax predicate is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_assignment"},{"body":"\n    and the selectors are\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assignment_symbol"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assignment_value_expression"},{"body":".\n    The symbol is wrapped in a tagged list representing the name, and thus\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assignment_symbol"},{"body":" needs to\n    unwrap it.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFjZGRioOEgkXPycXbT1DY1NzSxZ2Lj5BYTyAxVAAIjSMrJz5Rs1ouITKWnoWzOyXZkYATwkAIxoBOudA3X1DEzMLL24fEXYqWe9fbdnxf3nXTTPuwlI+5MG2kYA3NgEidW4ADykTdP65gsXilZldabA5bWyHRz1M5dWL4cQkRgUUASMbMW7DeSjdgUbjtJFBUA2IyMbgiRpvUAEjCRTrRXhMKQCNhjETovGjCbTWYotHfO6YxFsHF4864emMRnM1l8jEUZiPZ6vD5fDJ0EQ8tkjQXCgpdIA","body":"function assignment_symbol(component) {\n    return symbol_of_name(head(tail(component))));\n} "}]},{"tag":"SUBHEADING","id":"#h11","child":[{"body":"Constant, variable, and function declarations","tag":"#text"}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\n      Constant and variable declarations\n      \n      are parsed as follows:\n      ","tag":"#text"},{"body":"\n\\[\n  \\ll\\ \\textbf{const}\\ \\mathit{name}\\ \\ \\texttt{=}\\ \\ \\mathit{expression}\\texttt{;}\\ \\gg \\\\\n  = \\\\\n  \\texttt{list(\"constant\\_declaration\", } \\ll\\ \\mathit{name}\\ \\gg \\texttt{, }\\ll\\ \\mathit{expression}\\ \\gg \\texttt{)}\\\\[3mm]\n  \\ll\\ \\textbf{let}\\ \\mathit{name} \\ \\ \\texttt{=}\\ \\ \\mathit{expression}\\texttt{;}\\ \\gg \\\\\n  = \\\\\n  \\texttt{list(\"variable\\_declaration\", } \\ll\\ \\mathit{name}\\ \\gg \\texttt{, }\\ll\\ \\mathit{expression}\\ \\gg \\texttt{)}\n\\]\n\t","tag":"LATEX"},{"body":"\n\tThe selectors \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"declaration_symbol"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"declaration_value_expression"},{"body":" apply to both\n\tkinds.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajpQXm4yATYjNiSSZkYATwkAIxoBPycXbT1DY1NzegLi0uYaAmYSNgluEW9fdioy8X9nQM1NaLiEylp6VPTM7JnmADc2ASJ1bgAPKRNGRhnygNddfUMTMwsvbh8RfrL7o5HXMYn8cRJGClAJfOY5jJZHJ5dgUbhdeSgIKgGxGRjdABEAlMoC2UNAGEiCPGuF4TCkGXyIisAIWOREv3+aUBizoIOy4MqOLxjAJbCJpKBS0aJTKlM5tNyXwZEJe0RZbI51LJS1W602Oz2BzoFL+AuBwrBoteQA","body":"function declaration_symbol(component) {\n    return symbol_of_name(head(tail(component)));\n}\nfunction declaration_value_expression(component) {\n    return head(tail(tail(component)));\n} "},{"body":"\n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_decl_to_constant_decl"},{"body":"\n\tneeds a constructor for constant declarations:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":11,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFl5uMgE2IzYkkj8nF209Q2NTc0sWdi4+QWF8gMVQACJxEkZ2eWY0jKyc2hIm7QAfIf0S8ZSInn4hdvrneSUmgDcsqjYAIwF1bszs3MHQEbGJwysq6dq58X8FxqaEyn6u9L2+ukHouMJSJ+SJNgAa3UrXabE6u16uREJDYEm4SlWAiI6m4AA8pCZGIx+kUTqUzBZQLNRC06GCIa8of0mkpYfDEWxkaiMVicXRNF98KCKKAJABPF49fbPMEUbjw+SgIKgGxGRjcERNba8tHS0AYSKfXC8JhSTL8kRWSEiugiAVCt65ZhiiWFTk6vUGkQm94kG38iQbGgCc2C13W22S1wO3WMfVsQ0B55IlHMdGY7jY-p+y3Uug29ji4OaTlAA","body":"function make_constant_declaration(name, value_expression) {\n    return list(\"constant_declaration\", name, value_expression);\n} "}]},{"tag":"TEXT","id":"#p16","child":[{"body":"\n      Function declarations\n      \n      are parsed as follows:\n\t  ","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n$\\ll\\ \\textbf{function}\\ \\mathit{name} \\texttt{(}\\mathit{name}_1\\texttt{, }\\ldots\\texttt{, } \\mathit{name}_n \\texttt{)} \\ \\mathit{block}\\ \\gg\\ \\ =$ \n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"function_declaration\",\n     $\\ll\\ $$name$$\\ \\gg$,\n     list($\\ll\\ $$name$$_1\\;\\gg$, $\\ldots$, $\\ll\\ $$name$$_n\\;\\gg$),\n     $\\ll\\ $$block$$\\ \\gg$)\n\t  "},{}]},{"body":"\n     The syntax predicate\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_function_declaration"},{"body":"\n      recognizes these.\n      The selectors are\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_declaration_name"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_declaration_parameters"},{"body":", and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"function_declaration_body"},{"body":".\n     ","tag":"#text"}]},{"tag":"TEXT","id":"#p17","child":[{"body":"\n\tThe syntax predicate\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_declaration"},{"body":"\n\treturns true for all three kinds of declarations.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFl5uMgE2IzYkkj8nF209Q2NTc0sWdi4+QWF8gMVQACJxEkZ2eWY0jKyc2hIm7QAfIf0S8ZSInn4hdvrneSUmgDcsqjYAIwF1bszs3MHQEbGJwysq6dq58X8FxqaEyn6u9L2+ukHouNxW9tAJACeLx6+2e7Ry3AkLlAQVANiMjG4Iia2wooAAHjDQBhIp9cLwmFJMgCRFZdr1ciJAcC3rlmOCKJDCppogTGES2CTyaC6PSARINjQBFSgdz3iR6exGVDAiz8YTiSIxXTVgIiOpuOipCZGIx+iKaRSwVKmbLIkA","body":"function is_declaration(component) {\n    return is_tagged_list(component, \"constant_declaration\") ||\n           is_tagged_list(component, \"variable_declaration\") ||\n           is_tagged_list(component, \"function_declaration\");\n} "}]},{"tag":"SUBHEADING","id":"#h12","child":[{"body":"Derived components","tag":"#text"}]},{"tag":"TEXT","id":"#p18","child":[{"body":"\n\tSome\n\t\n\tsyntactic forms in our language can be defined in terms of\n\tcomponents involving other syntactic forms, rather than being\n\timplemented directly.\n\tOne example is\n\t\n\tfunction declaration, which \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n\ttransforms into a constant declaration whose\n\tvalue expression is a lambda expression.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.1.2#footnote-3"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":5,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0KBDAcw4FMATZgDZMKACjI0AtgAc63EhQA0oCgAturTgEpQAb1ygDoAE7cKRI-SbMpbKkbGSZJORW0AyN6DVteD6bPltAF4Q5TUNDgBuXABffGJyajoGFgTKWhJmXm4yATYjNiSSPycXbR0ASENQfUMTMwsUiJ5+IUZRcX9neSUAIjSirJy8gqLezWi4gYzQaboh3PzCjOYSNgluEoDXXVqDevN6NopmEwIt7sVQDAnYwlJ05LnM7MXRlZsCjYpuI0YLsq7aoHRrHU7cc6dUo9UDYW5TB5FWaIlavEbLeYAIxovAAngDAkC6qZDqAwWcCVcAMzw+6JGbPBYCVg0ZjiEjtNjyJmU8p7YwkxoSNgAa3U7M53LRSyKIn51QVBkZ0ve8zWG15CnliuqwrFgnWmN4bGY3AAHlITIxGBk5Tr7dVlcMZR8lt9fv8odtNFqHX6nW8MZlsXjeZp4UA","body":"function function_decl_to_constant_decl(component) {\n    return make_constant_declaration(\n               function_declaration_name(component),\n               make_lambda_expression(\n                   function_declaration_parameters(component),\n                   function_declaration_body(component)));\n} "},{"body":"\n\tImplementing the evaluation of function declarations\n\tin this\tway simplifies the evaluator because it reduces the number of\n\tsyntactic forms for which the evaluation process must be explicitly specified.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p19","child":[{"body":"\n\tSimilarly, we define\n\t\n\toperator combinations in terms of\n\tfunction applications. \n\tOperator combinations are unary or binary and carry their operator symbol as second element\n\tin the tagged-list representation:\n\t","tag":"#text"},{"body":"\n\t      \\[\n\t          \\ll\\ \\mathit{unary}\\textit{-}\\mathit{operator}\\ \\ \\mathit{expression}\\ \\gg \\\\\n\t          = \\\\\n\t          \\texttt{list(\"unary\\_operator\\_combination\", \"}\\mathit{unary}\\textit{-}\\mathit{operator}\\texttt{\"},\\ \n            \\texttt{list(}\\ll\\ \\mathit{expression}\\ \\gg \\texttt{))}\n\t      \\]\n\t    ","tag":"LATEX"},{"body":"\n\twhere ","tag":"#text"},{"tag":"META","body":"unary-operator"},{"body":" is \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!"},{"body":" (for logical negation) or\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"-unary"},{"body":" (for numeric negation), and\n    ","tag":"#text"},{"body":"\n\t      \\[\n\t          \\ll\\ \\mathit{expression}_1\\ \\mathit{binary}\\textit{-}\\mathit{operator}\\ \\ \\mathit{expression}_2\\;\\gg \\\\\n\t          = \\\\\n\t          \\texttt{list(\"binary\\_operator\\_combination\", \"}\\mathit{binary}\\textit{-}\\mathit{operator}\\texttt{\"},\\\\ \n            \\texttt{list(}\\ll\\ \\mathit{expression}_1\\;\\gg\\texttt{,}\\ \\ll\\ \\mathit{expression}_2\\;\\gg \\texttt{))}\n\t      \\]\n\t    ","tag":"LATEX"},{"body":"\n    where ","tag":"#text"},{"tag":"META","body":"binary-operator"},{"body":" is \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"-"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"*"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"/"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"%"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"<"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":">="},{"body":" or\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"<="},{"body":".\n     The syntax predicates are\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_operator_combination"},{"body":",\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_unary_operator_combination"},{"body":", and\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_binary_operator_combination"},{"body":",\n     and the selectors are\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"operator_symbol"},{"body":",\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_operand"},{"body":", and\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"second_operand"},{"body":".\n\t","tag":"#text"}]},{"tag":"TEXT","id":"#p20","child":[{"body":"\n\tThe evaluator uses\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"operator_combination_to_application"},{"body":"\n\tto transform an\n\t\n\toperator combination into a function application whose\n\tfunction expression is the name of the operator:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":34,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0aAHAUwCcBDCmrszI0AtgCMqJPrRIAKYSLZ0OJCgEpQAbwCQoPaFz7QXDhSJd6TZqR5cAnq069+ghRKnU680UpIr1oAA+gYZGYQws7rYO7Nx8AkKiUZ5yCr7+agDcuAC+hKSUMhHWUvaOcS6J4pLSXmnKqho6RqF6JmYWxRQ8AOY9HAAmzAA2TBTeig0UADSgAEQ2ZbHOCW41KXNZufnkKcVRS07xrknrMhPpjVq6+q3GpuaWLN19gyNjF1OzcwcxR5VrDwyTbZPLEXZFZbHZiMOziGjDT5+K6aO7tR6gUaMCjMEwEJH+WYYLZggp7AhULjY8q8EgDAkotEPTpYnF4hkzUDYEk7Qp0UCMDjCOk0nh0jlNJkdeis3EcfH1ZGcgDMPN5eysL36Q1ZHNmFAAFhxmC9JUZ0Z0rGweJSJaAAGT20BGnj0xUZUAAXm9oENxpeoPw4L5T2YUhEHDtqPNzNDWreuvdqm+4Y4IO26qKIh4AGtjTw2GxRmRanJgylmBwAB5sEyMRgyWa2HpECOqSs1usNuiMM36C0yj5zAtFqgljbTO7hcLlmQd2sceuN0DN1v+eddmS9wOZ-lQgGnIF0E00Zgj4ulqN3YXY0D7gReu--BKw+GIpPqbIx6XFRZ-CqrIel4fmoU7hAA-KA2Z5mehYXiksjQcaqayPeXBqJO05Ydh4S6hSVI4lC4ogWooE4aAABcUG5vmcFjpeSFhjwEaoc+6GYeRnG4R8+HUkRbo+FMGFgVxol6IKwpDPxEqkaCQA","body":"function operator_combination_to_application(component) {\n    const operator = operator_symbol(component);\n    return is_unary_operator_combination(component)\n           ? make_application(make_name(operator),\n                              list(first_operand(component)))\n           : make_application(make_name(operator),\n                              list(first_operand(component),\n                                   second_operand(component)));\n} "}]},{"tag":"TEXT","id":"#p21","child":[{"body":"\n\tComponents (such as function declarations and operator combinations) that we\n\tchoose\n\tto implement as syntactic transformations are called\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"derived components","tag":"#text"}]},{"body":". Logical composition operations are also\n\tderived components (see exercise ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.1.2#ex-4.4"},{"body":").\n\n\t","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.2","id":"#ex-4.2","child":[{"body":"\n\tThe inverse of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":"\n\tis called\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":". It takes\n\tas argument a\n\ttagged list as produced by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":"\n\tand returns a string that adheres to JavaScript notation.\n\t","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t  Write a function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" by \n\t  following the structure of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n\t  (without the environment parameter), but producing a string that represents\n\t  the given component, rather than evaluating it. Recall\n\t  from section ","tag":"#text"},{"tag":"REF","body":"3.3.4","href":"/sicpjs/3.3.4"},{"body":" that \n\t  the operator ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":" can be applied\n\t  to two strings to concatenate them and that the primitive function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stringify"},{"body":" turns values such\n\t  as 1.5, true, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":" into strings.\n\t  Take care to respect operator precedences by surrounding the strings\n\t  that result from unparsing operator combinations with parentheses\n\t  (always or whenever necessary).\n\t","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  Your ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" function will come\n\t  in handy when solving later exercises in this section. Improve\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" by adding\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\""},{"body":" ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\""},{"body":"\n\t  (space)\n\t  and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"\\n\""},{"body":" (newline) characters\n\t  to the result string, to follow the\n\t  \n\t  indentation style used in the JavaScript\n\t  programs of this book. Adding such\n\t  \n\t  whitespace characters to (or removing\n\t  them from) a program text in order to make the text easier to read\n\t  is called\n\t  ","tag":"#text"},{"tag":"EM","child":[{"body":"pretty-printing","tag":"#text"}]},{"body":".\n\t","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.3","id":"#ex-4.3","child":[{"body":"\n\tRewrite\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":" so that the\n\tdispatch is done in\n\t\n\tdata-directed style.  Compare this with the\n\tdata-directed differentiation function of\n\texercise ","tag":"#text"},{"tag":"REF","body":"2.73","href":"/sicpjs/2.4.3#ex-2.73"},{"body":". (You may\n\tuse the tag of the tagged-list representation as the type of the components.)\n\t","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.4","id":"#ex-4.4","child":[{"body":"\n\tRecall from section ","tag":"#text"},{"tag":"REF","body":"1.1.6","href":"/sicpjs/1.1.6"},{"body":" that the\n\t\n\tlogical composition operations\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":"\n\tare syntactic sugar for conditional expressions:\n\tThe logical conjunction\n\t    ","tag":"#text"},{"body":"$\\mathit{expression}_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":"$\\mathit{expression}_2$","tag":"LATEX"},{"body":"\n\t    is syntactic sugar for\n\t    ","tag":"#text"},{"body":"$ \\mathit{expression}_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"body":"$\\mathit{expression}_2$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":":"},{"tag":"JAVASCRIPTINLINE","body":"false"},{"body":", and\n\t    the logical disjunction\n            ","tag":"#text"},{"body":"$\\mathit{expression}_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":"$\\mathit{expression}_2$","tag":"LATEX"},{"body":"\n\t    is syntactic sugar for\n\t    ","tag":"#text"},{"body":"$ \\mathit{expression}_1$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"?"},{"tag":"JAVASCRIPTINLINE","body":"true"},{"tag":"JAVASCRIPTINLINE","body":":"},{"body":"$\\mathit{expression}_2$","tag":"LATEX"},{"body":".\n      \n\tThey are\n\t\n\tparsed as follows:\n\t  ","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n\t  $\\ll\\ \\mathit{expression}_1\\ \\ \\mathit{logical}\\textit{-}\\mathit{operation}\\ \\ \\mathit{expression}_2\\;\\gg \\ \\ = $\n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"logical_composition\",\n     \"$logical$-$operation$\",\n     list($\\ll\\ $$expression$$_1\\;\\gg$, $\\ll\\ $$expression$$_2\\;\\gg$))\n\t  "},{}]},{"body":"\n    where ","tag":"#text"},{"tag":"META","body":"logical-operation"},{"body":" is \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":" or\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":".\n    Install\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":"\n\tas new syntactic forms for the evaluator\n\tby declaring appropriate syntax functions and evaluation functions\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_and"},{"body":" and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_or"},{"body":". Alternatively, show how to\n\timplement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":"\n    as derived components.\n      ","tag":"#text"}],"solution":[{"body":"\n      GitHub user EmilyOng provides a solution for the alternative:\n      how to implement \n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"&&"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"||"},{"body":"\n      as derived components.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0y6ATK6ukwA2HNgA8ADgCcOPNmSEAKaWz5kmFNgBpQ3EgGc2ARyJsSFUZKlt9+2iR3DNUkhqoA3TuJW37ASlAAb1xQUNBrCiIXUCEqfQpFACI9PgFXEW9rXzpEnRU1DW1dOkMTMwtMmzs6RyFnV2pPSx9qkj8AblwAX0JSSntGVk5Y52FFd2FTAOCw8LZI6Nj4pJG2KWFc0AmhKc6e3BAIAE9zJjFQQyF5ChopfV7yNJiaAHMqdREaCTW3OkVuBgSOjlaYhMIRKL0AAWbCYPEUFCYVCUAKBJBBHW6D36dFABCodwqViq9n+NEBwPMoNmEOiMLhCKRSkRyLJFPRVL8mJ6xEeA0MKWaWVabLRIKCYNCtOhsPhLOZTMZrNRlIoXK5e3wvJx9CEr3ewi45IksnkIhuRpIqXshsypoUotV1LCenioC+PyeAF5nm8PhwPes0o6OWrOrNJXMFvRA796F6E6BEgAyZOJSOzAD8g3YlutggyVntSgzszC+MJQpJfxVob8WlLZYu8l4VeyJBDIIbTabBGEhkboD8g4AXO7vkGBgmfYkAD6z9M90DZ5i5lL8G2F6TFxSD2YV+JtkW1rt7sIUKSmbtLsIC1uVdudqmD4dLsdrKS3J8UHSJUgsEgaAAdxjCc41AABaCDfQNERUWLDgLXXNJbSLOQFESbl8D4fQJCEJgjkUPU-UNeD0PNGg8w3AshR3CQmDuNgkiYUBU1AAAjdpMI1XAcLwgiiP1f0yLNRDKOQzdaPI5QGMMZjQHnDiuPVTo+PwwjiNgo1AQQpDeGo9IpLNGTGKSRQWLYgBCdiAkUxRLIs5MOI6biOiAA","body":"function make_conditional_expr_decl(predicate, consequent_expression, alternative_expression) {\n    return list(\"conditional_expression\", predicate, consequent_expression, alternative_expression);\n}\nfunction make_literal(value) {\n    return list(\"literal\", value);\n}\n\n// Syntax selectors\nfunction logical_operation(component) {\n    return head(tail(component));\n}\nfunction first_expression(component) {\n    return head(tail(tail(component)));\n}\nfunction second_expression(component) {\n    return head(tail(tail(tail(component))));\n}\n\nfunction logical_comp_decl_to_conditional_expr_decl(component) {\n    const operation = logical_operation(component);\n    \n    return operation === \"&&\"\n        ? make_conditional_expr_decl(\n            first_expression(component),\n            second_expression(component),\n            false\n        )\n        : operation === \"||\"\n        ? make_conditional_expr_decl(\n            first_expression(component),\n            true,\n            second_expression(component)\n        )\n        : error(component, \"unknown operation -- logical_comp_decl_to_conditional_expr_decl\");\n}\n\ndisplay(logical_comp_decl_to_conditional_expr_decl(parse(\"a && b;\")));\ndisplay(logical_comp_decl_to_conditional_expr_decl(parse(\"a || b;\")));\ndisplay(logical_comp_decl_to_conditional_expr_decl(parse(\"(a && !b) || (!a && b);\"))); "}]},{"tag":"EXERCISE","title":"Exercise 4.5","id":"#ex-4.5","child":[{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    In JavaScript, lambda expressions must not have\n\t    \n\t    duplicate parameters. The evaluator in\n\t    section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" does not check for this.\n\t    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\t\tModify the evaluator so\n\t\tthat any attempt to apply a function with duplicate parameters\n\t\tsignals an error.\n\t      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t\tImplement a ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"verify"},{"body":" function that\n\t\tchecks whether any lambda expression in a given program contains\n\t\tduplicate parameters. With such a function, we could check the entire\n\t\tprogram before we pass it to\n\t\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":".\n\t      ","tag":"#text"}]}]},{"body":"\n\t    In order to implement this check in an evaluator for JavaScript, which\n\t    of these two approaches would you prefer? Why?\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    In JavaScript, the parameters of a lambda expression must be distinct from\n\t    \n\t    the names declared ","tag":"#text"},{"tag":"EM","child":[{"body":"directly","tag":"#text"}]},{"body":" in the body block of the lambda expression\n\t    (as opposed to in an inner block).\n\t    Use your preferred approach above to check for this as well.\n          ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.6","id":"#ex-4.6","child":[{"body":"\n\tThe language Scheme includes a variant of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":" called\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":". We could approximate\n\tthe behavior of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":" in JavaScript by stipulating\n\tthat a \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":" declaration implicitly\n\tintroduces a new block whose body includes the declaration and all\n\tsubsequent statements of the statement sequence in which the\n\tdeclaration occurs. For example, the program\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":false,"body":"let* x = 3;\nlet* y = x + 2;\nlet* z = x + y + 5;\ndisplay(x * z);"},{"body":"\n\tdisplays 39 and could be seen as a shorthand for\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":false,"body":"{\n  let x = 3;\n  {\n    let y = x + 2;\n    {\n      let z = x + y + 5;\n      display(x * z);\n    }\n  }\n}"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    Write a program in such an extended JavaScript language\n\t    that behaves differently when some occurrences of the keyword\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let"},{"body":" are replaced\n\t    with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Introduce\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":" as\n\t    a new syntactic form by designing a suitable tagged-list representation and\n\t    writing a parse rule.\n\t    Declare a syntax predicate and selectors for the tagged-list\n\t    representation.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Assuming that\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" implements your\n\t    new rule, write a\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let_star_to_nested_let"},{"body":"\n\t    function that transforms any occurrence of\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":" in a given program as\n\t    described above. We could\n\t    then evaluate a program ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p"},{"body":" in the\n\t    extended language by running\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate(let_star_to_nested_let(p))"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    As an alternative, consider implementing\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"let*"},{"body":" by\n\t    adding to\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":" a clause that\n\t    recognizes the new syntactic form and calls a function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_let_star_declaration"},{"body":".\n\t    Why does this approach not work?\n\t  ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.7","id":"#ex-4.7","child":[{"body":"\n\tJavaScript supports\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"while loops","tag":"#text"}]},{"body":" that execute a given\n\tstatement repeatedly. Specifically,\n\t","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nwhile ($predicate$) { $body$ }\n\t  "},{"body":"\n\tevaluates the ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":", and\n\tif the result is true, evaluates the\n\t","tag":"#text"},{"tag":"META","body":"body"},{"body":"\n\tand then evaluates\n\tthe whole while loop again.\n\tOnce the ","tag":"#text"},{"tag":"META","body":"predicate"},{"body":" evaluates\n\tto false, the\n\twhile loop terminates.\n\t","tag":"#text"},{"tag":"TEXT","id":"#p22","child":[{"body":"\n\t  For example, recall the imperative-style version of the iterative\n\t  factorial function from section ","tag":"#text"},{"tag":"REF","body":"3.1.3","href":"/sicpjs/3.1.3"},{"body":":\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AgQ0poCcrGAbAChIEpQAb1yhRoTgFMKoAA6saAEyKVQAXlAYA3CLGTpZGqQoTWajdrENSlWvSrHW3AcMuWqBUNwNGToAHyg-EI6rq6sUkSs9HKKyhQWoaAAvqASnADOEsGJrjFKKureJA6gAFSy8vnxITmgRSWFhsW+ANTmNTnhFJF2Dk4JoUk1Q5ZdPaD2Jv24Q4TMFGwcPACsfJpAA","body":"function factorial(n) {\n    let product = 1;\n    let counter = 1;\n    function iter() {\n        if (counter > n) {\n            return product;\n        } else {\n            product = counter * product;\n            counter = counter + 1;\n            return iter();\n        }\n    }\n    return iter();\n} "},{"body":"\n    We can formulate the same algorithm using a while loop as follows:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AgQ0poCcrGAbAChIEpQAb1yhRoTgFMKoAA6saAEyKVQAXlAYA3CLGTpZGqQoTWajdrGgA7gAsqk0NwNGToADzr+QnZdFzFytLqziTGpgBUsvJKlBa+oiFhZomuANTmPqAAvpmsUkSs9P4xFNpZQA","body":"function factorial(n) {\n    let product = 1;\n    let counter = 1;\n    while (counter <= n) {\n        product = counter * product;\n        counter = counter + 1;\n    }\n    return product;\n} "},{"body":"\n\tWhile loops are parsed as follows:\n\t  ","tag":"#text"},{"tag":"EPIGRAPH","child":[{},{"body":"\n\t  $\\ll\\ \\textbf{while} \\ \\texttt{(}\\ \\mathit{predicate}\\ \\texttt{)}\\ \\mathit{block}\\ \\gg \\ \\ =$ \n\t","tag":"LATEX"},{},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n    $\\ll\\ $while ($predicate$) $block$$\\ \\gg$ =\n        list(\"while_loop\", $\\ll\\ $$predicate$$\\ \\gg$, $\\ll\\ $$block$$\\ \\gg$)\n\t  "},{}]}]},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    Declare a syntax predicate and selectors to handle\n\t    while loops.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Declare a function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"while_loop"},{"body":"\n\t    that takes as arguments a predicate and a\n\t    body—each represented by a\n\t    function of no arguments—and simulates the behavior of the\n\t    while loop. The\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":" function would then\n\t    look as follows:\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0CYBQuAzAVwDsBjAFwEsB7E0AgQ0poCcrGAbAChIEpQAb1yhRoTgFMKoAA6saAEyKVQAXlAYA3CLGTpZGqQoTWajdrGgA7gAsqkgPqcaNGd24DVAPlAGjJ0AAedRIAGh1LSMsPNR9hKISouUVlaXU-EmNTACpZeSVKC0Ti30NMgPSyrNAAanMIktEAXz4i0VYpIlZ6ZIKKbSagA","body":"function factorial(n) {\n    let product = 1;\n    let counter = 1;\n    while_loop(() => counter <= n,\n               () => {\n                   product = counter * product;\n                   counter = counter + 1;\n               });\n    return product;\n} "},{"body":"\n\t    Your function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"while_loop"},{"body":" should generate\n\t    an iterative process (see\n\t    section ","tag":"#text"},{"tag":"REF","body":"1.2.1","href":"/sicpjs/1.2.1"},{"body":").\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Install while loops as\n\t    a derived component by defining a transformation function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"while_to_application"},{"body":" \n\t    that makes use of your function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"while_loop"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    What problem arises with this approach for implementing\n\t    while loops, when\n\t    the programmer decides within the body of the loop to\n\t    return from the function that contains the loop?\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Change your approach to address the problem. How about directly\n\t    installing while loops for the\n\t    evaluator, using a function\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_while"},{"body":"?\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Following this direct approach, implement a\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"break;"},{"body":" statement that immediately\n\t    terminates the loop in which it is evaluated.\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t    Implement a \n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"continue;"},{"body":" statement that terminates\n\t    only the loop iteration in which it is evaluated, and continues with\n\t    evaluating the\n\t    while loop predicate.\n\t  ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.8","id":"#ex-4.8","child":[{"body":"\n\tThe result of evaluating the body of a function is determined by\n\tits return statements. \n\tFollowing up on footnote ","tag":"#text"},{"tag":"REF","body":5,"href":"/sicpjs/4.1.1#footnote-5"},{"body":"\n\tand the evaluation of declarations in\n\tsection ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":",\n\tthis exercise addresses the question of what should be the result of\n\t\n\tevaluating a JavaScript program that consists of a sequence of\n\tstatements (declarations, blocks, expression statements, and conditional\n\tstatements) ","tag":"#text"},{"tag":"EM","child":[{"body":"outside of","tag":"#text"}]},{"body":" any function body.\n\t","tag":"#text"},{"tag":"TEXT","id":"#p23","child":[{"body":"\n\tFor such a program, JavaScript\n\tstatically\n        distinguishes between ","tag":"#text"},{"tag":"EM","child":[{"body":"value-producing","tag":"#text"}]},{"body":" and\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"non-value-producing statements","tag":"#text"}]},{"body":". (Here \n\t\"","tag":"#text"},{"body":"statically","tag":"#text"},{"body":"\" means that\n\twe can make the distinction by ","tag":"#text"},{"tag":"EM","child":[{"body":"inspecting","tag":"#text"}]},{"body":" the program\n\trather than by running it.)\n\tAll declarations are\n\tnon-value-producing, and all \n\texpression statements and conditional statements are\n\tvalue-producing.\n\tThe value of an expression statement is the value of the expression.\n\tThe value of a conditional statement is the value of the branch that\n\tgets executed, or the value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":" if that branch is\n\tnot value-producing.\n\tA block is value-producing if its body (sequence of statements)\n\tis value-producing, and then its value is the value of its body.\n\tA sequence is value-producing if any of\n\tits component statements is value-producing, and then its value is\n\tthe value of its ","tag":"#text"},{"tag":"EM","child":[{"body":"last","tag":"#text"}]},{"body":" value-producing component statement.\n\tFinally, if the whole\n\tprogram\tis not value-producing, its value is the value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":".\n\t","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t    According to this specification, what are the values of the\n\t    following four programs?\n\t    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":27,"eval":false,"body":"1; 2; 3;\n\n1; { if (true) {} else { 2; } }\n\n1; const x = 2;\n\n1; { let x = 2; { x = x + 3; } }"}]},{"tag":"LI","child":[{"body":"\n\t    Modify the evaluator to adhere to this\n\t    specification.\n\t  ","tag":"#text"}]}]}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.1.2#footnote-link-1","child":[{"body":"These\n    selectors for a list of statements are not intended\n    as a data abstraction.\n    They are introduced as mnemonic names for the\n    basic list operations in order to make it easier to understand the\n    explicit-control evaluator in\n    section ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.4"},{"body":".\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.1.2#footnote-link-2","child":[{"body":"A parser implementation may\n    decide to represent a block by just its statement sequence if none\n    of the statements of the sequence are declarations, or to represent\n    a sequence with only one statement by just that statement. The language\n    processors in this chapter and in chapter 5 do not depend on\n    these decisions.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.1.2#footnote-link-3","child":[{"body":"In \n\t    actual JavaScript, there are subtle differences between the two\n\t    forms; see footnote ","tag":"#text"},{"tag":"REF","body":2,"href":"/sicpjs/1.3.2#footnote-2"},{"body":"\n\t    in chapter 1.\n\t    Exercise ","tag":"#text"},{"tag":"REF","body":"4.17","href":"/sicpjs/4.1.6#ex-4.17"},{"body":" addresses these differences.\n          ","tag":"#text"}]}]