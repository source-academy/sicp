<SUBSECTION> 
  <LONG_PAGE LINES="2"></LONG_PAGE>
  
  <NAME>
    内部
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>


  <LABEL NAME="sec:env-internal-def"></LABEL>
  
  <INDEX>块结构
    <SUBINDEX>
      <ORDER>环境</ORDER>
      在环境模型中
      <OPEN></OPEN>
    </SUBINDEX>
  </INDEX>

  
  <INDEX>评估环境模型
    <SUBINDEX>内部声明
      <OPEN></OPEN>
    </SUBINDEX>
  </INDEX>

  
  <INDEX>内部声明
    <SUBINDEX>
      <ORDER>环境</ORDER>
      在环境模型中
      <OPEN></OPEN>
    </SUBINDEX>
  </INDEX>


  
  
  <TEXT>
    章节<SPACE></SPACE><REF NAME="sec:black-box"></REF>引入了这样一个思想，即
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以拥有内部的
    <SPLITINLINE>
      <SCHEME>
	定义，
      </SCHEME>
      <JAVASCRIPT>
	声明，
      </JAVASCRIPT>
    </SPLITINLINE>
    从而形成如同在
    <INDEX><USE>sqrt</USE><SUBINDEX><ORDER>环境</ORDER>环境模型<OPEN></OPEN></SUBINDEX></INDEX>
    中所见的块结构，下面的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    用于计算平方根：
    <SNIPPET EVAL="yes">
      <NAME>another_sqrt</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>sqrt_example7</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess){
        return is_good_enough(guess)
               ? guess
               : sqrt_iter(improve(guess));
    }
    return sqrt_iter(1);
}
      </JAVASCRIPT>
    </SNIPPET>
    现在我们可以利用环境模型来理解为何这些内部的
    <SPLITINLINE>
      <SCHEME>
	定义
      </SCHEME>
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    会按照预期运行。
    <SPLITINLINE>
      <SCHEME>
    图<SPACE></SPACE><REF NAME="fig:sqrt-internal_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
    图<SPACE></SPACE><REF NAME="fig:sqrt-internal"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    展示了表达式求值过程中的一个关键点，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt 2)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt(2)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    在这一点上，内部的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    首次被调用时，<SCHEMEINLINE>guess</SCHEMEINLINE>的值为<SPACE></SPACE>1.
    <SPLIT>
      <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>
	    带有内部定义的<SCHEMEINLINE>sqrt</SCHEMEINLINE>过程.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>带有内部声明的<SCHEMEINLINE>sqrt</SCHEMEINLINE>函数.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </SPLIT></TEXT>


  
  <TEXT>
    观察环境的结构。
    <SPLITINLINE>
      <SCHEME>
	    <SCHEMEINLINE>Sqrt</SCHEMEINLINE> 是一个在全局环境中被绑定的符号
      </SCHEME>
      <JAVASCRIPT>
	    名称 <SCHEMEINLINE>sqrt</SCHEMEINLINE> 在程序环境中被绑定
      </JAVASCRIPT>
    </SPLITINLINE>
    绑定到一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象，其关联环境是
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    环境。当调用<SCHEMEINLINE>sqrt</SCHEMEINLINE>时，形成了一个新环境E1，此环境隶属于
    <SPLITINLINE>
      <SCHEME>全局</SCHEME>
      <JAVASCRIPT>程序</JAVASCRIPT>
    </SPLITINLINE>
    环境，在其中参数<SCHEMEINLINE>x</SCHEMEINLINE>被绑定到2。随后在E1中求值了<SCHEMEINLINE>sqrt</SCHEMEINLINE>的定义体。
    <SPLIT>
      <SCHEME>
	    由于<SCHEMEINLINE>sqrt</SCHEMEINLINE>定义体中的第一个表达式是
      </SCHEME>
      <JAVASCRIPT>
	    该定义体是一个带有局部函数声明的块，因此E1被扩展以包含一个新的框架来保存这些声明，从而产生了新环境E2。块的定义体随后在E2中被求值。由于块中第一个语句是
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET EVAL="no">
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (good-enough? guess)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
	    求值该表达式在环境E1中定义了过程<SCHEMEINLINE>good-enough?</SCHEMEINLINE>。
      </SCHEME>
      <JAVASCRIPT>
	    求值该声明在环境E2中创建了函数<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	    更准确地说，符号<SCHEMEINLINE>good-enough?</SCHEMEINLINE>被加入到E1的第一个框架中，并绑定到一个其关联环境为E1的过程对象上。
      </SCHEME>
      <JAVASCRIPT>
	    更准确地说，名称<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>在E2的第一个框架中被绑定到一个其关联环境为E2的函数对象上。
      </JAVASCRIPT>
    </SPLIT>
    类似地，
    <SCHEMEINLINE>improve</SCHEMEINLINE> 和 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    被分别定义为
    <SPLITINLINE>
      <SCHEME>E1中的过程。</SCHEME>
      <JAVASCRIPT>E2中的函数。</JAVASCRIPT>
    </SPLITINLINE>
    为了简洁，
    <SPLITINLINE>
      <SCHEME>
	    图 <REF NAME="fig:sqrt-internal_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	    图 <REF NAME="fig:sqrt-internal"></REF>
      <nks/JAVASCRIPT>
    </SPLITINLINE>
    仅展示了<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象，即
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>


  
  <TEXT>
    在局部
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    定义完成后，表达式
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt-iter 1.0)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_@iter(1)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    仍在环境
    <SPLITINLINE>
      <SCHEME>E1.</SCHEME>
      <JAVASCRIPT>E2.</JAVASCRIPT>
    </SPLITINLINE>
    中求值。因此，绑定在
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_@iter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    中的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    对象以1作为参数被调用。这创建了一个环境E2，在该环境中，
    <SCHEMEINLINE>guess</SCHEMEINLINE>，即
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_@iter</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    的参数被绑定为1。
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>sqrt_@iter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    又调用了
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，并以<SCHEMEINLINE>guess</SCHEMEINLINE>的值作为参数，
    <SPLITINLINE>
      <SCHEME>
	    （来自E2）作为<SCHEMEINLINE>good-enough?</SCHEMEINLINE>的参数，
      </SCHEME>
      <JAVASCRIPT>
	    （来自E3）作为<JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>的参数。
      </JAVASCRIPT>
    </SPLITINLINE>
    这又建立了另一个环境，
    <SPLITINLINE>
      <SCHEME>
	    E3，其中<SCHEMEINLINE>guess</SCHEMEINLINE>（即<SCHEMEINLINE>good-enough?</SCHEMEINLINE>的参数）
      </SCHEME>
      <JAVASCRIPT>
	    E4，其中<SCHEMEINLINE>guess</SCHEMEINLINE>（即<JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>的参数）
      </JAVASCRIPT>
    </SPLITINLINE>
    被绑定为1。虽然
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_@iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    均拥有一个名为<SCHEMEINLINE>guess</SCHEMEINLINE>的参数，但它们是位于不同框架中的两个独立的局部变量。
    <SPLIT>
      <SCHEME>
	    此外，E2和E3均以E1为其封闭环境，因为<SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>和<SCHEMEINLINE>good-enough?</SCHEMEINLINE>过程的环境部分均为E1。
      </SCHEME>
      <JAVASCRIPT>
	    此外，E3和E4均以E2为其封闭环境，因为<JAVASCRIPT><JAVASCRIPTINLINE>sqrt_@iter</JAVASCRIPTINLINE></JAVASCRIPT>和<JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>函数的环境部分均为E2。
      </JAVASCRIPT>
    </SPLIT>
    一个结果是，出现在
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    体内的
    <SCHEMEINLINE>x</SCHEMEINLINE>
    （符号或名称）将引用E1中出现的<X>的绑定，也就是原始调用
    <SCHEMEINLINE>sqrt</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    时所用的<X>的值。
    <INDEX><USE>sqrt</USE><SUBINDEX><ORDER>环境</ORDER>在环境模型中<CLOSE></CLOSE></SUBINDEX></INDEX>
  </X></X></TEXT>


  
  <TEXT>
    环境模型因此解释了使局部
    <SPLITINLINE>
      <SCHEME>过程定义</SCHEME>
      <JAVASCRIPT>函数声明</JAVASCRIPT>
    </SPLITINLINE>
    成为模块化程序的一种有用技术的两个关键特性：
    <UL>
      <LI>
        局部
        <SPLITINLINE>
          <SCHEME>过程</SCHEME>
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        的名称不会干扰封闭
        <SPLITINLINE>
          <SCHEME>过程,</SCHEME>
          <JAVASCRIPT>函数,</JAVASCRIPT>
        </SPLITINLINE>
        外部的名称，因为局部
        <SPLITINLINE>
          <SCHEME>过程</SCHEME>
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        的名称将在
        <SPLITINLINE>
          <SCHEME>过程在运行时创建时,</SCHEME>
          <JAVASCRIPT>块在求值时创建时,</JAVASCRIPT>
        </SPLITINLINE>
        的帧中绑定，而不是在
        <SPLITINLINE>
          <SCHEME>全局</SCHEME>
          <JAVASCRIPT>程序</JAVASCRIPT>
        </SPLITINLINE>
        环境中绑定。
      </LI>
      <LI>
        局部
        <SPLITINLINE>
          <SCHEME>过程</SCHEME>
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        可以仅仅通过使用参数名称作为自由
        <SPLITINLINE>
          <SCHEME>变量。</SCHEME>
          <JAVASCRIPT>名称。</JAVASCRIPT>
        </SPLITINLINE>
        来访问封闭
        <SPLITINLINE>
          <SCHEME>过程,</SCHEME>
          <JAVASCRIPT>函数,</JAVASCRIPT>
        </SPLITINLINE>
        的参数。这是因为局部
        <SPLITINLINE>
          <SCHEME>过程</SCHEME>
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        的主体是在一个从属于封闭
        <SPLITINLINE>
          <SCHEME>过程,</SCHEME>
          <JAVASCRIPT>函数.</JAVASCRIPT>
        </SPLITINLINE>
        的求值环境中求值的。
      </LI>
    </UL>
  </TEXT>

  
  <EXERCISE>
    在章节<SPACE></SPACE><REF NAME="sec:env-local-state"></REF>中，我们看到环境模型如何描述具有局部状态的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的行为。现在我们已经看到内部
    <SPLITINLINE>
      <SCHEME>
	定义
      </SCHEME>
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    的工作方式。
    <INDEX>求值的环境模型<SUBINDEX>消息传递</SUBINDEX></INDEX>
    <INDEX>消息传递<SUBINDEX>环境模型与</SUBINDEX></INDEX>
    一个典型的消息传递
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    同时包含了这两个方面。请考虑章节<SPACE></SPACE><REF NAME="sec:local-state-variables"></REF>中的
    <INDEX>银行账户</INDEX>
    银行账户
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ：
    <SHORT_PAGE LINES="1"></SHORT_PAGE>
    <SNIPPET EVAL="yes">
      <INDEX><USE>make_account</USE><SUBINDEX><ORDER>environment</ORDER>在环境模型中</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <NAME>another_make_account</NAME>
      <EXAMPLE>another_make_account_example</EXAMPLE>
      <EXPECTED>30</EXPECTED>
      <SCHEME>
(define (make-account balance)
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        &quot;Insufficient funds&quot;))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m &apos;withdraw) withdraw)
          ((eq? m &apos;deposit) deposit)
          (else (error &quot;Unknown request - - MAKE-ACCOUNT&quot;
                       m))))
  dispatch)
      </SCHEME>
      <JAVASCRIPT>
function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt;= amount) {
            balance = balance - amount;
            return balance;
        } else {
            return &quot;Insufficient funds&quot;;
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;  
    }
    function dispatch(m) {
        return m === &quot;withdraw&quot;
               ? withdraw
               : m === &quot;deposit&quot;
               ? deposit
               : error(m, &quot;Unknown request: make_account&quot;);
    }
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
    展示由交互序列生成的环境结构
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example</NAME>
      <SCHEME>
            (define acc (make-account 50))
      </SCHEME>
      <JAVASCRIPT>
const acc = make_account(50);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const acc = make_account(50);
acc(&quot;withdraw&quot;)(20);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example_2</NAME>
      <SCHEME>
            ((acc &apos;deposit) 40)
      </SCHEME>
      <SCHEMEOUTPUT>
	90
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
acc(&quot;deposit&quot;)(40);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
90
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example_3</NAME>
      <SCHEME>
            ((acc &apos;withdraw) 60)
      </SCHEME>
      <SCHEMEOUTPUT>
	30
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
acc(&quot;withdraw&quot;)(60);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
30
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SCHEMEINLINE>acc</SCHEMEINLINE> 的局部状态存放在哪里？假设我们定义另一个账户
    <SNIPPET EVAL="no"> 
      <SCHEME>
            (define acc2 (make-account 100))
      </SCHEME>
      <JAVASCRIPT>
const acc2 = make_account(100);
      </JAVASCRIPT>
    </SNIPPET>
    这两个账户的局部状态是如何保持互不干扰的？<SCHEMEINLINE>acc</SCHEMEINLINE> 和 <SCHEMEINLINE>acc2</SCHEMEINLINE> 共享环境结构的哪些部分？
    <LABEL NAME="ex:two-accounts"></LABEL>
  </EXERCISE>


  
  <SUBHEADING><NAME>关于块的更多信息</NAME></SUBHEADING>


  
  <TEXT>
    正如我们所见，在<JAVASCRIPTINLINE>sqrt</JAVASCRIPTINLINE>中声明的名称的作用域是整个<JAVASCRIPTINLINE>sqrt</JAVASCRIPTINLINE>函数体。这解释了为什么<INDEX>mutual recursion</INDEX> <INDEX>recursion<SUBINDEX>mutual</SUBINDEX></INDEX> <EM>mutual recursion</EM>能够工作，就像这种（相当浪费）检查非负整数是否为偶数的方法一样。
    <SNIPPET LATEX="yes">
      <NAME>f_is_even_is_odd</NAME>
      <JAVASCRIPT>
function f(x) {
    function is_even(n) {
        return n === 0
               ? true
               : is_odd(n - 1);
    }
    function is_odd(n) {
        return n === 0
               ? false
               : is_even(n - 1);
    }
    return is_even(x);
}
      </JAVASCRIPT>
    </SNIPPET>
    当在调用<JAVASCRIPTINLINE>f</JAVASCRIPTINLINE>的过程中调用<JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE>时，环境图看起来类似于当调用<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>时在图<REF NAME="fig:sqrt-internal"></REF>中所示的那样。函数<JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE>和<JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE>在E2中被绑定到指向E2的函数对象上，该对象作为调用这些函数的求值环境。因此，在<JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE>函数体内的<JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE>引用的是正确的函数。尽管<JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE>是在<JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE>之后定义的，但这与在<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>函数体内名称<JAVASCRIPTINLINE>improve</JAVASCRIPTINLINE>和名称<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>本身正确引用相应函数的情况没有什么不同。
  </TEXT>

  
  <TEXT>
    装备了处理块内声明的方法后，我们可以重新审视顶层名称的声明。在<REF NAME="sec:env-model-rules"></REF>部分中，我们看到顶层声明的名称被添加到了程序栈帧中。更好的解释是，整个程序被置于一个隐式块中，并在全局环境中求值。上述对块的处理方式随后适用于顶层：全局环境通过包含隐式块中所有名称绑定的栈帧得到了扩展。该栈帧即为程序栈帧，所得到的环境就是程序环境。
  </TEXT>

  
  <TEXT>
    我们说，一个块<APOS></APOS>的主体在包含块体内直接声明的所有名称的环境中求值。一个局部声明的名称在进入块时会被加入到环境中，但不附带任何值。在块体求值过程中对其声明的求值，相当于将<JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>右侧表达式求值的结果赋给该名称，就像该声明是一次赋值操作一样。由于名称被加入环境与对声明的求值是分开的，并且整个块都处于该名称的作用域内，因此错误的程序可能会尝试<INDEX>declaration<SUBINDEX>use of name before</SUBINDEX></INDEX>在名称声明求值之前访问该名称的值；对未赋值名称的求值将引发错误。<FOOTNOTE>
    <LABEL NAME="foot:tdz_explained"></LABEL>
    这解释了为什么第1章中脚注<SPACE></SPACE><REF NAME="foot:tdz"></REF>的程序会出错。创建名称绑定与求值之间的这段时间被称为
    <INDEX>temporal dead zone (TDZ)</INDEX>
    <INDEX>TDZ (temporal dead zone)</INDEX>
    <EM>temporal dead zone</EM> (TDZ)。
  </FOOTNOTE>
  </TEXT>

   <INDEX>求值的环境模型<CLOSE></CLOSE></INDEX> 
   <INDEX>块结构<SUBINDEX><ORDER>环境</ORDER>在环境模型中</SUBINDEX></INDEX> 
  
  
</SUBSECTION>
