<SUBSECTION>
  <NAME>
    What Is Meant by Data?
  </NAME>

  <LABEL NAME="sec:data?"/>
  <INDEX>data<SUBINDEX>meaning of</SUBINDEX><OPEN/></INDEX>
  <SHORT_PAGE lines="2"/>
  <TEXT>
    We began the rational-number implementation in
    section<SPACE/><REF NAME="sec:rationals"/> by implementing the
    rational-number operations
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>add_rat</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>sub_rat</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and so on in terms of three unspecified
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <PYTHON>functions:</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, and
    <SCHEMEINLINE>denom</SCHEMEINLINE>. At that point, we could think of the
    operations as being defined in terms of data objects<EMDASH/>numerators,
    denominators, and rational numbers<EMDASH/>whose behavior was specified
    by the latter three
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
    <PYTHON>functions.</PYTHON></SPLITINLINE>
  </TEXT>
  <TEXT>
    But exactly what is meant by <EM>data</EM>?  It is not enough to say
    <QUOTE>whatever is implemented by the given selectors and
    constructors.</QUOTE> Clearly, not every arbitrary set of three
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    can serve as an appropriate basis for the rational-number
    implementation.  We need to guarantee that,
    <INDEX><USE>make_rat</USE><SUBINDEX>axiom for</SUBINDEX></INDEX>
    <INDEX><USE>numer</USE><SUBINDEX>axiom for</SUBINDEX></INDEX>
    <INDEX><USE>denom</USE><SUBINDEX>axiom for</SUBINDEX></INDEX>
    if we construct a rational number <SCHEMEINLINE>x</SCHEMEINLINE> from a
    pair of integers <SCHEMEINLINE>n</SCHEMEINLINE> and
    <SCHEMEINLINE>d</SCHEMEINLINE>, then extracting the
    <SCHEMEINLINE>numer</SCHEMEINLINE> and the
    <SCHEMEINLINE>denom</SCHEMEINLINE> of <SCHEMEINLINE>x</SCHEMEINLINE> and
    dividing them should yield the same result as dividing
    <SCHEMEINLINE>n</SCHEMEINLINE> by <SCHEMEINLINE>d</SCHEMEINLINE>. In
    other words,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, and
    <SCHEMEINLINE>denom</SCHEMEINLINE> must satisfy the condition that, for
    any integer <SCHEMEINLINE>n</SCHEMEINLINE> and any nonzero
    integer<SPACE/><SCHEMEINLINE>d</SCHEMEINLINE>, if <SCHEMEINLINE>x</SCHEMEINLINE> is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(make-rat n d)</SCHEMEINLINE>,</SCHEME>
      <PYTHON>
	<PYTHONINLINE>make_rat(n, d)</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    then
    <SPLIT>
      <PYTHON>
        <LATEX>
          \[
	  \begin{array}{lll}
          \dfrac{\texttt{numer}(\texttt{x})}{\texttt{denom}(\texttt{x})}
          &amp;=&amp;
          \dfrac{\texttt{n}}{\texttt{d}}
	  \end{array}
          \]
        </LATEX>
      </PYTHON>
      <SCHEME>
        <LATEX>
          \[
	  \begin{array}{lll}
          \dfrac{(\texttt{numer}~\texttt{x})}{(\texttt{denom}~\texttt{x})}
          &amp;=&amp;
          \dfrac{\texttt{n}}{\texttt{d}}
	  \end{array}
          \]
        </LATEX>
      </SCHEME>
    </SPLIT>
    In fact, this is the only condition
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE break="true">make_rat</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, and
    <SCHEMEINLINE>denom</SCHEMEINLINE> must fulfill in order to form a
    suitable basis for a rational-number representation.  In general, we can
    think of data as defined by some collection of selectors and
    constructors, together with specified conditions that these
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    must fulfill in order to be a valid
    representation.<FOOTNOTE>Surprisingly, this idea is very difficult to
    formulate rigorously. There are two approaches to giving such a
    formulation.  One, pioneered by
    <INDEX>Hoare, Charles Antony Richard</INDEX>
    C. A. R. Hoare (1972), is known as the method of 
    <INDEX>data<SUBINDEX>abstract models for</SUBINDEX></INDEX>
    <INDEX>abstract models for data</INDEX>
    <EM>abstract models</EM>.  It formalizes the
    <SPLITINLINE>
      <SCHEME>
	<QUOTE>procedures plus conditions</QUOTE>
      </SCHEME>
      <PYTHON>
	<QUOTE>functions plus conditions</QUOTE>
      </PYTHON>
    </SPLITINLINE>
    specification as outlined in the rational-number example above.  Note
    that the condition on the rational-number representation was stated in
    terms of facts about integers (equality and division).  In general,
    abstract models define new kinds of data objects in terms of previously
    defined types of data objects.  Assertions about data objects can
    therefore be checked by reducing them to assertions about previously
    defined data objects. Another approach, introduced by 
    <INDEX>Zilles, Stephen N.</INDEX>
    Zilles at MIT, by 
    <INDEX>Goguen, Joseph</INDEX>
    Goguen, 
    <INDEX>Thatcher, James W.</INDEX>
    Thatcher,
    <INDEX>Wagner, Eric G.</INDEX>
    Wagner, and 
    <INDEX>Wright, Jesse B.</INDEX>
    Wright at IBM (see <CITATION>Thatcher, Wagner, and Wright
    1978</CITATION>), and by 
    <INDEX>Guttag, John Vogel</INDEX>
    Guttag at Toronto (see <CITATION>Guttag 1977</CITATION>),
    is called 
    <INDEX>data<SUBINDEX>algebraic specification for</SUBINDEX></INDEX>
    <INDEX>algebraic specification for data</INDEX>
    <EM>algebraic specification</EM>.  It regards the
    <SPLITINLINE>
      <SCHEME><QUOTE>procedures</QUOTE></SCHEME>
      <PYTHON><QUOTE>functions</QUOTE></PYTHON>
    </SPLITINLINE>
    as elements of an abstract algebraic system whose behavior is
    specified by axioms that correspond to our <QUOTE>conditions,</QUOTE>
    and uses the techniques of abstract algebra to check assertions about
    data objects.  Both methods are surveyed in the paper by 
    <INDEX>Liskov, Barbara Huberman</INDEX>
    Liskov and Zilles
    (1975).</FOOTNOTE>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
        <INDEX>data<SUBINDEX>procedural representation of</SUBINDEX><OPEN/></INDEX>
        <INDEX>procedural representation of data<OPEN/></INDEX>
      </SCHEME>
      <PYTHON>
        <INDEX>data<SUBINDEX>functional representation of</SUBINDEX><OPEN/></INDEX>
        <INDEX>functional representation of data<OPEN/></INDEX>
      </PYTHON>
    </SPLITINLINE>
    This point of view can serve to define not only
    <QUOTE>high-level</QUOTE> data objects, such as rational numbers, but
    lower-level objects as well.
    Consider the notion of a
    <SPLITINLINE>
      <SCHEME>
        <INDEX>pair(s)<SUBINDEX>procedural representation of</SUBINDEX><OPEN/></INDEX>
      </SCHEME>
      <PYTHON>
        <INDEX>pair(s)<SUBINDEX>functional representation of</SUBINDEX><OPEN/></INDEX>
      </PYTHON>
    </SPLITINLINE>
    pair, which we used in order to define our
    rational numbers.  We never actually said what a pair was, only that
    the language supplied
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    for operating on pairs.  But the only thing we need to know about these
    three operations 
    is that if we glue two objects together using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    we can retrieve the objects using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
    <INDEX><USE>pair</USE> (primitive function)<SUBINDEX>axiom for</SUBINDEX></INDEX>
    <INDEX><USE>head</USE> (primitive function)<SUBINDEX>axiom for</SUBINDEX></INDEX>
    <INDEX><USE>tail</USE> (primitive function)<SUBINDEX>axiom for</SUBINDEX></INDEX>
    <INDEX>pair(s)<SUBINDEX>axiomatic definition of</SUBINDEX></INDEX>
    That is, the operations satisfy the condition that, for any objects
    <SCHEMEINLINE>x</SCHEMEINLINE> and <SCHEMEINLINE>y</SCHEMEINLINE>, if
    <SCHEMEINLINE>z</SCHEMEINLINE> is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cons x y)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair(x, y)</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    then
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(car z)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head(z)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is <SCHEMEINLINE>x</SCHEMEINLINE> and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cdr z)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail(z)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is <SCHEMEINLINE>y</SCHEMEINLINE>.  Indeed, we mentioned that these three
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are included as primitives in our language. However, any triple of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    that satisfies the above condition can be used as the basis for
    implementing pairs.  This point is illustrated strikingly by the fact
    that we could implement
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    without using any data structures at all but only using
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
    <PYTHON>functions.</PYTHON></SPLITINLINE>
    Here are the definitions:<SPLITINLINE><PYTHON><FOOTNOTE>The function
    <INDEX><USE>error</USE> (primitive function)<SUBINDEX>optional second argument</SUBINDEX></INDEX>
    <PYTHONINLINE>error</PYTHONINLINE> introduced in
    section<SPACE/><REF NAME="sec:proc-general-methods"/>
    takes as optional second argument
    a string that gets displayed before the first argument<EMDASH/>for example, if
    <PYTHONINLINE>m</PYTHONINLINE> is 42:
    <SNIPPET POSTPADDING="no">
      <PYTHON_OUTPUT>
Error in line 7: argument not 0 or 1 -- pair: 42
      </PYTHON_OUTPUT>
    </SNIPPET>
  </FOOTNOTE>
</PYTHON></SPLITINLINE>
    <SNIPPET PAGE="91">
      <INDEX><DECLARATION>pair</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <INDEX><DECLARATION>head</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <INDEX><DECLARATION>tail</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
      <NAME>cons_with_dispatch</NAME>
      <EXAMPLE>cons_1_2_run</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else (error "Argument not 0 or 1 -- CONS" m))))
  dispatch)

(define (car z) (z 0))

(define (cdr z) (z 1))
      </SCHEME>
      <PYTHON>
function pair(x, y) {
    function dispatch(m) {
        return m === 0 
               ? x
               : m === 1 
               ? y
               : error(m, "argument not 0 or 1 -- pair");
    }
    return dispatch;	      
}
function head(z) { return z(0); }
<SHORT_SPACE/>
function tail(z) { return z(1); }
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>cons_1_2_run</NAME>
      <PYTHON>
const x = pair(1, 2);
head(x);
      </PYTHON>
    </SNIPPET>
    This use of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    corresponds to nothing like our intuitive notion of what data should be.
    Nevertheless, all we need to do to show that this is a valid way to
    represent pairs is to verify that these
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    satisfy the condition given above.
  </TEXT>
  <TEXT>
    The subtle point to notice is that the value returned by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cons x y)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair(x, y)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is a
    <SPLITINLINE>
      <SCHEME>procedure<EMDASH/>namely</SCHEME>
      <PYTHON>function<EMDASH/>namely</PYTHON>
    </SPLITINLINE>
    the internally defined
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>dispatch</SCHEMEINLINE>, which takes one argument and returns
    either <SCHEMEINLINE>x</SCHEMEINLINE> or <SCHEMEINLINE>y</SCHEMEINLINE>
    depending on whether the argument is 0 or 1.  Correspondingly,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(car z)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head(z)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is defined to apply <SCHEMEINLINE>z</SCHEMEINLINE> to 0.  Hence, if
    <SCHEMEINLINE>z</SCHEMEINLINE> is the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <PYTHON>function</PYTHON>
    </SPLITINLINE>
    formed by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cons x y)</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair(x, y)</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    then <SCHEMEINLINE>z</SCHEMEINLINE> applied to 0 will yield
    <SCHEMEINLINE>x</SCHEMEINLINE>. Thus, we have shown that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(car (cons x y))</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head(pair(x, y))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    yields <SCHEMEINLINE>x</SCHEMEINLINE>, as desired.  Similarly,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cdr (cons x y))</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail(pair(x, y))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    applies the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    returned by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cons x y)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair(x, y)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    to 1, which returns <SCHEMEINLINE>y</SCHEMEINLINE>.
    Therefore, this 
    <SPLITINLINE>
      <SCHEME>
        procedural 
      </SCHEME>
      <PYTHON>
        functional
      </PYTHON>
    </SPLITINLINE>
    implementation of pairs is a valid
    implementation, and if we access pairs using only
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    we cannot distinguish this implementation from one that uses
    <QUOTE>real</QUOTE> data structures.
  </TEXT>
  <TEXT>
    The point of exhibiting the 
    <SPLITINLINE>
      <SCHEME>
        procedural 
      </SCHEME>
      <PYTHON>
        functional
      </PYTHON>
    </SPLITINLINE>
    representation of pairs is not that our language works this way 
    <SPLITINLINE>
      <SCHEME>(Scheme, and Lisp systems in general,
      implement pairs directly, for efficiency reasons)
      </SCHEME>
      <PYTHON>(an efficient implementation of pairs
      might use JavaScript's native
      <EM>vector</EM> data structure)
      </PYTHON>
    </SPLITINLINE>
    but that it could work this way. The 
    <SPLITINLINE>
      <SCHEME>
        procedural 
      </SCHEME>
      <PYTHON>
        functional
      </PYTHON>
    </SPLITINLINE>
    representation, although obscure, is a perfectly adequate way to represent
    pairs, since it fulfills the only conditions that pairs need to fulfill.
    This example also demonstrates that the ability to manipulate
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    as objects automatically provides the ability to represent compound data.
    This may seem a curiosity now, but 
    <SPLITINLINE>
      <SCHEME>
        procedural 
      </SCHEME>
      <PYTHON>
        functional
      </PYTHON>
    </SPLITINLINE>
    representations of data will play a central role in our programming
    repertoire.  This style of programming is often called 
    <INDEX>message passing</INDEX>
    <EM>message passing</EM>, and we will be using it as a basic tool in
    chapter<SPACE/><REF NAME="chap:state"></REF> when we address the issues of modeling and simulation.
  </TEXT>
  <EXERCISE> 
    Here is an alternative 
    <SPLITINLINE>
      <SCHEME>
        procedural 
      </SCHEME>
      <PYTHON>
        functional
      </PYTHON>
    </SPLITINLINE>
    representation of pairs.  For this
    representation, verify that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(car (cons x y))</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head(pair(x, y))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    yields <SCHEMEINLINE>x</SCHEMEINLINE> for any objects
    <SCHEMEINLINE>x</SCHEMEINLINE> and <SCHEMEINLINE>y</SCHEMEINLINE>.
    <SNIPPET PAGE="92">
      <INDEX><DECLARATION>pair</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE/></INDEX>
      <INDEX><DECLARATION>head</DECLARATION> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE/></INDEX>
      <INDEX><USE>tail</USE> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE/></INDEX>
      <NAME>cons_lambda</NAME>
      <EXPECTED>1</EXPECTED>
      <EXAMPLE>cons_1_2_run</EXAMPLE>
      <SCHEME>
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))
      </SCHEME>
      <PYTHON>
function pair(x, y) {
    return m => m(x, y);
}
function head(z) {
    return z((p, q) => p);
}
      </PYTHON>
    </SNIPPET>
    What is the corresponding definition of
    <SPLITINLINE>
      <SCHEME>
        <INDEX><USE>cdr</USE> (primitive function)<SUBINDEX>procedural implementation of</SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
        <INDEX><USE>tail</USE> (primitive function)<SUBINDEX>functional implementation of</SUBINDEX><FRAGILE/></INDEX>
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>?</SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE>?</PYTHON>
    </SPLITINLINE>
    (Hint: To verify that this works, make use of the substitution model of
    section<SPACE/><REF NAME="sec:substitution-model"/>.)
    <LABEL NAME="ex:lambda-cons"/>
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>cons_lambda</REQUIRES>
	<EXPECTED>2</EXPECTED>
	<EXAMPLE>cons_1_2_run_2</EXAMPLE>
	<PYTHON>
function tail(z) {
    return z((p, q) => q);
}
	</PYTHON>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
        <NAME>cons_1_2_run_2</NAME>
        <PYTHON>
const x = pair(1, 2);
tail(x);
        </PYTHON>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE> 
    Show that we can represent pairs of nonnegative integers using only
    numbers and arithmetic operations if we represent the pair
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> as the
    integer that is the product <LATEXINLINE>$2^a 3^b$</LATEXINLINE>.  Give the
    corresponding definitions of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE>.</PYTHON>
      </SPLITINLINE>
      <SOLUTION>
	<SNIPPET>
	  <NAME>pair_with_fast_expt</NAME>
	  <EXPECTED>4</EXPECTED>
	  <EXAMPLE>example_2.5</EXAMPLE>
	  <REQUIRES>expt_log_definition</REQUIRES>
	  <PYTHON>
function pair(a, b) {
    return fast_expt(2, a) * fast_expt(3, b);
}
function head(p) {
    return p % 2 === 0
           ? head(p / 2) + 1
           : 0;
}
function tail(p) {
    return p % 3 === 0 
           ? tail(p / 3) + 1
           : 0;
}
	  </PYTHON>
	  <SCHEME>
	  </SCHEME>
	</SNIPPET>
      </SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>example_2.5</NAME>
	<PYTHON>
tail(pair(3, 4));
	</PYTHON>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    <LABEL NAME="ex:2_5"/>
  </EXERCISE>
  <SPLITINLINE>
    <SCHEME>
      <INDEX>pair(s)<SUBINDEX>procedural representation of</SUBINDEX><CLOSE/></INDEX>
    </SCHEME>
    <PYTHON>
      <INDEX>pair(s)<SUBINDEX>functional representation of</SUBINDEX><CLOSE/></INDEX>
    </PYTHON>
  </SPLITINLINE>

  <EXERCISE> 
    In case representing pairs as
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    (exercise<SPACE/><REF NAME="ex:lambda-cons"/>)
    wasn<APOS/>t mind-boggling enough, consider that, in a language that can
    manipulate
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <PYTHON>functions,</PYTHON>
    </SPLITINLINE>
    we can get by without numbers (at least insofar as nonnegative integers
    are concerned) by implementing 0 and the operation of adding 1 as
    <SNIPPET PAGE="93">
      <NAME>zero</NAME>
      <SCHEME>
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
      </SCHEME>
      <PYTHON>
const zero = f => x => x;

function add_1(n) {
    return f => x => f(n(f)(x));
}
      </PYTHON>
    </SNIPPET>
    This representation is known as 
    <INDEX>Church numerals</INDEX>
    <EM>Church numerals</EM>, after its inventor, 
    <INDEX>Church, Alonzo</INDEX>
    Alonzo Church, the logician who invented the
    <LATEXINLINE>$\lambda$</LATEXINLINE> calculus.
    <TEXT>
    Define <SCHEMEINLINE>one</SCHEMEINLINE> and <SCHEMEINLINE>two</SCHEMEINLINE>
    directly (not in terms of <SCHEMEINLINE>zero</SCHEMEINLINE> and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-1</SCHEMEINLINE>).</SCHEME>
      <PYTHON><PYTHONINLINE>add_1</PYTHONINLINE>).</PYTHON>
    </SPLITINLINE>
    (Hint: Use substitution to evaluate
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(add-1 zero)</SCHEMEINLINE>).</SCHEME>
      <PYTHON><PYTHONINLINE>add_1(zero)</PYTHONINLINE>).
      </PYTHON>
    </SPLITINLINE>
    Give a direct definition of the addition
    <SPLITINLINE>
      <SCHEME>procedure <SCHEMEINLINE>+</SCHEMEINLINE></SCHEME>
      <PYTHON>function <PYTHONINLINE>plus</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    (not in terms of repeated application of
    <SPLITINLINE><SCHEME><SCHEMEINLINE>add-1</SCHEMEINLINE>).</SCHEME>
    <PYTHON><PYTHONINLINE>add_1</PYTHONINLINE>).</PYTHON>
    </SPLITINLINE>
    </TEXT>
    <SOLUTION>
      <SNIPPET>
	<NAME>church_solution</NAME>
	<EXPECTED>3</EXPECTED>
	<PYTHON>
const one = f => x => f(x);
const two = f => x => f(f(x));

function plus(n, m) {
    return f => x => n(f)(m(f)(x));
}

// testing

const three = plus(one, two);

function church_to_number(c) {
    return c(n => n + 1)(0);
}
church_to_number(three);
	</PYTHON>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:church-numerals"/>
  </EXERCISE>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>data<SUBINDEX>procedural representation of</SUBINDEX><CLOSE/></INDEX>
      <INDEX>procedural representation of data<CLOSE/></INDEX>
      <INDEX>data<SUBINDEX>meaning of</SUBINDEX><CLOSE/></INDEX>
    </SCHEME>
    <PYTHON>
      <INDEX>data<SUBINDEX>functional representation of</SUBINDEX><CLOSE/></INDEX>
      <INDEX>functional representation of data<CLOSE/></INDEX>
      <INDEX>data<SUBINDEX>meaning of</SUBINDEX><CLOSE/></INDEX>
    </PYTHON>
  </SPLITINLINE>
</SUBSECTION>
