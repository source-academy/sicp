<SECTION>
  <NAME>具有通用操作的系统</NAME>

  

  <LABEL NAME="sec:generic-operators"></LABEL>
   <TEXT>
在上一节中，我们看到了如何设计系统，使得数据对象可以以不止一种方式表示。关键思想是通过通用接口将指定数据操作的代码与多种表示形式关联起来
<SPLITINLINE>
  <SCHEME>procedures.</SCHEME>
  <JAVASCRIPT>functions.</JAVASCRIPT>
</SPLITINLINE>
现在我们将看到如何利用这一相同思想，不仅定义针对不同表示形式具有通用性的操作，而且定义针对不同类型参数具有<INDEX>算术<SUBINDEX>通用</SUBINDEX></INDEX>性的操作。我们已经见过几种不同的算术运算包：内置于我们语言中的基本算术运算（<SCHEMEINLINE>+</SCHEMEINLINE>、<SCHEMEINLINE>-</SCHEMEINLINE>、<SCHEMEINLINE>*</SCHEMEINLINE>、<SCHEMEINLINE>/</SCHEMEINLINE>），有理数算术
<SPLITINLINE>
  <SCHEME>(<SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
  <JAVASCRIPT>(<JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
</SPLITINLINE>
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
</SPLITINLINE>
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>mul-rat</SCHEMEINLINE>,</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
</SPLITINLINE>
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>div-rat</SCHEMEINLINE>)</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>div_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
</SPLITINLINE>
的章节<SPACE></SPACE><REF NAME="sec:rationals"></REF>，以及我们在章节<SPACE></SPACE><REF NAME="sec:data-directed"></REF>中实现的复数算术。现在我们将利用数据导向技术构造一个整合了此前构建的所有算术运算包的算术运算包。
</TEXT> 
   <TEXT>
    <SPLITINLINE>
      <SCHEME>
	图<SPACE></SPACE><REF NAME="fig:generic-system_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:generic-system"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    展示了我们将构建的系统结构。注意
    <INDEX>抽象屏障<SUBINDEX>在泛型算术系统中</SUBINDEX></INDEX>
    抽象屏障。从使用<QUOTE>数字</QUOTE>的人的角度来看，只有一个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>add</SCHEMEINLINE>，它对所提供的数字进行操作。
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Add</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>add</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    是泛型接口的一部分，该接口允许使用数字的程序以统一方式访问单独的普通算术、有理数算术和复数算术包。任何单独的算术包（例如复数包）也可以通过泛型
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    （例如
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    来访问，该过程组合了为不同表示方式（例如矩形和极坐标）设计的包。此外，系统的结构是累加的，因此可以分别设计各个算术包，并将它们组合成一个泛型算术系统。
    <INDEX>消息传递<CLOSE></CLOSE></INDEX>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch2-Z-G-64.svg"></FIGURE>
          <CAPTION>泛型算术系统。</CAPTION>
          <LABEL NAME="fig:generic-system_scheme"></LABEL>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SCALE="0.60" SRC="img_javascript/ch2-Z-G-64.svg"></FIGURE>
          <CAPTION>
	    泛型
	    <INDEX>泛型算术运算<SUBINDEX>系统结构</SUBINDEX></INDEX>
	    算术系统。
	  </CAPTION>
          <LABEL NAME="fig:generic-system"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT> 

  <!--  Subsection 1 : Generic Arithmetic Operations  -->
  &amp;subsection2.5.1;

  <!--  Subsection 2 : Combining Data of Different Types  -->
  &amp;subsection2.5.2;

  <!--  Example: Symbolic Algebra  -->
  &amp;subsection2.5.3;

</SECTION>
