<SUBSECTION>
  
  

  <LABEL NAME="sec:representations-complex-numbers"></LABEL>
  <INDEX>复数<SUBINDEX>直角坐标 vs.<SPACE></SPACE>极坐标形式</SUBINDEX><OPEN></OPEN></INDEX>

  <TEXT>
    我们将开发一个系统，用于对复数执行算术运算，这仅作为一个简单但不切实际的示例，展示一个使用通用操作的程序。我们首先讨论将复数表示为有序对的两种合理方法：直角坐标形式（实部和虚部）以及极坐标形式（幅值和角度）。<FOOTNOTE>在实际计算系统中，由于在直角坐标形式与极坐标形式转换过程中会产生<INDEX>舍入误差</INDEX>，因此通常更倾向于使用直角坐标形式。这就是为什么这个复数示例不切实际。然而，它清楚地阐述了使用通用操作设计系统的方法，并为本章后面将开发的更为实质性的系统提供了良好的引介。</FOOTNOTE> Section<SPACE></SPACE><REF NAME="sec:manifest-types"></REF> 将展示如何通过使用类型标签和通用操作，使这两种表示方法在同一系统中共存。
  </TEXT>
  <TEXT>
    类似于有理数，复数自然地表示为有序对。复数集合可以看作是一个具有两个正交轴的二维空间，即<QUOTE>实数</QUOTE>轴和<QUOTE>虚数</QUOTE>轴。（参见<REF NAME="fig:complex-plane"></REF>图。）从这个角度看，复数<LATEXINLINE>$z=x+iy$</LATEXINLINE>（其中<LATEXINLINE>$i^{2} =-1$</LATEXINLINE>）可视为平面上一个点，其实部为<LATEXINLINE>$x$</LATEXINLINE>，虚部为<LATEXINLINE>$y$</LATEXINLINE>。在这种表示法中，复数的加法简化为坐标的加法：
    <LATEX>
      \[
        \begin{array}{lll}
      \mbox{Real-part}(z_{1}+z_{2}) &amp; = &amp; 
         \mbox{Real-part}(z_{1})+\mbox{Real-part}(z_{2}) \\[1ex]
      \mbox{Imaginary-part}(z_{1}+z_{2}) &amp; = &amp; 
         \mbox{Imaginary-part}(z_{1})+\mbox{Imaginary-part}(z_{2})
        \end{array}
      \]
    </LATEX>
  </TEXT>
  <TEXT>
    当进行复数相乘时，更自然的方法是将复数用极坐标形式表示，也就是用模长和角度来表示（见图<REF NAME="fig:complex-plane"></REF>中用 <LATEXINLINE>$r$</LATEXINLINE> 和 <LATEXINLINE>$A$</LATEXINLINE> 标记的部分）。两个复数的乘积就是将其中一个复数按另一个复数的模长拉伸后，再按照后者的角度旋转所得到的向量citeturn0file1：
    <LATEX>
      \[
        \begin{array}{lll}
      \mbox{Magnitude}(z_{1}\cdot z_{2}) &amp; = &amp; 
      \mbox{Magnitude}(z_{1})\cdot\mbox{Magnitude}(z_{2})\\[1ex]
      \mbox{Angle}(z_{1}\cdot z_{2}) &amp; = &amp; 
      \mbox{Angle}(z_{1})+\mbox{Angle}(z_{2})
        \end{array}
      \]
    </LATEX>
  </TEXT>
  <TEXT>
    因此，复数有两种不同的表示方法，分别适用于不同的操作。然而，从编写使用复数的程序者的角度来看，数据抽象原理表明，无论计算机采用哪种表示方法，所有处理复数的操作都应当可用。例如，能够求出由直角坐标指定的复数的幅度通常是非常有用的。同样，能够确定由极坐标指定的复数的实部往往也很有用。
    <FIGURE>
      <FIGURE SPLIT_SCALE="0.5" WEB_SCALE="0.6" SCALE="0.59" SRC="img_original/ch2-Z-G-59.svg"></FIGURE>
      <CAPTION>复数作为平面上的点。</CAPTION>
      <LABEL NAME="fig:complex-plane"></LABEL>
    </FIGURE>
  </TEXT>
  
  <SHORT_PAGE LINES="2"></SHORT_PAGE>

  
  <TEXT>
    为了设计这样一个系统，我们可以遵循我们在设计有理数包时所采用的
    <INDEX>数据抽象</INDEX>
    数据抽象策略，该策略在<SECTION><SPACE></SPACE><REF NAME="sec:rationals"></REF>中描述。假设复数的操作是以四个选择器为基础实现的：
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>imag-part</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>imag_part</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>magnitude</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>magnitude</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    和 <SCHEMEINLINE>angle</SCHEMEINLINE>。还假设我们有两个用于构造复数的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    其中
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    返回具有指定实部和虚部的复数，而
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>make-from-mag-ang</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>make_from_mag_ang</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    返回具有指定模和角的复数。这两个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的特性是，对于任意复数
    <SCHEMEINLINE>z</SCHEMEINLINE>，无论使用
    <SNIPPET EVAL="no">
      <SCHEME>
(make-from-real-imag (real-part z) (imag-part z))
      </SCHEME>
      <JAVASCRIPT>
make_from_real_imag(real_part(z), imag_part(z));
      </JAVASCRIPT>
    </SNIPPET>
    或者
    <SNIPPET EVAL="no">
      <SCHEME>
(make-from-mag-ang (magnitude z) (angle z))
      </SCHEME>
      <JAVASCRIPT>
make_from_mag_ang(magnitude(z), angle(z));
      </JAVASCRIPT>
    </SNIPPET>
    均能生成与 <SCHEMEINLINE>z</SCHEMEINLINE>相等的复数。
  </SECTION></TEXT>

  <LONG_PAGE LINES="2"></LONG_PAGE>
  
  <TEXT>
    利用这些构造器和选择器，我们可以使用构造器和选择器所指定的抽象数据来实现复数的算术运算，就像我们在<SECTION><SPACE></SPACE><REF NAME="sec:rationals"></REF>中对有理数所做的一样。如上面的公式所示，我们可以用实部和虚部分别对复数进行加法和减法运算，而用模和角分别对复数进行乘法和除法运算：
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>add_complex</DECLARATION></INDEX> 
      <INDEX><DECLARATION>sub_complex</DECLARATION></INDEX> 
      <INDEX><DECLARATION>mul_complex</DECLARATION></INDEX> 
      <INDEX><DECLARATION>div_complex</DECLARATION></INDEX> 
      <NAME>complex_number_calculation</NAME>
      <SCHEME>
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))

(define (sub-complex z1 z2)
  (make-from-real-imag (- (real-part z1) (real-part z2))
                       (- (imag-part z1) (imag-part z2))))

(define (mul-complex z1 z2)
  (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                     (+ (angle z1) (angle z2))))

(define (div-complex z1 z2)
  (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                     (- (angle z1) (angle z2))))
      </SCHEME>
      <JAVASCRIPT>
function add_complex(z1, z2) {
    return make_from_real_imag(real_part(z1) + real_part(z2),
                               imag_part(z1) + imag_part(z2));
}
function sub_complex(z1, z2) {
    return make_from_real_imag(real_part(z1) - real_part(z2),
                               imag_part(z1) - imag_part(z2));
}
function mul_complex(z1, z2) {
    return make_from_mag_ang(magnitude(z1) * magnitude(z2),
                             angle(z1) + angle(z2));
}
function div_complex(z1, z2) {
    return make_from_mag_ang(magnitude(z1) / magnitude(z2),
                             angle(z1) - angle(z2));
}
      </JAVASCRIPT>
    </SNIPPET>
  </SECTION></TEXT>

  
  <TEXT>
    为了完善复数包，我们必须选择一种表示方式，并且必须用原始数字和原始列表结构来实现构造器和选择器。有两种明显的方法可以做到这一点：我们可以将复数表示为一对（实部，虚部）的<QUOTE>矩形形式</QUOTE>，或者表示为一对（模，角）的<QUOTE>极坐标形式</QUOTE>。我们该选择哪一种呢？
  </TEXT>

  
  <TEXT>
    为了使这些不同的选择变得具体，请设想有两个程序员，Ben Bitdiddle 和 Alyssa P. Hacker，他们正在独立设计复数系统的表示方法。  
    Ben 选择以<INDEX>复数<SUBINDEX>矩形形式</SUBINDEX></INDEX>来表示复数。  
    基于这一选择，提取复数的实部和虚部非常直接，构造具有给定实部和虚部的复数也同样简单。  
    为了求出模和角，或者构造具有给定模和角的复数，他使用了三角函数关系  
    <LATEX>
      \[
      \begin{array}{lllllll}
      x &amp; = &amp; r\ \cos A &amp; \quad \quad \quad &amp; r &amp; = &amp; \sqrt{x^2 + y^2} \\
      y &amp; = &amp; r\ \sin A &amp;             &amp; A &amp; = &amp; \arctan (y,x)
      \end{array}
      \]
    </LATEX>
    该关系将实部和虚部 (<LATEXINLINE>$x$</LATEXINLINE>, <LATEXINLINE>$y$</LATEXINLINE>) 与模和角 (<LATEXINLINE>$(r, A)$</LATEXINLINE>) 联系起来。  
    <FOOTNOTE>此处所说的反正切函数，
    <SPLITINLINE>
      <SCHEME>
	由 Scheme 计算的
	<INDEX>反正切函数</INDEX>
	<INDEX><USE>math_atan2</USE> (基本函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_atan2</USE><ECMA>Math.atan2</ECMA></SUBINDEX></INDEX>
	<SCHEMEINLINE>atan</SCHEMEINLINE> 过程，
      </SCHEME>
      <JAVASCRIPT>
	由 JavaScript 计算的
	<INDEX>反正切函数</INDEX>
	<INDEX><USE>math_atan2</USE> (基本函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>math_atan2</USE><ECMA>Math.atan2</ECMA></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>math_atan2</JAVASCRIPTINLINE> 函数，
      </JAVASCRIPT>
    </SPLITINLINE>
    定义为接受两个参数 <LATEXINLINE>$y$</LATEXINLINE><SPACE></SPACE>和 <LATEXINLINE>$x$</LATEXINLINE>，并返回其正切值为 <LATEXINLINE>$y/x$</LATEXINLINE> 的角。参数的符号决定了该角所在的象限。</FOOTNOTE>
    因此，Ben 的表示方法由下列选择器和构造器给出：
    <SNIPPET>
      <INDEX><DECLARATION>real_part</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>imag_part</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>magnitude</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>angle</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>make_from_real_imag</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>make_from_mag_ang</DECLARATION><SUBINDEX>矩形形式</SUBINDEX></INDEX>
      <NAME>make_complex_number1</NAME>
      <REQUIRES>complex_number_calculation</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_example</EXAMPLE>
      <EXPECTED>-3</EXPECTED>
      <SCHEME>
(define (real-part z) (car z))

(define (imag-part z) (cdr z))

(define (magnitude z)
  (sqrt (+ (square (real-part z)) (square (imag-part z)))))

(define (angle z)
  (atan (imag-part z) (real-part z)))

(define (make-from-real-imag x y) (cons x y))

(define (make-from-mag-ang r a) 
  (cons (* r (cos a)) (* r (sin a))))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) { return head(z); }
<SHORT_SPACE></SHORT_SPACE>
function imag_part(z) { return tail(z); }
<SHORT_SPACE></SHORT_SPACE>
function magnitude(z) {
    return math_sqrt(square(real_part(z)) + square(imag_part(z)));
}
function angle(z) {
    return math_atan2(imag_part(z), real_part(z));
}
function make_from_real_imag(x, y) { return pair(x, y); }

function make_from_mag_ang(r, a) {
    return pair(r * math_cos(a), r * math_sin(a));
}
      </JAVASCRIPT>
    </SNIPPET>
  
    <SNIPPET HIDE="yes">
      <NAME>make_complex_number_example</NAME>
      <JAVASCRIPT>
const my_co_num_1 = make_from_real_imag(2.5, -0.5);
const my_co_num_2 = make_from_real_imag(2.5, -0.5);

const result = add_complex(my_co_num_1,
                           mul_complex(my_co_num_2,
                                       my_co_num_2));

imag_part(result);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  <LONG_PAGE LINES="2"></LONG_PAGE>
  
  <TEXT>
    与之相反，Alyssa 选择以
    <INDEX>复数<SUBINDEX>极坐标形式</SUBINDEX></INDEX>
    来表示复数。
    <SHRINK_PARAGRAPH LINES="1"></SHRINK_PARAGRAPH>
    对她来说，选择模和角非常直接，但她必须使用
    <INDEX>三角函数关系</INDEX>
    来求得实部和虚部。  
    Alyssa 的表示为：
    <SNIPPET>
      <INDEX><DECLARATION>real_part</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>imag_part</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>magnitude</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>angle</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>make_from_real_imag</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <INDEX><DECLARATION>make_from_mag_ang</DECLARATION><SUBINDEX>极坐标形式</SUBINDEX></INDEX>
      <NAME>make_complex_number2</NAME>
      <REQUIRES>complex_number_calculation</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>make_complex_number_example</EXAMPLE>
      <EXPECTED>-3</EXPECTED>
      <SCHEME>
(define (real-part z)
  (* (magnitude z) (cos (angle z))))

(define (imag-part z)
  (* (magnitude z) (sin (angle z))))

(define (magnitude z) (car z))

(define (angle z) (cdr z))

(define (make-from-real-imag x y) 
  (cons (sqrt (+ (square x) (square y)))
        (atan y x)))

(define (make-from-mag-ang r a) (cons r a))
      </SCHEME>
      <JAVASCRIPT>
function real_part(z) {
    return magnitude(z) * math_cos(angle(z));
}
function imag_part(z) {
    return magnitude(z) * math_sin(angle(z));
}
function magnitude(z) { return head(z); }
<SHORT_SPACE></SHORT_SPACE>
function angle(z) { return tail(z); }
<SHORT_SPACE></SHORT_SPACE>
function make_from_real_imag(x, y) {
    return pair(math_sqrt(square(x) + square(y)),
                math_atan2(y, x));
}
function make_from_mag_ang(r, a) { return pair(r, a); }
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  
  <TEXT>
    数据抽象的学科确保相同的实现
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>add-complex</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>add_@complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>sub-complex</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>mul-complex</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>div-complex</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    都能在 Ben<APOS></APOS>s 的表示和 Alyssa<APOS></APOS>s 的表示中正常工作。
  </TEXT>

</SUBSECTION>
