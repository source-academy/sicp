<SECTION>
   <NAME>求值的环境模型</NAME> 

   <SECTIONCONTENT></SECTIONCONTENT> 

  <LABEL NAME="sec:environment-model"></LABEL>
   <INDEX>求值的环境模型<OPEN></OPEN></INDEX> 

   <TEXT>
    当我们在<SPACE></SPACE><REF NAME="chap:fun"></REF>一章中介绍复合<SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>时，我们使用求值的代换模型
    (在<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节)来定义应用<SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>到参数的意义：
    <UL>
      <LI>要应用一个复合<SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>到参数，需将<SPLITINLINE>
	过程体
	<JAVASCRIPT>函数的返回表达式（更广泛地说，函数体）</JAVASCRIPT>
      </SPLITINLINE>中的每个<SPLITINLINE>
	  形式化
	
      </SPLITINLINE>参数替换为对应的实参。
      </LI>
    </UL>
  </TEXT> 

   <TEXT>
    一旦我们将赋值引入我们的编程语言，这样的定义就不再足够。特别是，<SPACE></SPACE><REF NAME="sec:costs-of-assignment"></REF>节指出，在存在赋值的情况下，
    <SPLITINLINE>
      
	变量不能仅仅被视为一个值的名字。相反，变量必须以某种方式指示一个可以存储值的<QUOTE>位置</QUOTE>。
      
      <JAVASCRIPT>
	名字不能仅仅被视为表示一个值。相反，名字必须以某种方式指示一个可以存储值的<QUOTE>位置</QUOTE>。
      </JAVASCRIPT>
    </SPLITINLINE>
    在我们新的求值模型中，这些位置将维持在称为<INDEX>环境</INDEX>
    <EM>环境</EM>的结构中。
  </TEXT> 

  <TEXT> 
    环境是<INDEX>帧(环境模型)</INDEX><EM>帧</EM>的序列。每个帧是<INDEX>绑定</INDEX><EM>绑定</EM>的表（可能为空），它将<SPLITINLINE>
      
	变量名
      
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>与其对应的值关联起来。
    <SPLITINLINE>
      
	（单个帧中最多只能包含对任何变量的一个绑定。）
      
      <JAVASCRIPT>
	（单个帧中最多只能包含对任何名称的一个绑定。）
      </JAVASCRIPT>
    </SPLITINLINE>每个帧还有一个指针指向其<INDEX>封闭环境</INDEX><INDEX>环境<SUBINDEX>封闭</SUBINDEX></INDEX><EM>封闭环境</EM>，除非为了讨论的目的，帧被认为是<INDEX>全局帧</INDEX><INDEX>帧(环境模型)<SUBINDEX>全局</SUBINDEX></INDEX><EM>全局</EM>。相对于一个环境的<SPLITINLINE>
      
	<EM>变量的值</EM>
      
      <JAVASCRIPT>
	<INDEX>名称<SUBINDEX>值</SUBINDEX></INDEX><EM>名称的值</EM>
      </JAVASCRIPT>
    </SPLITINLINE>是由环境中第一个包含该<SPLITINLINE>
      
	变量
      
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>绑定的帧所给出的。如果序列中的没有任何帧为该<SPLITINLINE>
      
	变量，
      
      <JAVASCRIPT>
	名称，
      </JAVASCRIPT>
    </SPLITINLINE>指定绑定，那么就说该<SPLITINLINE>
      
	变量
      
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>是未绑定的。 <INDEX>未绑定名称</INDEX>
    <INDEX>名称<SUBINDEX>未绑定</SUBINDEX></INDEX>
    <EM>未绑定</EM> 在环境中。
    <SPLIT>
      
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.65" SRC="img_original/ch3-Z-G-2.svg"></FIGURE>
          
          <CAPTION>一个简单的环境结构。</CAPTION>
        </FIGURE>
      
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SPLIT_SCALE="0.65" WEB_SCALE="0.5" SRC="img_javascript/ch3-Z-G-2.svg"></FIGURE>
          
          <CAPTION>
	    一个简单的
	    <INDEX>求值的环境模型<SUBINDEX>环境结构</SUBINDEX></INDEX>
	    环境结构。	    
	  </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
   </TEXT>

   <TEXT>
    <SPLITINLINE>
      
	图<SPACE></SPACE><REF NAME="fig:environment-structure_scheme"></REF>
      
      <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:environment-structure"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    展示了一个简单的环境结构，由三个帧组成，标记为 I、II 和 III。在图中，A、B、C 和 D 是指向环境的指针。C<SPACE></SPACE>和 D 指向相同的环境。<SPLITINLINE>
      
	变量
      
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>z 和 x 被绑定在帧 II，而 y 和 x 被绑定在帧 I。在环境 D 中，x 的值是 3。相对于环境 B，x 的值也是 3。其确定方式如下：检查序列中的第一个帧（帧 III），未找到x的绑定，因此继续到封闭环境 D，并在帧 I 找到绑定。另一方面，在环境 A 中，x 的值是 7，因为序列中的第一个帧（帧 II）包含将x绑定到 7 的绑定。相对于环境 A，将x绑定到帧 II 的 7 被认为<INDEX>遮蔽一个绑定</INDEX><EM>遮蔽</EM>了在帧 I 中将x绑定到 3 的绑定。
  </TEXT> 

  <TEXT> 
    环境对求值过程至关重要，因为它决定了表达式应该在何种上下文中进行求值。实际上，可以说编程语言中的表达式本身没有任何意义。相反，表达式仅在其被求值的某个环境中才能获得意义。
    <SPLIT>
      
	即使是像(+<SPACE></SPACE>1<SPACE></SPACE>1)这样简单的表达式的解释也依赖于理解+是加法的符号这一上下文。
      
      <JAVASCRIPT>
	即使是像<JAVASCRIPTINLINE>display(1)</JAVASCRIPTINLINE>这样简单的表达式的解释也依赖于理解名称display指的是显示一个值的原语函数的上下文。
      </JAVASCRIPT>
    </SPLIT>
    因此，在我们的求值模型中，我们总是会提到在某个环境中求值表达式。为了描述与解释器的交互，我们假设存在一个
    <INDEX>全局环境</INDEX>
    全局环境，由一个包含原语<SPLITINLINE>
      
	过程
      
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>符号值的单一帧（无封闭环境）组成。
    例如，理念是
      
    <SPLITINLINE>
      
	+ 是加法符号是通过说符号+
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> 是指代显示的原语函数的名称是通过说名称<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    在全局环境中绑定到原语
    <SPLITINLINE>
      加法过程。
      <JAVASCRIPT>显示函数。</JAVASCRIPT>
    </SPLITINLINE>
   </TEXT>
   
    <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	在我们对程序进行求值之前，我们通过一个新的帧<EM>程序帧</EM>扩展全局环境，从而形成
	<INDEX>程序环境</INDEX>
	<EM>程序环境</EM>。我们将在程序顶层声明的名称，即在任何块之外的名称，添加到这个帧中。然后，给定程序相对于程序环境进行求值。
      </TEXT>
    </JAVASCRIPT>
  </SPLIT> 


  <!--  Subsection 1 : The Rules of Evaluation  -->
  &amp;subsection3.2.1;

  <!--  Subsection 2 : Applying Simple Procedures  -->
  &amp;subsection3.2.2;

  <!--  Subsection 3 : Frames as the Repository of Local State  -->
  &amp;subsection3.2.3;

  <!--  Subsection 4 : Internal Definitions  -->
  &amp;subsection3.2.4;

  <!--  Subsection 5 : CSE Machine  -->
  &amp;subsection3.2.5;

</SECTION>
