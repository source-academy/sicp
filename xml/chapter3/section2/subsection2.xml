<SUBSECTION> 
  <NAME>
    Applying Simple
    <SPLITINLINE>
      <SCHEME>Procedures</SCHEME>
      <PYTHON>Functions</PYTHON>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:env-apply-proc"/>
  <INDEX>environment model of evaluation<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE>-application example<OPEN/></SUBINDEX></INDEX>
  <INDEX>function application<SUBINDEX>environment model of<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    <INDEX><USE>sum_of_squares</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>
    When we introduced the substitution model in
    section<SPACE/><REF NAME="sec:substitution-model"/> we showed how the
    <SPLITINLINE>
      <SCHEME>combination <SCHEMEINLINE>(f 5)</SCHEMEINLINE></SCHEME>
      <PYTHON>application
      <PYTHONINLINE>f(5)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    evaluates to 136, given the following
    <SPLITINLINE>
      <SCHEME>procedure definitions:</SCHEME>
      <PYTHON>function declarations:</PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="yes">
      <EXAMPLE>f_example</EXAMPLE>
      <EXPECTED>136</EXPECTED>
      <SCHEME>
(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
      </SCHEME>
      <PYTHON>
function square(x) {
    return x * x;
}
function sum_of_squares(x, y) {
    return square(x) + square(y);
}
function f(a) {
    return sum_of_squares(a + 1, a * 2);
}
      </PYTHON>
    </SNIPPET>
    We can analyze the same example using the environment model.
    Figure<SPACE/><REF NAME="fig:sum-squares"/> shows the three
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <PYTHON>function</PYTHON>
    </SPLITINLINE>
    objects created by evaluating the definitions of
    <SCHEMEINLINE>f</SCHEMEINLINE>, <SCHEMEINLINE>square</SCHEMEINLINE>, and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment.  Each
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object consists of some code, together with a pointer to the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE split_scale="0.9" src="img_original/ch3-Z-G-5.svg"></FIGURE>
          <LABEL NAME="fig:sum-squares_scheme"/>
          <CAPTION>Procedure objects in the global frame.</CAPTION>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-5.svg"></FIGURE>
          <LABEL NAME="fig:sum-squares"/>
          <CAPTION>Function objects in the program frame.</CAPTION>
        </FIGURE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <TEXT>
  <WEB_ONLY>
    <!-- Figure moved later for SICP JS pagination -->
    <!-- Figure code is duplicated later in this file in a PDF_ONLY -->
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE src="img_original/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval_scheme"/>
          <CAPTION>
	    Environments created by evaluating
	    <SCHEMEINLINE>(f 5)</SCHEMEINLINE> using the procedures in
	    figure<SPACE/><REF NAME="fig:sum-squares_scheme"/>.
	  </CAPTION>
	</FIGURE>
      </SCHEME>
      <PYTHON>
	<FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval"/>
          <CAPTION>
	    Environments created by evaluating
	    <PYTHONINLINE>f(5)</PYTHONINLINE> using the functions in
	    figure<SPACE/><REF NAME="fig:sum-squares"/>.
	  </CAPTION>
	</FIGURE>
      </PYTHON>
    </SPLIT>
  </WEB_ONLY>

    In
    <SPLITINLINE>
      <SCHEME>figure<SPACE/><REF NAME="fig:f5-eval_scheme"/></SCHEME>
      <PYTHON>figure<SPACE/><REF NAME="fig:f5-eval"/></PYTHON>
    </SPLITINLINE>
    we see the environment structure created by evaluating the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(f 5)</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>f(5)</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
    The call to <SCHEMEINLINE>f</SCHEMEINLINE> creates a new environment, E1,
    beginning with a frame in which <SCHEMEINLINE>a</SCHEMEINLINE>, the
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE> parameter of
    <SCHEMEINLINE>f</SCHEMEINLINE>, is bound to the argument 5.  In E1, we
    evaluate the body of <SCHEMEINLINE>f</SCHEMEINLINE>:
    <SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ a 1) (* a 2))
      </SCHEME>
      <PYTHON>
return sum_of_squares(a + 1, a * 2);
      </PYTHON>
    </SNIPPET>
    <SHORT_PAGE lines="2"/>To evaluate
    <SPLITINLINE>
      <SCHEME>
    this combination,
    we first evaluate the subexpressions.
      </SCHEME>
      <PYTHON>
	the return statement, we first evaluate the
	subexpressions of the return expression.
      </PYTHON>
    </SPLITINLINE>
    The first subexpression,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    has a value that is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object.  (Notice how this value is found: We first look in the first frame
    of E1, which contains no binding for
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Then we proceed to the enclosing environment, i.e., the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment, and find the binding shown in
    <SPLITINLINE>
      <SCHEME>
        figure<SPACE/><REF NAME="fig:sum-squares_scheme"/>.)
      </SCHEME>
      <PYTHON>
	figure<SPACE/><REF NAME="fig:sum-squares"/>.)
      </PYTHON>
    </SPLITINLINE>
    The other two subexpressions are evaluated by applying the primitive
    operations <SCHEMEINLINE>+</SCHEMEINLINE> and <SCHEMEINLINE>*</SCHEMEINLINE>
    to evaluate the two combinations
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ a 1)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>a + 1</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* a 2)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>a * 2</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    to obtain 6 and 10, respectively.
  </TEXT>

  <TEXT>
    Now we apply the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    to the arguments 6 and 10.  This results in a new environment, E2, in which
    the <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE> parameters
    <SCHEMEINLINE>x</SCHEMEINLINE> and <SCHEMEINLINE>y</SCHEMEINLINE> are bound
    to the arguments. Within E2 we evaluate 
    <SPLITINLINE>
      <SCHEME>
	the combination	
	<SCHEMEINLINE>(+ (square x) (square y))</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	the statement
	<SNIPPET EVAL="no">
	  <PYTHON>
return square(x) + square(y);
	  </PYTHON>
	</SNIPPET>
      </PYTHON>
    </SPLITINLINE>
    This leads us to evaluate
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(square x)</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>square(x)</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    where <SCHEMEINLINE>square</SCHEMEINLINE> is found in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    frame and <SCHEMEINLINE>x</SCHEMEINLINE> is 6.  Once again, we set up a
    new environment, E3, in which <SCHEMEINLINE>x</SCHEMEINLINE> is bound to 6,
    and within this we evaluate the body of <SCHEMEINLINE>square</SCHEMEINLINE>,
    which is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>return x * x;</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
    Also as part of applying
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    we must evaluate the subexpression
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(square y)</SCHEMEINLINE>,</SCHEME>
    <PYTHON><PYTHONINLINE>square(y)</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    where <SCHEMEINLINE>y</SCHEMEINLINE> is 10.  This second call to
    <SCHEMEINLINE>square</SCHEMEINLINE> creates another environment, E4, in
    which <SCHEMEINLINE>x</SCHEMEINLINE>, the
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE> parameter of
    <SCHEMEINLINE>square</SCHEMEINLINE>, is bound to 10.  And within E4 we must
    evaluate
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>return x * x;</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    The important point to observe is that each call to
    <SCHEMEINLINE>square</SCHEMEINLINE> creates a new environment containing a
    binding for <SCHEMEINLINE>x</SCHEMEINLINE>.  We can see here how the
    different frames serve to keep separate the different local variables all
    named <SCHEMEINLINE>x</SCHEMEINLINE>.  Notice that each frame created by
    <SCHEMEINLINE>square</SCHEMEINLINE> points to the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment, since this is the environment indicated by the
    <SCHEMEINLINE>square</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object.
  </TEXT>

  <TEXT>
    After the subexpressions are evaluated, the results are returned.  The
    values generated by the two calls to <SCHEMEINLINE>square</SCHEMEINLINE> are
    added by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>sum_of_squares</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    and this result is returned by <SCHEMEINLINE>f</SCHEMEINLINE>.
    Since our focus here is on the environment structures, we will not
    dwell on how these returned values are passed from call to call;
    however, this is also an important aspect of the evaluation process,
    and we will return to it in detail in chapter<SPACE/><REF NAME="chap:reg"></REF>.
    <INDEX><USE>sum_of_squares</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:factorial-env-model"/>
    In section<SPACE/><REF NAME="sec:recursion-and-iteration"/>
    we used the substitution model to analyze two
    <INDEX>recursive process<SUBINDEX>iterative process vs.</SUBINDEX></INDEX>
    <INDEX>iterative process<SUBINDEX>recursive process vs.</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    for computing
    <INDEX><USE>factorial</USE><SUBINDEX>environment structure in evaluating</SUBINDEX></INDEX>
    factorials, a recursive version
    <SNIPPET EVAL="yes">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
      </SCHEME>
      <PYTHON>
function factorial(n) {
    return n === 1
           ? 1
           : n * factorial(n - 1);
}
      </PYTHON>
    </SNIPPET>
    and an iterative version
    <SNIPPET EVAL="yes">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
      </SCHEME>
      <PYTHON>
function factorial(n) {
    return fact_iter(1, 1, n);
}
function fact_iter(product, counter, max_count) {
    return counter &gt; max_count
           ? product
           : fact_iter(counter * product, 
                       counter + 1, 
                       max_count);
}
      </PYTHON>
    </SNIPPET>
    Show the environment structures created by evaluating
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(factorial 6)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>factorial(6)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    using each version of the <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE>.<FOOTNOTE>
    The environment model will not clarify our claim in
    section<SPACE/><REF NAME="sec:recursion-and-iteration"/> that the
    interpreter can execute a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>fact_iter</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    in a constant amount of space using tail recursion.  We will discuss
    <INDEX>environment model of evaluation<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
    <INDEX>tail recursion<SUBINDEX>environment model of evaluation and</SUBINDEX></INDEX>
    tail recursion when we
    deal with the control structure of the interpreter in
    section<SPACE/><REF NAME="sec:eceval"/>.</FOOTNOTE>
  </EXERCISE>

  <INDEX>environment model of evaluation<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE>-application example<CLOSE/></SUBINDEX></INDEX>
  <INDEX>function application<SUBINDEX>environment model of<CLOSE/></SUBINDEX></INDEX>

  <PDF_ONLY>
    <!-- Figure moved here from earlier for SICP JS pagination -->
    <!-- Figure code is copy of code earlier in this file in a WEB_ONLY -->
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE src="img_original/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval_scheme"/>
          <CAPTION>
	    Environments created by evaluating
	    <SCHEMEINLINE>(f 5)</SCHEMEINLINE> using the procedures in
	    figure<SPACE/><REF NAME="fig:sum-squares_scheme"/>.
	  </CAPTION>
	</FIGURE>
      </SCHEME>
      <PYTHON>
	<FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-6.svg"></FIGURE>
          <LABEL NAME="fig:f5-eval"/>
          <CAPTION>
	    Environments created by evaluating
	    <PYTHONINLINE>f(5)</PYTHONINLINE> using the functions in
	    figure<SPACE/><REF NAME="fig:sum-squares"/>.
	  </CAPTION>
	</FIGURE>
      </PYTHON>
    </SPLIT>
  </PDF_ONLY>

</SUBSECTION>
