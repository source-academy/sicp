<SUBSECTION> 
  <NAME>
    Internal
    <SPLITINLINE>
      <SCHEME>Definitions</SCHEME>
      <JAVASCRIPT>Declarations</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:env-internal-def"/>
  <INDEX>block structure<SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>
  <INDEX>environment model of evaluation<SUBINDEX>internal declarations<OPEN/></SUBINDEX></INDEX>
  <INDEX>internal declaration<SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>

  <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	In this section we handle the evaluation of function bodies or other
	blocks that contain declarations; examples are
	the bodies of the functions
	<JAVASCRIPTINLINE>make_withdraw_100</JAVASCRIPTINLINE> and 
	<JAVASCRIPTINLINE>make_account</JAVASCRIPTINLINE>
	of section<SPACE/><REF NAME="sec:local-state-variables"/>, and
	the branches of conditional statements introduced in
	section<SPACE/><REF NAME="sec:lambda"/>.
	Each block opens a new scope for names declared in the block.
	In order to evaluate a block in a given environment, we extend that
	environment by a new frame that contains all names declared directly
	(that is, outside of nested blocks) in the body of the block and
	then evaluate the body in the newly constructed environment.
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <TEXT>
    Section<SPACE/><REF NAME="sec:black-box"/> introduced the idea that
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    can have internal
    <SPLITINLINE>
      <SCHEME>
	definitions,
      </SCHEME>
      <JAVASCRIPT>
	declarations,
      </JAVASCRIPT>
    </SPLITINLINE>
    thus leading to a block structure as in the
    <INDEX><USE>sqrt</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>
    following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to compute square roots:
    <SNIPPET EVAL="yes">
      <NAME>another_sqrt</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>sqrt_example7</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess){
        return is_good_enough(guess)
               ? guess
               : sqrt_iter(improve(guess));
    }
    return sqrt_iter(1);
}
      </JAVASCRIPT>
    </SNIPPET>
    Now we can use the environment model to see why these internal
    <SPLITINLINE>
      <SCHEME>
	definitions
      </SCHEME>
      <JAVASCRIPT>
	declarations
      </JAVASCRIPT>
    </SPLITINLINE>
    behave as desired.
    <SPLITINLINE>
      <SCHEME>
    Figure<SPACE/><REF NAME="fig:sqrt-internal_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
    Figure<SPACE/><REF NAME="fig:sqrt-internal"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the point in the evaluation of the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt 2)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt(2)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    where the internal
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    has been called for the first time with
    <SCHEMEINLINE>guess</SCHEMEINLINE> equal to<SPACE/>1.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>
	    <SCHEMEINLINE>sqrt</SCHEMEINLINE> procedure with internal
	    definitions.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-12.svg"></FIGURE>
          <CAPTION>
	    <SCHEMEINLINE>sqrt</SCHEMEINLINE> function with internal
	    declarations.
	  </CAPTION>
          <LABEL NAME="fig:sqrt-internal"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    Observe the structure of the environment.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Sqrt</SCHEMEINLINE> is a
	symbol in the
	global
	environment that is bound
      </SCHEME>
      <JAVASCRIPT>
      The name
      <SCHEMEINLINE>sqrt</SCHEMEINLINE> is bound
      in the program environment
      </JAVASCRIPT>
    </SPLITINLINE>
    to a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object whose associated environment is the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment.  When <SCHEMEINLINE>sqrt</SCHEMEINLINE> was called, a new
    environment, E1, was formed, subordinate to the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    environment, in which the parameter <SCHEMEINLINE>x</SCHEMEINLINE> is bound
    to<SPACE/>2. The body of <SCHEMEINLINE>sqrt</SCHEMEINLINE> was then
    evaluated in<SPACE/>E1. 
    <SPLIT>
      <SCHEME>
	Since the first expression
	in the body of <SCHEMEINLINE>sqrt</SCHEMEINLINE> is
      </SCHEME>
      <JAVASCRIPT>
	That body in this case is a block with local
	function declarations and therefore E1 was extended with a new frame for
	those declarations, resulting in the new environment E2. The body
	of the block was then evaluated in E2. Since the first statement
	in the body is
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET EVAL="no">
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (good-enough? guess)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
	evaluating this expression defined the procedure
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>
	in the environment<SPACE/>E1.
      </SCHEME>
      <JAVASCRIPT>
	evaluating this declaration created the function
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
	in the environment<SPACE/>E2.
      </JAVASCRIPT>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	To<SPACE/>be more precise, the symbol 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE> was added to the first frame
	of E1, bound to a procedure
	object whose associated environment is E1.
      </SCHEME>
      <JAVASCRIPT>
	To<SPACE/>be more precise, 
	the name <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
	in the first frame of E2 was bound to a function
	object whose associated environment is E2.
      </JAVASCRIPT>
    </SPLIT>
    Similarly,
    <SCHEMEINLINE>improve</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    were defined as
    <SPLITINLINE>
      <SCHEME>procedures in E1.</SCHEME>
      <JAVASCRIPT>functions in E2.</JAVASCRIPT>
    </SPLITINLINE>
    For conciseness,
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:sqrt-internal_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:sqrt-internal"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows only the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object for 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    After the local
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    were defined, the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(sqrt-iter 1.0)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter(1)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    was evaluated, still in environment
    <SPLITINLINE>
      <SCHEME>E1.</SCHEME>
      <JAVASCRIPT>E2.</JAVASCRIPT>
    </SPLITINLINE>
    So the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    object bound to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>
      in E1 was called with 1 as an argument.  This created an environment E2
      in which
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>
      in E2 was called with 1 as an argument.  This created an environment E3
      in which
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>guess</SCHEMEINLINE>, the parameter of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    is bound to 1.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in turn called 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    with the value of <SCHEMEINLINE>guess</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>
	(from E2) as the argument for 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	(from E3) as the argument for 
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    This set up another environment,
    <SPLITINLINE>
      <SCHEME>
	E3, in which
	<SCHEMEINLINE>guess</SCHEMEINLINE> (the parameter of 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>)
      </SCHEME>
      <JAVASCRIPT>
	E4, in which
	<SCHEMEINLINE>guess</SCHEMEINLINE> (the parameter of 
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    is bound to 1. Although 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    both have a parameter named <SCHEMEINLINE>guess</SCHEMEINLINE>, these are two
    distinct local variables located in different frames.
    <SPLIT>
      <SCHEME>
	Also, E2 and E3 both have E1 as their enclosing environment, because the 
	<SCHEMEINLINE>sqrt-iter</SCHEMEINLINE> and 
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE> procedures
	both have E1 as their environment part.
      </SCHEME>
      <JAVASCRIPT>
	Also, E3 and E4 both have E2 as their enclosing environment, because the 
	<JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE></JAVASCRIPT>
	and 
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE> functions
	both have E2 as their environment part.
      </JAVASCRIPT>
    </SPLIT>
    One consequence of this is that the
    <SPLITINLINE>
      <SCHEME>
	symbol
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>x</SCHEMEINLINE> that appears in the body of 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will reference the binding of <SCHEMEINLINE>x</SCHEMEINLINE> that appears in
    E1, namely the value of <SCHEMEINLINE>x</SCHEMEINLINE> with which the
    original <SCHEMEINLINE>sqrt</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    was called.
    <INDEX><USE>sqrt</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <TEXT>
    The environment model thus explains the two key properties that make local
    <SPLITINLINE>
      <SCHEME>procedure definitions</SCHEME>
      <JAVASCRIPT>function declarations</JAVASCRIPT>
    </SPLITINLINE>
    a useful technique for modularizing programs:
    <UL>
      <LI>
	The names of the local
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	do not interfere with
	names external to the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure,</SCHEME>
	  <JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
	because the local
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	names will be bound in the frame that the
	<SPLITINLINE>
	  <SCHEME>procedure creates when it is run,</SCHEME>
	  <JAVASCRIPT>block creates when it is evaluated,</JAVASCRIPT>
	</SPLITINLINE>
	rather than being bound in the
	<SPLITINLINE>
	  <SCHEME>global</SCHEME>
	  <JAVASCRIPT>program</JAVASCRIPT>
	</SPLITINLINE>
	environment.
      </LI>
      <LI>
	The local
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	can access the arguments of the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure,</SCHEME>
	  <JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
	simply by using parameter names as free
	<SPLITINLINE>
	  <SCHEME>variables.</SCHEME>
	  <JAVASCRIPT>names.</JAVASCRIPT>
	</SPLITINLINE>
	This is
	because the body of the local
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	is evaluated in an environment that is subordinate to the
	evaluation environment for the enclosing
	<SPLITINLINE>
	  <SCHEME>procedure.</SCHEME>
	  <JAVASCRIPT>function.</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
    </UL>
  </TEXT>
  <EXERCISE>
    In section<SPACE/><REF NAME="sec:env-local-state"/> we saw how the
    environment model described the behavior of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    with local state.  Now we have seen how internal
    <SPLITINLINE>
      <SCHEME>
	definitions
      </SCHEME>
      <JAVASCRIPT>
	declarations
      </JAVASCRIPT>
    </SPLITINLINE>
    work.
    <INDEX>environment model of evaluation<SUBINDEX>message passing</SUBINDEX></INDEX>
    <INDEX>message passing<SUBINDEX>environment model and</SUBINDEX></INDEX>
    A typical message-passing
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    contains both of these aspects.  Consider the
    <INDEX>bank account</INDEX>
    bank account
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:local-state-variables"/>:
    <SNIPPET EVAL="yes">
      <INDEX><USE>make_account</USE><SUBINDEX><ORDER>environment</ORDER>in environment model</SUBINDEX><FRAGILE/></INDEX>
      <NAME>another_make_account</NAME>
      <EXAMPLE>another_make_account_example</EXAMPLE>
      <EXPECTED>30</EXPECTED>
      <SCHEME>
(define (make-account balance)
  (define (withdraw amount)
    (if (&gt;= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request - - MAKE-ACCOUNT"
                       m))))
  dispatch)
      </SCHEME>
      <JAVASCRIPT>
function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt;= amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;  
    }
    function dispatch(m) {
        return m === "withdraw"
               ? withdraw
               : m === "deposit"
               ? deposit
               : "Unknown request: make_account";
    }
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
    Show the environment structure generated by the sequence of
    interactions
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example</NAME>
      <SCHEME>
            (define acc (make-account 50))
      </SCHEME>
      <JAVASCRIPT>
const acc = make_account(50);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example_2</NAME>
      <SCHEME>
            ((acc 'deposit) 40)
      </SCHEME>
      <SCHEMEOUTPUT>
	90
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
acc("deposit")(40);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
90
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <NAME>another_make_account_example_3</NAME>
      <SCHEME>
            ((acc 'withdraw) 60)
      </SCHEME>
      <SCHEMEOUTPUT>
	30
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
acc("withdraw")(60);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
30
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    Where is the local state for <SCHEMEINLINE>acc</SCHEMEINLINE> kept?
    Suppose we define another account
    <SNIPPET EVAL="no"> 
      <SCHEME>
            (define acc2 (make-account 100))
      </SCHEME>
      <JAVASCRIPT>
const acc2 = make_account(100);
      </JAVASCRIPT>
    </SNIPPET>
    How are the local states for the two accounts kept distinct?  Which parts
    of the environment structure are shared between
    <SCHEMEINLINE>acc</SCHEMEINLINE> and <SCHEMEINLINE>acc2</SCHEMEINLINE>?
    <LABEL NAME="ex:two-accounts"/>
  </EXERCISE>

  <SUBHEADING><NAME>More on blocks</NAME></SUBHEADING>

  <TEXT>
    In order to evaluate a block whose body contains declarations, we extend the
    current environment by a frame that contains all names declared directly
    in the body of the block before evaluating the statements in the block. This
    reflects at run time that the scope of these
    names is the entire block. Consider as an example the following (somewhat
    wasteful) way of checking whether a nonnegative integer is even or odd.
    <SNIPPET LATEX="yes">
      <NAME>f_is_even_is_odd</NAME>
      <JAVASCRIPT>
function f(x) {
    function is_even(n) {
        return n === 0
               ? true
               : is_odd(n - 1);
    }
    function is_odd(n) {
        return n === 0
               ? false
               : is_even(n - 1);
    }
    <METAPHRASE>rest of body of <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE></METAPHRASE>
}
      </JAVASCRIPT>
    </SNIPPET>
    The functions <JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE> and
    <JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE> call each other mutually
    recursively until one of them reaches the base case
    <JAVASCRIPTINLINE>n === 0</JAVASCRIPTINLINE>. By the time
    the evaluation of the
    rest of the body of
    <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> evaluates an application of
    <JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE> or
    <JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE>, both names are bound to
    their respective function object. The mutual recursion is possible
    even though an application of
    <JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE> appears in the body of
    <JAVASCRIPTINLINE>is_even</JAVASCRIPTINLINE> before the declaration of
    <JAVASCRIPTINLINE>is_odd</JAVASCRIPTINLINE>.
  </TEXT>
  <TEXT>
    We may not always be so lucky. An erroneous program may attempt to access the
    value of a name before its declaration is
    evaluated. The designers of JavaScript decided that local names are
    initially unassigned, and that the evaluation of an unassigned name
    <INDEX>declaration<SUBINDEX>use of name before</SUBINDEX></INDEX>
    signals an error.<FOOTNOTE>
    The time between creating the binding for a name and
    evaluating the declaration of the name is called the
    <INDEX>temporal dead zone (TDZ)</INDEX>
    <INDEX>TDZ (temporal dead zone)</INDEX>
    <QUOTE>temporal dead zone</QUOTE> (TDZ).</FOOTNOTE>
    The evaluation of a constant or variable declaration then assigns to the
    name the result of evaluating the expression to the right of the
    <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>, as if the declaration were
    an assignment.<FOOTNOTE>With a deeper understanding of the
    scope of names, we can now explain why the program in
    footnote<SPACE/><REF NAME="foot:tdz"/> of chapter 1 goes
    wrong.</FOOTNOTE>
  </TEXT>
  <TEXT>
    Equipped with a way to handle declarations within blocks, we can
    revisit declarations of names at the top level. We stated
    that the names declared at the top level are added to the program
    frame. A better explanation is that the whole program is placed in
    an implicit block, which is evaluated in the global environment.
    The treatment of blocks described above then handles the top
    level:
    the global environment is extended by a frame that contains the
    bindings of all names declared in the implicit block. That frame is
    the program frame and the resulting
    environment is the program environment.
  </TEXT>
  <INDEX>environment model of evaluation<CLOSE/></INDEX>
  <INDEX>block structure<SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
  <INDEX>environment model of evaluation<SUBINDEX>internal declarations<CLOSE/></SUBINDEX></INDEX>
  <INDEX>internal declaration<SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
