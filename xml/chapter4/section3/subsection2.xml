<SUBSECTION>
  <NAME>
    Examples of Nondeterministic Programs
  </NAME>

  <LABEL NAME="sec:amb-examples"/>
  <TEXT>
    Section<SPACE/><REF NAME="sec:amb-implementation"/> describes the
    implementation of the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator.  First,
    however, we give some examples of how it can be used.  The advantage of
    nondeterministic programming is that we can suppress the details of how
    search is carried out, thereby
    expressing our programs at a higher level of
    <INDEX>abstraction<SUBINDEX><ORDER>search</ORDER>of search in nondeterministic programming</SUBINDEX></INDEX>
    abstraction.
  </TEXT>

  <SUBHEADING>
    <NAME>Logic Puzzles</NAME>
  </SUBHEADING>

  <INDEX>puzzles<SUBINDEX>logic puzzles<OPEN/></SUBINDEX></INDEX>
  <INDEX>logic puzzles<OPEN/></INDEX>
  <INDEX>nondeterministic programs<SUBINDEX>logic puzzles<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    The following puzzle (taken from
    <INDEX>Dinesman, Howard P.</INDEX>
    <CITATION>Dinesman 1968</CITATION>) 
    is typical of a large class of simple logic puzzles:
    <BLOCKQUOTE>
      Baker, Cooper, Fletcher, Miller, and Smith live on different floors of
      an apartment house that contains only five floors.  Baker does not
      live on the top floor.  Cooper does not live on the bottom floor.
      Fletcher does not live on either the top or the bottom floor.  Miller
      lives on a higher floor than does Cooper.  Smith does not live on a
      floor adjacent to Fletcher<APOS/>s.  Fletcher does not live on a floor
      adjacent to Cooper<APOS/>s.  Where does everyone live?
    </BLOCKQUOTE>
  </TEXT>
  <TEXT>
    We can determine who lives on each floor in a straightforward way by
    enumerating all the possibilities and imposing the given
    restrictions:<FOOTNOTE>Our program uses the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to determine if the elements of a list are distinct:
    <SNIPPET HIDE="yes">
      <NAME>distinct_example</NAME>
      <JAVASCRIPT>
distinct(list(1, 2, 4, 4, 5));	
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>distinct</DECLARATION></INDEX> 
      <NAME>distinct</NAME>
      <EXAMPLE>distinct_example</EXAMPLE>
      <EXPECTED>false</EXPECTED>
      <SCHEME>
(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))
      </SCHEME>
      <JAVASCRIPT>
function distinct(items) {	
    return is_null(items)
           ? true
           : is_null(tail(items))
           ? true
           : is_null(member(head(items), tail(items)))
           ? distinct(tail(items))
           : false;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Member</SCHEMEINLINE>
	<INDEX><USE>member</USE></INDEX> 
	is like
	<SCHEMEINLINE>memq</SCHEMEINLINE>
	except that it uses <SCHEMEINLINE>equal?</SCHEMEINLINE> instead
	of <SCHEMEINLINE>eq?</SCHEMEINLINE> to test for equality.
      </SCHEME>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <INDEX><DECLARATION>multiple_dwelling</DECLARATION></INDEX> 
      <NAME>multiple_dwelling</NAME>
      <REQUIRES>distinct</REQUIRES>
      <EXAMPLE>multiple_dwelling_example</EXAMPLE>
      <EXPECTED>[ 'baker', [ 3, null ] ]</EXPECTED> 
      <SCHEME>
(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (&gt; miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))
      </SCHEME>
      <JAVASCRIPT>
function multiple_dwelling() {
    const baker = amb(1, 2, 3, 4, 5);
    const cooper = amb(1, 2, 3, 4, 5);
    const fletcher = amb(1, 2, 3, 4, 5);
    const miller = amb(1, 2, 3, 4, 5);
    const smith = amb(1, 2, 3, 4, 5);
    require(distinct(list(baker, cooper, fletcher, miller, smith)));
    require(! (baker === 5));
    require(! (cooper === 1));
    require(! (fletcher === 5));
    require(! (fletcher === 1));
    require(miller &gt; cooper);
    require(! (math_abs(smith - fletcher) === 1));
    require(! (math_abs(fletcher - cooper) === 1));
    return list(list("baker", baker),
                list("cooper", cooper),
                list("fletcher", fletcher),
                list("miller", miller),
                list("smith", smith));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>multiple_dwelling_example</NAME>
      <SCHEME>
(multiple-dwelling)
      </SCHEME>
      <JAVASCRIPT>
multiple_dwelling();      
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
head(multiple_dwelling());
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Evaluating the expression
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(multiple-dwelling)</SCHEMEINLINE>
  </SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>multiple_dwelling()</JAVASCRIPTINLINE>
  </JAVASCRIPT>
    </SPLITINLINE>
    produces the result
    <SNIPPET EVAL="no">
    <SCHEME>
((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))
    </SCHEME>
    <JAVASCRIPT>
list(list("baker", 3), list("cooper", 2), list("fletcher", 4),
     list("miller", 5), list("smith", 1))
    </JAVASCRIPT>
    </SNIPPET>
    Although this simple
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    works, it is very slow.
    Exercises<SPACE/><REF NAME="ex:better-multiple-dwelling1"/>
    and<SPACE/><REF NAME="ex:better-multiple-dwelling2"/> discuss some possible
    improvements.

    <INDEX>nondeterministic programs<SUBINDEX>logic puzzles<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:multiple_dwelling_1"/>
    Modify the multiple-dwelling
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to omit the requirement that Smith and Fletcher do not live on adjacent
    floors.  How many solutions are there to this modified puzzle?
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:better-multiple-dwelling1"/>
    Does the order of the restrictions in the multiple-dwelling
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    affect the answer? Does it affect the time to find an answer?  If you
    think it matters, demonstrate a faster program obtained from the given
    one by reordering the restrictions.  If you think it does not matter,
    argue your case.
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:better-multiple-dwelling2"/>
    In the multiple dwelling problem, how many sets of assignments are
    there of people to floors, both before and after the requirement that
    floor assignments be distinct?  It is very inefficient to generate all
    possible assignments of people to floors and then leave it to
    backtracking to eliminate them.  For example, most of the restrictions
    depend on only one or two of the person-floor
    <SPLITINLINE>
      <SCHEME>variables,</SCHEME>
      <JAVASCRIPT>names,</JAVASCRIPT>
    </SPLITINLINE>
    and can thus be imposed before floors have been selected for all the people.
    Write and demonstrate a much more efficient nondeterministic
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that solves this problem based upon generating only those possibilities that
    are not already ruled out by previous restrictions.
    <SPLITINLINE>
      <SCHEME>
	(Hint: This will require a nest of <SCHEMEINLINE>let</SCHEMEINLINE>
	expressions.)
      </SCHEME>
    </SPLITINLINE>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:multiple_dwelling_4"/>
    Write an ordinary
    <INDEX>nondeterministic programming vs.<SPACE/>JavaScript programming</INDEX>
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program to solve the multiple dwelling puzzle.
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:liars"/>
    Solve the following <QUOTE>Liars</QUOTE> puzzle (from
    <INDEX>Phillips, Hubert</INDEX>
    <CITATION>Phillips 1934</CITATION>):
    <BLOCKQUOTE>
      Five schoolgirls sat for an examination.  Their parents<EMDASH/>so they
      thought<EMDASH/>showed an undue degree of interest in the result.  They
      therefore agreed that, in writing home about the examination, each 
      girl should make one true statement and one untrue one.  The following
      are the relevant passages from their letters:
      <UL>
	<LI>
	  Betty:
	  <QUOTE>Kitty was second in the examination.  I was only third.</QUOTE>
	</LI>
	<LI>
	  Ethel:
	  <QUOTE>You<APOS/>ll be glad to hear that I was on top.
	  Joan was second.</QUOTE>
	</LI>
	<LI>
	  Joan: <QUOTE>I was third, and poor old Ethel was bottom.</QUOTE>
	</LI>
	<LI>
	  Kitty: <QUOTE>I came out second.  Mary was only fourth.</QUOTE>
	</LI>
	<LI>
	  Mary: <QUOTE>I was fourth.  Top place was taken by Betty.</QUOTE>
	</LI>
      </UL>
      What in fact was the order in which the five girls were placed?
    </BLOCKQUOTE>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:yacht"/>
    Use the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator to solve the following
    puzzle:<FOOTNOTE>This is taken from a booklet called <QUOTE>Problematical
    Recreations,</QUOTE> published in the 1960s by Litton Industries, where it
    is attributed to the <EM>Kansas State Engineer</EM>.</FOOTNOTE>
    <BLOCKQUOTE>
      Mary Ann Moore<APOS/>s father has a yacht and so has each of his four
      friends:  Colonel Downing, Mr.<SPACE/>Hall, Sir Barnacle Hood, and
      Dr.<SPACE/>Parker.
      Each of the five also has one daughter and each has named his
      yacht after a daughter of one of the others.  Sir Barnacle<APOS/>s yacht is
      the Gabrielle, Mr.<SPACE/>Moore owns the Lorna; Mr.<SPACE/>Hall the Rosalind.  The
      Melissa, owned by Colonel Downing, is named after Sir Barnacle<APOS/>s
      daughter.  Gabrielle<APOS/>s father owns the yacht that is named after
      Dr.<SPACE/>Parker<APOS/>s daughter.  Who is Lorna<APOS/>s father?
    </BLOCKQUOTE>
    Try to write the program so that it runs efficiently (see
    exercise<SPACE/><REF NAME="ex:better-multiple-dwelling2"/>).  Also determine
    how many solutions there are if we are not told that Mary Ann<APOS/>s last
    name is Moore.
  </EXERCISE>

  <INDEX>puzzles<SUBINDEX>logic puzzles<CLOSE/></SUBINDEX></INDEX>
  <INDEX>logic puzzles<CLOSE/></INDEX>

  <EXERCISE>
    <LABEL NAME="ex:queens_amb"/>
    Exercise<SPACE/><REF NAME="ex:8queens"/> described the
    <INDEX>chess, eight-queens puzzle</INDEX>
    <INDEX>eight-queens puzzle</INDEX>
    <INDEX>puzzles<SUBINDEX>eight-queens puzzle</SUBINDEX></INDEX>
    <INDEX>nondeterministic programming vs.<SPACE/>JavaScript programming</INDEX>
    <QUOTE>eight-queens puzzle</QUOTE> of placing queens on a chessboard so that
    no two attack each other. Write a nondeterministic program to solve this
    puzzle.
  </EXERCISE>

  <SUBHEADING>
    <NAME>Parsing natural language</NAME>
  </SUBHEADING>

  <INDEX>parsing natural language<OPEN/></INDEX>
  <INDEX>nondeterministic programs<SUBINDEX>parsing natural language<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Programs designed to accept natural language as input usually start by
    attempting to <EM>parse</EM> the input, that is, to match the input
    against some grammatical structure.  For example, we might try to
    recognize simple sentences consisting of an article followed by a noun
    followed by a verb, such as <QUOTE>The cat eats.</QUOTE>  To accomplish
    such an analysis, we must be able to identify the parts of speech of
    individual words.  We could start with some lists that classify various
    words:<FOOTNOTE>Here we use the convention that the first element of each
    list designates the part of speech for the rest of the words in the
    list.</FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>nouns</DECLARATION></INDEX> 
      <INDEX><DECLARATION>verbs</DECLARATION></INDEX> 
      <INDEX><DECLARATION>articles</DECLARATION></INDEX> 
      <NAME>nouns</NAME>
      <SCHEME>
(define nouns '(noun student professor cat class))

(define verbs '(verb studies lectures eats sleeps))

(define articles '(article the a))
      </SCHEME>
      <JAVASCRIPT>
const nouns = list("noun", "student", "professor", "cat", "class");

const verbs = list("verb", "studies", "lectures", "eats", "sleeps");

const articles = list("article", "the", "a");
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We also need a
    <INDEX>grammar</INDEX>
    <EM>grammar</EM>, that is, a set of rules describing how
    grammatical elements are composed from simpler elements.  A very
    simple grammar might stipulate that a sentence always consists of two
    pieces<EMDASH/>a noun phrase followed by a verb<EMDASH/>and that a noun
    phrase consists of an article followed by a noun.  With this grammar, the
    sentence <QUOTE>The cat eats</QUOTE> is parsed as follows:
    <SNIPPET EVAL="no">
      <SCHEME>
(sentence (noun-phrase (article the) (noun cat))
          (verb eats))
      </SCHEME>
      <JAVASCRIPT>
list("sentence",
     list("noun-phrase", list("article", "the"), list("noun", "cat"),
     list("verb", "eats"))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <INDEX><USE>parse_...</USE><OPEN/></INDEX>
  
  <TEXT>
    We can generate such a parse with a simple program that has separate
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for each of the grammatical rules.  To parse a sentence, we identify its
    two constituent pieces and return a list of these two elements, tagged with
    the symbol <SCHEMEINLINE>sentence</SCHEMEINLINE>:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_sentence</NAME>
      <REQUIRES>parse_noun_phrase</REQUIRES>
      <REQUIRES>nouns</REQUIRES>
      <EXAMPLE>parse_input_example</EXAMPLE>
      <EXPECTED>[ "sentence", [ ["noun-phrase", [["article", ["the", null]], [["noun", ["cat", null]], null]]], [["verb", ["eats", null]], null]]]</EXPECTED>   
      <SCHEME>
(define (parse-sentence)
  (list 'sentence
        (parse-noun-phrase)
        (parse-word verbs)))
      </SCHEME>
      <JAVASCRIPT>
function parse_sentence() {      
    return list("sentence",
                parse_noun_phrase(),
                parse_word(verbs));
}
      </JAVASCRIPT>
    </SNIPPET>
    A noun phrase, similarly, is parsed by finding an article followed by a
    noun:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_noun_phrase</NAME>
      <REQUIRES>nouns</REQUIRES>
      <REQUIRES>parse_word</REQUIRES>
      <EXAMPLE>parse_input_example</EXAMPLE>
      <SCHEME>
(define (parse-noun-phrase)
  (list 'noun-phrase
        (parse-word articles)
        (parse-word nouns)))
      </SCHEME>
      <JAVASCRIPT>
function parse_noun_phrase() {
    return list("noun-phrase",
                parse_word(articles),
                parse_word(nouns));
}    
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    At the lowest level, parsing boils down to repeatedly checking that
    the next
    <SPLITINLINE>
      <SCHEME>unparsed</SCHEME>
      <JAVASCRIPT>not-yet-parsed</JAVASCRIPT>
    </SPLITINLINE>
    word is a member of the list of words for the
    required part of speech.  To implement this, we maintain a global
    variable
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>*unparsed*</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>not_yet_parsed</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which is the input that has not yet been parsed.  Each time we check a word,
    we require that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>*unparsed*</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>not_yet_parsed</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    must be nonempty and that it should begin with a word from the designated
    list.  If so, we remove that word from
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>*unparsed*</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>not_yet_parsed</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and return the word together with its part of speech (which is found at
    the head of the list):<FOOTNOTE>Notice that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>parse-word</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>parse_word</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    uses
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>assignment</JAVASCRIPT>
    </SPLITINLINE>
    to modify the
    <SPLITINLINE>
      <SCHEME>unparsed</SCHEME>
      <JAVASCRIPT>not-yet-parsed</JAVASCRIPT>
    </SPLITINLINE>
    input list.  For this to work, our
    <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator must undo the effects of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE> operations</SCHEME>
      <JAVASCRIPT>assignments</JAVASCRIPT>
    </SPLITINLINE>
    when it backtracks.</FOOTNOTE>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_word</NAME>
      <REQUIRES>unparsed</REQUIRES>
      <EXAMPLE>parse_input_example</EXAMPLE>
      <SCHEME>
(define (parse-word word-list)
  (require (not (null? *unparsed*)))
  (require (memq (car *unparsed*) (cdr word-list)))
  (let ((found-word (car *unparsed*)))
    (set! *unparsed* (cdr *unparsed*))
    (list (car word-list) found-word)))
      </SCHEME>
      <JAVASCRIPT>
function parse_word(word_list) {      
    require(! is_null(not_yet_parsed));
    require(! is_null(member(head(not_yet_parsed), tail(word_list))));
    const found_word = head(not_yet_parsed);
    not_yet_parsed = tail(not_yet_parsed);
    return list(head(word_list), found_word);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To start the parsing, all we need to do is set
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>*unparsed*</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>not_yet_parsed</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    to be
    the entire input, try to parse a sentence, and check that nothing is
    left over:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>unparsed</NAME>
      <SCHEME>
(define *unparsed* '())
      </SCHEME>
      <JAVASCRIPT>
let not_yet_parsed = null;
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_input</NAME>
      <REQUIRES>unparsed</REQUIRES>
      <REQUIRES>parse_sentence</REQUIRES>
      <EXAMPLE>parse_input_example</EXAMPLE>
      <SCHEME>
(define (parse input)
  (set! *unparsed* input)
  (let ((sent (parse-sentence)))
    (require (null? *unparsed*))
    sent))
      </SCHEME>
      <JAVASCRIPT>
function parse_input(input) {
    not_yet_parsed = input;
    const sent = parse_sentence();
    require(is_null(not_yet_parsed));
    return sent;
}    
      </JAVASCRIPT>
    </SNIPPET>
    We can now try the parser and verify that it works for our simple test
    sentence:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_input_example</NAME>
      <REQUIRES>parse_input</REQUIRES>
      <SCHEMEPROMPT>
;;; Amb-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(parse '(the cat eats))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Starting a new problem
;;; Amb-Eval value:
(sentence (noun-phrase (article the) (noun cat)) (verb eats))
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
amb-evaluate input:      
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
parse_input(list("the",  "cat",  "eats"));
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
parse_input(list("the",  "cat",  "eats"));
      </JAVASCRIPT_RUN>
      <JAVASCRIPT_OUTPUT>
Starting a new problem
amb-evaluate value:
list("sentence",
     list("noun-phrase", 
          list("article", "the"),
          list("noun", "cat")),
     list("verb", "eats"))
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator is useful here because it is
    convenient to express the parsing constraints with the aid of
    <SCHEMEINLINE>require</SCHEMEINLINE>. Automatic search and backtracking
    really pay off, however, when we consider more complex grammars where there
    are choices for how the units can be decomposed.
  </TEXT>

  <TEXT>
    Let<APOS/>s add to our grammar a list of prepositions:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <INDEX><DECLARATION>prepositions</DECLARATION></INDEX> 
      <NAME>prepositions</NAME>
      <SCHEME>
(define prepositions '(prep for to in by with))
      </SCHEME>
      <JAVASCRIPT>
const prepositions = list("prep", "for", "to",  "in", "by", "with");
      </JAVASCRIPT>
    </SNIPPET>
    and define a prepositional phrase (e.g., <QUOTE>for the cat</QUOTE>) to be
    a preposition followed by a noun phrase:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_prepositional_phrase</NAME>
      <REQUIRES>parse_word</REQUIRES>
      <REQUIRES>prepositions</REQUIRES>
      <EXAMPLE>parse_input_example_2</EXAMPLE>
      <EXPECTED>[ "sentence", [ [ "noun-phrase", [ [ "simple-noun-phrase", [["article", ["the", null]], [["noun", ["student", null]], null]]], [ [ "prep-phrase", [ ["prep", ["with", null]], [ [ "simple-noun-phrase", [["article", ["the", null]], [["noun", ["cat", null]], null]]], null]]], null]]], [ [ "verb-phrase", [ ["verb", ["sleeps", null]], [ [ "prep-phrase", [ ["prep", ["in", null]], [ [ "simple-noun-phrase", [["article", ["the", null]], [["noun", ["class", null]], null]]], null]]], null]]], null]]]</EXPECTED>   
      <SCHEME>
(define (parse-prepositional-phrase)
  (list 'prep-phrase
        (parse-word prepositions)
        (parse-noun-phrase)))
      </SCHEME>
      <JAVASCRIPT>
function parse_prepositional_phrase() {      
    return list("prep-phrase",
                parse_word(prepositions),
                parse_noun_phrase());
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we can define a sentence to be a noun phrase followed by a verb
    phrase, where a verb phrase can be either a verb or a verb phrase
    extended by a prepositional phrase:<FOOTNOTE>Observe that this
    definition is recursive<EMDASH/>a verb may be followed by any number
    of prepositional phrases.</FOOTNOTE>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_sentence_2</NAME>
      <REQUIRES>parse_prepositional_phrase</REQUIRES>
      <REQUIRES>parse_word</REQUIRES>
      <REQUIRES>parse_noun_phrase_2</REQUIRES>
      <EXAMPLE>parse_input_example_2</EXAMPLE>
      <SCHEME>
(define (parse-sentence)
  (list 'sentence
        (parse-noun-phrase)
        (parse-verb-phrase)))

(define (parse-verb-phrase)
  (define (maybe-extend verb-phrase)
    (amb verb-phrase
         (maybe-extend (list 'verb-phrase
                             verb-phrase
                             (parse-prepositional-phrase)))))
  (maybe-extend (parse-word verbs)))
      </SCHEME>
      <JAVASCRIPT>
function parse_sentence() {
    return list("sentence",
                parse_noun_phrase(),
                parse_verb_phrase());
}

function parse_verb_phrase() {
    function maybe_extend(verb_phrase) {
        return amb(verb_phrase,
                   maybe_extend(list("verb-phrase",
                                     verb_phrase,
                                     parse_prepositional_phrase())));
    }		   
    return maybe_extend(parse_word(verbs));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det" HIDE="yes">
      <NAME>parse_input_2</NAME>
      <REQUIRES>unparsed</REQUIRES>
      <REQUIRES>parse_sentence_2</REQUIRES>
      <SCHEME>
(define (parse input)
  (set! *unparsed* input)
  (let ((sent (parse-sentence)))
    (require (null? *unparsed*))
    sent))
      </SCHEME>
      <JAVASCRIPT>
function parse_input(input) {
    not_yet_parsed = input;
    const sent = parse_sentence();
    require(is_null(not_yet_parsed));
    return sent;
}    
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    While we<APOS/>re at it, we can also elaborate the definition of noun
    phrases to permit such things as <QUOTE>a cat in the class.</QUOTE>  What
    we used to call a noun phrase, we<APOS/>ll now call a simple noun phrase,
    and a noun phrase will now be either a simple noun phrase or a noun phrase
    extended by a prepositional phrase:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_noun_phrase_2</NAME>
      <REQUIRES>parse_prepositional_phrase</REQUIRES>
      <REQUIRES>parse_word</REQUIRES>
      <REQUIRES>nouns</REQUIRES>
      <EXAMPLE>parse_input_example_2</EXAMPLE>
      <SCHEME>
(define (parse-simple-noun-phrase)
  (list 'simple-noun-phrase
        (parse-word articles)
        (parse-word nouns)))

(define (parse-noun-phrase)
  (define (maybe-extend noun-phrase)
    (amb noun-phrase
         (maybe-extend (list 'noun-phrase
                             noun-phrase
                             (parse-prepositional-phrase)))))
  (maybe-extend (parse-simple-noun-phrase)))
      </SCHEME>
      <JAVASCRIPT>
function parse_simple_noun_phrase() {      
    return list("simple-noun-phrase",
                parse_word(articles),
                parse_word(nouns));
}

function parse_noun_phrase() {
    function maybe_extend(noun_phrase) {
        return amb(noun_phrase,
                   maybe_extend(list("noun-phrase",
                                     noun_phrase,
                                     parse_prepositional_phrase())));
    }
    return maybe_extend(parse_simple_noun_phrase());
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <INDEX><USE>parse_...</USE><CLOSE/></INDEX>
  
  <TEXT>
    Our new grammar lets us parse more complex sentences.  For example
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>parse_input_example_2</NAME>
      <REQUIRES>parse_input_2</REQUIRES>
      <SCHEME>
(parse '(the student with the cat sleeps in the class))
      </SCHEME>
      <JAVASCRIPT>
parse_input(list("the", "student", "with", "the", "cat",
                 "sleeps", "in", "the", "class"));
      </JAVASCRIPT>
    </SNIPPET>
  produces
  <SNIPPET EVAL="no">
    <SCHEME>
(sentence
 (noun-phrase
  (simple-noun-phrase (article the) (noun student))
  (prep-phrase (prep with)
   (simple-noun-phrase
    (article the) (noun cat))))
 (verb-phrase
  (verb sleeps)
  (prep-phrase (prep in)
   (simple-noun-phrase
    (article the) (noun class)))))
    </SCHEME>
    <JAVASCRIPT>
list("sentence",
     list("noun-phrase",
          list("simple-noun-phrase", 
               list("article", "the"), list("noun", "student")),
          list("prep-phrase", list("prep", "with"),
               list("simple-noun-phrase",
                    list("article", "the"),
                    list("noun", "cat")))),
     list("verb-phrase",
          list("verb", "sleeps"),
          list("prep-phrase", list("prep", "in"),
               list("simple-noun-phrase", 
                    list("article", "the"),
                    list("noun", "class")))))
    </JAVASCRIPT>
  </SNIPPET>
  </TEXT>

  <TEXT>
    Observe that a given input may have more than one legal parse.  In the
    sentence <QUOTE>The professor lectures to the student with the cat,</QUOTE>
    it may be that the professor is lecturing with the cat, or that the student
    has the cat.  Our nondeterministic program finds both possibilities:
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>multiple_legal_parses</NAME>
      <REQUIRES>parse_input_2</REQUIRES>
      <SCHEME>
(parse '(the professor lectures to the student with the cat))
      </SCHEME>
      <JAVASCRIPT>
parse_input(list("the", "professor", "lectures",
                 "to", "the", "student", "with", "the", "cat"));
      </JAVASCRIPT>
    </SNIPPET>
    produces
    <SNIPPET EVAL="no">
      <SCHEME>
(sentence
 (simple-noun-phrase (article the) (noun professor))
 (verb-phrase
  (verb-phrase
   (verb lectures)
   (prep-phrase (prep to)
    (simple-noun-phrase
     (article the) (noun student))))
  (prep-phrase (prep with)
   (simple-noun-phrase
    (article the) (noun cat)))))
      </SCHEME>
      <JAVASCRIPT>
list("sentence",
     list("simple-noun-phrase",
          list("article", "the"), list("noun", "professor")),
     list("verb-phrase",
          list("verb-phrase",
               list("verb", "lectures"),
               list("prep-phrase", list("prep", "to"),
                    list("simple-noun-phrase",
                    list("article", "the"),
		    list("noun", "student")))),
          list("prep-phrase", list("prep", "with"),
               list("simple-noun-phrase",
                    list("article", "the"),
                    list("noun", "cat")))))
      </JAVASCRIPT>
    </SNIPPET>
    Asking the evaluator to retry yields
    <SNIPPET EVAL="no">
      <SCHEME>
(sentence
 (simple-noun-phrase (article the) (noun professor))
 (verb-phrase
  (verb lectures)
  (prep-phrase (prep to)
   (noun-phrase
    (simple-noun-phrase
     (article the) (noun student))
    (prep-phrase (prep with)
     (simple-noun-phrase
      (article the) (noun cat)))))))
      </SCHEME>
      <JAVASCRIPT>
list("sentence",
     list("simple-noun-phrase", 
          list("article", "the"), list("noun", "professor")),
     list("verb-phrase",
          list("verb", "lectures"),
          list("prep-phrase", list("prep", "to"),
               list("noun-phrase",
                    list("simple-noun-phrase",
                         list("article", "the"),
                         list("noun", "student")),
                    list("prep-phrase", list("prep", "with"),
                         list("simple-noun-phrase",
                              list("article", "the"),
                              list("noun", "cat")))))))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <INDEX>nondeterministic programs<SUBINDEX>parsing natural language<CLOSE/></SUBINDEX></INDEX>
  
  <EXERCISE>
    <LABEL NAME="ex:five_ways"/>
    With the grammar given above, the following sentence can be parsed in five
    different ways: <QUOTE>The professor lectures to the student in the class
    with the cat.</QUOTE> Give the five parses and explain the differences in
    shades of meaning among them.
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:ordered_parsing"/>
    The
    <INDEX>nondeterministic evaluator<SUBINDEX>order of argument evaluation</SUBINDEX></INDEX>
    evaluators in sections<SPACE/><REF NAME="sec:mc-eval"/> and
    <REF NAME="sec:lazy-evaluation"/> do not determine what order
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <JAVASCRIPT>argument expressions</JAVASCRIPT>
    </SPLITINLINE>
    are
    evaluated in. We will see that the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator
    evaluates them from left to right. Explain why our parsing program
    wouldn<APOS/>t work if the
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <JAVASCRIPT>argument expressions</JAVASCRIPT>
    </SPLITINLINE>
    were evaluated in some other order.
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:louis_verb_phrase"/>
    Louis Reasoner suggests that, since a verb phrase is either a verb or
    a verb phrase followed by a prepositional phrase, it would be much more
    straightforward to
    <SPLITINLINE>
      <SCHEME>define</SCHEME>
      <JAVASCRIPT>declare</JAVASCRIPT>
    </SPLITINLINE>
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>parse-verb-phrase</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>parse_verb_phrase</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as follows (and similarly for noun phrases):
    <SNIPPET EVAL="no">
      <SCHEME>
(define (parse-verb-phrase)
  (amb (parse-word verbs)
       (list 'verb-phrase
             (parse-verb-phrase)
             (parse-prepositional-phrase))))
      </SCHEME>
      <JAVASCRIPT>
function parse_verb_phrase() {
    return amb(parse_word(verbs),      
               list("verb-phrase",
                    parse_verb_phrase(),
                    parse_prepositional_phrase()));
}
      </JAVASCRIPT>
    </SNIPPET>
    Does this work?  Does the program<APOS/>s behavior change if we interchange
    the order of expressions in the <SCHEMEINLINE>amb</SCHEMEINLINE>?
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:complex_sentences"/>
    Extend the grammar given above to handle more complex sentences.  For
    example, you could extend noun phrases and verb phrases to include adjectives
    and adverbs, or you could handle compound sentences.<FOOTNOTE>This kind of
    grammar can become arbitrarily complex, but it
    is only a
    <INDEX>parsing natural language<SUBINDEX>real language understanding vs.<SPACE/>toy parser</SUBINDEX></INDEX>
    toy as far as real language understanding is concerned.
    Real natural-language understanding by computer requires an elaborate
    mixture of syntactic analysis and interpretation of meaning.  On the
    other hand, even toy parsers can be useful in supporting flexible
    command languages for programs such as information-retrieval systems.
    <INDEX>Winston, Patrick Henry</INDEX>
    <CITATION>Winston 1992</CITATION> discusses computational approaches to
    real language understanding and also the applications of simple grammars
    to command languages.</FOOTNOTE>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:sentence-generate"/>
    Alyssa P. Hacker is more interested in
    <INDEX>generating sentences</INDEX>
    generating interesting sentences
    than in parsing them.  She reasons that by simply changing the
    <SPLITINLINE>
      <SCHEME>procedure
      <SCHEMEINLINE>parse\?word</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>function
      <JAVASCRIPTINLINE>parse_word</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    so that it ignores the <QUOTE>input sentence</QUOTE> and instead always
    succeeds and generates an appropriate word, we can use the programs we had
    built for parsing to do generation instead.  Implement Alyssa<APOS/>s idea,
    and show the first half-dozen or so sentences generated.<FOOTNOTE>Although
    Alyssa<APOS/>s idea works just fine (and is surprisingly simple), the
    sentences that it generates are a bit boring<EMDASH/>they don<APOS/>t
    sample the possible sentences of this language in a very interesting way.
    In fact, the grammar is highly recursive in many places, and
    Alyssa<APOS/>s technique <QUOTE>falls into</QUOTE> one of these recursions
    and gets stuck.  See exercise<SPACE/><REF NAME="ex:ramb"/> for a way to deal
    with this.</FOOTNOTE>
  </EXERCISE>

  <INDEX>parsing natural language<CLOSE/></INDEX>
  <INDEX>nondeterministic computing<CLOSE/></INDEX>

</SUBSECTION>
