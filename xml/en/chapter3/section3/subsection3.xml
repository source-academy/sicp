<SUBSECTION> 
  <NAME>
    Representing Tables
  </NAME>

  <LABEL NAME="sec:tables"/>
  <INDEX>table<OPEN/></INDEX>

  <SHORT_PAGE lines="1"/>
  <TEXT>
    When we studied various ways of representing sets in chapter<SPACE/><REF NAME="chap:data"></REF>, we
    mentioned in section<SPACE/><REF NAME="sec:representing-sets"/> the task of
    maintaining a table of records
    <INDEX>key of a record<SUBINDEX>in a table</SUBINDEX></INDEX>
    indexed by identifying keys.  In the
    implementation of data-directed programming in
    section<SPACE/><REF NAME="sec:data-directed"/>, we made extensive use of
    two-dimensional tables, in which information is stored and retrieved
    using two keys.  Here we see how to build tables as mutable list
    structures.
  </TEXT>

  <TEXT>
    We first consider a
    <INDEX>table<SUBINDEX>one-dimensional<OPEN/></SUBINDEX></INDEX>
    one-dimensional table, in which each value is
    stored under a single key.  We implement the table as a list of
    records, each of which is implemented as a pair consisting of a key
    and the associated value. The records are glued together to form a
    list by pairs whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>s</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>s</JAVASCRIPT>
    </SPLITINLINE>
    point to successive records.  These gluing pairs are called the 
    <INDEX>table<SUBINDEX>backbone of</SUBINDEX></INDEX>
    <EM>backbone</EM> of the table.  In order to have a place that we can
    change when we add a new record to the table, we build the table as a 
    <INDEX>headed list</INDEX>
    <INDEX>list(s)<SUBINDEX>headed</SUBINDEX></INDEX>
    <EM>headed list</EM>.  A headed list has a special backbone pair at the
    beginning, which holds a dummy <QUOTE>record</QUOTE><EMDASH/>in this case
    the arbitrarily chosen 
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>*table*</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"*table*"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:table_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:table"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the box-and-pointer diagram for the table
    <SNIPPET EVAL="no">
      <SCHEME>
a:  1
b:  2
c:  3
      </SCHEME>
      <JAVASCRIPT>
a: 1
b: 2
c: 3
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-22.svg"></FIGURE>
          <CAPTION>A table represented as a headed list. </CAPTION>
          <LABEL NAME="fig:table_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-22.svg"></FIGURE>
          <CAPTION>A table represented as a headed list. </CAPTION>
          <LABEL NAME="fig:table"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    To extract information from a table we use the
    <SCHEMEINLINE>lookup</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which takes a key as argument and returns the associated value (or
    <SPLITINLINE>
      <SCHEME>false</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    if
    there is no value stored under that key).
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is defined in terms of the <SCHEMEINLINE>assoc</SCHEMEINLINE> operation,
    which expects a key and a list of records as arguments. Note that
    <SCHEMEINLINE>assoc</SCHEMEINLINE> never sees the dummy record.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Assoc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>assoc</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    returns the record that has the given key as its
    <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>
    <SPLIT>
      <SCHEME>
	Because
	<SCHEMEINLINE>assoc</SCHEMEINLINE> uses
	<SCHEMEINLINE>equal?</SCHEMEINLINE>, it can recognize keys that are
	symbols, numbers, or list structure.
      </SCHEME>
      <JAVASCRIPT>
	Because <SCHEMEINLINE>assoc</SCHEMEINLINE> uses
	<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>, it can recognize keys that
	are strings, numbers, or list structure.<!--
   --></JAVASCRIPT><!--
 --></SPLIT></FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    then checks to see that the resulting record returned by
    <SCHEMEINLINE>assoc</SCHEMEINLINE> is not
    <SPLITINLINE>
      <SCHEME>false,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and returns the value (the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    of the record.

    <SNIPPET HIDE="yes">
      <NAME>lookup1_example</NAME>
      <REQUIRES>make_table1</REQUIRES>
      <REQUIRES>insert_into_table1</REQUIRES>
      <JAVASCRIPT>
const t = make_table();
insert("a", 10, t);
lookup("a", t);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>lookup</DECLARATION><SUBINDEX>in one-dimensional table</SUBINDEX></INDEX>
      <INDEX><DECLARATION>assoc</DECLARATION></INDEX>
      <NAME>lookup1</NAME>
      <EXAMPLE>lookup1_example</EXAMPLE>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        false)))

(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
      </SCHEME>
      <JAVASCRIPT>
function lookup(key, table) {
    const record = assoc(key, tail(table));
    return is_undefined(record)
           ? undefined
           : tail(record);
}
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
           ? head(records)
           : assoc(key, tail(records));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To insert a value in a table under a specified key, we first use
    <SCHEMEINLINE>assoc</SCHEMEINLINE> to see if there is already a record in
    the table with this key. If not, we form a new record by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>ing</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>ing</JAVASCRIPT>
    </SPLITINLINE>
    the key with the value, and insert this at the head of the table<APOS/>s
    list of records, after the dummy record.  If there already is a record with
    this key, we set the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of this record to the designated new value.  The header of the table
    provides us with a fixed location to modify in order to insert the new
    record.<FOOTNOTE>Thus, the first backbone pair is the object that represents
    the table <QUOTE>itself</QUOTE>; that is, a pointer to the table is a
    pointer to this pair.  This same backbone pair always starts the table.
    If we did not arrange things in this way,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    would have to return a new value for the start of the table
    when it added a new record.</FOOTNOTE>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>insert</DECLARATION><SUBINDEX>in one-dimensional table</SUBINDEX></INDEX>
      <REQUIRES>lookup1</REQUIRES>
      <NAME>insert_into_table1</NAME>
      <SCHEME>
(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value) (cdr table)))))
  'ok)
      </SCHEME>
      <JAVASCRIPT>
function insert(key, value, table) {
    const record = assoc(key, tail(table));
    if (is_undefined(record)) {
        set_tail(table,
                 pair(pair(key, value), tail(table)));
    } else {
        set_tail(record, value);
    }
    return "ok";
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To construct a new table, we simply create a list containing
    <SPLITINLINE>
      <SCHEME>
	the symbol <SCHEMEINLINE>*table*</SCHEMEINLINE>:
      </SCHEME>
      <JAVASCRIPT>
	just the string <SCHEMEINLINE>"*table*"</SCHEMEINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <INDEX><DECLARATION>make_table</DECLARATION><SUBINDEX>one-dimensional table</SUBINDEX></INDEX>
      <NAME>make_table1</NAME>
      <SCHEME>
(define (make-table)
  (list '*table*))
      </SCHEME>
      <JAVASCRIPT>
function make_table() {
    return list("*table*");
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>table<SUBINDEX>one-dimensional<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING> 
    <NAME>Two-dimensional tables</NAME>
  </SUBHEADING>

  <INDEX>table<SUBINDEX>two-dimensional<OPEN/></SUBINDEX></INDEX>

  <SHORT_PAGE lines="1"/>
  <TEXT>
    In a two-dimensional table, each value is indexed by two keys.  We can
    construct such a table as a one-dimensional table in which each key
    identifies a subtable.
    <SPLITINLINE>
      <SCHEME>
        Figure<SPACE/><REF NAME="fig:2dtable_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
        Figure<SPACE/><REF NAME="fig:2dtable"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows the box-and-pointer diagram for the table
    <SNIPPET EVAL="no">
      <SCHEME>
math:
    +:  43
    -:  45
    *:  42
letters:
    a:  97
    b:  98
      </SCHEME>
      <JAVASCRIPT>
"math":
    "+":  43
    "-":  45
    "*":  42
"letters":
    "a":  97
    "b":  98
      </JAVASCRIPT>
    </SNIPPET>
    which has two subtables.  (The subtables don<APOS/>t need a special header
    <SPLITINLINE>
      <SCHEME>
	symbol,
      </SCHEME>
      <JAVASCRIPT>
	string,
      </JAVASCRIPT>
    </SPLITINLINE>
    since the key that identifies the subtable serves this purpose.)
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-23.svg"></FIGURE>
          <CAPTION>A two-dimensional table.</CAPTION>
          <LABEL NAME="fig:2dtable_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-23.svg"></FIGURE>
          <CAPTION>A two-dimensional table.</CAPTION>
          <LABEL NAME="fig:2dtable"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    When we look up an item, we use the first key to identify the correct
    subtable.  Then we use the second key to identify the record within the
    subtable.
    <SNIPPET HIDE="yes">
      <NAME>lookup2_example</NAME>
      <REQUIRES>make_table2</REQUIRES>
      <REQUIRES>insert_into_table2</REQUIRES>
      <JAVASCRIPT>
const t = list("*table*");
insert("a", "b", 10, t);
lookup("a", "b", t);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>just_assoc</NAME>
      <JAVASCRIPT>
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
           ? head(records)
           : assoc(key, tail(records));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>lookup</DECLARATION><SUBINDEX>in two-dimensional table</SUBINDEX></INDEX>
      <NAME>lookup2</NAME>
      <REQUIRES>just_assoc</REQUIRES>
      <EXAMPLE>lookup2_example</EXAMPLE>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(define (lookup key-1 key-2 table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record (assoc key-2 (cdr subtable))))
          (if record
              (cdr record)
              false))
        false)))
      </SCHEME>
      <JAVASCRIPT>
function lookup(key_1, key_2, table) {
    const subtable = assoc(key_1, tail(table));
    if (is_undefined(subtable)) {
        return undefined;
    } else {
        const record = assoc(key_2, tail(subtable));
        return is_undefined(record)
               ? undefined
               : tail(record);
    }
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To insert a new item under a pair of keys, we use
    <SCHEMEINLINE>assoc</SCHEMEINLINE> to see if there is a subtable stored
    under the first key.  If not, we build a new subtable containing the single
    record
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>key-2</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>key_2</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>value</SCHEMEINLINE>) and insert it into the table under the
    first key.  If a subtable already exists for the first key, we insert the
    new record into this subtable, using the insertion method for
    one-dimensional tables described above:
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <INDEX><DECLARATION>insert</DECLARATION><SUBINDEX>in two-dimensional table</SUBINDEX></INDEX>
      <REQUIRES>just_assoc</REQUIRES>
      <NAME>insert_into_table2</NAME>
      <SCHEME>
(define (insert! key-1 key-2 value table)
  (let ((subtable (assoc key-1 (cdr table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr table)))))
  'ok)
      </SCHEME>
      <JAVASCRIPT>
function insert(key_1, key_2, value, table) {
    const subtable = assoc(key_1, tail(table));
    if (is_undefined(subtable)) {
        set_tail(table,
                 pair(list(key_1, pair(key_2, value)), tail(table)));
    } else {
        const record = assoc(key_2, tail(subtable));
        if (is_undefined(record)) {
            set_tail(subtable,
                     pair(pair(key_2, value), tail(subtable)));
        } else {
            set_tail(record, value);
        }
    }
    return "ok";
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>table<SUBINDEX>two-dimensional<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING> 
    <NAME>Creating local tables</NAME>
  </SUBHEADING>

  <INDEX>table<SUBINDEX>local<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    The <SCHEMEINLINE>lookup</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operations defined above take the table as an argument.  This enables us to
    use programs that access more than one table.  Another way to deal with
    multiple tables is to have separate <SCHEMEINLINE>lookup</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for each table.  We can do this by representing a table procedurally, as an
    object that maintains an internal table as part of its local state. When
    sent an appropriate message, this <QUOTE>table object</QUOTE> supplies the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with which to operate on the internal table.  Here is a generator for
    two-dimensional tables represented in this fashion:
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_table</DECLARATION><SUBINDEX>message-passing implementation</SUBINDEX></INDEX>
      <NAME>make_table2</NAME>
      <REQUIRES>just_assoc</REQUIRES>
      <SCHEME>
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation - - TABLE" m))))
  dispatch))
      </SCHEME>
      <JAVASCRIPT>
function make_table() {
    const local_table = list("*table*");
    function lookup(key_1, key_2) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            return undefined;
        } else {
            const record = assoc(key_2, tail(subtable));
            return is_undefined(record)
                   ? undefined
                   : tail(record);
        }
    }
    function insert(key_1, key_2, value) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            set_tail(local_table,
                     pair(list(key_1, pair(key_2, value)),
                          tail(local_table)));
        } else {
            const record = assoc(key_2, tail(subtable));
            if (is_undefined(record)) {
                set_tail(subtable,
                         pair(pair(key_2, value), tail(subtable)));
            } else {
                set_tail(record, value);
            }
        }
    }
    function dispatch(m) {
        return m === "lookup"
               ? lookup
               : m === "insert"
               ? insert
               : error(m, "unknown operation -- table");
    }
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    we could
    <INDEX>operation-and-type table<SUBINDEX>implementing</SUBINDEX></INDEX>
    implement the <SCHEMEINLINE>get</SCHEMEINLINE> and
    <SCHEMEINLINE>put</SCHEMEINLINE> operations used in
    section<SPACE/><REF NAME="sec:data-directed"/> for data-directed
    programming, as follows:
    <SNIPPET HIDE="yes">
      <NAME>operation_table_example</NAME>
      <JAVASCRIPT>
put("a", "b", 10);
get("a", "b");
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>get</DECLARATION></INDEX> 
      <INDEX><DECLARATION>put</DECLARATION></INDEX> 
      <NAME>operation_table</NAME>
      <REQUIRES>make_table2</REQUIRES>
      <EXAMPLE>operation_table_example</EXAMPLE>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
        <INDEX>operation-and-type table<SUBINDEX>implementing</SUBINDEX></INDEX>
(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
      </SCHEME>
      <JAVASCRIPT>
const operation_table = make_table();
const get = operation_table("lookup");
const put = operation_table("insert");
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Get</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>get</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments two keys, and <SCHEMEINLINE>put</SCHEMEINLINE> takes
    as arguments two keys and a value.  Both operations access the same
    local table, which is encapsulated within the object created by the
    call to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>table<SUBINDEX>local<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE> 
    In the table implementations above, the keys are
    <INDEX>table<SUBINDEX>testing equality of keys</SUBINDEX></INDEX>
    <INDEX>key of a record<SUBINDEX>testing equality of</SUBINDEX></INDEX>
    tested for equality using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equal?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    (called by <SCHEMEINLINE>assoc</SCHEMEINLINE>).  This is not always the
    appropriate test.  For instance, we might have a table with numeric keys in
    which we don<APOS/>t need an exact match to the number we<APOS/>re looking
    up, but only a number within some tolerance of it. Design a table
    constructor 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that takes as an argument a 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>same-key?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>same_key</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that will be used to test <QUOTE>equality</QUOTE> of keys.  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-table</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>
    </JAVASCRIPT></SPLITINLINE>
    should return a <SCHEMEINLINE>dispatch</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that can be used to access appropriate 
    <SCHEMEINLINE>lookup</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for a local table.
    <LABEL NAME="ex:numeric-keys"/>
    <SOLUTION>
      <SNIPPET>
	<JAVASCRIPT>
// Solution by GitHub user clean99

function make_table(same_key) {
    const local_table = list("*table*");
    function assoc(key, records) {
        return is_null(records)
               ? undefined
               : same_key(key, head(head(records)))
               ? head(records)
               : assoc(key, tail(records));
    }
    function lookup(key) {
        const record = assoc(key, tail(local_table));
        return is_undefined(record)
               ? undefined
               : tail(record);
    }
    function insert(key, value) {
        const record = assoc(key, tail(local_table));
        if (is_undefined(record)) {
               set_tail(local_table,
                        pair(pair(key, value), tail(local_table)));
            } else {
               set_tail(record, value);
            }
            return "ok";
    }
    function dispatch(m) {
        return m === "lookup"
               ? lookup
               : m === "insert"
               ? insert
               : error(m, "unknow operation -- table");
    }
    return dispatch;
}

const operation_table = make_table((a, b) => a === b);
const get = operation_table("lookup");
const put = operation_table("insert");
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE> 
    Generalizing one- and two-dimensional tables, show how to implement a
    table in which values are stored under an
    <INDEX>table<SUBINDEX><ORDER>n</ORDER><LATEXINLINE>$n$</LATEXINLINE>-dimensional</SUBINDEX></INDEX>
    arbitrary number of keys and
    different values may be stored under different numbers of keys.
    The
    <SCHEMEINLINE>lookup</SCHEMEINLINE> and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    should take as input a list of keys used to access the table.
    <LABEL NAME="ex:3_25"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>solution_3_25</NAME>
	<EXAMPLE>solution_3_25_example</EXAMPLE>
	<JAVASCRIPT>
// contributed by GitHub user tttinkl

function assoc(key, records, same_key) {
  return is_null(records)
    ? undefined
    : same_key(key, head(head(records)))
    ? head(records)
    : assoc(key, tail(records), same_key);
}


function make_table(same_key) {
  const local_table = list("*table");

  const get_value = tail;

  function is_table(t) {
    return is_pair(t) &amp;&amp; head(t) === "*table";
  }

  function lookup(keys) {
    function lookup_generic(keys, table) {
      if (is_null(keys)) {
        return table;
      }
      const key_1 = head(keys);
      const key_rest = tail(keys);
      const record = assoc(key_1, tail(table), same_key);
      if (is_undefined(record)) {
        return undefined;
      }
      if (is_null(key_rest)) {
        return get_value(record);
      } else if (is_table(get_value(record))) {
        return lookup_generic(key_rest, get_value(record));
      } else {
        error('invalid key');
      }
    }
    return lookup_generic(keys, local_table);
  }


  function insert(keys, value) {
    function insert_generic(keys, value, table) {
      const key_1 = head(keys);
      const key_rest = tail(keys);
      const record = assoc(key_1, tail(table), same_key);
      if (is_undefined(record)) {
        if (is_null(key_rest)) {
          set_tail(
            table,
            pair(pair(key_1, value), tail(table)));
        } else {
          const new_subtable = list("*table");
          set_tail(
            table,
            pair(pair(key_1, new_subtable), tail(table))
          );
          insert_generic(key_rest, value, new_subtable);
        }
      } else {
        if (is_null(key_rest)) {
          set_tail(record, value);
        } else {
          if (is_table(get_value(record))) {
            insert_generic(key_rest, value, get_value(record));
          } else {
            const new_subtable = list("*table");
            set_tail(record, new_subtable);
            insert_generic(key_rest, value, new_subtable);
          }
        }
      }
    }
    insert_generic(keys, value, local_table);
  }

  function dispatch(m) {
    return m === "lookup"
      ? lookup
      : m === "insert"
      ? insert
      : m === "show"
      ? () => {
        display(local_table);
        return local_table;
      }
      : error(m, "unknow operation -- table");
  }
  return dispatch;
}

const table = make_table(equal);

const get = table('lookup');
const put = table('insert');
const show = table('show');
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>solution_3_25_example</NAME>
	<JAVASCRIPT>
put(list("a"), 1);
put(list("b", "c"), 2);
put(list("d", "e", "f"), 3);

display(get(list("a")));
display(get(list("b", "c")));
display(get(list("d", "e", "f")));

put(list("a", "b"), 1);
display(get(list("a")));
put(list("b", "c", "d"), 2);
display(get(list("b", "c")));
put(list("b"), 1);
display(get(list("b")));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    To search a table as implemented above, one needs to scan through the
    list of records.  This is basically the unordered list representation of
    section<SPACE/><REF NAME="sec:representing-sets"/>.  For large tables, it
    may be more efficient to structure the table in a different manner.
    Describe a table implementation where the (key, value) records are organized
    using a
    <INDEX>binary tree<SUBINDEX>table structured as</SUBINDEX></INDEX>
    <INDEX>table<SUBINDEX>represented as binary tree vs.<SPACE/>unordered list</SUBINDEX></INDEX>
    binary tree, assuming that keys can be ordered in some way
    (e.g., numerically or alphabetically).  (Compare
    exercise<SPACE/><REF NAME="ex:set-lookup-binary-tree"/> of chapter<SPACE/><REF NAME="chap:data"></REF>.)
    <LABEL NAME="ex:3_26"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>ex_3_26_solution</NAME>
	<EXAMPLE>ex_3_26_solution_example</EXAMPLE>
	<JAVASCRIPT>
// provided by GitHub user devinryu

function entry(tree) { return head(tree); }
function left_branch(tree) { return head(tail(tree)); }
function right_branch(tree) { return head(tail(tail(tree))); }
function make_tree(entry, left, right) { 
    return list(entry, left, right);
}

// kv is list(key, value)
function adjoin_set(kv, set) {
    return is_null(set)
           ? make_tree(kv, null, null)
           : head(kv) === head(entry(set))
           ? set
           : head(kv) &lt; head(entry(set))
           ? make_tree(entry(set),
                       adjoin_set(kv, left_branch(set)),
                       right_branch(set))
           : make_tree(entry(set),
                       left_branch(set),
                       adjoin_set(kv, right_branch(set)));
}

function make_table() {
    let local_table = null;
    function lookup(given_key, tree_of_records) {
        if (is_null(tree_of_records)) {
            return null;
        } else {
            const this_entry = entry(tree_of_records);
            const this_key = head(this_entry);
            return given_key === this_key 
                   ? this_entry
                   : given_key &lt; this_key
                   ? lookup(given_key, 
                            left_branch(tree_of_records))
                   : lookup(given_key, 
                            right_branch(tree_of_records));
        }
    }
    function insert(k, v) {
        let record = lookup(k, local_table);
        if(is_null(record)) {
            local_table = adjoin_set(list(k, v), local_table);
        } else {
            // do nothing
        }
    }
    function get(k) {
        return head(tail(lookup(k, local_table)));
    }
    function print() {
        return display(local_table);
    }
    function dispatch(m) {
        return m === "lookup"
        ? get
        : m === "insert"
        ? insert
        : m  === "print"
        ? print
        : error(m, "error");
    }
    return dispatch;
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>ex_3_26_solution_example</NAME>
	<JAVASCRIPT>
const t = make_table();
const get = t("lookup");
const put = t("insert");
const print = t("print");

// The test results

put(3, "d");
put(1, "a");
put(2, "b");
put(2, "c");
put(4, "e");
put(5, "f");

print();

display(get(2)); // displays: "b"
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <EM>Memoization</EM>
    <INDEX>memoization</INDEX>
    <INDEX>tabulation</INDEX>
    <INDEX>table<SUBINDEX>used to store computed values</SUBINDEX></INDEX>
    <INDEX><FUNCTION/><SUBINDEX>memoized</SUBINDEX></INDEX>
    (also called <EM>tabulation</EM>) is a technique that
    enables a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to record, in a local table, values that have previously been computed.
    This technique can make a vast difference in the performance of a program.
    A memoized
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    maintains a table in which values of previous calls are stored
    using as keys the arguments that produced the values.  When the
    memoized
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is asked to compute a value, it first checks the table to see if the value
    is already there and, if so, just returns that value.  Otherwise, it
    computes the new value in the ordinary way and stores this in the table.
    As an example of memoization, recall from
    section<SPACE/><REF NAME="sec:tree-recursion"/> the exponential process for
    computing Fibonacci numbers:
    <SNIPPET EVAL="yes">
      <EXAMPLE>fib_example</EXAMPLE>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) {
    return n === 0
           ? 0
           : n === 1
           ? 1
           : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    The memoized version of the same
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is
    <SNIPPET HIDE="yes">
      <NAME>memorize_example</NAME>
      <JAVASCRIPT>
memo_fib(5);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>with memoization</SUBINDEX><FRAGILE/></INDEX>
      <INDEX><DECLARATION>memo_fib</DECLARATION></INDEX> 
      <NAME>memo_fib</NAME>
      <REQUIRES>memorize</REQUIRES>
      <EXAMPLE>memorize_example</EXAMPLE>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(define memo-fib
  (memoize (lambda (n)
             (cond ((= n 0) 0)
                   ((= n 1) 1)
                   (else (+ (memo-fib (- n 1))
                            (memo-fib (- n 2))))))))
      </SCHEME>
      <JAVASCRIPT>
const memo_fib = memoize(n => n === 0
                              ? 0
                              : n === 1
                              ? 1
                              : memo_fib(n - 1) +
                                memo_fib(n - 2)
                        );
      </JAVASCRIPT>
    </SNIPPET>
    where the memoizer is defined as
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>memoize</DECLARATION><FRAGILE/></INDEX> 
      <REQUIRES>make_table1</REQUIRES>
      <REQUIRES>lookup1</REQUIRES>
      <REQUIRES>insert_into_table1</REQUIRES>
      <NAME>memorize</NAME>
      <SCHEME>
(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
      </SCHEME>
      <JAVASCRIPT>
function memoize(f) {
    const table = make_table();
    return x => {
               const previously_computed_result =
                   lookup(x, table);
               if (is_undefined(previously_computed_result)) {
                   const result = f(x);
                   insert(x, result, table);
                   return result;
               } else {
                   return previously_computed_result;
               }
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    Draw an environment diagram to analyze the computation of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(memo-fib 3)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib(3)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Explain why 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>memo-fib</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    computes the <LATEXINLINE>$n$</LATEXINLINE>th Fibonacci number in a number
    of steps proportional to <LATEXINLINE>$n$</LATEXINLINE>. Would the scheme
    still work if we had simply defined 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>memo-fib</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to be
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(memoize fib)</SCHEMEINLINE>?</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memoize(fib)</JAVASCRIPTINLINE>?</JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:memoization"/>
  </EXERCISE>
  <INDEX>table<CLOSE/></INDEX>
</SUBSECTION>
