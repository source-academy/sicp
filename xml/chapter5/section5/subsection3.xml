<SUBSECTION>
  <NAME>
    Compiling
    <SPLITINLINE>
      <SCHEME>
	Combinations
      </SCHEME>
      <PYTHON>
	Applications and Return Statements
      </PYTHON>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:compiling-combinations"/>
  
  <INDEX>compiler for JavaScript<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE> applications<OPEN/></SUBINDEX></INDEX>
  <INDEX>compiler for JavaScript<SUBINDEX>combinations<OPEN/></SUBINDEX></INDEX>
  
  <TEXT>
    The essence of the compilation process is the compilation of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    applications. The code for
    <SPLITINLINE>
      <SCHEME>a combination</SCHEME>
      <PYTHON>an application</PYTHON>
    </SPLITINLINE>
    compiled with a given target and
    linkage has the form
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
$\langle compilation\ of\ operator,\ target$ proc$,\ linkage$ next$\rangle$
$\langle evaluate\ operands\ and\ construct\ argument\ list\ in$ argl$\rangle$
$\langle compilation\ of\ procedure\ call\ with\ given\ target\ and\ linkage\rangle$
      </SCHEME>
      <PYTHON>
<METAPHRASE>compilation of function expression, target <PYTHONINLINE>fun</PYTHONINLINE>, linkage <PYTHONINLINE>"next"</PYTHONINLINE></METAPHRASE>
<METAPHRASE>evaluate argument expressions and construct argument list in <PYTHONINLINE>argl</PYTHONINLINE></METAPHRASE>
<METAPHRASE>compilation of function call with given target and linkage</METAPHRASE>
      </PYTHON>
    </SNIPPET>

    The registers <SCHEMEINLINE>env</SCHEMEINLINE>,
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>fun</SCHEMEINLINE>,
      </PYTHON>
    </SPLITINLINE>
    and <SCHEMEINLINE>argl</SCHEMEINLINE> may
    have to be saved and restored during evaluation of the
    <SPLITINLINE>
      <SCHEME>
	operator and operands.
      </SCHEME>
      <PYTHON>
	function and argument expressions.
      </PYTHON>
    </SPLITINLINE>
    Note that this is the only place in the compiler where a target other
    than <SCHEMEINLINE>val</SCHEMEINLINE> is specified.
  </TEXT>

  <SHORT_PAGE lines="6"/>
  <TEXT>
    The required code is generated by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-application</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>compile_application</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    This recursively compiles the
    <SPLITINLINE>
      <SCHEME>operator,</SCHEME>
      <PYTHON>function expression,</PYTHON>
    </SPLITINLINE>
    to produce code that puts the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    to be applied into
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>fun</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    and compiles the
    <SPLITINLINE>
      <SCHEME>operands,</SCHEME>
      <PYTHON>argument expressions,</PYTHON>
    </SPLITINLINE>
    to produce code that evaluates the individual
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <PYTHON>argument expressions</PYTHON>
    </SPLITINLINE>
    of the
    application.  The instruction sequences for the
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <PYTHON>argument expressions</PYTHON>
    </SPLITINLINE>
    are combined
    (by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>construct-arglist</SCHEMEINLINE>)</SCHEME>
      <PYTHON><PYTHONINLINE>construct_arglist</PYTHONINLINE>)
      </PYTHON>
    </SPLITINLINE>
    with code that constructs the list of
    arguments in <SCHEMEINLINE>argl</SCHEMEINLINE>, and the resulting
    argument-list code is combined with the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    code and the code that performs the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    call (produced by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-procedure-call</SCHEMEINLINE>).</SCHEME>
      <PYTHON><PYTHONINLINE>compile_function_call</PYTHONINLINE>).
      </PYTHON>
    </SPLITINLINE>
    In appending the code sequences, the <SCHEMEINLINE>env</SCHEMEINLINE>
    register must be preserved around the evaluation of the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <PYTHON>function expression</PYTHON>
    </SPLITINLINE>
    (since
    evaluating the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <PYTHON>function expression</PYTHON>
    </SPLITINLINE>
    might modify <SCHEMEINLINE>env</SCHEMEINLINE>, which
    will be needed to evaluate the
    <SPLITINLINE>
      <SCHEME>operands),</SCHEME>
      <PYTHON>argument expressions),</PYTHON>
    </SPLITINLINE>
    and the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>fun</SCHEMEINLINE>
      </PYTHON>
    </SPLITINLINE>
    register must be preserved around the
    construction of the argument list (since evaluating the
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <PYTHON>argument expressions</PYTHON>
    </SPLITINLINE>
    might
    modify
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>fun</SCHEMEINLINE>,
      </PYTHON>
    </SPLITINLINE>
    which will be needed for the actual
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    application). <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>Continue</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
        The <SCHEMEINLINE>continue</SCHEMEINLINE> register
      </PYTHON>
    </SPLITINLINE>
    must also be preserved throughout, since
    it is needed for the linkage in the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    call.
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>compile_application</DECLARATION></INDEX>
      <NAME>compile_application</NAME>
      <SCHEME>
(define (compile-application exp target linkage)
  (let ((proc-code (compile (operator exp) 'proc 'next))
        (operand-codes
         (map (lambda (operand) (compile operand 'val 'next))
              (operands exp))))
    (preserving '(env continue)
     proc-code
     (preserving '(proc continue)
      (construct-arglist operand-codes)
      (compile-procedure-call target linkage)))))
      </SCHEME>
      <PYTHON>
function compile_application(exp, target, linkage) {
    const fun_code = compile(function_expression(exp), "fun", "next");
    const argument_codes = map(arg => compile(arg, "val", "next"),
                               arg_expressions(exp));
    return preserving(list("env", "continue"),
                      fun_code,
                      preserving(list("fun", "continue"),
                          construct_arglist(argument_codes),
                          compile_function_call(target, linkage)));
}
      </PYTHON>
    </SNIPPET>
  </TEXT>
  <TEXT>
    The code to construct the argument list will evaluate each
    <SPLITINLINE>
      <SCHEME>
    operand
      </SCHEME>
      <PYTHON>
	argument expression
      </PYTHON>
    </SPLITINLINE>
    into
    <SCHEMEINLINE>val</SCHEMEINLINE> and then
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>cons</SCHEMEINLINE>
	that value onto the argument list being accumulated in
	<SCHEMEINLINE>argl</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	combine
	that value with the argument list being accumulated in
	<SCHEMEINLINE>argl</SCHEMEINLINE>
	using <PYTHONINLINE>pair</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Since we
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>cons</SCHEMEINLINE>
	the arguments onto <SCHEMEINLINE>argl</SCHEMEINLINE>
	in sequence,
      </SCHEME>
      <PYTHON>
	adjoin the arguments to the front of <SCHEMEINLINE>argl</SCHEMEINLINE>
	in sequence,
      </PYTHON>
    </SPLITINLINE>
    we must start with the last argument and end with the first, so that the
    arguments will appear in order from first to last in the resulting list.
    Rather than waste an instruction by initializing
    <SCHEMEINLINE>argl</SCHEMEINLINE> to the empty list
    to set up for this sequence of evaluations,
    we make the first code sequence construct the initial
    <SCHEMEINLINE>argl</SCHEMEINLINE>.
    The general form of the argument-list construction is thus as follows:
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
$\langle compilation\ of\ last\ operand,\ targeted\ to$ val$\rangle$
(assign argl (op list) (reg val))
$\langle compilation\ of\ next\ operand,\ targeted\ to$ val$\rangle$
(assign argl (op cons) (reg val) (reg argl))
$\ldots$
$\langle compilation\ of\ first\ operand,\ targeted\ to$ val$\rangle$
(assign argl (op cons) (reg val) (reg argl))
      </SCHEME>
      <PYTHON>
<METAPHRASE>compilation of last argument, targeted to <PYTHONINLINE>val</PYTHONINLINE></METAPHRASE>
assign("argl", list(op("list"), reg("val"))),
<METAPHRASE>compilation of next argument, targeted to <PYTHONINLINE>val</PYTHONINLINE></METAPHRASE>
assign("argl", list(op("pair"), reg("val"), reg("argl"))),
$\ldots$
<METAPHRASE>compilation of first argument, targeted to <PYTHONINLINE>val</PYTHONINLINE></METAPHRASE>
assign("argl", list(op("pair"), reg("val"), reg("argl"))),
      </PYTHON>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Argl</SCHEMEINLINE>
	must be preserved around each operand
      </SCHEME>
      <PYTHON>
	The <SCHEMEINLINE>argl</SCHEMEINLINE> register
	must be preserved around each argument
      </PYTHON>
    </SPLITINLINE>
    evaluation except the first (so that arguments accumulated so far
    won<APOS/>t be lost), and <SCHEMEINLINE>env</SCHEMEINLINE> must be
    preserved around each
    <SPLITINLINE>
      <SCHEME>
	operand evaluation except the last (for use by subsequent operand evaluations).
      </SCHEME>
      <PYTHON>
	argument evaluation except the last (for use by subsequent argument evaluations).
      </PYTHON>
    </SPLITINLINE>
  </TEXT>

  <SHORT_PAGE lines="2"/>
  <TEXT>
    Compiling this argument code is a bit tricky, because of the special
    treatment of the first
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <PYTHON>argument expression</PYTHON>
    </SPLITINLINE>
    to be evaluated and the need to preserve
    <SCHEMEINLINE>argl</SCHEMEINLINE> and <SCHEMEINLINE>env</SCHEMEINLINE> in
    different places. The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>construct-arglist</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>construct_arglist</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    takes as arguments the code that evaluates the individual
    <SPLITINLINE>
      <SCHEME>operands.</SCHEME>
      <PYTHON>argument expressions.</PYTHON>
    </SPLITINLINE>
    If there are no
    <SPLITINLINE>
      <SCHEME>operands</SCHEME>
      <PYTHON>argument expressions</PYTHON>
    </SPLITINLINE>
    at all, it simply emits the instruction
    <SNIPPET EVAL="no">
      <SCHEME>
      (assign argl (const ()))
      </SCHEME>
      <PYTHON>
assign(argl, constant(null))
      </PYTHON>
    </SNIPPET>
    Otherwise,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>construct-arglist</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>construct_arglist</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    creates code that initializes <SCHEMEINLINE>argl</SCHEMEINLINE> with the
    last argument, and appends code that evaluates the rest of the arguments and
    adjoins them to <SCHEMEINLINE>argl</SCHEMEINLINE> in succession.  In order
    to process the arguments from last to first, we must reverse the list of
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <PYTHON>argument</PYTHON>
    </SPLITINLINE>
    code sequences from the order supplied by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-application</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>compile_application</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="no" POSTPADDING="no">
      <INDEX><DECLARATION>construct_arglist</DECLARATION></INDEX>
      <NAME>construct_arglist</NAME>
      <SCHEME>
(define (construct-arglist operand-codes)
  (let ((operand-codes (reverse operand-codes)))
    (if (null? operand-codes)
        (make-instruction-sequence '() '(argl)
         '((assign argl (const ()))))
        (let ((code-to-get-last-arg
               (append-instruction-sequences
                (car operand-codes)
                (make-instruction-sequence '(val) '(argl)
                 '((assign argl (op list) (reg val)))))))
          (if (null? (cdr operand-codes))
              code-to-get-last-arg
              (preserving '(env)
               code-to-get-last-arg
               (code-to-get-rest-args
                (cdr operand-codes))))))))

(define (code-to-get-rest-args operand-codes)
  (let ((code-for-next-arg
         (preserving '(argl)
          (car operand-codes)
          (make-instruction-sequence '(val argl) '(argl)
           '((assign argl
              (op cons) (reg val) (reg argl)))))))
    (if (null? (cdr operand-codes))
        code-for-next-arg
        (preserving '(env)
         code-for-next-arg
         (code-to-get-rest-args (cdr operand-codes))))))
      </SCHEME>
      <PYTHON>
function construct_arglist(arg_codes) {
    if (is_null(arg_codes)) {
        return make_instruction_sequence(null, list("argl"),
                   list(assign("argl", constant(null))));
    } else {
        const rev_arg_codes = reverse(arg_codes);
        const code_to_get_last_arg =
            append_instruction_sequences(
                head(rev_arg_codes),
                make_instruction_sequence(list("val"), list("argl"),
                    list(assign("argl", 
                                list(op("list"), reg("val"))))));
        return is_null(tail(rev_arg_codes))
               ? code_to_get_last_arg
               : preserving(list("env"),
                     code_to_get_last_arg,
                     code_to_get_rest_args(tail(rev_arg_codes)));
    }
}
function code_to_get_rest_args(arg_codes) {
    const code_for_next_arg =
        preserving(list("argl"),
            head(arg_codes),
            make_instruction_sequence(list("val", "argl"), list("argl"),
                list(assign("argl", list(op("pair"),
                                         reg("val"), reg("argl"))))));
    return is_null(tail(arg_codes))
           ? code_for_next_arg
           : preserving(list("env"),
                        code_for_next_arg,
                        code_to_get_rest_args(tail(arg_codes)));
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <SUBHEADING> 
    <NAME>
      Applying
      <SPLITINLINE>
	<SCHEME>procedures</SCHEME>
	<PYTHON>functions</PYTHON>
      </SPLITINLINE>
    </NAME>
  </SUBHEADING>

  <SHORT_PAGE lines="5"/>
  <TEXT>
    <!--  %linekludge - - discretionary hyphen in metacircular -->
    After evaluating the elements of a
    <SPLITINLINE>
      <SCHEME>combination,</SCHEME>
      <PYTHON>function application,</PYTHON>
    </SPLITINLINE>
    the compiled code must apply the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    in
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>fun</SCHEMEINLINE>
      </PYTHON>
    </SPLITINLINE>
    to the arguments in
    <SCHEMEINLINE>argl</SCHEMEINLINE>.  The code performs essentially the same
    dispatch as the <SCHEMEINLINE>apply</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    in the metacircular evaluator of
    section<SPACE/><REF NAME="sec:core-of-evaluator"/> or the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>apply_dispatch</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    entry point in the explicit-control evaluator of
    section<SPACE/><REF NAME="sec:procedure-application"/>.  It checks whether
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    to be applied is a primitive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    or a compiled
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>function.</PYTHON>
    </SPLITINLINE>
    For a primitive
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <PYTHON>function,</PYTHON>
    </SPLITINLINE>
    it uses
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>;</SCHEME>
      <PYTHON>
	<PYTHONINLINE>apply_primitive_function</PYTHONINLINE>;
      </PYTHON>
    </SPLITINLINE>
    we will see shortly how it handles compiled
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <PYTHON>functions.</PYTHON>
    </SPLITINLINE>
    The
    <SPLITINLINE>
      <SCHEME>procedure-application</SCHEME>
      <PYTHON>function-application</PYTHON>
    </SPLITINLINE>
    code has the following form:
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
 (test (op primitive-procedure?) (reg proc))
 (branch (label primitive-branch))
compiled-branch
 $\langle code\ to\ apply\ compiled\ procedure\ with\ given\ target\ and\ appropriate\ linkage\rangle$
primitive-branch
 (assign $\langle target\rangle$
         (op apply-primitive-procedure)
         (reg proc)
         (reg argl))
 $\langle linkage \rangle$
after-call
      </SCHEME>
      <PYTHON latex="yes"><!-- The $\texttt{ }\texttt{ }$ below is a hack to ensure the leading spaces are not consumed-->
$\texttt{ }\texttt{ }$test(list(op("primitive_function"), reg("fun"))),
  branch(label("primitive_branch")),
"compiled_branch",
  <METAPHRASE>code to apply compiled function with given target and appropriate linkage</METAPHRASE>
"primitive_branch",
  assign(<META>target</META>,
         list(op("apply_primitive_function"), reg("fun"), reg("argl"))),
  <METAPHRASE>linkage</METAPHRASE>
"after_call"
      </PYTHON>
    </SNIPPET>
    Observe that the compiled branch must skip around the primitive
    branch.  Therefore, if the linkage for the original
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    call was
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"next"</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    the compound branch must use a
    linkage that jumps to a label that is inserted after the primitive branch.
    (This is similar to the linkage used for the true branch in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-if</SCHEMEINLINE>.)</SCHEME>
      <PYTHON><PYTHONINLINE>compile_conditional</PYTHONINLINE>.)</PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>compile_function_call</DECLARATION></INDEX>
      <NAME>compile_function_call</NAME>
      <SCHEME>
(define (compile-procedure-call target linkage)
  (let ((primitive-branch (make-label 'primitive-branch))
        (compiled-branch (make-label 'compiled-branch))
        (after-call (make-label 'after-call)))
    (let ((compiled-linkage
           (if (eq? linkage 'next) after-call linkage)))
      (append-instruction-sequences
       (make-instruction-sequence '(proc) '()
        `((test (op primitive-procedure?) (reg proc))
          (branch (label ,primitive-branch))))
       (parallel-instruction-sequences
        (append-instruction-sequences
         compiled-branch
         (compile-proc-appl target compiled-linkage))
        (append-instruction-sequences
         primitive-branch
         (end-with-linkage linkage
          (make-instruction-sequence '(proc argl)
                                     (list target)
           `((assign ,target
                     (op apply-primitive-procedure)
                     (reg proc)
                     (reg argl)))))))
       after-call))))
      </SCHEME>
      <PYTHON>
function compile_function_call(target, linkage) {
    const primitive_branch = make_label("primitive_branch");
    const compiled_branch = make_label("compiled_branch");
    const after_call = make_label("after_call");
    const compiled_linkage = linkage === "next" ? after_call : linkage;
    return append_instruction_sequences(
        make_instruction_sequence(list("fun"), null,
            list(test(list(op("is_primitive_function"), reg("fun"))),
                 branch(label(primitive_branch)))),
        append_instruction_sequences(
            parallel_instruction_sequences(
                append_instruction_sequences(
                    compiled_branch,
                    compile_fun_appl(target, compiled_linkage)),
                append_instruction_sequences(
                    primitive_branch,
                    end_with_linkage(linkage,
                        make_instruction_sequence(list("fun", "argl"),
                                                  list(target),
                            list(assign(
                                   target,
                                   list(op("apply_primitive_function"),
                                        reg("fun"), reg("argl")))))))),
            after_call));
}
      </PYTHON>
    </SNIPPET>
    The primitive and compound branches, like the true
    and false branches in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-if</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>compile_@conditional</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    are appended using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>parallel-instruction-sequences</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>parallel_instruction_sequences</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    rather than the ordinary
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>append-instruction-sequences</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>append_instruction_sequences</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    because they will not be executed sequentially.
  </TEXT>

  <DO_BREAK_PAGE/>
  <SUBHEADING> 
    <NAME>
      Applying compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    </NAME>
  </SUBHEADING>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>The code that handles procedure</SCHEME>
      <PYTHON>The handling of function</PYTHON>
    </SPLITINLINE>
    application
    <SPLITINLINE>
      <SCHEME>
      </SCHEME>
      <PYTHON>
        and return
      </PYTHON>
      </SPLITINLINE>
      is the most subtle part of the
      <SPLITINLINE>
        <SCHEME>
          compiler, even though the instruction sequences it generates are very short.
        </SCHEME>
        <PYTHON>
          compiler.
        </PYTHON>
      </SPLITINLINE>
      A compiled
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    (as constructed by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-lambda</SCHEMEINLINE>)</SCHEME>
      <PYTHON><PYTHONINLINE>compile_lambda_expression</PYTHONINLINE>)
      </PYTHON>
    </SPLITINLINE>
    has an entry point, which is a label that designates where the code for the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    starts. The code at this entry point computes a result in
    <SCHEMEINLINE>val</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>and returns by executing the instruction <SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE>.</SCHEME>
      <PYTHON>and ends by executing the instructions from a compiled return statement.</PYTHON>
    </SPLITINLINE>
  </TEXT>
  <SPLIT>
    <PYTHON>
      <TEXT>
        The code for a compiled-function application uses the
        stack in the same way as the explicit-control evaluator
        (section<SPACE/><REF NAME="sec:procedure-application"/>):
        before jumping to the compiled function's entry point, it
        saves the continuation of the function call to the stack,
        followed by a mark that allows reverting the stack to the
        state right before the call with the continuation on top.
      <SNIPPET EVAL="no" LATEX="yes">
        <PYTHON>
$\texttt{ }\texttt{ }$// set up for return from function
  save("continue"),
  push_marker_to_stack(),
  // jump to the function's entry point
  assign("val", list(op("compiled_function_entry"), reg("fun"))),
  go_to(reg("val")),
        </PYTHON>
      </SNIPPET>
        Compiling a return statement (with
        <PYTHONINLINE>compile_return_statement</PYTHONINLINE>)
        generates corresponding code for reverting the stack and restoring
        and jumping to <PYTHONINLINE>continue</PYTHONINLINE>.
        <SNIPPET EVAL="no" LATEX="yes">
          <PYTHON>
$\texttt{ }\texttt{ }$revert_stack_to_marker(),
  restore("continue"),
  <METAPHRASE>evaluate the return expression and store the result in <PYTHONINLINE>val</PYTHONINLINE></METAPHRASE>
  go_to(reg("continue")), // $\texttt{"return"}$-linkage code
         </PYTHON>
       </SNIPPET>
       Unless a function enters an infinite loop,
       it will end by executing the above return code,
       resulting from either a return statement in the program
       or one inserted by <PYTHONINLINE>compile_@lambda_@body</PYTHONINLINE>
       <INDEX>return value<SUBINDEX><USE>undefined</USE> as</SUBINDEX></INDEX>
       to return <PYTHONINLINE>undefined</PYTHONINLINE>.<FOOTNOTE>
       Because the execution of a function body always ends with a return,
       there is no need here for a mechanism like the <PYTHONINLINE>return_@undefined</PYTHONINLINE>
       entry point from section<SPACE/><REF NAME="sec:procedure-application"/>.</FOOTNOTE>
      </TEXT>
   </PYTHON>
  </SPLIT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        Thus, we might expect the code for a
        <SCHEME>compiled-procedure</SCHEME> application (to be
        generated by
        <SCHEMEINLINE>compile-proc-appl</SCHEMEINLINE>) with a
        given target and linkage to look like this if the linkage
        is a <SCHEME>label</SCHEME>:
      </SCHEME>
      <PYTHON>
        <SHORT_PAGE lines="3"/>Straightforward code for a compiled-function application with a
        given target and linkage would set up <PYTHONINLINE>continue</PYTHONINLINE> to make the function
        return to a local label instead of to the final linkage,
        to copy the function value from <PYTHONINLINE>val</PYTHONINLINE> to the target register if necessary.
        It would look like this if the linkage is a label:
      </PYTHON>
    </SPLIT>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
 (assign continue (label proc-return))
 (assign val (op compiled-procedure-entry) (reg proc))
 (goto (reg val))
proc-return
 (assign $target$ (reg val)) ; included if target is not $\texttt{val}$
 (goto (label $\langle linkage\rangle$))  ; linkage code
      </SCHEME>
      <PYTHON>
$\texttt{ }\texttt{ }$assign("continue", label("fun_return")), // where function should return to
  save("continue"),       // will be restored by the function
  push_marker_to_stack(), // allows the function to revert stack to find $\texttt{fun_return}$
  assign("val", list(op("compiled_function_entry"), reg("fun"))),
  go_to(reg("val")),    // eventually reverts stack, restores and jumps to $\texttt{continue}$
"fun_return",             // the function returns to here
  assign($\mathit{target}$, reg("val")), // included if target is not $\texttt{val}$
  go_to(label(<META>linkage</META>)),   // linkage code
      </PYTHON>
    </SNIPPET>
    or like
    <SPLITINLINE>
      <SCHEME>
        this if the linkage is <SCHEMEINLINE>return</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
        this<EMDASH/>saving the caller<APOS/>s continuation at the start in
        order to restore and go to it at the
        end<EMDASH/>if the linkage is <SCHEMEINLINE>"return"</SCHEMEINLINE> (that is, if the application is in a return statement and its value is the result to be returned):
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
 (save continue)
 (assign continue (label proc-return))
 (assign val (op compiled-procedure-entry) (reg proc))
 (goto (reg val))
proc-return
 (assign $\langle target\rangle$ (reg val)) ; included if target is not $\texttt{val}$
 (restore continue)
 (goto (reg continue))      ; linkage code
      </SCHEME>
      <PYTHON>
$\texttt{ }\texttt{ }$save("continue"),       // save the caller's continuation
  assign("continue", label("fun_return")), // where function should return to
  save("continue"),       // will be restored by the function
  push_marker_to_stack(), // allows the function to revert stack to find $\texttt{fun_return}$
  assign("val", list(op("compiled_function_entry"), reg("fun"))),
  go_to(reg("val")),    // eventually reverts stack, restores and jumps to $\texttt{continue}$
"fun_return",             // the function returns to here
  assign($\mathit{target}$, reg("val")), // included if target is not $\texttt{val}$
  restore("continue"),    // restore the caller's continuation
  go_to(reg("continue")), // linkage code
      </PYTHON>
    </SNIPPET>
    This code sets up <SCHEMEINLINE>continue</SCHEMEINLINE> so that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    will return to a label
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>proc-return</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
        <PYTHONINLINE>fun_return</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    and jumps to the
    <SPLITINLINE>
      <SCHEME>procedure<APOS/>s</SCHEME>
      <PYTHON>function<APOS/>s</PYTHON>
    </SPLITINLINE>
    entry point. The code at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc-return</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>fun_return</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    transfers the
    <SPLITINLINE>
      <SCHEME>procedure<APOS/>s</SCHEME>
      <PYTHON>function<APOS/>s</PYTHON>
    </SPLITINLINE>
    result from <SCHEMEINLINE>val</SCHEMEINLINE> to the target register (if
    necessary) and then jumps to the location specified by the linkage.
    (The linkage is always
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"return"</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    or a label,
    because
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-procedure-call</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>compile_@function_@call</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    replaces a
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"next"</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    linkage for the
    <SPLITINLINE>
      <SCHEME>
	compound-procedure branch by an
      <SCHEMEINLINE>after-call</SCHEMEINLINE></SCHEME>
      <PYTHON>
	compound-function branch by an
      <PYTHONINLINE>after_@call</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    label.)

    <SPLIT>
      <PYTHON>
        Before jumping to the function's entry point, we
        save <PYTHONINLINE>continue</PYTHONINLINE> and
        execute <PYTHONINLINE>push_@marker_@to_@stack()</PYTHONINLINE> to enable
        the function to return to the intended location in the program with the expected stack. Matching
        <PYTHONINLINE>revert_@stack_@to_@marker()</PYTHONINLINE> and
        <PYTHONINLINE>restore("continue")</PYTHONINLINE> instructions
        are generated by <PYTHONINLINE>compile_@return_@statement</PYTHONINLINE> for each return statement in the body of the
        function.<FOOTNOTE>Elsewhere in the compiler, all saves and restores of registers
are generated by <PYTHONINLINE>preserving</PYTHONINLINE>
to preserve a register's value across a sequence of instructions
by saving it before those instructions and restoring it
after<EMDASH/>for example over the evaluation of the predicate of a
conditional. But this mechanism cannot generate instructions to
save and restore <PYTHONINLINE>continue</PYTHONINLINE> for a function application and the
corresponding return, because these are compiled separately and
are not contiguous. Instead, these saves and restores must be
explicitly generated by <PYTHONINLINE>compile_@fun_@appl</PYTHONINLINE> and
<PYTHONINLINE>compile_@return_@statement</PYTHONINLINE>.</FOOTNOTE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <TEXT>
    In fact, if
    the target is not <SCHEMEINLINE>val</SCHEMEINLINE>,
    <SPLITINLINE>
      <SCHEME>that is</SCHEME>
      <PYTHON>the above is</PYTHON>
    </SPLITINLINE>
    exactly the code our compiler will generate.<FOOTNOTE>Actually, we signal
    an error when the target is not <SCHEMEINLINE>val</SCHEMEINLINE> and the
    linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"return"</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    since the only place we request
    <SPLITINLINE>
      <SCHEME>
	      <SCHEMEINLINE>return</SCHEMEINLINE>linkages 
      </SCHEME>
      <PYTHON>
        a <PYTHONINLINE>"return"</PYTHONINLINE> linkage
      </PYTHON>
    </SPLITINLINE>
    is in compiling
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <PYTHON>return expressions,</PYTHON>
    </SPLITINLINE>
    and our convention is that
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    return their values in <SCHEMEINLINE>val</SCHEMEINLINE>.</FOOTNOTE>
    Usually, however, the target is <SCHEMEINLINE>val</SCHEMEINLINE> (the only
    time the compiler specifies a different register is when targeting the
    evaluation of
    <SPLITINLINE>
      <SCHEME>an operator</SCHEME>
      <PYTHON>a function expression</PYTHON>
    </SPLITINLINE>
    to
    <SPLITINLINE>
      <SCHEME>
    <SCHEMEINLINE>proc</SCHEMEINLINE>),
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>fun</SCHEMEINLINE>),
      </PYTHON>
    </SPLITINLINE>
    so the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    result is put directly into
    the target register and there is no need to
    <SPLITINLINE>
      <SCHEME>return</SCHEME>
      <PYTHON>jump</PYTHON>
    </SPLITINLINE>
    to a special
    location that copies it. Instead we simplify the code by
    setting up <SCHEMEINLINE>continue</SCHEMEINLINE> so that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>called function</PYTHON>
    </SPLITINLINE>
    will
    <QUOTE>return</QUOTE>
    directly to the place specified by the caller<APOS/>s linkage:
    <DO_BREAK_PAGE/>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
 $\langle set\ up$ continue $for\ linkage\rangle$
 (assign val (op compiled-procedure-entry) (reg proc))
 (goto (reg val))
      </SCHEME>
      <PYTHON>
<METAPHRASE>set up <PYTHONINLINE>continue</PYTHONINLINE> for linkage and push the marker</METAPHRASE>
assign("val", list(op("compiled_function_entry"), reg("fun"))),
go_to(reg("val")),
      </PYTHON>
    </SNIPPET>
    If the linkage is a label, we set up <SCHEMEINLINE>continue</SCHEMEINLINE>
    so that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    will <SPLITINLINE><SCHEME>return to</SCHEME><PYTHON>continue at</PYTHON></SPLITINLINE>
    that label.  (That is, the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME>
      <PYTHON>
	<PYTHONINLINE>go_to(reg("continue"))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>called function</PYTHON>
    </SPLITINLINE>
    ends with becomes equivalent to the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (label linkage))</SCHEMEINLINE></SCHEME>
      <PYTHON>
	<PYTHONINLINE>go_to(label(</PYTHONINLINE><META>linkage</META><PYTHONINLINE>))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc-return</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>fun_return</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    above.)
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      (assign continue (label linkage))
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
      </SCHEME>
      <PYTHON>
assign("continue", label(<META>linkage</META>)),
save("continue"),
push_marker_to_stack(),
assign("val", list(op("compiled_function_entry"), reg("fun"))),
go_to(reg("val")),
      </PYTHON>
    </SNIPPET>
    If the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"return"</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    we don<APOS/>t need to 
<SPLITINLINE>
<SCHEME>
    set up <SCHEMEINLINE>continue</SCHEMEINLINE> at all:
</SCHEME>
<PYTHON>
    assign <SCHEMEINLINE>continue</SCHEMEINLINE>:
</PYTHON>
</SPLITINLINE>
    It already holds the desired location.
    (That is, the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME>
      <PYTHON>
	<PYTHONINLINE>go_to(reg("continue"))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>called function</PYTHON>
    </SPLITINLINE>
    ends with goes directly to the
    place where the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>go_to(reg("continue"))</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>proc-return</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>fun_</PYTHONINLINE><BREAKINGNONSPACE/><TT>return</TT><SPACE/>
      </PYTHON>
    </SPLITINLINE>
    would have gone.)
    <SNIPPET EVAL="no">
      <SCHEME>
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
      </SCHEME>
      <PYTHON>
save("continue"),
push_marker_to_stack(),
assign("val", list(op("compiled_function_entry"), reg("fun"))),
go_to(reg("val")),
      </PYTHON>
    </SNIPPET>
    With this implementation of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"return"</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    linkage,
    the compiler generates
    <INDEX>return statement<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
    <INDEX>compiler for JavaScript<SUBINDEX>tail-recursive code generated by</SUBINDEX></INDEX>
    <INDEX>tail recursion<SUBINDEX>compiler and</SUBINDEX></INDEX>
    tail-recursive code.
    <SPLITINLINE>
      <SCHEME>Calling a procedure as the final step in a procedure body</SCHEME>
      <PYTHON>A function call in a return statement whose value is the result to be returned</PYTHON>
    </SPLITINLINE>
    does a direct transfer, without saving
    <SPLITINLINE>
      <SCHEME>any information on the stack.</SCHEME>
      <PYTHON>unnecessary information on the stack.</PYTHON>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    Suppose instead that we had handled the case of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    call with a
    linkage of <SPLITINLINE><SCHEME>return</SCHEME><PYTHON><PYTHONINLINE>"return"</PYTHONINLINE></PYTHON></SPLITINLINE> and a target of
    <SCHEMEINLINE>val</SCHEMEINLINE> in the same way as for a
    non-<SCHEMEINLINE>val</SCHEMEINLINE> target. This would destroy tail
    recursion. Our system would still
    <SPLITINLINE>
      <SCHEME>
        give
      </SCHEME>
      <PYTHON>
	      return
      </PYTHON>
      the same value for any
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	expression.
      </SCHEME>
      <PYTHON>
	function call.
      </PYTHON>
    </SPLITINLINE>
    But each time we called a
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <PYTHON>function,</PYTHON>
    </SPLITINLINE>
    we would save
    <SCHEMEINLINE>continue</SCHEMEINLINE> 
      and return after the call to undo the (useless) save. These extra
    saves would accumulate during a nest of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    calls.<FOOTNOTE>Making a
    <INDEX>compiler<SUBINDEX>tail recursion, stack allocation, and garbage-collection</SUBINDEX></INDEX>
    compiler generate tail-recursive
    <SPLITINLINE>
      <SCHEME>
        code might seem like a straightforward idea.  But
      </SCHEME>
      <PYTHON>
        code is desirable, especially in the functional paradigm.
      </PYTHON>
    </SPLITINLINE>
    However, compilers for common languages,
    including
    <SPLITINLINE>
      <SCHEME>C and Pascal,</SCHEME>
      <PYTHON>C and C++,</PYTHON>
    </SPLITINLINE>
    do not always do this, and therefore these languages
    cannot represent iterative processes in terms of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    call alone. The difficulty with
    <INDEX>tail recursion<SUBINDEX>garbage collection and</SUBINDEX></INDEX>
    <INDEX>garbage collection<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
    <INDEX>stack allocation and tail recursion</INDEX>
    tail recursion in these languages is that their
    implementations use the stack to store
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    arguments and local
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <PYTHON>names</PYTHON>
    </SPLITINLINE>
    as well as return addresses.  The
    <SPLITINLINE>
      <SCHEME>
	Scheme
      </SCHEME>
      <PYTHON>
	JavaScript
      </PYTHON>
    </SPLITINLINE>
    implementations described in this book store arguments and
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <PYTHON>names</PYTHON>
    </SPLITINLINE>
    in memory to be garbage-collected.  The reason for using the stack for
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <PYTHON>names</PYTHON>
    </SPLITINLINE>
    and arguments is that it avoids the need for garbage collection
    in languages that would not otherwise require it, and is generally
    believed to be more efficient.  Sophisticated
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
    </SPLITINLINE>
    compilers can, in fact, use the stack for arguments without destroying tail
    recursion. (See
    <INDEX>Hanson, Christopher P.</INDEX>
    <CITATION>Hanson 1990</CITATION> for a description.)  There is also some
    debate about whether stack allocation is actually more efficient than garbage
    collection in the first place, but the details seem to hinge on fine
    points of computer architecture.  (See
    <INDEX>Appel, Andrew W.</INDEX>
    <CITATION>Appel 1987</CITATION> and
    <INDEX>Miller, James S.</INDEX>
    <INDEX>Rozas, Guillermo Juan</INDEX>
    <CITATION>Miller and Rozas 1994</CITATION>
    for opposing views on this issue.)</FOOTNOTE>
  </TEXT>

  <DO_BREAK_PAGE/>
  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Compile-proc-appl</SCHEMEINLINE></SCHEME>
      <PYTHON>The function <PYTHONINLINE>compile_@fun_@appl</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    generates the above
    <SPLITINLINE>
      <SCHEME>procedure-application</SCHEME>
      <PYTHON>function-application</PYTHON>
    </SPLITINLINE>
    code by considering four cases,
    depending on whether the target for the call
    is <SCHEMEINLINE>val</SCHEMEINLINE> and whether the linkage is
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>"return"</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Observe that the instruction sequences
    are declared to modify all the registers, since executing the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    body can change the registers in arbitrary ways.<FOOTNOTE>The
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <PYTHON>constant</PYTHON>
    </SPLITINLINE>
    <INDEX>compiler for JavaScript<SUBINDEX>register use</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>all-regs</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>all_regs</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is bound to the list of names of all the registers:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>all_regs</DECLARATION> (compiler)</INDEX>
      <NAME>all_regs</NAME>
      <SCHEME>
(define all-regs '(env proc val argl continue))
      </SCHEME>
      <PYTHON>
const all_regs = list("env", "fun", "val", "argl", "continue");
      </PYTHON>
    </SNIPPET></FOOTNOTE>
    <SPLIT>
      <SCHEME>
	Also note that the code sequence for the case with target
	<SCHEMEINLINE>val</SCHEMEINLINE> and linkage
	<SCHEMEINLINE>return</SCHEMEINLINE>
	is declared to need
	<SCHEMEINLINE>continue</SCHEMEINLINE>:  Even though
	<SCHEMEINLINE>continue</SCHEMEINLINE> is not explicitly used in the
	two-instruction sequence, we must be sure that
	<SCHEMEINLINE>continue</SCHEMEINLINE> will have the correct
	value when we enter the compiled procedure.
      </SCHEME>
    </SPLIT>
    <SNIPPET EVAL="no" LATEX="yes" POSTPADDING="no">
      <INDEX><DECLARATION>compile_fun_appl</DECLARATION></INDEX>
      <NAME>compile_fun_appl</NAME>
      <SCHEME>
      (define (compile-proc-appl target linkage)
      (cond ((and (eq? target 'val) (not (eq? linkage 'return)))
            (make-instruction-sequence '(proc) all-regs
            `((assign continue (label ,linkage))
            (assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val)))))
            ((and (not (eq? target 'val))
            (not (eq? linkage 'return)))
            (let ((proc-return (make-label 'proc-return)))
            (make-instruction-sequence '(proc) all-regs
            `((assign continue (label ,proc-return))
            (assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val))
            ,proc-return
            (assign ,target (reg val))
            (goto (label ,linkage))))))
            ((and (eq? target 'val) (eq? linkage 'return))
            (make-instruction-sequence '(proc continue) all-regs
            '((assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val)))))
            ((and (not (eq? target 'val)) (eq? linkage 'return))
            (error "return linkage, target not val - - COMPILE"
            target))))
      </SCHEME>
      <PYTHON>
function compile_fun_appl(target, linkage) {
    const fun_return = make_label("fun_return");
    return target === "val" &amp;&amp; linkage !== "return"
           ? make_instruction_sequence(list("fun"), all_regs,
                 list(assign("continue", label(linkage)),
                      save("continue"),
                      push_marker_to_stack(),
                      assign("val", list(op("compiled_function_entry"),
                                         reg("fun"))),
                      go_to(reg("val"))))
           : target !== "val" &amp;&amp; linkage !== "return"
           ? make_instruction_sequence(list("fun"), all_regs,
                 list(assign("continue", label(fun_return)),
                      save("continue"),
                      push_marker_to_stack(),
                      assign("val", list(op("compiled_function_entry"),
                                         reg("fun"))),
                      go_to(reg("val")),
                      fun_return,
                      assign(target, reg("val")),
                      go_to(label(linkage))))
           : target === "val" &amp;&amp; linkage === "return"
           ? make_instruction_sequence(list("fun", "continue"),
                                       all_regs,
                 list(save("continue"),
                      push_marker_to_stack(),
                      assign("val", list(op("compiled_function_entry"),
                                         reg("fun"))),
                      go_to(reg("val"))))
           : // $\texttt{target !== "val" \&amp;\&amp; linkage === "return"}$
             error(target, "return linkage, target not val -- compile");
}
      </PYTHON>
    </SNIPPET>
  <INDEX>compiler for JavaScript<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE> applications<CLOSE/></SUBINDEX></INDEX>
  <INDEX>compiler for JavaScript<SUBINDEX>combinations<CLOSE/></SUBINDEX></INDEX>
  </TEXT>
  <SPLIT>
    <PYTHON>
  <TEXT>
  We have shown how to generate tail-recursive linkage code for a
  function application when the linkage is <PYTHONINLINE>"return"</PYTHONINLINE><EMDASH/>that is, when the application is in a return statement
and its value is the result to be returned. Similarly, as explained in
  section<SPACE/><REF NAME="sec:procedure-application"/>, the stack-marker mechanism used here (and in the
  explicit-control evaluator) for the call and return produces
  <INDEX>return statement<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
  <INDEX>tail recursion<SUBINDEX>return statement necessary for</SUBINDEX></INDEX>
  tail-recursive behavior only in that situation. These two aspects of the code generated for function
  application combine to ensure that when a function ends by returning
  the value of a function call, no stack accumulates.
  </TEXT>
</PYTHON>
</SPLIT>

  <SPLIT>
    <PYTHON>
      <SUBHEADING>
        <NAME>
          Compiling return statements
        </NAME>
      </SUBHEADING>
      <TEXT>
        The code for a
        <INDEX>compiler for JavaScript<SUBINDEX>return statements</SUBINDEX></INDEX>
        <INDEX>return statement<SUBINDEX>handling in compiler</SUBINDEX></INDEX>
	return statement takes the following form, regardless of the given linkage and target:
        <SNIPPET EVAL="no" LATEX="yes">
          <PYTHON>
revert_stack_to_marker(),
restore("continue"),   // saved by $\texttt{compile\char`_fun\char`_appl}$
<METAPHRASE>evaluate the return expression and store the result in <PYTHONINLINE>val</PYTHONINLINE></METAPHRASE>
go_to(reg("continue")) // $\texttt{"return"}$-linkage code
          </PYTHON>
        </SNIPPET>
        The instructions to revert the stack using the marker and then restore 
        <PYTHONINLINE>continue</PYTHONINLINE> correspond to the
        instructions generated by <PYTHONINLINE>compile_@fun_@appl</PYTHONINLINE>
        to save <PYTHONINLINE>continue</PYTHONINLINE> and mark the stack.
        The final jump to <PYTHONINLINE>continue</PYTHONINLINE> is
        generated by the use of the <PYTHONINLINE>"return"</PYTHONINLINE>
        linkage when compiling the return expression.
        The function <PYTHONINLINE>compile_@return_@statement</PYTHONINLINE>
        is different from all other code generators in that it ignores the target 
        and linkage arguments<EMDASH/>it always compiles the return expression with
        target <PYTHONINLINE>val</PYTHONINLINE> and linkage 
        <PYTHONINLINE>"return"</PYTHONINLINE>.
         <SNIPPET EVAL="no" POSTPADDING="no">
          <INDEX><DECLARATION>compile_return_statement</DECLARATION></INDEX>
           <NAME>compile_return</NAME>
           <PYTHON>
function compile_return_statement(stmt, target, linkage) {
    return append_instruction_sequences(
               make_instruction_sequence(null, list("continue"),
                   list(revert_stack_to_marker(),
                        restore("continue"))),
               compile(return_expression(stmt), "val", "return"));
}
	   </PYTHON>
  	 </SNIPPET>
         </TEXT>
      </PYTHON>
    </SPLIT>
</SUBSECTION>
