[{"id":"/sicpjs/3.2","tag":"TITLE","body":"3.2  The Environment Model of Evaluation"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    When we introduced compound\n    functions\n    in chapter ","tag":"#text"},{"tag":"REF","body":"1","href":"/sicpjs/1"},{"body":", we used the\n    \n    substitution model of evaluation\n    (section ","tag":"#text"},{"tag":"REF","body":"1.1.5","href":"/sicpjs/1.1.5"},{"body":") to define what is\n    meant by applying a\n    function\n    to arguments:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"To apply a compound\n      function\n      to arguments, evaluate the \n      return expression of the function (more generally, the body)\n      with each\n      \n      parameter replaced by the corresponding\n      argument.\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Once we admit assignment into our programming language, such a\n    definition is no longer adequate.  In particular,\n    section ","tag":"#text"},{"tag":"REF","body":"3.1.3","href":"/sicpjs/3.1.3"},{"body":" argued that, in the\n    presence of assignment,\n    \n\ta name cannot be considered to be merely\n\trepresenting a value.  Rather, a name must somehow designate a\n\t\"","tag":"#text"},{"body":"place","tag":"#text"},{"body":"\" in which values can be stored.\n      \n    In our new model of\n    evaluation, these places will be maintained in structures called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"environments","tag":"#text"}]},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    An environment is a sequence of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"frames","tag":"#text"}]},{"body":".  Each frame is a table (possibly empty) of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"bindings","tag":"#text"}]},{"body":", which associate\n    \n\tnames\n      \n    with their corresponding\n    values.\n    \n\t(A single frame may contain at most one binding for any name.)\n      \n    Each frame also has a pointer to its \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"enclosing environment","tag":"#text"}]},{"body":", unless, for the purposes of discussion, the\n    frame is considered to be \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"global","tag":"#text"}]},{"body":".  The \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"value of a name","tag":"#text"}]},{"body":"\n    with respect to an environment is the value given by the binding of\n    the\n    \n\tname\n      \n    in the first frame in the environment that contains a\n    binding for that\n    \n\tname.\n      \n    If no frame in the sequence specifies a\n    binding for the\n    \n\tname,\n      \n    then the\n    \n\tname\n      \n    is said to be \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"unbound","tag":"#text"}]},{"body":" in the environment.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"50%","src":"img_javascript/ch3-Z-G-2.svg","id":"#fig-3.1","captionHref":"/sicpjs/3.2#fig-3.1","captionName":"Figure 3.1 ","captionBody":[{"body":"\n\t    A simple \n\t    \n\t    environment structure.\t    \n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n\tFigure ","tag":"#text"},{"tag":"REF","body":"3.1","href":"/sicpjs/3.2#fig-3.1"},{"body":"\n    shows a simple environment\n    structure consisting of three frames, labeled I, II, and III.  In the\n    diagram, A, B, C, and D are pointers to environments.  C and D point\n    to the same environment.  The\n    \n\tnames\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" are bound in frame II, while\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" are bound\n    in frame I.  The value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" in environment D\n    is 3.  The value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" with respect to\n    environment B is also 3.  This is determined as follows: We examine the\n    first frame in the sequence (frame III) and do not find a binding for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", so we proceed to the enclosing environment\n    D and find the binding in frame I.  On the other hand, the value of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" in environment A is 7, because the first\n    frame in the sequence (frame II) contains a binding of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" to 7.  With respect to environment A, the\n    binding of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" to 7 in frame II is said to \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"shadow","tag":"#text"}]},{"body":" the binding of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" to 3 in\n    frame I.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The environment is crucial to the evaluation process, because it determines\n    the context in which an expression should be evaluated.  Indeed, one could\n    say that expressions in a programming language do not, in themselves, have\n    any meaning.  Rather, an expression acquires a meaning only with respect to\n    some environment in which it is evaluated.  \n    \n\tEven the interpretation of an expression as straightforward as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display(1)"},{"body":" depends on an\n\tunderstanding that one is operating in a context in which the name\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":" refers to the primitive function\n\tthat displays a value.\n      \n    Thus, in our model of evaluation we will always speak of evaluating an\n    expression with respect to some environment.  To describe interactions with\n    the\tinterpreter, we will suppose that there is a \n    \n    global environment, consisting of a single frame (with no enclosing\n    environment) that includes values for the\n    \n\tnames\n      \n    associated with the\n    primitive\n    \n\tfunctions.\n      \n    For example, the idea that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":" is the name for the\n\tprimitive display function is captured by saying that the\n\tname ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":"\n    is bound in the global environment to the primitive\n    display function.","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n\tBefore we evaluate a program, we extend the global\n\tenvironment with a new frame, the\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"program frame","tag":"#text"}]},{"body":", resulting in the\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"program environment","tag":"#text"}]},{"body":". We will add\n\tthe names that are declared at the top level of the\n\tprogram, outside of any block, to this frame. The given program\n\tis then\tevaluated with respect to the program environment.\n      ","tag":"#text"}]}]