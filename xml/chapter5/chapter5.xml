<CHAPTER>
  <NAME>Computing with Register Machines</NAME>

  <HISTORY>
    % Feb '98 Add tex '\label's for manual to reference.
    % 4/13-4/15 Indexing [after final printout of chapters]
    % 4/13/96 Last-minute pagination change to get compiled-code figs on
    %         facing pages
    % 4/12    Pagination adjustments from proofreading
    % 4/11/96 minor fixes; checked against before-indexing
    % 4/9/96  fix a word
    % 4/6-... Julie index fixes (and 4/8 change 'ns')
    % 4/5/96  Hal indexing
    % 4/3/96  indexing changes
    % 4/2/96  adjusted pagination in 5.1-5.3, paginated rest of 5.5
    % 4/1/96  Julie: paginated 5.4 and part of 5.5
    % 3/29/96 Julie: indexing fixes
    % 3/22/96 Julie: paginated 5.2-5.3
    % 3/21/96 Julie: paginated 5.1
    % 3/20-3/21/96 Julie &amp; Hal indexing
    % 3/17/96 Julie: a couple of index entries consistent with ch4
    % 3/4/96  reword to 'fix' most triple and quadruple hyphenation
    % 3/3/96  change countleaves to count-leaves (to match ch2 change)
    % 2/26-3/3/96 fix some bad line breaks
    % 2/24/96 flush \noindent after {lisp} by closing up space with 
    % 2/24/96 use smalltt to make some stuff fit nicely in 5.2
    % 2/23/96 use Stabular instead of point-size changes
    % 2/22/96 new spec for epigraph
    % 2/19/96 change exp-iter - -&gt; expt-iter
  </HISTORY>

  <EPIGRAPH>

    My aim is to show that the heavenly machine is not a kind of divine,
    live being, but a kind of clockwork (and he who believes that a clock
    has soul attributes the maker<APOS/>s glory to the work), insofar as nearly
    all the manifold motions are caused by a most simple and material
    force, just as all motions of the clock are caused by a single weight.

    <INDEX>Kepler, Johannes</INDEX>
    <ATTRIBUTION><AUTHOR>Johannes Kepler</AUTHOR>
      <DATE>letter to Herwart von Hohenburg, 1605</DATE>
    </ATTRIBUTION>

  </EPIGRAPH>

  <CHAPTERCONTENT/>

  <TEXT>
    <NOINDENT/>
    We began this book by studying processes and by describing processes
    in terms of
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    written in
    <SPLITINLINE>
      <SCHEME>Lisp.</SCHEME>
    <JAVASCRIPT>JavaScript.</JAVASCRIPT></SPLITINLINE>
    To explain the meanings of these
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    we used a succession of models of evaluation: the
    substitution model of chapter<SPACE/>1, the environment model of
    chapter<SPACE/>3, and the metacircular evaluator of chapter<SPACE/>4.  Our
    examination of the metacircular evaluator, in particular, dispelled much of
    the mystery of how
    <SPLITINLINE>
      <SCHEME>Lisp-like languages are interpreted.</SCHEME>
      <JAVASCRIPT>JavaScript-like languages are interpreted.</JAVASCRIPT>
    </SPLITINLINE>
    But even the metacircular evaluator leaves important questions
    unanswered, because it fails to elucidate the mechanisms of control in a
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system.  For instance, the evaluator does not explain how the
    evaluation of a subexpression manages to return a value to the
    expression that uses this value<SPLITINLINE><SCHEME>, nor does
    the evaluator explain how some recursive procedures generate
    iterative processes (that is, are evaluated using constant space)
    whereas other recursive procedures generate recursive
    processes</SCHEME></SPLITINLINE>.
    <SPLITINLINE>
      <SCHEME>
        These questions remain unanswered because the metacircular
        evaluator is itself a Lisp program and hence inherits the
        control structure of the underlying Lisp system. In order to
        provide a more complete description of the control structure
        of the Lisp evaluator, we must work at a more primitive level
        than Lisp itself.
      </SCHEME>
      <JAVASCRIPT>
        Also, the evaluator does not explain how some recursive
        functions can generate iterative processes (that is, be
        evaluated using constant space) whereas other recursive
        functions will generate recursive processes.<FOOTNOTE>
	With our metacircular evaluator, a recursive function
	always gives rise to a recursive process, even when
	the process should be iterative according to the 
	distinction of section<SPACE/><REF NAME="sec:recursion-and-iteration"/>.
        See footnote<SPACE/><REF NAME="foot:apply"/> in
        section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
      </FOOTNOTE>
      This chapter addresses both of these issues.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
        In this chapter we 
      </SCHEME>
      <JAVASCRIPT>
        We
      </JAVASCRIPT>
    </SPLITINLINE>
    will describe processes in terms of the step-by-step
    operation of a traditional computer.  Such a computer, or 
    <INDEX>register machine</INDEX>
    <EM>register machine</EM>, sequentially executes 
    <EM>instructions</EM> that
    manipulate the contents of a fixed set of storage elements called 
    <INDEX>register(s)</INDEX>
    <EM>registers</EM>.  A typical register-machine instruction applies a
    primitive operation to the contents of some registers and assigns the
    result to another register.  Our descriptions of processes executed by
    register machines will look very much like <QUOTE>machine-language</QUOTE>
    programs for traditional computers.  However, instead of focusing on
    the machine language of any particular computer, we will examine
    several
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and design a specific register machine to
    execute each
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Thus, we will approach our task from the
    perspective of a hardware architect rather than that of a
    machine-language computer programmer.  In designing register machines,
    we will develop mechanisms for implementing important programming
    constructs such as recursion.  We will also present a language for
    describing designs for register machines.  In
    section<SPACE/><REF NAME="sec:simulator"/> we will
    implement a
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program that uses these descriptions to simulate the machines we design.
  </TEXT>

  <TEXT>
    Most of the primitive operations of our register machines are very
    simple.  For example, an operation might add the numbers fetched from
    two registers, producing a result to be stored into a third register.
    Such an operation can be performed by easily described hardware.  In
    order to deal with list structure, however, we will also use the
    memory operations
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which require an elaborate storage-allocation mechanism.  In
    section<SPACE/><REF NAME="sec:storage-allocation"/> we study their
    implementation in terms of more elementary operations.
  </TEXT>

  <TEXT>
    In section<SPACE/><REF NAME="sec:eceval"/>, after we have accumulated
    experience formulating simple
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    as register machines, we will design a
    machine that carries out the algorithm described by the metacircular
    evaluator of section<SPACE/><REF NAME="sec:mc-eval"/>.  This will fill in
    the gap in our understanding of how
    <SPLITINLINE>
      <SCHEME>Scheme expressions</SCHEME>
      <JAVASCRIPT>JavaScript programs</JAVASCRIPT>
    </SPLITINLINE>
    are interpreted, by providing an explicit model for the mechanisms of
    control in the evaluator.
    In section<SPACE/><REF NAME="sec:compilation"/> we will study a simple
    compiler that translates
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    programs into sequences of instructions that can be executed directly with
    the registers and operations of the evaluator register machine.
  </TEXT>

  <CHAPTERCONTENT/>

  <!-- Section 1 : Designing Register Machines -->
  &amp;section5.1;

  <!-- Section 2 : A Register-Machine Simulator -->
  &amp;section5.2;

  <!-- Section 3 : Storage Allocation and Garbage Collection -->
  &amp;section5.3;

  <!-- Section 4 : The Explicit-Control Evaluator -->
  &amp;section5.4;

  <!-- Section 5 : Compilation -->
  &amp;section5.5;

</CHAPTER>
