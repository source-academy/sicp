<SUBSECTION>
  <NAME>Expressions</NAME>
  <LABEL NAME="sec:expressions"/>

  <TEXT>
    One easy way to get started at programming is to examine some typical
    interactions with an interpreter for the
    <SPLITINLINE>
      <SCHEME>Scheme dialect of Lisp.</SCHEME>
      <PYTHON>Python language.</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	Imagine that you are sitting at a
	computer terminal.
      </SCHEME>
    </SPLITINLINE>
    You type 
    <SPLITINLINE>
      <SCHEME>an <EM>expression</EM>,</SCHEME>
      <PYTHON>a <EM>statement</EM>,</PYTHON>
    </SPLITINLINE>
    and the interpreter responds by displaying the
    result of its <EM>evaluating</EM> that
    <SPLITINLINE>
      <SCHEME>expression.</SCHEME>
      <PYTHON>
	<INDEX>statement</INDEX>
	statement.
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
  <SPLIT>
    <PYTHON>
      <TEXT>
	<WEB_ONLY DIFFERENT_TEXT="yes">
	  In this edition, the mouse click on 
	  Python program with dark background is 
	  programmed in such a way that a JavaScript interpreter is
	  displayed, which can <EM>evaluate</EM> the
	  program and display the resulting value.
	</WEB_ONLY>
      </TEXT>
    </PYTHON>
  </SPLIT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        <INDEX>number(s)<SUBINDEX>in Lisp<ORDER>lisp</ORDER></SUBINDEX></INDEX>
        <INDEX>primitive expression<SUBINDEX>number</SUBINDEX></INDEX>
        One kind of primitive expression you might type is a number.  
      </SCHEME>
      <PYTHON>
        One kind of statement you might type is an 
        expression statement, which consists of an
        <EM>expression</EM> followed by a newline.
        <INDEX>number(s)<SUBINDEX>in Python<ORDER>Python</ORDER></SUBINDEX></INDEX>
        <INDEX>primitive expression<SUBINDEX>number</SUBINDEX></INDEX>
	<INDEX>expression statement</INDEX>
	<INDEX>expression</INDEX>
	<INDEX>newline <SUBINDEX>ending statement</SUBINDEX></INDEX>
	One kind of primitive expression is a number.
      </PYTHON>
    </SPLIT>
    (More precisely, the expression that you type consists of the numerals that
    represent the number in base 10.)
    <PDF_ONLY>
      If you present
      <SPLITINLINE>
	<SCHEME>Lisp with a number</SCHEME>
	<PYTHON>
	  Python with the program
	</PYTHON>
      </SPLITINLINE>
      <SNIPPET>
486 
      </SNIPPET>
      the interpreter will respond by printing<FOOTNOTE>Throughout this book,
      we distinguish
      <INDEX>notation in this book<SUBINDEX>slanted characters for interpreter response</SUBINDEX></INDEX>
      between the input typed by
      the user and any text printed by the interpreter by showing the
      latter in slanted characters.</FOOTNOTE>
      <SNIPPET>
	<PYTHON_OUTPUT>
486
	</PYTHON_OUTPUT>
      </SNIPPET>
    </PDF_ONLY>
    <WEB_ONLY DIFFERENT_TEXT="yes">
      If you ask our script to evaluate the expression statement
      <SNIPPET>
	<PYTHON>
486
	</PYTHON>  
      </SNIPPET>
      by clicking it, it will respond by displaying a Python interpreter
      with the option
      to evaluate the statement by pressing a <QUOTE>Run</QUOTE> button.
      Click on the primitive expression statement, and see what happens!
    </WEB_ONLY>
  </TEXT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        Expressions representing numbers may be combined with an
        <INDEX>compound expression</INDEX>
        <INDEX>combination</INDEX>
        <INDEX>primitive expression<SUBINDEX>name of primitive procedure</SUBINDEX></INDEX>
        expression representing a
        <INDEX>arithmetic<SUBINDEX>primitive procedures for</SUBINDEX></INDEX>
        <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>+</ORDER>{\tt +}</SUBINDEX></INDEX>
        <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>*</ORDER>{\tt *}</SUBINDEX></INDEX>
        primitive procedure (such as 
        <SCHEMEINLINE>+</SCHEMEINLINE> or <SCHEMEINLINE>*</SCHEMEINLINE>) to
	form a compound expression that represents the application of the
	procedure to those numbers.  For example,
        <SNIPPET>
          <SCHEME>
(+ 137 349)
          </SCHEME>
          <SCHEMEOUTPUT>
486
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>-</ORDER>{\tt -}</SUBINDEX></INDEX>
          <SCHEME>
(- 1000 334)
          </SCHEME>
          <SCHEMEOUTPUT>
666
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(* 5 99)
          </SCHEME>
          <SCHEMEOUTPUT>
495
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>/</ORDER>{\tt /}</SUBINDEX></INDEX>
          <SCHEME>
(/ 10 5)
          </SCHEME>
          <SCHEMEOUTPUT>
2
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(+ 2.7 10)
          </SCHEME>
          <SCHEMEOUTPUT>
12.7
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <PYTHON>
      <TEXT>
        Expressions representing numbers may be combined with
	operators
        (such 
        <INDEX><USE>+</USE><SUBINDEX>as numeric addition operator</SUBINDEX></INDEX>
        <INDEX><OPERATOR/><SUBINDEX><USE>+</USE> (for numeric addition)</SUBINDEX></INDEX>
        as <PYTHONINLINE>+</PYTHONINLINE>
        <INDEX>arithmetic<SUBINDEX>operators for</SUBINDEX></INDEX>
        <INDEX><ORDER>-1</ORDER><USE>*</USE> (multiplication operator)</INDEX>
        <INDEX><OPERATOR/><SUBINDEX><ORDER>-1</ORDER><USE>*</USE> (multiplication)</SUBINDEX></INDEX>
        or<SPACE/><PYTHONINLINE>*</PYTHONINLINE>) to form a
        <INDEX>compound expression</INDEX>
        <INDEX>operator combination</INDEX>
        compound expression that represents the
        application of a corresponding primitive
        function to those numbers.  For example,
	<WEB_ONLY DIFFERENT_TEXT="yes">
	  evaluate
          any of the following expression statements
	  by clicking on it:
	</WEB_ONLY>
      <SNIPPET>
        <PYTHON>
137 + 349
        </PYTHON>
	<PYTHON_OUTPUT>
486	  
	</PYTHON_OUTPUT>
      </SNIPPET>
      <SNIPPET>
        <PYTHON>
1000 - 334
        </PYTHON>
	<PYTHON_OUTPUT>
666	    
	</PYTHON_OUTPUT>
      </SNIPPET>
      <SNIPPET>
        <PYTHON>
5 * 99
        </PYTHON>
	<PYTHON_OUTPUT>
495	  
	</PYTHON_OUTPUT>
      </SNIPPET>
      <SNIPPET>
	<INDEX><USE>/</USE> (division operator)</INDEX>
	<INDEX><OPERATOR/><SUBINDEX><USE>/</USE> (division)</SUBINDEX></INDEX>
        <PYTHON>
10 / 4
        </PYTHON>  
	<PYTHON_OUTPUT>
2.5	  
	</PYTHON_OUTPUT>
      </SNIPPET>
      <SNIPPET>
        <PYTHON>
2.7 + 10
        </PYTHON>  
	<PYTHON_OUTPUT>
12.7	  
	</PYTHON_OUTPUT>
      </SNIPPET>
      </TEXT>
    </PYTHON>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        Expressions such as these, formed by 
        <INDEX>parentheses<SUBINDEX>delimiting combination</SUBINDEX></INDEX>
        delimiting a list of expressions
        within parentheses in order to denote
        <INDEX>procedure application<SUBINDEX>combination denoting</SUBINDEX></INDEX>
        procedure application,
        are called <EM>combinations</EM>.  The leftmost
        element in the list is called the 
        <INDEX>operator of a combination</INDEX>
        <EM>operator</EM>, and the other
        elements are called 
        <INDEX>operands of a combination</INDEX>
        <EM>operands</EM>.  The
        <INDEX>value<SUBINDEX><ORDER>combination</ORDER>of a combination</SUBINDEX></INDEX>
        value of a combination is
        obtained by applying the procedure specified by the operator to the
        <INDEX>argument(s)</INDEX>
        <EM>arguments</EM> that are the values of the operands.
      </TEXT>
    </SCHEME>
    <PYTHON>
      <TEXT>
        Expressions such as these, which contain other expressions
        as components, are called <EM>combinations</EM>.
        <INDEX>combination</INDEX>
        Combinations that are formed by an 
        <INDEX>operator of a combination</INDEX>
        <INDEX>operator combination</INDEX>
        <EM>operator</EM> symbol in the middle, and
        <INDEX>operands of a combination</INDEX>
        <EM>operand</EM> expressions to the left and right of it, 
        are called 
        <EM>operator combinations</EM>.
	<INDEX>value<SUBINDEX><ORDER>expression</ORDER>of an expression</SUBINDEX></INDEX>
        The value of an operator combination is
        obtained by applying the function specified by the operator to the
        arguments that are the values of the operands.
      </TEXT>
    </PYTHON>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        The convention of placing the operator to the left of the operands is
        known as 
        <INDEX>prefix notation</INDEX>
        <EM>prefix notation</EM>, and it may be somewhat confusing at
        first because it departs significantly from the customary mathematical
        convention.  Prefix notation has several advantages, however.  One of
        them is that it can accommodate 
        <INDEX>procedure<SUBINDEX>arbitrary number of arguments</SUBINDEX></INDEX>
        <INDEX>argument(s)<SUBINDEX>arbitrary number of</SUBINDEX></INDEX>
        procedures that may take an arbitrary
        number of arguments, as in the following examples:
        <SNIPPET>
          <SCHEME>
(+ 21 35 12 7)
          </SCHEME>
          <SCHEMEOUTPUT>
75
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(* 25 4 12)
          </SCHEME>
          <SCHEMEOUTPUT>
1200
          </SCHEMEOUTPUT>
        </SNIPPET>
        No ambiguity can arise, because the operator is always the leftmost 
        element and the entire combination is delimited by the
        parentheses.
      </TEXT>
      <TEXT>
        A second advantage of prefix notation is that it extends in a
        straightforward way to allow combinations to be
        <INDEX>nested combinations</INDEX>
	<EM>nested</EM>, that is, to have combinations whose elements are
	themselves combinations:
        <SNIPPET>
          <SCHEME>
(+ (* 3 5) (- 10 6))
          </SCHEME>
          <SCHEMEOUTPUT>
19
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <PYTHON>
      <TEXT>
        The convention of placing the operator between the operands is
        known as 
        <INDEX>infix operator</INDEX>
        <INDEX>infix notation</INDEX>
        <EM>infix notation</EM>. It follows the mathematical notation that
	you are most likely familiar with from school and everyday life.
        As in mathematics, operator combinations can be <EM>nested</EM>, that
	is, they can have operands that
        <INDEX>nested operator combinations</INDEX>
	themselves are operator combinations:
        <SNIPPET>
          <PYTHON>
(3 * 5) + (10 - 6)
          </PYTHON>
	  <PYTHON_OUTPUT>
19
	  </PYTHON_OUTPUT>
        </SNIPPET>
        As usual,
	<INDEX>parentheses<SUBINDEX><ORDER>group</ORDER>to group operator combinations</SUBINDEX></INDEX>
	parentheses are used to group operator combinations in order
	to avoid ambiguities. Python also follows the usual conventions
	when parentheses are omitted: multiplication and division bind more
	strongly than addition and subtraction. For example,
        <SNIPPET>
          <PYTHON>
3 * 5 + 10 / 2
          </PYTHON>
        </SNIPPET>
        stands for 
        <SNIPPET>
          <PYTHON>
(3 * 5) + (10 / 2)
          </PYTHON>
        </SNIPPET>
        We say that <PYTHONINLINE>*</PYTHONINLINE> and
	<PYTHONINLINE>/</PYTHONINLINE> have
        <INDEX>precedence<SUBINDEX><ORDER>operators</ORDER>of operators</SUBINDEX></INDEX>
	<EM>higher precedence</EM>
	than <PYTHONINLINE>+</PYTHONINLINE> and
	<PYTHONINLINE>-</PYTHONINLINE>. Sequences of additions and
	subtractions are read from left to right, as are sequences of
	multiplications and divisions. Thus,
        <SNIPPET>
          <INDEX><USE>-</USE><SUBINDEX>as numeric subtraction operator</SUBINDEX></INDEX>
          <INDEX><OPERATOR/><SUBINDEX><USE>-</USE> (numeric subtraction operator)</SUBINDEX></INDEX>
	  <EXPECTED>-6</EXPECTED>
          <PYTHON>
1 - 5 / 2 * 4 + 3
          </PYTHON>
        </SNIPPET>
        stands for 
        <SNIPPET>
          <PYTHON>
(1 - ((5 / 2) * 4)) + 3
          </PYTHON>
        </SNIPPET>
        We say that the operators
        <PYTHONINLINE>+</PYTHONINLINE>,
        <PYTHONINLINE>-</PYTHONINLINE>,
        <PYTHONINLINE>*</PYTHONINLINE> and
        <PYTHONINLINE>/</PYTHONINLINE> are 
	<INDEX>associativity<SUBINDEX><ORDER>operator</ORDER>of operators</SUBINDEX></INDEX>
	<INDEX>left-associative</INDEX>
        <EM>left-associative</EM>.
      </TEXT>
    </PYTHON>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        There is no limit (in principle) to the depth of such nesting and to the
	overall complexity of the expressions that the Lisp interpreter can
	evaluate. It is we humans who get confused by still relatively simple
	expressions such as
        <SNIPPET>
          <SCHEME>
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
          </SCHEME>
        </SNIPPET>
        which the interpreter would readily evaluate to be 57.  We can help
        ourselves by writing such an expression in the form
        <SNIPPET>
          <SCHEME>
(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6))
          </SCHEME>
        </SNIPPET>
        following a formatting convention known as  
        <INDEX>pretty-printing</INDEX>
        <EM>pretty-printing</EM>, in which each long combination is written so
	that the operands are aligned vertically.  The resulting
	<INDEX>indentation</INDEX>
        <INDEX>nested combinations</INDEX>
        <INDEX>combination</INDEX>
	indentations
	display clearly the structure of the expression.<FOOTNOTE>Lisp systems
	typically provide
        <INDEX>formatting input expressions</INDEX>
        <INDEX>typing input expressions</INDEX>
        features to aid the user in formatting expressions.  Two especially
        useful features are one that automatically indents to the proper
        pretty-print position whenever a new line is started and one that
        highlights the matching left parenthesis whenever a right parenthesis
        is typed.</FOOTNOTE>
      </TEXT>
    </SCHEME>
    <PYTHON>
      <TEXT>
        There is no limit (in principle) to the depth of such nesting and to the
	overall complexity of the expressions that the Python interpreter
	can evaluate. It is we humans who might get confused by still relatively
        simple expressions such as
        <SNIPPET>
	  <EXPECTED>57</EXPECTED>
          <PYTHON>
3 * 2 * (3 - 5 + 4) + 27 / 6 * 10
          </PYTHON>
        </SNIPPET>
        which the interpreter would readily evaluate to be 57.  We can help
        ourselves by writing such an expression in the form
        <SNIPPET>
          <PYTHON>
(3 * 2 * (3 - 5 + 4) 
+ 
27 / 6 * 10)
          </PYTHON>
        </SNIPPET>
        to visually separate the major components of the expression.
        Expressions that span multiple lines must be enclosed in parentheses.
      </TEXT>
    </PYTHON>
  </SPLIT>
  <TEXT>
    Even with complex expressions, the interpreter always operates in the
    same basic cycle: It reads
    <SPLITINLINE>
      <SCHEME>an expression from the terminal,</SCHEME>
      <PYTHON>a statement typed by the user,</PYTHON>
    </SPLITINLINE>
    evaluates the
    <SPLITINLINE>
      <SCHEME>expression,</SCHEME>
      <PYTHON>statement,</PYTHON>
    </SPLITINLINE>
    and prints the result. This mode of operation is often expressed by saying
    that the interpreter runs in a
    <SPLITINLINE>
      <SCHEME>
	<INDEX>read-eval-print loop</INDEX>
	<INDEX>interpreter<SUBINDEX>read-eval-print loop</SUBINDEX></INDEX>
	<EM>read-eval-print loop</EM>.
      </SCHEME>
      <PYTHON>
	<INDEX>read-evaluate-print loop</INDEX>
	<INDEX>interpreter<SUBINDEX>read-evaluate-print loop</SUBINDEX></INDEX>
	<EM>read-evaluate-print loop</EM>.
      </PYTHON>
    </SPLITINLINE>
    Observe in particular that it is not necessary to explicitly instruct the
    interpreter to print the value of the
    <SPLITINLINE>
      <SCHEME>
	expression.<FOOTNOTE>Lisp obeys the convention that every
	<INDEX>Perlis, Alan J.<SUBINDEX>quips</SUBINDEX></INDEX>
	<INDEX>Wilde, Oscar (Perlis<APOS/>s paraphrase of)</INDEX>
	<INDEX>value<SUBINDEX><ORDER>expression</ORDER>of an expression</SUBINDEX></INDEX>
	<INDEX>Lisp<SUBINDEX>efficiency of</SUBINDEX></INDEX>
	expression has a value. This convention, together with the old
	reputation of Lisp as an inefficient language, is the source of the
	quip by Alan Perlis (paraphrasing Oscar Wilde)
	that <QUOTE>Lisp programmers know the value of
	everything but the cost of nothing.</QUOTE></FOOTNOTE>
      </SCHEME>
      <PYTHON>
	statement.<FOOTNOTE>Expression statements in Python produce values in
	Python's read-evaluate-print loop, while
	other types of statements (which will be covered in later chapters) do not.
  </FOOTNOTE>
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
</SUBSECTION>
