    <SUBSECTION>
      <NAME>
        Generic Arithmetic Operations
      </NAME>

      <LABEL NAME="sec:generic-arithmetic-operators"/>
      <INDEX>generic arithmetic operations|(</INDEX>
      <TEXT>
      The task of designing generic arithmetic operations is analogous to
      that of designing the generic complex-number operations.  We would
      like, for instance, to have a generic addition
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>add</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that
      acts like ordinary primitive addition <SPLITINLINE><SCHEME><SCHEMEINLINE>+</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>+</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> on ordinary numbers,
      like <SPLITINLINE><SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> on rational numbers, and like <SPLITINLINE><SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> on
      complex numbers.  We can implement <SPLITINLINE><SCHEME><SCHEMEINLINE>add</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and the other generic
      arithmetic operations, by following the same strategy we used in
      section<SPACE/><REF NAME="sec:data-directed"/> to implement the generic selectors for
      complex numbers.  We will attach a type tag to each kind of
      number and cause the generic
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      to dispatch to an appropriate
      package according to the data type of its arguments.
      </TEXT>
      <TEXT>
      The generic arithmetic
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      are defined as follows:

      <SNIPPET EVAL="no">
        <NAME>ops</NAME>
        <REQUIRES>apply_generic</REQUIRES>
        <SCHEME>
          <!--\indcodeplus*{add}{(generic)}-->
(define (add x y) (apply-generic 'add x y))
          <!--\indcodeplus*{sub}{(generic)}-->
(define (sub x y) (apply-generic 'sub x y))
          <!--\indcodeplus*{mul}{(generic)}-->
(define (mul x y) (apply-generic 'mul x y))
          <!--\indcodeplus*{div}{(generic)}-->
(define (div x y) (apply-generic 'div x y))
        </SCHEME>
        <JAVASCRIPT>
function add(x, y) {
   return apply_generic("add", list(x, y));
}
function sub(x, y) {
   return apply_generic("sub", list(x, y));
}
function mul(x, y) {
   return apply_generic("mul", list(x, y));
}
function div(x, y) {
   return apply_generic("div", list(x, y));
}
        </JAVASCRIPT>
      </SNIPPET>

      <INDEX>number(s)<SUBINDEX>generic@in generic arithmetic system</SUBINDEX></INDEX>
      <INDEX>ordinary numbers (in generic arithmetic system)</INDEX>
      We begin by installing a package for handling <EM>ordinary</EM> numbers,
      that is, the primitive numbers of our language.  We will tag these
      with the symbol <SPLITINLINE><SCHEME><SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>javascript_number</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  The arithmetic operations in this
      package are the primitive arithmetic
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      (so there is no need to
      define extra
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      to handle the untagged numbers).  Since
      these operations each take two arguments, they are installed in the
      table keyed by the list <SPLITINLINE><SCHEME><SCHEMEINLINE>(scheme-number scheme-number)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list("javascript_number","javascript_number")</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:
      <INDEX>package<SUBINDEX>Scheme-number</SUBINDEX></INDEX>
      <!--\indcodeplus{scheme-number}{package}-->

      <SNIPPET CHAP="3">
        <NAME>install_javascript_number_package</NAME>
	<REQUIRES>operation_table_from_chapter_3</REQUIRES>
	<REQUIRES>operation_table</REQUIRES>
        <REQUIRES>attach_tag</REQUIRES>
        <SCHEME>
          <!-- \indcode*{install-scheme-number-package} -->
(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))    
  (put 'add '(scheme-number scheme-number)
    (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
    (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
    (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
    (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
    (lambda (x) (tag x)))
  'done)
        </SCHEME>
        <JAVASCRIPT>
function install_javascript_number_package() {
    function tag(x) {
        return attach_tag("javascript_number", x);
    }
    put("add", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x + y));
    put("sub", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x - y));
    put("mul", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x * y));
    put("div", list("javascript_number", "javascript_number"), 
        (x, y) => tag(x / y));
    put("make", "javascript_number", 
        x => tag(x));
    return "done";
}
        </JAVASCRIPT>
      </SNIPPET>

      Users of the <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>-number package
      will create (tagged) ordinary numbers by means of the
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:

      <SNIPPET>
        <REQUIRES>install_javascript_number_package</REQUIRES>
        <SCHEME>
          <!-- \indcode*{make-scheme-number} -->
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
        </SCHEME>
        <JAVASCRIPT>
function make_javascript_number(n) {
    return get("make", "javascript_number")(n);
}
      </JAVASCRIPT>
      </SNIPPET>
      </TEXT>
      <TEXT>
      Now that the framework of the generic arithmetic system is in place,
      we can readily include new kinds of numbers.  Here is a package that
      performs rational arithmetic.  Notice that, as a benefit of
      additivity, we can use without modification the rational-number code
      from section<SPACE/><REF NAME="sec:rationals"/> as the internal
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      in the
      package:
      <INDEX>package<SUBINDEX>rational-number</SUBINDEX></INDEX>
      <!--\indcodeplus{rational}{package}-->
      <INDEX>rational-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>

      <SNIPPET CHAP="3">
	<REQUIRES>operation_table_from_chapter_3</REQUIRES>
	<REQUIRES>operation_table</REQUIRES>
        <REQUIRES>attach_tag</REQUIRES>
        <SCHEME>
          <!-- \indcode*{install-rational-package} -->
(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))

  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
    (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
    (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
    (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
    (lambda (x y) (tag (div-rat x y))))

  (put 'make 'rational
    (lambda (n d) (tag (make-rat n d))))
  'done)

          <!-- \indcode*{make-rational} -->
(define (make-rational n d)
  ((get 'make 'rational) n d))
        </SCHEME>
<JAVASCRIPT>
function install_rational_package() {
    // internal functions
    function numer(x) { 
        return head(x); 
    }
    function denom(x) {
        return tail(x);
    }
    function make_rat(n, d) { 
        let g = gcd(n, d);
        return pair(n / g, d / g); 
    }
    function add_rat(x, y) {
        return make_rat(numer(x) * denom(y) +
                        numer(y) * denom(x),             
                        denom(x) * denom(y));
    }
    function sub_rat(x, y) {
        return make_rat(numer(x) * denom(y) -
                        numer(y) * denom(x),             
                        denom(x) * denom(y));
    }
    function mul_rat(x, y) {
        return make_rat(numer(x) * numer(y),
                        denom(x) * denom(y));
    }
    function div_rat(x, y) {
        return make_rat(numer(x) * denom(y),
                        denom(x) * numer(y));
    }
    // interface to rest of the system
    function tag(x) {
        return attach_tag("rational", x);
    }
    put("make", "rational", make_rational);
    put("add", list("rational", "rational"), add_rational);
    put("sub", list("rational", "rational"), sub_rational);
    put("mul", list("rational", "rational"), mul_rational);
    put("div", list("rational", "rational"), div_rational);
}

function make_rational(n, d) {
    return (get("make", "rational"))(n, d);
}
</JAVASCRIPT>
      </SNIPPET>
      </TEXT>
      <TEXT>
      We can install a similar package to handle complex numbers, using the
      tag <SPLITINLINE><SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  In<SPACE/>creating the package, we extract from the table
      the operations <SPLITINLINE><SCHEME><SCHEMEINLINE>make-from-real-imag</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_from_real_imag</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>make-from-mag-ang</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_from_mag_ang</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      that were defined by the rectangular and polar packages.  
      <INDEX>additivity</INDEX>
      Additivity
      permits us to use, as the internal operations, the same <SPLITINLINE><SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and <SPLITINLINE><SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      from
      section<SPACE/><REF NAME="sec:representations-complex-numbers"/>.
      <INDEX>package<SUBINDEX>complex-number</SUBINDEX></INDEX>
      <!--\indcodeplus{complex}{package}-->
      <INDEX>complex-number arithmetic<SUBINDEX>interfaced to generic arithmetic system</SUBINDEX></INDEX>

      <SNIPPET CHAP="3">
        <NAME>install_complex_package</NAME>
	<REQUIRES>operation_table_from_chapter_3</REQUIRES>
	<REQUIRES>operation_table</REQUIRES>
        <REQUIRES>attach_tag</REQUIRES>
        <SCHEME>
          <!-- \indcode*{install-complex-package} -->
(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))

  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
    (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
    (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
    (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
    (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
    (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
    (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
        </SCHEME>
        <JAVASCRIPT>
function install_complex_package() {
    // imported functions from rectangular and polar packages	  
    function make_from_real_imag(x, y) {
        return get("make_from_real_imag", "rectangular")(x, y);
    }
    function make_from_mag_ang(r, a) {
        return get("make_from_mag_ang", "polar")(r, a);
    }

    // internal functions
    function add_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) + 
                                   real_part(z2),
                                   imag_part(z1) + 
                                   imag_part(z2));
    }
    function sub_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) - 
                                   real_part(z2),
                                   imag_part(z1) - 
                                   imag_part(z2));
    }
    function mul_complex(z1, z2) {
        return make_from_mag_ang(magnitude(x) * 
                                 magnitude(z2),
                                 angle(z1) + 
                                 angle(z2));
	}
    function div_complex(z1, z2) {
        return make_from_mag_ang(magnitude(x) / 
                                 magnitude(z2),
                                 angle(z1) - 
                                 angle(z2));
	}

    // interface to rest of the system
    function tag(z) {
        return attach_tag("complex", z);
    }
    put("add", list("complex", "complex"), 
        (z1, z2) => tag(add_complex(z1, z2)));
    put("sub", list("complex", "complex"), 
        (z1, z2) => tag(sub_complex(z1, z2)));
    put("mul", list("complex", "complex"), 
        (z1, z2) => tag(mul_complex(z1, z2)));
    put("div", list("complex", "complex"), 
        (z1, z2) => tag(div_complex(z1, z2)));
    put("make_from_real_imag", "complex", 
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "complex", 
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";    
}
        </JAVASCRIPT>
      </SNIPPET>
      </TEXT>
      <TEXT>
      Programs outside the complex-number package can construct complex
      numbers either from real and imaginary parts or from magnitudes and
      angles.  Notice how the underlying
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, originally defined in
      the rectangular and polar packages, are exported to the complex
      package, and exported from there to the outside world.

      <SNIPPET>
        <REQUIRES>install_complex_package</REQUIRES>
        <SCHEME>
          <!-- \indcode*{make-complex-from-real-imag} -->
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))

          <!-- \indcode*{make-complex-from-mag-ang} -->
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
        </SCHEME>
        <JAVASCRIPT>
function make_complex_from_real_imag(x, y){
   return get("make_from_real_imag", "complex")(x, y);
}
function make_complex_from_mag_ang(r, a){
   return get("make_from_mag_ang", "complex")(r, a);
}
      </JAVASCRIPT>
      </SNIPPET>

      <INDEX>type tag<SUBINDEX>two-level</SUBINDEX></INDEX>
      What we have here is a two-level tag system.  A typical complex number,
      such as <LATEXINLINE>$3+4i$</LATEXINLINE> in rectangular form, would be
      represented as shown in Figure<SPACE/><REF NAME="fig:complex-number-structure"/>.
      The outer tag (<SPLITINLINE><SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>) is used to direct the number to the
      complex package.  Once within the complex package, the next tag (<SPLITINLINE><SCHEME><SCHEMEINLINE>rectangular</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>) is used to direct the number to the rectangular package.
      In a large and complicated system there might be many levels, each
      interfaced with the next by means of generic operations.  As a data
      object is passed <QUOTE>downward,</QUOTE> the outer tag that is used to direct
      it to the appropriate package is stripped off (by applying <SPLITINLINE><SCHEME><SCHEMEINLINE>contents</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>contents</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>) and the next level of tag (if any) becomes visible to be used for
      further dispatching.

      <SPLIT>
        <SCHEME>
          <FIGURE>
            <FIGURE src="img_original/ch2-Z-G-65.svg"></FIGURE>
            <CAPTION>Representation of <LATEXINLINE>$3+4i$</LATEXINLINE> in rectangular form.</CAPTION>
            <LABEL NAME="fig:complex-number-structure"/>
          </FIGURE>
        </SCHEME>
        <JAVASCRIPT>
          <FIGURE>
            <FIGURE src="img_javascript/ch2-Z-G-65.svg"></FIGURE>
            <CAPTION>Representation of <LATEXINLINE>$3+4i$</LATEXINLINE> in rectangular form.</CAPTION>
            <LABEL NAME="fig:complex-number-structure"/>
          </FIGURE>
        </JAVASCRIPT>
      </SPLIT>
      </TEXT>
      <TEXT>
        In the above packages, we used <SPLITINLINE><SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>add-complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and
      the other arithmetic
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      exactly as originally written.
      Once these definitions are internal to different installation
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>,
      however, they no longer need names that are distinct from each other:
      we could simply name them <SPLITINLINE><SCHEME><SCHEMEINLINE>add</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>add</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>sub</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>sub</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>mul</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>mul</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and <SPLITINLINE><SCHEME><SCHEMEINLINE>div</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>div</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      in both packages.
      </TEXT>

      <EXERCISE> 
        Louis Reasoner tries to evaluate the
        expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> where <SPLITINLINE><SCHEME><SCHEMEINLINE>z</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>z</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the object
        shown in Figure<SPACE/><REF NAME="fig:complex-number-structure"/>.  To his
        surprise, instead of the answer <LATEXINLINE>$5$</LATEXINLINE>
        he gets an error message from <SPLITINLINE><SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
        saying there is no method for the operation <SPLITINLINE><SCHEME><SCHEMEINLINE>magnitude</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>magnitude</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        on the types <SPLITINLINE><SCHEME><SCHEMEINLINE>(complex)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>["complex",null]</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
        He shows this interaction to Alyssa P. Hacker, who says
        <QUOTE>The problem is that the complex-number selectors were never
          defined for <SPLITINLINE><SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> numbers, just for <SPLITINLINE><SCHEME><SCHEMEINLINE>polar</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"polar"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>rectangular</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>"rectangular"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
          numbers.  All you have to do to make this work is add the following
          to the <SCHEMEINLINE>complex</SCHEMEINLINE> package:</QUOTE>

        <SNIPPET EVAL="no">
          <SCHEME>
(put 'real-part '(complex) real-part)
(put 'imag-part '(complex) imag-part)
(put 'magnitude '(complex) magnitude)
(put 'angle '(complex) angle)
          </SCHEME>
          <JAVASCRIPT>
put("real_part", list("complex"), real_part);
put("imag_part", list("complex"), imag_part);
put("magnitude", list("complex"), magnitude);
put("angle",     list("complex"), angle);
        </JAVASCRIPT>
        </SNIPPET>

        Describe in detail why this works.  As an example, trace through all
        the
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        called in evaluating the expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(magnitude z)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>magnitude(z)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        where <SPLITINLINE><SCHEME><SCHEMEINLINE>z</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>z</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the object shown in
        Figure<SPACE/><REF NAME="fig:complex-number-structure"/>.  In particular, how many
        times is <SPLITINLINE><SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> invoked?  What
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        is dispatched to
        in each case?
      </EXERCISE>

      <EXERCISE> 
        <INDEX>Lisp<SUBINDEX>internal type system</SUBINDEX></INDEX>
        <INDEX>data types<SUBINDEX>in Lisp</SUBINDEX></INDEX>
        <!--\indprim{number?}[data types and]-->
        <!--\indprim{symbol?}[data types and]-->
        <!-- \indcode{attach-tag}[using Scheme data types] -->
        <!-- \indcode{type-tag}[using Scheme data types] -->
        <!-- \indcode{contents}[using Scheme data types] -->
        The internal
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        in the <SPLITINLINE><SCHEME><SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>javascript_number</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> package are essentially
        nothing more than calls to the primitive
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>+</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>+</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>-</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>-</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
        etc.  It was not possible to use the primitives of the language
        directly because our type-tag system requires that each data
        object have a type attached to it.  In fact, however, all <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
        implementations do have a type system, which they use internally.
        Primitive predicates such as <SPLITINLINE><SCHEME><SCHEMEINLINE>symbol?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_string</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>number?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_number</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        determine whether data objects have particular types.  Modify the
        definitions of <SPLITINLINE><SCHEME><SCHEMEINLINE>type-tag</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>type_tag</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>contents</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>contents</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and <SPLITINLINE><SCHEME><SCHEMEINLINE>attach-tag</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>attach_tag</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        from section<SPACE/><REF NAME="sec:manifest-types"/> so that our generic system takes
        advantage of <SPLITINLINE><SCHEME>Scheme<APOS/>s</SCHEME><JAVASCRIPT>JavaScript<APOS/>s</JAVASCRIPT></SPLITINLINE> internal type system.  That is to say, the system
        should work as before except that ordinary numbers should be
        represented simply as <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> numbers rather than as pairs whose <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is
        the <SPLITINLINE><SCHEME>symbol <SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME><JAVASCRIPT>string <JAVASCRIPTINLINE>"javascript_number"</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
        <LABEL NAME="ex:internal-type-system"/>
        <SOLUTION>
          The following modifications will take advantage of the JavaScript number implementation:
          <SNIPPET>
            <JAVASCRIPT>
function attach_tag(type_tag, contents) {
  return is_number(contents) 
    ? pair("javascript_number", contents)
    : pair(type_tag, contents);
}
function type_tag(datum) {
  return is_number(datum)
    ? "javascript_number"
    : is_pair(datum)
      ? head(datum)
      : error(datum, "bad tagged datum in type_tag");
}
function contents(datum) {
  return is_number(datum)
    ? datum
    : is_pair(datum)
      ? tail(datum)
      : error(datum, "bad tagged datum in contents");
}
            </JAVASCRIPT>
            <SCHEME>
(define (attach-tag type-tag contents) 
  (if (number? contents) 
      contents 
      (cons type-tag contents))) 

(define (type-tag datum) 
(cond ((number? datum) 'scheme-number) 
    ((pair? datum) (car datum)) 
    (else (error "Wrong datum -- TYPE-TAG" datum)))) 

(define (contents datum) 
(cond ((number? datum) datum) 
    ((pair? datum) (cdr datum)) 
    (else (error "Wrong datum -- CONTENTS" datum)))) 
            </SCHEME>
          </SNIPPET>
        </SOLUTION>
      </EXERCISE>


      <EXERCISE> 
        <!--\indcodeplus{equ?}{(generic predicate)}-->
        <INDEX>equality<SUBINDEX>generic@in generic arithmetic system</SUBINDEX></INDEX>
        Define a generic equality predicate <SPLITINLINE><SCHEME><SCHEMEINLINE>equ?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_equ</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that tests the equality
        of two numbers, and install it in the generic arithmetic
        package.  This operation should work for ordinary numbers, rational numbers, and
        complex numbers.
        <LABEL NAME="ex:equ?"/>
      </EXERCISE>


      <EXERCISE>
        <!--\indcodeplus{=zero?}{(generic)}-->
        <INDEX>zero test (generic)</INDEX>
        Define a generic
        predicate <SPLITINLINE><SCHEME><SCHEMEINLINE>=zero?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>equal_to_zero</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that tests if its argument is zero,
        and install it in the generic arithmetic package.  This
        operation should work for ordinary numbers, rational numbers, and
        complex numbers.
        <LABEL NAME="ex:=zero?"/>
      </EXERCISE>

      <INDEX>generic arithmetic operations|)</INDEX>

    </SUBSECTION>
