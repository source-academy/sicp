<SUBSECTION>
  <NAME>
    An Interpreter with Lazy Evaluation
  </NAME>

  <SNIPPET PAGE="365" HIDE="yes" EVAL="no">
    <NAME>headline_4_1_1_lazy</NAME>
    <PYTHON>
// functions from SICP JS 4.1.1
// with modifications for lazy evaluation
// according to SICP JS 4.2.2
    </PYTHON>
  </SNIPPET>
  
  <SNIPPET PAGE="383" HIDE="yes">
    <NAME>functions_4_1_1_lazy</NAME>
    <REQUIRES>headline_4_1_1_lazy</REQUIRES>
    <REQUIRES>eval_lazy</REQUIRES>
    <REQUIRES>actual_value_lazy</REQUIRES>
    <REQUIRES>apply_lazy</REQUIRES>
    <REQUIRES>eval_if_lazy</REQUIRES>
    <REQUIRES>eval_sequence</REQUIRES>
    <REQUIRES>eval_block</REQUIRES>
    <REQUIRES>eval_return</REQUIRES>
    <REQUIRES>eval_assignment</REQUIRES>
    <REQUIRES>eval_definition</REQUIRES>
    <REQUIRES>force_it_lazy</REQUIRES>
    <REQUIRES>delay_it_lazy</REQUIRES>
    <PYTHON>
    </PYTHON>
  </SNIPPET>

  <LONG_PAGE lines="1"/>
  <TEXT>
    In this section we will implement a normal-order language that is
    the same as
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    except that compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are non-strict in each argument.  Primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    will still be strict. It is not difficult to modify the evaluator of
    section<SPACE/><REF NAME="sec:core-of-evaluator"/> so that the language it
    interprets behaves this way.  Almost all the required changes center around
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    application.
  </TEXT>

  <TEXT>
    The basic idea is that, when applying a
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <PYTHON>function,</PYTHON>
    </SPLITINLINE>
    the interpreter must determine which arguments are to be evaluated and which
    are to be delayed.  The delayed arguments are not evaluated; instead, they
    are transformed into objects called 
    <INDEX>thunk<OPEN/></INDEX>
    <EM>thunk</EM>s.<FOOTNOTE>The word <EM>thunk</EM> was invented by an informal
      <INDEX>thunk<SUBINDEX>origin of name</SUBINDEX></INDEX>
      working group that was discussing the implementation of call-by-name
      <INDEX>Algol<SUBINDEX>thunks</SUBINDEX></INDEX>
      in Algol 60.  They observed that most of the analysis of (<QUOTE>thinking
      about</QUOTE>) the expression could be done at compile time; thus, at run
      time, the expression would already have been <QUOTE>thunk</QUOTE> about 
      <INDEX>Ingerman, Peter</INDEX>
      (<CITATION>Ingerman et al.<SPACE/>1960</CITATION>).</FOOTNOTE>
    The thunk must contain the information required to produce the value
    of the argument when it is needed, as if it had been evaluated at
    the time of the application.  Thus, the thunk must contain the
    argument expression and the environment in
    which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    application is being evaluated.
  </TEXT>

  <TEXT>
    The process of evaluating the expression in a thunk is called 
    <INDEX>forcing<SUBINDEX><ORDER>thunk</ORDER>of thunk</SUBINDEX></INDEX>
    <INDEX>thunk<SUBINDEX>forcing</SUBINDEX></INDEX>
    <EM>forcing</EM>.<FOOTNOTE>This is analogous to the
    <SPLITINLINE>
      <SCHEME>
	use of
	<INDEX><USE>force</USE><SUBINDEX>forcing a thunk vs.</SUBINDEX></INDEX>
	<SCHEMEINLINE>force</SCHEMEINLINE>
	on 
      </SCHEME>
      <PYTHON>
	forcing of 
      </PYTHON>
    </SPLITINLINE>
    the delayed objects that were introduced in chapter<SPACE/><REF NAME="chap:state"></REF> to
    represent streams.  The critical difference between what we are
    doing here and what we did in chapter<SPACE/><REF NAME="chap:state"></REF> is that we are building
    delaying and forcing into the evaluator, and thus making this uniform
    and automatic throughout the language.</FOOTNOTE>
    In general, a thunk will be forced only when its value is needed:
    when it is passed to a primitive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    that will use the value of the thunk; when it is the value of a predicate of
    a conditional; and when it is the value of
    <SPLITINLINE>
      <SCHEME>an operator</SCHEME>
      <PYTHON>a function expression</PYTHON>
    </SPLITINLINE>
    that is about to be
    applied as a
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>function.</PYTHON>
      </SPLITINLINE>
    One design choice we have available is whether or not to 
    <INDEX>memoization<SUBINDEX><ORDER>thunk</ORDER>of thunks</SUBINDEX></INDEX>
    <EM>memoize</EM> thunks, similar to the optimization for streams in
    section<SPACE/><REF NAME="sec:delayed-lists"/>.  With memoization, the first
    time a thunk is forced, it stores the value that is computed.  Subsequent
    forcings simply return the stored value without repeating the computation.
    We<APOS/>ll make our interpreter memoize, because this is more efficient for
    many applications.  There are tricky considerations here,
    however.<FOOTNOTE>Lazy evaluation combined with memoization is sometimes
    referred to as
    <INDEX>call-by-need argument passing</INDEX>
    <EM>call-by-need</EM> argument passing, in contrast to
    <EM>call-by-name</EM> argument passing.  
    <INDEX>call-by-name argument passing</INDEX>
    (Call-by-name, introduced in
    <INDEX>Algol<SUBINDEX>call-by-name argument passing</SUBINDEX></INDEX>
    Algol 60, is similar to non-memoized lazy
    evaluation.) As language designers, we can build our evaluator to memoize,
    not to memoize, or leave this an option for programmers
    (exercise<SPACE/><REF NAME="ex:user-controlled-strictness"/>).  As you might
    expect from chapter<SPACE/><REF NAME="chap:state"></REF>, these choices raise issues that become both
    subtle and confusing in the presence of assignments.  (See
    exercises<SPACE/><REF NAME="ex:delay-side-effects"/>
    and<SPACE/><REF NAME="ex:memoize-or-not"/>.)
    An excellent article by
    <INDEX>Clinger, William</INDEX>
    Clinger (1982) attempts to clarify the
    multiple dimensions of confusion that arise here.</FOOTNOTE>

    <INDEX>thunk<CLOSE/></INDEX>
  </TEXT>

  <SUBHEADING>
    <NAME>Modifying the evaluator</NAME>
  </SUBHEADING>

  <LONG_PAGE lines="1"/>
  <TEXT>
    The main difference between the lazy evaluator and the one in
    section<SPACE/><REF NAME="sec:mc-eval"/> is in the handling of
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <PYTHON>function</PYTHON></SPLITINLINE>
    applications in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>evaluate</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SCHEMEINLINE>apply</SCHEMEINLINE>.
  </TEXT>

  <TEXT>
    <INDEX><USE>evaluate</USE> (lazy)</INDEX>
    <SPLITINLINE>
      <SCHEME>
	The <SCHEMEINLINE>application?</SCHEMEINLINE> clause of
	<INDEX><USE>evaluate</USE> (lazy)</INDEX>
	<SCHEMEINLINE>eval</SCHEMEINLINE> becomes
      </SCHEME>
      <PYTHON>
	The <PYTHONINLINE>is_application</PYTHONINLINE>
	clause of
	<INDEX><USE>evaluate</USE> (lazy)</INDEX>
	<SCHEMEINLINE>evaluate</SCHEMEINLINE> becomes
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET PAGE="365" HIDE="yes">
      <NAME>eval_lazy_example</NAME>
      <REQUIRES>functions_4_1_1_lazy</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <SCHEME>
(define the-global-environment (setup-environment))
(eval (read) the-global-environment)
      </SCHEME>
      <PYTHON>
const my_program = parse("1; { true; 3; }");
evaluate(my_program, the_empty_environment);
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <NAME>eval_lazy</NAME>
      <EXAMPLE>eval_lazy_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
((application? exp)
(apply (actual-value (operator exp) env)
       (operands exp)
       env))
      </SCHEME>
      <PYTHON>
: is_application(component)      
? apply(actual_value(function_expression(component), env),
        arg_expressions(component), env)
      </PYTHON>
      <PYTHON_RUN>
function evaluate(component, env) {
   return is_literal(component)
          ? literal_value(component)
          : is_name(component)
          ? lookup_symbol_value(symbol_of_name(component), env)
          : is_application(component)
          ? apply(actual_value(function_expression(component), env),
                  arg_expressions(component), env)
          : is_operator_combination(component)
          ? evaluate(operator_combination_to_application(component), env)
          : is_conditional(component)
          ? eval_conditional(component, env)
          : is_lambda_expression(component)
          ? make_function(lambda_parameter_symbols(component),
                          lambda_body(component), env)
          : is_sequence(component)
          ? eval_sequence(sequence_statements(component), env)
          : is_block(component)
          ? eval_block(component, env)
          : is_return_statement(component)
          ? eval_return_statement(component, env)
          : is_function_declaration(component)
          ? evaluate(function_decl_to_constant_decl(component), env)
          : is_declaration(component)
          ? eval_declaration(component, env)
          : is_assignment(component)
          ? eval_assignment(component, env)
          : error(component, "unknown syntax -- evaluate");
}
      </PYTHON_RUN>
    </SNIPPET>
    This is almost the same as the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>application?</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>is_application</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    clause of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    in section<SPACE/><REF NAME="sec:core-of-evaluator"/>.  For lazy evaluation,
    however, we call <SCHEMEINLINE>apply</SCHEMEINLINE> with the
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <PYTHON>argument</PYTHON>
    </SPLITINLINE>
    expressions, rather than the arguments produced by evaluating them. Since
    we will need the environment to construct thunks if the arguments are to be
    delayed, we must pass this as well. <SHRINK_PARAGRAPH lines="1"/> We still evaluate the
    <SPLITINLINE>
      <SCHEME>operator,</SCHEME>
      <PYTHON>function expression,</PYTHON>
    </SPLITINLINE>
    because
    <SCHEMEINLINE>apply</SCHEMEINLINE> needs the actual
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    to be applied in order to dispatch on its type (primitive versus compound)
    and apply it.
  </TEXT>

  <TEXT>
    Whenever we need the actual value of an expression, we use
    <SNIPPET HIDE="yes">
      <NAME>actual_value_lazy_example</NAME>
      <REQUIRES>functions_4_1_1_lazy</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <PYTHON>
actual_value(parse("1 + 2;"), the_global_environment);	
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>actual_value</DECLARATION></INDEX> 
      <NAME>actual_value_lazy</NAME>
      <EXAMPLE>actual_value_lazy_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>
      <SCHEME>
(define (actual-value exp env)
  (force-it (eval exp env)))
      </SCHEME>
      <PYTHON>
function actual_value(exp, env) {
  return force_it(evaluate(exp, env));
}
      </PYTHON>
    </SNIPPET>
    instead of just
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    so that if the expression<APOS/>s value is a thunk, it will be forced.
  </TEXT>

  <TEXT>
    Our new version of <SCHEMEINLINE>apply</SCHEMEINLINE> is also almost the
    same as the version in section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
    The difference is that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    has passed in unevaluated
    <SPLITINLINE>
      <SCHEME>
	operand
      </SCHEME>
      <PYTHON>
	argument
      </PYTHON>
    </SPLITINLINE>
    expressions: For primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    (which are strict), we evaluate all the arguments before applying the
    primitive; for compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    (which are non-strict) we delay all the
    arguments before applying the
    <SPLITINLINE><SCHEME>procedure.</SCHEME>
    <PYTHON>function.</PYTHON></SPLITINLINE>
    <SNIPPET PAGE="366" HIDE="yes">
      <NAME>apply_lazy_example</NAME>
      <REQUIRES>functions_4_1_1_lazy</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <PYTHON>
const plus = list("primitive", (x, y) => x + y);
apply(plus, list(list("literal", 1), list("literal", 2)), the_global_environment);
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>apply</DECLARATION> (lazy)</INDEX>
      <NAME>apply_lazy</NAME>
      <REQUIRES>list_of_arg_values</REQUIRES>
      <EXAMPLE>apply_lazy_example</EXAMPLE>
      <EXPECTED>3</EXPECTED>      
      <SCHEME>
(define (apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure
          procedure
          (list-of-arg-values arguments env)))  <EM>; changed</EM>
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           (list-of-delayed-args arguments env) <EM>; changed</EM>
           (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type - - APPLY" procedure))))
      </SCHEME>
      <PYTHON>
function apply(fun, args, env) {
  if (is_primitive_function(fun)) {
      return apply_primitive_function(
                 fun, 
                 list_of_arg_values(args, env));              // changed
  } else if (is_compound_function(fun)) {
      const result = evaluate(
                         function_body(fun),
                         extend_environment(
                             function_parameters(fun),
                             list_of_delayed_args(args, env), // changed
                         function_environment(fun)));
      return is_return_value(result)
             ? return_value_content(result)
             : undefined;
  } else {
      error(fun, "unknown function type -- apply");
  }
}
      </PYTHON>
    </SNIPPET>
    The
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <PYTHON>functions</PYTHON></SPLITINLINE>
    that process the arguments are just like
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>list-of-values</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>list_of_values</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    from section<SPACE/><REF NAME="sec:core-of-evaluator"/>,
    except that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>list-of-delayed-args</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>list_of_delayed_args</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    delays the arguments instead of evaluating them, and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>list-of-arg-values</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>list_of_arg_values</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    uses
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>actual_value</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    instead of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>:
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>:
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>list_of_arg_values</DECLARATION></INDEX> 
      <INDEX><DECLARATION>list_of_delayed_args</DECLARATION></INDEX> 
      <NAME>list_of_arg_values</NAME>
      <SCHEME>
(define (list-of-arg-values exps env)
  (if (no-operands? exps)
      '()
      (cons (actual-value (first-operand exps) env)
            (list-of-arg-values (rest-operands exps)
                                env))))

(define (list-of-delayed-args exps env)
  (if (no-operands? exps)
      '()
      (cons (delay-it (first-operand exps) env)
            (list-of-delayed-args (rest-operands exps)
                                  env))))
      </SCHEME>
      <PYTHON>
function list_of_arg_values(exps, env) {	
  return map(exp => actual_value(exp, env), exps);
}
function list_of_delayed_args(exps, env) {	
  return map(exp => delay_it(exp, env), exps);
}
      </PYTHON>
    </SNIPPET>
  </TEXT>
  
  <TEXT>
    The other place we must change the evaluator is in the handling of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	conditionals,
      </PYTHON>
    </SPLITINLINE>
    where we must use
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>actual_value</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    instead of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>evaluate</SCHEMEINLINE>
      </PYTHON>
    </SPLITINLINE>
    to get the value of the predicate
    expression before testing whether it is true or false:
    <SNIPPET PAGE="367" HIDE="yes">
      <NAME>eval_if_lazy_example</NAME>
      <REQUIRES>functions_4_1_1_lazy</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <PYTHON>
const my_cond_expr = parse("true ? 1 : 2;");
eval_conditional(my_cond_expr, the_empty_environment);
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>eval_conditional</DECLARATION> (lazy)</INDEX>
      <NAME>eval_if_lazy</NAME>
      <EXAMPLE>eval_if_lazy_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (eval-if exp env)
  (if (true? (actual-value (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
      </SCHEME>
      <PYTHON>
function eval_conditional(component, env) {	
  return is_truthy(actual_value(conditional_predicate(component), env))
         ? evaluate(conditional_consequent(component), env)
         : evaluate(conditional_alternative(component), env);
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Finally, we must change the
    <INDEX>driver loop<SUBINDEX><ORDER>lazy</ORDER>in lazy evaluator</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>driver-loop</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>driver_loop</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <PYTHON>function</PYTHON>
    </SPLITINLINE>
    (from section<SPACE/><REF NAME="sec:running-eval"/>) to use
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>actual_@value</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    instead of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>evaluate</SCHEMEINLINE>,
      </PYTHON>
    </SPLITINLINE>
    so that if a delayed value is propagated back to the
    <SPLITINLINE>
      <SCHEME>
	read-eval-print loop,
      </SCHEME>
      <PYTHON>
	read-evaluate-print loop,
      </PYTHON>
    </SPLITINLINE>
    it will be forced before being printed.
    We also change the prompts to indicate that
    this is the lazy evaluator:
    <SNIPPET>
      <INDEX>prompts<SUBINDEX>lazy evaluator</SUBINDEX></INDEX>
      <INDEX><DECLARATION>driver_loop</DECLARATION><SUBINDEX>for lazy evaluator</SUBINDEX></INDEX>
      <NAME>driver_loop_lazy</NAME>
      <REQUIRES>functions_4_1_1_lazy</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <REQUIRES>user_print</REQUIRES>
      <REQUIRES>user_read</REQUIRES>
      <EXAMPLE>driver_loop_lazy_example</EXAMPLE>
      <SCHEME>
(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value:")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output
           (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
      </SCHEME>
      <PYTHON>
const input_prompt = "L-evaluate input: ";
const output_prompt = "L-evaluate value: ";

function driver_loop(env) {
  const input = user_read(input_prompt);
  if (is_null(input)) {
      display("evaluator terminated");
  } else {
      const program = parse(input);
      const locals = scan_out_declarations(program);
      const unassigneds = list_of_unassigned(locals);
      const program_env = extend_environment(locals, unassigneds, env);
      const output = actual_value(program, program_env);
      user_print(output_prompt, output);
      return driver_loop(program_env);
  }
}
      </PYTHON>
      <PYTHON_RUN>
const input_prompt = "L-evaluate input: ";
const output_prompt = "L-evaluate value: ";

function driver_loop(env) {
    const input = user_read(input_prompt);
    if (is_null(input)) {
        display("--- evaluator terminated ---", "");
    } else {
        display("----------------------------",
                input_prompt + "\n" + input + "\n");
        const program = parse(input);
        const locals = scan_out_declarations(program);
        const unassigneds = list_of_unassigned(locals);
        const program_env = extend_environment(locals, unassigneds, env);
        const output = actual_value(program, program_env);
        user_print(output_prompt, output);
        return driver_loop(program_env);
    }
}
      </PYTHON_RUN>
    </SNIPPET>
  </TEXT>

  <TEXT>
    With these changes made, we can start the evaluator and test it.  The
    successful evaluation of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>try</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>try_me</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    expression
    discussed in section<SPACE/><REF NAME="sec:evaluation-order"/> indicates
    that the interpreter is performing lazy evaluation:
    <SNIPPET>
      <NAME>driver_loop_lazy_example</NAME>
      <REQUIRES>driver_loop_lazy</REQUIRES>
      <SCHEME>
(define the-global-environment (setup-environment))

(driver-loop)
      </SCHEME>
      <PYTHON>
const the_global_environment = setup_environment();
driver_loop(the_global_environment);
      </PYTHON>
      <PYTHON_RUN>
driver_loop(the_global_environment);

// L-evaluate input:
// function try_me(a, b) { return a === 0 ? 1 : b; }
// L-evaluate value:
// undefined

// L-evaluate input:
// try_me(0, head(null));
// L-evaluate value:
// 1
      </PYTHON_RUN>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; L-Eval input:
(define (try a b)
(if (= a 0) 1 b))
;;; L-Eval value:
ok
      </SCHEMEOUTPUT>
      <PYTHON_PROMPT>
L-evaluate input:
      </PYTHON_PROMPT>
      <PYTHON>
function try_me(a, b) {
  return a === 0 ? 1 : b;
}
      </PYTHON>
      <PYTHON_OUTPUT>
L-evaluate value:
undefined
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no" POSTPADDING="no">
      <SCHEMEOUTPUT>
;;; L-Eval input:
(try 0 (/ 1 0))
;;; L-Eval value:
1
      </SCHEMEOUTPUT>
      <PYTHON_PROMPT>
L-evaluate input:
      </PYTHON_PROMPT>
      <PYTHON>
      try_me(0, head(null));
      </PYTHON>
      <PYTHON_OUTPUT>
L-evaluate value:
1
      </PYTHON_OUTPUT>
    </SNIPPET>
  </TEXT>

  <DO_BREAK_PAGE/>
  <SUBHEADING>
    <NAME>Representing thunks</NAME>
  </SUBHEADING>

  <INDEX>thunk<SUBINDEX>implementation of<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Our evaluator must arrange to create thunks when
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are applied to arguments and to force these thunks later.  A thunk must
    package an expression together with the environment, so that the argument
    can be produced later. To force the thunk, we simply extract the expression
    and environment from the thunk and evaluate the expression in the
    environment. We use
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>actual_value</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    rather than
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<SCHEMEINLINE>evaluate</SCHEMEINLINE>
      </PYTHON>
    </SPLITINLINE>
    so that in case the value of the expression is itself a thunk, we will force
    that, and so on, until we reach something that is not a thunk:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>force_it</DECLARATION></INDEX> 
      <NAME>force_it_lazy_v1</NAME>
      <SCHEME>
(define (force-it obj)
  (if (thunk? obj)
      (actual-value (thunk-exp obj) (thunk-env obj))
      obj))
      </SCHEME>
      <PYTHON>
function force_it(obj) {	
    return is_thunk(obj)
           ? actual_value(thunk_exp(obj), thunk_env(obj))
           : obj;
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    One easy way to package an expression with an environment is to make a list
    containing the expression and the environment. Thus, we create a thunk as
    follows:
    <SNIPPET>
      <INDEX><DECLARATION>delay_it</DECLARATION></INDEX> 
      <NAME>delay_it_lazy</NAME>
      <EXAMPLE>eval_lazy_example</EXAMPLE>
      <SCHEME>
(define (delay-it exp env)
  (list 'thunk exp env))

(define (thunk? obj)
  (tagged-list? obj 'thunk))

(define (thunk-exp thunk) (cadr thunk))

(define (thunk-env thunk) (caddr thunk))
      </SCHEME>
      <PYTHON>
function delay_it(exp, env) {	
    return list("thunk", exp, env);
}
function is_thunk(obj) {    
    return is_tagged_list(obj, "thunk");
}
function thunk_exp(thunk) { return head(tail(thunk)); }
<SHORT_SPACE/>
function thunk_env(thunk) { return head(tail(tail(thunk))); }
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Actually, what we want for our interpreter is not quite this, but
    rather thunks that have been memoized.
    <!-- this was commented out in the original LaTeX SICP sources:
	 %  Memoized thunks are created by the same method used with the 
	 <SCHEMEINLINE>%memo-proc</SCHEMEINLINE>
	 <SPLITINLINE><SCHEME>procedure</SCHEME>
	 <PYTHON>function</PYTHON></SPLITINLINE>
	 of section<SPACE/><REF NAME="sec:delayed-lists"/>.
    -->
    When a thunk is forced, we will turn it into an evaluated thunk by replacing
    the stored expression with its value and changing the
    <SCHEMEINLINE>thunk</SCHEMEINLINE> tag so that it can be recognized as
    already evaluated.<FOOTNOTE>Notice that we also erase the
    <SCHEMEINLINE>env</SCHEMEINLINE> from the thunk once the expression<APOS/>s
    value has been computed.  This makes no difference in the values returned by
    the interpreter.  It does help save space, however, because removing the
    reference from the thunk to the <SCHEMEINLINE>env</SCHEMEINLINE> once it is
    no longer needed allows this structure to be
    <INDEX>garbage collection<SUBINDEX>memoization and</SUBINDEX></INDEX>
    <INDEX>memoization<SUBINDEX>garbage collection and</SUBINDEX></INDEX>
    <EM>garbage-collected</EM> and its space 
    recycled, as we will discuss in
    section<SPACE/><REF NAME="sec:storage-allocation"/>.
    <TEXT>
      Similarly, we could have allowed unneeded environments in the memoized
      delayed objects of section<SPACE/><REF NAME="sec:delayed-lists"/>
      to be garbage-collected, by having
      <SPLITINLINE>
	<SCHEME>
	  <SCHEMEINLINE>memo-proc</SCHEMEINLINE>
	</SCHEME>
	<PYTHON>
	  <PYTHONINLINE>memo</PYTHONINLINE>
	</PYTHON>
      </SPLITINLINE>
      do something like
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(set! proc '())</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>fun = null;</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      to discard the
      <SPLITINLINE>
	<SCHEME>procedure
	<SCHEMEINLINE>proc</SCHEMEINLINE>
	</SCHEME>
	<PYTHON>function
	<PYTHONINLINE>fun</PYTHONINLINE>
	</PYTHON>
      </SPLITINLINE>
      (which includes the environment in which the
      <SPLITINLINE>
	<SCHEME>
	  <SCHEMEINLINE>delay</SCHEMEINLINE>
	</SCHEME>
	<PYTHON>
	  lambda expression
	  that makes up the tail of the stream
	</PYTHON>
      </SPLITINLINE>
      was evaluated) after storing its
      value.
    </TEXT>
    </FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>force_it</DECLARATION><SUBINDEX>memoized version</SUBINDEX></INDEX>
      <NAME>force_it_lazy</NAME>
      <EXAMPLE>eval_lazy_example</EXAMPLE>
      <SCHEME>
(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))

(define (thunk-value evaluated-thunk) (cadr evaluated-thunk))

(define (force-it obj)
  (cond ((thunk? obj)
         (let ((result (actual-value
                        (thunk-exp obj)
                        (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-car! (cdr obj) result)  <EM>; replace <SCHEMEINLINE>exp</SCHEMEINLINE> with its value</EM>
           (set-cdr! (cdr obj) '())     <EM>; forget unneeded <SCHEMEINLINE>env</SCHEMEINLINE></EM>
           result))
        ((evaluated-thunk? obj)
         (thunk-value obj))
        (else obj)))
      </SCHEME>
      <PYTHON>
function is_evaluated_thunk(obj) {
    return is_tagged_list(obj, "evaluated_thunk");
}
function thunk_value(evaluated_thunk) { 
    return head(tail(evaluated_thunk));
}
<ALLOW_BREAK/>
function force_it(obj) {
    if (is_thunk(obj)) {
        const result = actual_value(thunk_exp(obj), thunk_env(obj));
        set_head(obj, "evaluated_thunk");
        set_head(tail(obj), result);  // replace exp with its value
        set_tail(tail(obj), null);    // forget unneeded env
        return result;	
    } else if (is_evaluated_thunk(obj)) {
        return thunk_value(obj);
    } else {
        return obj;
    }
}
      </PYTHON>
    </SNIPPET>
    Notice that the same
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>delay-it</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>delay_it</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <PYTHON>function</PYTHON></SPLITINLINE>
    works both with and
    without memoization.<INDEX>thunk<SUBINDEX>implementation of<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE><LABEL NAME="ex:delay-side-effects"/>
  Suppose we type in the following
  <SPLITINLINE>
    <SCHEME>
      definitions
    </SCHEME>
    <PYTHON>
      declarations
    </PYTHON>
  </SPLITINLINE>
  to the lazy evaluator:
  <SNIPPET>
    <NAME>exercise_4_27_a</NAME>
    <EXAMPLE>exercise_4_27</EXAMPLE>
    <SCHEME>
(define count 0)

(define (id x)
  (set! count (+ count 1))
  x)
    </SCHEME>
    <PYTHON>
let count = 0;
function id(x) {
    count = count + 1;
    return x;
}
    </PYTHON>
    <PYTHON_RUN>
    </PYTHON_RUN>
  </SNIPPET>
  Give the missing values in the following sequence of interactions, and explain
  your answers.<FOOTNOTE>This exercise demonstrates that the interaction between
  lazy evaluation and side effects can be very confusing.  This is just what you
  might expect from the discussion in chapter<SPACE/><REF NAME="chap:state"></REF>.</FOOTNOTE>
  <SNIPPET>
    <NAME>exercise_4_27</NAME>
    <REQUIRES>driver_loop_lazy</REQUIRES>
    <SCHEME>
(define w (id (id 10)))
    </SCHEME>
    <PYTHON>
const w = id(id(10));
    </PYTHON>
    <PYTHON>
const w = id(id(10));
    </PYTHON>
    <PYTHON_RUN>
driver_loop(the_global_environment);

// L-evaluate input:
// let count = 0; function id(x) { count = count + 1; return x; }
// L-evaluate value: 
// undefined

// L-evaluate input:
// const w = id(id(10));
// L-evaluate value: 
// undefined

// L-evaluate input:
// count;
// L-evaluate value:
// &lt;response&gt;

// L-evaluate input:
// w;
// L-evaluate value:
// &lt;response&gt;

// L-evaluate input:
// count;
// L-evaluate value:
// &lt;response&gt;
    </PYTHON_RUN>
  </SNIPPET>
  <SNIPPET EVAL="no" LATEX="yes">
    <SCHEMEOUTPUT>
;;; L-Eval input:
count
;;; L-Eval value:
response
    </SCHEMEOUTPUT>
    <PYTHON_PROMPT>
L-evaluate input:
    </PYTHON_PROMPT>
    <PYTHON>
count;
    </PYTHON>
    <PYTHON_OUTPUT>
L-evaluate value:
<METAPHRASE>response</METAPHRASE>
    </PYTHON_OUTPUT>
  </SNIPPET>
  <SNIPPET EVAL="no" LATEX="yes">
    <SCHEMEOUTPUT>
;;; L-Eval input:
w
;;; L-Eval value:
response
    </SCHEMEOUTPUT>
    <PYTHON_PROMPT>
L-evaluate input:
    </PYTHON_PROMPT>
    <PYTHON>
w;
    </PYTHON>
    <PYTHON_OUTPUT>
L-evaluate value:
<METAPHRASE>response</METAPHRASE>
    </PYTHON_OUTPUT>
  </SNIPPET>
  <SNIPPET EVAL="no" LATEX="yes" POSTPADDING="no">
    <SCHEMEOUTPUT>
;;; L-Eval input:
count
;;; L-Eval value:
response
    </SCHEMEOUTPUT>
    <PYTHON_PROMPT>
L-evaluate input:
    </PYTHON_PROMPT>
    <PYTHON>
count;
    </PYTHON>
    <PYTHON_OUTPUT>
L-evaluate value:
<METAPHRASE>response</METAPHRASE>
    </PYTHON_OUTPUT>
  </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	The function
	<PYTHONINLINE>evaluate</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    uses
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>actual_value</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    rather than
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    to evaluate the
    <SPLITINLINE>
      <SCHEME>operator</SCHEME>
      <PYTHON>function expression</PYTHON>
    </SPLITINLINE>
    before passing it to
    <SCHEMEINLINE>apply</SCHEMEINLINE>, in order to force the value of the
    <SPLITINLINE>
      <SCHEME>operator.</SCHEME>
      <PYTHON>function expression.</PYTHON>
    </SPLITINLINE>
    Give an example that demonstrates the need for this forcing.
    <LABEL NAME="ex:force-operator"/>
  </EXERCISE>

  <EXERCISE>
    Exhibit a program that you would expect to run much more slowly without
    memoization than with memoization.  Also, consider the following
    interaction, where the <SCHEMEINLINE>id</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is defined as in exercise<SPACE/><REF NAME="ex:delay-side-effects"/> and
    <SCHEMEINLINE>count</SCHEMEINLINE> starts at 0:
    <SNIPPET>
      <NAME>exercise_4_29</NAME>
      <REQUIRES>driver_loop_lazy</REQUIRES>
      <SCHEME>
(define (square x)
  (* x x))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; L-Eval input:
(square (id 10))
;;; L-Eval value:
response
;;; L-Eval input:
count
;;; L-Eval value:
response
      </SCHEMEOUTPUT>
      <PYTHON>
function square(x) {
    return x * x;
}
      </PYTHON>
      <PYTHON_RUN>
driver_loop(the_global_environment);

// L-evaluate input:
// let count = 0; function id(x) { count = count + 1; return x; }
// L-evaluate value: 
// undefined

// L-evaluate input:
// function square(x) { return x * x; }
// L-evaluate value: 
// undefined

// L-evaluate input:
// square(id(10));
// L-evaluate value:
// &lt;response&gt;

// L-evaluate input:
// count;
// L-evaluate value:
// &lt;response&gt;
      </PYTHON_RUN>
    </SNIPPET>
    <SNIPPET EVAL="no" LATEX="yes">
      <PYTHON_PROMPT>
L-evaluate input:
      </PYTHON_PROMPT>
      <PYTHON>
square(id(10));
      </PYTHON>
      <PYTHON_OUTPUT>
L-evaluate value:
<METAPHRASE>response</METAPHRASE>
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no" LATEX="yes">
      <PYTHON_PROMPT>
L-evaluate input:
      </PYTHON_PROMPT>
      <PYTHON>
count;
      </PYTHON>
      <PYTHON_OUTPUT>    
L-evaluate value:
<METAPHRASE>response</METAPHRASE>
      </PYTHON_OUTPUT>
    </SNIPPET>
    Give the responses both when the evaluator memoizes and when it does not.
    <LABEL NAME="ex:memoize-or-not"/>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:force-sequence"/>
    <SPLIT>
      <SCHEME>
	Cy D. Fect, a reformed C programmer, is worried that some side effects
	may never take place, because the lazy evaluator doesn<APOS/>t force the
	expressions in a sequence.
	Since the value of an expression in a sequence
	other than the last one is not used (the expression is there only for
	its effect, such as assigning to a variable or printing), there can be
	no subsequent use of this value (e.g., as an argument to a primitive
	procedure) that will cause it to be forced.  Cy thus thinks that when
	evaluating sequences, we must force all expressions in the sequence
	except the final one. He proposes to modify
	<SCHEMEINLINE>eval-sequence</SCHEMEINLINE>
	from section<SPACE/><REF NAME="sec:core-of-evaluator"/> to use
	<SCHEMEINLINE>actual-value</SCHEMEINLINE>
	rather than <SCHEMEINLINE>eval</SCHEMEINLINE>:
      </SCHEME>
      <PYTHON>
	Cy D. Fect, a reformed C programmer, is worried that some side effects
	may never take place, because the lazy evaluator doesn<APOS/>t force the
	statements in a sequence.
	Since the value of a statement in a sequence
	may not be used (the statement may be there only for
	its effect, such as assigning to a variable or printing), there may be
	no subsequent use of this value (e.g., as an argument to a primitive
	function) that will cause it to be forced.
	Cy thus thinks that when
	evaluating sequences, we must force all statements in the sequence.
	He proposes to modify
	<PYTHONINLINE>evaluate_sequence</PYTHONINLINE>
	from section<SPACE/><REF NAME="sec:core-of-evaluator"/> to use
	<PYTHONINLINE>actual_value</PYTHONINLINE>
	rather than
	<PYTHONINLINE>evaluate</PYTHONINLINE>:
      </PYTHON>
    </SPLIT>
    <SNIPPET EVAL="no">
      <NAME>exercise_4_30_a</NAME>
      <SCHEME>
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (actual-value (first-exp exps) env))
        (else (actual-value (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
      </SCHEME>
      <PYTHON>
function eval_sequence(stmts, env) {
    if (is_empty_sequence(stmts)) {
        return undefined;
    } else if (is_last_statement(stmts)) {
        return actual_value(first_statement(stmts), env);
    } else {
        const first_stmt_value = 
            actual_value(first_statement(stmts), env);
        if (is_return_value(first_stmt_value)) {
            return first_stmt_value;
        } else {
            return eval_sequence(rest_statements(stmts), env);
        }
    }
}
      </PYTHON>
    </SNIPPET>
    <OL>
      <LI>
	Ben Bitdiddle thinks Cy is wrong. He shows Cy the
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>for-each</SCHEMEINLINE>
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>for_each</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	described in exercise<SPACE/><REF NAME="ex:for-each"/>,	which gives an
	important example of a sequence with side effects:
	<SNIPPET>
	  <INDEX><DECLARATION>for_each</DECLARATION></INDEX> 
	  <NAME>exercise_4_30_b</NAME>
	  <REQUIRES>driver_loop_lazy</REQUIRES>
          <SCHEME>
(define (for-each proc items)
  (if (null? items)
      'done
      (begin (proc (car items))
             (for-each proc (cdr items)))))
          </SCHEME>
	  <PYTHON>
function for_each(fun, items) {
    if (is_null(items)){
        return "done";
    } else {
        fun(head(items));
        for_each(fun, tail(items));
    }
}     
	  </PYTHON>
	  <PYTHON_RUN>
driver_loop(the_global_environment);

// L-evaluate input:
// function for_each(fun, items) { if (is_null(items)){ return undefined; } else { fun(head(items)); for_each(fun, tail(items)); } }     
// L-evaluate value:
// undefined
	    
// L-evaluate input:
// for_each(x => display(x), list(57, 321, 88));
// 57
// 321
// 88
// L-evaluate value:
// undefined
	  </PYTHON_RUN>
	</SNIPPET>
	He claims that the evaluator in the text (with the original
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>eval-sequence</SCHEMEINLINE>)
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>eval_sequence</PYTHONINLINE>)
	  </PYTHON>
	</SPLITINLINE>
	handles this correctly:
        <SNIPPET EVAL="no">
          <SCHEMEPROMPT>
;;; L-Eval input:
          </SCHEMEPROMPT>
          <SCHEME>
(for-each (lambda (x) (newline) (display x))
          (list 57 321 88))
          </SCHEME>
          <SCHEMEOUTPUT>
57
321
88
;;; L-Eval value:
done
          </SCHEMEOUTPUT>
          <PYTHON_PROMPT>
L-evaluate input:
          </PYTHON_PROMPT>
          <PYTHON>
for_each(display, list(57, 321, 88));
          </PYTHON>
          <PYTHON_OUTPUT>
57
321
88
L-evaluate value:
"done"
          </PYTHON_OUTPUT>
        </SNIPPET>
	Explain why Ben is right about the behavior of
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>for-each</SCHEMEINLINE>.
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>for_each</PYTHONINLINE>.
	  </PYTHON>
	</SPLITINLINE>
      </LI>
      <LI>
	Cy agrees that Ben is right about the
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>for-each</SCHEMEINLINE>
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>for_each</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	example, but says that that<APOS/>s not the kind of program he
	was thinking about when he proposed his change to
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>eval-sequence</SCHEMEINLINE>.
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>eval_sequence</PYTHONINLINE>.
	  </PYTHON>
	</SPLITINLINE>
	He
	<SPLITINLINE>
	  <SCHEME>defines</SCHEME>
	  <PYTHON>declares</PYTHON>
	</SPLITINLINE>
	the following two
	<SPLITINLINE><SCHEME>procedures</SCHEME>
	<PYTHON>functions</PYTHON></SPLITINLINE>
	in the lazy evaluator:
	<SNIPPET>
	  <NAME>exercise_4_30_c</NAME>
	  <REQUIRES>driver_loop_lazy</REQUIRES>
          <SCHEME>
(define (p1 x)
  (set! x (cons x '(2)))
  x)

(define (p2 x)
  (define (p e)
    e
    x)
  (p (set! x (cons x '(2)))))
          </SCHEME>
	  <PYTHON>
function f1(x) {
    x = pair(x, list(2));
    return x;
}

function f2(x) {
    function f(e) {
        e;
        return x;
    }
    return f(x = pair(x, list(2)));
}    
	  </PYTHON>
	</SNIPPET>
	What are the values of
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(p1 1)</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>f1(1)</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
	and
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(p2 1)</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>f2(1)</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
	with the original
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>eval-sequence</SCHEMEINLINE>?
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>eval_sequence</PYTHONINLINE>?
	  </PYTHON>
	</SPLITINLINE>
	What would the values be with Cy<APOS/>s proposed change to
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>eval-sequence</SCHEMEINLINE>?
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>eval_sequence</PYTHONINLINE>?
	  </PYTHON>
	</SPLITINLINE>
      </LI>
      <LI>
	Cy also points out that changing
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>eval-sequence</SCHEMEINLINE>
	  </SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>eval_sequence</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	as he proposes does not affect the behavior of the example in part a.
	Explain why this is true.
      </LI>
      <LI>
	How do you think sequences
	ought to be treated in the lazy evaluator?
	Do you like Cy<APOS/>s approach, the approach in the text, or some other
	approach?
      </LI>
    </OL>
  </EXERCISE>

  <DO_BREAK_PAGE/>
  <EXERCISE>
    The approach taken in this section is somewhat unpleasant, because it
    makes an incompatible change to
    <SPLITINLINE><SCHEME>Scheme.</SCHEME>
    <PYTHON>JavaScript.</PYTHON></SPLITINLINE>
    It might be nicer to implement lazy evaluation as an
    <INDEX>upward compatibility</INDEX>
    <EM>upward-compatible extension</EM>, that is, so that ordinary
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    programs will work as before.  We can do this by 
    <SPLITINLINE>
      <SCHEME>extending the syntax of procedure</SCHEME>
      <PYTHON>introducing optional parameter declaration as a new
      syntactic form inside function</PYTHON>
    </SPLITINLINE>
    declarations to let the user control whether or not arguments are to be
    delayed.  While we<APOS/>re at it, we may as well also give the user the
    choice between delaying with and without memoization.  For example, the
    <SPLITINLINE>
      <SCHEME>
	definition
      </SCHEME>
      <PYTHON>
	declaration
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define (f a (b lazy) c (d lazy-memo))
  $\ldots$)
      </SCHEME>
      <PYTHON>
function f(a, b, c, d) {	
    parameters("strict", "lazy", "strict", "lazy_memo");
    $\ldots$
}
      </PYTHON>
  </SNIPPET>
    would define <SCHEMEINLINE>f</SCHEMEINLINE> to be a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    of four arguments, where the first and third arguments are evaluated when the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is called, the second argument is delayed, and the fourth argument is both
    delayed and memoized.
    <SPLIT>
      <SCHEME>
	Thus, ordinary procedure definitions will produce the same behavior as
	ordinary Scheme,
	while adding the
	<SCHEMEINLINE>lazy-memo</SCHEMEINLINE>
	declaration to each parameter of every compound procedure
	will produce the behavior of the lazy evaluator defined in this section.
	Design and implement the changes required to produce such an extension to
	Scheme. You will have to implement new syntax procedures
	to handle the new syntax for <SCHEMEINLINE>define</SCHEMEINLINE>.
      </SCHEME>
      <PYTHON>
	You can assume that the parameter declaration is always
	the first statement in the body of a function declaration,
	and if it is omitted, all parameters are strict.
	Thus, ordinary function declaration
	will produce the same behavior as ordinary JavaScript,
	while adding the
	<PYTHONINLINE>"lazy_memo"</PYTHONINLINE>
	declaration to each parameter of every compound	function
	will produce the behavior of the lazy evaluator defined in this section.
	Design and implement the changes required to produce such an extension to
	JavaScript. The <PYTHONINLINE>parse</PYTHONINLINE> function will
	treat parameter declarations as	function applications, so you need to
	modify <PYTHONINLINE>apply</PYTHONINLINE> to dispatch to your
	implementation of the new syntactic form.
      </PYTHON>
    </SPLIT>
    You must also arrange for
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>evaluate</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    or <SCHEMEINLINE>apply</SCHEMEINLINE> to determine when arguments are to be
    delayed, and to force or delay arguments accordingly, and you must arrange
    for forcing to memoize or not, as appropriate.
    <LABEL NAME="ex:user-controlled-strictness"/>
  </EXERCISE>

  <INDEX>lazy evaluator<CLOSE/></INDEX>

  <!-- test cases -->
  
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_lazy</NAME>
    <REQUIRES>functions_4_1_1_lazy</REQUIRES>
    <REQUIRES>functions_4_1_2</REQUIRES>
    <REQUIRES>functions_4_1_3</REQUIRES>
    <REQUIRES>functions_4_1_4</REQUIRES>
    <PYTHON>
function parse_and_evaluate(input) {
    const program = parse(input);
    const locals = scan_out_declarations(program);
    const unassigneds = list_of_unassigned(locals);
    const program_env = extend_environment(locals, unassigneds,
                                       the_global_environment);
    return actual_value(program, program_env);
}
    </PYTHON>
  </SNIPPET>

  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_factorial_lazy</NAME>
    <REQUIRES>parse_and_evaluate_lazy</REQUIRES>
    <EXPECTED>120</EXPECTED>
    <PYTHON>
parse_and_evaluate("               \
function factorial(n) {            \
    return n === 1                 \
           ? 1                     \
           : n * factorial(n - 1); \
}                                  \
factorial(5);                      ");
    </PYTHON>
  </SNIPPET>
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_append_lazy</NAME>
    <REQUIRES>parse_and_evaluate_lazy</REQUIRES>
    <EXPECTED>[ 'b', [ 'c', [ 'd', null ] ] ]</EXPECTED>
    <PYTHON>
parse_and_evaluate("                                \
function append(xs, ys) {                           \
    return is_null(xs)                              \
           ? ys                                     \
           : pair(head(xs), append(tail(xs), ys));  \
}                                                   \
tail(append(list('a', 'b'), list('c', 'd')));       ");
    </PYTHON>
  </SNIPPET>
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_map_lazy</NAME>
    <REQUIRES>parse_and_evaluate_lazy</REQUIRES>
    <EXPECTED>[ 3, [ 4, [ 5, null ] ] ]</EXPECTED>
    <PYTHON>
parse_and_evaluate("                              \
function map(f, xs) {                             \
    return is_null(xs)                            \
           ? null                                 \
           : pair(f(head(xs)), map(f, tail(xs))); \
}                                                 \
tail(map(x => x + 1, list(1, 2, 3, 4)));          ");
    </PYTHON>
  </SNIPPET>
  <SNIPPET HIDE="yes">
    <NAME>parse_and_evaluate_test_try_me_lazy</NAME>
    <REQUIRES>parse_and_evaluate_lazy</REQUIRES>
    <EXPECTED>1</EXPECTED>
    <PYTHON>
parse_and_evaluate("        \
function try_me(a, b) {     \
    return a === 0 ? 1 : b; \
}                           \
try_me(0, head(null));      ");
    </PYTHON>
  </SNIPPET>

  
</SUBSECTION>
