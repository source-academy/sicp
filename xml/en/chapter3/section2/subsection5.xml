<SUBSECTION> 
  <NAME>
    CSE Machine
  </NAME>

  <LABEL NAME="sec:cse-machine"/>
  <INDEX>CSE machine<OPEN/></INDEX>

  <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	The environment model as presented so far focuses on how functions can refer
	to their parameters, locally declared names, and names that are declared
	outside the function. We achieve this by evaluating statements and expressions
	with respect to a <EM>current environment</EM>. It does not specify how
	we keep track of environments as computation proceeds. For example, when we
	evaluate an expression <JAVASCRIPTINLINE>f(x) + y</JAVASCRIPTINLINE>, we
	need to evaluate <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> in the current
	environment, establish as the new current environment the environment of
	<JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> extended by a binding of its
	parameter to the value of <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>, and
	evaluate the body of <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> in this
	extended environment. But what environment should we use for evaluating
	<JAVASCRIPTINLINE>y</JAVASCRIPTINLINE> after
	<JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> returns?
	In this section, we extend the 
      </TEXT>

      <SUBHEADING><NAME>Evaluating arithmetic expressions</NAME></SUBHEADING>
      
      <TEXT>
	Exercise<SPACE/><REF NAME="ex:3_8"/> shows that the presence of
	assignments makes the result of a program depend on the order in which
	the operands of an operator combination are evaluated. To remove
	ambiguities that arise from this, the JavaScript standard specifies
	left-to-right evaluation of operands.

	As an example, consider the evaluation of the arithmetic expression statement
	<SNIPPET>
	  <JAVASCRIPT>
1 + (2 * 3);
	  </JAVASCRIPT>
	</SNIPPET>
	The expression is decomposed into its operands
	<JAVASCRIPTINLINE>1</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>2 * 3</JAVASCRIPTINLINE>, followed by the
	<EM>instruction</EM> to add their results.
      </TEXT>
  <INDEX>CSE machine<CLOSE/></INDEX>
    </JAVASCRIPT>
  </SPLIT>
</SUBSECTION>
