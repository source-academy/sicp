[{"id":"/sicpjs/2.2.2","tag":"TITLE","body":"2.2.2  \n    Hierarchical Structures"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The representation of sequences in terms of lists generalizes naturally to\n    represent sequences whose elements may themselves be sequences.  For\n    example, we can regard the object\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":" [[1, [2, null]], [3, [4, null]]] \t  "},{"body":"\n    constructed by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwBwIYCWATgBQA2hAzgC6kCMANKgJTOW2kDMzALCywDcQA","body":"pair(list(1, 2), list(3, 4)); "},{"body":"\n    as a list of three items, the first of which is itself a list,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[1, [2, null]]"},{"body":".\n\tFigure ","tag":"#text"},{"tag":"REF","body":"2.5","href":"/sicpjs/2.2.2#fig-2.5"},{"body":"\n    shows the representation of this structure in terms of pairs.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-15.svg","id":"#fig-2.5","captionHref":"/sicpjs/2.2.2#fig-2.5","captionName":"Figure 2.5 ","captionBody":[{"body":"Structure formed by\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(list(1, 2), list(3, 4))"},{"body":".\n          ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Another way to think of sequences whose elements are sequences is as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"trees","tag":"#text"}]},{"body":".  The elements of the sequence are the branches of the\n    tree, and elements that are themselves sequences are subtrees.\n    Figure ","tag":"#text"},{"tag":"REF","body":"2.6","href":"/sicpjs/2.2.2#fig-2.6"},{"body":"\n    shows the structure in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"2.5","href":"/sicpjs/2.2.2#fig-2.5"},{"body":"\n    viewed as a tree.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-16.svg","id":"#fig-2.6","captionHref":"/sicpjs/2.2.2#fig-2.6","captionName":"Figure 2.6 ","captionBody":[{"body":"The list structure in\n\t  figure ","tag":"#text"},{"tag":"REF","body":"2.5","href":"/sicpjs/2.2.2#fig-2.5"},{"body":" viewed as a tree.\n          ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Recursion\n    \n    is a natural tool for dealing with tree structures, since we can\n    often reduce operations on trees to operations on their branches, which\n    reduce in turn to operations on the branches of the branches, and so on,\n    until we reach the leaves of the tree. As an example, compare the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"2.2.1","href":"/sicpjs/2.2.1"},{"body":" with the\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"function,\n    which returns the total number of leaves of a tree:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuIA","body":"const x = pair(list(1, 2), list(3, 4)); "},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuHBwCmhAOakAFmwrygA","body":"length(x); ","output":"3"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuHADMAroVykmRUAVWkA+hwCmDAG6HibCkNABvLKAegWh0spaFQ3PYWUcOloXtHYMcAflAABiCQ4IAuUABCT2I9RlYA6JiHcN5MrPidQn0jU3M2AAtjABMA6wBqbXxdA2MzC1Jmfyt5LABfHELi1rKrOSA","body":"count_leaves(x); ","output":"4"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuHGNJsKgivKA","body":"list(x, x); ","output":"list(list(list(1, 2), 3, 4), list(list(1, 2), 3, 4))"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuHBwCmhAOakAFp26k2FQRVlygA","body":"length(list(x, x)); ","output":"2"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKAA4CGAlgE4AUANk2WwIwA0qAJSCuPAMyCALEKEBuHADMAroVykmRUAVWkA+hwCmDAG6HibCkNABvLKAegWh0spaFQ3PYWUcOloXtHYMcAflAABiCQ4IAuUABCT2I9RlYA6JiHcN5MrPidQn0jU3M2AAtjABMA6wBqbXxdA2MzC1Jmfyt5LABfHELi1rKxUktBbrkgA","body":"count_leaves(list(x, x)); ","output":"8"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    To implement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":",\n      \n    recall the recursive plan for computing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":":","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":"\n\tof a list ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is 1 plus\n\tthe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":"\n\tof the\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tof ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":"\n\tof the empty list is 0.\n      ","tag":"#text"}]}]},{"body":"The function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n    is similar.  The value for the empty list is the same:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n\tof the empty list is 0.\n      ","tag":"#text"}]}]},{"body":"\n    But in the reduction step, where we strip off the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of the list, we must take into account that the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    may itself be a tree whose leaves we need to count.  Thus, the appropriate\n    reduction step is\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n\tof a tree ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n\tof the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n\tof ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" plus\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n\tof the\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tof ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":".\n      ","tag":"#text"}]}]},{"body":"\n    Finally, by taking\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"s\n    we reach actual leaves, so we need another base case:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":"\n\tof a leaf is 1.\n      ","tag":"#text"}]}]},{"body":"\n    To aid in writing recursive\n    functions\n    on trees,\n    our JavaScript environment\n    provides the primitive predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pair"},{"body":",\n    which tests whether its argument is a pair. Here is the complete\n    function:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.2.2#footnote-1"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaMZUaQPoA2ApgIYBurAzgBQAPAJSgA3llCTQAJ1al80muR6NC+Zs0FCJU3VID8oAAw69ugFygAhKGWMADu3LStps5MMBGN+8t0GLBzc-AAWHAAmWiIA1LT0hExsXLx8pE6awkIA3FgAvjj+CYHJ-I7OfMzKpHyeADSoQvWVPNUAzPUALELdWUA","body":"function count_leaves(x) {\n    return is_null(x)\n           ? 0\n           : ! is_pair(x)\n           ? 1\n           : count_leaves(head(x)) + count_leaves(tail(x));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.24","id":"#ex-2.24","child":[{"body":"\n    Suppose we evaluate the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(1, list(2, list(3, 4)))"},{"body":".\n      \n    Give the result printed by the interpreter, the corresponding\n    box-and-pointer structure, and the interpretation of this as a tree (as in\n    figure ","tag":"#text"},{"tag":"REF","body":"2.6","href":"/sicpjs/2.2.2#fig-2.6"},{"body":").","tag":"#text"}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"[1, [[2, [[3, [4, null]], null]], null]]"}]},{"tag":"LI","child":[{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-ex-2-24.svg","id":"#fig-"}]},{"tag":"LI","child":[{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-ex-2-24-tree.svg","id":"#fig-"}]}]}]},{"tag":"EXERCISE","title":"Exercise 2.25","id":"#ex-2.25","child":[{"body":"\n    Give combinations of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"s\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"s\n    that will pick 7 from each of the following\n    lists, given in list notation:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":false,"body":"list(1, 3, list(5, 7), 9)\n\nlist(list(7))\n\nlist(1, list(2, list(3, list(4, list(5, list(6, 7))))))"}],"solution":[{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":11,"eval":false,"body":"head(tail(head(tail(tail(the_first_list)))));"}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":12,"eval":false,"body":"head(head(the_second_list));"}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":13,"eval":false,"body":"head(tail(head(tail(head(tail(head(tail(head(\n    tail(head(tail(the_third_list))))))))))));"}]}]}]},{"tag":"EXERCISE","title":"Exercise 2.26","id":"#ex-2.26","child":[{"body":"\n    Suppose we define ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"y"},{"body":" to be two lists:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBQA","body":"const x = list(1, 2, 3);\n\nconst y = list(4, 5, 6); "},{"body":"\n        What is the result of evaluating each of the\n        following expressions, in box notation and list notation?\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBOAIYAHDQFNCAE2YVOo3kA","body":"append(x, y) "},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBOAA4BDBgCdmFTqN5A","body":"pair(x, y) "},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBORiwqdRvIA","body":"list(x, y) "}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBOAIYAHDQFNCAE2YVOo3jhCgATtuIBXOqQBcoANocXKTs+6e5LxS6VOQjs6AF1wiKA","body":"[1, [2, [3, [4, [5, [6, null]]]]]] "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBOAA4BDBgCdmFTqN44QobQFNiAVzqkAXKADaDjo5ScH3ToWt0Auv-c5R0VHJS8ff38gA","body":"[[1, [2, [3, null]]], [4, [5, [6, null]]]] "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFAIwA0qnAzAJQDcOAiXIBPGvSalmAFk4BWTgDYBORiwqdRvHCFAAnAKbEArnVIAuUAG1rHGyk7XunQmboBdL0+tybimyVXdy8PYLpPDyA","body":"[[1, [2, [3, null]]], [[4, [5, [6, null]]], null]] "}]}]}]},{"tag":"EXERCISE","title":"Exercise 2.27","id":"#ex-2.27","child":[{"body":"\n    Modify your\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"reverse"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"2.18","href":"/sicpjs/2.2.1#ex-2.18"},{"body":" to produce a\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deep_reverse"},{"body":"function\n    that takes a list as argument and returns as its value the list with its\n    elements reversed and with all sublists deep-reversed as well.  For example,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANxA","body":"const x = list(list(1, 2), list(3, 4)); "},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4KkoA","body":"x; ","output":"list(list(1, 2), list(3, 4))"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":13,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4AZgFdCuUgyKgATgFMAbhrXENzBqQ0BbYj1ABvLKFuh5i5as069GgPpHdh42e6biOTpSC2s7cPUNUjk1QlAmd0Iguh9TcxsIzLsAfkjA4IyszIAuSNd9T2M1ZlIAQwYUrzM+LABIIo6IgAd66oALDVqAE1Tm-w18kKlC0ABfGc1o2LLdCq9qpuJuJLo6afmsF1WDCikgA","body":"reverse(x); ","output":"list(list(3, 4), list(1, 2))"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4QoACYBTBQAcA+gCcFANwXriC0KXygARgYDu6hqVILCpgJ6gyAV0WFSORSo3bd+5gopIA","body":"deep_reverse(x); ","output":"list(list(4, 3), list(2, 1))"}],"solution":[{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4QoACYBTBQAcA+gCcFANwXriC0KXygARgYDu6hqVILCpgJ6gyAV0WFSOAGYvCuUgxE8kpqmjp6CszWCgC2xDwA3ligKaCapC7q9kyqhC50dFG2cTzJqeWpAPygeQVlFeUAXKA5ygCGDOpFsfH1DSnVbcrKdnLMiioa2rr6zKQdhdElfKB9-eug7Z3jIVPhswAWCm1jS-EraxtXNfl0EpcVzWfSAL44E6HTEcwUUkA","body":"function deep_reverse(items){\n    return is_null(items)\n           ? null\n           : is_pair(items)\n           ? append(deep_reverse(tail(items)), \n                    pair(deep_reverse(head(items)), \n                         null))\n           : items;\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.28","id":"#ex-2.28","child":[{"body":"\n    Write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fringe"},{"body":"\n    that takes as argument a tree (represented as a list) and returns a list\n    whose elements are all the leaves of the tree arranged in left-to-right\n    order.  For example,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANxA","body":"const x = list(list(1, 2), list(3, 4)); "},{"tag":"SNIPPET","latex":false,"id":27,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4QoAGYAnBoQDmAU1Cl8oAEYaA7ktKk1hXQE9QZAK4ATU6RyLl65hSlA","body":"fringe(x); ","output":"list(1, 2, 3, 4)"},{"tag":"SNIPPET","latex":false,"id":28,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4QoAGYAnBoQDmAU1Cl8oAEYaA7ktKk1hXQE9QZAK4ATU6RyLl61k0EVuFCZKA","body":"fringe(list(x, x)); ","output":"list(1, 2, 3, 4, 1, 2, 3, 4)"}],"solution":[{"tag":"SNIPPET","latex":false,"id":29,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwYwPYB2AzgC6gAeoAvKADYCWZAFIywIwA0qAlN26WYBmbgBYePANw4QoAGYAnBoQDmAU1Cl8oAEYaA7ktKk1hXQE9QZAK4ATU6RxzrhXKQZF5S1WuYUeoADeWKChoApqpNYKZkwA+oTWdHR+PCFhGWEA-KCJyemZGQBcoPEADgCGDAqpBYWhORVlZaa2zIrK6swAFmoVbf58Xp2+pFUpg2n1xfRMgv7SAL5O3l0CftyDkkA","body":"function fringe(x) {\n    return is_null(x)\n           ? null\n           : is_pair(x)\n           ? append(fringe(head(x)), fringe(tail(x)))\n           : list(x);\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.29","id":"#ex-2.29","child":[{"body":"\n    A binary\n    \n    mobile consists of two branches, a left branch and a right\n    branch.  Each branch is a rod of a certain length, from which hangs\n    either a weight or another binary mobile.  We can represent a binary\n    mobile using compound data by constructing it from two branches (for\n    example, using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":"):\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":30,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6tlARuQDbMAUfXKQA0oAE7kA5gAtSASlABvLKDUTmpfOJo9yAZ1KDmwsZNkKA3FgC+QA","body":"function make_mobile(left, right) {\n    return list(left, right);\n} "},{"body":"\n    A branch is constructed from a ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":" (which\n    must be a number) together with a ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"structure"},{"body":",\n    which may be either a number (representing a simple weight) or another\n    mobile:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":31,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6ARgE70kAWAFABtmhAOaleAGlABnUp3xl8nZgEpQAbyygdoFaWU1B5OUJHips+YoMrVAbiwBfIA","body":"function make_branch(length, structure) {\n    return list(length, structure);\n} "},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n        Write the corresponding selectors\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"left_branch"},{"body":"\n\tand\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"right_branch"},{"body":",\n\t  \n\twhich return the branches of a mobile, and\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"branch_length"},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"branch_structure"},{"body":",\n\t\n\twhich return the components of a branch.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Using your selectors, define a\n        function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"total_weight"},{"body":"\n        that returns the total weight of a mobile.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        A mobile is said to be\n        ","tag":"#text"},{"tag":"EM","child":[{"body":"balanced","tag":"#text"}]},{"body":" if the torque applied by its top-left branch is equal\n\tto that applied by its top-right branch (that is, if the length of the\n\tleft rod multiplied by the weight hanging from that rod is equal to the\n\tcorresponding product for the right side) and if each of the submobiles\n\thanging off its branches is balanced. Design a predicate that tests\n\twhether a binary mobile is balanced.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Suppose we change the representation of mobiles so that the\n\tconstructors are\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":32,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6tlARuQDbMAUfXKQA0oAE7kA5gAtSASlABvLKDUTmpfOJoAHeuXGDmwsZNkKA3FgC+eImSo0GLVp3H0SM44SmkZYgDOpOL4ZNrMiirqGlo6oPqGPn4BoMGh4eKR1jZAA","body":"function make_mobile(left, right) {\n    return pair(left, right);\n}\nfunction make_branch(length, structure) {\n    return pair(length, structure);\n} "},{"body":"\n        How much do you need to change your programs to convert to the new\n        representation?\n      ","tag":"#text"}]}]}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":33,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6tlARuQDbMAUfXKQA0oAE7kA5gAtSASlABvLKDUTmpfOJo9yAZ1KDmwsZNkKA3FgC+OAiQrU6TNp3H0SM44SmkZYobi+GTazIoq6hpaOqB6hj5+AaBBITHh1nZ4RGRUuiakrO6exN60Earq4praNDLM9AAm-OWZ2Y55EtJyRR5eLRVR1TF1Dc2k9LwD8m0Ouc7FXqx8vv78nINVNbH1Tesztu3zNIulrKmh1fvKlWrDtaC745M8+wc2QA","body":"function left_branch(m) {\n    return head(m);\n}\nfunction right_branch(m) {\n    return head(tail(m));\n}\nfunction branch_length(b) {\n    return head(b);\n}\nfunction branch_structure(b) {\n    return head(tail(b));\n} "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":34,"eval":true,"prependLength":22,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6tlARuQDbMAUfXKQA0oAE7kA5gAtSASlABvLKDUTmpfOJo9yAZ1KDmwsZNkKA3FgC+OAiQrU6TNp3H0SM44SmkZYobi+GTazIoq6hpaOqB6hj5+AaBBITHh1nZ4RGRUuiakrO6exN60Earq4praNDLM9AAm-OWZ2Y55EtJyRR5eLRVR1TF1Dc2k9LwD8m0Ouc7FXqx8vv78nINVNbH1Tesztu3zNIulrKmh1fvKlWrDtaC745M8+wdZc040BqwA7szdIwAD3kkS2I1AP0I+FonGY4n4INmOS+oFIlAmPD+AIsiM2d223302MBeNuUVAAH5QEDyVEAFxojH0LH-UmnGTnUjBS4COkUgWCtRCQocvHyRQAan5UXRmJJuI5XJ56X4MqFGq6Fl6JW8IIlbSwxGohjooAAvC4WOwuLw+ZqogxrWKAIwABhE6s1TrYHG4fBarh1-XdYhQ8jEXodah9wdK-AALGIAKwSiOgKOOoOuj2oADMBoFWDlLIVcgGliAA","body":"function is_weight(x){\n    return is_number(x);\n}\nfunction total_weight(x) {\n    return is_weight(x)\n        ? x\n        : total_weight(branch_structure(\n                         left_branch(x))) +\n          total_weight(branch_structure(\n                         right_branch(x)));\n} "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":35,"eval":true,"prependLength":34,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaALYCGA1gKYD6tlARuQDbMAUfXKQA0oAE7kA5gAtSASlABvLKDUTmpfOJo9yAZ1KDmwsZNkKA3FgC+OAiQrU6TNp3H0SM44SmkZYobi+GTazIoq6hpaOqB6hj5+AaBBITHh1nZ4RGRUuiakrO6exN60Earq4praNDLM9AAm-OWZ2Y55EtJyRR5eLRVR1TF1Dc2k9LwD8m0Ouc7FXqx8vv78nINVNbH1Tesztu3zNIulrKmh1fvKlWrDtaC745M8+wdZc040BqwA7szdIwAD3kkS2I1AP0I+FonGY4n4INmOS+oFIlAmPD+AIsiM2d223302MBeNuUVAAH5QEDyVEAFxojH0LH-UmnGTnUjBS4COkUgWCtRCQocvHyRQAan5UXRmJJuI5XJ56X4MqFGq6Fl6JW8IIlbSOqJ+nBZJWYzRBNyGhMhxLZuKtAB8ner+HaimaSBb1n0zhdVerNcGKSKdf19YoAGRRoMe008c3NJUBsJqkMZjXmHpiyOgGNxuUshVyX265VpNNxzOasO5iWKOMAKlASpWSWMwnDpXFcYAvAPC8zWTjSynuZWrtWa0Ls6K-XqG6Bm62F8tmKtvHPu4v5Or3jhiNRDHRQH2XCx2FxeHzMwxL2KUAAGMTTgX3tgcbh8FquHf8ABGF9UHkEQ3xnC83AXfgABYxAAVgbV87z-R8AA4EINLATS9YgfVaIA","body":"function is_balanced(x) {\n    return is_weight(x) ||\n        ( is_balanced(branch_structure(\n                                  left_branch(x))) &&\n          is_balanced(branch_structure(\n                                  right_branch(x))) &&\n          total_weight(branch_structure(\n                                  left_branch(x))) \n          * branch_length(left_branch(x))\n          ===\n          total_weight(branch_structure(\n                                  right_branch(x))) \n          * branch_length(right_branch(x))\n        );\n} "}]},{"tag":"LI","child":[{"body":"\n\t  With this alternative representation, the selector functions for\n\t  mobile and branch need to change as follows:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":36,"eval":false,"body":"function left_branch(m) {\n  return head(m);\n}\nfunction right_branch(m) {\n  return tail(m);\n}\nfunction branch_length(b) {\n  return head(b);\n}\nfunction branch_structure(b) {\n  return tail(b);\n}"}]}]}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Mapping over trees","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Just as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" is a powerful abstraction for\n    dealing with sequences, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" together with\n    recursion is a powerful abstraction for dealing with trees.  For instance,\n    the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_tree"},{"body":"function,\n    analogous to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_list"},{"body":"\n    of section ","tag":"#text"},{"tag":"REF","body":"2.2.1","href":"/sicpjs/2.2.1"},{"body":", takes as arguments a numeric\n    factor and a tree whose leaves are numbers.  It returns a tree of the same\n    shape, where each number is multiplied by the factor. The recursive plan\n    for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_tree"},{"body":"\n    is similar to the one for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_leaves"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":37,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM7ECGANgKYD6pATiywBRc8ANKFwMylTgEpQAbyygFobqXyca5Wm0L4mTftxaT5ik4oD8obbuOmTALlABCUBrYAHBuU76eR26YsBFlAAKhExUgkbf1AHDy9eemZ2IN4ACxYGABMfQ2FRcSlhaJjbJNYOA35PPSDJfIiJSUkAbiwAXxxylKqmDVJeAEZhPtoBlBH+3gBmYQAWetAAVkXRgYA2YQB2ZsES20GABlagA","body":"function scale_tree(tree, factor) {\n    return is_null(tree)\n           ? null\n           : ! is_pair(tree)\n           ? tree * factor\n           : pair(scale_tree(head(tree), factor), \n                  scale_tree(tail(tree), factor));\n} "},{"tag":"SNIPPET","latex":false,"id":38,"eval":true,"prependLength":10,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM7ECGANgKYD6pATiywBRc8ANKFwMylTgEpQAbyygFobqXyca5Wm0L4mTftxaT5ik4oD8obbuOmTALlABCUBrYAHBuU76eR26YsBFlAAKhExUgkbf1AHDy9eemZ2IN4ACxYGABMfQ2FRcSlhaJjbJNYOA35PPSDJfIiJSUkAbiwAXxxylKqmDVJeAEZhPtoBlBH+3gBmYQAWetAAVkXRgYA2YQB2ZsES20GABlagA","body":"scale_tree(list(1, list(2, list(3, 4), 5), list(6, 7)),\n           10); ","output":"list(10, list(20, list(30, 40), 50), list(60, 70))"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Another way to implement\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_tree"},{"body":"\n    is to regard the tree as a sequence of sub-trees and use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":".\n    We map over the sequence, scaling each sub-tree in turn, and return the\n    list of results.  In the base case, where the tree is a leaf, we simply\n    multiply by the factor:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":39,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM7ECGANgKYD6pATiywBRc8ANKFwMylTgEpQAbyygFobqXycaAWwYAHXrXwAjDtxagAvAD5Q5Wmy0NynXQaM9J8xR89fvoAPx1GVhc+PUMBFmFRcSl3HzifAC46Z3DQACoRMVIJYVj4hXDJAG4sAF8cemZ2cN4ma1JeAEZhOtoGlBb63gBmYQAWSWEAVkHQVoaANmEAdklBvO9GgAZioA","body":"function scale_tree(tree, factor) {\n    return map(sub_tree => is_pair(sub_tree)\n                           ? scale_tree(sub_tree, factor)\n                           : sub_tree * factor, \n               tree);\n} "},{"body":"\n    Many tree operations can be implemented by similar combinations of\n    sequence operations and recursion.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.30","id":"#ex-2.30","child":[{"body":"Declare a function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_tree"},{"body":"\n    analogous to the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_list"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"2.21","href":"/sicpjs/2.2.1#ex-2.21"},{"body":".  That is,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_tree"},{"body":"\n    should behave as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":40,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCyUBnARwFcBDAJwFMB9AFystFoHtQAjRgd3IEtbbKAO3YBPArWIATIbRxEyVOgwAUAGx75aygIwAaLKENHjJw+s3KUu0Oa0BmawBYAlNYCsr0AdM+jt5QBs1gDszmEA3EA","body":"square_tree(list(1,\n                 list(2, list(3, 4), 5), \n                 list(6, 7))); ","output":"list(1, list(4, list(9, 16), 25), list(36, 49)))"},{"body":"Declare ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_tree"},{"body":"\n    both directly (i.e., without using any higher-order\n    functions)\n    and also by using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" and recursion.\n    ","tag":"#text"}],"solution":[{"body":"\n      Directly:\t  \n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":41,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM4CO+AhgE4CmAFAB4CUoA3llDDQ7UvhY0uoAFSguAbiwBfHCDqNWbAPql2bUKUqgARgYDuLcqVJsaJgJ51xAEzukcBEhWobm7XX0OPTY2PkERUTZxSVByWm1CfAAbZOD9HiFI7NAAflAk1KyckQAuUABCOISAByZyFnTQzJLI-IZ-ThCw4tbyuoaODq1A0I4ACzYmFyawngAaXtac4YDu4Pq07p4dpVUsVZ115PjSDgBGReXWk9ozlHnQW7OAZkeAFgXQAFYvpevhM8OAA2R4Adh2PAUQA","body":"function square_tree(tree) {\n    return is_null(tree)\n           ? null\n           : ! is_pair(tree)\n           ? square(tree)\n           : pair(square_tree(head(tree)),\n                  square_tree(tail(tree)));\n} ","output":"[1, [[4, [[9, [16, null]], [25, null]]], [[36, [49, null]], null]]]"},{"body":"\n      The version using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":42,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM4CO+AhgE4CmAFAB4CUoA3llDDQ7UvhY0uoAFSguAbiwBfHCDqNWbAPql2bUKUqgARgYDuLcqVJsaJgJ51xAEzukcBEhWobm7XX0OPTY2PkERUTZxSVAAWyYABw5afBNA0NAAXgA+UABCUHJabUSmchYUtIywoUj6hsbIgH4-LSr0kNqmnt6ALjaAro6angAaOt6RLp4lVSwGfx1hgBti0g4ARgmphrXaDZQx0H2NgGZjgBZx0ABWG8nd4VOOADZjgHYeb4UgA","body":"function square_tree(tree) {\n    return map(sub_tree => ! is_pair(sub_tree)\n                           ? square(sub_tree)\n                           : square_tree(sub_tree),\n               tree);\n} ","output":"[1, [[4, [[9, [16, null]], [25, null]]], [[36, [49, null]], null]]]"}]},{"tag":"EXERCISE","title":"Exercise 2.31","id":"#ex-2.31","child":[{"body":"\n    Abstract your answer to exercise ","tag":"#text"},{"tag":"REF","body":"2.30","href":"/sicpjs/2.2.2#ex-2.30"},{"body":" to\n    produce a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tree_map"},{"body":"\n    with the property that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_tree"},{"body":"\n\tcould be declared as\t\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":43,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCyUAXAJwFNiB9AWwEMAHAge1ACNjQB3QgS332IDtmAT1ABnfAFcAJv3w4AZuL4BjfJ3oCRAR3FUSZIqQAUB4gEpQAb1AkJhAScq1DWnSQA0BEmYDcoAL5AA","body":"function square_tree(tree) { return tree_map(square, tree); } "}],"solution":[{"tag":"SNIPPET","latex":false,"id":44,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM4CO+AhgE4CmAFAB4CUoA3llDDQ7UvhY0uoAFSguAbiwBfHCFCl2bAPoBbJgAcNlUACM2oAO4typUmxqmAnnXEATB6RwESFanUZWHU02ThC2Pn5RNnFJDS09Qw4GZnYAGnjQngVQVSx1FKDtcOMzC2tbe0cXWndPbyIyKhpwxIMOXAzwyKERMQkafXbafFNirVAAXgA+UHJabUJ8ABtl5NHxrN6RHd29-YB+UCXV7f3zi4AuOYWDJnIWdbHus4u3naPWoY6MkeetHivd7va64J6bCJpIEXbpKPKFdgQjjLeakDgARihwN2KNqHBQGVxaIAzBkACw8DIAVkpoGhbyJHAAbBkAOw8DkKIA","body":"function tree_map(f, tree) {\n    return map(sub_tree => is_null(sub_tree)\n                           ? null\n                           : is_pair(sub_tree)\n                           ? tree_map(f, sub_tree)\n                           : f(sub_tree),\n               tree);\n} ","output":"[1, [[4, [[9, [16, null]], [25, null]]], [[36, [49, null]], null]]]"}]},{"tag":"EXERCISE","title":"Exercise 2.32","id":"#ex-2.32","child":[{"body":"\n    We can represent a\n    \n    set as a list of distinct elements, and we can\n    represent the set of all subsets of the set as a list of lists.  For\n    example, if the set is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(1, 2, 3)"},{"body":",\n      \n    then the set of all subsets is\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":45,"eval":false,"body":"list(null, list(3), list(2), list(2, 3),\n     list(1), list(1, 3), list(1, 2),\t  \n     list(1, 2, 3))"},{"body":"\n    Complete the\n    following \n    declaration of a function\n    that generates the set of subsets of a set and give a clear explanation of\n    why it works:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction subsets(s) {\n    if (is_null(s)) {\n        return list(null);\n    } else {\n        const rest = subsets(tail(s));\n        return append(rest, map($\\langle{}$??$\\rangle$, rest));\n    }\n}\n      "}],"solution":[{"tag":"SNIPPET","latex":false,"id":46,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHTpQKCwMwK4B2AxgC4CWA9oaAM74BGtApqbQBS0CUoA3lqEGhyuUO3K0A+oXwAbWZy49+Q1aABOrfOpqyJpdjPlcA3AKEBfUM1ks+5taGLVapDc1egAvHUYs27KQAhuQK3KYOapqk2jRBAA7xzIQAJuyargA0oAC2CewAHt4AfKDxIersABbMQWnc2QVc2RmkSmaqFlhdWPRMrBx6ruwAjNko2QDM7UA","body":"function subsets(s) {\n    if (is_null(s)) {\n        return list(null);\n    } else {\n        const rest = subsets(tail(s));\n        return append(rest, map(x => pair(head(s), x), rest));\n    }\n} ","output":"[ null,\n  [ [3, null],\n    [ [2, null],\n      [ [2, [3, null]],\n        [ [1, null],\n          [ [1, [3, null]],\n            [ [1, [2, null]],\n              [[1, [2, [3, null]]], null]\n            ]\n          ]\n        ]\n      ]\n    ]\t    \n  ]\n]"},{"body":"\n      The argument starts in a similar way as the argument for the function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cc"},{"body":"\n      in section ","tag":"#text"},{"tag":"REF","body":"1.2.2","href":"/sicpjs/1.2.2"},{"body":": A subset either\n      contains the first element ","tag":"#text"},{"body":"$e$","tag":"LATEX"},{"body":" of the given\n      set, or it doesn't. If it doesn't, the problem becomes strictly smaller:\n      Compute all subsets of the tail of the list that represents the given\n      set. If it does, it must result from adding ","tag":"#text"},{"body":"$e$","tag":"LATEX"},{"body":"\n      to a subset that doesn't contain ","tag":"#text"},{"body":"$e$","tag":"LATEX"},{"body":". In the\n      end, we need to append both lists of subsets to obtain the list of all\n      subsets.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.2.2#footnote-link-1","child":[{"body":"The order of the\n    two predicates matters, since ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":"\n    satisfies ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_null"},{"body":" and also is not a\n    pair.","tag":"#text"}]}]