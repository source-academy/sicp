<SUBSECTION>
  <LABEL NAME="sec:evaluating-combinations"></LABEL>
   <SPLIT>
    <SCHEME>
      <INDEX>组合式<SUBINDEX>求值</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>求值<SUBINDEX>组合式</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>运算符组合<SUBINDEX>求值</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>求值<SUBINDEX>运算符组合</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLIT> 
   <NAME>
    求值
    <SPLITINLINE>
      <SCHEME>组合式</SCHEME>
      <JAVASCRIPT>运算符组合</JAVASCRIPT>
    </SPLITINLINE>
  </NAME> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
   <TEXT>
    本章的目标之一是将关于以过程方式思考的问题隔离开来。举例来说，我们来考虑这样一个情况：在求值<SPLITINLINE>
      <JAVASCRIPT>运算符</JAVASCRIPT>
    </SPLITINLINE>
    组合时，解释器本身正遵循一个过程。
    <COMMENT>
      由于关键字<JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>的重要性，我们通常将对“procedure/procedural”的引用替换为对“function/functional”的引用；以上句子是个例外，对于此处的JavaScript版本，“thinking procedurally”和“procedure”这两个术语或许仍然适用。
    </COMMENT>
    <UL>
      <LI>
      要对<SPLITINLINE>
	<SCHEME>组合式,</SCHEME>
	<JAVASCRIPT>运算符组合,</JAVASCRIPT>
      </SPLITINLINE>
      进行求值，请按以下步骤操作：
      <OL>
        <LI>求值该组合的<SPLITINLINE>
	  <SCHEME>子表达式</SCHEME>
	  <JAVASCRIPT>操作数表达式</JAVASCRIPT>
	</SPLITINLINE>
        。</LI>
        <LI>
	  <SPLITINLINE>
	    <SCHEME>
	      将最左侧子表达式（即运算符）的值作为过程，应用于其它子表达式（即操作数）的值。
	    </SCHEME>
	    <JAVASCRIPT>
	      将由运算符所表示的函数应用于操作数值作为参数。
	    </JAVASCRIPT>
	  </SPLITINLINE>
        </LI>
      </OL>
      </LI>
    </UL>
    <COMMENT>
      Scheme版本不区分运算符组合和应用组合。然而，由于中缀记法，JavaScript版本需要针对这两者制定略有不同的规则。本节包含运算符组合的规则，而1.1.5节则介绍了函数应用的新规则。
    </COMMENT>
    即使是这一简单规则也阐明了关于过程的一些重要观点。首先，请注意第一步规定，为了完成对组合的求值过程，我们必须先对组合中的每个操作数执行求值。因此，求值规则在本质上是<INDEX>递归</INDEX>的<EM>递归</EM>；也就是说，它包含了一个步骤，即需要调用规则本身。
    <SPLITINLINE>
      <SCHEME>
        <FOOTNOTE>或许令人奇怪的是，求值规则在第一步中便规定应先求值组合的最左侧元素，因为此时该元素通常仅为诸如<SCHEMEINLINE>+</SCHEMEINLINE>或<SCHEMEINLINE>*</SCHEMEINLINE>这样的运算符，代表一个内置的基本过程，如加法或乘法。我们稍后将看到，能够处理那些其运算符本身即为复合表达式的组合是非常有用的。</FOOTNOTE>
      </SCHEME>
    </SPLITINLINE>
  </TEXT> 
   <TEXT>
注意看递归这一概念是如何简洁地用来表达
<INDEX>递归<SUBINDEX>表达复杂过程</SUBINDEX></INDEX>
在深度嵌套的组合中，本来会被视为相当复杂的过程。例如，求值
<SNIPPET>
  <SCHEME>
    (* (+ 2 (* 4 6))
       (+ 3 5 7))
  </SCHEME>
  <JAVASCRIPT>
    (2 + 4 * 6) * (3 + 12);
  </JAVASCRIPT>
</SNIPPET>
需要将求值规则应用于四个不同的组合。我们可以通过将该组合以
<INDEX>运算符组合<SUBINDEX><ORDER>树</ORDER>的树形表示</SUBINDEX></INDEX>
<INDEX>组合视为树<SUBINDEX>树状的组合</SUBINDEX></INDEX>
的形式来展现这一过程，如下所示：
<SPLITINLINE>
  <SCHEME>
    figure<SPACE></SPACE><REF NAME="fig:tree-comb_scheme"></REF>.
  </SCHEME>
  <JAVASCRIPT>
    figure<SPACE></SPACE><REF NAME="fig:tree-comb"></REF>.
  </JAVASCRIPT>
</SPLITINLINE>
每个组合都由一个<INDEX>树的节点</INDEX>表示，其对应的<INDEX>树的分支</INDEX>代表从运算符及其操作数延伸出来的部分。树的
<INDEX>终端节点</INDEX>
（即没有分支的节点）则代表运算符或数字。从树的角度来看求值，我们可以设想操作数的值从终端节点开始逐层向上渗透，并在更高层次上进行组合。总的来说，我们将看到，递归是一种处理分层、树状对象的非常强大技术。事实上，求值规则中“向上传递值”的形式正是一个通用过程的例子，这个过程被称为
<INDEX>树累积</INDEX>
<EM>树累积</EM>。

<SPLIT>
  <SCHEME>
    <FIGURE SRC="img_original/ch1-Z-G-1.svg">
      <LABEL NAME="fig:tree-comb_scheme"></LABEL>
      <CAPTION>树形表示，显示每个子组合的值。
      </CAPTION>
    </FIGURE>
  </SCHEME>
  <JAVASCRIPT>
    <FIGURE>
      <FIGURE SRC="img_javascript/ch1-Z-G-1.svg"></FIGURE>
      <LABEL NAME="fig:tree-comb"></LABEL>
      <CAPTION>树形表示，显示每个子表达式的值。
      </CAPTION>
    </FIGURE>
  </JAVASCRIPT>
</SPLIT>
</TEXT> 


   <TEXT>
接下来，请注意，第一步的重复应用使我们进入一个阶段，此时我们需要求值的对象不再是组合，而是原始表达式，例如
<SPLITINLINE>
  <SCHEME>
	数字、内置运算符或其他名称。  
  </SCHEME>
  <JAVASCRIPT>
	数字或名称。  
  </JAVASCRIPT>
</SPLITINLINE>
我们通过规定来处理原始情况
<INDEX>原始表达式<SUBINDEX>的求值</SUBINDEX></INDEX>
<INDEX>求值<SUBINDEX>原始表达式</SUBINDEX></INDEX>
，即规定：
<UL>
  <LI>
    数字的值就是它们所表示的数字，
	<SPLITINLINE><JAVASCRIPT>和</JAVASCRIPT></SPLITINLINE>
  </LI>
  <SPLITINLINE>
	<SCHEME>
      <LI>
        内置运算符的值是执行相应操作的机器指令序列，且
      </LI>
	</SCHEME>
  </SPLITINLINE>
  <COMMENT>
	在 JavaScript 中，运算符不是值，因此这一项在 JavaScript 版本中不适用。
  </COMMENT>
  <LI>
    其他名称的值是环境中与这些名称相关联的对象。
  </LI>
</UL>
<SPLITINLINE>
  <SCHEME>
    我们可以规定，例如 <SCHEMEINLINE>+</SCHEMEINLINE> 和 <SCHEMEINLINE>*</SCHEMEINLINE> 这样的符号也包含在全局环境中，并与它们对应的机器指令序列（作为其<QUOTE>值</QUOTE>）关联，从而将第二条规则视为第三条规则的特殊情况。
  </SCHEME>
</SPLITINLINE>
需要注意的关键点是
<INDEX>环境<SUBINDEX><ORDER>作为求值上下文</ORDER>的作用</SUBINDEX></INDEX>
在确定表达式中
<SPLITINLINE>
  <SCHEME>
	符号
  </SCHEME>
  <JAVASCRIPT>
	名称
  </JAVASCRIPT>
</SPLITINLINE>
的含义时所起的作用。在像
<SPLITINLINE>
  <SCHEME>
	Lisp，
  </SCHEME>
  <JAVASCRIPT>
	JavaScript，
  </JAVASCRIPT>
</SPLITINLINE>
这样的交互式语言中，如果不指定提供符号 <SPLITINLINE>
  <SCHEME>
	<SCHEMEINLINE>x</SCHEMEINLINE>（甚至连 <SCHEMEINLINE>+</SCHEMEINLINE>）含义的信息，即谈论类似
<SPLITINLINE>
  <SCHEME>
	<SCHEMEINLINE>(+ x 1)</SCHEMEINLINE>
  </SCHEME>
  <JAVASCRIPT>
	<JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE>
  </JAVASCRIPT>
</SPLITINLINE>
表达式的值是毫无意义的。正如我们将在第三章中看到的那样，将环境作为提供求值上下文的概念将在我们对程序执行的理解中发挥重要作用。
<SPLITINLINE>
  <SCHEME>
	<INDEX>组合<SUBINDEX>的求值</SUBINDEX><CLOSE></CLOSE></INDEX>
	<INDEX>求值<SUBINDEX>组合</SUBINDEX><CLOSE></CLOSE></INDEX>
  </SCHEME>
  <JAVASCRIPT>
	<INDEX>运算符组合<SUBINDEX>的求值</SUBINDEX><CLOSE></CLOSE></INDEX>
	<INDEX>求值<SUBINDEX>运算符组合</SUBINDEX><CLOSE></CLOSE></INDEX>
  </JAVASCRIPT>
</SPLITINLINE>
</SCHEME></SPLITINLINE></TEXT> 
   <TEXT>
    请注意，以上给出的求值规则没有处理
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>define</USE><SUBINDEX>为何是一种特殊形式</SUBINDEX></INDEX>
	定义。
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>常量声明<SUBINDEX>为何是一种句法形式</SUBINDEX></INDEX>
	声明。
      </JAVASCRIPT>
    </SPLITINLINE>
    例如，求值
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(define x 3)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    不会将
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	一个相等运算符 <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    应用于两个参数，其中一个参数是
    <SPLITINLINE>
      <SCHEME>
	符号
      </SCHEME>
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>x</SCHEMEINLINE>的值，而另一个为3，因为
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    的目的正是为了将<SCHEMEINLINE>x</SCHEMEINLINE>与一个值关联。
    （也就是说，
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(define x 3)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    不是一个组合。）
  </TEXT> 
   <TEXT>
    <SPLIT>
      <SCHEME>
        对于一般求值规则的这类例外情况被称为
        <INDEX>特殊形式</INDEX>
	    <EM>特殊形式</EM>。
        <SCHEMEINLINE>定义</SCHEMEINLINE>
        是迄今为止我们见过的唯一一个特殊形式的例子，但我们很快还会遇到其他例子。
        <INDEX>求值<SUBINDEX>特殊形式的求值</SUBINDEX></INDEX>
        每个特殊形式都有其各自的求值规则。各种表达式（每种都有其相关的求值规则）构成了编程语言的
        <INDEX>语法<SUBINDEX><ORDER>编程</ORDER>语言</SUBINDEX></INDEX>
        。与大多数其他编程语言相比，Lisp 具有非常简单的语法；也就是说，表达式的求值规则可由一个简单的一般规则和少数特殊形式的专门规则来描述。<FOOTNOTE>
        那些仅作为方便的、可将可以用更统一方式书写的内容的替代表面结构的特殊句法形式，有时被称为
        <EM>语法糖</EM>，借用了<INDEX>Perlis, Alan J.<SUBINDEX>妙语</SUBINDEX></INDEX>
        <INDEX>Landin, Peter</INDEX>
        <INDEX>语法糖</INDEX>
        <INDEX>分号</INDEX>
        <INDEX>分号的癌症</INDEX>
        <INDEX>Pascal</INDEX>
        <INDEX>Lisp<SUBINDEX>Pascal 对比</SUBINDEX></INDEX>
        这一短语，该短语由 Peter Landin 创造。与其他语言的使用者相比，Lisp 程序员通常对语法问题不那么在意。（相反，翻阅任何一本 Pascal 手册，你会发现其中大部分内容都在描述语法。）这种对语法的轻视部分源自 Lisp 的灵活性，使得更换表面语法变得十分容易；部分则来自这样一种观察：许多所谓“方便”的句法结构使语言缺乏统一性，在程序变得庞大和复杂时，反而会带来更多问题而得不偿失。用 Alan Perlis 的话说，
	    <QUOTE>语法糖会导致分号的癌症。</QUOTE></FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
        <TEXT>
	      <PDF_ONLY>
                在<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>中的字母以粗体显示，以表明它
	      </PDF_ONLY>
	      <WEB_ONLY>
                单词 <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>
	      </WEB_ONLY>
	      是 JavaScript 中的
	      <INDEX>关键字</INDEX>
	      <EM>关键字</EM>。关键字具有特定含义，因此不能用作名称。语句中的一个关键字或多个关键字的组合指示 JavaScript 解释器以特殊方式处理该语句。每种
	      <INDEX>句法形式</INDEX>
          <EM>句法形式</EM>都有其各自的求值规则。各种语句和表达式（每个都有其相关的求值规则）构成了编程语言的
          <INDEX>语法<SUBINDEX><ORDER>编程</ORDER>语言</SUBINDEX></INDEX>
          。
        </TEXT>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT> 
</SUBSECTION>
