<SUBSECTION>
  <NAME>
    Representing Sequences
  </NAME>

  <LABEL NAME="sec:sequences"/>
  <TEXT>

    One of the useful structures we can build with pairs is a 
    <INDEX>sequence(s)</INDEX>
    <INDEX>sequence(s)<SUBINDEX>represented by pairs</SUBINDEX></INDEX>
    <INDEX>pair(s)<SUBINDEX>used to represent sequence</SUBINDEX></INDEX>
    <EM>sequence</EM><EMDASH/>an ordered collection of data objects.  There
    are, of course, many ways to represent sequences in terms of pairs.  One
    particularly straightforward representation is illustrated in
    <SPLITINLINE>
      <SCHEME>figure<SPACE/><REF NAME="fig:sequence-of-pairs_scheme"/>,</SCHEME>
      <JAVASCRIPT>figure<SPACE/><REF NAME="fig:sequence-of-pairs"/>,
      </JAVASCRIPT>
    </SPLITINLINE>
    where the sequence 1, 2, 3, 4 is represented as a chain of pairs.  The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of each pair is the
    corresponding item in the chain, and the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of the pair is the next pair in the chain.  The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of the final pair signals the end of the
    <SPLITINLINE>
      <SCHEME>
	sequence by pointing to a
	distinguished value that is not a pair,
      </SCHEME>
      <JAVASCRIPT>
	sequence,
      </JAVASCRIPT>
    </SPLITINLINE>
    represented in box-and-pointer
    diagrams as a diagonal line
    <INDEX>box-and-pointer notation<SUBINDEX>end-of-list marker</SUBINDEX></INDEX>
    and in programs as
    <INDEX>keywords<SUBINDEX><ORDER>null</ORDER><USE>null</USE></SUBINDEX></INDEX>    
    <INDEX><USE>null</USE> (keyword)<SUBINDEX><ORDER>end</ORDER>as end-of-list marker</SUBINDEX></INDEX>
    <INDEX>end-of-list marker</INDEX>
    <SPLITINLINE>
      <SCHEME>the value of the variable <SCHEMEINLINE>nil</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	JavaScript<APOS/>s primitive value
	<JAVASCRIPTINLINE>null</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The entire sequence is constructed by nested
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    operations:
    <SNIPPET PAGE="99">
      <NAME>cons_example</NAME>
      <SCHEME>
(cons 1
      (cons 2
            (cons 3
                  (cons 4 nil))))
      </SCHEME>
      <JAVASCRIPT>
pair(1, 
     pair(2, 
          pair(3, 
               pair(4, null))));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch2-Z-G-13.svg"/>
          <CAPTION>The sequence 1, 2, 3, 4 represented as a chain of pairs.
	  </CAPTION>
          <LABEL NAME="fig:sequence-of-pairs_scheme"/>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch2-Z-G-13.svg"/>
          <CAPTION>The sequence 1, 2, 3, 4 represented as a chain of pairs.
	  </CAPTION>
          <LABEL NAME="fig:sequence-of-pairs"/>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  
  <TEXT>
    Such a sequence of pairs, formed by nested
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>cons</SCHEMEINLINE>es,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE> applications,
      </JAVASCRIPT>
    </SPLITINLINE>
    is called a
    <INDEX>list(s)</INDEX>
    <EM>list</EM>, and
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>our JavaScript environment</JAVASCRIPT>
    </SPLITINLINE>
    provides a primitive called 
    <INDEX><USE>list</USE> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><USE>list</USE> (\textit{ns})</SUBINDEX></INDEX>
    <SCHEMEINLINE>list</SCHEMEINLINE> to help in constructing 
    lists.<FOOTNOTE>In this book, we use <EM>list</EM> to mean a chain of
    pairs terminated by the end-of-list marker.  In contrast, the term
    <INDEX>list structure<SUBINDEX>list vs.</SUBINDEX></INDEX>
    <INDEX>list(s)<SUBINDEX>list structure vs.</SUBINDEX></INDEX>
    <EM>list structure</EM> refers to any data structure made out of pairs, 
    not just to lists.</FOOTNOTE>
    The above sequence could be produced by
    <INDEX><USE>list</USE> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><USE>list</USE> (\textit{ns})</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>(list 1 2 3 4)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(1, 2, 3, 4)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In general, 
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(list a$_{1}$ a$_{2}$ $\ldots$ a$_{n}$)
      </SCHEME>
      <JAVASCRIPT>
list(<META>a</META>$_{1}$, <META>a</META>$_{2}$, $\ldots$, <META>a</META>$_{n}$)
      </JAVASCRIPT>
    </SNIPPET>
    is equivalent to
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(cons a$_{1}$ (cons a$_{2}$ (cons $\ldots$ (cons a$_{n}$ nil) $\ldots$)))
      </SCHEME>
      <JAVASCRIPT>
pair(<META>a</META>$_{1}$, pair(<META>a</META>$_{2}$, pair($\ldots$, pair(<META>a</META>$_{n}$, null)$\ldots$)))
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        Lisp systems conventionally print lists by printing the sequence of
        elements, enclosed in parentheses.  Thus, the data object in
        figure<SPACE/><REF NAME="fig:sequence-of-pairs_scheme"/>
	is printed as
	<SCHEMEINLINE>(1 2 3 4)</SCHEMEINLINE>:
      </SCHEME>
      <JAVASCRIPT>
        Our interpreter prints pairs using a textual representation of
	box-and-pointer diagrams that we call <EM>box notation</EM>.
        <INDEX>list(s)<SUBINDEX>printed representation of</SUBINDEX></INDEX>
	<INDEX><JAVASCRIPTINLINE>[</JAVASCRIPTINLINE><SPACE/><JAVASCRIPTINLINE>,</JAVASCRIPTINLINE><SPACE/><JAVASCRIPTINLINE>]</JAVASCRIPTINLINE> (box notation for pairs)<ORDER>0a21</ORDER></INDEX>
	<INDEX>box notation for pairs</INDEX>
	<INDEX>pair(s)<SUBINDEX>box notation for</SUBINDEX></INDEX>
	<INDEX>notation in this book<SUBINDEX>box notation for data</SUBINDEX></INDEX>
	The result of <JAVASCRIPTINLINE>pair(1, 2)</JAVASCRIPTINLINE>
        is printed as <JAVASCRIPTINLINE>[1, 2]</JAVASCRIPTINLINE>, and
	the data object in figure<SPACE/><REF NAME="fig:sequence-of-pairs"/> 
        is printed as 
        <JAVASCRIPTINLINE>[1, [2, [3, [4, null]]]]</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLIT>
    <SNIPPET PAGE="100">
      <NAME>one_four</NAME>
      <EXAMPLE>one_four_example</EXAMPLE>
      <EXPECTED>[ 2, [ 3, [ 4, null ] ] ]</EXPECTED>
      <SCHEME>
(define one-through-four (list 1 2 3 4))
      </SCHEME>
      <JAVASCRIPT>
const one_through_four = list(1, 2, 3, 4);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="100">
      <REQUIRES>one_four</REQUIRES>
      <NAME>one_four_example</NAME>
      <SCHEME>
one-through-four	    
      </SCHEME>
      <SCHEMEOUTPUT>
(1 2 3 4)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
one_through_four;
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(one_through_four);
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[1, [2, [3, [4, null]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  <!--Nice in Scheme is the convention to put question marks behind test 
      functions. This syntax does not work in JavaScript. I use <TT>list</TT>
      for the test, and <TT>list</TT> for the constructor. Note the JavaScript 
      feature of functions with variable numbers of parameters (accessed in the
      function body using <TT>arguments[i]</TT>, see <TT>js/javascript.js</TT>
      for the implementation of <TT>list</TT>).
  -->
  <SPLIT>
    <SCHEME>
        Be careful not to confuse the expression
	<SCHEMEINLINE>(list 1 2 3 4)</SCHEMEINLINE> with the list
	<SCHEMEINLINE>(1 2 3 4)</SCHEMEINLINE>, which is the result obtained
	when the expression is evaluated.  Attempting to evaluate the
	expression <SCHEMEINLINE>(1 2 3 4)</SCHEMEINLINE> will signal an error
	when the interpreter tries to apply the procedure
        <SCHEMEINLINE>1</SCHEMEINLINE> to arguments 
        <SCHEMEINLINE>2</SCHEMEINLINE>, <SCHEMEINLINE>3</SCHEMEINLINE>, 
        and <SCHEMEINLINE>4</SCHEMEINLINE>.
    </SCHEME>
  </SPLIT>
  </TEXT>
  <TEXT>
    We can think of 
    <INDEX>list(s)<SUBINDEX>manipulation with <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    <INDEX><USE>head</USE> (primitive function)<SUBINDEX><ORDER>list</ORDER>as list operation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as selecting the first item in the list, and of 
    <INDEX><USE>tail</USE> (primitive function)<SUBINDEX><ORDER>list</ORDER>as list operation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as selecting the sublist consisting of all but the first item.  Nested
    applications of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be used to extract the second, third, and subsequent items in the
    list.<SPLITINLINE><SCHEME><FOOTNOTE>Since nested applications of
    <SCHEMEINLINE>car</SCHEMEINLINE> and <SCHEMEINLINE>cdr</SCHEMEINLINE> are
    cumbersome to write, Lisp dialects provide abbreviations for
    them<EMDASH/>for instance, 
    <INDEX>nested applications of <SCHEMEINLINE>car</SCHEMEINLINE> and <SCHEMEINLINE>cdr</SCHEMEINLINE></INDEX>
     <INDEX><USE>cadr</USE></INDEX> 
     <SNIPPET LATEX="yes">
       <SCHEME>
(cadr $\langle arg \rangle$) = (car (cdr $\langle arg \rangle$))
       </SCHEME>
     </SNIPPET>
    The names of all such procedures start with <SCHEMEINLINE>c</SCHEMEINLINE>
    and end with <SCHEMEINLINE>r</SCHEMEINLINE>.  Each
    <SCHEMEINLINE>a</SCHEMEINLINE> between them stands for a 
    <INDEX><USE>ca<ELLIPSIS/>r</USE></INDEX>
    <INDEX><USE>cd<ELLIPSIS/> r</USE></INDEX> 
    <SCHEMEINLINE>car</SCHEMEINLINE> operation and each
    <SCHEMEINLINE>d</SCHEMEINLINE> for a <SCHEMEINLINE>cdr</SCHEMEINLINE>
    operation, to be applied in the same order in which they appear in the
    name.  The names <SCHEMEINLINE>car</SCHEMEINLINE> and 
    <SCHEMEINLINE>cdr</SCHEMEINLINE> persist because simple combinations like
    <SCHEMEINLINE>cadr</SCHEMEINLINE> are
    pronounceable.</FOOTNOTE></SCHEME></SPLITINLINE>
    The constructor 
    <INDEX><USE>pair</USE> (primitive function)<SUBINDEX><ORDER>list</ORDER>as list operation</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    makes a list like the original one, but with an additional item at the
    beginning.
    <SNIPPET PAGE="100">
      <NAME>car_one_four</NAME>
      <REQUIRES>one_four</REQUIRES>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(car one-through-four)
      </SCHEME>
      <SCHEMEOUTPUT>
1
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
head(one_through_four);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="100">
      <NAME>cdr_one_four</NAME>
      <REQUIRES>one_four</REQUIRES>
      <EXPECTED>[ 2, [ 3, [ 4, null ] ] ]</EXPECTED>
      <SCHEME>
(cdr one-through-four)
      </SCHEME>
      <SCHEMEOUTPUT>
(2 3 4)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
tail(one_through_four);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[2, [3, [4, null]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="101">
      <NAME>car_cdr_one_four</NAME>
      <REQUIRES>one_four</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(car (cdr one-through-four))
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
head(tail(one_through_four));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="101">
      <NAME>cons_one_four</NAME>
      <REQUIRES>one_four</REQUIRES>
      <EXPECTED>[ 2, [ 3, [ 4, null ] ] ]</EXPECTED>
      <SCHEME>
(cons 10 one-through-four)
      </SCHEME>
      <SCHEMEOUTPUT>
(10 1 2 3 4)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pair(10, one_through_four);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(tail(pair(10, one_through_four)));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[10, [1, [2, [3, [4, null]]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="101">
      <NAME>cons5_one_four</NAME>
      <REQUIRES>one_four</REQUIRES>
      <EXPECTED>[ 2, [ 3, [ 4, null ] ] ]</EXPECTED>
      <SCHEME>
(cons 5 one-through-four)
      </SCHEME>
      <SCHEMEOUTPUT>
(5 1 2 3 4)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pair(5, one_through_four);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(tail(pair(5, one_through_four)));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[5, [1, [2, [3, [4, null]]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLIT>
    <SCHEME>
        The value of <SCHEMEINLINE>nil</SCHEMEINLINE>, used to terminate the
	chain of pairs, can be thought of as a sequence of no elements, the 
        <INDEX>empty list</INDEX>
         <INDEX><USE>nil</USE></INDEX>
        <EM>empty list</EM>.  The word <EM>nil</EM> is a contraction of the
	Latin word <EM>nihil</EM>, which means
	<QUOTE>nothing.</QUOTE><FOOTNOTE>It<APOS/>s remarkable how much energy
	in the standardization of Lisp dialects has been dissipated in
	arguments that are literally over nothing: Should
	<SCHEMEINLINE>nil</SCHEMEINLINE> be an ordinary name? Should the value
	of <SCHEMEINLINE>nil</SCHEMEINLINE> be a symbol?  Should it be a list?
        Should it be a pair?  
         <INDEX><USE>nil</USE><SUBINDEX><ORDER>ordinary</ORDER>as ordinary variable in Scheme</SUBINDEX></INDEX>
        In Scheme, <SCHEMEINLINE>nil</SCHEMEINLINE> is an ordinary name, which
	we use in this section as a variable whose value is the end-of-list
	marker (just as <SCHEMEINLINE>true</SCHEMEINLINE> is an ordinary
	variable that has a true value).  Other dialects of Lisp, including
	Common Lisp, treat <SCHEMEINLINE>nil</SCHEMEINLINE> as a special
	symbol.  The
        <INDEX>Common Lisp<SUBINDEX>treatment of <SCHEMEINLINE>nil</SCHEMEINLINE></SUBINDEX></INDEX>
        authors of this book, who have endured too many language
	standardization brawls, would like to avoid the entire issue.  Once we
        have introduced quotation in
	section<SPACE/><REF NAME="sec:symbolic-data"/>, we will denote the
	empty list as <SCHEMEINLINE>'()</SCHEMEINLINE> and dispense with the
        variable <SCHEMEINLINE>nil</SCHEMEINLINE> entirely.</FOOTNOTE>
    </SCHEME> 
    <JAVASCRIPT>
        The value <JAVASCRIPTINLINE>null</JAVASCRIPTINLINE>, used to terminate
	the chain of pairs, can be thought of as a sequence of no elements, the 
        <INDEX>empty list</INDEX>
        <INDEX><USE>null</USE> (keyword)<SUBINDEX><ORDER>empty</ORDER>as empty list</SUBINDEX></INDEX> 
        <EM>empty list</EM>.<FOOTNOTE>The value
	<JAVASCRIPTINLINE>null</JAVASCRIPTINLINE> is used in JavaScript for
	various purposes, but in this book we shall only use it to
	represent the empty list.</FOOTNOTE>
    </JAVASCRIPT>
  </SPLIT>
</TEXT>
<SPLIT>
  <JAVASCRIPT>
    <TEXT>
      Box notation is sometimes difficult to read. In this book, when we want to
      indicate the list nature of a data structure, we will employ the
      alternative
      <INDEX>notation in this book<SUBINDEX>list notation for data</SUBINDEX></INDEX>
      <INDEX>list notation for data</INDEX>
      <EM>list notation</EM>: Whenever possible, list notation uses
      applications
      of <SCHEMEINLINE>list</SCHEMEINLINE> whose evaluation would result in the
      desired structure. For example, instead of the box notation
      <SNIPPET EVAL="no">
	<JAVASCRIPT_OUTPUT>
[1, [[2, 3], [[4, [5, null]], [6, null]]]]
	</JAVASCRIPT_OUTPUT>
      </SNIPPET>
      we write <!-- <PDF_ONLY>\enlargethispage{13pt}</PDF_ONLY> -->
      <SNIPPET EVAL="no">
	<JAVASCRIPT_OUTPUT>
list(1, [2, 3], list(4, 5), 6)
	</JAVASCRIPT_OUTPUT>
      </SNIPPET>
      in list notation.<FOOTNOTE>Our JavaScript environment provides
      a primitive function
      <JAVASCRIPTINLINE>display_list</JAVASCRIPTINLINE>
      that works like the primitive function
      <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>, except that
      it uses list notation instead of box notation.
    </FOOTNOTE>
    </TEXT>
  </JAVASCRIPT>
</SPLIT>
  <SUBHEADING>
    <NAME>List operations</NAME>
  </SUBHEADING>

  <INDEX>list(s)<SUBINDEX>operations on</SUBINDEX><OPEN/></INDEX>
  <INDEX>list(s)<SUBINDEX>techniques for manipulating</SUBINDEX><OPEN/></INDEX>
  <TEXT>
    The use of pairs to represent sequences of elements as lists is accompanied
    by conventional programming techniques for manipulating lists by
    successively 
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>cdr</USE> down a list</INDEX>
	<INDEX>list(s)<SUBINDEX><ORDER>cdring</ORDER><SCHEMEINLINE>cdr</SCHEMEINLINE>ing down</SUBINDEX></INDEX>
	<QUOTE><SCHEMEINLINE>cdr</SCHEMEINLINE>ing down</QUOTE>
	the lists.
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>walking down a list with <JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></INDEX>
	<INDEX>list(s)<SUBINDEX>walking down with <JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></SUBINDEX></INDEX>
	using <JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE> to walk down the lists.
      </JAVASCRIPT>
    </SPLITINLINE>
    For example, the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>list(s)<SUBINDEX><ORDER>nth</ORDER><LATEXINLINE>$n$</LATEXINLINE>th element of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>list-ref</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list_ref</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments a list and a number <LATEXINLINE>$n$</LATEXINLINE> and
    returns the <LATEXINLINE>$n$</LATEXINLINE>th item of the list.  It is
    customary to number the elements of the list beginning with 0.  The method
    for computing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>list-ref</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list_ref</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the following:
    <UL>
      <LI>
	For <LATEXINLINE>$n=0$</LATEXINLINE>,
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>list-ref</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>list_ref</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	should return the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of the list.
      </LI>
      <LI>
	Otherwise,
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>list-ref</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>list_ref</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	should return  the <LATEXINLINE>$(n-1)$</LATEXINLINE>st item of the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of the list.
      </LI>
    </UL>
    <SNIPPET PAGE="101">
      <INDEX><DECLARATION>list_ref</DECLARATION></INDEX>
      <NAME>list_ref</NAME>
      <EXAMPLE>list_ref_example</EXAMPLE>
      <SCHEME>
(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))
      </SCHEME>
      <JAVASCRIPT>
function list_ref(items, n) {
    return n === 0
           ? head(items)
           : list_ref(tail(items), n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="101">
      <NAME>list_ref_example</NAME>
      <REQUIRES>list_ref</REQUIRES>
      <EXPECTED>16</EXPECTED>
      <SCHEME>
(define squares (list 1 4 9 16 25))
(list-ref squares 3)
      </SCHEME>
      <SCHEMEOUTPUT>
16
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
const squares = list(1, 4, 9, 16, 25);

list_ref(squares, 3);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
16
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="101" HIDE="yes">
      <NAME>manual_squares</NAME>
      <SCHEME>
(define squares (list 1 4 9 16 25))
      </SCHEME>
      <JAVASCRIPT>
const squares = list(1, 4, 9, 16, 25);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="101" HIDE="yes">
      <NAME>manual_odds</NAME>
      <SCHEME>
(define odds (list 1 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
const odds = list(1, 3, 5, 7);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Often we
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>cdr</SCHEMEINLINE> down the whole list.
      </SCHEME>
      <JAVASCRIPT>
	walk down the whole list.
      </JAVASCRIPT>
    </SPLITINLINE>
    To aid in this,
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>our JavaScript environment</JAVASCRIPT>
    </SPLITINLINE>
    includes a primitive
    predicate
    <INDEX><USE>is_null</USE> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><USE>is_null</USE> (\textit{ns})</SUBINDEX></INDEX>
    <INDEX>empty list<SUBINDEX>recognizing with <JAVASCRIPTINLINE>is_null</JAVASCRIPTINLINE></SUBINDEX></INDEX>
    <INDEX><USE>null</USE> (keyword)<SUBINDEX>recognizing with <JAVASCRIPTINLINE>is_null</JAVASCRIPTINLINE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>null?</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_null</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which tests whether its argument is the empty list.  The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>length</USE></INDEX>
    <INDEX>list(s)<SUBINDEX>length of</SUBINDEX></INDEX>
    <SCHEMEINLINE>length</SCHEMEINLINE>, which returns the number of items in
    a list, illustrates this typical pattern of use:
    <SNIPPET PAGE="102">
      <INDEX><DECLARATION>length</DECLARATION><SUBINDEX>recursive version</SUBINDEX></INDEX>
      <NAME>length</NAME>
      <EXAMPLE>length_example</EXAMPLE>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))
      </SCHEME>
      <JAVASCRIPT>
function length(items) {
    return is_null(items)
           ? 0
           : 1 + length(tail(items));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="102">
      <NAME>length_example</NAME>
      <SCHEME>
(define odds (list 1 3 5 7))
(length odds)
      </SCHEME>
      <JAVASCRIPT>
const odds = list(1, 3, 5, 7);

length(odds);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
4
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    The <SCHEMEINLINE>length</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    implements a simple recursive plan. The reduction step is:
    <UL>
      <LI>
	The <SCHEMEINLINE>length</SCHEMEINLINE> of any list is 1 plus the
	<SCHEMEINLINE>length</SCHEMEINLINE> of the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of the list.
      </LI>
    </UL>
    This is applied successively until we reach the base case:
    <UL>
      <LI>
	The <SCHEMEINLINE>length</SCHEMEINLINE> of the empty list is 0.
      </LI>
    </UL>
    We could also compute <SCHEMEINLINE>length</SCHEMEINLINE> in an iterative
    style:
    <SNIPPET PAGE="102">
      <INDEX><DECLARATION>length</DECLARATION><SUBINDEX>iterative version</SUBINDEX></INDEX>
      <NAME>length_iter</NAME>
      <EXAMPLE>length_example</EXAMPLE>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(define (length items)
  (define (length-iter a count)
    (if (null? a)
        count
        (length-iter (cdr a) (+ 1 count))))
  (length-iter items 0))
      </SCHEME>
      <JAVASCRIPT>
function length(items) {
    function length_iter(a, count) {
        return is_null(a)
               ? count
               : length_iter(tail(a), count + 1);
    }
    return length_iter(items, 0);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Another conventional programming technique is to 
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>cons</USE> up a list</INDEX>
	<INDEX>list(s)<SUBINDEX><ORDER>consing</ORDER><SCHEMEINLINE>cons</SCHEMEINLINE>ing up</SUBINDEX></INDEX>
	<QUOTE><SCHEMEINLINE>cons</SCHEMEINLINE> up</QUOTE>
	the heads and tails of an answer list while
      <SCHEMEINLINE>cdr</SCHEMEINLINE>ing down a list,
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>constructing a list with <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></INDEX>
	<INDEX>list(s)<SUBINDEX>constructing with <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></SUBINDEX></INDEX>
	<INDEX>adjoining to a list with <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></INDEX>
	<INDEX>list(s)<SUBINDEX>adjoining to with <JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></SUBINDEX></INDEX>
	construct an answer list by adjoining elements to
	the front of the list with
	<SCHEMEINLINE>pair</SCHEMEINLINE>
	while walking down a list using
	<JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    as in the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>list(s)<SUBINDEX>combining with <SCHEMEINLINE>append</SCHEMEINLINE></SUBINDEX></INDEX>
    <SCHEMEINLINE>append</SCHEMEINLINE>, which takes two lists as arguments and
    combines their elements to make a new list:
    <SNIPPET PAGE="102">
      <NAME>append_example</NAME>
      <REQUIRES>append</REQUIRES>
      <REQUIRES>manual_squares</REQUIRES>
      <REQUIRES>manual_odds</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
(append squares odds)
      </SCHEME>
      <SCHEMEOUTPUT>
(1 4 9 16 25 1 3 5 7)	
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
append(squares, odds);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(append(squares, odds));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(1, 4, 9, 16, 25, 1, 3, 5, 7)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="102">
      <NAME>append_example2</NAME>
      <REQUIRES>append</REQUIRES>
      <REQUIRES>manual_squares</REQUIRES>
      <REQUIRES>manual_odds</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
(append odds squares)
      </SCHEME>
      <SCHEMEOUTPUT>
(1 3 5 7 1 4 9 16 25)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
append(odds, squares);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
length(append(odds, squares));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
list(1, 3, 5, 7, 1, 4, 9, 16, 25)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Append</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>append</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is also implemented using a recursive plan. To
    <SCHEMEINLINE>append</SCHEMEINLINE> lists
    <SCHEMEINLINE>list1</SCHEMEINLINE> and <SCHEMEINLINE>list2</SCHEMEINLINE>,
    do the following:
    <UL>
      <LI>
	If <SCHEMEINLINE>list1</SCHEMEINLINE> is the empty list, then the
      result is just <SCHEMEINLINE>list2</SCHEMEINLINE>.
      </LI>
      <LI>
	Otherwise, <SCHEMEINLINE>append</SCHEMEINLINE> the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of <SCHEMEINLINE>list1</SCHEMEINLINE> and 
	<SCHEMEINLINE>list2</SCHEMEINLINE>, and
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>adjoin</JAVASCRIPT>
	</SPLITINLINE>
	the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of <SCHEMEINLINE>list1</SCHEMEINLINE>
	<SPLITINLINE>
	  <SCHEME>
	    onto the result:
	  </SCHEME>
	  <JAVASCRIPT>
	    to the result:
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
    </UL>
    <SNIPPET PAGE="103" POSTPADDING="no">
      <INDEX><DECLARATION>append</DECLARATION></INDEX>
      <NAME>append</NAME>
      <EXAMPLE>append_example</EXAMPLE>
      <EXPECTED>9</EXPECTED>
      <SCHEME>
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))
      </SCHEME>
      <JAVASCRIPT>
function append(list1, list2) {
    return is_null(list1)
           ? list2
           : pair(head(list1), append(tail(list1), list2));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <EXERCISE>
    <LABEL NAME="ex:last"/> 
    Define a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>last_pair</USE></INDEX> 
    <INDEX>list(s)<SUBINDEX>last pair of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>last-pair</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>last_pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that returns the list that contains only the last element of a given
    (nonempty) list:
    <SNIPPET PAGE="104" HIDE="yes">
      <NAME>last_pair_by_student</NAME>
      <SCHEME>
;; last-pair to be given by student
      </SCHEME>
      <JAVASCRIPT>
// last_pair to be given by student
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="103" POSTPADDING="no">
      <NAME>last_pair_example</NAME>
      <REQUIRES>last_pair_by_student</REQUIRES>
      <SCHEME>
(last-pair (list 23 72 149 34))
      </SCHEME>
      <SCHEMEOUTPUT>
(34)	
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
last_pair(list(23, 72, 149, 34));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
list(34)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET>
	<NAME>last_pair_definition</NAME>
	<EXAMPLE>last_pair_example</EXAMPLE>
	<EXPECTED>[ 34, null ]</EXPECTED>
	<JAVASCRIPT>
function last_pair(items) {
    return is_null(tail(items))
           ? items
           : last_pair(tail(items));
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:reverse"/>
    Define a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>reverse</USE></INDEX> 
    <INDEX>list(s)<SUBINDEX>reversing</SUBINDEX></INDEX>
    <SCHEMEINLINE>reverse</SCHEMEINLINE> that takes a list as argument and
    returns a list of the same elements in reverse order:
    <SNIPPET PAGE="103" POSTPADDING="no">
      <NAME>reverse_example</NAME>
      <SCHEME>
(reverse (list 1 4 9 16 25))
      </SCHEME>
      <SCHEMEOUTPUT>
(25 16 9 4 1)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
	reverse(list(1, 4, 9, 16, 25));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
list(25, 16, 9, 4, 1)
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SOLUTION>
      Naive reverse (what is the run time?):
      <SNIPPET>
	<NAME>naive_reverse_definition</NAME>
	<EXAMPLE>reverse_example_2</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>
function reverse(items) {
    return is_null(items)
           ? null
           : append(reverse(tail(items)),
	            pair(head(items), null));
}
	</JAVASCRIPT>
      </SNIPPET>
      A better version:
      <SNIPPET>
	<NAME>reverse</NAME>
	<EXAMPLE>reverse_example_2</EXAMPLE>
	<EXPECTED>25</EXPECTED>
	<JAVASCRIPT>   
function reverse(items) {
    function reverse_iter(items, result) {
        return is_null(items)
               ? result
               : reverse_iter(tail(items),
	                      pair(head(items), result));
    }
    return reverse_iter(items, null);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
      Consider the 
      <INDEX>counting change</INDEX>
      change-counting program of
      section<SPACE/><REF NAME="sec:tree-recursion"/>.  It would be nice to be
      able to easily change the currency used by the program, so that we could
      compute the number of ways to change a British pound, for example.  As
      the program is written, the knowledge of the currency is distributed
      partly into the
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>first-denomination</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>first_denomination</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      and partly into the
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>count-change</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>count_change</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      (which knows
      that there are five kinds of U.S. coins).
      It would be nicer
      to be able to supply a list of coins to be used for making change.
    <TEXT>
      We want to rewrite the
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      <SCHEMEINLINE>cc</SCHEMEINLINE> so that its second argument is a list of
      the values of the coins to use rather than an integer specifying which
      coins to use.  We could then have lists that defined each kind of
      currency:
      <SNIPPET PAGE="103">
        <NAME>us_coins</NAME>
        <SCHEME>
(define us-coins (list 50 25 10 5 1))

(define uk-coins (list 100 50 20 10 5 2 1))
        </SCHEME>
        <JAVASCRIPT>
const us_coins = list(50, 25, 10, 5, 1);
const uk_coins = list(100, 50, 20, 10, 5, 2, 1);
        </JAVASCRIPT>
      </SNIPPET>
      We could then call <SCHEMEINLINE>cc</SCHEMEINLINE> as follows:
      <SNIPPET PAGE="103">
        <NAME>cc_example</NAME>
        <REQUIRES>cc</REQUIRES>
        <REQUIRES>us_coins</REQUIRES>
        <SCHEME>
(cc 100 us-coins)
        </SCHEME>
        <SCHEMEOUTPUT>
292
        </SCHEMEOUTPUT>
        <JAVASCRIPT>
cc(100, us_coins);
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
292
	</JAVASCRIPT_OUTPUT>
      </SNIPPET>
      To do this will require changing the program
      <SCHEMEINLINE>cc</SCHEMEINLINE> somewhat.  It will still have the same
      form, but it will access its second argument differently, as follows:
      <SNIPPET PAGE="104" HIDE="yes">
        <NAME>cc_helpers</NAME>
        <SCHEME>
;; first-denomination, except-first-denomination
;; and no-more? to be given by student
        </SCHEME>
        <JAVASCRIPT>
// first_denomination, except_first_denomination
// and no_more to be given by student
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="104">
        <NAME>cc</NAME>
        <REQUIRES>cc_helpers</REQUIRES>
	<EXAMPLE>cc_example</EXAMPLE>
        <SCHEME>
(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (&lt; amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination coin-values))
            (cc (- amount
                   (first-denomination coin-values))
                coin-values)))))
        </SCHEME>
        <JAVASCRIPT>
function cc(amount, coin_values) {
    return amount === 0
           ? 1
           : amount &lt; 0 || no_more(coin_values)
           ? 0
           : cc(amount, except_first_denomination(coin_values)) +
             cc(amount - first_denomination(coin_values), coin_values);
}
        </JAVASCRIPT>
      </SNIPPET>
      Define the
      <SPLITINLINE>
	<SCHEME>procedures</SCHEME>
	<JAVASCRIPT>functions</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>first-denomination</SCHEMEINLINE>,</SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>first_denomination</JAVASCRIPTINLINE>,
	</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>except-first-denomination</SCHEMEINLINE>,</SCHEME>
	<JAVASCRIPT>
	  <JAVASCRIPTINLINE>except_first_denomination</JAVASCRIPTINLINE>,
	</JAVASCRIPT>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>no-more?</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>no_more</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      in terms of primitive operations on list structures.  Does the order of
      the list
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>coin-values</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>coin_values</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      affect the answer produced by <SCHEMEINLINE>cc</SCHEMEINLINE>?
      Why or why not?
    </TEXT>
    <SOLUTION>
      <SNIPPET>
	<NAME>exercise_2_19_solution</NAME>
	<REQUIRES>cc</REQUIRES>
	<EXAMPLE>cc_example</EXAMPLE>
	<EXPECTED>292</EXPECTED>
	<JAVASCRIPT>
function first_denomination(coin_values) {
    return head(coin_values);
}
function except_first_denomination(coin_values) {
    return tail(coin_values);
}
function no_more(coin_values) {
    return is_null(coin_values);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      The order of the list <JAVASCRIPTINLINE>coin_values</JAVASCRIPTINLINE>
      does not affect the answer given by any correct solution of the problem,
      because the given list represents an unordered collection of
      denominations.
    </SOLUTION>
    <LABEL NAME="ex:2_19"/>
  </EXERCISE>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<LABEL NAME="ex:dotted-arglist"/>
        <INDEX>dotted-tail notation<SUBINDEX><ORDER>procedure</ORDER>for procedure parameters</SUBINDEX></INDEX>
        <INDEX><DECLARATION>define</DECLARATION><SUBINDEX><ORDER>dotted</ORDER>with dotted-tail notation</SUBINDEX></INDEX>
        <INDEX>argument(s)<SUBINDEX>arbitrary number of</SUBINDEX></INDEX>
        <INDEX>procedure<SUBINDEX>arbitrary number of arguments</SUBINDEX></INDEX>
        The procedures
        <SCHEMEINLINE>+</SCHEMEINLINE>, <SCHEMEINLINE>*</SCHEMEINLINE>, and
	<SCHEMEINLINE>list</SCHEMEINLINE> take arbitrary numbers of arguments.
	One way to define such procedures is to use
	<SCHEMEINLINE>define</SCHEMEINLINE> with <EM>dotted-tail notation</EM>.
	In a procedure definition, a parameter list that has a dot before the
	last parameter name indicates that, when the procedure is called, the
	initial parameters (if any) will have as values the initial arguments, 
        as usual, but the final parameter<APOS/>s value will be a <EM>list</EM>
	of any remaining arguments. For instance, given the definition
        <SNIPPET>
          <SCHEME>
            (define (f x y . z) $\langle \textit{body} \rangle$)
          </SCHEME>
        </SNIPPET>
        the procedure <SCHEMEINLINE>f</SCHEMEINLINE> can be called with two or
	more arguments. If we evaluate
        <SNIPPET>
          <SCHEME>
            (f 1 2 3 4 5 6)
          </SCHEME>
        </SNIPPET>
        then in the body of <SCHEMEINLINE>f</SCHEMEINLINE>,
	<SCHEMEINLINE>x</SCHEMEINLINE> will be 1,
	<SCHEMEINLINE>y</SCHEMEINLINE> will be 2, and
	<SCHEMEINLINE>z</SCHEMEINLINE> will be the list
	<SCHEMEINLINE>(3 4 5 6)</SCHEMEINLINE>. Given the definition
        <SNIPPET>
          <SCHEME>
(define (g . w) $\langle \textit{body} \rangle$)
          </SCHEME>
        </SNIPPET>
        the procedure <SCHEMEINLINE>g</SCHEMEINLINE> can be called with zero or
	more arguments. If we evaluate
        <SNIPPET>
          <SCHEME>
            (g 1 2 3 4 5 6)
          </SCHEME>
        </SNIPPET>
        then in the body of <SCHEMEINLINE>g</SCHEMEINLINE>,
	<SCHEMEINLINE>w</SCHEMEINLINE> will be the list
	<SCHEMEINLINE>(1 2 3 4 5 6)</SCHEMEINLINE>.<FOOTNOTE>To define
	<SCHEMEINLINE>f</SCHEMEINLINE> and <SCHEMEINLINE>g</SCHEMEINLINE> using
        <INDEX><DECLARATION>lambda</DECLARATION><SUBINDEX><ORDER>dotted</ORDER>with dotted-tail notation</SUBINDEX></INDEX>
        <SCHEMEINLINE>lambda</SCHEMEINLINE> we would write
        <SNIPPET EVAL="no">
          <SCHEME>
(define f (lambda (x y . z) body))
(define g (lambda w body))
          </SCHEME>
        </SNIPPET></FOOTNOTE>
        Use this notation to write a procedure
	<SCHEMEINLINE>same-parity</SCHEMEINLINE> that takes one or more integers
        and returns a list of all the arguments that have the same even-odd
        parity as the first argument.  For example, 
        <SNIPPET PAGE="104">
          <NAME>same_parity</NAME>
          <SCHEME>
	    ;; same-parity to be given by student
          </SCHEME>
        </SNIPPET>
        <SNIPPET PAGE="104">
          <NAME>same_parity_example</NAME>
          <REQUIRES>same_parity</REQUIRES>
          <SCHEME>
(same-parity 1 2 3 4 5 6 7)
          </SCHEME>
          <SCHEMEOUTPUT>
(1 3 5 7)
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET PAGE="104">
          <NAME>same_parity_example2</NAME>
          <REQUIRES>same_parity</REQUIRES>
          <SCHEME>
(same-parity 2 3 4 5 6 7)
          </SCHEME>
          <SCHEMEOUTPUT>
(2 4 6)
          </SCHEMEOUTPUT>
        </SNIPPET>
      </EXERCISE>
      <INDEX>list(s)<SUBINDEX>operations on</SUBINDEX><CLOSE/></INDEX>
      <INDEX>list(s)<SUBINDEX>techniques for manipulating</SUBINDEX><CLOSE/></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	In the presence of higher-order functions, it is not strictly necessary
	for functions to have multiple parameters; one would
	suffice. If we have a function such as
	<JAVASCRIPTINLINE>plus</JAVASCRIPTINLINE> that naturally requires two
	arguments, we could write a variant of the function to which we pass
	the arguments one at a time. An application of the variant to the
	first argument could return a function that we can then apply to the
	second argument, and so on. This practice<EMDASH/>called
	<INDEX>currying</INDEX>
	<EM>currying</EM> and named after the American mathematician and
	logician
	<INDEX>Curry, Haskell Brooks</INDEX>
	Haskell Brooks Curry<EMDASH/>is quite common in programming
	languages such as
	<INDEX>Haskell</INDEX>
	Haskell and
	<INDEX>Ocaml</INDEX>
	OCaml. In JavaScript, a curried
	version of <JAVASCRIPTINLINE>plus</JAVASCRIPTINLINE> looks as follows.
	<SNIPPET>
	  <NAME>currying_plus</NAME>
	  <EXAMPLE>curry_example</EXAMPLE>
	  <EXPECTED>7</EXPECTED>
	  <JAVASCRIPT>
function plus_curried(x) {	    
    return y => x + y;
}
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET HIDE="yes">
	  <NAME>curry_example</NAME>
	  <JAVASCRIPT>
plus_curried(3)(4);
	  </JAVASCRIPT>
	</SNIPPET>
	Write a function <JAVASCRIPTINLINE>brooks</JAVASCRIPTINLINE> that
	takes a curried function as first argument and as second argument a list
	of arguments to which the curried function is then applied, one by one,
	in the given order. For example, the following application of
	<JAVASCRIPTINLINE>brooks</JAVASCRIPTINLINE> should have the
	same effect as
	<JAVASCRIPTINLINE>plus_curried(3)(4)</JAVASCRIPTINLINE>:
	<SNIPPET HIDE="yes">
	  <NAME>currying</NAME>
	  <JAVASCRIPT>
// brooks to be written by the student
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET>
	  <NAME>currying_example</NAME>
	  <REQUIRES>currying_plus</REQUIRES>
	  <REQUIRES>currying</REQUIRES>
	  <JAVASCRIPT>
brooks(plus_curried, list(3, 4));
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
7
	  </JAVASCRIPT_OUTPUT>
	</SNIPPET>
	While we are at it, we might as well curry the function
	<JAVASCRIPTINLINE>brooks</JAVASCRIPTINLINE>! Write a function 
	<JAVASCRIPTINLINE>brooks_curried</JAVASCRIPTINLINE> that can be applied
	as follows:
	<SNIPPET HIDE="yes">
	  <NAME>currying_currying</NAME>
	  <JAVASCRIPT>
	    // brooks_curried to be written by the student
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET>
	  <NAME>currying_currying_example</NAME>
	  <REQUIRES>currying_plus</REQUIRES>
	  <REQUIRES>currying_currying</REQUIRES>
	  <JAVASCRIPT>
brooks_curried(list(plus_curried, 3, 4));
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
7
	  </JAVASCRIPT_OUTPUT>
	</SNIPPET>
	With this function <JAVASCRIPTINLINE>brooks_curried</JAVASCRIPTINLINE>,
	what are the results of evaluating the following two statements?
	<SNIPPET>
	  <NAME>currying_currying_example_2</NAME>
	  <REQUIRES>currying_plus</REQUIRES>
	  <REQUIRES>currying_currying</REQUIRES>
	  <JAVASCRIPT>
brooks_curried(list(brooks_curried,
                    list(plus_curried, 3, 4)));
	  </JAVASCRIPT>
	</SNIPPET>
	<SNIPPET POSTPADDING="no">
	  <NAME>currying_currying_example_3</NAME>
	  <REQUIRES>currying_plus</REQUIRES>
	  <REQUIRES>currying_currying</REQUIRES>
	  <JAVASCRIPT>
brooks_curried(list(brooks_curried,
                    list(brooks_curried, 
                         list(plus_curried, 3, 4))));
	  </JAVASCRIPT>
	</SNIPPET>
	<SOLUTION>
	  <OL>
	    <LI>
	      <SNIPPET>
		<NAME>brooks_solution</NAME>
		<REQUIRES>currying_plus</REQUIRES>
		<EXAMPLE>currying_example</EXAMPLE>
		<EXPECTED>7</EXPECTED>
		<JAVASCRIPT>
function brooks(f, items) {
    return is_null(items)
           ? f
           : brooks(f(head(items)), tail(items));
}	   
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	    <LI>
	      <SNIPPET>
		<NAME>brooks_curried_solution</NAME>
		<REQUIRES>brooks_solution</REQUIRES>
		<EXAMPLE>currying_currying_example</EXAMPLE>
		<EXPECTED>7</EXPECTED>
		<JAVASCRIPT>
function brooks_curried(items) {
    return brooks(head(items), tail(items));
}	   
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	    <LI>
	      The statement 
	      <SNIPPET>
		<NAME>currying_currying_example_4</NAME>
		<REQUIRES>currying_plus</REQUIRES>
		<REQUIRES>brooks_curried_solution</REQUIRES>
		<EXPECTED>7</EXPECTED>
		<JAVASCRIPT>
brooks_curried(list(brooks_curried,
                    list(plus_curried, 3, 4)));
		</JAVASCRIPT>
	      </SNIPPET>
	      of course evaluates to 7, as does
	    </LI>
	    <LI>
	      <SNIPPET>
		<NAME>currying_currying_example_5</NAME>
		<REQUIRES>currying_plus</REQUIRES>
		<REQUIRES>brooks_curried_solution</REQUIRES>
		<EXPECTED>7</EXPECTED>
		<JAVASCRIPT>
brooks_curried(list(brooks_curried,
                    list(brooks_curried, 
                         list(plus_curried, 3, 4))));
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	  </OL>
	</SOLUTION>
	<LABEL NAME="ex:2_20"/>
      </EXERCISE>
      <INDEX>list(s)<SUBINDEX>operations on</SUBINDEX><CLOSE/></INDEX>
      <INDEX>list(s)<SUBINDEX>techniques for manipulating</SUBINDEX><CLOSE/></INDEX>
    </JAVASCRIPT>
  </SPLIT>

  <SUBHEADING>
    <NAME>Mapping over lists</NAME>
  </SUBHEADING>

  <INDEX>list(s)<SUBINDEX>mapping over</SUBINDEX><OPEN/></INDEX>
  <INDEX>mapping<SUBINDEX><ORDER>list</ORDER>over lists</SUBINDEX><OPEN/></INDEX>
  <TEXT>
    One extremely useful operation is to apply some transformation to each
    element in a list and generate the list of results. For instance, the
    following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    scales each number in a list by a given factor:
    <SNIPPET PAGE="105">
      <INDEX><DECLARATION>scale_list</DECLARATION></INDEX>
      <NAME>scale_list</NAME>
      <EXAMPLE>scale_list_example</EXAMPLE>
      <EXPECTED>[ 30, [ 40, [ 50, null ] ] ]</EXPECTED>
      <SCHEME>
(define (scale-list items factor)
  (if (null? items)
      nil
      (cons (* (car items) factor)
            (scale-list (cdr items) factor))))
      </SCHEME>
      <JAVASCRIPT>
function scale_list(items, factor) {
    return is_null(items)
           ? null
           : pair(head(items) * factor, 
                  scale_list(tail(items), factor));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="105">
      <NAME>scale_list_example</NAME>
      <SCHEME>
(scale-list (list 1 2 3 4 5) 10)
      </SCHEME>
      <SCHEMEOUTPUT>
(10 20 30 40 50)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
scale_list(list(1, 2, 3, 4, 5), 10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[10, [20, [30, [40, [50, null]]]]]
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_TEST>
tail(tail(scale_list(list(1, 2, 3, 4, 5), 10)));
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>
  <TEXT>
    We can abstract this general idea and capture it as a common pattern
    expressed as a higher-order
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
    <JAVASCRIPT>function,</JAVASCRIPT></SPLITINLINE>
    just as in section<SPACE/><REF NAME="sec:higher-order-procedures"/>.  The
    higher-order
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    here is called <SCHEMEINLINE>map</SCHEMEINLINE>.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Map</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>map</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes as arguments a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of one argument and a list, and returns a list of the results produced by
    applying the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to each element in the list:<SPLITINLINE><SCHEME><FOOTNOTE>
    <LABEL NAME="foot:generalmap"/>	  
    Scheme standardly provides a 
     <INDEX><USE>map</USE><SUBINDEX>with multiple arguments</SUBINDEX></INDEX> 
    <SCHEMEINLINE>map</SCHEMEINLINE>
    procedure that is more general than the one described here. This more
    general <SCHEMEINLINE>map</SCHEMEINLINE> takes a procedure of
    <LATEXINLINE>$n$</LATEXINLINE> arguments, together with
    <LATEXINLINE>$n$</LATEXINLINE> lists, and applies the procedure to all the
    first elements of the lists, all the second elements of the lists, and so
    on, returning a list of the results.  For example:
    <SNIPPET PAGE="105">
      <NAME>general_map_example</NAME>
      <REQUIRES>general_map</REQUIRES>
      <REQUIRES>plus</REQUIRES>
      <SCHEME>
(map + (list 1 2 3) (list 40 50 60) (list 700 800 900))
        </SCHEME>
        <SCHEMEOUTPUT>
(741 852 963)
        </SCHEMEOUTPUT>
      </SNIPPET>
      <SNIPPET PAGE="105">
        <NAME>general_map_example2</NAME>
        <REQUIRES>general_map</REQUIRES>
        <SCHEME>
(map (lambda (x y) (+ x (* 2 y)))
     (list 1 2 3)
     (list 4 5 6))
        </SCHEME>
      </SNIPPET>
    </FOOTNOTE></SCHEME></SPLITINLINE>
    <SNIPPET PAGE="105">
      <INDEX><DECLARATION>map</DECLARATION></INDEX> 
      <NAME>map</NAME>
      <EXAMPLE>map_example</EXAMPLE>
      <EXPECTED>[ 2.5, [ 11.6, [ 17, null ] ] ]</EXPECTED>
      <SCHEME>
(define (map proc items)
  (if (null? items)
      nil
      (cons (proc (car items))
            (map proc (cdr items)))))
      </SCHEME>
      <JAVASCRIPT>
function map(fun, items) {
    return is_null(items)
           ? null
           : pair(fun(head(items)), 
                  map(fun, tail(items)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="105">
      <NAME>map_example</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>map</REQUIRES>
      <EXPECTED>[ 2.5, [ 11.6, [ 17, null ] ] ]</EXPECTED>
      <SCHEME>
(map abs (list -10 2.5 -11.6 17))
      </SCHEME>
      <SCHEMEOUTPUT>
(10 2.5 11.6 17)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
map(abs, list(-10, 2.5, -11.6, 17));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(map(abs, list(-10, 2.5, -11.6, 17)));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[10, [2.5, [11.6, [17, null]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="105">
      <NAME>map_example2</NAME>
      <REQUIRES>map</REQUIRES>
      <EXPECTED>[ 4, [ 9, [ 16, null ] ] ]</EXPECTED>
      <SCHEME>
(map (lambda (x) (* x x))
     (list 1 2 3 4))
      </SCHEME>
      <SCHEMEOUTPUT>
(1 4 9 16)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
map(x => x * x, list(1, 2, 3, 4));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(map(x => x * x, list(1, 2, 3, 4)));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[1, [4, [9, [16, null]]]]
      </JAVASCRIPT_OUTPUT>
</SNIPPET>
    Now we can give a new definition of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scale-list</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>scale_list</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in terms of <SCHEMEINLINE>map</SCHEMEINLINE>:
    <SNIPPET PAGE="106">
      <INDEX><DECLARATION>scale_list</DECLARATION></INDEX>
      <NAME>scale_list2</NAME>
      <EXAMPLE>scale_list_example</EXAMPLE>
      <EXPECTED>[ 30, [ 40, [ 50, null ] ] ]</EXPECTED>
      <SCHEME>
(define (scale-list items factor)
  (map (lambda (x) (* x factor))
       items))
      </SCHEME>
      <JAVASCRIPT>
function scale_list(items, factor) {
    return map(x => x * factor, items);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Map</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>map</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is an important construct, not only because it captures a common pattern,
    but because it establishes a higher level of abstraction in dealing with
    lists.  In the original definition of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scale-list</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>scale_list</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    the recursive structure of the program draws attention to the
    element-by-element processing of the list.  Defining
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scale-list</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>scale_list</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in terms of <SCHEMEINLINE>map</SCHEMEINLINE> suppresses that level of
    detail and emphasizes that scaling transforms a list of elements to a list
    of results.  The difference between the two definitions is not that the
    computer is performing a different process (it isn<APOS/>t) but that we
    think about the process differently.  In effect,
    <SCHEMEINLINE>map</SCHEMEINLINE> helps establish an abstraction barrier
    that isolates the implementation of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that transform lists from the details of how the elements of the list are
    extracted and combined.  Like the barriers shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:abstraction-barriers_scheme"/>,
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:abstraction-barriers"/>,
      </JAVASCRIPT>
    </SPLITINLINE>
    this abstraction gives us the flexibility to change the low-level details
    of how sequences are implemented, while preserving the conceptual framework
    of operations that transform sequences to sequences.
    Section<SPACE/><REF NAME="sec:sequences-conventional-interfaces"/> expands
    on this use of sequences as a framework for organizing programs.
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:square-list"/>
    The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-list</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_list</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    takes a list of numbers as argument and returns a list of the squares of
    those numbers.
    <SNIPPET PAGE="106">
      <NAME>square_list_example</NAME>
      <SCHEME>
;; square-list to be given by student
(square-list (list 1 2 3 4))
      </SCHEME>
      <SCHEMEOUTPUT>
(1 4 9 16)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square_list(list(1, 2, 3, 4));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
tail(square_list(list(1, 2, 3, 4)));
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
[1, [4, [9, [16, null]]]]	
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    Here are two different definitions of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-list</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_list</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Complete both of them by filling in the missing expressions:
    <SNIPPET LATEX="yes">
      <EXAMPLE>square_list_example</EXAMPLE>
      <SCHEME>
(define (square-list items)
  (if (null? items)
      nil
      (cons ?? ??)))
      </SCHEME>
      <JAVASCRIPT>
function square_list(items) {
    return is_null(items) 
           ? null
           : pair(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET LATEX="yes" POSTPADDING="no">
      <EXAMPLE>square_list_example</EXAMPLE>
      <SCHEME>
(define (square-list items)
  (map ?? ??))
      </SCHEME>
      <JAVASCRIPT>
function square_list(items) {
   return map(<METAPHRASE>??</METAPHRASE>, <METAPHRASE>??</METAPHRASE>);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET POSTPADDING="no">
	<NAME>square_list_pedestrian</NAME>
	<REQUIRES>square_definition</REQUIRES>
	<EXAMPLE>square_list_example</EXAMPLE>
	<EXPECTED>[ 4, [ 9, [ 16, null ] ] ]</EXPECTED>
	<JAVASCRIPT>
function square_list(items) {
    return is_null(items)
           ? null
           : pair(square(head(items)),
	          square_list(tail(items)));
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<NAME>square_list_with_map</NAME>
	<REQUIRES>square_definition</REQUIRES>
	<EXPECTED>[ 4, [ 9, [ 16, null ] ] ]</EXPECTED>
	<EXAMPLE>square_list_example</EXAMPLE>
	<JAVASCRIPT>  
function square_list(items) {
    return map(square, items);
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE> 
    Louis Reasoner tries to rewrite the first
    <SPLITINLINE><SCHEME><SCHEMEINLINE>square-list</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>square_list</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of exercise<SPACE/><REF NAME="ex:square-list"/> so that it evolves an
    iterative process:
    <SNIPPET PAGE="106" HIDE="yes">
      <NAME>square_list_warning</NAME>
      <JAVASCRIPT>
// THIS IS NOT A CORRECT SOLUTION	    
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="106">
      <NAME>square_list2</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>square_list_warning</REQUIRES>
      <EXAMPLE>square_list_example</EXAMPLE>
      <EXPECTED>[ 9, [ 4, [ 1, null ] ] ]</EXPECTED>
      <SCHEME>
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) 
              (cons (square (car things))
                    answer))))
  (iter items nil))
      </SCHEME>
      <JAVASCRIPT>
function square_list(items) {
    function iter(things, answer) {
        return is_null(things) 
               ? answer
               : iter(tail(things), 
                      pair(square(head(things)), 
                           answer));
    }
    return iter(items, null);
}
      </JAVASCRIPT>
    </SNIPPET>
    Unfortunately, defining
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-list</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_list</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    this way produces the answer list in the reverse order of the one desired.
    Why?
    <TEXT>
      Louis then tries to fix his bug by interchanging the arguments to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="106">
      <NAME>square_list3</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>square_list_warning</REQUIRES>
      <EXAMPLE>square_list_example</EXAMPLE>
      <EXPECTED>16</EXPECTED>
      <SCHEME>
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items nil))
      </SCHEME>
      <JAVASCRIPT>
function square_list(items) {
    function iter(things, answer) {
        return is_null(things)
               ? answer
               : iter(tail(things), 
                      pair(answer, 
                           square(head(things))));
    }
    return iter(items, null);
}
      </JAVASCRIPT>
    </SNIPPET>
    This doesn<APOS/>t work either.  Explain.
    </TEXT>
    <LABEL NAME="ex:iter-square-list"/>
    <SOLUTION>
      <OL>
	<LI>
	  The result list is reversed in the first program because the argument
	  list is traversed in the given order, from first to last, but squares
	  are added successively to the front of the answer list via
	  <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>.</JAVASCRIPT>
	  </SPLITINLINE>
	  The last element of the list is the last one to be added to the answer
	  and thus ends up as the first element of the result list.
	</LI>
	<LI>
	  The second program makes things worse! The result is not even a list
	  any longer, because the elements occupy the tail position of the
	  result list and not the head position.
	</LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

  <LONG_PAGE lines="2"/>
  <EXERCISE>
    <LABEL NAME="ex:for-each"/>
    The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>for_each</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>for-each</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is similar to <SCHEMEINLINE>map</SCHEMEINLINE>.  It takes as arguments a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    and a list of elements.  However, rather than forming a list of the
    results,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>for-each</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    just applies the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to each of the elements in turn, from left to right. The values returned by
    applying the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to the elements are not used
    <SPLITINLINE>
      <SCHEME>at all<EMDASH/><SCHEMEINLINE>for-each</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>at all<EMDASH/><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is used with
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that perform an action, such as printing.  For example, 
    <SNIPPET PAGE="104" HIDE="yes">
      <NAME>for_each_by_student</NAME>
      <SCHEME>
;; for_each to be given by student
      </SCHEME>
      <JAVASCRIPT>
// for_each to be given by student
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <REQUIRES>for_each_by_student</REQUIRES>
      <NAME>for_each_example</NAME>
      <SCHEME>
(for-each 
   (lambda (x) (newline) (display x))
   (list 57 321 88))
      </SCHEME>
      <SCHEMEOUTPUT>
57
321
88
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
for_each(x => display(x), list(57, 321, 88));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
57
321
88
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_TEST>
for_each(x => x, 
         list(57, 321, 88));
      </JAVASCRIPT_TEST>
    </SNIPPET>
    The value returned by the call to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>for-each</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    (not illustrated above) can be something arbitrary, such as true.  Give an
    implementation of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>for-each</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <SOLUTION>
      <SNIPPET>
	<NAME>for_each</NAME>
	<EXAMPLE>for_each_example</EXAMPLE>
	<EXPECTED>undefined</EXPECTED>
	<JAVASCRIPT>
function for_each(fun, items) {
    if (is_null(items)){
        return undefined;
    } else {
        fun(head(items));
        for_each(fun, tail(items));
    }
}     
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>list(s)<SUBINDEX>mapping over</SUBINDEX><CLOSE/></INDEX>
  <INDEX>mapping<SUBINDEX><ORDER>list</ORDER>over lists</SUBINDEX><CLOSE/></INDEX>
</SUBSECTION>
