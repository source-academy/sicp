<SUBSECTION>
  <LABEL NAME="sec:黑匣子"></LABEL>
  <NAME>
    <SPLITINLINE>
      <SCHEME>
        程序【8:0†try.txt】
      </SCHEME>
      <JAVASCRIPT>
        函数【8:0†try.txt】
      </JAVASCRIPT>
    </SPLITINLINE>
    作为黑匣子抽象【8:0†try.txt】
  </NAME>

  <SHORT_PAGE lines="2"></SHORT_PAGE>
  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>平方根</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	函数<JAVASCRIPTINLINE>sqrt</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    是通过一组相互定义的
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    定义的过程的第一个例子。注意到
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>的定义</SCHEME>
      <JAVASCRIPT> 
      <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>的声明</JAVASCRIPT>
    </SPLITINLINE>
    是
    <SPLITINLINE>
      <SCHEME>
	<INDEX>递归程序<SUBINDEX>递归程序定义</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>递归函数<SUBINDEX>递归函数声明</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>递归的</EM>；也就是说，
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是基于自身定义的。能够基于自身定义一个
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的概念可能令人不安；可能显得不清楚这种
    <QUOTE>循环</QUOTE>定义如何能够有意义，更不用说由计算机执行的过程进行良好定义。这将在<REF NAME="sec:procedures-and-processes"></REF>中更为详细地讨论。但首先，让我们考虑
    <SCHEMEINLINE>sqrt</SCHEMEINLINE>例子所展示的一些其他重要点。
  </TEXT>
  <TEXT>
    注意到计算平方根的问题自然地分解成多个子问题：
    <INDEX>程序<SUBINDEX>的结构</SUBINDEX></INDEX>
    如何判断一个猜测是否足够好，如何改进一个猜测，等等。每项任务由一个单独的
    <SPLITINLINE>
      <SCHEME>程序。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    整个<SCHEMEINLINE>平方根</SCHEMEINLINE>程序可以看作是一组
    <SPLITINLINE>
      <SCHEME>
        程序
	(如图<SPACE></SPACE><REF NAME="fig:sqrt-decomposition"></REF>所示)
      </SCHEME>
      <JAVASCRIPT>
        函数
	(如图<SPACE></SPACE><REF NAME="fig:sqrt-decomposition_new"></REF>所示)
      </JAVASCRIPT>
    </SPLITINLINE>
    这种程序集反映问题的分解为子问题。
  </TEXT>
  <SPLIT>
    <SCHEME>
      <FIGURE web_scale="0.6" src="img_original/ch1-Z-G-6.svg">
        <LABEL NAME="fig:sqrt-decomposition"></LABEL>
        <CAPTION>程序的过程分解
	<SCHEMEINLINE>平方根</SCHEMEINLINE>程序。
        </CAPTION>
      </FIGURE>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE>
        <FIGURE web_scale="0.6" src="img_javascript/ch1-Z-G-6.svg"></FIGURE>
        <LABEL NAME="fig:sqrt-decomposition_new"></LABEL>
        <CAPTION>程序的函数分解
        <JAVASCRIPTINLINE>sqrt</JAVASCRIPTINLINE>程序。
        </CAPTION>
      </FIGURE>
    </JAVASCRIPT>
  </SPLIT>
  <TEXT>
    The importance of this
    <INDEX>程序分解成部分</INDEX><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<INDEX>程序<SUBINDEX><ORDER>黑</ORDER>作为黑箱<OPEN></OPEN></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>黑</ORDER>作为黑箱<OPEN></OPEN></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>程序
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>函数
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>square</SCHEMEINLINE>, we are able to
    regard the <SCHEMEINLINE>square</SCHEMEINLINE><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><INDEX>黑箱</INDEX><QUOTE>黑箱。</QUOTE><EM>如何</EM><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><EM>确实</EM><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>程序
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>函数
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>square</SCHEMEINLINE> is not quite a
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <INDEX>程序抽象</INDEX>
        <INDEX>抽象<SUBINDEX>过程</SUBINDEX></INDEX>
        <EM>过程抽象</EM>.
      </SCHEME>
      <JAVASCRIPT>
        <INDEX>功能抽象</INDEX>
        <INDEX>抽象<SUBINDEX>功能</SUBINDEX></INDEX>
        <EM>功能抽象</EM>.
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE></TEXT>
  <TEXT>
    因此，仅考虑它们返回的值，以下两个
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    对一个数进行平方计算应该是无法区分的。每个都接受一个数值参数并产生该数的平方作为值。<FOOTNOTE>甚至不清楚这些
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    中哪个是更高效的实现。这取决于可用的硬件。有些机器对于<QUOTE>明显的</QUOTE>
    实现反而效率较低。考虑一台机器，存储了大量以非常高效方式存储的对数和反对数表。</FOOTNOTE>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x) (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x)
  (exp (double (log x))))

(define (double x) (+ x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return math_exp(double(math_log(x)));
}
function double(x) {
    return x + x;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    因此，一个
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    应能够隐藏细节。
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的用户可能并未编写此
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，而是从另一位程序员那里获得的一个黑箱。用户不需要知道该
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    是如何实现的，才能使用它。
    <SPLITINLINE>
      <SCHEME>
	<INDEX>程序<SUBINDEX><ORDER>黑</ORDER>作为黑箱<CLOSE></CLOSE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>黑</ORDER>作为黑箱<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <SUBHEADING>
    <NAME>局部名称</NAME>
  </SUBHEADING>

  <INDEX>局部名称<OPEN></OPEN></INDEX>

  <TEXT>
    One detail of a
    <SPLITINLINE>
      <SCHEME>程序<APOS></APOS>s</SCHEME>
      <JAVASCRIPT>函数<APOS></APOS>s</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序<APOS></APOS>s形式参数的名称。</SCHEME>
      <JAVASCRIPT>函数<APOS></APOS>s参数的名称。</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x) (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square y) (* y y))
      </SCHEME>
      <JAVASCRIPT>
function square(y) {
    return y * y;
}
      </JAVASCRIPT>
    </SNIPPET>
    This principle<EMDASH></EMDASH><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><EMDASH></EMDASH><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>square</SCHEMEINLINE><SPLITINLINE>
      <SCHEME>
	在定义
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	在声明
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序：
      </SCHEME>
      <JAVASCRIPT>
        函数：
      </JAVASCRIPT>
    </SPLITINLINE><SNIPPET>
      <EXAMPLE>is_good_enough_example</EXAMPLE>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    The intention of the author of
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>guess</SCHEMEINLINE> to refer to the
    first argument and <SCHEMEINLINE>x</SCHEMEINLINE> to refer to the
    second argument.  The argument of <SCHEMEINLINE>square</SCHEMEINLINE>
    is <SCHEMEINLINE>guess</SCHEMEINLINE>.  If the author of
    <SCHEMEINLINE>square</SCHEMEINLINE> used <SCHEMEINLINE>x</SCHEMEINLINE>
    (as above) to refer to that argument, we see that the
    <SCHEMEINLINE>x</SCHEMEINLINE> in
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>x</SCHEMEINLINE> than the one
    in  <SCHEMEINLINE>square</SCHEMEINLINE>. Running the
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>square</SCHEMEINLINE> must not affect the value
    of <SCHEMEINLINE>x</SCHEMEINLINE> that is used by
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>x</SCHEMEINLINE> may be needed by
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>square</SCHEMEINLINE> is done computing.
  </TEXT>
  <TEXT>
    如果参数不是各自
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    主体的局部变量，那么在<SCHEMEINLINE>平方</SCHEMEINLINE>中的参数<SCHEMEINLINE>x</SCHEMEINLINE>可能会与在
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
      </SPLITINLINE>
    中的参数<SCHEMEINLINE>x</SCHEMEINLINE>混淆，并且
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的行为将取决于我们使用的是哪个版本的<SCHEMEINLINE>平方</SCHEMEINLINE>。因此，<SCHEMEINLINE>平方</SCHEMEINLINE>就不会是我们所期望的黑箱。
  </TEXT>
  <TEXT>
    A     
    <INDEX>参数<SUBINDEX>名称</SUBINDEX></INDEX><INDEX>名称<SUBINDEX><ORDER>参数</ORDER>参数的名称</SUBINDEX></INDEX><SPLITINLINE>
      <SCHEME>
	程序的形式参数
      </SCHEME>
      <JAVASCRIPT>
	函数的参数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序定义中具有很特殊的角色，
      </SCHEME>
      <JAVASCRIPT>
        函数声明中具有很特殊的角色，
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	形式
      </SCHEME>
      <JAVASCRIPT>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<INDEX>绑定变量</INDEX>
	<INDEX>变量<SUBINDEX>绑定</SUBINDEX></INDEX>
	一个<EM>绑定变量</EM>，我们称这个程序定义为
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>绑定名称</INDEX>
	<INDEX>名称<SUBINDEX>绑定</SUBINDEX></INDEX>
	<EM>绑定</EM>，我们称这个函数声明为
      </JAVASCRIPT>
    </SPLITINLINE><INDEX>绑定</INDEX><EM>绑定</EM><SPLITINLINE>
      <SCHEME>
	形式参数。
      </SCHEME>
      <JAVASCRIPT>
	参数。
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序定义的意义不会改变，如果一个绑定变量
      </SCHEME>
      <JAVASCRIPT>
        函数声明的意义不会改变，如果一个绑定名称
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE><SCHEME>定义</SCHEME><JAVASCRIPT>声明</JAVASCRIPT></SPLITINLINE><FOOTNOTE>一致重新命名的概念实际上是微妙且难以形式化定义的。有名的逻辑学家在这里犯过尴尬的错误。</FOOTNOTE><SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<INDEX>自由变量</INDEX>
	<INDEX>变量<SUBINDEX>自由</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>自由名称</INDEX>
	<INDEX>名称<SUBINDEX>自由</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><EM>自由的</EM><SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<INDEX>变量的作用域</INDEX>
	<INDEX>变量<SUBINDEX>作用域</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>名称的作用域</INDEX>
	<INDEX>名称<SUBINDEX>作用域</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><EM>作用域</EM><SPLITINLINE>
      <SCHEME>
        程序定义中，绑定变量
      </SCHEME>
      <JAVASCRIPT>
        函数声明中，绑定名称
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<INDEX>形式参数<SUBINDEX>的作用域</SUBINDEX></INDEX>
	<INDEX>程序<SUBINDEX>形式参数的作用域</SUBINDEX></INDEX>
	<INDEX>变量的作用域<SUBINDEX>程序<APOS></APOS>的形式参数</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>参数<SUBINDEX>的作用域</SUBINDEX></INDEX>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>参数的作用域</SUBINDEX></INDEX>
	<INDEX>名称的作用域<SUBINDEX>函数<APOS></APOS>的参数</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序的形式参数
      </SCHEME>
      <JAVASCRIPT>
        函数的参数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE></TEXT>
  <TEXT>
    In the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>的定义
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>的声明
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>guess</SCHEMEINLINE> and
    <SCHEMEINLINE>x</SCHEMEINLINE> are
    bound
    <SPLITINLINE>
      <SCHEME>
	变量
      </SCHEME>
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>&lt;</SCHEMEINLINE>,
        <SCHEMEINLINE>-</SCHEMEINLINE>,
      </SCHEME>
    </SPLITINLINE><SCHEMEINLINE>abs</SCHEMEINLINE>
    and <SCHEMEINLINE>square</SCHEMEINLINE> are free.
    The meaning of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>guess</SCHEMEINLINE> and
    <SCHEMEINLINE>x</SCHEMEINLINE> so long as they are distinct and
    different from
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>&lt;</SCHEMEINLINE>,
        <SCHEMEINLINE>-</SCHEMEINLINE>,
      </SCHEME>
    </SPLITINLINE><SCHEMEINLINE>abs</SCHEMEINLINE>
    and <SCHEMEINLINE>square</SCHEMEINLINE>.  (If we renamed
    <SCHEMEINLINE>guess</SCHEMEINLINE> to
    <SCHEMEINLINE>abs</SCHEMEINLINE> we would have introduced a bug by
    <SPLITINLINE>
      <SCHEME>
	<INDEX>捕获一个自由变量</INDEX>
	<INDEX>错误<SUBINDEX>捕获一个自由变量</SUBINDEX></INDEX>
	<INDEX>自由变量<SUBINDEX>捕获</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>捕获一个自由名称</INDEX>
	<INDEX>错误<SUBINDEX>捕获一个自由名称</SUBINDEX></INDEX>
	<INDEX>自由名称<SUBINDEX>捕获</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><EM>捕获</EM><SPLITINLINE>
      <SCHEME>
	变量
      </SCHEME>
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>abs</SCHEMEINLINE>.
    It would have changed from free to bound.)  The meaning of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>	      
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	其自由变量的名称无关，
      </SCHEME>
      <JAVASCRIPT>
	其自由名称的选择无关，
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	（定义外部）
      </SCHEME>
      <JAVASCRIPT>
	（声明外部）
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	符号<SCHEMEINLINE>abs</SCHEMEINLINE>命名一个计算绝对值的程序
      </SCHEME>
      <JAVASCRIPT>
	名称<SCHEMEINLINE>abs</SCHEMEINLINE>指的是一个用于计算绝对值的函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	函数<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>cos</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_cos</JAVASCRIPTINLINE>
	（原始的余弦函数）
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>abs</SCHEMEINLINE> in its
    <SPLITINLINE>
      <SCHEME>
	定义。
      </SCHEME>
      <JAVASCRIPT>
	声明。
      </JAVASCRIPT>
    </SPLITINLINE><INDEX>局部名称<CLOSE></CLOSE></INDEX></TEXT>

  <SUBHEADING>
    <NAME>内部
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    和块结构</NAME>
  </SUBHEADING>
  <LABEL NAME="sec:块结构"></LABEL>

  <SHORT_PAGE lines="3"></SHORT_PAGE>
  <TEXT>
    到目前为止，我们有一种名称隔离的方法：
    <SPLITINLINE>
      <SCHEME>
	程序的形式参数
      </SCHEME>
      <JAVASCRIPT>
	函数的参数
      </JAVASCRIPT>
    </SPLITINLINE>
    是
    <SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    主体的局部变量。平方根程序展示了我们希望控制名称使用的另一种方式。
    <INDEX>程序<SUBINDEX>结构<OPEN></OPEN></SUBINDEX></INDEX>
    现有的程序由几个独立的
    <SPLITINLINE>
      <SCHEME>
        程序：
      </SCHEME>
      <JAVASCRIPT>
        函数：
      </JAVASCRIPT>
      </SPLITINLINE>
      <SNIPPET>
        <LABEL NAME="sec:sqrt2"></LABEL>
        <EXAMPLE>sqrt_example_2</EXAMPLE>
        <REQUIRES>abs_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <REQUIRES>average_definition</REQUIRES>
        <SCHEME>
(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))
        </SCHEME>
        <JAVASCRIPT>
function sqrt(x) {
    return sqrt_iter(1, x);
}
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : sqrt_iter(improve(guess, x), x);
}
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
function improve(guess, x) {
    return average(guess, x / guess);
}
        </JAVASCRIPT>
      </SNIPPET>
  </TEXT>
  <TEXT>
    The problem with this program is that the only
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE> is
    <SCHEMEINLINE>sqrt</SCHEMEINLINE>.  The other
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
	(<SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,
	<SCHEMEINLINE>够好吗？</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	(<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>improve</SCHEMEINLINE>) only clutter up their minds.
    They may not 
    <SPLITINLINE>
      <SCHEME>
        定义任何其他程序
      </SCHEME>
      <JAVASCRIPT>
        声明任何其他函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE>
    needs it.  The problem is especially severe in the construction of large
    systems by many separate programmers.  For example, in the construction
    of a large library of numerical
    <SPLITINLINE>
      <SCHEME>程序,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好吗？</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>improve</SCHEMEINLINE> as auxiliary
    <SPLITINLINE>
      <SCHEME>程序。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>子程序,</SCHEME>
      <JAVASCRIPT>子函数,</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE> so that
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> could coexist with other
    successive approximations, each having its own private
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>够好吗？</SCHEMEINLINE>程序。
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>函数。
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><INDEX>块结构<OPEN></OPEN></INDEX><SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义<OPEN></OPEN></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明<OPEN></OPEN></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>程序</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE><SNIPPET PROTECT="yes">
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess x)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess, x) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess, x) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess, x) {
        return is_good_enough(guess, x) 
               ? guess
               : sqrt_iter(improve(guess, x), x);
    }
    return sqrt_iter(1, x);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT><SPLITINLINE>
      <SCHEME></SCHEME>
      <JAVASCRIPT>
	任何匹配的一对花括号表示一个<EM>块</EM>，并且块内的声明是块的局部变量。
	<INDEX>块</INDEX>
	<INDEX>句法形式<SUBINDEX>块</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><EM>块结构</EM><SPLITINLINE>
      <SCHEME>辅助程序的定义内化</SCHEME>
      <JAVASCRIPT>辅助函数的声明内化</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>x</SCHEMEINLINE> is bound in the
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE>, the
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME><SCHEMEINLINE>够好吗？</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>improve</SCHEMEINLINE>, and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,
      定义在内部的</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,
      声明在内部的</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE>, are in the scope of
    <SCHEMEINLINE>x</SCHEMEINLINE>. Thus, it is not necessary to pass
    <SCHEMEINLINE>x</SCHEMEINLINE> explicitly to each of these
    <SPLITINLINE>
      <SCHEME>程序。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>x</SCHEMEINLINE> to be a free
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义<SUBINDEX>的自由变量</SUBINDEX></INDEX>
	<INDEX>自由变量<SUBINDEX><ORDER>内部</ORDER>在内部定义中</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明<SUBINDEX>的自由名称</SUBINDEX></INDEX>
	<INDEX>自由名称<SUBINDEX><ORDER>内部</ORDER>在内部声明中</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE><SPLITINLINE>
      <SCHEME>定义中</SCHEME>
      <JAVASCRIPT>声明中</JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>x</SCHEMEINLINE> gets its value from
    the argument with which the enclosing
    <SPLITINLINE>
      <SCHEME>
        程序
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE> is called.  This discipline is called
    <INDEX>词法作用域</INDEX><EM>词法作用域</EM><FOOTNOTE>词法作用域决定了一个
    <SPLITINLINE>
      <SCHEME>
	程序中的自由变量
      </SCHEME>
      <JAVASCRIPT>
	函数中的自由名称
      </JAVASCRIPT>
    </SPLITINLINE>
    被认为是指封闭的
    <SPLITINLINE>
      <SCHEME>
        程序定义所做的绑定；
      </SCHEME>
      <JAVASCRIPT>
        函数声明所做的绑定；
      </JAVASCRIPT>
    </SPLITINLINE>
    即，它们在环境
    <INDEX>环境<SUBINDEX>词法作用域与</SUBINDEX></INDEX>
    中被查找，在
    <SPLITINLINE>
      <SCHEME>
        程序被定义的环境中。
      </SCHEME>
      <JAVASCRIPT>
        函数被声明的环境中。
      </JAVASCRIPT>
    </SPLITINLINE>
    当我们研究环境和解释器的详细行为时，我们将在<REF NAME="chap:state"></REF>中详细了解这种机制如何工作。</FOOTNOTE><SNIPPET>
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX>block structured</SUBINDEX></INDEX>
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess) {
        return is_good_enough(guess)
               ? guess
               : sqrt_iter(improve(guess));
    }
    return sqrt_iter(1);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    我们将广泛使用块结构来帮助我们将大型程序分解成可处理的部分。<FOOTNOTE>嵌入的
    <SPLITINLINE>
      <SCHEME>
        定义必须在程序的主体系中首先出现
      </SCHEME>
      <JAVASCRIPT>
        声明必须在函数的主体系中首先出现
      </JAVASCRIPT>
    </SPLITINLINE>。
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义<SUBINDEX>位置</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明<SUBINDEX>位置</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    管理层不对运行相互交织的
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    和使用的程序造成的后果负责；另请参见
    注释<SPACE></SPACE><REF NAME="foot:function-decl-vs-lambda"></REF>
    和<SPACE></SPACE><REF NAME="foot:tdz"></REF>
    在<REF NAME="sec:lambda"></REF>一节中。
    <LABEL NAME="foot:management"></LABEL></FOOTNOTE>
    块结构的概念起源于编程语言
    <INDEX>Algol<SUBINDEX>块结构</SUBINDEX></INDEX>
    Algol<SPACE></SPACE>60。它出现在大多数高级编程语言中，是帮助组织大型程序构建的重要工具。
    <INDEX>程序<SUBINDEX>结构<CLOSE></CLOSE></SUBINDEX></INDEX>
    <INDEX>块结构<CLOSE></CLOSE></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义<CLOSE></CLOSE></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明<CLOSE></CLOSE></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>
</SUBSECTION>
