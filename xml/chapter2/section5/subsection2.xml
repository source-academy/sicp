<SUBSECTION>
  <NAME>
    Combining Data of Different Types
  </NAME>

  <LABEL NAME="sec:combining-data-of-different-types"/>

  <TEXT>
    We have seen how to define a unified arithmetic system that
    encompasses ordinary numbers, complex numbers, rational numbers, and
    any other type of number we might decide to invent, but we have
    ignored an important issue.  The operations we have defined so far
    treat the different data types as being completely independent.  Thus,
    there are separate packages for adding, say, two ordinary numbers, or
    two complex numbers.  What we have not yet considered is the fact that
    it is meaningful to define operations that cross the type boundaries,
    such as the addition of a complex number to an ordinary number.  We
    have gone to great pains to introduce barriers between parts of our
    programs so that they can be developed and understood separately.  We
    would like to introduce the cross-type operations in some carefully
    controlled way, so that we can support them
    without seriously violating our module boundaries.
  </TEXT>
  <TEXT>
    One way to handle
    <INDEX>operation<SUBINDEX>cross-type</SUBINDEX></INDEX>
    <INDEX>cross-type operations</INDEX>
    <INDEX>type(s)<SUBINDEX>cross-type operations</SUBINDEX></INDEX>
    cross-type operations is to design a different
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    for each possible combination of types for which the operation is valid.
    For example, we could extend the complex-number package so that it
    provides a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for adding complex numbers to ordinary numbers and installs this in the
    table using the tag
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(complex scheme-number)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list("complex", "javascript_number")</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:<FOOTNOTE>We
    also have to supply an almost identical
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to handle the types<PDF_ONLY><BR/></PDF_ONLY>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(scheme_number complex)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>list("javascript_number", "complex")</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    <SNIPPET CHAP="4" HIDE="yes">
      <NAME>add_complex_to_javascript_number_example</NAME>
      <JAVASCRIPT>
const c = make_complex_from_real_imag(4, 3);
const n = make_javascript_number(7);

add(c, n);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4" EVAL="no">
      <INDEX><DECLARATION>add_complex_to_javascript_num</DECLARATION></INDEX> 
      <NAME>add_complex_to_javascript_number</NAME>
      <REQUIRES>install_javascript_number_package_usage</REQUIRES>
      <REQUIRES>install_complex_package_usage</REQUIRES>
      <EXAMPLE>add_complex_to_javascript_number_example</EXAMPLE>
      <EXPECTED>[ 'complex', [ 'rectangular', [ 11, 3 ] ] ]</EXPECTED>
      <SCHEME>
;; to be included in the complex package
(define (add-complex-to-schemenum z x)
  (make-from-real-imag (+ (real-part z) x)
                       (imag-part z)))

(put 'add '(complex scheme-number)
     (lambda (z x) (tag (add-complex-to-schemenum z x))))
      </SCHEME>
      <JAVASCRIPT>
// to be included in the complex package
function add_complex_to_javascript_num(z, x) {
   return make_complex_from_real_imag(real_part(z) + x, imag_part(z));
}
put("add", list("complex", "javascript_number"),
    (z, x) => tag(add_complex_to_javascript_num(z, x)));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    This technique works, but it is cumbersome.  With such a system, the
    cost of introducing a new type is not just the construction of the
    package of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for that type but also the construction and installation of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that implement the cross-type operations.  This can easily be much more
    code than is needed to define the operations on the type itself.  The
    method also undermines our ability to combine separate packages additively,
    or least to limit the extent to which the implementors of the individual
    packages need to take account of other packages.  For instance, in the
    example above, it seems reasonable that handling mixed operations on
    complex numbers and ordinary numbers should be the responsibility of
    the complex-number package.  Combining rational numbers and complex
    numbers, however, might be done by the complex package, by the rational
    package, or by some third package that uses operations extracted from
    these two packages.  Formulating coherent policies on the division of
    responsibility among packages can be an overwhelming task in designing
    systems with many packages and many cross-type operations.
  </TEXT>

  <SUBHEADING>
    <NAME>Coercion</NAME>
  </SUBHEADING>

  <INDEX>coercion<OPEN/></INDEX>
  <TEXT>
    In the general situation of completely unrelated operations acting on
    completely unrelated types, implementing explicit cross-type operations,
    cumbersome though it may be, is the best that one can hope for.
    Fortunately, we can usually do better by taking advantage of additional
    structure that may be latent in our type system.  Often the different
    data types are not completely independent, and there may be ways by which
    objects of one type may be viewed as being of another type.  This process
    is called <EM>coercion</EM>.  For example, if we are asked to
    arithmetically combine an ordinary number with a complex number, we can
    view the ordinary number as a complex number whose imaginary part is zero.
    This transforms the problem to that of combining two complex numbers, which
    can be handled in the ordinary way by the complex-arithmetic package.
  </TEXT>
  <TEXT>
    In general, we can implement this idea by designing
    <INDEX>coercion<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    coercion
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that transform an object of one type into an equivalent
    object of another type.  Here is a typical coercion
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which transforms a given ordinary number to a complex number with that real
    part and zero imaginary part:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>javascript_number_to_complex</DECLARATION></INDEX> 
      <NAME>javascript_number_to_complex</NAME>
      <SCHEME>
(define (scheme-number-&gt;complex n)
  (make-complex-from-real-imag (contents n) 0))
      </SCHEME>
      <JAVASCRIPT>
function javascript_number_to_complex(n) {
    return make_complex_from_real_imag(contents(n), 0);
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>table<SUBINDEX><ORDER>coercion</ORDER>for coercion</SUBINDEX></INDEX>
    <INDEX>coercion<SUBINDEX>table</SUBINDEX></INDEX>
    We install these coercion
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in a special coercion table, indexed under the names of the two types:
    <SNIPPET HIDE="yes">
      <NAME>put_get_coercion</NAME>
      <SCHEME>
(define coercion-list '())

(define (clear-coercion-list)
  (set! coercion-list '()))

(define (put-coercion type1 type2 item)
  (if (get-coercion type1 type2) coercion-list
      (set! coercion-list
            (cons (list type1 type2 item)
                  coercion-list))))

(define (get-coercion type1 type2)
  (define (get-type1 listItem)
    (car listItem))
  (define (get-type2 listItem)
    (cadr listItem))
  (define (get-item listItem)
    (caddr listItem))
  (define (get-coercion-iter list type1 type2)
    (if (null? list) #f
        (let ((top (car list)))
          (if (and (equal? type1 (get-type1 top))
                   (equal? type2 (get-type2 top))) (get-item top)
                   (get-coercion-iter (cdr list) type1 type2)))))
  (get-coercion-iter coercion-list type1 type2))
      </SCHEME>
      <JAVASCRIPT>
let coercion_list = null;

function clear_coercion_list() {
    coercion_list = null;
}

function put_coercion(type1, type2, item) {
    if (is_null(get_coercion(type1, type2))) {
        coercion_list = pair(list(type1, type2, item),
                             coercion_list);
    } else {
        return coercion_list;
    }
}

function get_coercion(type1, type2) {
    function get_type1(list_item) {
        return head(list_item);
    }
    function get_type2(list_item) {
        return head(tail(list_item));
    }
    function get_item(list_item) {
        return head(tail(tail(list_item)));
    }
    function get_coercion_iter(items) {
        if (is_null(items)) {
            return undefined;
        } else {
            const top = head(items);
            return equal(type1, get_type1(top)) &amp;&amp;
                   equal(type2, get_type2(top))
                   ? get_item(top)
                   : get_coercion_iter(tail(items));
        }
    }
    return get_coercion_iter(coercion_list);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <NAME>put_coercion_usage</NAME>
      <REQUIRES>put_get_coercion</REQUIRES>
      <REQUIRES>javascript_number_to_complex</REQUIRES>
      <REQUIRES>install_complex_package_usage</REQUIRES>
      <EXAMPLE>put_coercion_usage_example</EXAMPLE>
      <REQUIRES>put_get_coercion</REQUIRES>

      <SCHEME>
(put-coercion 'scheme-number 'complex scheme-number-&gt;complex)
      </SCHEME>
      <JAVASCRIPT>
put_coercion("javascript_number", "complex",
             javascript_number_to_complex);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="3" HIDE="yes">
      <NAME>put_coercion_usage_example</NAME>
      <JAVASCRIPT>
get_coercion("javascript_number", "complex");
      </JAVASCRIPT>
    </SNIPPET>
    (We assume that there are
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>put-coercion</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>put_coercion</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-coercion</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_coercion</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    available for manipulating this table.)  Generally some of the slots in
    the table will be empty, because it is not generally possible to coerce
    an arbitrary data object of each type into all other types.  For example,
    there is no way to coerce an arbitrary complex number to an ordinary
    number, so there will be no general
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>complex-&gt;scheme-number</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>complex_to_javascript_number</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    included in the table.
  </TEXT>
  <TEXT>
    Once the coercion table has been set up, we can handle coercion in a
    uniform manner by modifying the
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:data-directed"/>.  When asked to apply an
    operation, we first check whether the operation is defined for the
    arguments<APOS/> types, just as before.  If so, we dispatch to the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    found in the operation-and-type table. Otherwise, we try coercion.  For
    simplicity, we consider only the case where there are two
    arguments.<FOOTNOTE>See exercise<SPACE/><REF NAME="ex:multi-coercion"/> for
    generalizations.</FOOTNOTE>  We check the coercion table to see if objects
    of the first type can be coerced to the second type.  If so, we coerce the
    first argument and try the operation again.  If objects of the first type
    cannot in general be coerced to the second type, we try the coercion the
    other way around to see if there is a way to coerce the second argument to
    the type of the first argument. Finally, if there is no known way to coerce
    either type to the other type, we give up. Here is the
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><DECLARATION>apply_generic</DECLARATION><SUBINDEX>with coercion</SUBINDEX></INDEX>
    <SNIPPET HIDE="yes">
      <NAME>base_operation_table</NAME>
      <JAVASCRIPT>
// operation_table, put and get
// from chapter 3 (section 3.3.3)
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
             ? head(records)
             : assoc(key, tail(records));
}
function make_table() {
    const local_table = list("*table*");
    function lookup(key_1, key_2) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            return undefined;
        } else {
            const record = assoc(key_2, tail(subtable));
            if (is_undefined(record)) {
                return undefined;
            } else {
                return tail(record);
            }
        }
    }
    function insert(key_1, key_2, value) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            set_tail(local_table,
                     pair(list(key_1, pair(key_2, value)),
                          tail(local_table)));
        } else {
            const record = assoc(key_2, tail(subtable));
            if (is_undefined(record)) {
                set_tail(subtable,
                         pair(pair(key_2, value),
                              tail(subtable)));
            } else {
                set_tail(record, value);
            }
        }
    }
    function dispatch(m) {
        return m === "lookup"
               ? lookup
               : m === "insert"
                 ? insert
                 : "undefined operation -- table";
    }
    return dispatch;
}
const operation_table = make_table();
const get = operation_table("lookup");
const put = operation_table("insert");

// In Source, most functions have a fixed number of arguments.
// (The function list is the only exception, to this so far.)
// The function apply_in_underlying_javascript allows us to
// apply any given function fun to all elements of the argument
// list args, as if they were separate arguments
function apply(fun, args) {
    return apply_in_underlying_javascript(fun, args);
}
function add(x, y) {
    return apply_generic("add", list(x, y));
}
function sub(x, y) {
    return apply_generic("sub", list(x, y));
}
function mul(x, y) {
    return apply_generic("mul", list(x, y));
}
function div(x, y) {
    return apply_generic("div", list(x, y));
}

function attach_tag(type_tag, contents) {
    return pair(type_tag, contents);
}
function type_tag(datum) {
    return is_pair(datum)
           ? head(datum)
           : error(datum, "bad tagged datum -- type_tag");
}
function contents(datum) {
    return is_pair(datum)
           ? tail(datum)
           : error(datum, "bad tagged datum -- contents");
}
</JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>javascript_number_package</NAME>
      <REQUIRES>base_operation_table</REQUIRES>
      <JAVASCRIPT>
function install_javascript_number_package() {
    function tag(x) {
        return attach_tag("javascript_number", x);
    }
    put("add", list("javascript_number", "javascript_number"),
        (x, y) => tag(x + y));
    put("sub", list("javascript_number", "javascript_number"),
        (x, y) => tag(x - y));
    put("mul", list("javascript_number", "javascript_number"),
        (x, y) => tag(x * y));
    put("div", list("javascript_number", "javascript_number"),
        (x, y) => tag(x / y));
    put("make", "javascript_number",
        x => tag(x));
    return "done";
}
install_javascript_number_package();

function make_javascript_number(n) {
    return get("make", "javascript_number")(n);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>complex_number_package</NAME>
      <REQUIRES>base_operation_table</REQUIRES>
      <JAVASCRIPT>
// generic selector functions for complex numbers

function real_part(z) {
    return apply_generic("real_part", list(z));
}
function imag_part(z) {
    return apply_generic("imag_part", list(z));
}
function magnitude(z) {
    return apply_generic("magnitude", list(z));
}
function angle(z) {
    return apply_generic("angle", list(z));
}
function square(x) {
    return x * x;
}

function install_rectangular_package() {
    function real_part(z) { return head(z); }
    function imag_part(z) { return tail(z); }
    function make_from_real_imag(x, y) { return pair(x, y); }
    function magnitude(z) {
        return math_sqrt(square(real_part(z)) +
                   square(imag_part(z)));
    }
    function angle(z) {
        return math_atan2(imag_part(z), real_part(z));
    }
    function make_from_mag_ang(r, a) {
        return pair(r * math_cos(a), r * math_sin(a));
    }
    // interface to the rest of the system
    function tag(x) {
        return attach_tag("rectangular", x);
    }
    put("real_part", list("rectangular"), real_part);
    put("imag_part", list("rectangular"), imag_part);
    put("magnitude", list("rectangular"), magnitude);
    put("angle", list("rectangular"), angle);
    put("make_from_real_imag", "rectangular",
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "rectangular",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}
install_rectangular_package();

function install_polar_package() {
    // internal functions
    function magnitude(z) { return head(z); }
    function angle(z) { return tail(z); }
    function make_from_mag_ang(r, a) { return pair(r, a); }
    function real_part(z) {
        return magnitude(z) * math_cos(angle(z));
    }
    function imag_part(z) {
        return magnitude(z) * math_sin(angle(z));
    }
    function make_from_real_imag(x, y) {
        return pair(math_sqrt(square(x) + square(y)),
                    math_atan2(y, x));
    }

    // interface to the rest of the system
    function tag(x) { return attach_tag("polar", x); }
    put("real_part", list("polar"), real_part);
    put("imag_part", list("polar"), imag_part);
    put("magnitude", list("polar"), magnitude);
    put("angle", list("polar"), angle);
    put("make_from_real_imag", "polar",
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "polar",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}
install_polar_package();

function install_complex_package() {
    // imported functions from rectangular and polar packages
    function make_from_real_imag(x, y) {
        return get("make_from_real_imag", "rectangular")(x, y);
    }
    function make_from_mag_ang(r, a) {
        return get("make_from_mag_ang", "polar")(r, a);
    }

    // internal functions
    function add_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) +
                                   real_part(z2),
                                   imag_part(z1) +
                                   imag_part(z2));
    }
    function sub_complex(z1, z2) {
        return make_from_real_imag(real_part(z1) -
                                   real_part(z2),
                                   imag_part(z1) -
                                   imag_part(z2));
    }
    function mul_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) *
                                 magnitude(z2),
                                 angle(z1) +
                                 angle(z2));
    }
    function div_complex(z1, z2) {
        return make_from_mag_ang(magnitude(z1) /
                                 magnitude(z2),
                                 angle(z1) -
                                 angle(z2));
    }

    // interface to rest of the system
    function tag(z) {
        return attach_tag("complex", z);
    }
    put("add", list("complex", "complex"),
        (z1, z2) => tag(add_complex(z1, z2)));
    put("sub", list("complex", "complex"),
        (z1, z2) => tag(sub_complex(z1, z2)));
    put("mul", list("complex", "complex"),
        (z1, z2) => tag(mul_complex(z1, z2)));
    put("div", list("complex", "complex"),
        (z1, z2) => tag(div_complex(z1, z2)));
    put("make_from_real_imag", "complex",
        (x, y) => tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "complex",
        (r, a) => tag(make_from_mag_ang(r, a)));
    return "done";
}
install_complex_package();

function make_complex_from_real_imag(x, y){
    return get("make_from_real_imag", "complex")(x, y);
}
function make_complex_from_mag_ang(r, a){
    return get("make_from_mag_ang", "complex")(r, a);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>coercion_support</NAME>
      <JAVASCRIPT>
// coercion support

let coercion_list = null;

function clear_coercion_list() {
    coercion_list = null;
}

function put_coercion(type1, type2, item) {
    if (is_undefined(get_coercion(type1, type2))) {
        coercion_list = pair(list(type1, type2, item),
                             coercion_list);
    } else {
        return coercion_list;
    }
}

function get_coercion(type1, type2) {
    function get_type1(list_item) {
        return head(list_item);
    }
    function get_type2(list_item) {
        return head(tail(list_item));
    }
    function get_item(list_item) {
        return head(tail(tail(list_item)));
    }
    function get_coercion_iter(items) {
        if (is_null(items)) {
            return undefined;
        } else {
            const top = head(items);
            return equal(type1, get_type1(top)) &amp;&amp;
                   equal(type2, get_type2(top))
                   ? get_item(top)
                   : get_coercion_iter(tail(items));
        }
    }
    return get_coercion_iter(coercion_list);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>apply_generic_with_coercion_example</NAME>
      <REQUIRES>base_operation_table</REQUIRES>
      <REQUIRES>javascript_number_package</REQUIRES>
      <REQUIRES>complex_number_package</REQUIRES>
      <REQUIRES>coercion_support</REQUIRES>
      <JAVASCRIPT>
function javascript_number_to_complex(n) {
    return make_complex_from_real_imag(contents(n), 0);
}

put_coercion("javascript_number", "complex",
             javascript_number_to_complex);

const c = make_complex_from_real_imag(4, 3);
const n = make_javascript_number(7);

add(c, n);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <NAME>apply_generic_with_coercion</NAME>
      <EXAMPLE>apply_generic_with_coercion_example</EXAMPLE>
      <EXPECTED>[ 'complex', [ 'rectangular', [ 11, 3 ] ] ]</EXPECTED>
      <SCHEME>
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
        (apply proc (map contents args))
        (if (= (length args) 2)
          (let ((type1 (car type-tags))
                 (type2 (cadr type-tags))
                 (a1 (car args))
                 (a2 (cadr args)))
            (let ((t1-&gt;t2 (get-coercion type1 type2))
                  (t2-&gt;t1 (get-coercion type2 type1)))
              (cond (t1-&gt;t2
                      (apply-generic op (t1-&gt;t2 a1) a2))
                    (t2-&gt;t1
                      (apply-generic op a1 (t2-&gt;t1 a2)))
                    (else
                      (error "No method for these types"
                        (list op type-tags))))))
          (error "No method for these types"
            (list op type-tags)))))))
      </SCHEME>
      <JAVASCRIPT>
function apply_generic(op, args) {
    const type_tags = map(type_tag, args);
    const fun = get(op, type_tags);
    if (! is_undefined(fun)) {
        return apply(fun, map(contents, args));
    } else {
        if (length(args) === 2) {
            const type1 = head(type_tags);
            const type2 = head(tail(type_tags));
            const a1 = head(args);
            const a2 = head(tail(args));
            const t1_to_t2 = get_coercion(type1, type2);
            const t2_to_t1 = get_coercion(type2, type1);
            return ! is_undefined(t1_to_t2)
                   ? apply_generic(op, list(t1_to_t2(a1), a2))
                   : ! is_undefined(t2_to_t1)
                   ? apply_generic(op, list(a1, t2_to_t1(a2)))
                   : error(list(op, type_tags),
                           "no method for these types");
        } else {
            return error(list(op, type_tags),
                         "no method for these types");
        }
    }
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    This coercion scheme has many advantages over the method of defining
    explicit cross-type operations, as outlined above.  Although we still
    need to write coercion
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to relate the types (possibly <LATEXINLINE>$n^2$</LATEXINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for a system with <LATEXINLINE>$n$</LATEXINLINE> types), we need to write
    only one
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for each pair of types rather than a different
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for each collection of types and each generic operation.<FOOTNOTE>If we are
    clever, we can usually get by with fewer than
    <LATEXINLINE>$n^2$</LATEXINLINE> coercion
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
    <JAVASCRIPT>functions.</JAVASCRIPT></SPLITINLINE>
    For instance, if we know how to convert from type 1 to type 2 and from
    type 2 to type 3, then we can use this knowledge to convert from type 1 to
    type 3.  This can greatly decrease the number of coercion
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we need to supply explicitly when we add a new type to the system.  If we
    are willing to build the required amount of sophistication into our system,
    we can have it search the <QUOTE>graph</QUOTE> of relations among types and
    automatically generate those coercion
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that can be inferred from the ones that are supplied
    explicitly.</FOOTNOTE>  What we are counting on here is the fact that the
    appropriate transformation between types depends only on the types
    themselves, not on the operation to be applied.
  </TEXT>
  <DO_BREAK_PAGE/>
  <TEXT>
    On the other hand, there may be applications for which our coercion
    scheme is not general enough.  Even when neither of the objects to be
    combined can be converted to the type of the other it may still be
    possible to perform the operation by converting both objects to a
    third type.  In order to deal with such complexity and still preserve
    modularity in our programs, it is usually necessary to build systems
    that take advantage of still further structure in the relations among
    types, as we discuss next.
  </TEXT>

  <SUBHEADING>
    <NAME>Hierarchies of types</NAME>
  </SUBHEADING>

  <INDEX>type(s)<SUBINDEX>hierarchy of</SUBINDEX><OPEN/></INDEX>
  <INDEX>hierarchy of types<OPEN/></INDEX>
  <TEXT>
    The coercion scheme presented above relied on the existence of natural
    relations between pairs of types.  Often there is more <QUOTE>global</QUOTE>
    structure in how the different types relate to each other.  For
    instance, suppose we are building a generic arithmetic system to
    handle integers, rational numbers, real numbers, and complex numbers.
    In such a system, it is quite natural to regard an integer as a
    special kind of rational number, which is in turn a special kind of
    real number, which is in turn a special kind of complex number.  What
    we actually have is a so-called <EM>hierarchy of types</EM>, in which,
    for example, integers are a
    <INDEX>subtype</INDEX>
    <INDEX>type(s)<SUBINDEX>subtype</SUBINDEX></INDEX>
    <EM>subtype</EM> of rational numbers (i.e.,
    any operation that can be applied to a rational number can
    automatically be applied to an integer).  Conversely, we say that
    rational numbers form a
    <INDEX>supertype</INDEX>
    <INDEX>type(s)<SUBINDEX>supertype</SUBINDEX></INDEX>
    <EM>supertype</EM> of integers.  The particular
    hierarchy we have here is of a very simple kind, in which each type
    has at most one supertype and at most one subtype.  Such a structure,
    called a <EM>tower</EM>, is illustrated in
    figure<SPACE/><REF NAME="fig:tower"/>.
    <FIGURE>
      <FIGURE split_scale="0.1" web_scale="0.2" scale="0.59" src="img_original/ch2-Z-G-66.svg"></FIGURE>
      <CAPTION>A tower of types.
      <INDEX>tower of types</INDEX>
      <INDEX>type(s)<SUBINDEX>tower of</SUBINDEX></INDEX>
      </CAPTION>
      <LABEL NAME="fig:tower"/>
    </FIGURE>
  </TEXT>
  <TEXT>
    If we have a tower structure, then we can greatly simplify the problem
    of adding a new type to the hierarchy, for we need only specify how
    the new type is embedded in the next supertype above it and how it is
    the supertype of the type below it.  For example, if we want to add an
    integer to a complex number, we need not explicitly define a special
    coercion
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>integer-&gt;complex</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>integer_to_complex</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Instead, we define how an integer can be transformed<DO_BREAK_PAGE/> into a rational
    number, how a rational number is transformed into a real number, and how
    a real number is transformed into a complex number.  We then allow the
    system to transform the integer into a complex number through these steps
    and then add the two complex numbers.
  </TEXT>
  <TEXT>
    <INDEX>type(s)<SUBINDEX>raising</SUBINDEX></INDEX>
     <INDEX><USE>apply_generic</USE><SUBINDEX>with tower of types</SUBINDEX></INDEX>
    We can redesign our
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    in the following way: For each type, we need to supply a
    <SCHEMEINLINE>raise</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which <QUOTE>raises</QUOTE> objects of that type one level in the tower.
    Then when the system is required to operate on objects of different types
    it can successively raise the lower types until all the objects are at
    the same level in the tower.  (Exercises<SPACE/><REF NAME="ex:raise"/>
    and <SPACE/><REF NAME="ex:apply-with-raise"/>
    concern the details of implementing such a strategy.)
  </TEXT>
  <TEXT>
    Another advantage of a tower is that we can easily implement the notion
    that every type <QUOTE>inherits</QUOTE> all operations defined on a
    supertype.  For instance, if we do not supply a special
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for finding the real part of an integer, we should nevertheless expect
    that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real-part</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>real_part</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    will be defined for integers by virtue of the fact that integers are a
    subtype of complex numbers.  In a tower, we can arrange for this to happen
    in a uniform way by modifying
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    If the required operation is not directly defined for the type of the
    object given, we raise the object to its supertype and try again.  We thus
    crawl up the tower, transforming our argument as we go, until we either
    find a level at which the desired operation can be performed or hit the
    top (in which case we give up).
  </TEXT>
  <TEXT>
    <INDEX>type(s)<SUBINDEX>lowering</SUBINDEX></INDEX>
    Yet another advantage of a tower over a more general hierarchy is that
    it gives us a simple way to <QUOTE>lower</QUOTE> a data object to the
    simplest representation.  For example, if we add
    <LATEXINLINE>$2+3i$</LATEXINLINE> to <LATEXINLINE>$4-3i$</LATEXINLINE>,
    it would be nice to obtain the answer as the integer 6 rather than as the
    complex number <LATEXINLINE>$6+0i$</LATEXINLINE>.
    Exercise<SPACE/><REF NAME="ex:simplify"/> discusses a way to implement
    such a lowering operation.  (The trick is that we need a general way
    to distinguish those objects that can be lowered, such as
    <LATEXINLINE>$6+0i$</LATEXINLINE>, from those that cannot, such as
    <LATEXINLINE>$6+2i$</LATEXINLINE>.)
  </TEXT>

  <SUBHEADING>
    <NAME>Inadequacies of hierarchies</NAME>
  </SUBHEADING>

  <INDEX>hierarchy of types<SUBINDEX>inadequacy of</SUBINDEX></INDEX>
  <TEXT>
    If the data types in our system can be naturally arranged in a tower,
    this greatly simplifies the problems of dealing with generic operations
    on different types, as we have seen.  Unfortunately, this is usually
    not the case.  Figure<SPACE/><REF NAME="fig:relations-among-figures"/>
    illustrates a more complex arrangement of mixed types, this one showing
    relations among different types of geometric figures.  We see that, in
    general,
    <INDEX>type(s)<SUBINDEX>multiple subtype and supertype</SUBINDEX></INDEX>
    <INDEX>supertype<SUBINDEX>multiple</SUBINDEX></INDEX>
    <INDEX>subtype<SUBINDEX>multiple</SUBINDEX></INDEX>
    a type may have more than one subtype.  Triangles and quadrilaterals,
    for instance, are both subtypes of polygons.  In addition, a type may
    have more than one supertype.  For example, an isosceles right
    triangle may be regarded either as an isosceles triangle or as a right
    triangle.  This multiple-supertypes issue is particularly thorny,
    since it means that there is no unique way to <QUOTE>raise</QUOTE> a type
    in the hierarchy.  Finding the <QUOTE>correct</QUOTE> supertype in which
    to apply an operation to an object may involve considerable searching
    through the entire type network on the part of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Since there <DO_BREAK_PAGE/>generally are multiple subtypes for a type, there is a similar
    problem in coercing a value <QUOTE>down</QUOTE> the type hierarchy.
    Dealing with large numbers of interrelated types while still preserving
    modularity in the design of large systems is very difficult, and is an area
    of much current research.<FOOTNOTE>This statement, which also appears in
    the first edition of this book, is just as true now as it was when we wrote
    it
    <SPLITINLINE>
      <SCHEME>twelve years ago.</SCHEME>
      <JAVASCRIPT>in 1984.</JAVASCRIPT>
    </SPLITINLINE>
    Developing a useful, general framework for expressing
    the relations among different types of entities (what philosophers call
    <QUOTE>ontology</QUOTE>) seems intractably difficult.  The main difference
    between the confusion that existed
    <SPLITINLINE>
      <SCHEME>ten years ago</SCHEME>
      <JAVASCRIPT>in 1984</JAVASCRIPT>
    </SPLITINLINE>
    and the confusion that
    exists now is that now a variety of inadequate ontological theories have
    been embodied in a plethora of correspondingly inadequate programming
    languages.  For example, much of the complexity of
    <INDEX>object-oriented programming languages</INDEX>
    <INDEX>programming language<SUBINDEX>object-oriented</SUBINDEX></INDEX>
    object-oriented programming languages<EMDASH/>and the subtle and confusing
    differences among contemporary object-oriented
    languages<EMDASH/>centers on the treatment of generic operations on
    interrelated types.  Our own discussion of computational objects in
    chapter<SPACE/><REF NAME="chap:state"></REF> avoids these issues entirely.  Readers familiar with
    object-oriented programming will notice that we have much to say in
    chapter<SPACE/><REF NAME="chap:state"></REF> about local state, but we do not even mention
    <QUOTE>classes</QUOTE> or <QUOTE>inheritance.</QUOTE>  In fact, we suspect
    that these problems cannot be adequately addressed in terms of
    computer-language design alone, without also drawing on work in knowledge
    representation and automated reasoning.</FOOTNOTE>
  </TEXT>
  <FIGURE>
    <FIGURE split_scale="0.6" scale="0.59" src="img_original/ch2-Z-G-67.svg"></FIGURE>
    <CAPTION>Relations among types of geometric figures.</CAPTION>
    <LABEL NAME="fig:relations-among-figures"/>
  </FIGURE>

  <EXERCISE>
     <INDEX><USE>apply_generic</USE><SUBINDEX>with coercion</SUBINDEX></INDEX>
    Louis Reasoner has noticed that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    may try to coerce the arguments to each other<APOS/>s type even if they
    already have the same type.  Therefore, he reasons, we need to put
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in the coercion table to <QUOTE>coerce</QUOTE> arguments of each type to
    their own type.  For example, in addition to the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scheme-number-&gt;complex</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>javascript_number_to_complex</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    coercion shown above, he would do:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>javascript_number_to_javascript_</DECLARATION> <JAVASCRIPTINLINE>number</JAVASCRIPTINLINE></INDEX> 
      <INDEX><DECLARATION>complex_to_complex</DECLARATION></INDEX> 
      <SCHEME>
(define (scheme-number-&gt;scheme-number n) n)
(define (complex-&gt;complex z) z)
(put-coercion 'scheme-number 'scheme-number
  scheme-number-&gt;scheme-number)
(put-coercion 'complex 'complex complex-&gt;complex)
      </SCHEME>
      <JAVASCRIPT>
function javascript_number_to_javascript_number(n) { return n; }
<SHORT_SPACE/>	
function complex_to_complex(n) { return n; }
<SHORT_SPACE/>
put_coercion("javascript_number", "javascript_number",
             javascript_number_to_javascript_number);
put_coercion("complex", "complex", complex_to_complex);
      </JAVASCRIPT>
    </SNIPPET>

    <OL>
      <LI>
        With Louis<APOS/>s coercion
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
        installed, what happens if
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        is called with two arguments of type
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>scheme-number</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>"complex"</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	or two arguments of
        type
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>complex</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>"javascript_@number"</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	for an operation that is not found in the table for those types?
	For example, assume that we<APOS/>ve defined a generic exponentiation
        operation:
        <SNIPPET EVAL="no">
          <REQUIRES>apply_generic</REQUIRES>
          <SCHEME>
(define (exp x y) (apply-generic 'exp x y))
          </SCHEME>
          <JAVASCRIPT>
function exp(x, y) {
    return apply_generic("exp", list(x, y));
}
          </JAVASCRIPT>
        </SNIPPET>
        and have put a
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        for exponentiation in the
	<SPLITINLINE>
	  <SCHEME>Scheme-number</SCHEME>
	  <JAVASCRIPT>JavaScript-number</JAVASCRIPT>
	</SPLITINLINE>
        package but not in any other package:
        <SNIPPET EVAL="no" LATEX="yes">
          <SCHEME>
;; following added to Scheme-number package
(put 'exp '(scheme-number scheme-number)
  (lambda (x y) (tag (expt x y)))) ; using primitive expt
          </SCHEME>
          <JAVASCRIPT>
// following added to JavaScript-number package
put("exp", list("javascript_number", "javascript_number"),
    (x, y) => tag(math_exp(x, y))); // using primitive $\texttt{math\char`_exp}$
          </JAVASCRIPT>
        </SNIPPET>
        What happens if we call <SCHEMEINLINE>exp</SCHEMEINLINE> with two
	complex numbers as arguments?
      </LI>
      <LI>
        Is Louis correct that something had to be done about coercion with
	arguments of the same type, or does
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        work correctly as is?
      </LI>
      <LI>
        Modify
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	so that it doesn<APOS/>t try coercion if the two arguments have the
	same type.
      </LI>
    </OL>
    <SOLUTION>
    <OL>
    <LI>If Louis puts the coercion functions into the operations table,
    <JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE> will enter an infinite loop
    </LI>
    <LI>
    Louis's code does not work. <JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE> works correctly as is.
    But we could modify it to exit with an error before attempting any same-type coercions.
    </LI>
    <LI>
    <SNIPPET HIDE="yes">
    <NAME>apply_generic_with_unavailable_type_example</NAME>
    <REQUIRES>base_operation_table</REQUIRES>
    <REQUIRES>complex_number_package</REQUIRES>
    <REQUIRES>coercion_support</REQUIRES>
    <JAVASCRIPT>

function install_javascript_number_package() {
    function tag(x) {
        return attach_tag("javascript_number", x);
    }
    put("add", list("javascript_number", "javascript_number"),
        (x, y) => tag(x + y));
    put("sub", list("javascript_number", "javascript_number"),
        (x, y) => tag(x - y));
    put("mul", list("javascript_number", "javascript_number"),
        (x, y) => tag(x * y));
    put("div", list("javascript_number", "javascript_number"),
        (x, y) => tag(x / y));
    put("exp", list("javascript_number", "javascript_number"),
    (x, y) => tag(math_exp(x, y)));
    put("make", "javascript_number",
        x => tag(x));
    return "done";
}
install_javascript_number_package();

function make_javascript_number(n) {
    return get("make", "javascript_number")(n);
}

function javascript_number_to_javascript_number(n) {
    return n;
}
function complex_to_complex(n) {
    return n;
}
put_coercion("javascript_number", "javascript_number",
             javascript_number_to_javascript_number);
put_coercion("complex", "complex",
             complex_to_complex);
function exp(x, y) {
    return apply_generic("exp", list(x, y));
}

const c = make_javascript_number(4);
const d = make_javascript_number(2);
exp(c, d);

    </JAVASCRIPT>
    <SCHEME></SCHEME>
    </SNIPPET>
    <SNIPPET CHAP="4">
      <NAME>apply_generic_with_unavailable_type</NAME>
      <EXAMPLE>apply_generic_with_unavailable_type_example</EXAMPLE>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
function apply_generic(op, args) {
    const type_tags = map(type_tag, args);
    const fun = get(op, type_tags);
    if (! is_undefined(fun)) {
        return apply(fun, map(contents, args));
    } else {
        if (length(args) === 2) {
            const type1 = head(type_tags);
            const type2 = head(tail(type_tags));
            const a1 = head(args);
            const a2 = head(tail(args));
            const t1_to_t2 = get_coercion(type1, type2);
            const t2_to_t1 = get_coercion(type2, type1);
            return type1 === type2
                   ? error(list(op, type_tags),
                                "no method for these types")
                   : ! is_undefined(t1_to_t2)
                   ? apply_generic(op, list(t1_to_t2(a1), a2))
                   : ! is_undefined(t2_to_t1)
                   ? apply_generic(op, list(a1, t2_to_t1(a2)))
                   : error(list(op, type_tags),
                           "no method for these types");
        } else {
            return error(list(op, type_tags),
                         "no method for these types");
        }
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    </LI>
    </OL>
    </SOLUTION>
    <LABEL NAME="ex:2_81"/>
  </EXERCISE>

  <EXERCISE>
     <INDEX><USE>apply_generic</USE><SUBINDEX>with coercion of multiple arguments</SUBINDEX></INDEX>
    Show how to generalize
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to handle coercion in the general case of multiple arguments.  One
    strategy is to attempt to coerce all the arguments to the type of the
    first argument, then to the type of the second argument, and so on.
    Give an example of a situation where this strategy (and likewise the
    two-argument version given above) is not sufficiently general.
    (Hint: Consider the case where there are some suitable mixed-type
    operations present in the table that will not be tried.)
    <LABEL NAME="ex:multi-coercion"/>
    <SOLUTION>
      <SNIPPET HIDE="yes">
      <NAME>multi_coercion_example</NAME>
      <REQUIRES>base_operation_table</REQUIRES>
      <REQUIRES>javascript_number_package</REQUIRES>
      <REQUIRES>complex_number_package</REQUIRES>
      <REQUIRES>coercion_support</REQUIRES>
      <JAVASCRIPT>
function javascript_number_to_complex(n) {
    return make_complex_from_real_imag(contents(n), 0);
}

put_coercion("javascript_number", "complex",
             javascript_number_to_complex);

put("add", list("complex", "complex", "complex"),
  (x, y, z) => attach_tag("complex", make_complex_from_real_imag(
    real_part(x) + real_part(y) + real_part(z),
    imag_part(x) + imag_part(y) + imag_part(z))));

function add_three(x, y, z) {
    return apply_generic("add", list(x, y, z));
}

const c = make_complex_from_real_imag(4, 3);
const n = make_javascript_number(7);
add_three(c, c, n);
// add_three(c, n, n);

      </JAVASCRIPT>
      <SCHEME></SCHEME>
      </SNIPPET>
      <SNIPPET CHAP="4">
        <NAME>multi_coercion</NAME>
        <EXAMPLE>multi_coercion_example</EXAMPLE>
        <JAVASCRIPT>
function can_coerce_to(type_tags, target_type) {
    return accumulate((type_tag, result) =>
                        result &amp;&amp;
                        (type_tag === target_type ||
                         ! is_undefined(get_coercion(type_tag, target_type))),
                      true,
                      type_tags);
}

function find_coerced_type(type_tags) {
    return is_null(type_tags)
           ? undefined
           : can_coerce_to(type_tags, head(type_tags))
           ? head(type_tags)
           : find_coerced_type(tail(type_tags));
}

function coerce_all(args, target_type) {
    return map(arg => type_tag(arg) === target_type
                      ? arg
                      : get_coercion(type_tag(arg), target_type)(arg),
               args);
}

function apply_generic(op, args) {
    const type_tags = map(type_tag, args);
    const fun = get(op, type_tags);
    if (! is_undefined(fun)) {
        return apply(fun, map(contents, args));
    } else {
        const target_type = find_coerced_type(type_tags);
        if (! is_undefined(target_type)) {
          return apply_generic(op, coerce_all(args, target_type));
        } else {
            return error(list(op, type_tags),
                         "no method for these types");
        }
    }
}
        </JAVASCRIPT>
      </SNIPPET>
    A situation where this approach is not sufficient is if you have three
    types, A, B, C where A can be coerced to B and C can be coerced to B, and
    there is a registered operation for (A, B, B). Evaluating the operation for
    (A, B, C) will only try (A, B, C) and (B, B, B) while you can just coerce C
    to B and use the registered operation for (A, B, B)
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <INDEX>type(s)<SUBINDEX>raising</SUBINDEX></INDEX>
    Suppose you are designing a generic arithmetic system for dealing with
    the tower of types shown in figure<SPACE/><REF NAME="fig:tower"/>:
    integer, rational, real, complex.  For
    each type (except complex), design a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that raises objects of that type one level in the tower.  Show how to
    install a generic <SCHEMEINLINE>raise</SCHEMEINLINE> operation that will
    work for each type (except complex).
    <LABEL NAME="ex:raise"/>
    <SOLUTION>
      <SNIPPET HIDE="yes">
      <NAME>rational_number_package</NAME>
      <JAVASCRIPT>
function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}

function install_rational_package() {
    // internal functions
    function numer(x) {
        return head(x);
    }
    function denom(x) {
        return tail(x);
    }
    function make_rat(n, d) {
        let g = gcd(n, d);
        return pair(n / g, d / g);
    }
    function add_rat(x, y) {
        return make_rat(numer(x) * denom(y) +
                        numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function sub_rat(x, y) {
        return make_rat(numer(x) * denom(y) -
                        numer(y) * denom(x),
                        denom(x) * denom(y));
    }
    function mul_rat(x, y) {
        return make_rat(numer(x) * numer(y),
                        denom(x) * denom(y));
    }
    function div_rat(x, y) {
        return make_rat(numer(x) * denom(y),
                        denom(x) * numer(y));
    }
    // interface to rest of the system
    function tag(x) {
        return attach_tag("rational", x);
    }
    put("add", list("rational", "rational"),
        (x, y) => tag(add_rat(x, y)));
    put("sub", list("rational", "rational"),
        (x, y) => tag(sub_rat(x, y)));
    put("mul", list("rational", "rational"),
        (x, y) => tag(mul_rat(x, y)));
    put("div", list("rational", "rational"),
        (x, y) => tag(div_rat(x, y)));
    put("make", "rational",
        (n, d) => tag(make_rat(n, d)));
}
install_rational_package();

function make_rational(n, d) {
    return get("make", "rational")(n, d);
}
</JAVASCRIPT>
<SCHEME></SCHEME>
</SNIPPET>
      <SNIPPET HIDE="yes">
        <REQUIRES>javascript_number_package</REQUIRES>
        <REQUIRES>rational_number_package</REQUIRES>
        <REQUIRES>complex_number_package</REQUIRES>
        <REQUIRES>coercion_support</REQUIRES>
        <REQUIRES>apply_generic_with_coercion</REQUIRES>
        <NAME>raise_example</NAME>
        <JAVASCRIPT>
const a = make_javascript_number(2);
const b = make_rational(2, 3);
raise(a);
// raise(b);
        </JAVASCRIPT>
        <SCHEME></SCHEME>
      </SNIPPET>
      <SNIPPET CHAP="4">
        <NAME>raise</NAME>
        <EXAMPLE>raise_example</EXAMPLE>
        <JAVASCRIPT>
function raise(x) {
    return apply_generic("raise", list(x));
}

// add to Javascript-number package
put("raise", list("javascript_number"),
    x => make_rational(x, 1));
//// add to rational package
// put("raise", list("rational"),
//     x => make_real(div, numer(x), denom(x)));
// put("raise", list("rational"),
//     x => make_complex_from_real_imag(x, 0));
//// add to real package
// put("raise", list("real"),
//     x => make_complex_from_real_imag(x, 0));
        </JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
     <INDEX><USE>apply_generic</USE><SUBINDEX>with coercion by raising</SUBINDEX></INDEX>
    Using the <SCHEMEINLINE>raise</SCHEMEINLINE> operation of
    exercise<SPACE/><REF NAME="ex:raise"/>, modify the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    so that it coerces its arguments to have the same type by the method of
    successive raising, as discussed in this section.  You will need to devise
    a way to test which of two types is higher in the tower.  Do this in a
    manner that is <QUOTE>compatible</QUOTE> with the rest of the system and
    will not lead to problems in adding new levels to the tower.
    <LABEL NAME="ex:apply-with-raise"/>
  </EXERCISE>

  <EXERCISE>
     <INDEX><USE>apply_generic</USE><SUBINDEX>with coercion to simplify</SUBINDEX></INDEX>
    <INDEX>type(s)<SUBINDEX>lowering</SUBINDEX></INDEX>
    This section mentioned a method for <QUOTE>simplifying</QUOTE> a data object
    by lowering it in the tower of types as far as possible.  Design a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>drop</SCHEMEINLINE> that accomplishes this for the tower
    described in exercise<SPACE/><REF NAME="ex:raise"/>.  The key is to decide,
    in some general way, whether an object can be lowered.  For example, the
    complex number <LATEXINLINE>$1.5+0i$</LATEXINLINE> can be lowered as far as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>real</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"real"</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    the complex number <LATEXINLINE>$1+0i$</LATEXINLINE> can be lowered as far
    as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>integer</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>"integer"</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and the complex number <LATEXINLINE>$2+3i$</LATEXINLINE> cannot be lowered
    at all.  Here is a plan for determining whether an object can be lowered:
    Begin by defining a generic operation <SCHEMEINLINE>project</SCHEMEINLINE>
    that <QUOTE>pushes</QUOTE> an object down in the tower.  For example,
    projecting a complex number would involve throwing away the imaginary part.
    Then a number can be dropped if, when we
    <SCHEMEINLINE>project</SCHEMEINLINE> it and
    <SCHEMEINLINE>raise</SCHEMEINLINE> the result back to the type we started
    with, we end up with something equal to what we started with.  Show how to
    implement this idea in detail, by writing a
    <SCHEMEINLINE>drop</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that drops an object as far as possible.  You will need to design the
    various projection operations<FOOTNOTE>A real number can be projected to
    an integer using the
    <INDEX><USE>math_round</USE> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><USE>math_round</USE><ECMA>Math.round</ECMA></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>round</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_round</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    primitive, which returns the closest integer
    to its argument.</FOOTNOTE> and install
    <SCHEMEINLINE>project</SCHEMEINLINE> as a generic operation in the system.
    You will also need to make use of a generic equality predicate, such as
    described in exercise<SPACE/><REF NAME="ex:equ?"/>.  Finally, use
    <SCHEMEINLINE>drop</SCHEMEINLINE>
    to rewrite
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-generic</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_generic</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE/><REF NAME="ex:apply-with-raise"/> so that it
    <QUOTE>simplifies</QUOTE> its answers.
    <LABEL NAME="ex:simplify"/>
  </EXERCISE>

  <EXERCISE>
    Suppose we want to handle complex numbers whose real
    parts, imaginary parts, magnitudes, and angles can be either ordinary
    numbers, rational numbers, or other numbers we might wish to add to
    the system.  Describe and implement the changes to the system needed
    to accommodate this.  You will have to define operations such as
    <SCHEMEINLINE>sine</SCHEMEINLINE> and <SCHEMEINLINE>cosine</SCHEMEINLINE>
    that are generic over ordinary numbers and rational numbers.
    <LABEL NAME="ex:2_86"/>
  </EXERCISE>

  <INDEX>coercion<CLOSE/></INDEX>
  <INDEX>type(s)<SUBINDEX>hierarchy of</SUBINDEX><CLOSE/></INDEX>
  <INDEX>hierarchy of types<CLOSE/></INDEX>

</SUBSECTION>
