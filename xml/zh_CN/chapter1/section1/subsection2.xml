<SUBSECTION>
   <NAME>命名与环境</NAME> 
  <LABEL NAME="sec:naming"></LABEL>

   <TEXT>
    编程语言的一个关键方面是它提供的手段，用于使用
    <INDEX>命名<SUBINDEX>计算对象的</SUBINDEX></INDEX>
    名称来引用计算
    <SPLITINLINE>
      对象。
      <JAVASCRIPT>对象，我们的第一个这样的手段是<EM>常量</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>第二个这样的手段是变量，在语法上与JavaScript中的常量有区别，并在第3章中介绍。</COMMENT>
    我们说
    <INDEX>原语表达式<SUBINDEX>常量的名称</SUBINDEX></INDEX>
    名称标识一个
    <INDEX>常量（在JavaScript中）</INDEX>
    <SPLITINLINE>
      <EM>变量</EM>
      <JAVASCRIPT>常量</JAVASCRIPT>
    </SPLITINLINE>
    其
    <SPLITINLINE>
      
	<INDEX>变量<SUBINDEX>的值</SUBINDEX></INDEX>
      
      <JAVASCRIPT>
	<INDEX>常量（在JavaScript中）<SUBINDEX>的值</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>值</EM>是对象。
  </TEXT> 
  <TEXT>
     <SPLITINLINE>
      
	在 Lisp 的 Scheme 方言中，我们使用 
        <INDEX><DECLARATION>定义</DECLARATION></INDEX>
        <INDEX><DECLARATION>特殊形式（标记<EM>ns</EM>的并不在 IEEE Scheme 标准中）</DECLARATION><SUBINDEX><ORDER>定义</ORDER>{\tt define}</SUBINDEX></INDEX>
        定义。
      
      <JAVASCRIPT>
	在 JavaScript 中，我们使用 
	<INDEX>常量声明</INDEX>
	<INDEX>声明<SUBINDEX><ORDER>常量</ORDER>的常量 (<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>)</SUBINDEX></INDEX>
	<INDEX>语法形式<SUBINDEX>常量声明</SUBINDEX></INDEX>
	<INDEX><USE>const</USE>（关键字）</INDEX>
	<INDEX>关键字<SUBINDEX><ORDER>const</ORDER><USE>const</USE></SUBINDEX></INDEX>
	<INDEX>分号 (<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>结束语句</SUBINDEX></INDEX>
	<EM>常量声明</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
<SNIPPET>
      <NAME>var_size</NAME>
      <SCHEME>
(define size 2)
      </SCHEME>
      <JAVASCRIPT>
const size = 2;
      </JAVASCRIPT>
    </SNIPPET> 
    使解释器将值 2 与名称关联 
<SCHEMEINLINE>size</SCHEMEINLINE>. <FOOTNOTE>
    
    <SPLITINLINE>
          
        在这本书中，我们不
        <INDEX><DECLARATION>定义</DECLARATION><SUBINDEX>值的</SUBINDEX></INDEX>
        <INDEX>未指定值<SUBINDEX><ORDER>定义</ORDER><TT>定义</TT></SUBINDEX></INDEX>
        显示解释器<APOS></APOS>对
        评估定义的响应，因为这高度依赖于实现。
      
      <JAVASCRIPT>
        在这本书中，我们不显示解释器<APOS></APOS>对
        评估以声明结束的程序的响应，因为这可能依赖
        于之前的语句。有关详细信息，请参见练习<SPACE></SPACE><REF NAME="ex:value_producing"></REF>。
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
    一旦名称 <SCHEMEINLINE>size</SCHEMEINLINE> 
    已与数字 2 关联后，我们可以通过名称引用值 2：
<SNIPPET>
      <NAME>size_use_1</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
size
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
2
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>size_use_2</NAME>
      <REQUIRES>var_size</REQUIRES>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(* 5 size)
      </SCHEME>
      <SCHEMEOUTPUT>
10
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
5 * size;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
10
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
   <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY>
          JavaScript 解释器需要在名称 <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE> 可用于表达式之前，
          执行 <INDEX>常量声明</INDEX> 以声明 <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>。
          在这本在线书中，为了简洁，省略了需要在新语句之前评估的语句。
          然而，您可以单击它以查看和操作程序。
          然后程序将在新的浏览器标签中出现，并提供选项 <QUOTE>显示依赖项</QUOTE>。
          因此，点击 
          
            <REQUIRES>var_size</REQUIRES>
            <JAVASCRIPT>
5 * size;
            </JAVASCRIPT>
          
          后将出现一个新标签，包含程序，点击 <QUOTE>显示依赖项</QUOTE> 后，您将看到：
          
            <EXPECTED>10</EXPECTED>
            <JAVASCRIPT>
const size = 2;
5 * size;
            </JAVASCRIPT>
          
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT> 
   <TEXT>
    下面是使用 
    <SPLITINLINE>
      
	定义:
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>

    
      <NAME>pi</NAME>
      
(定义 pi 3.14159)
      
      <JAVASCRIPT>
const pi = 3.14159;
      </JAVASCRIPT>
    
    
      <NAME>radius</NAME>
      
(定义 radius 10)
      
      <JAVASCRIPT>
const radius = 10;
      </JAVASCRIPT>
    
    
      <NAME>pi_radius_radius</NAME>
      <EXPECTED>314.159</EXPECTED>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      
(* pi (* radius radius))
      
      <SCHEMEOUTPUT>
314.159
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
pi * radius * radius;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
314.159
      </JAVASCRIPT_OUTPUT>
    
    
      <NAME>circumference_definition</NAME>
      <REQUIRES>pi</REQUIRES>
      <REQUIRES>radius</REQUIRES>
      
(定义 circumference (* 2 pi radius))
      
      <JAVASCRIPT>
const circumference = 2 * pi * radius;
      </JAVASCRIPT>
    
    
      <EXPECTED>62.8318</EXPECTED>
      <NAME>circumference_use</NAME>
      <REQUIRES>circumference_definition</REQUIRES>
      
circumference
      
      <SCHEMEOUTPUT>
62.8318
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
circumference;
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
62.8318
      </JAVASCRIPT_OUTPUT>
    
  </TEXT> 
   <TEXT>
    <SPLITINLINE>
      
	<INDEX>抽象的方法<SUBINDEX><ORDER>定义</ORDER><TT>定义</TT></SUBINDEX></INDEX>
	定义
      
      <JAVASCRIPT>
	常量
	<INDEX>抽象的方法<SUBINDEX>常量声明作为</SUBINDEX></INDEX>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    是我们语言的最简单抽象手段，因为它使我们能够使用简单的名称来引用复合操作的结果，例如上面计算的
    周长。
    通常，计算对象可能具有非常复杂的结构，每次想要使用它们时，需要记住和重复其细节将极为不便。实际上，复杂程序的构建是逐步构建逐渐复杂的计算对象。
    解释器使这种逐步的程序构建特别方便，因为名称与对象的关联可以在后续交互中逐步创建。
    这一特性鼓励
    <INDEX>程序的增量开发</INDEX>
    <INDEX>程序<SUBINDEX>的增量开发</SUBINDEX></INDEX>
    的增量开发和测试，主要原因在于
    <INDEX>程序<SUBINDEX>结构</SUBINDEX></INDEX>
    <SPLITINLINE>
      
	Lisp
      
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    程序通常由大量相对简单的
    <SPLITINLINE>
      
	过程构成。
      
      <JAVASCRIPT>
        函数构成。
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 
   <TEXT>
    很明显，值与名称的关联及其后来的检索意味着解释器必须维持某种内存来跟踪名称-对象对。这种内存被称为
    <INDEX>环境</INDEX>
    <EM>环境</EM>
    （更准确地说是 
    <SPLITINLINE>
      
	<INDEX>全局环境</INDEX>
	<EM>全局环境</EM>，
      
      <JAVASCRIPT>
	<INDEX>程序环境</INDEX>
	<EM>程序环境</EM>，
      </JAVASCRIPT>
    </SPLITINLINE>
    因为我们稍后会看到，一个计算可能涉及多个不同的环境）。<FOOTNOTE>第<SPACE></SPACE><REF NAME="chap:state"></REF>章将展示这种环境的概念在理解解释器如何工作中是至关重要的。第<SPACE></SPACE><REF NAME="chap:meta"></REF>章将使用环境来实现解释器。</FOOTNOTE>
  </TEXT> 
</SUBSECTION>
