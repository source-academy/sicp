<SUBSECTION>
   <NAME>
    引入赋值的好处
  </NAME> 

  <LABEL NAME="sec:benefits-of-assignment"></LABEL>
   <INDEX>赋值<SUBINDEX>好处<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    正如我们将看到的，引入赋值到我们的编程语言中将我们带入了一系列复杂的概念问题。然而，视系统为
    <INDEX>对象<SUBINDEX>用对象建模的好处</SUBINDEX></INDEX>
    具有局部状态的对象集合是一种
    <INDEX>模块性<SUBINDEX>通过对象建模</SUBINDEX></INDEX>
    的强大技术。作为一个简单的例子，考虑设计一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    rand，每次调用时返回一个随机整数。
  </TEXT> 

  <TEXT> 
    完全不清楚“<QUOTE>随机选择</QUOTE>”的含义是什么。
    我们想要的可能是连续调用
    <INDEX>随机数生成器</INDEX>
<SCHEMEINLINE>rand</SCHEMEINLINE>  生成具有
    均匀分布的统计特性的数列。我们在此不讨论生成合适序列的方法。相反，我们假设有一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    ，它具有这样的性质：如果我们从一个给定的数字开始
<LATEXINLINE>$x_{1}$</LATEXINLINE>  并形成
    <SPLIT>
      
	
	  
$x_{2}$ = (rand-update $x_{1}$)
$x_{3}$ = (rand-update $x_{2}$)
	  
	
      
      <JAVASCRIPT>
	
	  <JAVASCRIPT>
$x_2$ = rand_update($x_1$);
$x_3$ = rand_update($x_2$);
      </JAVASCRIPT>
	
      </JAVASCRIPT>
    </SPLIT>
    那么值的序列
     <LATEXINLINE>$x_1, x_2, x_3, \ldots$</LATEXINLINE> ，将具有所需的统计特性。 <FOOTNOTE> 一种常见的实现方式是使用
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    的规则是  <LATEXINLINE>$x$</LATEXINLINE> 被更新为
     <LATEXINLINE>$ax+b$</LATEXINLINE> 模  <LATEXINLINE>$m$</LATEXINLINE> ，其中  <LATEXINLINE>$a$</LATEXINLINE>, <LATEXINLINE>$b$</LATEXINLINE> ，并且
     <LATEXINLINE>$m$</LATEXINLINE> 是适当选择的整数。
    第<SPACE></SPACE><REF NAME="chap:state"></REF>章
    <INDEX>高德纳，丹纳德 E.</INDEX>
    <CITATION>Knuth 1997b</CITATION> 包含关于生成随机数序列和
    确立其统计特性的技术的广泛讨论。注意 
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    计算一个数学函数：给定相同输入两次，它
    产生相同的输出。因此，由
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    生成的数列肯定不是“随机的”，如果按“随机”我们
    坚持认为序列中的每个数字与前一个
    数字无关。 “真实随机性”与所谓的 
    <INDEX>伪随机序列</INDEX>
    <EM>伪随机</EM>序列之间的关系，后者是通过确定的
    计算生成的，但具有合适的统计特性，是一个复杂的问题，涉及数学和
    哲学上的困难问题。  
    <INDEX>柯尔莫哥洛夫，A. N.</INDEX>
    柯尔莫哥洛夫，
    <INDEX>索洛莫诺夫，雷</INDEX>
    索洛莫诺夫，以及
    <INDEX>蔡廷，格里高利</INDEX>
    蔡廷在澄清这些问题上取得了很大进展；讨论可在
    <CITATION>Chaitin 1975</CITATION>中找到。 </FOOTNOTE>
  </TEXT>

  <TEXT> 
    我们可以实现  
<SCHEMEINLINE>rand</SCHEMEINLINE>  作为一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    带有一个局部状态变量  
<SCHEMEINLINE>x</SCHEMEINLINE>  被初始化为某个固定值 
    <SPLITINLINE>
      random-init.
      <JAVASCRIPT><JAVASCRIPTINLINE>random_init</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    每次调用  <SCHEMEINLINE>rand</SCHEMEINLINE>  计算 
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    当前值的  
<SCHEMEINLINE>x</SCHEMEINLINE> ，将其作为随机数返回，并将其存储为的新值  
<SCHEMEINLINE>x</SCHEMEINLINE>.
    <SNIPPET HIDE="yes">
      <NAME>rand_update</NAME>
      <JAVASCRIPT>
// A very simple rand_update function computes a number
// from 0 (inclusive) to 200560490131 (a large prime)
// from a value x by multiplying it with a constant a,
// adding a constant b, and then taking the remainder
// of dividing it by the large prime. We used it here 
// for illustration only, and do not claim any 
// statistical properties.
const m = 200560490131; 
const a = 1103515245;
const b = 12345;

function rand_update(x) {
    return (a * x + b) % m;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>rand</DECLARATION></INDEX> 
      <NAME>rand_definition</NAME>
      <REQUIRES>rand_update</REQUIRES>
      <REQUIRES>random_init</REQUIRES>
      <EXAMPLE>rand_example</EXAMPLE>
      <EXPECTED>40083849805</EXPECTED>
      <SCHEME>
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
      </SCHEME>
      <JAVASCRIPT>
function make_rand() {
   let x = random_init;
   return () =&gt; {
              x = rand_update(x);
              return x;
          };
}
const rand = make_rand();
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>random_init</NAME>
      <JAVASCRIPT>
const random_init = 123456789;
      </JAVASCRIPT>
    </SNIPPET>
    
    <SNIPPET HIDE="yes">
      <NAME>rand_example</NAME>
      <JAVASCRIPT>
display(rand());
display(rand());
display(rand());
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
rand();
rand();
rand();
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

   <TEXT>
    当然，我们可以通过简单地直接调用
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    来生成相同的随机数序列而不使用赋值。然而，这将意味着我们程序的任何使用
    随机数的部分都必须明确记住当前的
    x值以作为参数传递给
    <SPLITINLINE>
      rand-update.
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    为了意识到这将是多么烦人，考虑使用随机数来实现一种名为
    <INDEX>蒙特卡洛模拟</INDEX>
    <INDEX>随机数生成器<SUBINDEX>在蒙特卡洛模拟中</SUBINDEX></INDEX>
    <EM>蒙特卡洛模拟</EM>的技术。
  </TEXT> 

   <TEXT>
    蒙特卡洛方法包括从一个大集合中随机选择样本实验，
    然后根据通过统计这些实验结果估算出的概率进行推断。
    例如，我们可以利用
    <INDEX><ORDER>圆周率</ORDER>$\pi$ (pi)<SUBINDEX>狄利克雷估计</SUBINDEX></INDEX>
    $\pi$ 来近似，因为
    $6/\pi^2$ 是两个随机选择的整数没有公因子的概率；也就是说，它们的
    最大公约数为1。<FOOTNOTE>此定理由G.
    <INDEX>狄利克雷，彼得 古斯塔夫 勒热讷</INDEX>
    勒热讷·狄利克雷提出。见第4.5.2节
    <INDEX>高德纳，丹纳德 E.</INDEX>
    <CITATION>Knuth 1997b</CITATION> 对该讨论及证明。</FOOTNOTE>
    为了获得对$\pi$的近似，我们需要执行大量实验。在每次实验中，我们随机选择两个整数
    并进行测试
    <INDEX>最大公约数<SUBINDEX><ORDER>用于估计</ORDER>用于估计 $\pi$</SUBINDEX></INDEX>
    以查看它们的最大公约数是否为1。测试通过的次数比例
    给出了我们估算的 $6/\pi^2$，从而我们获得对$\pi$的近似。
  </TEXT> 

   <TEXT>
    我们程序的核心是一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      monte-carlo,
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    它将实验的次数作为参数，
    以及实验，表示为一个不带参数的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，每次运行时将返回 true 或 false。
    <SPLITINLINE>
      
	Monte-carlo
      
      <JAVASCRIPT>
	该函数
	monte_carlo
      </JAVASCRIPT>
    </SPLITINLINE>
    运行指定次数的实验，并返回一个数，
    指示实验结果为真的试验比例。
  </TEXT> 

   <TEXT>
    
      <INDEX><DECLARATION>estimate_pi</DECLARATION></INDEX> 
      <INDEX><DECLARATION>dirichlet_test</DECLARATION></INDEX> 
      <INDEX><DECLARATION>monte_carlo</DECLARATION></INDEX> 
      <NAME>monte_carlo</NAME>
      <REQUIRES>rand_definition</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>estimate_pi_example</EXAMPLE>
      <EXPECTED>3.1408877612819492</EXPECTED>
      
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))
      
      <JAVASCRIPT>
function estimate_pi(trials) {
    return math_sqrt(6 / monte_carlo(trials, dirichlet_test));
}
function dirichlet_test() {
    return gcd(rand(), rand()) === 1;
}
function monte_carlo(trials, experiment) {
    function iter(trials_remaining, trials_passed) {
        return trials_remaining === 0
               ? trials_passed / trials
               : experiment()
               ? iter(trials_remaining - 1, trials_passed + 1)
               : iter(trials_remaining - 1, trials_passed);
    }
    return iter(trials, 0);
}
      </JAVASCRIPT>
    
    
      <NAME>estimate_pi_example</NAME>
      <JAVASCRIPT>
estimate_pi(10000);
      </JAVASCRIPT>
    
  </TEXT> 

   <TEXT>
    现在让我们尝试使用 
    <SPLITINLINE>
      rand-update
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    而不是 rand 进行相同的计算，这种方式如果我们不使用赋值来模拟局部状态就将被迫采用：
    
      <INDEX><DECLARATION>estimate_pi</DECLARATION></INDEX> 
      <NAME>estimate_pi_alternative</NAME>
      <REQUIRES>rand_definition</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>estimate_pi_example</EXAMPLE>
      <EXPECTED>3.1408877612819492</EXPECTED>
      
(define (estimate-pi trials)
  (sqrt (/ 6 (random-gcd-test trials random-init))))

(define (random-gcd-test trials initial-x)
  (define (iter trials-remaining trials-passed x)
    (let ((x1 (rand-update x)))
      (let ((x2 (rand-update x1)))
        (cond ((= trials-remaining 0)   
               (/ trials-passed trials))
              ((= (gcd x1 x2) 1)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)
                     x2))
              (else
               (iter (- trials-remaining 1)
                     trials-passed
                     x2))))))
  (iter trials 0 initial-x))
      
      <JAVASCRIPT>
function estimate_pi(trials) {
    return math_sqrt(6 / random_gcd_test(trials, random_init));
}
function random_gcd_test(trials, initial_x) {
    function iter(trials_remaining, trials_passed, x) {
        const x1 = rand_update(x);
        const x2 = rand_update(x1);
        return trials_remaining === 0
               ? trials_passed / trials
               : gcd(x1, x2) === 1
               ? iter(trials_remaining - 1, trials_passed + 1, x2)
               : iter(trials_remaining - 1, trials_passed, x2);
    }
    return iter(trials, 0, initial_x);
}   
      </JAVASCRIPT>
    
  </TEXT> 

  <TEXT> 
    虽然程序仍然简单，但它暴露了一些痛苦的模块化破坏。在我们程序的第一个版本中，使用
<SCHEMEINLINE>rand</SCHEMEINLINE> ，我们可以直接将蒙特卡洛方法表达为一个通用
    <SPLITINLINE>
      monte-carlo
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，将一个任意参数作为参数  
<SCHEMEINLINE>experiment</SCHEMEINLINE>
     <SPLITINLINE>
      过程。
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    在我们程序的第二个版本中，由于随机数生成器没有局部状态，
    <SPLITINLINE>
      random-gcd-test
      <JAVASCRIPT><JAVASCRIPTINLINE>random_gcd_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE> 
    必须显式操作随机数  
<SCHEMEINLINE>x1</SCHEMEINLINE>  和  <SCHEMEINLINE>x2</SCHEMEINLINE>  并且
    回收  
<SCHEMEINLINE>x2</SCHEMEINLINE> 通过迭代循环作为 
    的新输入
    <SPLITINLINE>
      rand-update.
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    随机数的这种显式处理将累积测试结果的结构与我们特定实验使用两个随机数这一事实交织在一起，而其他蒙特卡洛实验可能使用一个或三个随机数。即使是顶层 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      estimate-pi
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_pi</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    也必须关注提供一个初始随机数。随机数生成器的内部泄漏到程序的其他部分一这一事实使得我们很难将蒙特卡洛的思想隔离开来，以便它可以应用于其他任务。在程序的第一个版本中，
    赋值将随机数生成器的状态封装在
<SCHEMEINLINE>rand</SCHEMEINLINE>
     <SPLITINLINE>
      过程，
    <JAVASCRIPT>函数，</JAVASCRIPT></SPLITINLINE>
    这样随机数生成的细节就可以保持与程序的其余部分独立。
   </TEXT>

   <TEXT>
    蒙特卡洛示例所展示的一般现象是：从复杂过程的一个部分来看，其他部分似乎会随时间而变化。它们有隐藏的时变局部状态。如果我们希望编写其结构反映这种分解的计算机程序，我们创建计算对象（如银行账户和随机数生成器），其行为随时间而变化。我们用局部状态变量来建模状态，并通过赋值给这些变量来建模状态的变化。
  </TEXT> 

   <TEXT>
    我们很容易通过引入赋值和隐藏状态在局部变量中的技术来结束这段讨论，这样我们可以比必须通过传递额外参数来显式操作所有状态时，以更模块化的方式进行系统结构。不幸的是，正如我们将看到的，情况并不那么简单。
  </TEXT> 

   <SHORT_PAGE LINES="2"></SHORT_PAGE> 
  <EXERCISE>
    <LABEL NAME="ex:monte-carlo-integration"></LABEL>
     <EM>蒙特卡洛积分</EM>
    <INDEX>蒙特卡洛积分</INDEX>
    <INDEX><ORDER>圆周率</ORDER>$\pi$ (pi)<SUBINDEX>用蒙特卡洛积分近似</SUBINDEX></INDEX>
    <INDEX>定积分<SUBINDEX>用蒙特卡洛模拟估计</SUBINDEX></INDEX>
    是一种通过蒙特卡洛模拟估算定积分的方法。考虑计算由一个谓词描述的空间区域的面积   
<LATEXINLINE>$P(x, y)$</LATEXINLINE> 对于这些点为真的
     <LATEXINLINE>$(x, y)$</LATEXINLINE>  在该区域内为真，而不在该区域内为假。例如，包含在半径
     <LATEXINLINE>$3$</LATEXINLINE>  以为中心
     <LATEXINLINE>$(5, 7)$</LATEXINLINE>  的圆内的区域由测试
    是否  
<LATEXINLINE>$(x-5)^2 + (y-7)^2\leq 3^2$</LATEXINLINE> 。要估计由此类谓词描述的区域的面积，首先选择一个包含该区域的矩形。例如，一个对角相对的角在  
<LATEXINLINE>$(2, 4)$</LATEXINLINE>  和
     <LATEXINLINE>$(8, 10)$</LATEXINLINE>  包含上述圆。所需的积分是矩形中位于该区域内的部分面积。我们可以通过在矩形中随机挑选点来估算该积分  
<LATEXINLINE>$(x, y)$</LATEXINLINE>  查看是否位于矩形内，并测试
     <LATEXINLINE>$P(x, y)$</LATEXINLINE>  对每个点确定该点是否位于区域内。如果我们用许多点尝试这个方法，那么落在区域内的点的比例应该给出矩形中位于区域内部分的比例。因此，将这个比例乘以整个矩形的面积就应得到一个积分的估计值。
    <P></P>
    将蒙特卡洛积分实现为一个 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>estimate_integral</USE></INDEX> 
    <SPLITINLINE>
      estimate-integral
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_integral</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    ，它将一个谓词作为参数  
<SCHEMEINLINE>P</SCHEMEINLINE> ，上限
    和下限  
<SCHEMEINLINE>x1</SCHEMEINLINE>,
    <SCHEMEINLINE>x2</SCHEMEINLINE>, <SCHEMEINLINE>y1</SCHEMEINLINE> ，和
     <SCHEMEINLINE>y2</SCHEMEINLINE>  用于矩形，以及要执行的试验次数以生成估计。 您的 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应使用相同的  
    <SPLITINLINE>
      monte-carlo
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    用于估算 
<LATEXINLINE>$\pi$</LATEXINLINE> 。使用您的
    <SPLITINLINE>
      estimate-integral
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_integral</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    来生成一个估计  
<LATEXINLINE>$\pi$</LATEXINLINE>  通过测量单位圆的面积。
    <P></P>
    你会发现
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    很有用，它返回一个从给定范围内随机选择的数字。以下 
    <SPLITINLINE>
      random-in-range
      <JAVASCRIPT><JAVASCRIPTINLINE>random_in_range</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    根据章节中使用的
    <SPLITINLINE>
      
	random
	过程
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    section<SPACE></SPACE><REF NAME="sec:primality"></REF>，返回一个小于其输入的非负数。
    <SPLITINLINE>
      
	<FOOTNOTE>
	MIT Scheme
	<INDEX>MIT Scheme<SUBINDEX><ORDER>random</ORDER>random</SUBINDEX></INDEX>
	提供了这样一个
	<SPLITINLINE>
	  过程。
	  <JAVASCRIPT>函数。</JAVASCRIPT>
	</SPLITINLINE>
	如果给定一个精确整数（如按章节中<SPACE></SPACE><REF NAME="sec:primality"></REF>所示），则返回一个精确整数，但如果给定一个小数值（如在本练习中），则返回一个小数值。</FOOTNOTE>
      
      <JAVASCRIPT>
	than<SPACE></SPACE>1.
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET POSTPADDING="no">
      <INDEX><DECLARATION>random_in_range</DECLARATION><FRAGILE></FRAGILE></INDEX> 
      <NAME>random_in_range</NAME>
      <REQUIRES>random_definition</REQUIRES>
      <EXAMPLE>random_in_range_example</EXAMPLE>
      <SCHEME>
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
      </SCHEME>
      <JAVASCRIPT>
function random_in_range(low, high) {
    const range = high - low;
    return low + math_random() * range;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>random_in_range_example</NAME>
      <JAVASCRIPT>
random_in_range(80000, 81000);
      </JAVASCRIPT>
    </SNIPPET>
     <SOLUTION>
      
	<NAME>exercise_3_5_solution_example</NAME>
	<JAVASCRIPT>
function inside_unit_circle(x, y) {
    return square(x) + square(y) &lt;= 1;
}
estimate_integral(inside_unit_circle, -1, 1, -1, 1, 50000);
	</JAVASCRIPT>
      
      
	<NAME>exercise_3_5_solution</NAME>
	<REQUIRES>square_definition</REQUIRES>
	<REQUIRES>monte_carlo</REQUIRES>
	<EXAMPLE>exercise_3_5_solution_example</EXAMPLE>
	<JAVASCRIPT>
function random_in_range(low, high) {
    const range = high - low;
    return low + math_random() * range;
}
function estimate_integral(pred, x1, x2, y1, y2, trials) {
    const area_rect = (x2 - x1) * (y2 - y1);
    return monte_carlo(trials,
                       () =&gt; pred(random_in_range(x1, x2),
                                  random_in_range(y1, y2))) * area_rect;
}
	</JAVASCRIPT>
      
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:random-with-reset"></LABEL> 
    能够
    <INDEX>随机数生成器<SUBINDEX>带重置</SUBINDEX></INDEX>
    <INDEX><USE>rand</USE><SUBINDEX>带重置</SUBINDEX></INDEX>
    重置随机数生成器以生成从给定值开始的序列是很有用的。设计一个新的
<SCHEMEINLINE>rand</SCHEMEINLINE>
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，它的参数可以是
    <SPLITINLINE>
      
	符号 generate 或符号
	reset
      
      <JAVASCRIPT>
	字符串 &quot;generate&quot; 或字符串
	&quot;reset&quot;
      </JAVASCRIPT>
    </SPLITINLINE>
    ，并具有如下行为：
    <SPLITINLINE>
      (rand &apos;generate)
      <JAVASCRIPT><JAVASCRIPTINLINE>rand(&quot;generate&quot;)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    生成一个新的随机数；
    <SPLITINLINE>
      
	((rand &apos;reset)
	$\langle \textit{new-value} \rangle$
	)
      
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>rand(&quot;reset&quot;)(</JAVASCRIPTINLINE><META>new-value</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    将内部状态变量重置为指定的 <META>新值</META>。这样，通过重置状态，可以生成可重复的序列。这在测试和调试使用随机数的程序时非常方便。
      <SOLUTION>
      
	<EXAMPLE>prng_example</EXAMPLE>
	<EXPECTED>127</EXPECTED>
	<JAVASCRIPT>
let state = 2;

function rand(symbol) {
    if (symbol === &quot;reset&quot;) {
        return new_state =&gt; {
                   state = new_state;
               };
    } else {
        // symbol is &quot;generate&quot;
        state = (state * 1010) % 1101;
        return state;
    } 
}
	</JAVASCRIPT>
      

      
	<NAME>prng_example</NAME>
	<JAVASCRIPT>
display(rand(&quot;generate&quot;));
display(rand(&quot;generate&quot;));
display(rand(&quot;generate&quot;));

// This should display 919, 47, 127

rand(&quot;reset&quot;)(2);

// State is reset to 2 again

display(rand(&quot;generate&quot;));
display(rand(&quot;generate&quot;));
display(rand(&quot;generate&quot;));

// Because initial state is the same, 919, 47, 127 is displayed again
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
rand(&quot;generate&quot;);
rand(&quot;generate&quot;);
rand(&quot;generate&quot;);

// This generates 919, 47, 127

rand(&quot;reset&quot;)(2);

// State is reset to 2 again

rand(&quot;generate&quot;);
rand(&quot;generate&quot;);
rand(&quot;generate&quot;);

// Because initial state is the same, 919, 47, 127 is generated
	</JAVASCRIPT_TEST>
      
    </SOLUTION>
   </EXERCISE>
   <INDEX>赋值<SUBINDEX>优点<CLOSE></CLOSE></SUBINDEX></INDEX> 
</SUBSECTION>
    
