<SECTION>
  <NAME>The Elements of Programming</NAME>
  <LABEL NAME="sec:elements-of-programming"></LABEL>

  <INDEX>programming<SUBINDEX>elements of</SUBINDEX><OPEN/></INDEX>

  <SECTIONCONTENT/>

  <TEXT>
    A powerful programming language is more than just a means for
    instructing a computer to perform tasks.  The language also serves as
    a framework within which we organize our ideas about processes.  Thus,
    when we describe a language, we should pay particular attention to the
    means that the language provides for combining simple ideas to form
    more complex ideas.  Every powerful language has three mechanisms for
    accomplishing this:
    <UL>
      <LI>
        <B>primitive expressions</B>,
	<INDEX>primitive expression</INDEX>
	which represent the simplest
        entities the language is concerned with,
      </LI>
      <LI>
        <B>means of combination</B>, by
        <INDEX>means of combination</INDEX>
	<INDEX>combination, means of<FRAGILE/></INDEX>
	which compound elements are built from simpler ones, and
      </LI>
      <LI>
        <B>means of abstraction</B>,
        <INDEX>means of abstraction</INDEX>
	by which compound elements can be named and manipulated as units.
      </LI>
    </UL>
  </TEXT>
  
  <TEXT>
    In programming, we deal with two kinds of elements: 
    <SPLITINLINE>
      <SCHEME>
	<INDEX>procedure</INDEX>
	procedures
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION/></INDEX>
	functions
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX>data</INDEX>
    data. (Later we will discover that they are really not so distinct.)
    Informally, data is <QUOTE>stuff</QUOTE> that we want to manipulate, and
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are descriptions of the rules for manipulating the data.
    Thus, any powerful programming language should be able to describe
    primitive data and primitive 
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and should have methods for
    combining and abstracting 
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and data.
  </TEXT>

  <TEXT>
    In this chapter we will deal only with simple
    <INDEX>numerical data</INDEX>
    <INDEX>data<SUBINDEX>numerical</SUBINDEX></INDEX>
    numerical data so that
    we can focus on the rules for building
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>The
    <LABEL NAME="foot:number-representation"></LABEL>
    characterization of numbers as <QUOTE>simple data</QUOTE> is a barefaced
    bluff. In fact, the treatment of numbers is one of the trickiest and most
    confusing aspects of any programming language.  Some typical issues
    involved are these:
    <INDEX>integer(s)</INDEX>
    <INDEX>real number</INDEX>
    <INDEX>number(s)<SUBINDEX>integer vs.<SPACE/>real number</SUBINDEX></INDEX>
    Some computer systems distinguish <EM>integers</EM>, such as 2,
    from <EM>real numbers</EM>, such as 2.71.  Is the real number
    2.00 different from the integer 2? Are the arithmetic operations
    used for integers the same as the operations used for real numbers?
    Does 6 divided by 2 produce 3, or 3.0? How large a number can we
    represent? How many decimal places of accuracy can we represent?
    Is the range of integers the same as the range of real numbers?
    <INDEX>numerical analysis</INDEX>
    <INDEX>roundoff error</INDEX>
    <INDEX>truncation error</INDEX>
    Above and beyond these questions, of course, lies a collection of
    issues concerning roundoff and truncation errors<EMDASH/>the
    entire science of numerical analysis.  Since our focus in this
    book is on large-scale program design rather than on numerical
    techniques, we are going to ignore these problems.  The numerical
    examples in this chapter will exhibit the usual roundoff behavior
    that one observes when using arithmetic operations that preserve
    a limited number of decimal places of accuracy in noninteger
    operations.
  </FOOTNOTE>
  In later chapters we will see that
  these same rules allow us to build 
  <SPLITINLINE>
    <SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT>
  </SPLITINLINE>
  to manipulate compound data as well.
  <INDEX>programming<SUBINDEX>elements of</SUBINDEX><CLOSE/></INDEX>
  </TEXT>

  <!-- Subsection 1 : Expressions -->
  &amp;subsection1.1.1;

  <!-- Subsection 2 : Naming and the Environment -->
  &amp;subsection1.1.2;

  <!-- Subsection 3 : Evaluating Combinations -->
  &amp;subsection1.1.3;

  <!-- Subsection 4 : Compound Procedures -->
  &amp;subsection1.1.4;

  <!-- Subsection 5 : The Substitution Model for Procedure Application -->
  &amp;subsection1.1.5;

  <!-- Subsection 6 : Conditional Expressions and Predicates -->
  &amp;subsection1.1.6;

  <!-- Subsection 7 : Example: Square Roots by Newtons Method -->
  &amp;subsection1.1.7;

  <!-- Subsection 8 : Procedures as Black-Box Abstractions -->
  &amp;subsection1.1.8;
  
</SECTION>
