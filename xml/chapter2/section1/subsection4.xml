    <SUBSECTION>
      <NAME>
        Extended Exercise: Interval Arithmetic
      </NAME>

      <LABEL NAME="sec:interval-arith"/>
      <INDEX>interval arithmetic|(</INDEX>
      <INDEX>arithmetic<SUBINDEX>on intervals|(</SUBINDEX></INDEX>
      <TEXT>
        Alyssa P. Hacker is designing a system to help people solve
        engineering problems.  One feature she wants to provide in her system
        is the ability to manipulate inexact quantities (such as measured
        parameters of physical devices) with known precision, so that when
        computations are done with such approximate quantities the results
        will be numbers of known precision.
      </TEXT>

      <TEXT>
        Electrical engineers will be using Alyssa<APOS/>s system to compute
        electrical quantities.  It is sometimes necessary for them to compute
        the value of a parallel equivalent resistance <LATEXINLINE>$R_{p}$</LATEXINLINE> of two
        resistors <LATEXINLINE>$R_{1}$</LATEXINLINE> and <LATEXINLINE>$R_{2}$</LATEXINLINE> using the formula
        <INDEX>resistance<SUBINDEX>formula for parallel resistors</SUBINDEX></INDEX>

        <LATEX>
          \[
          R_{p}=\frac{1}{1/R_{1}+1/R_{2}}
          \]
        </LATEX>
      </TEXT>

      <TEXT>
        Resistance values are usually known only up to some 
        <INDEX>resistance<SUBINDEX>tolerance of resistors</SUBINDEX></INDEX>
        tolerance
        guaranteed by the manufacturer of the resistor.  For example, if you
        buy a resistor labeled <QUOTE>6.8 ohms with 10% tolerance</QUOTE> you can only
        be sure that the resistor has a resistance between <LATEXINLINE>$6.8-0.68=6.12$</LATEXINLINE> and
        <LATEXINLINE>$6.8+0.68=7.48$</LATEXINLINE> ohms.  Thus, if you have a 6.8-ohm 10%<SPACE/>resistor in
        parallel with a 4.7-ohm 5%<SPACE/>resistor, the resistance of the
        combination can range from about 2.58 ohms (if the two resistors are
        at the lower bounds) to about 2.97 ohms (if the two resistors are at
        the upper bounds).
      </TEXT>

      <TEXT>
        Alyssa<APOS/>s idea is to implement <QUOTE>interval arithmetic</QUOTE> as a set of
        arithmetic operations for combining <QUOTE>intervals</QUOTE> (objects
        that represent the range of possible values of an inexact quantity).
        The result of adding, subtracting, multiplying, or dividing two
        intervals is itself an interval, representing the range of the
        result.
      </TEXT>

      <TEXT>
        Alyssa postulates the existence of an abstract object called an
        <QUOTE>interval</QUOTE> that has two endpoints: a lower bound and an upper bound.
        She also presumes that, given the endpoints of an interval, she can
        construct the interval using the data constructor 
        <!-- \indcode{make-interval} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>make-interval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_interval</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
        Alyssa first writes a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        for adding two intervals.  She
        reasons that the minimum value the sum could be is the sum of the two
        lower bounds and the maximum value it could be is the sum of the two
        upper bounds:

        <SNIPPET PAGE="94">
          <NAME>add_interval</NAME>
          <REQUIRES>make_interval</REQUIRES>
          <REQUIRES>print_interval</REQUIRES>
          <EXAMPLE>add_interval_example</EXAMPLE>
          <SCHEME>
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
          </SCHEME>
          <JAVASCRIPT>
function add_interval(x, y) {
    return make_interval(lower_bound(x) + lower_bound(y),
                         upper_bound(x) + upper_bound(y));
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        Alyssa also works out the product of two intervals by finding the
        minimum and the maximum of the products of the bounds and using them
        as the bounds of the resulting interval.  (<SPLITINLINE><SCHEME><SCHEMEINLINE>Min</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>math_min</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>max</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>math_max</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> are
        <!--\indprim*{min}-->
        <!--\ind*{primitive
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[min@<SCHEMEINLINE>min</SCHEMEINLINE>]-->
        <!--\indprim*{max}-->
        <!--\ind*{primitive
            <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
            (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[max@<SCHEMEINLINE>max</SCHEMEINLINE>]-->
        primitives that find the minimum or maximum of any number of
        arguments.)

        <SNIPPET PAGE="94">
          <NAME>mul_interval</NAME>
          <REQUIRES>make_interval</REQUIRES>
          <REQUIRES>print_interval</REQUIRES>
          <EXAMPLE>mul_interval_example</EXAMPLE>
          <SCHEME>
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
          </SCHEME>
          <JAVASCRIPT>
function mul_interval(x, y) {
    const p1 = lower_bound(x) * lower_bound(y);
    const p2 = lower_bound(x) * upper_bound(y);
    const p3 = upper_bound(x) * lower_bound(y);
    const p4 = upper_bound(x) * upper_bound(y);
    return make_interval(math_min(p1, p2, p3, p4),
                         math_max(p1, p2, p3, p4));
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        To divide two intervals, Alyssa multiplies the first by the reciprocal of
        the second.  Note that the bounds of the reciprocal interval are
        the reciprocal of the upper bound and the reciprocal of the lower bound, in
        that order.

        <SNIPPET PAGE="94">
          <NAME>div_interval</NAME>
          <REQUIRES>mul_interval</REQUIRES>
          <REQUIRES>print_interval</REQUIRES>
          <EXAMPLE>div_interval_example</EXAMPLE>
          <SCHEME>
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
          </SCHEME>
          <JAVASCRIPT>
function div_interval(x,y) {
    return mul_interval(x, make_interval(1 / upper_bound(y),
                                         1 / lower_bound(y)));
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <EXERCISE> 
        Alyssa<APOS/>s program is incomplete because she has not specified the
        implementation of the interval abstraction.  Here is a definition of
        the interval constructor:

        <SNIPPET PAGE="94" HIDE="yes">
          <NAME>make_interval</NAME>
          <SCHEME>
(define (make-interval a b) (cons a b))
          </SCHEME>
          <JAVASCRIPT>
function make_interval(x, y) { 
    return pair(x, y); 
}
function lower_bound(i) { 
    return head(i);
}
function upper_bound(i) { 
    return tail(i);
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="94" HIDE="yes">
          <NAME>print_interval</NAME>
          <SCHEME>
          </SCHEME>
          <JAVASCRIPT>
function print_interval(i) {
    return "[ "  + stringify(lower_bound(i)) + 
           " , " + stringify(upper_bound(i)) + " ]";
}
	  </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="94" EVAL="no">
          <NAME>make_interval_exercise</NAME>
          <SCHEME>
(define (make-interval a b) (cons a b))
          </SCHEME>
          <JAVASCRIPT>
function make_interval(x, y) {
    return pair(x, y); 
}
// lower_bound ...
// upper_bound ...
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="94" HIDE="yes">
          <NAME>add_interval_example</NAME>
          <SCHEME>
(add-interval (make-interval 1 2) (make-interval 3 5))
          </SCHEME>
          <JAVASCRIPT>
print_interval(add_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="94" HIDE="yes">
          <NAME>mul_interval_example</NAME>
          <SCHEME>
(mul-interval (make-interval 1 2) (make-interval 3 5))
          </SCHEME>
          <JAVASCRIPT>
print_interval(mul_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="94" HIDE="yes">
          <NAME>div_interval_example</NAME>
          <SCHEME>
(div-interval (make-interval 1 2) (make-interval 3 5))
          </SCHEME>
          <JAVASCRIPT>
print_interval(div_interval(make_interval(1, 2), 
                            make_interval(3, 5)));
          </JAVASCRIPT>
        </SNIPPET>

        Define selectors 
        <!-- \indcode{upper-bound} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>upper-bound</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>upper_bound</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and 
        <!-- \indcode{lower-bound} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>lower-bound</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>lower_bound</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> to complete
        the implementation.
        <LABEL NAME="ex:alyssa-interval-start"/>
<SOLUTION>
   <SNIPPET EVAL="no">
    <NAME>upper_bound</NAME>
   <JAVASCRIPT>
function make_interval(x, y) {
    return pair;
}
function lower_bound(x) { 
    return head(x); 
}
function upper_bound(x) { 
    return tail(x); 
}
   </JAVASCRIPT>
   <SCHEME>
   </SCHEME>
   </SNIPPET>
 </SOLUTION>
      </EXERCISE>

      <EXERCISE> 
        Using reasoning analogous to Alyssa<APOS/>s, describe how the difference
        of two intervals may be computed.  Define a corresponding subtraction
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, called 
        <!-- \indcode{sub-interval} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>sub-interval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>sub_interval</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
<SOLUTION>
    <SNIPPET>
      <REQUIRES>make_interval</REQUIRES>
      <REQUIRES>print_interval</REQUIRES>
      <EXAMPLE>sub_interval_example</EXAMPLE>      
    <JAVASCRIPT>
function sub_interval(x, y) {
    return make_interval(lower_bound(x) - upper_bound(y),
                         upper_bound(x) - lower_bound(y));
}
    </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sub_interval_example</NAME>
      <JAVASCRIPT>
print_interval(sub_interval(make_interval(0, 1), 
                            make_interval(0.6, 1.5)));
      </JAVASCRIPT>
    </SNIPPET>
  </SOLUTION>
      </EXERCISE>

      <EXERCISE> 
        <INDEX>width of an interval</INDEX>
        The <EM>width</EM> of an interval is half of the difference between its
        upper and lower bounds.  The width is a measure of the uncertainty of
        the number specified by the interval.  For some arithmetic operations
        the width of the result of combining two intervals is a function only
        of the widths of the argument intervals, whereas for others the width
        of the combination is not a function of the widths of the argument
        intervals.  Show that the width of the sum (or difference) of two
        intervals is a function only of the widths of the intervals being
        added (or subtracted).  Give examples to show that this is not true
        for multiplication or division.

	<SOLUTION>
	  Let us denote the width of interval <LATEXINLINE>$i$</LATEXINLINE>
	  with <LATEXINLINE>$W(i)$</LATEXINLINE>, and its lower and upper
	  bound with <LATEXINLINE>$L(i)$</LATEXINLINE> and
	  <LATEXINLINE>$U(i)$</LATEXINLINE>, respectively. Two
	  intervals <LATEXINLINE>$i_1$</LATEXINLINE> and
	  <LATEXINLINE>$i_2$</LATEXINLINE> have by definition widths of
	  <LATEXINLINE>$(U(i_1) - L(i_1))/2$</LATEXINLINE> and
	  <LATEXINLINE>$(U(i_2) - L(i_2))/2$</LATEXINLINE>, respectively.
	  Adding the two intervals
	  leads to the interval
	  <LATEXINLINE>$[ L(i_1) + L(i_2), U(i_1) + U(i_2)]$</LATEXINLINE>,
	  whose width is
	  <LATEX>\[(U(i_1) + U(i_2) - (L(i_1) + L(i_2)))/2\]</LATEX>
	  <LATEX>\[= (U(i_1) - L(i_1))/2 + (U(i_2) - L(i_2))/2\]</LATEX>
	  <LATEX>\[= (W(i_1) + W(i_2)\]</LATEX>
	  The argument for subtraction is similar.
	  <P/>
	  The widths of the result of multiplying intervals does not have
	  such a nice property. For example, multiplying any interval
	  with the zero-width interval 
	  <LATEXINLINE>$[ 0, 0 ]$</LATEXINLINE> yields a zero-width interval
	  whereas multiplying any interval
	  <LATEXINLINE>$i$</LATEXINLINE>
	  with the zero-width interval 
	  <LATEXINLINE>$[ 1, 1 ]$</LATEXINLINE> yields an interval with width
	  <LATEXINLINE>$W(i)$</LATEXINLINE>.
	  The argument for division is similar.
	</SOLUTION>
        
      </EXERCISE>

      <EXERCISE>
        <!-- \indcode{div-interval}[division by zero] -->
        Ben Bitdiddle, an expert systems programmer, looks over Alyssa<APOS/>s
        shoulder and comments that it is not clear what it means to
        divide by an interval that spans zero.  Modify Alyssa<APOS/>s program to
        check for this condition and to signal an error if it occurs.
        <LABEL NAME="ex:div-interval"/>
<SOLUTION>
<SNIPPET>
  <REQUIRES>upper_bound</REQUIRES>
  <REQUIRES>mul_interval</REQUIRES>
  <REQUIRES>print_interval</REQUIRES>
  <EXAMPLE>div_interval_example</EXAMPLE>
<JAVASCRIPT>
function div_interval(x, y) {
    return lower_bound(y) &lt;= 0 &amp;&amp; upper_bound(y) &gt;= 0
        ? error("Division error (interval spans 0)")
        : mul_interval(x, make_interval(1 / upper_bound(y),
                                        1 / lower_bound(y)));
}
</JAVASCRIPT>
<SCHEME>
</SCHEME>
</SNIPPET>
</SOLUTION>
</EXERCISE>
      <EXERCISE>
        <!-- \indcode{mul-interval}[more efficient version] -->
        In passing, Ben also cryptically comments: <QUOTE>By testing the signs of
          the endpoints of the intervals, it is possible to break <SPLITINLINE><SCHEME><SCHEMEINLINE>mul-interval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>mul_interval</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> into nine cases, only one of which requires more than
          two multiplications.</QUOTE>  Rewrite this
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        using Ben<APOS/>s
        suggestion.
        <LABEL NAME="ex:alyssa-interval-end"/>

	<SOLUTION>
<SNIPPET>
  <REQUIRES>upper_bound</REQUIRES>
  <REQUIRES>print_interval</REQUIRES>
  <EXAMPLE>mul_interval_example</EXAMPLE>
  <JAVASCRIPT>
function p(n) {
    return n &gt;= 0;
}
function n(n) {
    return ! p(n);
}
function the_trouble_maker(xl, xu, yl, yu) {
    const p1 = xl * yl;
    const p2 = xl * yu;
    const p3 = xu * yl;
    const p4 = xu * yu;
    make_interval(math_min(p1, p2, p3, p4),
                  math_max(p1, p2, p3, p4));
}
function mul_interval(x, y) {  
    const xl = lower_bound(x);
    const xu = upper_bound(x);
    const yl = lower_bound(y);
    const yu = upper_bound(y);
    return p(xl) &amp;&amp; p(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
           ? make_interval(xl * yl, xu * yu)
           : p(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
             ? make_interval(xu * yl, xu * yu)
             : p(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
               ? make_interval(xu * yl, xl * yu)
               : n(xl) &amp;&amp; p(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
                 ? make_interval(xl * yu, xu * yu)
                 : n(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
                   ? make_interval(xu * yl, xl * yl)
                   : n(xl) &amp;&amp; n(xu) &amp;&amp; p(yl) &amp;&amp; p(yu)  
                     ? make_interval(xl * yu, xu * yl)
                     : n(xl) &amp;&amp; n(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
                       ? make_interval(xl * yu, xl * yl)
                       : n(xl) &amp;&amp; n(xu) &amp;&amp; n(yl) &amp;&amp; n(yu)  
                         ? make_interval(xu * yu, xl * yl)
                         : n(xl) &amp;&amp; p(xu) &amp;&amp; n(yl) &amp;&amp; p(yu)  
                           ? the_trouble_maker(xl, xu, yl, yu)
                           : error("lower larger than upper");
}
  </JAVASCRIPT>
</SNIPPET>
	</SOLUTION>
      </EXERCISE>

      <TEXT>
        After debugging her program, Alyssa shows it to a potential user,
        who complains that her program solves the wrong problem.  He
        wants a program that can deal with numbers represented as a center
        value and an additive tolerance; for example, he wants to work with
        intervals such as <LATEXINLINE>$3.5\pm 0.15$</LATEXINLINE> rather than <LATEXINLINE>$[3.35, 3.65]$</LATEXINLINE>.  
        Alyssa 
        returns to her desk and fixes this problem by supplying an alternate
        constructor and alternate selectors:

        <SNIPPET PAGE="95">
          <NAME>make_center_width</NAME>
          <REQUIRES>make_interval</REQUIRES>
          <EXAMPLE>make_center_width_example</EXAMPLE>
          <SCHEME>
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
          </SCHEME>
          <JAVASCRIPT>
function make_center_width(c, w) {
    return make_interval(c - w, c + w);
}
function center(i) {
    return (lower_bound(i) + upper_bound(i)) / 2;
}
function width(i) {
    return (upper_bound(i) - lower_bound(i)) / 2;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="95" HIDE="yes">
          <NAME>make_center_width_example</NAME>
          <REQUIRES>make_interval</REQUIRES>
          <SCHEME>
          </SCHEME>
          <JAVASCRIPT>
const my_interval = make_center_width(1, 0.5);
width(my_interval);
	  </JAVASCRIPT>
	</SNIPPET>

        Unfortunately, most of Alyssa<APOS/>s users are engineers.  Real engineering
        situations usually involve measurements with only a small uncertainty,
        measured as the ratio of the width of the interval to the midpoint of
        the interval.  Engineers usually specify percentage tolerances on the
        parameters of devices, as in the resistor specifications given
        earlier.
      </TEXT>

      <EXERCISE>
        Define a constructor 
        <!-- \indcode{make-center-percent} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>make-center-percent</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_center_percent</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that takes a center and
        a percentage tolerance and produces the desired interval.  You must
        also define a selector <SCHEMEINLINE>percent</SCHEMEINLINE> that produces the
        percentage tolerance for a given interval.  The <SCHEMEINLINE>center</SCHEMEINLINE> selector
        is the same as the one shown above.
        <LABEL NAME="ex:make-center-percent"/>
 <SOLUTION>
    <SNIPPET>
      <NAME>make_center_percent</NAME>
      <REQUIRES>make_center_width</REQUIRES>
      <EXAMPLE>make_center_percent_example</EXAMPLE>
    <JAVASCRIPT>
function make_center_percent(center, percent) {
    const width = center * (percent / 100);
    return make_center_width(center, width);
}
function percent(i) {
    return (width(i) / center(i)) * 100;
}
    </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_center_percent_Example</NAME>
      <JAVASCRIPT>
const my_interval = make_center_percent(6.0, 10);
percent(my_interval);
      </JAVASCRIPT>
    </SNIPPET>
  </SOLUTION>
      </EXERCISE>

      <EXERCISE> 
        Show that under the assumption of small percentage tolerances there is
        a simple formula for the approximate percentage tolerance of the
        product of two intervals in terms of the tolerances of the factors.
        You may simplify the problem by assuming that all numbers are
        positive.
        <LABEL NAME="ex:interval-product"/>
 <SOLUTION>
      Let us denote the maximal error of an interval with center
      <LATEXINLINE>$i$</LATEXINLINE> by
      <LATEXINLINE>$\Delta i$</LATEXINLINE>
      the maximal error of  an interval with center
      <LATEXINLINE>$j$</LATEXINLINE> by
      <LATEXINLINE>$\Delta j$</LATEXINLINE>, and
      the maximal error of the multiplication result with center
      <LATEXINLINE>$k$</LATEXINLINE> by
      <LATEXINLINE>$\Delta k$</LATEXINLINE>. Then:
<LATEX>\[ k + \Delta k = (i+\Delta i) * (j+\Delta j)
       =  ij + j \Delta i + i\Delta j + \Delta i \Delta j \]</LATEX>
Since <LATEXINLINE>$k = i j$</LATEXINLINE>
<LATEX>\[ \Delta k = j\Delta i + i \Delta j + \Delta i\Delta j \] </LATEX>
Since we assume that
<LATEXINLINE>$\Delta i \ll i$</LATEXINLINE> and
<LATEXINLINE>$\Delta j \ll j$</LATEXINLINE>, we can neglect
the term
<LATEXINLINE>$\Delta i \Delta j$</LATEXINLINE> and obtain
<LATEX>\[ \Delta k = j \Delta i + i \Delta j \]</LATEX>
Expressed in tolerances, we obtain:
<LATEX>\[ \Delta k / k = (j \Delta i + i \Delta j) / ij = \Delta i/i + \Delta j/j \] </LATEX>
Thus, the tolerance of the result of an interval multiplication
is (roughly) the sum of the tolerances of its arguments.
  </SOLUTION>
      </EXERCISE>

      <TEXT>
        After considerable work, Alyssa P. Hacker delivers her finished
        system.  Several years later, after she has forgotten all about it, she
        gets a frenzied call from an irate user,  Lem E. Tweakit.
        It seems that Lem has
        noticed that the formula for parallel resistors can be written in two
        <INDEX>resistance<SUBINDEX>formula for parallel resistors</SUBINDEX></INDEX>
        algebraically equivalent ways:

        <LATEX>
          \[
          \frac{R_{1}R_{2}}{R_{1}+R_{2}}
          \]
        </LATEX>


        and

        <LATEX>
          \[
          \frac{1}{1/R_{1}+1/R_{2}}
          \]
        </LATEX>


        He has written the following two programs, each of which computes the
        parallel-resistors formula differently:

        <SNIPPET PAGE="95">
          <NAME>par</NAME>
          <REQUIRES>add_interval</REQUIRES>
          <REQUIRES>mul_interval</REQUIRES>
          <REQUIRES>div_interval</REQUIRES>
          <REQUIRES>print_interval</REQUIRES>
          <EXAMPLE>par_example</EXAMPLE>
          <SCHEME>
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1))) 
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))
          </SCHEME>
          <JAVASCRIPT>
function par1(r1, r2) {
    return div_interval(mul_interval(r1, r2),
                        add_interval(r1, r2));
}
function par2(r1, r2) {
    const one = make_interval(1, 1);
    return div_interval(one,
                        add_interval(div_interval(one, r1),
                                     div_interval(one, r2)));
}
          </JAVASCRIPT>                
        </SNIPPET>
        <SNIPPET HIDE="yes">
          <NAME>par_example</NAME>
          <JAVASCRIPT>
display(print_interval(par1(pair(4,6), pair(7,8))));

display(print_interval(par2(pair(4,6), pair(7,8))));
          </JAVASCRIPT>
        </SNIPPET>

        Lem complains that Alyssa<APOS/>s program gives different answers for
        the two ways of computing. This is a serious complaint.
      </TEXT>

      <EXERCISE> 
        Demonstrate that Lem is right. Investigate the behavior of the
        system on a variety of arithmetic expressions. Make some intervals
	<LATEXINLINE>$A$</LATEXINLINE> and <LATEXINLINE>$B$</LATEXINLINE>,
        and use them in computing the expressions <LATEXINLINE>$A/A$</LATEXINLINE> and <LATEXINLINE>$A/B$</LATEXINLINE>.  You will
        get the most insight by using intervals whose width is a small
        percentage of the center value. Examine the results of the computation
        in center-percent form (see exercise<SPACE/><REF NAME="ex:make-center-percent"/>).
        <LABEL NAME="ex:interval-compare"/>

	<SOLUTION>
	  The expression <LATEXINLINE>$A/A$</LATEXINLINE> is interesting, because if the interval
	  is meant to represent a specific (albeit imprecisely known) value, the result
	  should be exactly 1 (width 0), whereas the interval division will result in an
	  interval with positive width. Multiple occurrences of the same term are not
	  recognized as such in the approaches above and thus they
	  will suffer from this problem.
	</SOLUTION>
	  
	
      </EXERCISE>

      <EXERCISE>
        Eva Lu Ator, another user, has also noticed the different intervals
        computed by different but algebraically equivalent expressions. She
        says that a formula to compute with intervals using Alyssa<APOS/>s system
        will produce tighter error bounds if it can be written in such a form
        that no
	<SPLITINLINE>
	  <SCHEME>
	    variable
	  </SCHEME>
	  <JAVASCRIPT>
	    name
	  </JAVASCRIPT>
	</SPLITINLINE>
	that represents an uncertain number is repeated.
        Thus, she says, <SCHEMEINLINE>par2</SCHEMEINLINE> is a <QUOTE>better</QUOTE> program for parallel
        resistances than <SCHEMEINLINE>par1</SCHEMEINLINE>.  Is she right?  Why?

	<SOLUTION>
	  She is right. The so-called <EM>dependency problem</EM> in interval arithmetic
	  arises when the same input values (or intermediate terms) appear in a 
	  function on intervals. The second formulation is better because each input
	  occurs only once, and therefore the result of a naive interval calculation is
	  optimal.
	</SOLUTION>
	
      </EXERCISE>

      <EXERCISE>
        Explain, in general, why equivalent algebraic expressions may lead to
        different answers.  Can you devise an interval-arithmetic package that
        does not have this shortcoming, or is this task impossible?  (Warning:
        This problem is very difficult.)

	<SOLUTION>
	  The dependency problem in interval arithmetic is solved using linear
	  and polynomial appoximations, leading to affine arithmetic and
	  Taylor series methods, respectively.
	</SOLUTION>
	
      </EXERCISE>
      <INDEX>interval arithmetic|)</INDEX>
      <INDEX>arithmetic<SUBINDEX>on intervals|)</SUBINDEX></INDEX>
    </SUBSECTION>
