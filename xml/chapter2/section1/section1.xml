<SECTION>
  <NAME>Introduction to Data Abstraction</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:data-abstraction"/>

  <TEXT>
    In section<SPACE/><REF NAME="sec:black-box"/>, we noted that a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    used as an element in creating a more complex
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    could be regarded not only as a collection of particular operations but
    also as a 
    <SPLITINLINE>
      <SCHEME>procedural</SCHEME>
      <JAVASCRIPT>functional</JAVASCRIPT>
    </SPLITINLINE>
    abstraction.  That is, the details of how the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    was implemented could be suppressed, and the particular
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    itself could be replaced by any other
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the same overall behavior.  In other words, we could make an
    abstraction that would separate the way the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    would be used from the details of how the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    would be implemented in terms of more primitive
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    The analogous notion for compound data is called 
    <INDEX>data abstraction</INDEX>
    <EM>data abstraction</EM>.  Data abstraction is a methodology that enables
    us to isolate how a compound data object is used from the details of how it
    is constructed from more primitive data objects.
  </TEXT>
  <TEXT>
    The basic idea of data abstraction is to structure the programs that are
    to use compound data objects so that they operate on 
    <INDEX>abstract data</INDEX>
    <INDEX>data<SUBINDEX>abstract</SUBINDEX></INDEX>
    <QUOTE>abstract data.</QUOTE> That is, our programs should use data in such
    a way as to make no assumptions about the data that are not strictly
    necessary for performing the task at hand.  At the same time, a 
    <INDEX>concrete data representation</INDEX>
    <INDEX>data<SUBINDEX>concrete representation of</SUBINDEX></INDEX>
    <QUOTE>concrete</QUOTE> data representation is defined independent of the
    programs that use the data.  The interface between these two parts of our
    system will be a set of
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    called 
    <INDEX>selector</INDEX>
    <EM>selectors</EM> and 
    <INDEX>constructor</INDEX>
    <EM>constructors</EM>, that implement the abstract data in terms of the
    concrete representation.  To illustrate this technique, we will consider
    how to design a set of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for manipulating rational numbers.
  </TEXT>

  <!-- Subsection 1 : Example: Arithmetic Operations for Rational Numbers -->
  &amp;subsection2.1.1;

  <!-- Subsection 2 : Abstraction Barriers -->
  &amp;subsection2.1.2;

  <!-- Subsection 3 : What Is Meant by Data? -->
  &amp;subsection2.1.3;

  <!-- Subsection 4 : Extended Exercise: Interval Arithmetic -->
  &amp;subsection2.1.4;

</SECTION>
