<SUBSECTION>
   <NAME>
    <SPLITINLINE>
      使用 Lambda 构造程序
      <JAVASCRIPT>使用 Lambda 表达式构造函数
      </JAVASCRIPT>
    </SPLITINLINE>
  </NAME> 

  <LABEL NAME="sec:lambda"></LABEL>

  <TEXT>
  <SPLIT>
    <SCHEME>
        In using <SCHEMEINLINE>sum</SCHEMEINLINE> as in
	section<SPACE></SPACE><REF NAME="sec:procedures-as-parameters"></REF>,
        it seems terribly awkward to have to define trivial procedures such as
        <SCHEMEINLINE>pi-term</SCHEMEINLINE> and
	<SCHEMEINLINE>pi-next</SCHEMEINLINE> just so we can use them as
	arguments to our higher-order procedure.
        Rather than define <SCHEMEINLINE>pi-next</SCHEMEINLINE> and 
        <SCHEMEINLINE>pi-term</SCHEMEINLINE>, it would be more convenient to
	have a way to directly specify <QUOTE>the procedure that returns its
        input incremented by 4</QUOTE> and <QUOTE>the procedure that returns the
        reciprocal of its input times its input plus 2.</QUOTE>  We can do this
	by introducing the special form <SCHEMEINLINE>lambda</SCHEMEINLINE>,
	which creates procedures. Using <SCHEMEINLINE>lambda</SCHEMEINLINE> we
	can describe what we want as
        <SNIPPET EVAL="no">
          <SCHEME>
(lambda (x) (+ x 4))
          </SCHEME>
        </SNIPPET>
        and 
        <SNIPPET EVAL="no">
          <SCHEME>
(lambda (x) (/ 1.0 (* x (+ x 2))))
          </SCHEME>
        </SNIPPET>
    </SCHEME>
     <JAVASCRIPT>
在使用 <JAVASCRIPTINLINE>sum</JAVASCRIPTINLINE> 时，如
	第<SPACE></SPACE><REF NAME="sec:procedures-as-parameters"></REF> 节，声明像
        <JAVASCRIPTINLINE>pi_term</JAVASCRIPTINLINE> 和
	<JAVASCRIPTINLINE>pi_next</JAVASCRIPTINLINE> 这样的简单函数为了能将它们作为
	高阶函数的参数，似乎非常尴尬。与其声明
	<JAVASCRIPTINLINE>pi_next</JAVASCRIPTINLINE> 和 
        <JAVASCRIPTINLINE>pi_term</JAVASCRIPTINLINE>，更方便的方式是
        直接指定 <QUOTE>返回输入加 4 的函数</QUOTE> 和 <QUOTE>返回其输入的倒数乘以输入加 2 的函数。</QUOTE> 我们可以通过引入 <EM>lambda 表达式</EM> 作为创建函数的语法形式来实现这一点。
	使用 lambda 表达式，我们可以将我们想要的描述为
        
          <JAVASCRIPT>
x =&gt; x + 4
          </JAVASCRIPT>
        
        和 
        
          <JAVASCRIPT>
x =&gt; 1 / (x * (x + 2))
          </JAVASCRIPT>
        
    </JAVASCRIPT>
   </SPLIT>
     <SPLITINLINE>
      
	那么我们的
	pi-sum
	过程可以表示为
      
      <JAVASCRIPT>
	那么我们可以将我们的
	<JAVASCRIPTINLINE>pi_sum</JAVASCRIPTINLINE>
	函数表示为
      </JAVASCRIPT>
    </SPLITINLINE>
    而无需
    <SPLITINLINE>
      定义任何辅助过程，如
      <JAVASCRIPT>声明任何辅助函数：</JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET PAGE="62">
      <INDEX><DECLARATION>pi_sum</DECLARATION><SUBINDEX><ORDER>lambda</ORDER>with lambda expression</SUBINDEX></INDEX>
      <NAME>pi_sum_definition3</NAME>
      <EXPECTED>3.139592655589783</EXPECTED>
      <REQUIRES>sum_definition</REQUIRES>
      <EXAMPLE>pi_sum_example</EXAMPLE>
      <EXPECTED>3.139592655589783</EXPECTED>
      <SCHEME>
(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
      </SCHEME>
      <JAVASCRIPT>
function pi_sum(a, b) {
    return sum(x =&gt; 1 / (x * (x + 2)),
               a,
               x =&gt; x + 4,
               b);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   <TEXT>
    再次使用 
    <SPLITINLINE>
      lambda,
      <JAVASCRIPT>lambda 表达式,</JAVASCRIPT>
    </SPLITINLINE> 
    我们可以编写 integral
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    而无需 
    <SPLITINLINE>
      定义辅助过程
      <JAVASCRIPT>声明辅助函数:</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      add-dx:
      <JAVASCRIPT><JAVASCRIPTINLINE>add_dx</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    
      <NAME>integral_example_2</NAME>
      
(integral cube 0 1 0.01)
      
      <JAVASCRIPT>
integral(cube, 0, 1, 0.01);
      </JAVASCRIPT>
    
    
      <INDEX><DECLARATION>integral</DECLARATION><SUBINDEX><ORDER>lambda</ORDER>与 lambda 表达式</SUBINDEX></INDEX>
      <NAME>integral_definition2</NAME>
      <REQUIRES>sum_definition</REQUIRES>
      <REQUIRES>cube_definition</REQUIRES>
      <EXAMPLE>integral_example_2</EXAMPLE>
      <EXPECTED>0.24998750000000042</EXPECTED>
      
(define (integral f a b dx)
  (* (sum f
          (+ a (/ dx 2.0))
          (lambda (x) (+ x dx))
          b)
     dx))
      
      <JAVASCRIPT>
function integral(f, a, b, dx) {
    return sum(f,
               a + dx / 2,
               x =&gt; x + dx,
               b)
           *
           dx;
}
      </JAVASCRIPT>
    
  </TEXT> 
  <LONG_PAGE LINES="2"></LONG_PAGE>
  <TEXT>
  <SPLIT>
    <SCHEME>
        In general, <SCHEMEINLINE>lambda</SCHEMEINLINE> is used to create
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>creating with <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>lambda expression</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
	<INDEX>lambda expression</INDEX>
	<INDEX>syntactic forms<SUBINDEX>lambda expression</SUBINDEX></INDEX>
	<INDEX>lambda expression<SUBINDEX>function declaration vs.</SUBINDEX><OPEN></OPEN></INDEX>
	<INDEX>function declaration<SUBINDEX>lambda expression vs.</SUBINDEX><OPEN></OPEN></INDEX>
	<INDEX><ORDER>0a1</ORDER><JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE></INDEX>  
        procedures in the same way as <SCHEMEINLINE>define</SCHEMEINLINE>,
	except that 
        <INDEX>procedure<SUBINDEX>anonymous</SUBINDEX></INDEX>
        no name is specified for the procedure:
        <SNIPPET EVAL="no">
	  <SCHEME>
	    (lambda ($formal-parameters$) $body$)
	  </SCHEME>
        </SNIPPET>
	The resulting procedure	is just as much a procedure
	as one that is created using <SCHEMEINLINE>define</SCHEMEINLINE>.
	The only difference is that it has not been associated with any name in the
	environment.
    </SCHEME>
     <JAVASCRIPT>
一般来说，lambda 表达式用于以与函数声明相同的方式创建函数，
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>使用 <SPLITINLINE>lambda<JAVASCRIPT>lambda 表达式</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
	<INDEX>lambda 表达式</INDEX>
	<INDEX>语法形式<SUBINDEX>lambda 表达式</SUBINDEX></INDEX>
	<INDEX>lambda 表达式<SUBINDEX>函数声明与</SUBINDEX><OPEN></OPEN></INDEX>
	<INDEX>函数声明<SUBINDEX>lambda 表达式与</SUBINDEX><OPEN></OPEN></INDEX>
	<INDEX><ORDER>0a1</ORDER><JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE></INDEX>  
        <INDEX><FUNCTION></FUNCTION><SUBINDEX>匿名</SUBINDEX></INDEX>
只不过没有为该函数指定名称，并且省略了
	<JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>关键字和大括号
	（如果只有一个参数，
	<INDEX>括号<SUBINDEX><ORDER>lambda 参数</ORDER>包围 lambda 表达式的参数</SUBINDEX></INDEX>
	参数列表周围的括号也可以被省略，如我们所见的例子一样）。<FOOTNOTE>在第<SPACE></SPACE><REF NAME="sec:graphics"></REF> 节中，我们将扩展 
	lambda 表达式的语法，允许区块作为主体，而不仅仅是表达式，如在函数声明语句中。</FOOTNOTE> 	
	
	  <JAVASCRIPT>
(<META>parameters</META>) =&gt; <META>expression</META>
	  </JAVASCRIPT>
	
	得到的函数与使用函数声明语句创建的函数一样。
	<INDEX>函数声明<SUBINDEX>lambda 表达式与</SUBINDEX></INDEX>
	<INDEX>lambda 表达式<SUBINDEX>函数声明与</SUBINDEX></INDEX>
	唯一的区别在于它没有与环境中的任何名称关联。
</JAVASCRIPT>
</SPLIT>
     <SPLITINLINE>
      事实上，
      <JAVASCRIPT>我们认为</JAVASCRIPT>
    </SPLITINLINE>
<SNIPPET PAGE="62">
      <NAME>plus4_definition_1</NAME>
      <EXAMPLE>plus4_example</EXAMPLE>
      <SCHEME>
(define (plus4 x) (+ x 4))
      </SCHEME>
      <JAVASCRIPT>
function plus4(x) { 
    return x + 4; 
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="62" HIDE="yes">
      <NAME>plus4_example</NAME>
      <SCHEME>
(plus4 3)
      </SCHEME>
      <JAVASCRIPT>
plus4(3);
      </JAVASCRIPT>
    </SNIPPET>
     <SPLITINLINE>
      相当于
      <JAVASCRIPT>
	等同于<FOOTNOTE>在 JavaScript 中，这两个版本之间存在微妙的差异：
	函数声明语句会被自动“提升”（移动）到周围块的起始位置，
	或者如果它出现在任何块之外，则移动到程序的开头，而常量声明则不会被移动。
	用函数声明声明的名称可以通过赋值被重新分配（第<SPACE></SPACE><REF NAME="sec:local-state-variables"></REF> 节），而用常量声明声明的名称则不能。在本书中，我们避免这些特性，并将
	函数声明视为与对应的常量声明相等。</FOOTNOTE>
    </JAVASCRIPT>
    </SPLITINLINE>
  <INDEX>lambda 表达式<SUBINDEX>函数声明 vs.</SUBINDEX><CLOSE></CLOSE></INDEX>
  <INDEX>函数声明<SUBINDEX>lambda 表达式 vs.</SUBINDEX><CLOSE></CLOSE></INDEX>
<SNIPPET PAGE="63">
      <NAME>plus4_definition_2</NAME>
      <EXAMPLE>plus4_example</EXAMPLE>
      <SCHEME>
(define plus4 (lambda (x) (+ x 4)))
      </SCHEME>
      <JAVASCRIPT>
const plus4 = x =&gt; x + 4;
      </JAVASCRIPT>
    </SNIPPET>
     <SPLIT>
      
        我们可以这样读取 lambda 表达式：
        
          
(         lambda           (x)           (+   x     4)
// 读取为：      ^               ^             ^   ^     ^
//   为 x 的过程，它将 x 和 4 相加
          
        
      
      <JAVASCRIPT>
        我们可以这样读取 lambda 表达式：
	<WEB_ONLY>
        
          <JAVASCRIPT>
//                      x         =&gt;                   x    +   4
//                      ^         ^                    ^    ^   ^
// 为 x 的函数，结果是值加 4
	  </JAVASCRIPT>
	
	</WEB_ONLY>
	<PDF_ONLY>
    <SPLIT>
	    <JAVASCRIPT>
        
\begin{flushleft}\normalcodesize
\begin{tabular}{@{}ccccc}
   \tt x &amp; \tt =&gt;  &amp; \tt x &amp; \tt + &amp; \tt 4 \\
  $\Big\uparrow$ &amp; $\Big\uparrow$ &amp; $\Big\uparrow$ &amp; $\Big\uparrow$ &amp; $\Big\uparrow$ \\[4pt]
  \normalsize 参数 \small\tt x &amp; \normalsize 的函数，结果是 &amp; \normalsize 值 &amp; \normalsize 加上 &amp; \normalsize 4. \\
\end{tabular}
\end{flushleft}
        
	    </JAVASCRIPT>
	    
        
\begin{flushleft}\normalcodesize
\begin{tabular}{@{}cccccc@{\quad\qquad}c}
   \tt (lambda &amp; \tt (x) &amp; \tt ( &amp; \tt + &amp; \tt x &amp; \tt 4 &amp; \tt ) \\
  $\Big\uparrow$ &amp; $\Big\uparrow$ &amp; &amp; $\Big\uparrow$ &amp; $\Big\uparrow$ &amp; $\Big\uparrow$ \\[4pt]
  \normalsize 参数 \small\tt x 的过程 &amp; \normalsize 将 &amp; \normalsize x 加上 &amp; \small\tt 4. \
\end{tabular}
\end{flushleft}
        
	    
	    
	    
    </SPLIT>
	</PDF_ONLY>
      </JAVASCRIPT>
    </SPLIT>
</TEXT>
  <TEXT> 
像任何具有
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      
	<INDEX>组合<SUBINDEX><ORDER>lambda</ORDER>lambda 表达式作为运算符</SUBINDEX></INDEX>
	<INDEX><USE>lambda</USE>表达式<SUBINDEX><ORDER>运算符</ORDER>作为组合的运算符</SUBINDEX></INDEX>
      
      <JAVASCRIPT>
	<INDEX>lambda 表达式<SUBINDEX><ORDER>函数</ORDER>作为应用的函数表达式</SUBINDEX></INDEX>
	<INDEX>函数表达式<SUBINDEX>作为 lambda 表达式</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    作为其值，一个
    <SPLITINLINE>
      lambda
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    表达式可以在应用的函数表达式中用作
    <SPLITINLINE>组合</SPLITINLINE>，例如
<SNIPPET PAGE="63">
      <REQUIRES>square_definition</REQUIRES>
      <EXPECTED>12</EXPECTED>
      <SCHEME>
((lambda (x y z) (+ x y (square z))) 
 1 2 3)
      </SCHEME>
      <SCHEMEOUTPUT>
12
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
((x, y, z) =&gt; x + y + square(z))(1, 2, 3);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
12
      </JAVASCRIPT_OUTPUT>
    </SNIPPET> 
或者更一般地，在任何我们通常会使用
    <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>
    名称的上下文中。<FOOTNOTE>对于学习
    <SPLITINLINE>
      Lisp
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    的人来说，如果使用一个比
    <SPLITINLINE>
      
	lambda更明显的名称，例如
        make-procedure,
      
      <JAVASCRIPT>
	<EM>lambda 表达式</EM>，例如 <EM>函数定义</EM>,
      </JAVASCRIPT>
    </SPLITINLINE>
    那样会更清晰，也更不令人生畏。但是这一约定
    <SPLITINLINE>
      
	深入人心。
      
      <JAVASCRIPT>
	非常深入人心，不仅在<SPAN STYLE="color:red;">Lisp</SPAN> 和<SPAN STYLE="color:red;">Scheme</SPAN> 中，也在<SPAN STYLE="color:red;">JavaScript</SPAN>、<SPAN STYLE="color:red;">Java</SPAN> 和其他语言中，这无疑部分归因于本书的<SPAN STYLE="color:red;">Scheme</SPAN>版的影响。
	<INDEX>Scheme<SUBINDEX>使用 <QUOTE>lambda</QUOTE> 在</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    该符号来自于
    <INDEX><ORDER>0l</ORDER>$\lambda$ 演算 (lambda 演算)</INDEX>
    <INDEX><ORDER>lambda</ORDER>$\lambda$ 演算 (lambda 演算)</INDEX>
    $\lambda$<SPACE></SPACE>演算，阿隆佐·丘奇（Alonzo Church）在1941年引入的数学形式主义。丘奇发展了
    $\lambda$<SPACE></SPACE>演算，以为研究
    函数和函数应用的概念提供严格的基础。$\lambda$<SPACE></SPACE>演算已成为对编程语言语义的数学研究的基本工具。
  </FOOTNOTE>
 <SPLITINLINE><JAVASCRIPT>请注意 <JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE>
  的优先级
  <INDEX>优先级<SUBINDEX>lambda 表达式的</SUBINDEX></INDEX>
  <INDEX>lambda 表达式<SUBINDEX>的优先级</SUBINDEX></INDEX>
  低于函数应用，因此这里需要使用
  <INDEX>括号<SUBINDEX><ORDER>lambda 表达式</ORDER>包围 lambda 表达式</SUBINDEX></INDEX>
  包围 lambda 表达式。
  </JAVASCRIPT></SPLITINLINE>
</TEXT>

   <SUBHEADING>
    <NAME>使用 
    <SPLITINLINE>
      let 创建局部变量
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> 创建局部名称
      </JAVASCRIPT>
    </SPLITINLINE>
    </NAME>
  </SUBHEADING> 
   <INDEX>自由名<OPEN></OPEN></INDEX> 
  <TEXT> 
另一个 
    <SPLITINLINE>
      
	lambda 的用途是在创建局部变量。
      
      <JAVASCRIPT>
	lambda 表达式的用途是在创建局部名称。
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      
	我们在程序中常常需要局部变量，
	而这些变量不同于作为正式参数的变量。
      
      <JAVASCRIPT>
	我们在函数中常常需要局部名称，
	而这些名称不同于作为参数的名称。
      </JAVASCRIPT>
    </SPLITINLINE>
    例如，假设我们希望计算函数
<LATEX>
      \[\begin{array}{lll}
      f(x, y)&amp;=&amp;x(1 + x y)^2 +y (1 - y) + (1 + x y)(1 - y)
      \end{array}\]
    </LATEX> 
    我们可以将其表达为
<LATEX>
      \[\begin{array}{rll}
      a &amp;=&amp; 1+xy\\
      b &amp;=&amp; 1-y\\
      f(x, y) &amp;= &amp;x a^2 +y b + a b
      \end{array}\]
    </LATEX> 
在编写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算
<LATEXINLINE>$f$</LATEXINLINE> 
我们希望不仅包括 
    <SPLITINLINE>
      
	局部变量
      
      <JAVASCRIPT>
	局部名称
      </JAVASCRIPT>
    </SPLITINLINE>
<LATEXINLINE>$x$</LATEXINLINE> 
和 
<LATEXINLINE>$y$</LATEXINLINE> 
但也包括中间量的名称，例如
<LATEXINLINE>$a$</LATEXINLINE> 
和 
<LATEXINLINE>$b$</LATEXINLINE> 
实现这一点的一种方法是使用一个辅助
    <SPLITINLINE>
      过程来绑定局部变量：
      <JAVASCRIPT>函数来绑定局部名称：</JAVASCRIPT>
    </SPLITINLINE>
<SNIPPET PAGE="64">
      <NAME>f_helper_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>f_helper_example</EXAMPLE>
      <EXPECTED>456</EXPECTED>
      <SCHEME>
(define (f x y)
  (define (f-helper a b)
    (+ (* x (square a))
       (* y b)
       (* a b)))
  (f-helper (+ 1 (* x y)) 
            (- 1 y)))
      </SCHEME>
      <JAVASCRIPT>
function f(x, y) {
    function f_helper(a, b) {
        return x * square(a) + y * b + a * b;
    }
    return f_helper(1 + x * y, 1 - y);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="64" HIDE="yes">
      <NAME>f_helper_example</NAME>
      <SCHEME>
(f 3 4)
      </SCHEME>
      <JAVASCRIPT>
f(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT> 
当然，我们可以使用一个
    <SPLITINLINE>
      lambda
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    表达式来指定一个匿名
    <SPLITINLINE>
      用于绑定我们的局部变量的过程。
      <JAVASCRIPT>用于绑定我们的局部名称的函数。</JAVASCRIPT>
    </SPLITINLINE>
    然后
    <SPLITINLINE>
      
	f 的主体
      
      <JAVASCRIPT>
	函数体
      </JAVASCRIPT>
    </SPLITINLINE>
    就成为对该
    <SPLITINLINE>
      过程的单次调用：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
<SNIPPET PAGE="64">
      <NAME>f_helper_definition2</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>f_2_helper_example</EXAMPLE>
      <EXPECTED>456</EXPECTED>
      <SCHEME>
(define (f x y)
  ((lambda (a b)
     (+ (* x (square a))
        (* y b)
        (* a b)))
   (+ 1 (* x y))
   (- 1 y)))
      </SCHEME>
      <JAVASCRIPT>
function f_2(x, y) {
    return ( (a, b) =&gt; x * square(a) + y * b + a * b
           )(1 + x * y, 1 - y);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="64" HIDE="yes">
      <NAME>f_2_helper_example</NAME>
      <JAVASCRIPT>
f_2(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
  <SPLIT>
    <SCHEME>
        This construct is so useful that there is a special form called
        <SCHEMEINLINE>let</SCHEMEINLINE> to make its use more convenient.  
        Using <SCHEMEINLINE>let</SCHEMEINLINE>, the
	<SCHEMEINLINE>f</SCHEMEINLINE> procedure could be written as
        <SNIPPET PAGE="64">
          <NAME>f_helper_definition3</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_helper_example</EXAMPLE>
          <SCHEME>
(define (f x y)
  (let ((a (+ 1 (* x y)))
       (b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))
          </SCHEME>
        </SNIPPET>
    </SCHEME>
    <JAVASCRIPT>
	 
JavaScript 的 <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> 不能被解释为 lambda 表达式/应用的简写形式。因此，我们使用“更方便的方式”这一较弱的表述；因此在 JavaScript 中这一节要比在 Scheme 中短很多。
一种更方便的方式是在函数主体内使用常量声明来声明局部名称。使用 <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>，函数 
<SPLITINLINE>
  
    f
  
</SPLITINLINE>
可以写成
<SNIPPET PAGE="64">
          <NAME>f_helper_definition3</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_3_helper_example</EXAMPLE>
	  <EXPECTED>456</EXPECTED>
          <JAVASCRIPT>
function f_3(x, y) {
    const a = 1 + x * y;
    const b = 1 - y;
    return x * square(a) + y * b + a * b;
}
          </JAVASCRIPT>
        </SNIPPET>
	<SNIPPET PAGE="64" HIDE="yes">
	  <NAME>f_3_helper_example</NAME>
	  <JAVASCRIPT>
f_3(3, 4);
	  </JAVASCRIPT>
	</SNIPPET> 
在一个块内用 <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> 声明的名称，其作用域为立即包围的块的主体。<FOOTNOTE>
      
      <INDEX>声明<SUBINDEX>在前使用名称</SUBINDEX></INDEX>
      请注意，在块中声明的名称在声明完全计算之前不能使用，无论是否在块之外声明了同名变量。因此，在下面的程序中，尝试使用在全局作用域中声明的 <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> 为在 <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> 中声明的 <JAVASCRIPTINLINE>b</JAVASCRIPTINLINE> 计算提供值是行不通的。
      
        <NAME>h_error_example</NAME>
        <JAVASCRIPT>
const a = 1;
function f(x) {      
    const b = a + x;
    const a = 5;
    return a + b;
}
f(10); 
	</JAVASCRIPT>
      
      这个程序导致错误，因为 <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE> 在 <JAVASCRIPTINLINE>a + x</JAVASCRIPTINLINE> 中在其声明被计算之前就被使用了。我们将在学习更多关于求值的内容后，回到这个程序，见第<SPACE></SPACE><REF NAME="sec:internal-definitions"></REF> 节（练习<SPACE></SPACE><REF NAME="ex:simultaneous-def"></REF>）。</FOOTNOTE>
<LATEX>$^,$</LATEX> <FOOTNOTE>代换模型可以扩展为这样表述：对于常量声明，在 <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE> 后面的表达式值替代 <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE> 前面的名称，在块主体的其余部分中（在声明之后），类似于在函数应用的求值中用参数替代实参。</FOOTNOTE>
      <INDEX>局部名称<CLOSE></CLOSE></INDEX>
</JAVASCRIPT>
  </SPLIT>
  </TEXT>
  <SPLIT>
    <SCHEME>
      <INDEX><DECLARATION>let</DECLARATION></INDEX> 
      <INDEX><DECLARATION>special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</DECLARATION><SUBINDEX><ORDER>let</ORDER><SCHEMEINLINE>let</SCHEMEINLINE></SUBINDEX></INDEX>
      
      <TEXT>
        The general form of a <SCHEMEINLINE>let</SCHEMEINLINE> expression is
        <SNIPPET EVAL="no">
          <SCHEME>
(let (($var_1$ $exp_1$)
      ($var_2$ $exp_2$)
      $\vdots$
      ($var_n$ $exp_n$))
   $body$)
          </SCHEME>
        </SNIPPET>
        which can be thought of as saying
        <LATEX>
          \begin{array}{ll}
          \mbox{let}\ &amp;var_1\ \mbox{have the value}\ exp_\ \mbox{and}\\
                      &amp;var_2\ \mbox{have the value}\ exp_2\ \mbox{and}\\
                      &amp;\vdots\\
                      &amp;var_n\ \mbox{have the value}\ exp_n\\
          \mbox{in}\  &amp; body
          \end{array}
	</LATEX>
      </TEXT>
      <TEXT>
        The first part of the <SCHEMEINLINE>let</SCHEMEINLINE> expression is a
	list of name-expression pairs.  When the <SCHEMEINLINE>let</SCHEMEINLINE>
	is evaluated, each name is associated with the value of the
	corresponding expression.  The body of the
	<SCHEMEINLINE>let</SCHEMEINLINE> is evaluated with these names bound as
	local variables. The way this happens is that the
	<SCHEMEINLINE>let</SCHEMEINLINE> expression is interpreted as an
	alternate syntax for
        <SNIPPET EVAL="no">
          <SCHEME>
((lambda ($var_1$ $\ldots$ $var_n$)
   $body$)
 $exp_1$
 $\vdots$
 $exp_n$)
          </SCHEME>
        </SNIPPET>
        No new mechanism is required in the interpreter in order to
        provide local variables.  A 
        <INDEX>syntactic sugar<SUBINDEX><ORDER>let</ORDER><SCHEMEINLINE>let</SCHEMEINLINE> as</SUBINDEX></INDEX>
        <INDEX><DECLARATION>let</DECLARATION><SUBINDEX><ORDER>syntactic</ORDER>as syntactic sugar</SUBINDEX></INDEX>
        <SCHEMEINLINE>let</SCHEMEINLINE> expression is simply syntactic sugar for
        the underlying <SCHEMEINLINE>lambda</SCHEMEINLINE> application.
        <INDEX><DECLARATION>let</DECLARATION><SUBINDEX>scope of variables</SUBINDEX></INDEX>
        <INDEX>scope of a variable<SUBINDEX><ORDER>let</ORDER>in <SCHEMEINLINE>let</SCHEMEINLINE></SUBINDEX></INDEX>
        We can see from this equivalence that the scope of a variable specified
	by a <SCHEMEINLINE>let</SCHEMEINLINE> expression is the body of the
	<SCHEMEINLINE>let</SCHEMEINLINE>. This implies that:
        <UL>
          <LI>
            <SCHEMEINLINE>Let</SCHEMEINLINE> allows one to bind variables as
	    locally as possible to where they are to be used.  For example, if
	    the value of <SCHEMEINLINE>x</SCHEMEINLINE> is 5, the value of the
	    expression
            <SNIPPET PAGE="65" HIDE="yes">
              <NAME>x_definition</NAME>
              <SCHEME>
(define x 5)
              </SCHEME>
            </SNIPPET> 

            <SNIPPET PAGE="65">
              <REQUIRES>x_definition</REQUIRES>
              <SCHEME>
(+ (let ((x 3))
     (+ x (* x 10)))
   x)
              </SCHEME>
            </SNIPPET> 
            is 38. Here, the <SCHEMEINLINE>x</SCHEMEINLINE> in the body of the
	    <SCHEMEINLINE>let</SCHEMEINLINE> is 3, so the value of the
	    <SCHEMEINLINE>let</SCHEMEINLINE> expression is 33.  On the other
	    hand, the <SCHEMEINLINE>x</SCHEMEINLINE> that is the second argument
	    to the outermost <SCHEMEINLINE>+</SCHEMEINLINE> is still<SPACE></SPACE>5.
          </LI>
          <LI>
            The variables<APOS></APOS> values are computed outside the
	    <SCHEMEINLINE>let</SCHEMEINLINE>. This matters when the expressions
	    that provide the values for the local variables depend upon
	    variables having the same names as the local variables themselves.
            For example, if the value of <SCHEMEINLINE>x</SCHEMEINLINE> is 2,
	    the expression
            <SNIPPET PAGE="65" HIDE="yes">
              <NAME>x_definition2</NAME>
              <SCHEME>
(define x 2)
              </SCHEME>
            </SNIPPET> 

            <SNIPPET PAGE="65">
              <REQUIRES>x_definition2</REQUIRES>
              <SCHEME>
(let ((x 3)
      (y (+ x 2)))
  (* x y))
              </SCHEME>
            </SNIPPET> 
            will have the value 12 because, inside the body of the
	    <SCHEMEINLINE>let</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>
	    will be 3 and <SCHEMEINLINE>y</SCHEMEINLINE> will be 4 (which is the
            outer <SCHEMEINLINE>x</SCHEMEINLINE> plus 2).
          </LI>
        </UL>
      </TEXT>
      <TEXT>
        Sometimes we can use internal definitions to get the same effect as with
        <INDEX>internal definition<SUBINDEX><ORDER>let</ORDER><SCHEMEINLINE>let</SCHEMEINLINE> vs.</SUBINDEX></INDEX>
        <INDEX><DECLARATION>let</DECLARATION><SUBINDEX>internal definition vs.</SUBINDEX></INDEX>
	<SCHEMEINLINE>let</SCHEMEINLINE>.  For example, we could have defined
	the procedure <SCHEMEINLINE>f</SCHEMEINLINE> above as
        <SNIPPET PAGE="66">
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_helper_example</EXAMPLE>
          <SCHEME>
(define (f x y)
  (define a (+ 1 (* x y)))
  (define b (- 1 y))
  (+ (* x (square a))
     (* y b)
     (* a b)))
          </SCHEME>
        </SNIPPET>
        We prefer, however, to use <SCHEMEINLINE>let</SCHEMEINLINE> in
	situations like this and to use internal
	<SCHEMEINLINE>define</SCHEMEINLINE> 
        only for internal procedures.<FOOTNOTE>Understanding internal
	definitions well enough to be sure a program means what we intend it to
	mean requires a more elaborate model of the evaluation process than we
	have presented in this chapter. The subtleties do not arise with
	internal definitions of procedures, however.  We will return to this
	issue in sections<SPACE></SPACE><REF NAME="sec:env-internal-def"></REF>
	and<SPACE></SPACE><REF NAME="sec:internal-definitions"></REF>, after
	we learn more about the evaluation of blocks.</FOOTNOTE>
        <INDEX>local name<CLOSE></CLOSE></INDEX>
      </TEXT>
    </SCHEME>
  </SPLIT>
  <SPLIT>
    <SCHEME></SCHEME>
    <JAVASCRIPT>
      <TEXT>
       
这是引入条件语句的完美时机，条件语句在本书的其余部分中当然被大量使用。它们的适当代换模型可能有点技术性，并且解释起来相当没有意义，因此我们将代换模型的讨论限制在条件表达式上。
      
      <SUBHEADING>
        <NAME>条件语句
        </NAME>
      </SUBHEADING>
      
      <SHORT_PAGE LINES="4"></SHORT_PAGE>
      我们已经看到，在函数声明中声明局部名称通常是有用的。当函数变得庞大时，我们应该将名称的作用域保持尽可能窄。例如，考虑练习中的 <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE>。
<SNIPPET PAGE="55">
        <NAME>expmod_definition_2</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example_2</EXAMPLE>
	<EXPECTED>4</EXPECTED>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
           ? (  expmod(base, exp / 2, m)
              * expmod(base, exp / 2, m)) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
        </JAVASCRIPT>
      </SNIPPET> 
这个函数效率低下，因为它包含两个相同的调用：
<SNIPPET>
        <NAME>expmod_example_2</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>expmod_definition_2</REQUIRES>
	<JAVASCRIPT>
expmod(base, exp / 2, m);
	</JAVASCRIPT>
        <JAVASCRIPT_RUN> 
expmod(4, 3, 5);         
        </JAVASCRIPT_RUN>
      </SNIPPET> 
这个函数在此例中不必要地低效，因为它包含两个相同的调用：
<SNIPPET PAGE="55">
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example</EXAMPLE>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    const half_exp = expmod(base, exp / 2, m);
    return exp === 0
           ? 1
           : is_even(exp)
           ? (half_exp * half_exp) % m
           : (base * expmod(base, exp - 1, m)) % m;
}
        </JAVASCRIPT>
      </SNIPPET>
       
<INDEX>条件语句<SUBINDEX>的必要性</SUBINDEX></INDEX>
      这将使该函数不仅低效，实际上还会导致不终止！问题在于常量声明出现在条件表达式之外，这意味着即使在满足基本情况 <JAVASCRIPTINLINE>exp === 0</JAVASCRIPTINLINE> 时，它也会被执行。为避免这种情况，我们提供
      <INDEX>条件语句<OPEN></OPEN></INDEX>
      <INDEX>语法形式<SUBINDEX>条件语句</SUBINDEX></INDEX>
      <INDEX><USE>if</USE> (关键字)<ORDER>if</ORDER></INDEX>
      <INDEX><USE>else</USE> (关键字)<ORDER>else</ORDER></INDEX>
      <INDEX>关键字<SUBINDEX><ORDER>if</ORDER><USE>if</USE></SUBINDEX></INDEX>
      <INDEX>关键字<SUBINDEX><ORDER>else</ORDER><USE>else</USE></SUBINDEX></INDEX>
      <INDEX>谓词<SUBINDEX><ORDER>条件</ORDER>条件语句的</SUBINDEX></INDEX>
      <INDEX>条件语句<SUBINDEX>谓词、后续部分和替换部分</SUBINDEX></INDEX>
      <EM>条件语句</EM>，并允许返回语句出现在语句的分支中。使用条件语句，我们可以将函数
      <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> 编写如下：
<SNIPPET PAGE="55">
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example</EXAMPLE>
	<EXPECTED>4</EXPECTED>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    if (exp === 0) {
        return 1;
    } else {
        if (is_even(exp)) {
            const half_exp = expmod(base, exp / 2, m);
            return (half_exp * half_exp) % m;
        } else {
            return (base * expmod(base, exp - 1, m)) % m;
        }
    }	    
}
	</JAVASCRIPT>
      </SNIPPET>
      </TEXT>
       
条件语句的一般形式为
      
	<JAVASCRIPT>
if (<META>谓词</META>) { <META>后续语句</META> } else { <META>替换语句</META> }
	</JAVASCRIPT>
      
      对于条件表达式，解释器首先评估
      <INDEX>括号<SUBINDEX><ORDER>条件语句的谓词</ORDER>包围条件语句的谓词</SUBINDEX></INDEX>
      <META>谓词</META>。如果它评估为真，
      解释器将按顺序评估
      <INDEX>后续<SUBINDEX><ORDER>条件语句</ORDER>条件语句的</SUBINDEX></INDEX>
      <INDEX>条件语句<SUBINDEX>后续语句</SUBINDEX></INDEX>
      <META>后续语句</META>，如果它
      评估为假，解释器将评估
      <INDEX>替换<SUBINDEX><ORDER>条件语句</ORDER>条件语句的</SUBINDEX></INDEX>
      <INDEX>条件语句<SUBINDEX>替换语句</SUBINDEX></INDEX>
      <META>替换语句</META>，按顺序进行评估。返回
      语句的评估将从周围的函数返回，忽略任何
      在返回语句之后和条件语句之后的语句
      <INDEX>语句序列<SUBINDEX><ORDER>条件语句的</ORDER>条件语句中的语句</SUBINDEX></INDEX>。
      请注意，在任一部分中出现的任何常量声明对于该
      部分都是局部的，因为每一部分都被大括号括起来，因此形成自己的
      块。
      <INDEX>条件语句<CLOSE></CLOSE></INDEX>
</JAVASCRIPT>
  </SPLIT>
  
   <DO_BREAK_PAGE></DO_BREAK_PAGE> 
   
<EXERCISE> 
假设我们 
    <SPLITINLINE>
      定义该过程
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    
      <NAME>fg_definition</NAME>
      
(define (f g)
  (g 2))
      
      <JAVASCRIPT>
function f(g) {
   return g(2);
}
      </JAVASCRIPT>
    
    然后我们有
    
      <REQUIRES>fg_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      
(f square)
      
      <SCHEMEOUTPUT>
4
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
f(square);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
4
      </JAVASCRIPT_OUTPUT>
    

    
      <REQUIRES>fg_definition</REQUIRES>
      
(f (lambda (z) (* z (+ z 1))))
      
      <SCHEMEOUTPUT>
              6
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
f(z =&gt; z * (z + 1));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
6
      </JAVASCRIPT_OUTPUT>
    
    如果我们（任性地）请求解释器评估
    <SPLITINLINE>
      组合 (f f)?
      <JAVASCRIPT>应用 <JAVASCRIPTINLINE>f(f)</JAVASCRIPTINLINE>?
      </JAVASCRIPT>
    </SPLITINLINE>
    会发生什么？请解释。
    <SOLUTION>        
      <TEXT>
	让我们使用代换模型来说明会发生什么：
	
	  <JAVASCRIPT>
f(f)
f(2)
2(2)
	  </JAVASCRIPT>
	
	应用 <JAVASCRIPTINLINE>2(2)</JAVASCRIPTINLINE> 会导致错误，因为 2 既不是原语函数也不是复合函数。 
      </TEXT>
    </SOLUTION>
    
  </EXERCISE> 

</SUBSECTION>
