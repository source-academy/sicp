<SECTION>
  <NAME>The Environment Model of Evaluation</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:environment-model"/>
  <INDEX>environment model of evaluation<OPEN/></INDEX>

  <TEXT>
    When we introduced compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in chapter<SPACE/>1, we used the
    <INDEX>substitution model of <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> application</INDEX>
    substitution model of evaluation
    (section<SPACE/><REF NAME="sec:substitution-model"/>) to define what is
    meant by applying a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to arguments:
    <UL>
      <LI>To apply a compound
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<JAVASCRIPT>function</JAVASCRIPT>
      </SPLITINLINE>
      to arguments, evaluate the 
      <SPLITINLINE>
	<SCHEME>body of the procedure</SCHEME>
	<JAVASCRIPT>return expression of the function</JAVASCRIPT>
      </SPLITINLINE>
      with each
      <SPLITINLINE>
	<SCHEME>
	  formal
	</SCHEME>
      </SPLITINLINE>
      parameter replaced by the corresponding
      argument.
      </LI>
    </UL>
  </TEXT>

  <TEXT>
    Once we admit assignment into our programming language, such a
    definition is no longer adequate.  In particular,
    section<SPACE/><REF NAME="sec:costs-of-assignment"/> argued that, in the
    presence of assignment,
    <SPLITINLINE>
      <SCHEME>
	a variable cannot be considered to be merely a name for 
	a value.  Rather, a variable must somehow designate a
	<QUOTE>place</QUOTE> in which values can be stored.
      </SCHEME>
      <JAVASCRIPT>
	a name cannot be considered to be merely
	representing a value.  Rather, a name must somehow designate a
	<QUOTE>place</QUOTE> in which values can be stored.
      </JAVASCRIPT>
    </SPLITINLINE>
    In our new model of
    evaluation, these places will be maintained in structures called 
    <INDEX>environment</INDEX>
    <EM>environments</EM>.
  </TEXT>

  <TEXT>
    An environment is a sequence of 
    <INDEX>frame (environment model)</INDEX>
    <EM>frames</EM>.  Each frame is a table (possibly empty) of 
    <INDEX>binding</INDEX>
    <EM>bindings</EM>, which associate
    <SPLITINLINE>
      <SCHEME>
	variable names
      </SCHEME>
      <JAVASCRIPT>
	names
      </JAVASCRIPT>
    </SPLITINLINE>
    with their corresponding
    values.
    <SPLITINLINE>
      <SCHEME>
	(A single frame may contain at most one binding for any variable.)
      </SCHEME>
      <JAVASCRIPT>
	(A single frame may contain at most one binding for any name.)
      </JAVASCRIPT>
    </SPLITINLINE>
    Each frame also has a pointer to its 
    <INDEX>enclosing environment</INDEX>
    <INDEX>environment<SUBINDEX>enclosing</SUBINDEX></INDEX>
    <EM>enclosing environment</EM>, unless, for the purposes of discussion, the
    frame is considered to be 
    <INDEX>global frame</INDEX>
    <INDEX>frame (environment model)<SUBINDEX>global</SUBINDEX></INDEX>
    <EM>global</EM>.  The 
    <SPLITINLINE>
      <SCHEME>
	<EM>value of a variable</EM>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>name<SUBINDEX>value of</SUBINDEX></INDEX>
	<EM>value of a name</EM>
      </JAVASCRIPT>
    </SPLITINLINE>
    with respect to an environment is the value given by the binding of
    the
    <SPLITINLINE>
      <SCHEME>
	variable
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    in the first frame in the environment that contains a
    binding for that
    <SPLITINLINE>
      <SCHEME>
	variable.
      </SCHEME>
      <JAVASCRIPT>
	name.
      </JAVASCRIPT>
    </SPLITINLINE>
    If no frame in the sequence specifies a
    binding for the
    <SPLITINLINE>
      <SCHEME>
	variable,
      </SCHEME>
      <JAVASCRIPT>
	name,
      </JAVASCRIPT>
    </SPLITINLINE>
    then the
    <SPLITINLINE>
      <SCHEME>
	variable
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    is said to be 
    <INDEX>unbound name</INDEX>
    <INDEX>name<SUBINDEX>unbound</SUBINDEX></INDEX>
    <EM>unbound</EM> in the environment.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-2.svg"></FIGURE>
          <LABEL NAME="fig:environment-structure_scheme"/>
          <CAPTION>A simple environment structure.</CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-2.svg"></FIGURE>
          <LABEL NAME="fig:environment-structure"/>
          <CAPTION>
	    A simple 
	    <INDEX>environment model of evaluation<SUBINDEX>environment structure</SUBINDEX></INDEX>
	    environment structure.	    
	  </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:environment-structure_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:environment-structure"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows a simple environment
    structure consisting of three frames, labeled I, II, and III.  In the
    diagram, A, B, C, and D are pointers to environments.  C and D point
    to the same environment.  The
    <SPLITINLINE>
      <SCHEME>
	variables
      </SCHEME>
      <JAVASCRIPT>
	names
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>z</SCHEMEINLINE> and
    <SCHEMEINLINE>x</SCHEMEINLINE> are bound in frame II, while
    <SCHEMEINLINE>y</SCHEMEINLINE> and <SCHEMEINLINE>x</SCHEMEINLINE> are bound
    in frame I.  The value of <SCHEMEINLINE>x</SCHEMEINLINE> in environment D
    is 3.  The value of <SCHEMEINLINE>x</SCHEMEINLINE> with respect to
    environment B is also 3.  This is determined as follows: We examine the
    first frame in the sequence (frame III) and do not find a binding for
    <SCHEMEINLINE>x</SCHEMEINLINE>, so we proceed to the enclosing environment
    D and find the binding in frame I.  On the other hand, the value of
    <SCHEMEINLINE>x</SCHEMEINLINE> in environment A is 7, because the first
    frame in the sequence (frame II) contains a binding of
    <SCHEMEINLINE>x</SCHEMEINLINE> to 7.  With respect to environment A, the
    binding of <SCHEMEINLINE>x</SCHEMEINLINE> to 7 in frame II is said to 
    <INDEX>shadow a binding</INDEX>
    <EM>shadow</EM> the binding of <SCHEMEINLINE>x</SCHEMEINLINE> to 3 in
    frame I.
  </TEXT>

  <TEXT>
    The environment is crucial to the evaluation process, because it determines
    the context in which an expression should be evaluated.  Indeed, one could
    say that expressions in a programming language do not, in themselves, have
    any meaning.  Rather, an expression acquires a meaning only with respect to
    some environment in which it is evaluated.  
    <SPLIT>
      <SCHEME>
	Even the interpretation of an expression as straightforward as
	<SCHEMEINLINE>(+<SPACE/>1<SPACE/>1)</SCHEMEINLINE> depends on an
	understanding that one is operating in a context in which
	<SCHEMEINLINE>+</SCHEMEINLINE> is the symbol for addition. 
      </SCHEME>
      <JAVASCRIPT>
	Even the interpretation of an expression as straightforward as
	<JAVASCRIPTINLINE>display(1)</JAVASCRIPTINLINE> depends on an
	understanding that one is operating in a context in which the name
	<SCHEMEINLINE>display</SCHEMEINLINE> refers to the primitive function
	that displays a value.
      </JAVASCRIPT>
    </SPLIT>
    Thus, in our model of evaluation we will always speak of evaluating an
    expression with respect to some environment.  To describe interactions with
    the	interpreter, we will suppose that there is a 
    <INDEX>global environment</INDEX>
    global environment, consisting of a single frame (with no enclosing
    environment) that includes values for the
    <SPLITINLINE>
      <SCHEME>
	symbols
      </SCHEME>
      <JAVASCRIPT>
	names
      </JAVASCRIPT>
    </SPLITINLINE>
    associated with the
    primitive
    <SPLITINLINE>
      <SCHEME>
	procedures.
      </SCHEME>
      <JAVASCRIPT>
	functions.
      </JAVASCRIPT>
    </SPLITINLINE>
    For example, the idea that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>+</SCHEMEINLINE> is the symbol for addition is captured
	by saying that the symbol <SCHEMEINLINE>+</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE> is the name for the
	primitive display function is captured by saying that the
	name <JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is bound in the global environment to the primitive
    <SPLITINLINE>
      <SCHEME>addition procedure.</SCHEME>
      <JAVASCRIPT>display function.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>
  <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	Before we evaluate a program, we extend the global
	environment with a new frame, the
	<EM>program frame</EM>, resulting in the
	<EM>program environment</EM>. We will add
	the names that are declared at the top level of the
	program, outside of any block, to this frame. The given program
	is then	evaluated with respect to the program environment.
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <!-- Subsection 1 : The Rules of Evaluation -->
  &amp;subsection3.2.1;

  <!-- Subsection 2 : Applying Simple Procedures -->
  &amp;subsection3.2.2;

  <!-- Subsection 3 : Frames as the Repository of Local State -->
  &amp;subsection3.2.3;

  <!-- Subsection 4 : Internal Definitions -->
  &amp;subsection3.2.4;

</SECTION>
