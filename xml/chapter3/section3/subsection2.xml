<SUBSECTION>
  <NAME>
    Representing Queues
  </NAME>

  <LABEL NAME="sec:queues"/>
  <INDEX>queue<OPEN/></INDEX>

  <TEXT>
    The mutators
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-car!</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>set_head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-cdr!</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>set_tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    enable us to use pairs to construct data structures that cannot be built
    with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    alone.  This section shows how to use pairs to represent a data structure
    called a queue.  Section<SPACE/><REF NAME="sec:tables"/> will show how to
    represent data structures called tables.
  </TEXT>

  <TEXT>
    A <EM>queue</EM> is a sequence in which items are inserted at one end
    (called the
    <INDEX>queue<SUBINDEX>rear of</SUBINDEX></INDEX>
    <EM>rear</EM> of the queue) and deleted from the other end (the
    <INDEX>queue<SUBINDEX>front of</SUBINDEX></INDEX>
    <EM>front</EM>).
    <SPLITINLINE>
      <SCHEME>Figure<SPACE/><REF NAME="fig:queue-ops_scheme"/></SCHEME>
      <PYTHON>Figure<SPACE/><REF NAME="fig:queue-ops"/></PYTHON>
    </SPLITINLINE>
    shows an initially empty queue in which the items
    <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
    inserted.  Then <SCHEMEINLINE>a</SCHEMEINLINE> is removed,
    <SCHEMEINLINE>c</SCHEMEINLINE> and <SCHEMEINLINE>d</SCHEMEINLINE> are
    inserted, and <SCHEMEINLINE>b</SCHEMEINLINE> is removed.  Because items are
    always removed in the order in which they are inserted, a queue is
    sometimes called a
    <INDEX>FIFO buffer</INDEX>
    <EM>FIFO</EM> (first in, first out) buffer.
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE src="img_original/ch3.18.svg"></FIGURE>
          <CAPTION>Queue operations.</CAPTION>
          <LABEL NAME="fig:queue-ops_scheme"/>
	</FIGURE>
      </SCHEME>
      <PYTHON>
	<FIGURE>
	  <TABLE>
	    <TR>
	      <TD>
		Operation
	      </TD>
	      <TD>
		Resulting Queue
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>const q = make_queue();</PYTHONINLINE>
	      </TD>
	      <TD>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>insert_queue(q, "a");</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>a</PYTHONINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>insert_queue(q, "b");</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>a  b</PYTHONINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>delete_queue(q);</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>b</PYTHONINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>insert_queue(q, "c");</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>b c</PYTHONINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>insert_queue(q, "d");</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>b c d</PYTHONINLINE>
	      </TD>
	    </TR>
	    <TR>
	      <TD>
		<PYTHONINLINE>delete_queue(q);</PYTHONINLINE>
	      </TD>
	      <TD>
		<PYTHONINLINE>c d</PYTHONINLINE>
	      </TD>
	    </TR>
	  </TABLE>
          <CAPTION>Queue operations.</CAPTION>
          <LABEL NAME="fig:queue-ops"/>
	</FIGURE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <SHORT_PAGE lines="2"/>
  <TEXT>
    In terms of
    <INDEX>data abstraction<SUBINDEX>for queue</SUBINDEX></INDEX>
    <INDEX>queue<SUBINDEX>operations on</SUBINDEX></INDEX>
    data abstraction, we can regard a queue as defined by the
    following set of operations:
    <UL>
      <LI>
	a constructor:
	<BR/>
        <INDEX><USE>make_queue</USE></INDEX> 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(make-queue)</SCHEMEINLINE></SCHEME>
	    <PYTHON><PYTHONINLINE>make_queue()</PYTHONINLINE>
	    </PYTHON>
	  </SPLITINLINE>
	  <BR/>
          returns an empty queue (a queue containing no items).
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        a predicate:
        <BR/>
        <INDEX><USE>is_empty_queue</USE></INDEX> 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(empty-queue? queue)</SCHEMEINLINE></SCHEME>
	    <PYTHON>
	      <PYTHONINLINE>is_empty_queue(</PYTHONINLINE><META>queue</META><PYTHONINLINE>)</PYTHONINLINE>
	    </PYTHON>
	  </SPLITINLINE>
	  <BR/>
          tests if the queue is empty.
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        a selector:
        <BR/>
          <INDEX><USE>front_queue</USE></INDEX> 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(front-queue queue)</SCHEMEINLINE></SCHEME>
	    <PYTHON>
	      <PYTHONINLINE>front_queue(</PYTHONINLINE><META>queue</META><PYTHONINLINE>)</PYTHONINLINE>
	    </PYTHON>
	  </SPLITINLINE>
	  <BR/>
          returns the object at the front of the queue, signaling an error if
	  the queue is empty; it does not modify the queue.
	  <PDF_ONLY>\vspace{6pt}</PDF_ONLY>
      </LI>
      <LI>
        two mutators:
	<BR/>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(insert-queue! queue item)</SCHEMEINLINE>
	    </SCHEME>
	    <PYTHON>
	      <PYTHONINLINE>insert_queue(</PYTHONINLINE><META>queue</META><PYTHONINLINE>, </PYTHONINLINE><META>item</META><PYTHONINLINE>)</PYTHONINLINE>
	    </PYTHON>
	  </SPLITINLINE>
	  <BR/>
          inserts
          <INDEX><USE>insert_queue</USE></INDEX> 
	  the item at the rear of the queue and returns the modified
          queue as its value.<PDF_ONLY>\\[4pt]</PDF_ONLY><WEB_ONLY><BR/></WEB_ONLY>
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>(delete-queue! queue)</SCHEMEINLINE></SCHEME>
	    <PYTHON><PYTHONINLINE>delete_queue(</PYTHONINLINE><META>queue</META><PYTHONINLINE>)</PYTHONINLINE>
	    </PYTHON>
	  </SPLITINLINE>
	  <BR/>
          removes
          <INDEX><USE>delete_queue</USE></INDEX> 
	  the item at the front of the queue and returns the modified
	  queue as its value, signaling an error if the queue is empty before
	  the deletion.
      </LI>
    </UL>
  </TEXT>

  <TEXT>
    Because a queue is a sequence of items, we could certainly represent
    it as an ordinary list; the front of the queue would be the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    of the list, inserting an item in the queue would amount to appending
    a new element at the end of the list, and deleting an item from the
    queue would just be taking the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    of the list.  However, this representation is inefficient, because in order
    to insert an item we must scan the list until we reach the end.  Since the
    only method we have for scanning a list is by successive
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    operations, this scanning requires <LATEXINLINE>$\Theta(n)$</LATEXINLINE>
    steps for a list of <LATEXINLINE>$n$</LATEXINLINE> items.  A simple
    modification to the list representation overcomes this disadvantage by
    allowing the queue operations to be implemented so that they require
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE> steps; that is, so that the number
    of steps needed is independent of the length of the queue.
  </TEXT>

  <TEXT>
    The difficulty with the list representation arises from the need to
    scan to find the end of the list.  The reason we need to scan is that,
    although the standard way of representing a list as a chain of pairs
    readily provides us with a pointer to the beginning of the list, it
    gives us no easily accessible pointer to the end.  The modification
    that avoids the drawback is to represent the queue as a list, together
    with an additional pointer that indicates the final pair in the list.
    That way, when we go to insert an item, we can consult the rear
    pointer and so avoid scanning the list.
  </TEXT>

  <TEXT>
    A queue is represented, then, as a pair of pointers,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-ptr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>front_ptr</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-ptr</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>rear_ptr</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    which indicate, respectively, the first and last pairs in an ordinary list.
    Since we would like the queue to be an identifiable object, we can use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    to combine the two pointers.  Thus, the queue itself will be the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    of the two pointers.
    <SPLITINLINE>
      <SCHEME>Figure<SPACE/><REF NAME="fig:queue-pointers_scheme"/></SCHEME>
      <PYTHON>Figure<SPACE/><REF NAME="fig:queue-pointers"/></PYTHON>
    </SPLITINLINE>
    illustrates this representation.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-19.svg"></FIGURE>
          <CAPTION>
	    Implementation of a queue as a list with front and rear pointers.
	  </CAPTION>
          <LABEL NAME="fig:queue-pointers_scheme"/>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-19.svg"></FIGURE>
          <CAPTION>
	    Implementation of a queue as a list with front and rear pointers.
	  </CAPTION>
          <LABEL NAME="fig:queue-pointers"/>
        </FIGURE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <TEXT>
    To define the queue operations we use the following
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME><PYTHON>functions,</PYTHON>
    </SPLITINLINE>
    which enable us to select and to modify the front and rear pointers of a
    queue:
    <SNIPPET HIDE="yes">
      <NAME>modify_pointers_example</NAME>
      <PYTHON>
const q = pair(1, 2);
set_front_ptr(q, 42);	
front_ptr(q);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>front_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>rear_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>set_front_ptr</DECLARATION></INDEX> 
      <INDEX><DECLARATION>set_rear_ptr</DECLARATION></INDEX> 
      <NAME>modify_pointers</NAME>
      <EXAMPLE>modify_pointers_example</EXAMPLE>
      <EXPECTED>42</EXPECTED>
      <SCHEME>
(define (front-ptr queue) (car queue))

(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item) (set-car! queue item))

(define (set-rear-ptr! queue item) (set-cdr! queue item))
      </SCHEME>
      <PYTHON>
function front_ptr(queue) { return head(queue); }
<SHORT_SPACE/>
function rear_ptr(queue) { return tail(queue); }
<SHORT_SPACE/>
function set_front_ptr(queue, item) { set_head(queue, item); }
<SHORT_SPACE/>
function set_rear_ptr(queue, item) { set_tail(queue, item); }
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we can implement the actual queue operations.  We will consider a
    queue to be empty if its front pointer is the empty list:
    <SNIPPET HIDE="yes">
      <NAME>is_empty_queue_example</NAME>
      <PYTHON>
const q = pair(null, 2);
is_empty_queue(q);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>is_empty_queue</DECLARATION></INDEX> 
      <REQUIRES>modify_pointers</REQUIRES>
      <NAME>is_empty_queue</NAME>
      <EXAMPLE>is_empty_queue_example</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define (empty-queue? queue) (null? (front-ptr queue)))
      </SCHEME>
      <PYTHON>
function is_empty_queue(queue) { return is_null(front_ptr(queue)); }
      </PYTHON>
    </SNIPPET>
    The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_queue</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    constructor returns, as an initially empty queue, a pair whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    are both the empty list:
    <SNIPPET HIDE="yes">
      <NAME>make_queue_example</NAME>
      <REQUIRES>modify_pointers</REQUIRES>
      <PYTHON>
const q = make_queue();
front_ptr(q);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_queue</DECLARATION></INDEX> 
      <NAME>make_queue</NAME>
      <EXAMPLE>make_queue_example</EXAMPLE>
      <EXPECTED>null</EXPECTED>
      <SCHEME>
(define (make-queue) (cons '() '()))
      </SCHEME>
      <PYTHON>
function make_queue() { return pair(null, null); }
      </PYTHON>
    </SNIPPET>
    To select the item at the front of the queue, we return the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    of the pair indicated by the front pointer:
    <SNIPPET HIDE="yes">
      <NAME>front_queue_example</NAME>
      <PYTHON>
const q = pair(pair(1, 2), 3);
front_queue(q);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>front_queue</DECLARATION></INDEX> 
      <NAME>front_queue</NAME>
      <REQUIRES>is_empty_queue</REQUIRES>
      <EXAMPLE>front_queue_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
      </SCHEME>
      <PYTHON>
function front_queue(queue) {
    return is_empty_queue(queue)
           ? error(queue, "front_queue called with an empty queue")
           : head(front_ptr(queue));
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To insert an item in a queue, we follow the method whose result is
    indicated in
    <SPLITINLINE>
      <SCHEME>figure<SPACE/><REF NAME="fig:queue-insert"/>.</SCHEME>
      <PYTHON>figure<SPACE/><REF NAME="fig:queue-insert"/>.</PYTHON>
    </SPLITINLINE>
    We first create a new
    pair whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is the item to be inserted and whose
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    is the empty list.  If the queue was initially empty, we set the front and
    rear pointers of the queue to this new pair.  Otherwise, we modify the
    final pair in the queue to point to the new pair, and also set the
    rear pointer to the new pair.
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-20.svg"></FIGURE>
          <CAPTION>
	    Result of using <SCHEMEINLINE>(insert-queue! q 'd)</SCHEMEINLINE> on
	    the queue of figure<SPACE/><REF NAME="fig:queue-pointers_scheme"/>.
	  </CAPTION>
          <LABEL NAME="fig:queue-insert_scheme"/>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE split_scale="1" web_scale="0.8" src="img_javascript/ch3-Z-G-20.svg"></FIGURE>
          <CAPTION>
	    Result of using
	    <PYTHONINLINE>insert_queue(q, "d")</PYTHONINLINE> on the
	    queue of figure<SPACE/><REF NAME="fig:queue-pointers"/>.
	  </CAPTION>
          <LABEL NAME="fig:queue-insert"/>
        </FIGURE>
      </PYTHON>
    </SPLIT>
    <SNIPPET HIDE="yes" PAGE="265">
      <NAME>print_queue_example</NAME>
      <REQUIRES>make_queue</REQUIRES>
      <REQUIRES>insert_queue</REQUIRES>
      <REQUIRES>delete_queue</REQUIRES>
      <SCHEME>
      </SCHEME>
      <PYTHON>
const q1 = make_queue();
insert_queue(q1, "a");    
insert_queue(q1, "b");    
delete_queue(q1);
delete_queue(q1);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>insert_queue</DECLARATION></INDEX> 
      <NAME>insert_queue</NAME>
      <REQUIRES>modify_pointers</REQUIRES>
      <REQUIRES>is_empty_queue</REQUIRES>
      <EXAMPLE>print_queue_example</EXAMPLE>
      <EXPECTED>[ null, [ 'b', null ] ]</EXPECTED>
      <SCHEME>
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
      </SCHEME>
      <PYTHON>
function insert_queue(queue, item) {
    const new_pair = pair(item, null);
    if (is_empty_queue(queue)) {
        set_front_ptr(queue, new_pair);
        set_rear_ptr(queue, new_pair);
    } else {
        set_tail(rear_ptr(queue), new_pair);
        set_rear_ptr(queue, new_pair);
    }
    return queue;
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To delete the item at the front of the queue, we merely modify the
    front pointer so that it now points at the second item in the queue,
    which can be found by following the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    pointer of the first item (see
    <SPLITINLINE><SCHEME>figure<SPACE/><REF NAME="fig:queue-delete_scheme"/></SCHEME><PYTHON>figure<SPACE/><REF NAME="fig:queue-delete"/></PYTHON></SPLITINLINE>):<FOOTNOTE>If the first item is
    the final item in the queue, the front pointer will be the empty list after
    the deletion, which will mark the queue as empty; we needn<APOS/>t worry
    about updating the rear pointer, which will still point to the deleted
    item, because
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>empty-queue?</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>is_empty_queue</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    looks only at the front pointer.</FOOTNOTE>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-21.svg"></FIGURE>
          <CAPTION>
	    Result of using <SCHEMEINLINE>(delete-queue! q)</SCHEMEINLINE> on the
	    queue of figure<SPACE/><REF NAME="fig:queue-insert_scheme"/>.
	  </CAPTION>
          <LABEL NAME="fig:queue-delete_scheme"/>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE split_scale="1" web_scale="0.8" src="img_javascript/ch3-Z-G-21.svg"></FIGURE>
          <CAPTION>
	    Result of using <PYTHONINLINE>delete_queue(q)</PYTHONINLINE>
	    on the queue of figure<SPACE/><REF NAME="fig:queue-insert"/>.
	  </CAPTION>
          <LABEL NAME="fig:queue-delete"/>
        </FIGURE>
      </PYTHON>
    </SPLIT>
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <INDEX><DECLARATION>delete_queue</DECLARATION></INDEX> 
      <NAME>delete_queue</NAME>
      <REQUIRES>is_empty_queue</REQUIRES>
      <REQUIRES>modify_pointers</REQUIRES>
      <EXAMPLE>print_queue_example</EXAMPLE>
      <EXPECTED>[ null, [ 'b', null ] ]</EXPECTED>
      <SCHEME>
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
      </SCHEME>
      <PYTHON>
function delete_queue(queue) {
    if (is_empty_queue(queue)) {
        error(queue, "delete_queue called with an empty queue");
    } else {
        set_front_ptr(queue, tail(front_ptr(queue)));
        return queue;
    }
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    Ben Bitdiddle decides to test the queue implementation described
    above.  He types in the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    to the
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    interpreter and proceeds to try them out:
    <SNIPPET EVAL="yes">
      <NAME>make_queue_example1</NAME>
      <REQUIRES>make_queue</REQUIRES>
      <SCHEME>
(define q1 (make-queue))
      </SCHEME>
      <PYTHON>
const q1 = make_queue();
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>insert_queue_example1</NAME>
      <REQUIRES>insert_queue</REQUIRES>
      <REQUIRES>make_queue_example1</REQUIRES>
      <SCHEME>
(insert-queue! q1 'a)
      </SCHEME>
      <PYTHON>
insert_queue(q1, "a");
      </PYTHON>
      <SCHEMEOUTPUT>
            ((a) a)
      </SCHEMEOUTPUT>
      <PYTHON_OUTPUT>
[["a", null], ["a", null]]
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>insert_queue_example2</NAME>
      <REQUIRES>insert_queue_example1</REQUIRES>
      <SCHEME>
(insert-queue! q1 'b)
      </SCHEME>
      <PYTHON>
insert_queue(q1, "b");
      </PYTHON>
      <PYTHON_OUTPUT>
[["a", ["b", null]], ["b", null]]
      </PYTHON_OUTPUT>
      <SCHEMEOUTPUT>
            ((a b) b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>insert_queue_example2</REQUIRES>
      <REQUIRES>delete_queue</REQUIRES>
      <NAME>delete_queue_example1</NAME>
      <SCHEME>
(delete-queue! q1)
      </SCHEME>
      <PYTHON>
delete_queue(q1);
      </PYTHON>
      <PYTHON_OUTPUT>
[["b", null], ["b", null]]
      </PYTHON_OUTPUT>
      <SCHEMEOUTPUT>
            ((b) b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <NAME>delete_queue_example2</NAME>
      <REQUIRES>delete_queue_example1</REQUIRES>
      <SCHEME>
(delete-queue! q1)
      </SCHEME>
      <PYTHON>
delete_queue(q1);
      </PYTHON>
      <PYTHON_OUTPUT>
[null, ["b", null]]
      </PYTHON_OUTPUT>
      <SCHEMEOUTPUT>
            (() b)
      </SCHEMEOUTPUT>
    </SNIPPET>
    <QUOTE>It<APOS/>s all wrong!</QUOTE> he complains.
    <QUOTE>The interpreter<APOS/>s response shows that the last item is inserted
    into the queue twice.  And when I delete both items, the second
    <SCHEMEINLINE>b</SCHEMEINLINE> is still there, so the queue isn<APOS/>t
    empty, even though it<APOS/>s supposed to be.</QUOTE>  Eva Lu Ator suggests
    that Ben has misunderstood what is happening.  <QUOTE>It<APOS/>s not that the
    items are going into the queue twice,</QUOTE> she explains.
    <QUOTE>It<APOS/>s just that the standard
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    printer doesn<APOS/>t know how to make sense of the queue representation.
    If you want to see the queue printed correctly, you<APOS/>ll have to define
    your own print
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    for queues.</QUOTE> Explain what Eva Lu is talking about.  In particular,
    show why Ben<APOS/>s examples produce the printed results that they do.
    Define a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    <INDEX><USE>print_queue</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-queue</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>print_queue</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    that takes a queue as input and prints the sequence of items in the queue.
    <LABEL NAME="ex:3_21"/>
  </EXERCISE>

  <EXERCISE>
    Instead of representing a queue as a pair of pointers, we can build a
    queue as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    <INDEX>queue<SUBINDEX>functional implementation of</SUBINDEX></INDEX>
    with local state.  The local state will consist of pointers to the
    beginning and the end of an ordinary list.  Thus, the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_queue</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    will have the form
    <SNIPPET LATEX="yes">
      <SCHEME>
(define (make-queue)
  (let ((front-ptr $\ldots$ )
        (rear-ptr $\ldots$ ))
    definitions of internal procedures
    (define (dispatch m) $\ldots$)
    dispatch))
      </SCHEME>
      <PYTHON>
function make_queue() {
    let front_ptr = $\ldots$;
    let rear_ptr = $\ldots$;
    <METAPHRASE>declarations of internal functions</METAPHRASE>
    function dispatch(m) {$\ldots$}
    return dispatch;
}
      </PYTHON>
    </SNIPPET>
    Complete the definition of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_queue</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    and provide implementations of the queue operations using this
    representation.
    <LABEL NAME="ex:3_22"/>
  </EXERCISE>

  <EXERCISE>
    A <EM>deque</EM>
    <INDEX>queue<SUBINDEX>double-ended</SUBINDEX></INDEX>
    <INDEX>deque</INDEX>
    (<QUOTE>double-ended queue</QUOTE>) is a sequence in which
    items can be inserted and deleted
    <SPLITINLINE>
      <SCHEME>
	at either the front or
      </SCHEME>
      <PYTHON>
	either at the front or at
      </PYTHON>
    </SPLITINLINE>
    the rear.
    Operations on deques are the constructor
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-deque</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>make_deque</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    the predicate
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>empty-deque</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>is_empty_deque</PYTHONINLINE>,
    </PYTHON></SPLITINLINE>
    selectors
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-deque</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>front_deque</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-deque</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>rear_deque</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    and mutators
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-insert-deque!</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>front_insert_deque</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>front-delete-deque!</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>front_delete_deque</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-insert-deque!</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>rear_insert_deque</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rear-delete-deque</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>rear_delete_@deque</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Show how to represent deques using pairs, and give implementations of the
    operations.<FOOTNOTE>Be careful not to make the interpreter try to print a
    structure that contains cycles.  (See
    exercise<SPACE/><REF NAME="ex:make-cycle"/>.)</FOOTNOTE>
    All operations should be accomplished in
    <LATEXINLINE>$\Theta(1)$</LATEXINLINE> steps.
    <LABEL NAME="ex:deque"/>
  </EXERCISE>
  <INDEX>queue<CLOSE/></INDEX>
</SUBSECTION>
