[{"id":"/sicpjs/2.3.1","tag":"TITLE","body":"2.3.1  \n    \n      \n      Strings"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n\tSo far, we have used strings in order to display messages,\n\tusing the functions ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"error"},{"body":" (as for example in \n\texercise ","tag":"#text"},{"tag":"REF","body":"1.22","href":"/sicpjs/1.2.6#ex-1.22"},{"body":"). \n        We can form compound data using strings and have lists such as\n\t","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist(\"a\", \"b\", \"c\", \"d\")\nlist(23, 45, 17)\nlist(list(\"Jakob\", 27), list(\"Lova\", 9), list(\"Luisa\", 24))\n          "},{"body":"\n        In order to distinguish strings from names, we surround them\n\t\n\twith double quotation marks. For example, the JavaScript expression\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":" denotes the value of the\n\tname ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"z"},{"body":", whereas the JavaScript\n\texpression ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"z\""},{"body":" denotes a string\n\tthat consists of a single character, namely the last letter in the\n\tEnglish alphabet in lower case. \n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n        Via quotation marks, we can distinguish between strings and names:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuBjAewDsBnAF1AENQBeUbAbkNMtACN7Umg","body":"const a = 1;\nconst b = 2; "},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":4,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuBjAewDsBnAF1AENQBeUbAbkNMtACN7UXcAbAJaUAFNQA0nAJRMgA","body":"list(a, b); ","output":"[1, [2, null]]"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAbASwGcAXACgCIBDKgGlCoCMqBKAbiA","body":"list(\"a\", \"b\"); ","output":"[\"a\", [\"b\", null]]"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":4,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuBjAewDsBnAF1AENQBeUbAbkNMtACN7UXcAbAJaUAFACJqogDScAlEyA","body":"list(\"a\", b); ","output":"[\"a\", [2, null]]"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n\tIn section ","tag":"#text"},{"tag":"REF","body":"1.1.6","href":"/sicpjs/1.1.6"},{"body":", we introduced\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":"\n\tas  primitive predicates on numbers.\n        \n\tFrom now\n\ton, we shall allow two\n\tstrings as operands of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":". The predicate\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" \t\n\treturns true if and only\n\tif the two strings are the same, and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"!=="},{"body":"\n\treturns true if and only\n\tif the two strings are not the same.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.3.1#footnote-1"},{"body":"\n\tUsing ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":", we can implement\n\ta useful function called ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"member"},{"body":".\n\tThis takes two arguments: a string and a list of strings or\n\ta number and a list of numbers.\n\tIf the first argument is\n\tnot contained in the list (i.e., is not\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" to any item in the list), \n        then ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"member"},{"body":" returns\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":".  Otherwise, it returns the\n\tsublist of the list beginning with the first occurrence of the\n\tstring or number:\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAEQeAA75Wkw5glqqFFw5+Z4cpaA5rB4kzR711RykJSIiQA","body":"function member(item, x) {\n    return is_null(x)\n           ? null\n           : item === head(x)\n           ? x\n           : member(item, tail(x));\n} "},{"body":"\n        For example, the value of\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAEQeAA75Wkw5glqqFFw5+Z4cpaA5rB4kzR711RykJSIiQA","body":"member(\"apple\", list(\"pear\", \"banana\", \"prune\")) "},{"body":"\n        is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":", whereas the value of\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAEQeAA75Wkw5glqqFFw5QqWgOQCetXmFxU35nhw5IiJAA","body":"member(\"apple\", list(\"x\", \"y\", \"apple\", \"pear\")) "},{"body":"\n        is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"apple\", \"pear\")"},{"body":".\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.53","id":"#ex-2.53","child":[{"body":"\n        What is the result of evaluating each of the\n        following expressions, in box notation and list notation?\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAbASwGcAXACgCIBDKgGlCoCMGmBjKgSiA","body":"list(\"a\", \"b\", \"c\") "},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAbASwGcAXACmPIoCIBzAUwHsAnJ2gSk6A","body":"list(list(\"george\")) "},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAXAQwEsAbACjJIGcCrb6AiAD2yYBpRWUmBKLtToUmAT3ZcxvPjKA","body":"tail(list(list(\"x1\", \"x2\"), list(\"y1\", \"y2\"))) "},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAXAQwEsAbACgAsBTIgEwrJIGcCnX2AiAD2y4A0oXii4BKIczYUuAT35C5osSrFA","body":"tail(head(list(list(\"x1\", \"x2\"), list(\"y1\", \"y2\")))) "},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAERyXjmCWqoUXDmsWkRMhaA5Kq40TCo1OQCeTDo0AO4tKjRkANbNIiJAA","body":"member(\"red\", list(\"blue\", \"shoes\", \"yellow\", \"socks\")) "},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAERyXjmCWqoUXHlMBYI5Kq40TCqFoDmsWkRMjdU0ZADWDSIiQA","body":"member(\"red\", list(\"red\", \"shoes\", \"blue\", \"socks\")) "}],"solution":[{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAbASwGcAXACgCIBDKgGlCoCMGmBjKgSgG5cRQAbVpthrRsM6MAdgFcCBALrKgA","body":"[\"a\", [\"b\", [\"c\", null]]] "},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAbASwGcAXACmPIoCIBzAUwHsAnJ2gSk4G5cRQAbUEMW7RrQA0oAHYBXAgQC60+YqVA","body":"[[\"george\", null], null] "},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAXAQwEsAbACjJIGcCrb6AiAD2yYBpRWUmBKLtToUmAT3ZcxvPjIDcuEKADaSsROVTOoAHYBXMmQC6hrnoOGgA","body":"[[\"y1\", [\"y2\", null]], null] "},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAXAQwEsAbACgAsBTIgEwrJIGcCnX2AiAD2y4A0oXii4BKIczYUuAT35C5osSrEBuXCFABtEYNAA7AK5kyAXSA","body":"[\"x2\", null] "},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAERyXjmCWqoUXMUqpXlMBYI5Kq40TCo5IkUlXDmsWkRMhaB1NGQA1s0iY6kgZtpaQA","body":"null "},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":9,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AWwFMGAjJgJwAoqKWAaUAA8AlKADeuUNNAcmFIh3pUAzgH0SRADZauoqTMMyA-KE06DRwwC5QvFqAC8z0AAsmAQwAmekZavSpkL+AbbMbJw8fAyCFB5UuqIiANy4AL744ezcAEQqrjRMKjmCWqoUXDlyXiWgeQVFtTmsWkRMTSo0ZADWxSIpuCCgANr1hcWCoy1ttaOdPRNm2loAumtAA","body":"[\"red\", [\"shoes\", [\"blue\", [\"socks\", null]]]] "}]},{"tag":"EXERCISE","title":"Exercise 2.54","id":"#ex-2.54","child":[{"body":"\n\tTwo lists are said to be\n\t ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":"\n\tif they contain equal elements arranged in the same order.  For example,\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuRQAzAVwDsBjAFwEsB7M0AUwEcSBDAG1CrtACMmoAO4AnGlSpNG-AJ6gAzlRIATaVXysOnABScaSnQCIqACwNGANKCMXrR9lZv6lRgJTWXVY2bs2-Dk5GXu5uQA","body":"equal(list(\"this\", \"is\", \"a\", \"list\"), list(\"this\", \"is\", \"a\", \"list\")) "},{"body":"\n\tis true, but\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuRQAzAVwDsBjAFwEsB7M0AUwEcSBDAG1CrtACMmoAO4AnGlSpNG-AJ6gAzlRIATaVXysOnABScaSnQCIqACwNGANKCMXrR9lZv6lRgJTWXVY2bugvxn4O7vZe7m5AA","body":"equal(list(\"this\", \"is\", \"a\", \"list\"), list(\"this\", list(\"is\", \"a\"), \"list\")) "},{"body":"\n\tis false.  To be more precise, we can define\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" recursively in terms of the\n\tbasic ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" equality of numbers and\n\tstrings by\n\tsaying that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":" are\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" if they are both strings or\n\tboth numbers and they are\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":", or if they are both pairs such\n\tthat ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(a)"},{"body":" is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head(b)"},{"body":" and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail(a)"},{"body":" is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail(b)"},{"body":".  Using this idea,\n\timplement ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" as a\n\tfunction.\n\t","tag":"#text"}],"solution":[{"body":"\n\t  The following function implements general structural equality\n\t  for chapters 1 and 2, assuming that\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" can only be applied\n\t  to two numbers or two strings, and otherwise report an error.\n\t  The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" function below\n\t  will only encounter an error when both\n\t  arguments are functions, because it is not clear in chapters 1\n\t  and 2 what equality on functions would mean.\n          ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuRQAzAVwDsBjAFwEsB7M0AUwEcSBDAG1CrtACMmoAO4AnGlSpNG-AJ6gAzlRIATaVXylKtBszZcAFAA8FAGlCyFASlABvXKEehRTZaMY0FAfQAO7GqLG1g5OoU4A-KAGnr7+gZY2AGSJIWFpehycBgAWTOwqQVbmufkGCUmJoKnpoayZBlT+WSZFPE1l1lZW1ekAXKAxZCSczcE1EQPeQyMd3eOO-YMkALaCgS09aZHRUytrs6DJoCagALznFmPzi978dHSceWSFm2HbMXcPTwdHBkGHlQSoAAPsCogBCE5HcHlObXSZeJTiMgAcxe81A728SJoqJ+lRO51Olzh4xuXnIaiIuKYBQ2GMiMUpTGpZFps1eoX6hGEQgA1mQ6MJQILhVRsuwqMcFJNQOxiORqPQyJywjsvFolQx8dKzhcEgBuXAAX3wdUMnE8VAMACJxZ4beYbQ6nexHaAbZalDbWl7rXbsi6PUGbW6nX6fVYgA","body":"function equal(xs, ys) {\n    return is_pair(xs)\n           ? (is_pair(ys) &&\n              equal(head(xs), head(ys)) && \n              equal(tail(xs), tail(ys)))\n           : is_null(xs)\n           ? is_null(ys)\n           : is_number(xs)\n           ? (is_number(ys) && xs === ys)\n           : is_boolean(xs)\n           ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))\n           : is_string(xs)\n           ? (is_string(ys) && xs === ys)\n           : is_undefined(xs)\n           ? is_undefined(ys)\n           : // we know now that xs is a function\n             (is_function(ys) && xs === ys);\n} "},{"body":"\n\t  In chapter 3, we\n\t  extend ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":" such that it\n\t  can be applied to any value and give meaningful results (pointer\n\t  equality). The\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":" function above will\n\t  still be valid with this extended meaning of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"==="},{"body":", but can be simplified\n\t  as follows:\n          ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuRQAzAVwDsBjAFwEsB7M0AUwEcSBDAG1CrtACMmoAO4AnGlSpNG-AJ6gAzlRIATaVXylKtBszZcAFAA8FAGlCyFASlABvXKEehRTZaMY0FAfQAO7GqLG1g5OoU4A-KAGnr7+gZY2AGSJIWFpehycBgAWTOwqQVbmufkGCUmJoKnpoayZBlT+WSZFPE1l1lZW1ekAXKAmoAC8IxYKANy4AL74dYacnlQGAERU2Z7L5ssbW+yboMsLSsutR0ur6wr721e712cnVkA","body":"function equal(xs, ys) {\n    return is_pair(xs)\n           ? (is_pair(ys) &&\n              equal(head(xs), head(ys)) && \n              equal(tail(xs), tail(ys)))\n           : xs === ys;\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.55","id":"#ex-2.55","child":[{"body":"\n\tThe JavaScript interpreter reads the characters after a double\n        \n\tquotation mark ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\""},{"body":" until it finds\n\tanother double quotation mark. All characters between the two are part\n\tof the string, excluding the double quotation marks themselves. But what\n\tif we want a string to contain double quotation marks? For this\n\tpurpose, JavaScript also allows\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"single","tag":"#text"}]},{"body":" quotation marks\n\tto delimit strings, as for example in\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"'say your name aloud'"},{"body":".\n\tWithin singly-quoted strings, we can use double quotation marks, and\n\tvice versa, so\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"'say \"your name\" aloud'"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"say 'your name' aloud\""},{"body":" are valid\n\tstrings that have different characters at positions 4 and 14, if we\n\tstart counting at 0. Depending on the font in use, two single\n\tquotation marks might not be easily distinguishable from a double\n\tquotation mark. Can you spot which is which and work out the value of\n\tthe following expression?\n        ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQGY0EYBQuByAIgNAF4LQiiBuIA","body":"'\"' === \"\" "}],"solution":[{"body":"\n\t  The given expression checks if a string containing only on double-quote\n\t  character is equal to the empty string. The resulting value is false.\n\t","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.3.1#footnote-link-1","child":[{"body":"\n        We can consider two strings to be \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" if they\n\tconsist of the same characters in the same order. Such a definition\n        skirts a deep issue that we are not yet ready to address: the meaning\n        of \"","tag":"#text"},{"body":"sameness","tag":"#text"},{"body":"\" in a programming language.  We will return\n\tto this in chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":"\n\t(section ","tag":"#text"},{"tag":"REF","body":"3.1.3","href":"/sicpjs/3.1.3"},{"body":").","tag":"#text"}]}]