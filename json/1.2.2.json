[{"id":"/sicpjs/1.2.2","tag":"TITLE","body":"1.2.2  Tree Recursion"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Another common pattern of computation is called ","tag":"#text"},{"tag":"EM","child":[{"body":"tree recursion","tag":"#text"}]},{"body":".\n    As an example, consider computing the sequence of\n    \n    Fibonacci numbers,\n    in which each number is the sum of the preceding two: \n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{l}\n      0, 1, 1, 2, 3, 5, 8, 13, 21, \\ldots\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    In general, the Fibonacci numbers can be defined by the rule\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      \\textrm{Fib}(n) & = & \\left\\{ \\begin{array}{ll}\n      0   &  \\text{if $n=0$}\\\\\n      1   &  \\text{if $n=1$}\\\\\n      \\textrm{Fib}(n-1)+\\textrm{Fib}(n-2) & \\text{otherwise}\n      \\end{array}\n      \\right.\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    We can immediately translate this definition into a recursive\n    function\n    for computing Fibonacci numbers:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsDMBXAOwGMAXASwHsjQ8KAjACiIEpQBvbUH0AJwCmZAn1q0AvJNAAGbr3m8A-DLkL5ALlASpKVWp7Ld+jXUYtQAWlTsA1Kea0rGVgG5sAX1z1mANldA","body":"function fib(n) {\n    return n === 0\n           ? 0\n           : n === 1\n           ? 1\n           : fib(n - 1) + fib(n - 2);\n} "},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch1-Z-G-13.svg","id":"#fig-1.5","captionHref":"/sicpjs/1.2.2#fig-1.5","captionName":"Figure 1.5 ","captionBody":[{"body":"The tree-recursive process generated in computing\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(5)"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Consider the pattern of this computation.  To compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(5)"},{"body":",\n    we compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(4)"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(3)"},{"body":".\n    To compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(4)"},{"body":",\n    we compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(3)"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(2)"},{"body":".\n    In general, the evolved process looks like a tree, as shown in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"1.5","href":"/sicpjs/1.2.2#fig-1.5"},{"body":".\n      \n    Notice that the branches split into\n    two at each level (except at the bottom); this reflects the fact that the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib"},{"body":"function\n    calls itself twice each time it is invoked.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    This\n    function\n    is instructive as a prototypical tree recursion, but it is a terrible way to\n    compute Fibonacci numbers because it does so much redundant computation.\n    Notice in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"1.5","href":"/sicpjs/1.2.2#fig-1.5"},{"body":"\n    that the entire\n    computation of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(3)"},{"body":"—almost\n\thalf the work—is\n      \n    duplicated.  In fact, it is not hard to show that the number of times the\n    function\n    will compute\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(1)"},{"body":"\n    or\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib(0)"},{"body":"\n    (the number of leaves in the above tree, in general) is precisely\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(n+1)$","tag":"LATEX"},{"body":".  To get an idea of how\n    bad this is, one can show that the value of\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":"\n    grows exponentially with ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  More precisely\n    (see exercise ","tag":"#text"},{"tag":"REF","body":"1.13","href":"/sicpjs/1.2.2#ex-1.13"},{"body":"),\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":" is the closest integer to\n    ","tag":"#text"},{"body":"$\\phi^{n} /\\sqrt{5}$","tag":"LATEX"},{"body":", where\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lllll}\n      \\phi&=&(1+\\sqrt{5})/2 & \\approx & 1.6180\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    is the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"golden ratio","tag":"#text"}]},{"body":", which satisfies the equation\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      \\phi^{2} &=&\\phi + 1\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    Thus, the process uses a number of steps that grows exponentially with the\n    input.  On the other hand, the space required grows only linearly with the\n    input, because we need keep track only of which nodes are above us in the\n    tree at any point in the computation.  In general, the number of steps\n    required by a tree-recursive process will be proportional to the number of\n    nodes in the tree, while the space required will be proportional to the\n    maximum depth of the tree.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    We can also formulate an iterative process for computing the Fibonacci\n    numbers. The idea is to use a pair of integers ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":"\n    and ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":", initialized to\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(1)=1$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(0)=0$","tag":"LATEX"},{"body":", and to repeatedly apply the\n    simultaneous transformations\n    ","tag":"#text"},{"body":"\n      \\[\\begin{array}{lll}\n      a & \\leftarrow & a+b \\\\\n      b & \\leftarrow & a\n      \\end{array}\\]\n    ","tag":"LATEX"},{"body":"\n    It is not hard to show that, after applying this transformation\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" times, ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":" will be equal, respectively, to\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(n+1)$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":".  Thus, we can compute\n    Fibonacci numbers iteratively using the\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsDMBXAOwGMAXASwHsjQ8KAjACiIEpQBvbUH0AJwCmZAn1r0GAfQpkBfJigA0oAAxK2AbmwBffMXLUxjKTLkBDJQyUkqxMuy69+QkbWu3QAXi8rujv6AB+UAZff14ALjojaVkmU1AAamClc1A3IjJQAFpUVk0dfEYmADY8oA","body":"function fib(n) {\n    return fib_iter(1, 0, n);\n}\nfunction fib_iter(a, b, count) {\n    return count === 0\n           ? b\n           : fib_iter(a + b, a, count - 1);\n} "},{"body":"\n    This second method for computing ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":"\n    is a linear iteration. The difference in number of steps required by the two\n    methods—one linear in ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", one growing as\n    fast as ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":" itself—is\n    enormous, even for small inputs.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    One should not conclude from this that tree-recursive processes are useless.\n    When we consider processes that operate on hierarchically structured data\n    rather than numbers, we will find that tree recursion is a natural and\n    powerful tool.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.2.2#footnote-1"},{"body":" But\n    even in numerical operations, tree-recursive processes can be useful in\n    helping us to understand and design programs.  For instance, although the\n    first\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib"},{"body":"function\n    is much less efficient than the second one, it is more straightforward,\n    being little more than a translation into\n    \n        JavaScript\n      \n    of the definition of the Fibonacci sequence.  To formulate the iterative\n    algorithm required noticing that the computation could be recast as an\n    iteration with three state variables.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Example: Counting change","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    It takes only a bit of cleverness to come up with the iterative Fibonacci\n    algorithm.  In contrast, consider the following problem:\n    How many different ways can we make change of\n    $1.00 (100 cents),\n      \n    given half-dollars, quarters, dimes, nickels, and pennies\n    (50 cents, 25 cents, 10 cents, 5 cents, and 1 cent, respectively)?\n    More generally, can\n    we write a\n    function\n    to compute the number of ways to change any given amount of money?\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    This problem has a simple solution as a recursive\n    function.\n    Suppose we think of the types of coins available as arranged in some order.\n    Then the following relation holds:\n    ","tag":"#text"},{"tag":"EPIGRAPH","child":[{"body":"\n    The number of ways to change amount ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" using\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" kinds of coins equals\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n        the number of ways to change amount ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":"\n\tusing all but the first kind of coin, plus\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        the number of ways to change amount ","tag":"#text"},{"body":"$a-d$","tag":"LATEX"},{"body":"\n\tusing all ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" kinds of coins, where\n\t","tag":"#text"},{"body":"$d$","tag":"LATEX"},{"body":" is the denomination of the first kind\n\tof coin.\n      ","tag":"#text"}]}]},{}]}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    To see why this is true, observe that the ways to make change can be divided\n    into two groups: those that do not use any of the first kind of coin, and\n    those that do.  Therefore, the total number of ways to make change for some\n    amount is equal to the number of ways to make change for the amount without\n    using any of the first kind of coin, plus the number of ways to make change\n    assuming that we do use the first kind of coin.  But the latter number is\n    equal to the number of ways to make change for the amount that remains after\n    using a coin of the first kind.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Thus, we can recursively reduce the problem of changing a given amount to\n    problems of changing smaller amounts or using fewer kinds of coins. Consider\n    this reduction rule carefully, and convince yourself that we can use it to\n    describe an algorithm if we specify the following degenerate\n    cases:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.2.2#footnote-2"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n        If ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" is exactly 0, we should count that\n\tas 1 way to make change.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        If ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" is less than 0, we should count\n\tthat as 0 ways to make change.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":" If ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is 0, we should count that\n      as 0 ways to make change.\n      ","tag":"#text"}]}]},{"body":"\n    We can easily translate this description into a recursive\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsDMBXAOwGMAXASwHsjQSriyB9EgCwEMiBzAUwAp2AWwZEyASlABvbKFmgATjzIF5tEiQHDGAGlABWMQG5sAX1yFSlGnQ1CRZXQGsKRACYBnJlTwsqL9xLScgpKKrR2jKAAvDGgAAwywUmgAPyoiclyAFygEaKgADzxoAA+JaDObp7evv7RsQmZwWmNTbI56pr2Ti4eXj70dQC0qGIZbaAA1ONtnXlkoCN4FPLuzK48RFSCLuxWRHyVfTWDRAHaMxMVvdUDfmdGpubE5NS0y6vrm9u7+4c3-VqDyk40UylU1yqgNO7nqUVQqXSbRyR1uQNhMXhGEReku2UhxzudUxoAAzIiUK1MiiASd7hjYgAWREYXHIglomFw-Q4qnJHJxQxyJ7YeiMFgcbj8SlxIxAA","body":"function count_change(amount) {\n    return cc(amount, 5);\n}\n\nfunction cc(amount, kinds_of_coins) {\n    return amount === 0\n           ? 1\n           : amount < 0 || kinds_of_coins === 0\n           ? 0\n           : cc(amount, kinds_of_coins - 1)\n             +\n             cc(amount - first_denomination(kinds_of_coins),\n                kinds_of_coins);\n}\n\nfunction first_denomination(kinds_of_coins) {\n    return kinds_of_coins === 1 ? 1\n         : kinds_of_coins === 2 ? 5\n         : kinds_of_coins === 3 ? 10\n         : kinds_of_coins === 4 ? 25\n         : kinds_of_coins === 5 ? 50\n         : 0;   \n} "},{"body":"\n    (The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_denomination"},{"body":" function\n      \n    takes as input the number of kinds of coins available and returns the\n    denomination of the first kind.  Here we are thinking of the coins as\n    arranged in order from largest to smallest, but any order would do as well.)\n    We can now answer our original question about changing a dollar:\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":25,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsDMBXAOwGMAXASwHsjQSriyB9EgCwEMiBzAUwAp2AWwZEyASlABvbKFmgATjzIF5tEiQHDGAGlABWMQG5sAX1yFSlGnQ1CRZXQGsKRACYBnJlTwsqL9xLScgpKKrR2jKAAvDGgAAwywUmgAPyoiclyAFygEaKgADzxoAA+JaDObp7evv7RsQmZwWmNTbI56pr2Ti4eXj70dQC0qGIZbaAA1ONtnXlkoCN4FPLuzK48RFSCLuxWRHyVfTWDRAHaMxMVvdUDfmdGpubE5NS0y6vrm9u7+4c3-VqDyk40UylU1yqgNO7nqUVQqXSbRyR1uQNhMXhGEReku2UhxzudUxoAAzIiUK1MiiASd7hjYgAWREYXHIglomFw-Q4qnJHJxQxyJ7YeiMFgcbj8SlxIxAA","body":"count_change(100); ","output":"292"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n\tThe function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_change"},{"body":"\n    generates a tree-recursive process with redundancies similar to those in\n    our first implementation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fib"},{"body":".\n    \n    On the other hand, it is not\n    obvious how to design a better algorithm for computing the result, and we\n    leave this problem as a challenge. The observation that a\n    \n    tree-recursive process may be highly inefficient but often easy to specify\n    and understand has led people to propose that one could get the best of both\n    worlds by designing a \"","tag":"#text"},{"body":"smart compiler","tag":"#text"},{"body":"\" that could transform\n    tree-recursive\n    functions\n    into more efficient\n    functions\n    that compute the same result.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/1.2.2#footnote-3"}]},{"tag":"EXERCISE","title":"Exercise 1.11","id":"#ex-1.11","child":[{"body":"\n    A function ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is defined by the\n    \n\trules\n      ","tag":"#text"},{"body":"$f(n)=n$","tag":"LATEX"},{"body":" if ","tag":"#text"},{"body":"$n < 3$","tag":"LATEX"},{"body":"\n    and ","tag":"#text"},{"body":"$f(n)={f(n-1)}+2f(n-2)+3f(n-3)$","tag":"LATEX"},{"body":" if\n    ","tag":"#text"},{"body":"$n\\ge 3$","tag":"LATEX"},{"body":".  Write a\n    JavaScript function\n    that computes ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" by means of a recursive process.\n    Write a\n    function\n    that computes ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" by means of an iterative\n    process.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChslAJYAuApgE4CGRBAbiaAGYCuAdgMbUD2L2z7XLRgH1i5KrRIAKFgEpQAb2yhloMiSJMygwQB5QAZiUrjKgPygeJqwC5hoytToiAtgAcANpIwAaVL4AMvoIAtKAYMgDc2AC+vKwcBNx2pA4SLh6SFL4ARr5seZysRHKKxmoaWqBshSxEoAC8jaD+RlZmoBStbaC2DCIp4k4Ebp4UoADUYaAAVKDZEwYzVb5ZcwVFoKEokTG4ffaDUgCskUA","body":"// iterative function\nfunction f_iterative(n) {\n    return n < 3\n           ? n\n           : f_iterative_impl(2, 1, 0, n - 2);\n}\nfunction f_iterative_impl(a, b, c, count) {\n    return count === 0\n           ? a\n           : f_iterative_impl(a + 2 * b + 3 * c, a, b, count - 1);\n} "},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsgE4CmAxgK74DOAlgG6GgBmpAdsQC5UD2z2TrH3RgH0iZSrUIAKZgEpQAb2yhloIm3LNQmgDygAzEpVGVAfi2HjRgFzDR5anWmgAtKjkBqbAEhjGUACpbEnsJJ1cMD29jPQCgsQcpTVc9GQBubABfXAYRYPFHAFY0oA","body":"//recursive function\nfunction f_recursive(n) {\n    return n < 3\n           ? n\n           : f_recursive(n - 1) +\n\t     2 * f_recursive(n - 2) +\n\t     3 * f_recursive(n - 3);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.12","id":"#ex-1.12","child":[{"body":"\n    The following pattern of numbers is called\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Pascal's triangle","tag":"#text"}]},{"body":".\n    ","tag":"#text"},{"body":"\n      \\[\n      {\n      \\begin{array}{rrrrcrrrr}\n      &   &   &   & 1 &   &   &   &     \\\\\n      &   &   &1  &   &1  &   &   &     \\\\\n      &   &1  &   & 2 &   &1  &   &     \\\\\n      &1  &   &3  &   &3  &   &1  &     \\\\\n      1  &   & 4 &   & 6 &   & 4 &   & 1   \\\\\n      &   &   &   & \\ldots & & & & \n      \\end{array}}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    The numbers at the edge of the triangle are all 1, and each number inside\n    the triangle is the sum of the two numbers above it.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/1.2.2#footnote-4"},{"body":"\n    Write a\n    function\n    that computes elements of Pascal's triangle by means of a recursive\n    process.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQCZMChsDMBXAOwGMAXASwHsjQAHAQwGcSGAbAfTICcKGiA5mwCmACm5UA7gBpQFIgBNhADwCUoAN7ZQO0N2FkC3WvKXLQAPj1Ttuu7oD8oPOybDb9uwC45ilaABeINRQAB9Q3zMggIlJD087JxR4hJ0fRhZ2Ll5+ITFY0ABaVFlTf2KUVWwASASAahqEjNZOHj5BEXEpIpLIlVUAbmwAX1xmrLbczoBWWQAWQaA","body":"function pascal_triangle(row, index) {\n    return index > row\n           ? false\n           : index === 1 || index===row\n             ? 1\n             : pascal_triangle(row - 1, index - 1)\n\t       +\n\t       pascal_triangle(row - 1, index);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.13","id":"#ex-1.13","child":[{"body":"\n    Prove that ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":" is the closest\n    integer to ","tag":"#text"},{"body":"$\\phi^n/\\sqrt{5}$","tag":"LATEX"},{"body":", where\n    ","tag":"#text"},{"body":"$\\phi= (1+\\sqrt{5})/2$","tag":"LATEX"},{"body":".\n    \n\tHint: Use induction and the\n\tdefinition of the Fibonacci numbers to prove that\n\t","tag":"#text"},{"body":"$\\textrm{Fib}(n)=(\\phi^n-\\psi^n)/\\sqrt{5}$","tag":"LATEX"},{"body":",\n\twhere \n\t","tag":"#text"},{"body":"$\\psi= (1-\\sqrt{5})/2$","tag":"LATEX"},{"body":".\n      ","tag":"#text"}],"solution":[{"body":"\n      First, we show that\n      ","tag":"#text"},{"body":"$\\textrm{Fib}(n) =       \\dfrac{\\phi^n-\\psi^n}{\\sqrt{5}}$","tag":"LATEX"},{"body":",\n      where\n      ","tag":"#text"},{"body":"$\\psi = \\dfrac{1-\\sqrt{5}}{2}$","tag":"LATEX"},{"body":"\n      using strong induction.\n      ","tag":"#text"},{"tag":"BR"},{"body":"$\\textrm{Fib}(0) = 0$","tag":"LATEX"},{"body":"\n      and\n      ","tag":"#text"},{"body":"$\\dfrac{\\phi^0-\\psi^0}{\\sqrt{5}} = 0$","tag":"LATEX"},{"tag":"BR"},{"body":"$\\textrm{Fib}(1) = 1$","tag":"LATEX"},{"body":"\n      and\n      ","tag":"#text"},{"body":"$\\dfrac{\\phi^1-\\psi^1}{\\sqrt{5}} =       \\dfrac{\\dfrac{1}{2}\\left(1+\\sqrt{5} - 1 + \\sqrt{5}\\right)}{\\sqrt{5}} = 1$       ","tag":"LATEX"},{"tag":"BR"},{"body":"\n      So the statement is true for ","tag":"#text"},{"body":"$n=0,1$","tag":"LATEX"},{"body":".\n      Given ","tag":"#text"},{"body":"$n \\geq 1$","tag":"LATEX"},{"body":", assume the proposition\n      to be true for ","tag":"#text"},{"body":"$0, 1, \\dots , n$","tag":"LATEX"},{"body":".\n      ","tag":"#text"},{"tag":"BR"},{"body":"$\\textrm{Fib}(n+1) =       \\textrm{Fib}(n) + \\textrm{Fib}(n-1) =       \\dfrac{\\phi^n-\\psi^n + \\phi^{n-1} - \\psi^{n-1}}{\\sqrt{5}}$","tag":"LATEX"},{"tag":"BR"},{"body":"$= \\dfrac{\\phi^{n-1}(\\phi + 1) -       \\psi^{n-1}(\\psi + 1)}{\\sqrt{5}}$       ","tag":"LATEX"},{"tag":"BR"},{"body":"$=\\dfrac{\\phi^{n-1}(\\phi^2) - \\psi^{n-1}(\\psi^2)}{\\sqrt{5}}       = \\dfrac{\\phi^{n+1} - \\psi^{n+1}}{\\sqrt{5}}$","tag":"LATEX"},{"body":",\n      so the statement is true.\n      ","tag":"#text"},{"tag":"BR"},{"body":"\n      Notice that since ","tag":"#text"},{"body":"$|\\psi| < 1$","tag":"LATEX"},{"body":" and\n      ","tag":"#text"},{"body":"$\\sqrt{5} > 2$","tag":"LATEX"},{"body":", one has\n      ","tag":"#text"},{"body":"$\\left|\\dfrac{\\psi^n}{\\sqrt{5}}\\right| <       \\dfrac{1}{2}$","tag":"LATEX"},{"tag":"BR"},{"body":"\n      Then the integer closest to\n      ","tag":"#text"},{"body":"$\\textrm{Fib}(n) + \\dfrac{\\psi^n}{\\sqrt{5}} =       \\dfrac{\\phi^n}{\\sqrt{5}}$","tag":"LATEX"},{"body":" is\n      ","tag":"#text"},{"body":"$\\textrm{Fib}(n)$","tag":"LATEX"},{"body":".\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.2.2#footnote-link-1","child":[{"body":"An example of this was hinted at in\n    section ","tag":"#text"},{"tag":"REF","body":"1.1.3","href":"/sicpjs/1.1.3"},{"body":": The interpreter\n    itself evaluates expressions using a tree-recursive process.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.2.2#footnote-link-2","child":[{"body":"For example, work through in detail how the reduction rule\n    applies to the problem of making change for 10 cents using pennies and\n    nickels.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/1.2.2#footnote-link-3","child":[{"body":"One approach to coping with redundant\n    computations is to arrange matters so that we automatically construct a\n    table of values as they are computed.  Each time we are asked to apply the\n    function\n    to some argument, we first look to see if the value is already stored in the\n    table, in which case we avoid performing the redundant computation. This\n    strategy, known as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"tabulation","tag":"#text"}]},{"body":" or\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"memoization","tag":"#text"}]},{"body":", can be implemented in a\n    straightforward way.  Tabulation can sometimes be used to transform processes\n    that require an exponential number of steps\n    \n\t(such as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_change"},{"body":")\n      \n    into processes whose space and time requirements grow linearly with the\n    input.  See exercise ","tag":"#text"},{"tag":"REF","body":"3.27","href":"/sicpjs/3.3.3#ex-3.27"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/1.2.2#footnote-link-4","child":[{"body":"The elements\n    of Pascal's triangle are called the ","tag":"#text"},{"tag":"EM","child":[{"body":"binomial coefficients","tag":"#text"}]},{"body":",\n    because the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th row consists of\n    \n    the coefficients of the terms in the expansion of\n    ","tag":"#text"},{"body":"$(x+y)^n$","tag":"LATEX"},{"body":".  This pattern for computing the\n    coefficients\n    appeared in\n    \n    Blaise Pascal's 1653 seminal work on probability theory,\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Traité du triangle arithmétique","tag":"#text"}]},{"body":".\n    According to\n    \n    Edwards (2019), the same pattern appears\n    in the works of\n    the eleventh-century Persian mathematician\n    \n    Al-Karaji,\n    in the works of the twelfth-century Hindu mathematician\n    \n    Bhaskara, and\n    in the works of the\n    thirteenth-century Chinese mathematician\n    \n    Yang Hui.\n  ","tag":"#text"}]}]