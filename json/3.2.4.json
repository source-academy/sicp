[{"id":"/sicpjs/3.2.4","tag":"TITLE","body":"3.2.4  \n    Internal\n    \n      \n      Declarations"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n\tIn this section we handle the evaluation of function bodies or other\n\tblocks (such as the branches of conditional statements) that contain\n\tdeclarations.\n\tEach block opens a new scope for names declared in the block.\n\tIn order to evaluate a block in a given environment, we extend that\n\tenvironment by a new frame that contains all names declared directly\n\t(that is, outside of nested blocks) in the body of the block and\n\tthen evaluate the body in the newly constructed environment.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Section ","tag":"#text"},{"tag":"REF","body":"1.1.8","href":"/sicpjs/1.1.8"},{"body":" introduced the idea that\n    functions\n    can have internal\n    \n\tdeclarations,\n      \n    thus leading to a block structure as in the\n    \n    following\n    function\n    to compute square roots:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":13,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffMXLU6oFgEciDMZx78hI8ZOmgAVAeOnSlWnoGADdRYQYAc1FOABpQAE8nASExCSlQTlAAagSeMAxDE0J-C3obYQpHPmTBMwDLKhYAfQiaGgATJtESGiIIgAs2CKJRFhYklxdU90ZWNhs7B2HR8d0NHgAeZTQlJQBGQxcTFzrS0CoAWwAHYRpQoZGxicnBafSQsMjo5bG4mTAfuNDkJjkJToErNYKk0qBQwg8VlxnC9XGl6I0Wm1Ot1egMEU8aijJupAYSiUJtOUKDC4cI2Jcbndvo9xlxgYJQa83OkqTT4Xs2b5cFS2ABWNlAA","body":"function sqrt(x) {\n    function is_good_enough(guess) {\n        return abs(square(guess) - x) < 0.001;\n    }\n    function improve(guess) {\n        return average(guess, x / guess);\n    }\n    function sqrt_iter(guess){\n        return is_good_enough(guess)\n               ? guess\n               : sqrt_iter(improve(guess));\n    }\n    return sqrt_iter(1);\n} "},{"body":"\n    Now we can use the environment model to see why these internal\n    \n\tdeclarations\n      \n    behave as desired.\n    \n    Figure ","tag":"#text"},{"tag":"REF","body":"3.11","href":"/sicpjs/3.2.4#fig-3.11"},{"body":"\n    shows the point in the evaluation of the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt(2)"},{"body":"\n    where the internal\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n    has been called for the first time with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"guess"},{"body":" equal to 1.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-12.svg","id":"#fig-3.11","captionHref":"/sicpjs/3.2.4#fig-3.11","captionName":"Figure 3.11 ","captionBody":[{"body":"The\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":" function with internal\n\t    declarations.\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Observe the structure of the environment.\n    \n      The name\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":" is bound\n      in the program environment\n      \n    to a\n    function\n    object whose associated environment is the\n    program\n    environment.  When ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":" was called, a new\n    environment, E1, was formed, subordinate to the\n    program\n    environment, in which the parameter ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" is bound\n    to 2. The body of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":" was then\n    evaluated in E1. \n    \n\tThat body is a block with local\n\tfunction declarations and therefore E1 was extended with a new frame for\n\tthose declarations, resulting in the new environment E2. The body\n\tof the block was then evaluated in E2. Since the first statement\n\tin the body is\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"function is_good_enough(guess) {\n    return abs(square(guess) - x) < 0.001;\n}"},{"body":"\n\tevaluating this declaration created the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n\tin the environment E2.\n      \n\tTo be more precise, \n\tthe name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n\tin the first frame of E2 was bound to a function\n\tobject whose associated environment is E2.\n      \n    Similarly,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"improve"},{"body":" and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n    were defined as\n    functions in E2.\n    For conciseness,\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.11","href":"/sicpjs/3.2.4#fig-3.11"},{"body":"\n    shows only the\n    function\n    object for \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":".","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    After the local\n    functions\n    were defined, the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter(1)"},{"body":"\n    was evaluated, still in environment\n    E2.\n    So the\n    function\n    object bound to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n      in E2 was called with 1 as an argument.  This created an environment E3\n      in which\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"guess"},{"body":", the parameter of \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":",\n    is bound to 1.  \n    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n    in turn called \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n    with the value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"guess"},{"body":"\n\t(from E3) as the argument for \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":".\n      \n    This set up another environment,\n    \n\tE4, in which\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"guess"},{"body":" (the parameter of \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":")\n      \n    is bound to 1. Although \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n    and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n    both have a parameter named ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"guess"},{"body":", these are two\n    distinct local variables located in different frames.\n    \n\tAlso, E3 and E4 both have E2 as their enclosing environment, because the \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n\tand \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":" functions\n\tboth have E2 as their environment part.\n      \n    One consequence of this is that the\n    \n\tname\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" that appears in the body of \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_good_enough"},{"body":"\n    will reference the binding of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" that appears in\n    E1, namely the value of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" with which the\n    original ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":"function\n    was called.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The environment model thus explains the two key properties that make local\n    function declarations\n    a useful technique for modularizing programs:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tThe names of the local\n\tfunctions\n\tdo not interfere with\n\tnames external to the enclosing\n\tfunction,\n\tbecause the local\n\tfunction\n\tnames will be bound in the frame that the\n\tblock creates when it is evaluated,\n\trather than being bound in the\n\tprogram\n\tenvironment.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tThe local\n\tfunctions\n\tcan access the arguments of the enclosing\n\tfunction,\n\tsimply by using parameter names as free\n\tnames.\n\tThis is\n\tbecause the body of the local\n\tfunction\n\tis evaluated in an environment that is subordinate to the\n\tevaluation environment for the enclosing\n\tfunction.","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 3.11","id":"#ex-3.11","child":[{"body":"\n    In section ","tag":"#text"},{"tag":"REF","body":"3.2.3","href":"/sicpjs/3.2.3"},{"body":" we saw how the\n    environment model described the behavior of\n    functions\n    with local state.  Now we have seen how internal\n    \n\tdeclarations\n      \n    work.\n    \n    A typical message-passing\n    function\n    contains both of these aspects.  Consider the\n    \n    bank account\n    function\n    of section ","tag":"#text"},{"tag":"REF","body":"3.1.1","href":"/sicpjs/3.1.1"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0BYBQuAzAVwDsBjAFwEsB7E0AWwEMBrAUwH0myybSKAFACMmAGybk2ASlABvXKEWhi5anVAB3KhQAWAEwBOTDQKYM+JCjPlLboKgVDCxEsm1AA+ALygzFq3IKdsEi4pKgPqGu7gC0vub8ANxBwbYGbBREBvRRksmpoAC+oGyiAM7uNgVK6ZnZoABEkCRlRAQEVGRUbJbKpHplDfmphSlFYyqUtPR6bAAONGXapgmW1mO2uW4RoFvuANTx-sPBtVk5LnmKY6O2k2ozVGVzTBRkOgIM6wVn9QwRXh8DS0ukMxgaG2qoAA-JptPojBpIdUAFyMAFA2YLJYUCFQuywrGLbTIgpotgGAw0AyfAA0jQAqiQWCQaBp6OkAI5ENhlCho5jsLg8fwNKQncZpDLnUB6J4vN46ZKjXC8FoUXw8HaCzjcXj8AQAVgADOKgA","body":"function make_account(balance) {\n    function withdraw(amount) {\n        if (balance >= amount) {\n            balance = balance - amount;\n            return balance;\n        } else {\n            return \"Insufficient funds\";\n        }\n    }\n    function deposit(amount) {\n        balance = balance + amount;\n        return balance;  \n    }\n    function dispatch(m) {\n        return m === \"withdraw\"\n               ? withdraw\n               : m === \"deposit\"\n               ? deposit\n               : error(m, \"Unknown request: make_account\");\n    }\n    return dispatch;\n} "},{"body":"\n    Show the environment structure generated by the sequence of\n    interactions\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"const acc = make_account(50);"},{"tag":"SNIPPET","latex":false,"id":5,"eval":false,"body":"acc(\"deposit\")(40);","output":"90"},{"tag":"SNIPPET","latex":false,"id":6,"eval":false,"body":"acc(\"withdraw\")(60);","output":"30"},{"body":"\n    Where is the local state for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"acc"},{"body":" kept?\n    Suppose we define another account\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":false,"body":"const acc2 = make_account(100);"},{"body":"\n    How are the local states for the two accounts kept distinct?  Which parts\n    of the environment structure are shared between\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"acc"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"acc2"},{"body":"?\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"More about blocks","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    As we saw, the scope of the names declared in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":" is the whole body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":". This explains why\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"mutual recursion","tag":"#text"}]},{"body":" works, as in this (quite\n    wasteful) way of checking whether a nonnegative\n    integer is even.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction f(x) {\n    function is_even(n) {\n        return n === 0\n               ? true\n               : is_odd(n - 1);\n    }\n    function is_odd(n) {\n        return n === 0\n               ? false\n               : is_even(n - 1);\n    }\n    return is_even(x);\n}\n      "},{"body":"\n    At the time when \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_even"},{"body":" is called during a call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":", the environment diagram looks\n    like the one in figure ","tag":"#text"},{"tag":"REF","body":"3.11","href":"/sicpjs/3.2.4#fig-3.11"},{"body":" when\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":" is called. The functions\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_even"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_odd"},{"body":" are bound in E2 to function objects\n    that point to E2 as the environment in which to evaluate calls to those\n    functions. Thus\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_odd"},{"body":" in the body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_even"},{"body":" refers to the right function.\n    Although\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_odd"},{"body":"\n    is defined after\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_even"},{"body":",\n    this is no different from how in the body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n    the name\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"improve"},{"body":"\n    and the name\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt_iter"},{"body":"\n    itself refer to the right functions.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Equipped with a way to handle declarations within blocks, we can\n    revisit declarations of names at the top level. In\n    section ","tag":"#text"},{"tag":"REF","body":"3.2.1","href":"/sicpjs/3.2.1"},{"body":", we saw\n    that the names declared at the top level are added to the program\n    frame. A better explanation is that the whole program is placed in\n    an implicit block, which is evaluated in the global environment.\n    The treatment of blocks described above then handles the top\n    level:\n    The global environment is extended by a frame that contains the\n    bindings of all names declared in the implicit block. That frame is\n    the program frame and the resulting\n    environment is the\n    \n    program environment.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    We said that a block's body is evaluated in an environment that\n    contains all names declared directly in the body of the block.\n    A locally declared name is put into the environment when the block is\n    entered, but without an associated value. The evaluation of its\n    declaration during evaluation of the block body then assigns to the\n    name the result of evaluating the expression to the right of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"="},{"body":", as if the declaration were\n    an assignment. Since the addition of the name to the environment is\n    separate from the evaluation of the declaration, and the whole block\n    is in the scope of the name, an erroneous program could attempt to\n    \n    access the value of a name before its declaration is evaluated;\n    the evaluation of an unassigned name signals an error.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.2.4#footnote-1"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.2.4#footnote-link-1","child":[{"body":"\n    This explains why the program in\n    footnote ","tag":"#text"},{"tag":"REF","body":4,"href":"/sicpjs/1.3.2#footnote-4"},{"body":" of chapter 1 goes wrong.\n    The time between creating the binding for a name and evaluating\n    the declaration of the name is called the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"temporal dead zone","tag":"#text"}]},{"body":" (TDZ).","tag":"#text"}]}]