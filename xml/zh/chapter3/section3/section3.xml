<SECTION>
   <NAME>用可变数据建模</NAME> 
  <LABEL NAME="sec:mutable-data"></LABEL>
   <INDEX>可变数据对象<OPEN></OPEN></INDEX> 

   <SECTIONCONTENT></SECTIONCONTENT> 

   <TEXT>
    第<SPACE></SPACE><REF NAME="chap:data"></REF>章讨论了复合数据，作为构造具有多个部分的计算对象的一种手段，以便对具有多个方面的现实世界对象进行建模。在那一章中，我们引入了数据抽象的原则，根据该原则，数据结构是通过构造函数和选择器来指定的，构造函数创建数据对象，选择器访问复合数据对象的组成部分。但我们现在知道，还有数据的另一个方面是第<SPACE></SPACE><REF NAME="chap:data"></REF>章没有涉及的。为了对由状态变化的对象组成的系统进行建模，我们需要修改复合数据对象，以及构造和选择它们。为了对具有变化状态的复合对象进行建模，我们将设计数据抽象，除了选择器和构造器，还包括称为 
    <INDEX>mutator</INDEX>
    <EM>修改器</EM>的操作，这些操作会修改数据对象。例如，建模银行系统要求我们改变账户余额。因此，用于表示银行账户的数据结构可能会允许一个操作

    
      
(set-balance! $account$ $new$-$value$)
      
      <JAVASCRIPT>
set_balance(<META>account</META>, <META>new-value</META>)
      </JAVASCRIPT>
    
    将指定账户的余额更改为指定的新值。为其定义了修改器的数据对象被称为<EM>可变数据对象</EM>。
  </TEXT> 

   <TEXT>
    第<SPACE></SPACE><REF NAME="chap:data"></REF>章介绍了序对，作为合成复合数据的通用<QUOTE>粘合剂</QUOTE>。我们在本节开始时定义了序对的基本修改器，以便序对可以作为构建可变数据对象的构建块。这些修改器大大增强了序对的表示能力，使我们能够构建除<REF NAME="sec:hierarchical-data"></REF>节中处理的序列和树之外的数据结构。我们还展示了一些模拟的例子，其中复杂系统被建模为具有局部状态的对象集合。
  </TEXT> 

  <!--  Subsection 1 : Mutable List Structure  -->
  &amp;subsection3.3.1;

  <!--  Subsection 2 : Representing Queues  -->
  &amp;subsection3.3.2;

  <!--  Subsection 3 : Representing Tables  -->
  &amp;subsection3.3.3;
  
  <!--  Subsection 4 : A Simulator for Digital Circuits  -->
  &amp;subsection3.3.4;

  <!--  Subsection 5 : Propagation of Constraints  -->
  &amp;subsection3.3.5;

</SECTION>
