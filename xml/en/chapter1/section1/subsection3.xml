<SUBSECTION>
  <LABEL NAME="sec:evaluating-combinations"/>
  <SPLIT>
    <SCHEME>
      <INDEX>combination<SUBINDEX>evaluation of</SUBINDEX><OPEN/></INDEX>
      <INDEX>evaluation<SUBINDEX>of a combination</SUBINDEX><OPEN/></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>operator combination<SUBINDEX>evaluation of</SUBINDEX><OPEN/></INDEX>
      <INDEX>evaluation<SUBINDEX>of operator combination</SUBINDEX><OPEN/></INDEX>
    </JAVASCRIPT>
  </SPLIT>
  <NAME>
    Evaluating
    <SPLITINLINE>
      <SCHEME>Combinations</SCHEME>
      <JAVASCRIPT>Operator Combinations</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LONG_PAGE lines="1"/>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
    <SPLITINLINE>
      <JAVASCRIPT>
	operator
      </JAVASCRIPT>
    </SPLITINLINE>
    combinations, the interpreter is itself following a procedure.
    <COMMENT>
      Due to the prominence of the keyword
      <JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>, we are generally replacing
      references to "procedure/procedural" with references to
      "function/functional". The above sentences are an exception; 
      the terms "thinking procedurally" and "procedure" are perhaps still
      adequate for the JavaScript edition here.
    </COMMENT>
    <UL>
      <LI>
      To evaluate
      <SPLITINLINE>
	<SCHEME>
	  a combination,
	</SCHEME>
	<JAVASCRIPT>
	  an operator combination,
	</JAVASCRIPT>
      </SPLITINLINE>
      do the following:
      <OL>
        <LI>Evaluate the
	<SPLITINLINE>
	  <SCHEME>
	    subexpressions
	  </SCHEME>
	  <JAVASCRIPT>
	    operand expressions
	  </JAVASCRIPT>
	</SPLITINLINE>
	of the combination.</LI>
        <LI>
	  <SPLITINLINE>
	    <SCHEME>
	      Apply the
	      procedure
	      that is the value of the leftmost
              subexpression (the operator) to the arguments that are the
	      values of the other subexpressions (the operands).
	    </SCHEME>
	    <JAVASCRIPT>
	      Apply the function that is denoted by
              the operator to the arguments that are the values of
              the operands.
	    </JAVASCRIPT>
	  </SPLITINLINE>
        </LI>
      </OL>
      </LI>
    </UL>
    <COMMENT>
      The Scheme version does not distinguish between operator and
      application combinations. However, due to the infix notation,
      the JavaScript version needs to describe slightly different
      rules for those two. This section contains the rule for operator
      combination, and section 1.1.5 introduces a new rule for function
      application.
    </COMMENT>
    Even this simple rule illustrates some important points about
    processes in general. First, observe that the first step dictates
    that in order to accomplish the evaluation process for a
    combination we must first perform the evaluation process on each
    operand of the combination. Thus, the evaluation rule is
    <INDEX>recursion</INDEX>
    <EM>recursive</EM> in nature;
    that is, it includes, as one of its steps, the need to invoke the rule
    itself.<SPLITINLINE><SCHEME><FOOTNOTE>It may seem strange that the evaluation
    rule says, as part of the first step, that we should evaluate the leftmost
    element of a combination, since at this point that can only be an operator
    such as <SCHEMEINLINE>+</SCHEMEINLINE> or <SCHEMEINLINE>*</SCHEMEINLINE>
    representing a built-in primitive procedure such as addition or
    multiplication.  We will see later that it is useful to be able to work with
    combinations whose operators are themselves compound expressions.
  </FOOTNOTE></SCHEME></SPLITINLINE>
  </TEXT>
  <TEXT>
    Notice how succinctly the idea of recursion can be used to express
    <INDEX>recursion<SUBINDEX>expressing complicated process</SUBINDEX></INDEX>
    what, in the case of a deeply nested combination, would otherwise be
    viewed as a rather complicated process.  For example, evaluating
    <SNIPPET>
      <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
      </JAVASCRIPT>
    </SNIPPET>
    requires that the evaluation rule be applied to four different
    combinations.  We can obtain a picture of this process by
    representing the combination in the form of a
    <INDEX>operator combination<SUBINDEX><ORDER>tree</ORDER>as a tree</SUBINDEX></INDEX>
    <INDEX>tree<SUBINDEX>combination viewed as</SUBINDEX></INDEX>
    tree, as shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:tree-comb_scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:tree-comb"/>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Each combination is represented by a
    <INDEX>node of a tree</INDEX>
    node with
    <INDEX>branch of a tree</INDEX>
    branches corresponding to the operator and the
    operands of the combination stemming from it.
    The
    <INDEX>terminal node of a tree</INDEX>
    terminal nodes (that is, nodes with
    no branches stemming from them) represent either operators or numbers.
    Viewing evaluation in terms of the tree, we can imagine that the
    values of the operands percolate upward, starting from the terminal
    nodes and then combining at higher and higher levels.  In general, we
    shall see that recursion is a very powerful technique for dealing with
    hierarchical, treelike objects.  In fact, the <QUOTE>percolate values
    upward</QUOTE> form of the evaluation rule is an example of a general kind
    of process known as
    <INDEX>tree accumulation</INDEX>
    <EM>tree accumulation</EM>.

    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch1-Z-G-1.svg">
          <LABEL NAME="fig:tree-comb_scheme"/>
          <CAPTION>Tree representation, showing the value of each subcombination.
          </CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch1-Z-G-1.svg"></FIGURE>
          <LABEL NAME="fig:tree-comb"/>
          <CAPTION>Tree representation, showing the value of each subexpression.
          </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>


  <TEXT>
    Next, observe that the repeated application of the first step brings
    us to the point where we need to evaluate, not combinations, but
    primitive expressions such as 
    <SPLITINLINE>
      <SCHEME>
	numerals, built-in operators, or other names.  
      </SCHEME>
      <JAVASCRIPT>
	numerals or names.  
      </JAVASCRIPT>
    </SPLITINLINE>
    We take care of the primitive cases 
    <INDEX>primitive expression<SUBINDEX>evaluation of</SUBINDEX></INDEX>
    <INDEX>evaluation<SUBINDEX>of primitive expression</SUBINDEX></INDEX>
    by stipulating that
    <UL>
      <LI>
        the values of numerals are the numbers that they name,
	<SPLITINLINE><JAVASCRIPT>and</JAVASCRIPT></SPLITINLINE>
      </LI>
      <SPLITINLINE>
	<SCHEME>
          <LI>
            the values of built-in operators are the machine
            instruction sequences that carry out the corresponding operations,
	    and
          </LI>
	</SCHEME>
      </SPLITINLINE>
      <COMMENT>
	Operators are not values in JavaScript, so this item does not apply
	in the JavaScript version.
      </COMMENT>
      <LI>
        the values of
	<SPLITINLINE>
	  <SCHEME>
	    other
	  </SCHEME>
	</SPLITINLINE>
	names are the objects associated
        with those names in the environment.
      </LI>
    </UL>
    <SPLITINLINE>
      <SCHEME>
        We may regard the second rule as a special case of the third one by
        stipulating that symbols such as <SCHEMEINLINE>+</SCHEMEINLINE>
        and <SCHEMEINLINE>*</SCHEMEINLINE> are also included
        in the global environment, and are associated with the sequences of
        machine instructions that are their <QUOTE>values.</QUOTE>
      </SCHEME>
    </SPLITINLINE>
    The key point to
    notice is the role of the
    <INDEX>environment<SUBINDEX><ORDER>context</ORDER>as context for evaluation</SUBINDEX></INDEX>
    environment in determining the meaning of
    the
    <SPLITINLINE>
      <SCHEME>
	symbols
      </SCHEME>
      <JAVASCRIPT>
	names
      </JAVASCRIPT>
    </SPLITINLINE>
    in expressions.  In an interactive language such as
    <SPLITINLINE>
      <SCHEME>
	Lisp,
      </SCHEME>
      <JAVASCRIPT>
	JavaScript,
      </JAVASCRIPT>
    </SPLITINLINE>
    it is meaningless to speak of the value of an expression such as
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(+ x 1)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    without specifying any information about the environment
    that would provide a meaning for the
    <SPLITINLINE>
      <SCHEME>
	symbol <SCHEMEINLINE>x</SCHEMEINLINE> (or even for the
        symbol <SCHEMEINLINE>+</SCHEMEINLINE>).
      </SCHEME>
      <JAVASCRIPT>
	name <SCHEMEINLINE>x</SCHEMEINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    As we shall see in chapter 3, the general notion of
    the environment as providing a context in which evaluation takes place
    will play an important role in our understanding of program execution.
    <SPLITINLINE>
      <SCHEME>
	<INDEX>combination<SUBINDEX>evaluation of</SUBINDEX><CLOSE/></INDEX>
	<INDEX>evaluation<SUBINDEX>of a combination</SUBINDEX><CLOSE/></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>operator combination<SUBINDEX>evaluation of</SUBINDEX><CLOSE/></INDEX>
	<INDEX>evaluation<SUBINDEX>of operator combination</SUBINDEX><CLOSE/></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    Notice that the
    evaluation rule given above does not handle
    <SPLITINLINE>
      <SCHEME>
	<INDEX><USE>define</USE><SUBINDEX>why a special form</SUBINDEX></INDEX>
	definitions.
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>constant declaration<SUBINDEX>why a syntactic form</SUBINDEX></INDEX>
	declarations.
      </JAVASCRIPT>
    </SPLITINLINE>
    For instance, evaluating
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(define x 3)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    does not apply
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	an equality operator <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to two arguments, one
    of which is the value of the
    <SPLITINLINE>
      <SCHEME>
	symbol
      </SCHEME>
      <JAVASCRIPT>
	name
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>x</SCHEMEINLINE> and the other of which is
    3, since the purpose of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>define</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	declaration
      </JAVASCRIPT>
    </SPLITINLINE>
    is precisely to associate
    <SCHEMEINLINE>x</SCHEMEINLINE> with a value.
    (That is,
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(define x 3)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is not
    a combination.)
  </TEXT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        Such exceptions to the general evaluation rule are called
        <INDEX>special form</INDEX>
	<EM>special forms</EM>.
        <SCHEMEINLINE>Define</SCHEMEINLINE>
        is the only example of a special form that we
        have seen so far, but we will meet others shortly.
        <INDEX>evaluation<SUBINDEX>of special forms</SUBINDEX></INDEX>
        Each special form
        has its own evaluation rule. The various kinds of expressions (each
        with its associated evaluation rule) constitute the
        <INDEX>syntax<SUBINDEX><ORDER>programming</ORDER>of a programming language</SUBINDEX></INDEX>
        syntax of the
        programming language.  In comparison with most other programming
        languages, Lisp has a very simple syntax; that is, the evaluation rule
        for expressions can be described by a simple general rule together
        with specialized rules for a small number of special
        forms.<FOOTNOTE>
        Special syntactic forms that are simply convenient
        alternative surface structures for things that can be written in more
        uniform ways are sometimes called <EM>syntactic sugar</EM>, to use a
        <INDEX>Perlis, Alan J.<SUBINDEX>quips</SUBINDEX></INDEX>
        <INDEX>Landin, Peter</INDEX>
        <INDEX>syntactic sugar</INDEX>
        <INDEX>semicolon</INDEX>
        <INDEX>cancer of the semicolon</INDEX>
        <INDEX>Pascal</INDEX>
        <INDEX>Lisp<SUBINDEX>Pascal vs.</SUBINDEX></INDEX>
        phrase coined by Peter Landin.  In comparison with users of other
        languages, Lisp programmers, as a rule, are less concerned with
        matters of syntax.  (By contrast, examine any Pascal manual and notice
        how much of it is devoted to descriptions of syntax.)  This disdain
        for syntax is due partly to the flexibility of Lisp, which makes it
        easy to change surface syntax, and partly to the observation that many
        <QUOTE>convenient</QUOTE> syntactic constructs, which make the language
	less uniform, end up causing more trouble than they are worth when
	programs become large and complex.  In the words of Alan Perlis,
	<QUOTE>Syntactic sugar causes cancer of the semicolon.</QUOTE></FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
        <TEXT>
	  <PDF_ONLY>
            The letters in <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> are 
            rendered in bold to indicate that it
	  </PDF_ONLY>
	  <WEB_ONLY>
            The word <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>
	  </WEB_ONLY>
	  is a
	  <INDEX>keyword</INDEX>
	  <EM>keyword</EM> in JavaScript. Keywords carry a
	  particular meaning, and thus cannot be used as names. A keyword or a
	  combination of keywords in a statement instructs the JavaScript
	  interpreter to treat the statement in a special way. Each such 
	  <INDEX>syntactic form</INDEX>
          <EM>syntactic form</EM> has its own evaluation rule. The
	  various kinds of statements and expressions (each with its associated
	  evaluation rule) constitute the
          <INDEX>syntax<SUBINDEX><ORDER>programming</ORDER>of a programming language</SUBINDEX></INDEX>
          syntax of the programming language.
        </TEXT>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
</SUBSECTION>
