[{"id":"/sicpjs/3.1","tag":"TITLE","body":"3.1  Assignment and Local State"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n      We ordinarily view the world as populated by independent objects, each\n      of which has a state that changes over time.  An object is said to\n      \"","tag":"#text"},{"body":"have state","tag":"#text"},{"body":"\" if its behavior is influenced by its history.\n      A bank account, for example, has state in that the answer to the question\n      \"","tag":"#text"},{"body":"Can I withdraw $100?","tag":"#text"},{"body":"\"  depends upon the history of\n      deposit and withdrawal transactions.  We can characterize an\n      object's state by one or more \n      ","tag":"#text"},{"tag":"EM","child":[{"body":"state variables","tag":"#text"}]},{"body":", which among them maintain enough\n      information about history to determine the object's current behavior.\n      In a simple banking system, we could characterize the state of an\n      account by a current balance rather than by remembering the entire\n      history of account transactions.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n      In a system composed of many objects, the objects are rarely\n      completely independent.  Each may influence the states of others\n      through interactions, which serve to couple the state variables of one\n      object to those of other objects.  Indeed, the view that a system is\n      composed of separate objects is most useful when the state variables\n      of the system can be grouped into closely coupled subsystems that are\n      only loosely coupled to other subsystems.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n      This view of a system can be a powerful framework for organizing\n      computational models of the system.  For such a model to be modular,\n      it should be decomposed into computational objects that model the\n      actual objects in the system.  Each computational object must have its\n      own ","tag":"#text"},{"tag":"EM","child":[{"body":"local state variables","tag":"#text"}]},{"body":" describing the actual object's\n      state. Since the states of objects in the system being modeled change over\n      time, the state variables of the corresponding computational objects\n      must also change.  If we choose to model the flow of time in the\n      system by the elapsed time in the computer, then we must have a way to\n      construct computational objects whose behaviors change as our programs\n      run.  In particular, if we wish to model state variables by ordinary\n      symbolic names in the programming language, then the language must\n      provide an \n      ","tag":"#text"},{"tag":"EM","child":[{"body":"assignment operation","tag":"#text"}]},{"body":"\n      to enable us to change the value\n      associated with a name.\n    ","tag":"#text"}]}]