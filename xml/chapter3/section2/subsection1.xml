<SUBSECTION> 
  <NAME>
    The Rules for Evaluation
  </NAME>

  <LABEL NAME="sec:env-model-rules"/>
  <INDEX>environment model of evaluation<SUBINDEX>rules for evaluation<OPEN/></SUBINDEX></INDEX>

  <LONG_PAGE lines="2"/>
  <TEXT>
    The overall specification of how the interpreter
    <INDEX>function application<SUBINDEX>environment model of</SUBINDEX></INDEX>
    <INDEX>environment model of evaluation<SUBINDEX>function application</SUBINDEX></INDEX>
    evaluates a
    <SPLITINLINE>
      <SCHEME>
	combination
      </SCHEME>
      <PYTHON>
	function application
      </PYTHON>
    </SPLITINLINE>
    remains the same as when we first introduced it in
    section<SPACE/><REF NAME="sec:compound-procedures"/>:
    <UL>
      <LI>
        To evaluate
	<SPLITINLINE>
	  <SCHEME>
	    a combination:
	  </SCHEME>
	  <PYTHON>
	    an application:
	  </PYTHON>
	</SPLITINLINE>
        <OL>
	  <LI>
	    Evaluate the subexpressions
	    of the
	    <SPLITINLINE>
	      <SCHEME>
		combination.<FOOTNOTE>Assignment introduces a subtlety into step
		1 of the evaluation rule.  As shown in
		exercise<SPACE/><REF NAME="ex:order-of-evaluation"/>, the
		presence of assignment allows us to write expressions that will
		produce different values depending on the
		<INDEX>order of evaluation<SUBINDEX>implementation-dependent</SUBINDEX></INDEX>
		<INDEX>implementation dependencies<SUBINDEX>order of subexpression evaluation</SUBINDEX></INDEX>
		order in which the subexpressions in a combination
		are evaluated. Thus, to be precise, we should specify an
		evaluation order in step 1 (e.g., left to right or right to
		left). However, this order should always be considered to be an
		implementation detail, and one should never write programs that
		depend on some particular order. For instance, a sophisticated
		compiler might optimize a program by varying the order in which
		subexpressions are evaluated. The ECMAScript standard specifies
		evaluation of subexpressions from left to right.</FOOTNOTE>
	      </SCHEME>
	      <PYTHON>
		application.<FOOTNOTE>Assignment introduces a subtlety
		into step 1 of the evaluation rule.  As shown in
		exercise<SPACE/><REF NAME="ex:order-of-evaluation"/>, the
		presence of assignment allows us to write expressions that will
		produce different values depending on the order in which the
		subexpressions in a combination
		are evaluated. To eliminate such ambiguities,
		<INDEX>order of evaluation<SUBINDEX><ORDER>JavaScript</ORDER>in JavaScript</SUBINDEX></INDEX>
		JavaScript specifies left-to-right evaluation of the
		subexpressions of combinations and of the argument expressions
		of applications.</FOOTNOTE>
	      </PYTHON>
	    </SPLITINLINE>
	  </LI>
          <LI>
	    Apply the value of the
	    <SPLITINLINE>
	      <SCHEME>
		operator
	      </SCHEME>
	      <PYTHON>
		function
	      </PYTHON>
	    </SPLITINLINE>
	    subexpression
	    to the values of the
	    <SPLITINLINE>
	      <SCHEME>
		operand
	      </SCHEME>
	      <PYTHON>
		argument
	      </PYTHON>
	    </SPLITINLINE>
	    subexpressions.
	  </LI>
        </OL>
      </LI>
    </UL>
    The environment model of evaluation replaces the substitution model in
    specifying what it means to apply a compound
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    to arguments.
  </TEXT>

  <TEXT>
    In the environment model of evaluation, a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is always a pair consisting of some code and a pointer to an environment. 
    <SPLITINLINE>
      <SCHEME>Procedures</SCHEME>
      <PYTHON>Functions</PYTHON>
    </SPLITINLINE>
    are created in one way only: by evaluating a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <PYTHON>lambda</PYTHON>
    </SPLITINLINE>	
    expression.
    <INDEX><FUNCTION/><SUBINDEX>creating with <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><PYTHON>lambda expression</PYTHON></SPLITINLINE></SUBINDEX></INDEX>
    This produces a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    whose code is obtained from the text of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <PYTHON>lambda</PYTHON>
    </SPLITINLINE>	
    expression and whose environment is the environment in which the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <PYTHON>lambda</PYTHON>
    </SPLITINLINE>	
    expression was evaluated to produce the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>function.</PYTHON>
    </SPLITINLINE>
    For example, consider the
    <SPLITINLINE>
      <SCHEME>procedure definition</SCHEME>
      <PYTHON>function declaration</PYTHON>
    </SPLITINLINE>
    <INDEX><USE>square</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<OPEN/></SUBINDEX></INDEX>
    <SNIPPET EVAL="yes">
      <EXAMPLE>square_example</EXAMPLE>
      <EXPECTED>196</EXPECTED>
      <SCHEME>
(define (square x)
  (* x x))
      </SCHEME>
      <PYTHON>
function square(x) {
    return x * x;
}
      </PYTHON>
    </SNIPPET>
    evaluated in the
    <SPLITINLINE>
      <SCHEME>
	global
      </SCHEME>
      <PYTHON>
	program
      </PYTHON>
    </SPLITINLINE>
    environment.  The
    <SPLITINLINE>
      <SCHEME>procedure definition</SCHEME>
      <PYTHON>function declaration</PYTHON>
    </SPLITINLINE>
    syntax is
    <SPLITINLINE>
      <SCHEME>just syntactic sugar for</SCHEME>
      <PYTHON>
	equivalent to
      </PYTHON>
    </SPLITINLINE>
    an underlying implicit
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <PYTHON>lambda</PYTHON>
    </SPLITINLINE>
    expression.  It would have been equivalent to have used<FOOTNOTE>
	Footnote<SPACE/><REF NAME="foot:function-decl-vs-lambda"/> in chapter 1
	mentions subtle differences between the two in full JavaScript, which
	we will ignore in this book.</FOOTNOTE>
    <SNIPPET EVAL="yes">
      <EXAMPLE>square_example</EXAMPLE>
      <EXPECTED>196</EXPECTED>
      <SCHEME>
(define square
  (lambda (x) (* x x)))
      </SCHEME>
      <PYTHON>
const square = x =&gt; x * x;
      </PYTHON>
    </SNIPPET>
    which evaluates
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(lambda (x) (* x x))</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>x =&gt; x * x</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    and binds <SCHEMEINLINE>square</SCHEMEINLINE> to the resulting value, all
    in the
    <SPLITINLINE>
      <SCHEME>
	global
      </SCHEME>
      <PYTHON>
	program
      </PYTHON>
    </SPLITINLINE>
    environment.
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:evaluating-square_scheme"/>
      </SCHEME>
      <PYTHON>
	Figure<SPACE/><REF NAME="fig:evaluating-square"/>
      </PYTHON>
    </SPLITINLINE>
    shows the result of evaluating this
    <INDEX>declaration<SUBINDEX>environment model of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE> expression.</SCHEME>
      <PYTHON>declaration statement.</PYTHON>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
      </SCHEME>
      <PYTHON>
	The global environment encloses the program environment. To reduce
	clutter, after this figure we will not display the global environment
	(as it is always the same), but we are reminded of its existence by the
	pointer from the program environment upward. 
      </PYTHON>
    </SPLIT>
    The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object is a pair whose code specifies that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    has one
    <SPLITINLINE><SCHEME>formal</SCHEME></SPLITINLINE>
    parameter, namely <SCHEMEINLINE>x</SCHEMEINLINE>, and a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    body
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>return x * x;</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    The environment part of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is a pointer to the program environment, since that is the environment in
    which the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <PYTHON>lambda</PYTHON>
    </SPLITINLINE>
    expression was evaluated to produce the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>function.</PYTHON>
    </SPLITINLINE>
    A<SPACE/>new binding, which associates the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object with the
    <SPLITINLINE>
      <SCHEME>
	symbol
      </SCHEME>
      <PYTHON>
	name
      </PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>square</SCHEMEINLINE>, has been added
    to the program frame. 
    <SPLIT>
      <SCHEME>
        In general, <SCHEMEINLINE>define</SCHEMEINLINE> creates definitions by
	adding bindings to frames.
      </SCHEME>
      <PYTHON>
      </PYTHON>
    </SPLIT>

    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-3.svg"  split_scale="0.75"></FIGURE>
          <LABEL NAME="fig:evaluating-square_scheme"/>
          <CAPTION>
	    Environment structure produced by evaluating
	  <SCHEMEINLINE>(define (square x) (* x x))</SCHEMEINLINE> in the global
	  environment.
	  </CAPTION>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-3.svg" split_scale="0.75" web_scale="0.5"></FIGURE>
          <LABEL NAME="fig:evaluating-square"/>
          <CAPTION>
	    Environment structure produced by evaluating
	    <PYTHONINLINE>function square(x) { return x * x; }</PYTHONINLINE>
	    in the program environment.
	  </CAPTION>
        </FIGURE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <SPLIT>
    <SCHEME>
    </SCHEME>
    <PYTHON>
      <TEXT>
	In general, <PYTHONINLINE>const</PYTHONINLINE>,
	<PYTHONINLINE>function</PYTHONINLINE>, and
	<PYTHONINLINE>let</PYTHONINLINE>
	add bindings to frames.
	Assignment is forbidden on constants, so our environment model
	needs to distinguish names that refer to constants
	from names that refer to variables. We indicate that
	a name is a constant by writing an equal sign after the colon
	that follows the name.
	We consider function declarations as equivalent to constant
	declarations;<FOOTNOTE>We mentioned in
	footnote<SPACE/><REF NAME="foot:function-decl-vs-lambda"/>
	in chapter 1
	that the full JavaScript language allows assignment to
	names that are declared with function declarations.</FOOTNOTE>
	observe the equal signs after the colons in
	figure<SPACE/><REF NAME="fig:evaluating-square"/>.
      </TEXT>
    </PYTHON>
  </SPLIT>
  <TEXT>
    Now that we have seen how
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are created, we can describe how
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are applied.  The environment model specifies: To apply a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    to arguments, create a new environment containing a frame that binds the
    parameters to the values of the arguments.  The enclosing environment of
    this frame is the environment specified by the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
    <PYTHON>function.</PYTHON></SPLITINLINE>
    Now, within this new environment, evaluate the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    body.
  </TEXT>

  <TEXT>
    To show how this rule is followed,
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:square5-eval_scheme"/>
      </SCHEME>
      <PYTHON>
	figure<SPACE/><REF NAME="fig:square5-eval"/>
      </PYTHON>
    </SPLITINLINE>
    illustrates the environment structure created by evaluating the
    expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(square 5)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>square(5)</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    in the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment, where <SCHEMEINLINE>square</SCHEMEINLINE> is the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    generated in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:evaluating-square_scheme"/>.
      </SCHEME>
      <PYTHON>
	figure<SPACE/><REF NAME="fig:evaluating-square"/>.
      </PYTHON>
    </SPLITINLINE>
    Applying the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    results in the creation of a new environment, labeled E1 in the figure, that
    begins with a frame in which <SCHEMEINLINE>x</SCHEMEINLINE>, the
    <SPLITINLINE>
      <SCHEME>formal</SCHEME>
    </SPLITINLINE>
    parameter for the
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <PYTHON>function,</PYTHON>
    </SPLITINLINE>
    is bound to the argument 5.
    <SPLITINLINE>
      <PYTHON>
	Note that name <SCHEMEINLINE>x</SCHEMEINLINE> in environment E1 is
	followed by a colon with no equal sign, which indicates
	that the parameter <SCHEMEINLINE>x</SCHEMEINLINE> is treated as a
	variable.<FOOTNOTE>This example does not make use of the fact that
	the parameter <SCHEMEINLINE>x</SCHEMEINLINE> is a variable, but recall the
	function <PYTHONINLINE>make_withdraw</PYTHONINLINE> in
	section<SPACE/><REF NAME="sec:local-state-variables"/>, which relied on
	its parameter being a variable.
	</FOOTNOTE>
      </PYTHON>
    </SPLITINLINE>
    The pointer leading upward from this frame shows that the
    frame<APOS/>s enclosing environment is the
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment.  The
    <SPLITINLINE>
      <SCHEME>global</SCHEME>
      <PYTHON>program</PYTHON>
    </SPLITINLINE>
    environment is chosen here, because this is the environment that is
    indicated as part of the <SCHEMEINLINE>square</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    object.  Within E1, we evaluate the body of the
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <PYTHON>function,</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>return x * x;</PYTHONINLINE>.
      </PYTHON>
    </SPLITINLINE>
    Since the value of <SCHEMEINLINE>x</SCHEMEINLINE> in E1 is 5, the result is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(*<SPACE/>5<SPACE/>5)</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>5 * 5</PYTHONINLINE>,</PYTHON>
    </SPLITINLINE>
    or<SPACE/>25.
    <INDEX><USE>square</USE><SUBINDEX><ORDER>environment</ORDER>in environment model<CLOSE/></SUBINDEX></INDEX>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE src="img_original/ch3-Z-G-4.svg"></FIGURE>
          <LABEL NAME="fig:square5-eval_scheme"/>
          <CAPTION>
	    Environment created by evaluating
	    <SCHEMEINLINE>(square 5)</SCHEMEINLINE> in the global environment.
	  </CAPTION>
        </FIGURE>
      </SCHEME>
      <PYTHON>
        <FIGURE>
          <FIGURE src="img_javascript/ch3-Z-G-4.svg"></FIGURE>
          <LABEL NAME="fig:square5-eval"/>
          <CAPTION>
	    Environment created by evaluating
	    <PYTHONINLINE>square(5)</PYTHONINLINE>
	    in the program environment.
	  </CAPTION>
        </FIGURE>
      </PYTHON>
    </SPLIT>
  </TEXT>

  <TEXT>
    The environment model of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    application can be summarized by two
    rules:
    <UL>
      <LI>
	A
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	object is applied to a set of arguments by constructing a frame, 
	<SPLITINLINE>
	  <SCHEME>binding the formal parameters of the procedure</SCHEME>
	  <PYTHON>binding the parameters of the function</PYTHON>
	</SPLITINLINE>
	to the arguments of the call, and then evaluating the body of the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	in the context of the new environment constructed.  The new frame has as
	its enclosing environment the environment part of the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	object being applied.
	The result of the application is the result of evaluating
	the return expression of the first return statement encountered
	while evaluating the function body.
      </LI>
      <LI>
	A
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	is created by evaluating a 
	<INDEX><FUNCTION/><SUBINDEX>creating with <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><PYTHON>lambda expression</PYTHON></SPLITINLINE></SUBINDEX></INDEX>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <PYTHON>lambda</PYTHON>
	</SPLITINLINE>
	expression relative to a given environment.  The resulting
	<INDEX>lambda expression<SUBINDEX>value of</SUBINDEX></INDEX>
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	object is a pair consisting of the text of the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <PYTHON>lambda</PYTHON>
	</SPLITINLINE>
	expression and a pointer to the environment in which the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
	was created.
      </LI>
    </UL>
  </TEXT>

  <TEXT>
    <SPLIT>
      <SCHEME>
	<INDEX>define<SUBINDEX>environment model of</SUBINDEX></INDEX>
	We also specify that defining a symbol using
	<SCHEMEINLINE>define</SCHEMEINLINE>
	creates a binding in the current environment frame and assigns to the symbol
	the indicated value.
      </SCHEME>
      <PYTHON>
	<COMMENT>
	  We leave this out of the JavaScript version,
	  because it is discussed in more detail
	  in section<SPACE/><REF NAME="sec:env-internal-def"/>.
	</COMMENT>
      </PYTHON>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	Evaluating the expression
	<SCHEMEINLINE>(set! </SCHEMEINLINE>
	<LATEXINLINE>variable value</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>
	in some environment locates the binding of the variable in the
	environment. For this, one finds the first frame in the environment that
	contains a binding for the variable and modifies that frame. If the
	variable is unbound in the environment, then
	<SCHEMEINLINE>set!</SCHEMEINLINE> signals an error.
      </SCHEME>
      <PYTHON>
	<INDEX>assignment<SUBINDEX>evaluation of</SUBINDEX></INDEX>
	Finally, we specify the behavior of assignment, the operation that
	forced us to introduce the environment model in the first place.
	Evaluating the expression
	<META>name</META><SPACE/><PYTHONINLINE>=</PYTHONINLINE><SPACE/><META>value</META>
	in some environment
	locates the binding of the name in the environment.
	That is, one finds the first frame in the environment that contains a
	binding for the name.
	If the binding is a variable binding<EMDASH/>indicated in the frame by
	just <PYTHONINLINE>:</PYTHONINLINE>
	after the name<EMDASH/>that binding is changed to reflect the new
	value of the variable. 
	Otherwise, if the binding in the frame is a constant
	binding<EMDASH/>indicated
	in the frame by <PYTHONINLINE>:=</PYTHONINLINE>
	after the name<EMDASH/>the assignment signals an
	<PYTHONINLINE>"assignment to constant"</PYTHONINLINE> error.
	If the name is unbound in the environment, then
	the assignment signals a
	<PYTHONINLINE>"variable undeclared"</PYTHONINLINE> error.
      </PYTHON>
    </SPLIT>
  </TEXT>

  <TEXT>
    These evaluation rules, though considerably more complex than the
    substitution model, are still reasonably straightforward.  Moreover,
    the evaluation model, though abstract, provides a correct description
    of how the interpreter evaluates expressions.  In chapter<SPACE/><REF NAME="chap:meta"></REF> we shall
    see how this model can serve as a blueprint for implementing a working
    interpreter.  The following sections elaborate the details of the
    model by analyzing some illustrative programs.
    <INDEX>environment model of evaluation<SUBINDEX>rules for evaluation<CLOSE/></SUBINDEX></INDEX>
  </TEXT>
</SUBSECTION>
