<SUBSECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Procedures</SCHEME>
    <JAVASCRIPT>Functions</JAVASCRIPT></SPLITINLINE>
    as General Methods
  </NAME>

  <LABEL NAME="sec:proc-general-methods"/>
  <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> as general method<OPEN/></SUBINDEX></INDEX>
  <INDEX><FUNCTION/><SUBINDEX><ORDER>general</ORDER>as general method<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    We introduced compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in section<SPACE/><REF NAME="sec:compound-procedures"/> as a mechanism for
    abstracting patterns of numerical operations so as to make them independent
    of the particular numbers involved.  With higher-order
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    such as
    the <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:procedures-as-parameters"/>, we began to
    see a more powerful kind of abstraction:
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    used to express general methods of computation, independent of the
    particular functions involved.  In this section we discuss two more elaborate
    examples<EMDASH/>general methods for finding zeros and fixed points of
    functions<EMDASH/>and show how these methods can be expressed directly as
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <SUBHEADING>
    <NAME>Finding roots of equations by the half-interval method</NAME>
  </SUBHEADING>

  <TEXT>
    The
    <INDEX>half-interval method<OPEN/></INDEX>
    <EM>half-interval method</EM> is a simple but powerful technique for
    finding roots of an equation <LATEXINLINE>$f(x)=0$</LATEXINLINE>, where
    <LATEXINLINE>$f$</LATEXINLINE> is a continuous function.  The idea is that,
    if we are given points <LATEXINLINE>$a$</LATEXINLINE> and
    <LATEXINLINE>$b$</LATEXINLINE> such that
    <LATEXINLINE>$f(a) &lt; 0 &lt; f(b)$</LATEXINLINE>, then
    <LATEXINLINE>$f$</LATEXINLINE> must have at least one zero between
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE>. To locate
    a zero, let <LATEXINLINE>$x$</LATEXINLINE> be the average of
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE> and
    compute <LATEXINLINE>$f(x)$</LATEXINLINE>.  If
    <LATEXINLINE>$f(x) &gt; 0$</LATEXINLINE>, then
    <LATEXINLINE>$f$</LATEXINLINE> must have a zero between
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$x$</LATEXINLINE>. If
    <LATEXINLINE>$f(x) &lt; 0$</LATEXINLINE>, then
    <LATEXINLINE>$f$</LATEXINLINE> must have a zero between
    <LATEXINLINE>$x$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE>.
    Continuing in this way, we can identify smaller and smaller intervals on
    which <LATEXINLINE>$f$</LATEXINLINE> must have a zero.  When we reach a
    point where the interval is small enough, the process stops.  Since the
    interval of uncertainty is reduced by half at each step of the process, the
    maximal number of steps required grows as
    <LATEXINLINE>$\Theta(\log( L/T))$</LATEXINLINE>, where
    <LATEXINLINE>$L$</LATEXINLINE> is the length of the original interval and
    <LATEXINLINE>$T$</LATEXINLINE> is the error tolerance (that is, the size of
    the interval we will consider <QUOTE>small enough</QUOTE>).
    Here is a
    <SPLITINLINE>
      <SCHEME>procedure that implements this strategy:</SCHEME>
      <JAVASCRIPT>function that implements this strategy:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="67" HIDE="yes">
      <NAME>positive_negative_definition</NAME>
      <SCHEME>
;; positive? and negative? are predefined in Scheme
      </SCHEME>
      <JAVASCRIPT>
function positive(x) { return x &gt; 0; }
function negative(x) { return x &lt; 0; }
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="67">
      <INDEX><DECLARATION>search</DECLARATION></INDEX>
      <NAME>search_definition</NAME>
      <REQUIRES>average_definition</REQUIRES>
      <REQUIRES>positive_negative_definition</REQUIRES>
      <REQUIRES>close_enough_definition</REQUIRES>
      <EXAMPLE>search_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
        midpoint
        (let ((test-value (f midpoint)))
          (cond ((positive? test-value)
                 (search f neg-point midpoint))
                ((negative? test-value)
                 (search f midpoint pos-point))
                (else midpoint))))))
      </SCHEME>
      <JAVASCRIPT>
function search(f, neg_point, pos_point) {
    const midpoint = average(neg_point, pos_point);
    if (close_enough(neg_point, pos_point)) {
        return midpoint;
    } else {
        const test_value = f(midpoint);
        return positive(test_value)
               ? search(f, neg_point, midpoint)
               : negative(test_value)
               ? search(f, midpoint, pos_point)
               : midpoint;
    }
}
      </JAVASCRIPT>
    </SNIPPET>


    <SNIPPET PAGE="67" HIDE="yes">
      <NAME>search_example</NAME>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
search(x => x * x - 1, 0, 2);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    We assume that we are initially given the function
    <LATEXINLINE>$f$</LATEXINLINE> together with points at which its values are
    negative and positive.  We first compute the midpoint of the two given
    points.  Next we check to see if the given interval is small enough, and if
    so we simply return the midpoint as our answer.  Otherwise, we compute as a
    test value the value of <LATEXINLINE>$f$</LATEXINLINE> at the midpoint.  If
    the test value is positive, then we continue the process with a new interval
    running from the original negative point to the midpoint.  If the test value
    is negative, we continue with the interval from the midpoint to the positive
    point. Finally, there is the possibility that the test value is<SPACE/>0, in
    which case the midpoint is itself the root we are searching for.

    To test whether the endpoints are <QUOTE>close enough</QUOTE> we can use a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    similar to the one used in section<SPACE/><REF NAME="sec:sqrt"/> for
    computing square roots:<FOOTNOTE>We have used 0.001 as a representative
    <QUOTE>small</QUOTE> number to indicate a tolerance for the acceptable error
    in a calculation. The appropriate tolerance for a real calculation depends
    upon the problem to be solved and the limitations of the computer and the
    algorithm.  This is often
    a very subtle consideration, requiring help from a
    <INDEX>numerical analyst</INDEX>
    numerical analyst or some
    other kind of magician.</FOOTNOTE>
    <SNIPPET PAGE="68">
      <NAME>close_enough_definition</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <EXAMPLE>close_enough_example</EXAMPLE>
      <EXPECTED>false</EXPECTED>
      <SCHEME>
(define (close-enough? x y)
  (&lt; (abs (- x y)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function close_enough(x, y) {
    return abs(x - y) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="68" HIDE="yes">
      <NAME>close_enough_example</NAME>
      <SCHEME>
(close-enough? 7.7654 7.7666)
      </SCHEME>
      <JAVASCRIPT>
close_enough(7.7654, 7.7666);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Search</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function 
	<JAVASCRIPTINLINE>search</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is awkward to use directly, because we can accidentally give it points at
    which <LATEXINLINE>$f$</LATEXINLINE><APOS/>s values do not have the required
    sign, in which case we get a wrong answer. Instead we will use
    <SCHEMEINLINE>search</SCHEMEINLINE> via the following
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which checks to see which of the endpoints has a negative function value and
    which has a positive value, and calls the <SCHEMEINLINE>search</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    accordingly.  If the function has the same sign on the two given points, the
    half-interval method cannot be used, in which case the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    signals an error.<FOOTNOTE>This
    can be accomplished using
    <INDEX><DECLARATION>error</DECLARATION> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><DECLARATION>error</DECLARATION> (\textit{ns})</SUBINDEX></INDEX>
    <SCHEMEINLINE>error</SCHEMEINLINE>,
    <SPLITINLINE>
      <SCHEME>which takes as
      arguments a number of items that are printed as error messages.
      </SCHEME>
      <JAVASCRIPT>
	which takes as
	argument a string that is printed as error message along
	with the number of the program line that gave rise to the call of
      <SCHEMEINLINE>error</SCHEMEINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>

    <SNIPPET PAGE="68">
      <NAME>half_definition</NAME>
      <REQUIRES>search_definition</REQUIRES>
      <EXAMPLE>half_example</EXAMPLE>
      <EXPECTED>3.14111328125</EXPECTED>
      <SCHEME>
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
           (search f a b))
          ((and (negative? b-value) (positive? a-value))
           (search f b a))
          (else
           (error "Values are not of opposite sign" a b)))))
      </SCHEME>
      <JAVASCRIPT>
function half_interval_method(f, a, b) {
    const a_value = f(a);
    const b_value = f(b);
    return negative(a_value) &amp;&amp; positive(b_value)
           ? search(f, a, b)
           : negative(b_value) &amp;&amp; positive(a_value)
           ? search(f, b, a)
           : error("values are not of opposite sign");
}
      </JAVASCRIPT>
    </SNIPPET>

    The following example uses the
    <SPLIT>
      <SCHEME>
	<INDEX>half-interval method<SUBINDEX><ORDER>half</ORDER><SCHEMEINLINE>half-interval-method</SCHEMEINLINE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>half-interval method<SUBINDEX><ORDER>half</ORDER><USE>half_interval_method</USE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLIT>
    <INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>approximation with half-interval method</SUBINDEX></INDEX>
    half-interval method to approximate
    <LATEXINLINE>$\pi$</LATEXINLINE> as the root between 2 and 4 of
    <LATEXINLINE>$\sin\, x = 0$</LATEXINLINE>:

    <SNIPPET PAGE="68">
      <NAME>half_example</NAME>
      <REQUIRES>half_definition</REQUIRES>
      <SCHEME>
(half-interval-method sin 2.0 4.0)
      </SCHEME>
      <JAVASCRIPT>
half_interval_method(math_sin, 2, 4);
      </JAVASCRIPT>
    </SNIPPET>
    Here is another example, using the half-interval method to search for a root
    of the equation <LATEXINLINE>$x^3 - 2x - 3 = 0$</LATEXINLINE> between 1
    and 2:
    <SNIPPET PAGE="68" POSTPADDING="no">
      <NAME>half_example2</NAME>
      <REQUIRES>half_definition</REQUIRES>
      <EXPECTED>1.89306640625</EXPECTED>
      <SCHEME>
(half-interval-method
  (lambda (x) (- (* x x x) (* 2 x) 3))
  1.0
  2.0)
      </SCHEME>
      <JAVASCRIPT>
half_interval_method(x => x * x * x - 2 * x - 3, 1, 2);
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>half-interval method<CLOSE/></INDEX>
  </TEXT>

  <SUBHEADING>
    <NAME>Finding fixed points of functions</NAME>
  </SUBHEADING>

  <TEXT>
    A number <LATEXINLINE>$x$</LATEXINLINE> is called a
    <INDEX>fixed point<OPEN/></INDEX>
    <INDEX>function (mathematical)<SUBINDEX>fixed point of<OPEN/></SUBINDEX></INDEX>
    <EM>fixed point</EM> of a
    function <LATEXINLINE>$f$</LATEXINLINE> if <LATEXINLINE>$x$</LATEXINLINE>
    satisfies the equation <LATEXINLINE>$f(x)=x$</LATEXINLINE>. For some
    functions <LATEXINLINE>$f$</LATEXINLINE> we can locate a fixed point by
    beginning with an initial guess and applying <LATEXINLINE>$f$</LATEXINLINE>
    repeatedly,
    <LATEX>
      \[
      \begin{array}{l}
      f(x), \ f(f(x)), \ f(f(f(x))), \ \ldots
      \end{array}
      \]
    </LATEX>
    until the value does not change very much.  Using this idea, we can devise a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>fixed-point</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that takes as inputs a function and an initial guess and produces an
    approximation to a fixed point of the function.  We apply the function
    repeatedly until we find two successive values whose difference is less
    than some prescribed tolerance:

    <SNIPPET PAGE="69">
      <NAME>fixed_definition</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <EXAMPLE>fixed_example</EXAMPLE>
      <EXPECTED>0.7390822985224023</EXPECTED>
      <SCHEME>
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (&lt; (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
      </SCHEME>
      <JAVASCRIPT>
const tolerance = 0.00001;
function fixed_point(f, first_guess) {
    function close_enough(x, y) {
        return abs(x - y) &lt; tolerance;
    }
    function try_with(guess) {
        const next = f(guess);
        return close_enough(guess, next)
               ? next
               : try_with(next);
    }
    return try_with(first_guess);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    For example, we can use this method to approximate the fixed point of the
    <INDEX>fixed point<SUBINDEX><ORDER>cosine</ORDER>of cosine</SUBINDEX></INDEX>
    <INDEX>cosine<SUBINDEX>fixed point of</SUBINDEX></INDEX>
    <INDEX><DECLARATION>math_cos</DECLARATION> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><DECLARATION>math_cos</DECLARATION><ECMA>Math.cos</ECMA></SUBINDEX></INDEX>
    cosine function, starting with 1 as an initial approximation:<FOOTNOTE>
    <SPLIT>
      <SCHEME>
	Try this during a boring lecture: Set your calculator to
	<INDEX>fixed point<SUBINDEX>computing with calculator</SUBINDEX></INDEX>
	<INDEX>calculator, fixed points with</INDEX>
	<INDEX>lecture, something to do during</INDEX>
	radians mode and then repeatedly press the
	<LATEXINLINE>$\cos$</LATEXINLINE>
	button until you obtain the fixed point.
      </SCHEME>
      <JAVASCRIPT>
	To obtain a 
	<INDEX>fixed point<SUBINDEX>computing with calculator</SUBINDEX></INDEX>
	<INDEX>calculator, fixed points with</INDEX>
	fixed point of cosine on a calculator, 	
	set it to radians mode and then repeatedly press the
	<LATEXINLINE>$\cos$</LATEXINLINE>
	button until the value does not change any longer.
      </JAVASCRIPT>
    </SPLIT>
    </FOOTNOTE>
    <SNIPPET PAGE="69">
      <NAME>fixed_example</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <SCHEME>
(fixed-point cos 1.0)
      </SCHEME>
      <SCHEMEOUTPUT>
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
fixed_point(math_cos, 1);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
0.7390822985224023
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Similarly, we can find a solution to the equation
    <LATEXINLINE>$y=\sin y + \cos y$</LATEXINLINE>:
    <INDEX><DECLARATION>math_sin</DECLARATION> (primitive function)</INDEX>
    <INDEX><PRIMITIVE/><SUBINDEX><DECLARATION>math_sin</DECLARATION><ECMA>Math.sin</ECMA></SUBINDEX></INDEX>
    <SNIPPET PAGE="69">
      <NAME>fixed_example2</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <EXPECTED>1.2587315962971173</EXPECTED>
      <SCHEME>
(fixed-point
  (lambda (y) (+ (sin y) (cos y)))
  1.0)
      </SCHEME>
      <SCHEMEOUTPUT>
1.2587315962971173
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
fixed_point(y => math_sin(y) + math_cos(y), 1);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1.2587315962971173
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    The fixed-point process is reminiscent of the process we used for finding
    square roots in section<SPACE/><REF NAME="sec:sqrt"/>.  Both are based on
    the idea of repeatedly improving a guess until the result satisfies some
    criterion.  In fact, we can readily formulate the
    <INDEX>fixed point<SUBINDEX>square root as</SUBINDEX></INDEX>
    square-root computation as a fixed-point search.  Computing the square root
    of some number <LATEXINLINE>$x$</LATEXINLINE> requires finding a
    <LATEXINLINE>$y$</LATEXINLINE> such that
    <LATEXINLINE>$y^2 = x$</LATEXINLINE>.  Putting this equation into the
    equivalent form <LATEXINLINE>$y = x/y$</LATEXINLINE>, we recognize that we
    are looking for a fixed point of the function<FOOTNOTE>
    <LATEXINLINE>$\mapsto$</LATEXINLINE>
    <INDEX><ORDER>;5</ORDER><LATEXINLINE>$\mapsto$</LATEXINLINE> notation for mathematical function</INDEX>
    <INDEX>function (mathematical)<SUBINDEX><LATEXINLINE>$\mapsto$</LATEXINLINE> notation for</SUBINDEX></INDEX>
    (pronounced <QUOTE>maps to</QUOTE>) is the mathematician<APOS/>s way of
    writing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>lambda expressions.</JAVASCRIPT>
    </SPLITINLINE>
    <LATEXINLINE>$y \mapsto x/y$</LATEXINLINE> means
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(lambda(y) (/ x y))</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>y => x / y</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    that is, the function whose value at <LATEXINLINE>$y$</LATEXINLINE> is
    <LATEXINLINE>$x/y$</LATEXINLINE>.</FOOTNOTE>
    <LATEXINLINE>$y \mapsto x/y$</LATEXINLINE>, and we can therefore try to
    compute square roots as
    <SNIPPET PAGE="69">
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>
      <NAME>sqrt_definition2</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <EXAMPLE>sqrt_example7</EXAMPLE>
      <SCHEME>
(define (sqrt x)
  (fixed-point
    (lambda (y) (/ x y))
    1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return fixed_point(y => x / y, 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_example7</NAME>
      <JAVASCRIPT>
sqrt(5);
      </JAVASCRIPT>
    </SNIPPET>              
    Unfortunately, this fixed-point search does not converge.  Consider an
    initial guess <LATEXINLINE>$y_1$</LATEXINLINE>.  The next guess is
    <LATEXINLINE>$y_2 = x/y_1$</LATEXINLINE> and the next guess is
    <LATEXINLINE>$y_3 = x/y_2 = x/(x/y_1) = y_1$</LATEXINLINE>.  This results
    in an infinite loop in which the two guesses
    <LATEXINLINE>$y_1$</LATEXINLINE> and <LATEXINLINE>$y_2$</LATEXINLINE> repeat
    over and over, oscillating about the answer.
  </TEXT>

  <TEXT>
    One way to control such oscillations is to prevent the guesses from changing
    so much. Since the answer is always between our guess
    <LATEXINLINE>$y$</LATEXINLINE>
    and <LATEXINLINE>$x/y$</LATEXINLINE>, we can make a new guess that is not as
    far from <LATEXINLINE>$y$</LATEXINLINE> as <LATEXINLINE>$x/y$</LATEXINLINE>
    by averaging <LATEXINLINE>$y$</LATEXINLINE> with
    <LATEXINLINE>$x/y$</LATEXINLINE>, so that the next guess after
    <LATEXINLINE>$y$</LATEXINLINE> is
    <LATEXINLINE>$\frac{1}{2}(y+x/y)$</LATEXINLINE> instead of
    <LATEXINLINE>$x/y$</LATEXINLINE>. The process of making such a sequence of
    guesses is simply the process of looking for a fixed point of
    <LATEXINLINE>$y \mapsto \frac{1}{2}(y+x/y)$</LATEXINLINE>:

    <SNIPPET PAGE="70">
      <NAME>sqrt_definition3</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>sqrt_example7</EXAMPLE>
      <EXPECTED>2.236067977499978</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (fixed-point
    (lambda (y) (average y (/ x y)))
    1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return fixed_point(y => average(y, x / y), 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    (Note that <LATEXINLINE>$y=\frac{1}{2}(y+x/y)$</LATEXINLINE> is a simple
    transformation of the equation <LATEXINLINE>$y=x/y$</LATEXINLINE>; to derive
    it, add <LATEXINLINE>$y$</LATEXINLINE> to both sides of the equation and
    divide by<SPACE/>2.)
  </TEXT>

  <TEXT>
    With this modification, the square-root
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    works.  In fact, if we unravel the definitions, we can see that the sequence
    of approximations to the square root generated here is precisely the same as
    the one generated by our original square-root
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:sqrt"/>.  This approach of averaging
    successive approximations to a solution, a technique we call
    <INDEX>average damping</INDEX>
    <EM>average damping</EM>, often aids the convergence of fixed-point searches.
    <INDEX>fixed point<CLOSE/></INDEX>
    <INDEX>function (mathematical)<SUBINDEX>fixed point of<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE>
    Show that the
    <INDEX>golden ratio<SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>
    <INDEX>fixed point<SUBINDEX>golden ratio as</SUBINDEX></INDEX>
    golden ratio <LATEXINLINE>$\phi$</LATEXINLINE>
    (section<SPACE/><REF NAME="sec:tree-recursion"/>) is a fixed point of the
    transformation <LATEXINLINE>$x \mapsto 1 + 1/x$</LATEXINLINE>, and use this
    fact to compute <LATEXINLINE>$\phi$</LATEXINLINE> by means of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>fixed-point</SCHEMEINLINE> procedure.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE> function.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SOLUTION>
      The fixed point of the function is
      <LATEX>\[ 1 + 1 / x = x \]</LATEX>
      Solving for x, we get
      <LATEX>\[ x^2 = x + 1 \]</LATEX>
      <LATEX>\[ x^2 - x - 1 = 0 \]</LATEX>
      Using the quadratic equation to solve for <LATEXINLINE>$x$</LATEXINLINE>,
      we find that one of the roots of this equation is the golden ratio
      <LATEXINLINE>$(1+\sqrt{5})/2$</LATEXINLINE>.
      <SNIPPET>
	<NAME>example_1.37</NAME>
	<REQUIRES>fixed_definition</REQUIRES>
	<JAVASCRIPT>
fixed_point(x => 1 + (1 / x), 1);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Modify
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fixed-point</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    so that it prints the sequence of approximations it generates, using the
    primitive function <SCHEMEINLINE>display</SCHEMEINLINE> shown in
    exercise<SPACE/><REF NAME="ex:search-for-primes"/>. Then find a solution to
    <LATEXINLINE>$x^x = 1000$</LATEXINLINE> by finding a fixed point of
    <LATEXINLINE>$x \mapsto \log(1000)/\log(x)$</LATEXINLINE>.  
    <SPLITINLINE>
      <SCHEME>
	(Use Scheme<APOS/>s primitive <SCHEMEINLINE>log</SCHEMEINLINE> procedure
	which computes natural logarithms.)
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><USE>math_log</USE> (primitive function)</INDEX>
	<INDEX><PRIMITIVE/><SUBINDEX><USE>math_log</USE><ECMA>Math.log</ECMA></SUBINDEX></INDEX>
	(Use the primitive function <JAVASCRIPTINLINE>math_log</JAVASCRIPTINLINE>
        which computes natural logarithms.)
      </JAVASCRIPT>
    </SPLITINLINE>
    Compare the number of steps this takes with and without average damping.
    (Note that you cannot start
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fixed-point</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE> with a guess of 1, as this would cause division by
      <LATEXINLINE>$\log(1)=0$</LATEXINLINE>.)
    <LABEL NAME="ex:log-fixed-point"/>

    <SOLUTION>
      We modify the function <JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE>
      as follows:
      <SNIPPET PAGE="69">
        <NAME>modified_fixed_definition</NAME>
        <REQUIRES>abs_definition</REQUIRES>
        <EXAMPLE>example_1.36_1</EXAMPLE>
        <SCHEME>
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (&lt; (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
        </SCHEME>
        <JAVASCRIPT>
const tolerance = 0.00001;
function fixed_point(f, first_guess) {
    function close_enough(x, y) {
        return abs(x - y) &lt; tolerance;
    }
    function try_with(guess) {
        display(guess);
        const next = f(guess);
        return close_enough(guess, next)
               ? next
               : try_with(next);
    }
    return try_with(first_guess);
}
	</JAVASCRIPT>
      </SNIPPET>
      Here is a version with average dampening built-in:
      <SNIPPET PAGE="69">
        <NAME>modified_fixed_definition_average_dampening</NAME>
        <REQUIRES>abs_definition</REQUIRES>
        <EXAMPLE>example_1.36_2</EXAMPLE>
        <SCHEME>
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (&lt; (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
        </SCHEME>
	<JAVASCRIPT>
function fixed_point_with_average_dampening(f, first_guess) {
    function close_enough(x, y) {
        return abs(x - y) &lt; tolerance;
    }
    function try_with(guess) {
        display(guess);
        const next = (guess + f(guess)) / 2;
        return close_enough(guess, next)
               ? next
               : try_with(next);
    }
    return try_with(first_guess);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_1.36_1</NAME>
	<REQUIRES>modified_fixed_definition</REQUIRES>
	<JAVASCRIPT>
fixed_point(x => math_log(1000) / math_log(x), 2.0);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>example_1.36_2</NAME>
	<REQUIRES>modified_fixed_definition_average_dampening</REQUIRES>
	<JAVASCRIPT>
fixed_point_with_average_dampening(x => math_log(1000) / math_log(x), 2.0);
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    An infinite
    <INDEX>continued fraction</INDEX>
    <EM>continued fraction</EM> is an expression of the form
    <LATEX>
      \[
      \begin{array}{lll}
      f &amp; = &amp; {\dfrac{N_1}{D_1+
      \dfrac{N_2}{D_2+
      \dfrac{N_3}{D_3+\cdots }}}}
      \end{array}
      \]
    </LATEX>
    As an example, one can show that the infinite continued fraction
    expansion with the <LATEXINLINE>$N_i$</LATEXINLINE> and the
    <LATEXINLINE>$D_i$</LATEXINLINE> all equal to 1 produces
    <LATEXINLINE>$1/\phi$</LATEXINLINE>, where
    <LATEXINLINE>$\phi$</LATEXINLINE> is the
    <INDEX>continued fraction<SUBINDEX>golden ratio as</SUBINDEX></INDEX>
    <INDEX>golden ratio<SUBINDEX><ORDER>continued</ORDER>as continued fraction</SUBINDEX></INDEX>
    golden ratio (described in
    section<SPACE/><REF NAME="sec:tree-recursion"/>). One way to approximate
    an infinite continued fraction is to truncate the expansion after a given
    number of terms.  Such a truncation<EMDASH/>a so-called
    <EM><LATEXINLINE>$k$</LATEXINLINE>-term finite continued
    fraction</EM><EMDASH/>has the form
    <LATEX>
      \[
      {\dfrac{N_1}{D_1 +
      \dfrac{N_2}{\ddots +
      \dfrac{N_K}{D_K}}}}
      \]
    </LATEX>
    <OL>
      <LI>
        Suppose that <SCHEMEINLINE>n</SCHEMEINLINE> and
	<SCHEMEINLINE>d</SCHEMEINLINE> are
        <SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
        of one argument (the term index <LATEXINLINE>$i$</LATEXINLINE>) that
	return the <LATEXINLINE>$N_i$</LATEXINLINE> and
	<LATEXINLINE>$D_i$</LATEXINLINE> of the terms of the continued fraction.
        <SPLITINLINE>
	  <SCHEME>Define a procedure</SCHEME>
	  <JAVASCRIPT>Declare a function</JAVASCRIPT>
	</SPLITINLINE>
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cont-frac</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>cont_frac</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
        such that evaluating
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(cont-frac n d k)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>cont_frac(n, d, k)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        computes the value of the <LATEXINLINE>$k$</LATEXINLINE>-term finite
        continued fraction.  Check your
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        by approximating <LATEXINLINE>$1/\phi$</LATEXINLINE> using
        <SNIPPET PAGE="71" HIDE="yes">
          <NAME>cont_definition</NAME>
          <SCHEME>
;; cont-frac to be written by student; see exercise 1.37
          </SCHEME>
          <JAVASCRIPT>
// cont_frac to be written by student; see exercise 1.37
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET PAGE="71">
          <NAME>cont_example</NAME>
          <REQUIRES>cont_definition</REQUIRES>
          <SCHEME>
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           k)
          </SCHEME>
          <JAVASCRIPT>
cont_frac(i => 1, i => 1, k);
          </JAVASCRIPT>
        </SNIPPET>
        for successive values of <SCHEMEINLINE>k</SCHEMEINLINE>. How large must
	you make <SCHEMEINLINE>k</SCHEMEINLINE> in order to get an approximation
	that is accurate to 4 decimal places?
      </LI>
      <LI>
        If your
	<SPLITINLINE><SCHEME><SCHEMEINLINE>cont-frac</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>cont_frac</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
        generates a recursive process, write one that generates an iterative
	process. If it generates an iterative process, write one that generates
        a recursive process.
      </LI>
    </OL>
    <LABEL NAME="ex:continued-fractions"/>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>cont_example_1</EXAMPLE>
	<EXPECTED>0.6180339850173578</EXPECTED>
	<JAVASCRIPT>
//recursive process
function cont_frac(n, d, k) {
    function fraction(i) {
        return i &gt; k
               ? 0
               : n(i) / (d(i) + fraction(i + 1));
    }
    return fraction(1);
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<NAME>cont_frac</NAME>
        <EXAMPLE>cont_example_1</EXAMPLE>
	<EXPECTED>0.6180339850173578</EXPECTED>
        <JAVASCRIPT>
//iterative process
function cont_frac(n, d, k) {
    function fraction(i, current) {
        return i === 0
               ? current
               : fraction(i - 1, n(i) / (d(i) + current));
    }
    return fraction(k, 0);
}
	</JAVASCRIPT>
      </SNIPPET>

      <SNIPPET PAGE="71" HIDE="yes">
        <NAME>cont_example_1</NAME>
        <REQUIRES>cont_definition</REQUIRES>
        <SCHEME>
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           20)
        </SCHEME>
        <JAVASCRIPT>
cont_frac(i => 1, i => 1, 20);
        </JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <EXERCISE>
    In 1737, the Swiss mathematician
    <INDEX>Euler, Leonhard</INDEX>
    Leonhard Euler published a memoir
    <EM>De Fractionibus Continuis</EM>, which included a
    <INDEX>continued fraction<SUBINDEX><ORDER>e</ORDER><LATEXINLINE>$e$</LATEXINLINE> as</SUBINDEX></INDEX>
    <INDEX><ORDER>e</ORDER><LATEXINLINE>$e$</LATEXINLINE><SUBINDEX>as continued fraction</SUBINDEX></INDEX>
    continued fraction expansion for <LATEXINLINE>$e-2$</LATEXINLINE>, where
    <LATEXINLINE>$e$</LATEXINLINE> is the base of the natural logarithms. In
    this fraction, the <LATEXINLINE>$N_i$</LATEXINLINE> are all 1, and the
    <LATEXINLINE>$D_i$</LATEXINLINE> are successively
    1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, <ELLIPSIS/>.  Write a program that uses your
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cont-frac</SCHEMEINLINE> procedure</SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>cont_frac</SCHEMEINLINE> function</JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE/><REF NAME="ex:continued-fractions"/> to approximate
    <LATEXINLINE>$e$</LATEXINLINE>, based on Euler<APOS/>s expansion.
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>cont_frac</REQUIRES>
	<EXPECTED>2.718281828459045</EXPECTED>
	<JAVASCRIPT>
2 + cont_frac(i => 1,  
              i => (i + 1) % 3 &lt; 1 ? 2 * (i + 1) / 3 : 1,
              20);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <EXERCISE>
    A continued fraction representation of the tangent function was
    published in 1770 by the German mathematician
    <INDEX>Lambert, J.H.</INDEX>
    <INDEX>continued fraction<SUBINDEX>tangent as</SUBINDEX></INDEX>
    <INDEX>tangent<SUBINDEX>as continued fraction</SUBINDEX></INDEX>
    J.H. Lambert:
    <LATEX>
      \[
      \begin{array}{lll}
      \tan x &amp; = &amp; {\dfrac{x}{1-
      \dfrac{x^2}{3-
      \dfrac{x^2}{5-
      \dfrac{x^2}{ \ddots }}}}}
      \end{array}
      \]
    </LATEX>
    where <LATEXINLINE>$x$</LATEXINLINE> is in radians.
    <SPLITINLINE>
      <SCHEME>Define a procedure <SCHEMEINLINE>(tan-cf x k)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>Declare a function
      <JAVASCRIPTINLINE>tan_cf(x, k)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that computes an approximation to the tangent function based on
    Lambert<APOS/>s formula.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>K</SCHEMEINLINE> specifies the number of terms to compute,
	as in exercise<SPACE/><REF NAME="ex:continued-fractions"/>.
      </SCHEME>
      <JAVASCRIPT>
	As in exercise<SPACE/><REF NAME="ex:continued-fractions"/>, 
	<JAVASCRIPTINLINE>k</JAVASCRIPTINLINE> specifies the number of terms
	to compute.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SOLUTION>
      <SNIPPET>
	<REQUIRES>cont_frac</REQUIRES>
	<EXAMPLE>tan_ex</EXAMPLE>
	<EXPECTED>-2.8271597168564594e-16</EXPECTED>
	<JAVASCRIPT>
function tan_cf(x, k) {
    return cont_frac(i => i === 1 ? x : - x * x,  
                     i => 2 * i - 1,
                     k);
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>tan_ex</NAME>
	<JAVASCRIPT>
tan_cf(math_PI, 14);
// math_tan(math_PI);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> as general method<CLOSE/></SUBINDEX></INDEX>
  <INDEX><FUNCTION/><SUBINDEX><ORDER>general</ORDER>as general method<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
