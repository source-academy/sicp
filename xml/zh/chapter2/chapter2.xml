<CHAPTER>
   <NAME>通过数据构建抽象</NAME> 
  <LABEL NAME="chap:data"></LABEL>
   <PDF_ONLY>\addtocontents{toc}{\protect\enlargethispage{-\baselineskip}}</PDF_ONLY> 

   <HISTORY> 
    % 97年秋 添加手册引用的 &apos;标签&apos;
    % 8/26/97 第三次印刷排版错误修复 -- 第112, 179, 181页

    % 4/15 修复同一页面上的多个条目
    % 4/13-15 索引 [最终章节打印后]
    % 4/11 根据 <QUOTE>最终</QUOTE> 检查和拼写检查进行更正和调整
    % 4/9 基于索引前的比较进行微小修复
    % 4/7-... Julie 索引修正 (以及4/8更改 &apos;ns&apos;)
    % 4/6/96 Julie: 分页更改; 添加 Thatcher 参考; 索引修正
    % 4/5/96 Hal 索引
    % 4/5/96 Julie: 索引修正; 排版错误修复
    % 4/4/96 内容修正; 分页调整; 剩余分页
    % 4/3/96 索引更改
    % 4/2/96 分页至2.2
    % 4/1/96 Julie: 分页至 Rogers 注脚
    % 4/1/96 Julie 杂项改进
    % 3/29/96 Julie 索引修正
    % 3/20/96 Julie 索引修正
    % 3/18/96 &apos;atan&apos; 编辑 &amp; 微小的索引修正
    % 3/17/96 Julie 微小索引更改
    % 3/15/96 Julie 微小索引更改
    % 3/10-3/13/96 Hal 索引，Julie 的微小索引修正/添加

    % 3/9/96 修复某些习题部分中的空格; 将行划分为get/put规范;
    %        其他微小编辑
    % 3/6/96 微小词语和换行改进
    % 3/4/96 改写以&apos;修复&apos;大多数三重连字符; 其他排版
    %        修复
    % 3/3/96 将countleaves更改为count-leaves（使其适应）
    % 3/3/96 修复由Albert Meyer指出的多项式gcd注脚中的错误
    % 2/26-3/2/96 修复一些不良的换行
    % 2/24/96 在 {lisp} 后列出 \noindent 关闭空间以
    % 2/24/96 修复松散的注脚 (#49)
    % 2/23/96 将8皇后图移入示例以避免多余的示例间距
    % 2/22/96 新的题词规范
    % 2/21/96 修正表格格式
    % 2/19/96 修正参考中的 ()
  </HISTORY> 

   <EPIGRAPH>
    现在我们来到了数学抽象的决定性步骤：不再关注符号的含义。<ELLIPSIS></ELLIPSIS> [数学家]
    也不会闲着；他可以进行许多操作，仅凭这些符号，而不必解析它们的实际意义。
    <INDEX>Weyl, Hermann</INDEX>
    <ATTRIBUTION>
      <AUTHOR>Hermann Weyl</AUTHOR>
      <TITLE><EM>数学思维方式</EM></TITLE>
    </ATTRIBUTION>
  </EPIGRAPH> 

   <CHAPTERCONTENT></CHAPTERCONTENT> 

   <TEXT>
    <INDEX>复合数据, 需求<OPEN></OPEN></INDEX>
    <INDEX>数据<SUBINDEX>复合</SUBINDEX><OPEN></OPEN></INDEX>
    <NOINDENT></NOINDENT>
    我们在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中集中讨论了计算过程和
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    在程序设计中的作用。我们研究了如何使用原语数据（数字）和原语
    操作（算术操作），如何结合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过组合、条件和参数的使用来形成复合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，以及如何通过使用
    <SPLITINLINE>
      define.
      <JAVASCRIPT>函数声明。</JAVASCRIPT>
    </SPLITINLINE>
    来抽象
    <SPLITINLINE>
      过程
      <JAVASCRIPT>过程</JAVASCRIPT>
    </SPLITINLINE>
    。我们看到一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以被视为一个过程局部演化的模式，我们分类、推理并对一些常见的过程模式进行了简单的算法分析，这些模式体现在
    <SPLITINLINE>
      过程中。
      <JAVASCRIPT>函数中。</JAVASCRIPT>
    </SPLITINLINE>
    我们还看到，高阶
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    通过使我们能够操作，从而以计算的一般方法进行推理，增强了语言的能力。这是编程的精髓之一。
  </TEXT> 

   <TEXT>
    在本章中，我们将研究更复杂的数据。第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中的所有
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    均操作于简单的数值数据，而简单数据对于我们希望使用计算解决的许多问题是不够的。程序通常设计用于模拟复杂现象，通常必须构建由多个部分组成的计算对象以模拟具有多个方面的现实世界现象。因此，虽然我们在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章中的重点是通过组合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    以形成复合
    <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    但在本章中我们转向任何编程语言的另一个关键方面：它提供通过组合数据对象构建抽象以形成<EM>复合数据</EM>的方法【22:10†cn.txt】。
  </TEXT> 

   <TEXT>
    为什么我们想要在编程语言中使用复合数据？因为我们希望使用复合
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    以提升我们设计程序的概念层次，提高我们设计的模块化程度，并增强我们语言的表达能力。正如
    <SPLITINLINE>
      定义过程
      <JAVASCRIPT>声明函数</JAVASCRIPT>
    </SPLITINLINE>
    的能力使我们能够在比语言的原始操作更高的概念层次上处理过程一样，构建复合数据对象的能力使我们能够在比语言的原始数据对象更高的概念层次上处理数据【26:5†cn.txt】【26:8†cn.txt】。
  </TEXT> 

   <SHORT_PAGE LINES="1"></SHORT_PAGE> 
   <TEXT>
    考虑设计一个执行<INDEX>有理数算术<SUBINDEX>复合数据需求</SUBINDEX></INDEX>
    的系统的任务。有一个我们可以想象的操作
    <SPLITINLINE>
      add-rat
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，它接受两个有理数并产生它们的和。就简单数据而言，一个有理数可以被看作是两个整数：分子和分母。因此，我们可以设计一个程序，其中每个有理数将由两个整数（一个分子和一个分母）表示，
    <SPLITINLINE>
      add-rat
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    将由两个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    实现（一个生成和的分子，一个生成分母）。但这会很麻烦，因为我们需要明确跟踪哪些分子对应于哪些分母。在一个旨在对许多有理数进行许多运算的系统中，这种记录细节会大幅增加程序的复杂性，更不必提对我们的思维造成的负担。如果我们能够<QUOTE>粘合在一起</QUOTE>
    一个分子和一个分母以形成一对<EMDASH></EMDASH>一个<EM>复合数据对象</EM><EMDASH></EMDASH>我们的程序可以以一种将有理数视为单一概念单元的方式进行操作，那就更好了【32:8†cn.txt】。
  </TEXT> 

   <TEXT>
    使用复合数据还能提高我们程序的模块性。如果我们可以直接将有理数作为独立对象进行操作，那么我们就可以将程序中负责有理数处理的部分与有理数表示为整数对的细节分离。将程序中处理数据对象的表示部分与处理数据对象使用部分隔离开来的一般技术，被称为<INDEX>数据抽象</INDEX><EM>数据抽象</EM>的强大设计方法。我们将看到数据抽象如何使程序的设计、维护和修改变得更加容易【36:6†cn.txt】。
  </TEXT> 

  <TEXT> 
    使用复合数据可以实现编程语言表达能力的真正提升。考虑构建<QUOTE>线性组合</QUOTE>【40:8†cn.txt】 
<LATEXINLINE>$ax+by$</LATEXINLINE> . 我们
    可能想写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，该过程将接受 <LATEXINLINE>$a$</LATEXINLINE>,
    <LATEXINLINE>$b$</LATEXINLINE>, <LATEXINLINE>$x$</LATEXINLINE> ，并且 <LATEXINLINE>$y$</LATEXINLINE> ，作为参数并返回的值 <LATEXINLINE>$ax+by$</LATEXINLINE> 。如果参数是数字，这不会有任何困难，因为我们可以轻松
    <SPLITINLINE>
      定义过程
      <JAVASCRIPT>声明函数</JAVASCRIPT>
    </SPLITINLINE>
 【54:5†cn.txt】 <SNIPPET>
      <EXAMPLE>linear_combination_example</EXAMPLE>
      <SCHEME>
(define (linear-combination a b x y) 
  (+ (* a x) (* b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return a * x + b * y;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>linear_combination_example</NAME>
      <JAVASCRIPT>
	linear_combination(1, 2, 3, 4);
      </JAVASCRIPT>
    </SNIPPET> 
    但假设我们不仅仅关注数字。假设我们希望
    <SPLITINLINE>
      以过程化的术语表达一个可以构成的想法
      <JAVASCRIPT>描述一个构成的过程</JAVASCRIPT>
    </SPLITINLINE>
    当加法和乘法被定义时<EMDASH></EMDASH>对有理数、复数、多项式或任何其他对象形成线性组合时。我们可以将其表示为形式的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>【58:5†cn.txt】。
     <SNIPPET EVAL="no">
      <SCHEME>
(define (linear-combination a b x y)
  (add (mul a x) (mul b y)))
      </SCHEME>
      <JAVASCRIPT>
function linear_combination(a, b, x, y) {
    return add(mul(a, x), mul(b, y));
}
      </JAVASCRIPT>
    </SNIPPET> 
    其中  <SCHEMEINLINE>add</SCHEMEINLINE> 和 <SCHEMEINLINE>mul</SCHEMEINLINE> 
    不是原语
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
  <SCHEMEINLINE>+</SCHEMEINLINE> 和 <SCHEMEINLINE>*</SCHEMEINLINE>  而是更复杂的事物，这些事物将对我们传入作为参数的任何类型的数据执行适当的操作【18:0†cn.txt】 <SCHEMEINLINE>a</SCHEMEINLINE>, <SCHEMEINLINE>b</SCHEMEINLINE>,
    <SCHEMEINLINE>x</SCHEMEINLINE>，和<SCHEMEINLINE>y</SCHEMEINLINE> 。关键
    点是只有
    <SPLITINLINE>
      linear-combination
      <JAVASCRIPT><JAVASCRIPTINLINE>线性组合</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    需要知道【78:0†cn.txt】 <SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>，并且<SCHEMEINLINE>y</SCHEMEINLINE>  是 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
  <SCHEMEINLINE>add</SCHEMEINLINE> 和 <SCHEMEINLINE>mul</SCHEMEINLINE> 将执行适当的操作。从
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      linear-combination,
      <JAVASCRIPT><JAVASCRIPTINLINE>linear_combination</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    的角度来看，什么是不相关的【90:4†cn.txt】 <SCHEMEINLINE>a</SCHEMEINLINE>,
    <SCHEMEINLINE>b</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>，并且<SCHEMEINLINE>y</SCHEMEINLINE> 而更不相关的是，它们如何可能被表示为更原始的数据。这同样的例子表明，为什么我们的编程语言提供直接操作复合对象的能力是重要的：如果没有这个，像
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    这样的
    <SPLITINLINE>
      linear-combination
      <JAVASCRIPT><JAVASCRIPTINLINE>线性组合</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    无法将它的参数传递给   <SCHEMEINLINE>add</SCHEMEINLINE>和<SCHEMEINLINE>mul</SCHEMEINLINE> ，而无需了解其详细结构。<FOOTNOTE>能够直接操作
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    提高了编程语言的表达能力。例如，在第<SPACE></SPACE><REF NAME="sec:procedures-as-parameters"></REF>节中我们引入了
    sum
    <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    它接受一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    项 作为参数并计算在某个指定区间内的项的值的总和。为了定义sum，关键是我们必须能将
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    例如项作为一个独立的实体，不必考虑项如何用更原始的操作表达。实际上，如果我们没有
    <QUOTE>“一个
    <SPLITINLINE>过程,<JAVASCRIPT>函数,</JAVASCRIPT></SPLITINLINE>”</QUOTE>的概念，我们很可能永远不会想定义像sum这样操作的可能性。此外，就执行求和操作而言，项如何从更原始的操作构建的细节是无关紧要的。</FOOTNOTE>
    <INDEX>复合数据, 需求<CLOSE></CLOSE></INDEX>
    <INDEX>数据<SUBINDEX>复合</SUBINDEX><CLOSE></CLOSE></INDEX>
   </TEXT>

   <TEXT>
    我们通过实现上面提到的有理数算术系统来开始本章。这将构成我们讨论复合数据和数据抽象的背景。与复合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    一样，主要要解决的问题是将抽象作为应对复杂性的一种技术，我们将看到数据抽象如何使我们能够在程序的不同部分之间建立合适的<INDEX>抽象屏障</INDEX><EM>抽象屏障</EM>【106:12†cn.txt】。
  </TEXT> 

   <TEXT>
    我们将看到构建复合数据的关键在于编程语言应该提供某种<QUOTE>粘合剂</QUOTE>，以便数据对象可以组合形成更复杂的数据对象。有许多可能的粘合剂。实际上，我们会发现如何仅使用
    <SPLITINLINE>
      过程。
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    而不使用任何特殊的<QUOTE>数据</QUOTE>操作来形成复合数据。这将进一步模糊
    <SPLITINLINE>
      <QUOTE>过程</QUOTE>
      <JAVASCRIPT><QUOTE>函数</QUOTE></JAVASCRIPT>
    </SPLITINLINE>
    和<QUOTE>数据</QUOTE>之间的区别，正如在第<SPACE></SPACE><REF NAME="chap:fun"></REF>章的结束部分已经变得模糊不清。我们还将探索一些用于表示序列和树的常规技术。处理复合数据的一个关键概念是
    <INDEX>闭包</INDEX>
    <EM>闭包</EM><EMDASH></EMDASH>我们用于组合数据对象的粘合剂应该允许我们不仅组合基本数据对象，还可以组合复合数据对象。另一个关键概念是复合数据对象可以作为
    <INDEX>约定接口</INDEX>
    <EM>约定接口</EM>用于以混合搭配的方式组合程序模块。我们通过介绍一个利用闭包的简单图形语言来说明其中的一些概念。
  </TEXT> 

   <TEXT>
    然后我们将通过引入<INDEX>符号表达式</INDEX><INDEX>表达式<SUBINDEX>符号化</SUBINDEX></INDEX><EM>符号表达式</EM><EMDASH></EMDASH>元素可以是任意符号而非仅仅是数字的数据，来增强我们的语言的表现力。我们探讨表示对象集的各种替代方案。我们将发现，正如一个给定的数值函数可以通过许多不同的计算过程来计算一样，一个给定的数据结构可以通过更简单的对象来表示的方式也是多样的，并且表示的选择对处理数据的过程的时间和空间需求有重要影响。我们将在符号微分、集合的表示和信息编码的背景下研究这些想法【110:0†cn.txt】。
  </TEXT> 

   <SHORT_PAGE LINES="1"></SHORT_PAGE> 
   <TEXT>
    接下来我们将处理在程序的不同部分可能以不同方式表示的数据的问题。这导致需要实现 <INDEX>通用操作</INDEX><INDEX>操作<SUBINDEX>通用</SUBINDEX></INDEX><EM>通用操作</EM>，这些操作必须处理许多不同类型的数据。在通用操作的情况下保持模块化需要更强大的抽象屏障，而不仅仅是简单的数据抽象。特别是，我们引入<EM>数据导向编程</EM>作为一种技术，允许单个数据表示独立设计然后<INDEX>加法性</INDEX><EM>加法性</EM>地（即无需修改）结合。为了说明这种系统设计方法的威力，我们将在本章最后运用我们所学到的知识来实现一个用于多项式符号运算的软件包，其中多项式的系数可以是整数、有理数、复数，甚至其他多项式【120:5†cn.txt】。
  </TEXT> 

   <CHAPTERCONTENT></CHAPTERCONTENT> 

  <!--  Section 1 : Introduction to Data Abstraction  -->
  &amp;section2.1;

  <!--  Section 2 : Hierarchical Data and the Closure Property  -->
  &amp;section2.2;

  <!--  Section 3 : Symbolic Data  -->
  &amp;section2.3;

  <!--  Section 4 : Multiple Representations for Abstract Data  -->
  &amp;section2.4;

  <!--  Section 5 : Systems with Generic Operations  -->
  &amp;section2.5;

</CHAPTER>
