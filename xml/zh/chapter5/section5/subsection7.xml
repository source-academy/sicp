<SUBSECTION>
  <NAME>
    Interfacing Compiled Code to the Evaluator
  </NAME><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:interfacing-compiled-code"></LABEL>

  <INDEX>compiler for JavaScript<SUBINDEX>interfacing to evaluator<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>compiler for JavaScript<SUBINDEX>running compiled code<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>modified for compiled code<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <SHORT_PAGE LINES="3"></SHORT_PAGE><!-- Error occurred while translating this section -->
  <TEXT>
    We have not yet explained how to load compiled code into the evaluator
    machine or how to run it.  We will assume that the explicit-control-evaluator
    machine has been defined as in
    section<SPACE></SPACE><REF NAME="sec:running-evaluator"></REF>, with the additional
    operations specified in footnote<SPACE></SPACE><REF NAME="foot:compiler-ops"></REF> (section<SPACE></SPACE><REF NAME="sec:compiling-components"></REF>).
    We will implement a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>compile_and_go</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-and-go</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_and_go</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that compiles a
    <SPLITINLINE>
      <SCHEME>Scheme expression,</SCHEME>
      <JAVASCRIPT>JavaScript program,</JAVASCRIPT>
    </SPLITINLINE>
    loads the resulting object code into the evaluator machine,
    and causes the machine to run the code in the
    evaluator global environment, print the result, and
    enter the evaluator<APOS></APOS>s driver loop.  We will also modify the evaluator
    so that interpreted
    <SPLITINLINE>
      <SCHEME>
	expressions
      </SCHEME>
      <JAVASCRIPT>
	components
      </JAVASCRIPT>
    </SPLITINLINE>
    can call compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    as well as interpreted ones.  We can then put a compiled
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    into the machine and use the
    evaluator to call<SPACE></SPACE>it:
    <!-- Error occurred while translating this section --><SNIPPET>
      <NAME>compile_and_go_example</NAME>
      <REQUIRES>compile_and_go</REQUIRES>
      <SCHEME>
(compile-and-go
 &apos;(define (factorial n)
    (if (= n 1)
        1
        (* (factorial (- n 1)) n))))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval value:
ok
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
compile_and_go(parse(`
function factorial(n) {
    return n === 1
           ? 1
           : factorial(n - 1) * n;
}
                     `));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEMEPROMPT>
;;; EC-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(factorial 5)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
factorial(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To allow the evaluator to handle compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (for example,
    to evaluate the call to <!-- Error occurred while translating this section --><SCHEMEINLINE>factorial</SCHEMEINLINE> above),
    we need to change the code at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    (section<SPACE></SPACE><REF NAME="sec:procedure-application"></REF>) so that it
    recognizes compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (as distinct from compound or primitive
    <SPLITINLINE>
      <SCHEME>procedures)</SCHEME>
      <JAVASCRIPT>functions)</JAVASCRIPT>
    </SPLITINLINE>
    and transfers control directly to the entry point of the
    compiled code:<FOOTNOTE>Of course, compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    as well as interpreted
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are compound (nonprimitive).  For compatibility with the terminology used
    in the explicit-control evaluator, in this section we will use
    <QUOTE>compound</QUOTE> to mean interpreted (as opposed to
    compiled).</FOOTNOTE>
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <INDEX><DECLARATION>apply_dispatch</DECLARATION><SUBINDEX>modified for compiled code</SUBINDEX></INDEX>
      <INDEX><DECLARATION>compiled_apply</DECLARATION></INDEX> 
      <SCHEME>
apply-dispatch
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-apply))
  (test (op compound-procedure?) (reg proc))  
  (branch (label compound-apply))
  (test (op compiled-procedure?) (reg proc))  
  (branch (label compiled-apply))
  (goto (label unknown-procedure-type))

compiled-apply
  (restore continue)
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  </SCHEME>
  <JAVASCRIPT>
&quot;apply_dispatch&quot;,
  test(list(op(&quot;is_primitive_function&quot;), reg(&quot;fun&quot;))),
  branch(label(&quot;primitive_apply&quot;)),
  test(list(op(&quot;is_compound_function&quot;), reg(&quot;fun&quot;))),
  branch(label(&quot;compound_apply&quot;)),
  test(list(op(&quot;is_compiled_function&quot;), reg(&quot;fun&quot;))),
  branch(label(&quot;compiled_apply&quot;)),
  go_to(label(&quot;unknown_function_type&quot;)),

&quot;compiled_apply&quot;,
  push_marker_to_stack(),
  assign(&quot;val&quot;, list(op(&quot;compiled_function_entry&quot;), reg(&quot;fun&quot;))),
  go_to(reg(&quot;val&quot;)),
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        Note the restore of <SCHEMEINLINE>continue</SCHEMEINLINE> at
        <SPLITINLINE>
          <SCHEME>
          <SCHEMEINLINE>compiled-apply</SCHEMEINLINE>.</SCHEME>
          <JAVASCRIPT>
	          <JAVASCRIPTINLINE>compiled_apply</JAVASCRIPTINLINE>.
          </JAVASCRIPT>
        </SPLITINLINE>
        Recall that the evaluator was arranged so that at
        <SPLITINLINE>
          <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>,</SCHEME>
          <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>,
          </JAVASCRIPT>
        </SPLITINLINE>
        the continuation would be at the top of the stack.  The compiled code entry
        point, on the other hand, expects the continuation to be in
        <SCHEMEINLINE>continue</SCHEMEINLINE>, so
        <SCHEMEINLINE>continue</SCHEMEINLINE> must be
        restored before the compiled code is executed.
      </SCHEME>
      <JAVASCRIPT>
        At
	<JAVASCRIPTINLINE>compiled_apply</JAVASCRIPTINLINE>, as at
	<JAVASCRIPTINLINE>compound_apply</JAVASCRIPTINLINE>, we push a marker to the stack
        so that a return statement in the compiled function 
        can revert the stack to this state.

        Note that there is no save of
        <JAVASCRIPTINLINE>continue</JAVASCRIPTINLINE> at
        <JAVASCRIPTINLINE>compiled_apply</JAVASCRIPTINLINE> before
        the marking of the stack, because the evaluator was
        arranged so that at
        <JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>, the
        continuation would be at the top of the stack.
      </JAVASCRIPT>
    </SPLIT>
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    To enable us to run some compiled code when we start the evaluator
    machine, we add a <!-- Error occurred while translating this section --><SCHEMEINLINE>branch</SCHEMEINLINE> instruction at
    the beginning of the evaluator machine, which causes the machine to
    go to a new entry point if the <!-- Error occurred while translating this section --><SCHEMEINLINE>flag</SCHEMEINLINE> register 
    is set.<FOOTNOTE>Now that the evaluator machine starts
    with a <SCHEMEINLINE>branch</SCHEMEINLINE>, we must always initialize the
    <SCHEMEINLINE>flag</SCHEMEINLINE> register before starting the evaluator
    machine.  To start the machine at its ordinary
    <SPLITINLINE>
      <SCHEME>
	read-eval-print
      </SCHEME>
      <JAVASCRIPT>
	read-evaluate-print
      </JAVASCRIPT>
    </SPLITINLINE>
    loop, we
    could use
    <SNIPPET POSTPADDING="no">
      <INDEX><DECLARATION>start_eceval</DECLARATION></INDEX> 
      <NAME>start_eceval</NAME>
      <REQUIRES>compile_and_go</REQUIRES>
      <EXAMPLE>compile_and_go_example</EXAMPLE>
      <SCHEME>
(define (start-eceval)
  (set! the-global-environment (setup-environment))
  (set-register-contents! eceval &apos;flag false)
  (start eceval))
      </SCHEME>
      <JAVASCRIPT>
function start_eceval() {
    set_register_contents(eceval, &quot;flag&quot;, false);
    return start(eceval);
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
      </JAVASCRIPT_RUN>
    </SNIPPET></FOOTNOTE>
    <!-- Error occurred while translating this section --><SNIPPET LATEX="yes">
      <SCHEME>
  (branch (label external-entry))      ; branches if $\texttt{flag}$ is set
read-eval-print-loop
  (perform (op initialize-stack))
  $\ldots$
      </SCHEME>
      <JAVASCRIPT>
$\texttt{ }\texttt{ }$branch(label(&quot;external_entry&quot;)), // branches if flag is set    
&quot;read_evaluate_print_loop&quot;,
  perform(list(op(&quot;initialize_stack&quot;))),
  $\ldots$
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>External-entry</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The code at <JAVASCRIPTINLINE>external_entry</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    assumes that the machine is started with <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE>
    containing the location of an instruction sequence that puts a result into
    <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE> and ends with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>go_to(reg(&quot;continue&quot;))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Starting at this entry point jumps to the location designated
    by <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE>, but first assigns
    <!-- Error occurred while translating this section --><SCHEMEINLINE>continue</SCHEMEINLINE> so that execution will return to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-result</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_result</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which prints the value in <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE> and then goes to
    the beginning of the evaluator<APOS></APOS>s
    <SPLITINLINE>
      <SCHEME>
	read-eval-print
      </SCHEME>
      <JAVASCRIPT>
	read-evaluate-print
      </JAVASCRIPT>
    </SPLITINLINE>
    loop.<!-- Error occurred while translating this section --><FOOTNOTE>Since
    a compiled
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is an object that the system may try to print, we also modify the system
    print operation
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>user-print</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>user_print</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    (from section<SPACE></SPACE><REF NAME="sec:running-eval"></REF>) so that it will not
    attempt to print the components of a compiled
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
      </SPLITINLINE>
      <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
	<INDEX><DECLARATION>user_print</DECLARATION><SUBINDEX>modified for compiled code</SUBINDEX></INDEX>
	<NAME>user_print_2</NAME>
	<SCHEME>
        (define (user-print object)
        (cond ((compound-procedure? object)
              (display (list &apos;compound-procedure
              (procedure-parameters object)
              (procedure-body object)
              &apos;&lt;procedure-env&gt;)))
              ((compiled-procedure? object)
              (display &apos;&lt;compiled-procedure&gt;))
              (else (display object))))
      </SCHEME>
      <JAVASCRIPT>
function user_print(string, object) {
    function prepare(object) {
        return is_compound_function(object)
               ? &quot;&lt; compound function &gt;&quot;
               : is_primitive_function(object)
               ? &quot;&lt; primitive function &gt;&quot;
               : is_compiled_function(object)
               ? &quot;&lt; compiled function &gt;&quot;
               : is_pair(object)
               ? pair(prepare(head(object)),
                      prepare(tail(object)))
               : object;
    }
    display(string + &quot; &quot; + stringify(prepare(object)));
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function user_print(prompt_string, object) {
   function to_string(object) {
       return is_compound_function(object)
              ? &quot;&lt;compound-function&gt;&quot;
              : is_compiled_function(object)
              ? &quot;&lt;compiled-function&gt;&quot;
              : is_primitive_function(object)
              ? &quot;&lt;primitive-function&gt;&quot;
              : is_pair(object)
              ? &quot;[&quot; + to_string(head(object)) + &quot;, &quot;
                    + to_string(tail(object)) + &quot;]&quot;
              : stringify(object);
    }
    display(prompt_string + &quot;\n&quot; + to_string(object) + &quot;\n----------------------------&quot;);
}
      </JAVASCRIPT_RUN>
    </SNIPPET></FOOTNOTE>
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>external_entry</DECLARATION></INDEX> 
      <SCHEME>
external-entry
  (perform (op initialize-stack))
  (assign env (op get-global-environment))
  (assign continue (label print-result))
  (goto (reg val))
      </SCHEME>
      <JAVASCRIPT>
&quot;external_entry&quot;,
  perform(list(op(&quot;initialize_stack&quot;))),
  assign(&quot;env&quot;, list(op(&quot;get_current_environment&quot;))),
  assign(&quot;continue&quot;, label(&quot;print_result&quot;)),
  go_to(reg(&quot;val&quot;)),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>modified for compiled code<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  <TEXT>
    Now we can use the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to compile a
    <SPLITINLINE>
      <SCHEME>procedure definition,</SCHEME>
      <JAVASCRIPT>function declaration,</JAVASCRIPT>
    </SPLITINLINE>
    execute the compiled code, and run the
    <SPLITINLINE>
      <SCHEME>
	read-eval-print
      </SCHEME>
      <JAVASCRIPT>
	read-evaluate-print
      </JAVASCRIPT>
    </SPLITINLINE>
    loop so
    we can try the
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    Because we want the compiled code to
    <SPLITINLINE>
      <SCHEME>return</SCHEME>
      <JAVASCRIPT>proceed</JAVASCRIPT>
    </SPLITINLINE>
    to the location in
    <!-- Error occurred while translating this section --><SCHEMEINLINE>continue</SCHEMEINLINE> with its result in
    <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE>, we compile the
    <SPLITINLINE>
      <SCHEME>expression</SCHEME>
      <JAVASCRIPT>program</JAVASCRIPT>
    </SPLITINLINE>
    with a target of <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE> and a
    linkage of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	      <JAVASCRIPTINLINE>&quot;return&quot;</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    In order to transform the
    object code produced by the compiler into executable instructions
    for the evaluator register machine, we use the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>assemble</SCHEMEINLINE> from the
    register-machine simulator
    (section<SPACE></SPACE><REF NAME="sec:assembler"></REF>).  
    <SPLIT>
      <JAVASCRIPT>
	For the interpreted program to refer to the names that
	are declared at top level in the compiled program, we
        <INDEX>scanning out declarations<SUBINDEX>in compiler</SUBINDEX></INDEX>	
	scan out the top-level names and 
	extend the global environment by binding these names to
	<JAVASCRIPTINLINE>&quot;*unassigned*&quot;</JAVASCRIPTINLINE>,
	knowing that the compiled code will assign them 
	the correct values.
      </JAVASCRIPT>
    </SPLIT>
We then initialize
    the <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE> register to point to the list
    of instructions, set the
    <!-- Error occurred while translating this section --><SCHEMEINLINE>flag</SCHEMEINLINE> so that the evaluator will go to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>external-entry</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>external_entry</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and start the evaluator.
    <!-- Error occurred while translating this section --><SNIPPET HIDE="yes">
      <NAME>display_instructions</NAME>
      <JAVASCRIPT>
function stringify_list(xs) {
    return is_null(member(head(xs),
                   list(&quot;assign&quot;, &quot;perform&quot;, &quot;op&quot;, &quot;label&quot;, &quot;branch&quot;,
                        &quot;go_to&quot;, &quot;save&quot;, &quot;restore&quot;, &quot;reg&quot;, &quot;constant&quot;)))
           ? &quot;list(&quot; + comma_separated(xs) + &quot;)&quot;
           : head(xs) + &quot;(&quot; + comma_separated(tail(xs)) + &quot;)&quot;;
}
function comma_separated(elements) {
    return accumulate((s, acc) =&gt; stringify_instruction(s) +
                                  (acc === &quot;&quot; ? &quot;&quot; : &quot;, &quot; + acc),
                      &quot;&quot;, elements);
}
function stringify_instruction(x) {
    return is_string(x) || is_number(x) || is_undefined(x) || is_null(x)
           ? stringify(x)
           : stringify_list(x);
}
function display_instructions(instructions) {
    return for_each(i =&gt; {display(stringify_instruction(i) + &quot;,&quot;); },
                    instructions);
}
      </JAVASCRIPT>
    </SNIPPET>
    <!--   FIXME: remove no_args, first_arg etc   -->
    <SNIPPET HIDE="yes">
      <NAME>eceval_2</NAME>
      <REQUIRES>prompt_for_input</REQUIRES>
      <REQUIRES>the_global</REQUIRES>
      <JAVASCRIPT>

const eceval_operations = 
    list(
      // args
      list(&quot;arg_expressions&quot;      , arg_expressions),
      list(&quot;function_expression&quot;  , function_expression),
      list(&quot;is_null&quot;
                                  , is_null),
      list(&quot;head&quot;        , head),
      list(&quot;is_last_argument_expression&quot;
                                  , a =&gt; is_null(tail(a))),
      list(&quot;tail&quot;        , tail),

      //arg
      list(&quot;empty_arglist&quot;        , () =&gt; null),
      list(&quot;adjoin_arg&quot;           , (val, argl) =&gt; append(argl,
                                                      list(val))),

      // comp (sequence)
      list(&quot;first_statement&quot;     , first_statement),
      list(&quot;rest_statements&quot;     , rest_statements),
      list(&quot;is_last_statement&quot;   , is_last_statement),
      list(&quot;sequence_statements&quot; , sequence_statements),

      // eval functions from meta-circular evaluator
      list(&quot;is_literal&quot;  , is_literal),
      list(&quot;literal_value&quot;       , literal_value),
      list(&quot;is_name&quot;             , is_name),
      list(&quot;symbol_of_name&quot;      , symbol_of_name),
      list(&quot;is_assignment&quot;       , is_assignment),
      list(&quot;assignment_symbol&quot;   , assignment_symbol),
      list(&quot;assignment_value_expression&quot;
                                 , assignment_value_expression),
      list(&quot;assign_symbol_value&quot; , assign_symbol_value),
      list(&quot;is_declaration&quot;      , is_declaration),
      list(&quot;declaration_symbol&quot;  , declaration_symbol),
      list(&quot;declaration_value_expression&quot;
                                 , declaration_value_expression),
      list(&quot;assign_symbol_value&quot; , assign_symbol_value),
      list(&quot;is_lambda_expression&quot;, is_lambda_expression),
      list(&quot;lambda_parameter_symbols&quot;
                                 , lambda_parameter_symbols),
      list(&quot;lambda_body&quot;         , lambda_body),
      list(&quot;is_return_statement&quot; , is_return_statement),
      list(&quot;return_expression&quot;   , return_expression),
      list(&quot;is_conditional&quot;
                                 , is_conditional),
      list(&quot;conditional_predicate&quot;
				 , conditional_predicate),
      list(&quot;conditional_consequent&quot;
                                 , conditional_consequent),
      list(&quot;conditional_alternative&quot;
                                 , conditional_alternative),
      list(&quot;is_sequence&quot;         , is_sequence),
      list(&quot;is_block&quot;            , is_block),
      list(&quot;block_body&quot;          , block_body),
      list(&quot;scan_out_declarations&quot;
                                 , scan_out_declarations),
      list(&quot;list_of_unassigned&quot;  , list_of_unassigned),
      list(&quot;is_application&quot;      , is_application),
      list(&quot;is_primitive_function&quot;
                                 , is_primitive_function),
      list(&quot;apply_primitive_function&quot;
                                 , apply_primitive_function),
      list(&quot;is_compound_function&quot;, is_compound_function),
      list(&quot;function_parameters&quot; , function_parameters),
      list(&quot;function_environment&quot;, function_environment),
      list(&quot;function_body&quot;       , function_body),
      list(&quot;extend_environment&quot;  , extend_environment),
      list(&quot;make_function&quot;       , make_function),

      list(&quot;get_current_environment&quot;
                                 , get_current_environment),
      list(&quot;set_current_environment&quot;
                                 , set_current_environment),

      // Unsorted
      list(&quot;is_function_declaration&quot;  , is_function_declaration),
      list(&quot;function_declaration_body&quot;  , function_declaration_body),
      list(&quot;function_declaration_parameters&quot;  , function_declaration_parameters),
      list(&quot;function_declaration_name&quot;  , function_declaration_name),
      list(&quot;function_decl_to_constant_decl&quot;, function_decl_to_constant_decl),
      list(&quot;declaration_symbol&quot;  , declaration_symbol),
      list(&quot;is_operator_combination&quot;, is_operator_combination),
      list(&quot;operator_combination_to_application&quot;, operator_combination_to_application),

      // generic helpers
      list(&quot;is_truthy&quot;, is_truthy),
      list(&quot;is_falsy&quot;                , x =&gt; ! is_truthy(x)), 
      list(&quot;is_null&quot;, is_null),
      list(&quot;is_pair&quot;                 , is_pair),
      list(&quot;is_number&quot;               , is_number),
      list(&quot;append&quot;                  , append),
      list(&quot;pair&quot;                    , pair),

      list(
        &quot;lookup_symbol_value&quot;        , lookup_symbol_value),
      list(&quot;get_current_environment&quot; , get_current_environment),
      list(&quot;set_current_environment&quot; , set_current_environment),

      list(&quot;user_read&quot;               , prompt),
      list(&quot;user_print&quot;              , user_print),
      list(&quot;parse&quot;                   , parse),
      list(&quot;display&quot;                 , display),
      list(&quot;make_compiled_function&quot;  , make_compiled_function),
      list(&quot;is_compiled_function&quot;    , is_compiled_function),
      list(&quot;compiled_function_env&quot;   , compiled_function_env),
      list(&quot;compiled_function_entry&quot; , compiled_function_entry),
      list(&quot;list&quot;                    , list)
      
    );

const eceval_controller =
list(
      branch(label(&quot;external_entry&quot;)), // branches if flag is set    

      &quot;read_evaluate_print_loop&quot;,
      perform(list(op(&quot;initialize_stack&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;user_read&quot;), constant(&quot;EC-evaluate input:&quot;))),
      test(list(op(&quot;is_null&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;evaluator_done&quot;)),
      assign(&quot;comp&quot;, list(op(&quot;parse&quot;), reg(&quot;comp&quot;))),
      assign(&quot;env&quot;, list(op(&quot;get_current_environment&quot;))),

      assign(&quot;val&quot;, list(op(&quot;scan_out_declarations&quot;), reg(&quot;comp&quot;))),
      save(&quot;comp&quot;), // temporarily store to comp
      assign(&quot;comp&quot;, list(op(&quot;list_of_unassigned&quot;), reg(&quot;val&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;val&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      perform(list(op(&quot;set_current_environment&quot;), reg(&quot;env&quot;))),
      restore(&quot;comp&quot;),
      assign(&quot;continue&quot;, label(&quot;print_result&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;external_entry&quot;,
      perform(list(op(&quot;initialize_stack&quot;))),
      assign(&quot;env&quot;, list(op(&quot;get_current_environment&quot;))),
      assign(&quot;continue&quot;, label(&quot;print_result&quot;)),
      go_to(reg(&quot;val&quot;)),

      &quot;print_result&quot;,
      perform(list(op(&quot;user_print&quot;),
                   constant(&quot;EC-evaluate value:&quot;), reg(&quot;val&quot;))),
      go_to(label(&quot;read_evaluate_print_loop&quot;)), 

      &quot;eval_dispatch&quot;,
      test(list(op(&quot;is_literal&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_literal&quot;)),
      test(list(op(&quot;is_name&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_name&quot;)),
      test(list(op(&quot;is_operator_combination&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_operator_combination&quot;)),
      test(list(op(&quot;is_function_declaration&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_function_declaration&quot;)),
      test(list(op(&quot;is_operator_combination&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_operator_combination&quot;)),
      test(list(op(&quot;is_declaration&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_declaration&quot;)),
      test(list(op(&quot;is_assignment&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_assignment&quot;)),
      test(list(op(&quot;is_return_statement&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_return&quot;)),
      test(list(op(&quot;is_conditional&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_conditional&quot;)),
      test(list(op(&quot;is_lambda_expression&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_lambda&quot;)),
      test(list(op(&quot;is_sequence&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_sequence_start&quot;)),
      test(list(op(&quot;is_block&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_block&quot;)),
      test(list(op(&quot;is_application&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_application&quot;)),
      go_to(label(&quot;unknown_component_type&quot;)),

      &quot;ev_return&quot;,
      revert_stack_to_marker(),
      restore(&quot;continue&quot;),
      assign(&quot;comp&quot;, list(op(&quot;return_expression&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;ev_literal&quot;,
      assign(&quot;val&quot;, list(op(&quot;literal_value&quot;), reg(&quot;comp&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_name&quot;,
      assign(&quot;comp&quot;, list(op(&quot;symbol_of_name&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;lookup_symbol_value&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_lambda&quot;,
      assign(&quot;unev&quot;, list(op(&quot;lambda_parameter_symbols&quot;), reg(&quot;comp&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;lambda_body&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;make_function&quot;),
                         reg(&quot;unev&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),

      &quot;ev_operator_combination&quot;,
      assign(&quot;comp&quot;, list(op(&quot;operator_combination_to_application&quot;),
                          reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      
      &quot;ev_application&quot;,
      save(&quot;continue&quot;),
      save(&quot;env&quot;),
      assign(&quot;unev&quot;, list(op(&quot;arg_expressions&quot;), reg(&quot;comp&quot;))),
      save(&quot;unev&quot;),
      assign(&quot;comp&quot;, list(op(&quot;function_expression&quot;), reg(&quot;comp&quot;))),
      assign(&quot;continue&quot;, label(&quot;ev_appl_did_function_expression&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_did_function_expression&quot;,
      restore(&quot;unev&quot;), // the args
      restore(&quot;env&quot;),
      assign(&quot;argl&quot;, list(op(&quot;empty_arglist&quot;))),
      assign(&quot;fun&quot;, reg(&quot;val&quot;)), // the function_expression
      test(list(op(&quot;is_null&quot;),
                reg(&quot;unev&quot;))),
      branch(label(&quot;apply_dispatch&quot;)),
      save(&quot;fun&quot;),
      
      &quot;ev_appl_argument_expression_loop&quot;,
      save(&quot;argl&quot;),
      assign(&quot;comp&quot;, list(op(&quot;head&quot;), reg(&quot;unev&quot;))),
      test(list(op(&quot;is_last_argument_expression&quot;),
                reg(&quot;unev&quot;))),
      branch(label(&quot;ev_appl_last_arg&quot;)),
      save(&quot;env&quot;),
      save(&quot;unev&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_appl_accumulate_arg&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_accumulate_arg&quot;,
      restore(&quot;unev&quot;),
      restore(&quot;env&quot;),
      restore(&quot;argl&quot;),
      assign(&quot;argl&quot;, list(op(&quot;adjoin_arg&quot;),
                          reg(&quot;val&quot;), reg(&quot;argl&quot;))),
      assign(&quot;unev&quot;, list(op(&quot;tail&quot;), reg(&quot;unev&quot;))),
      go_to(label(&quot;ev_appl_argument_expression_loop&quot;)),
      
      &quot;ev_appl_last_arg&quot;,
      assign(&quot;continue&quot;, label(&quot;ev_appl_accum_last_arg&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_accum_last_arg&quot;,
      restore(&quot;argl&quot;),
      assign(&quot;argl&quot;, list(op(&quot;adjoin_arg&quot;),
                          reg(&quot;val&quot;), reg(&quot;argl&quot;))),
      restore(&quot;fun&quot;),
      go_to(label(&quot;apply_dispatch&quot;)),

&quot;compiled_apply&quot;,
  push_marker_to_stack(),
  assign(&quot;val&quot;, list(op(&quot;compiled_function_entry&quot;), reg(&quot;fun&quot;))),
  go_to(reg(&quot;val&quot;)),
      
      &quot;apply_dispatch&quot;,
  test(list(op(&quot;is_compiled_function&quot;), reg(&quot;fun&quot;))),
  branch(label(&quot;compiled_apply&quot;)),
      test(list(op(&quot;is_primitive_function&quot;),
                reg(&quot;fun&quot;))),
      branch(label(&quot;primitive_apply&quot;)),
      test(list(op(&quot;is_compound_function&quot;),
                reg(&quot;fun&quot;))),
      branch(label(&quot;compound_apply&quot;)),
      go_to(label(&quot;unknown_function_type&quot;)),

      &quot;primitive_apply&quot;,
      assign(&quot;val&quot;, list(op(&quot;apply_primitive_function&quot;), 
                         reg(&quot;fun&quot;), 
                         reg(&quot;argl&quot;))),
      restore(&quot;continue&quot;),
      go_to(reg(&quot;continue&quot;)),

      &quot;compound_apply&quot;,
      assign(&quot;unev&quot;, list(op(&quot;function_parameters&quot;), reg(&quot;fun&quot;))),
      assign(&quot;env&quot;, list(op(&quot;function_environment&quot;), reg(&quot;fun&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;unev&quot;), reg(&quot;argl&quot;), reg(&quot;env&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;function_body&quot;), reg(&quot;fun&quot;))),
      push_marker_to_stack(),
      assign(&quot;continue&quot;, label(&quot;return_undefined&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;return_undefined&quot;,
      assign(&quot;val&quot;, constant(undefined)),
      revert_stack_to_marker(),
      restore(&quot;continue&quot;),
      go_to(reg(&quot;continue&quot;)),

      &quot;ev_block&quot;,
      assign(&quot;comp&quot;, list(op(&quot;block_body&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;scan_out_declarations&quot;), reg(&quot;comp&quot;))),

      save(&quot;comp&quot;), // temporarily store to comp
      assign(&quot;comp&quot;, list(op(&quot;list_of_unassigned&quot;), reg(&quot;val&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;val&quot;), 
                         reg(&quot;comp&quot;), 
                         reg(&quot;env&quot;))),
      restore(&quot;comp&quot;),
      go_to(label(&quot;eval_dispatch&quot;)),

&quot;ev_sequence_start&quot;,
      assign(&quot;unev&quot;, list(op(&quot;sequence_statements&quot;), reg(&quot;comp&quot;))),
      save(&quot;continue&quot;),

&quot;ev_sequence&quot;,
      assign(&quot;comp&quot;, list(op(&quot;first_statement&quot;), reg(&quot;unev&quot;))),
      test(list(op(&quot;is_last_statement&quot;), reg(&quot;unev&quot;))),
      branch(label(&quot;ev_sequence_last_statement&quot;)),
      save(&quot;unev&quot;),
      save(&quot;env&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_sequence_continue&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
&quot;ev_sequence_continue&quot;,
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      assign(&quot;unev&quot;, list(op(&quot;rest_statements&quot;), reg(&quot;unev&quot;))),
      go_to(label(&quot;ev_sequence&quot;)),
 
&quot;ev_sequence_last_statement&quot;,
      restore(&quot;continue&quot;),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;ev_conditional&quot;,
      save(&quot;comp&quot;), // save expression for later
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_conditional_decide&quot;)),
      assign(&quot;comp&quot;, list(op(&quot;conditional_predicate&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate the predicate
      
      &quot;ev_conditional_decide&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;comp&quot;),
      test(list(op(&quot;is_falsy&quot;), reg(&quot;val&quot;))),
      branch(label(&quot;ev_conditional_alternative&quot;)),
      
      &quot;ev_conditional_consequent&quot;,
      assign(&quot;comp&quot;, list(op(&quot;conditional_consequent&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_conditional_alternative&quot;,
      assign(&quot;comp&quot;, list(op(&quot;conditional_alternative&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_assignment&quot;,
      assign(&quot;unev&quot;, list(op(&quot;assignment_symbol&quot;), reg(&quot;comp&quot;))),
      save(&quot;unev&quot;), // save variable for later
      assign(&quot;comp&quot;, list(op(&quot;assignment_value_expression&quot;), reg(&quot;comp&quot;))),
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_assignment_1&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate assignment value
      
      &quot;ev_assignment_1&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      perform(list(op(&quot;assign_symbol_value&quot;),
                   reg(&quot;unev&quot;), reg(&quot;val&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_function_declaration&quot;,
      assign(&quot;comp&quot;, list(op(&quot;function_decl_to_constant_decl&quot;), reg(&quot;comp&quot;))),
      
      &quot;ev_declaration&quot;,
      assign(&quot;unev&quot;, list(op(&quot;declaration_symbol&quot;),
                          reg(&quot;comp&quot;))),
      save(&quot;unev&quot;), // save variable for later
      assign(&quot;comp&quot;, list(op(&quot;declaration_value_expression&quot;),
                          reg(&quot;comp&quot;))),
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_declaration_assign&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate declaration value
      
      &quot;ev_declaration_assign&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      perform(list(op(&quot;assign_symbol_value&quot;),
                   reg(&quot;unev&quot;), reg(&quot;val&quot;), reg(&quot;env&quot;))),
      assign(&quot;val&quot;, constant(undefined)),
      go_to(reg(&quot;continue&quot;)),
      
      // Error handling
      &quot;unknown_component_type&quot;,
      assign(&quot;val&quot;, constant(&quot;Unknown expression type&quot;)),
      go_to(label(&quot;signal_error&quot;)),
      
      &quot;unknown_function_type&quot;,
      restore(&quot;continue&quot;), /// clean up stack (from apply_dispatch)
      assign(&quot;val&quot;, constant(&quot;Unknown function type&quot;)),
      go_to(label(&quot;signal_error&quot;)),
      
      &quot;signal_error&quot;,
      perform(list(op(&quot;user_print&quot;),
                   constant(&quot;EC-evaluator error:&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;read_evaluate_print_loop&quot;)),
      
      &quot;evaluator_done&quot;
     );

const eceval =
    make_machine(list(&quot;comp&quot;, &quot;env&quot;, &quot;val&quot;, &quot;fun&quot;,
                      &quot;argl&quot;, &quot;continue&quot;, &quot;unev&quot;),
                 eceval_operations,
                 eceval_controller);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>compile_and_go</DECLARATION></INDEX>
      <NAME>compile_and_go</NAME>
      <EXAMPLE>compile_and_go_example</EXAMPLE>
      <REQUIRES>headline_4_1_1</REQUIRES>
      <REQUIRES>scan_out_declarations</REQUIRES>
      <REQUIRES>list_of_unassigned</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <REQUIRES>make_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <REQUIRES>compile</REQUIRES>
      <REQUIRES>make_instruction_sequence</REQUIRES>
      <REQUIRES>compile_linkage</REQUIRES>
      <REQUIRES>end_with_linkage</REQUIRES>
      <REQUIRES>compile_literal</REQUIRES>
      <REQUIRES>compile_assignment</REQUIRES>
      <REQUIRES>make_label</REQUIRES>
      <REQUIRES>compile_conditional</REQUIRES>
      <REQUIRES>compile_sequence</REQUIRES>
      <REQUIRES>make_compiled_function</REQUIRES>
      <REQUIRES>compile_lambda</REQUIRES>
      <REQUIRES>compile_lambda_body</REQUIRES>
      <REQUIRES>compile_return</REQUIRES>
      <REQUIRES>compile_block</REQUIRES>
      <REQUIRES>compile_application</REQUIRES>
      <REQUIRES>construct_arglist</REQUIRES>
      <REQUIRES>compile_function_call</REQUIRES>
      <REQUIRES>all_regs</REQUIRES>
      <REQUIRES>compile_fun_appl</REQUIRES>
      <REQUIRES>registers_needed</REQUIRES>
      <REQUIRES>needs_register</REQUIRES>
      <REQUIRES>append_instruction_sequences</REQUIRES>
      <REQUIRES>list_union</REQUIRES>
      <REQUIRES>preserving</REQUIRES>
      <REQUIRES>tack_on_instruction_sequence</REQUIRES>
      <REQUIRES>parallel_instruction_sequences</REQUIRES>
      <REQUIRES>user_print_2</REQUIRES>
      <REQUIRES>eceval_2</REQUIRES>
      <REQUIRES>display_instructions</REQUIRES>
      <SCHEME>
(define (compile-and-go expression)
  (let ((instructions
        (assemble (statements
                   (compile expression &apos;val &apos;return))
                  eceval)))
    (set! the-global-environment (setup-environment))
    (set-register-contents! eceval &apos;val instructions)
    (set-register-contents! eceval &apos;flag true)
    (start eceval)))
      </SCHEME>
      <!--   // display_instructions(
           //      instructions(compile(program, "val", "return")));
	     -->
      <JAVASCRIPT>
function compile_and_go(program) {
    const instrs = assemble(instructions(compile(program,
                                                 &quot;val&quot;, &quot;return&quot;)),
                            eceval);
    const toplevel_names = scan_out_declarations(program);
    const unassigneds = list_of_unassigned(toplevel_names);
    set_current_environment(extend_environment(
                               toplevel_names,
                               unassigneds, 
                               the_global_environment));
    set_register_contents(eceval, &quot;val&quot;, instrs);
    set_register_contents(eceval, &quot;flag&quot;, true);
    return start(eceval);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    If we have set up
    <INDEX>compiler for JavaScript<SUBINDEX>monitoring performance (stack use) of compiled code</SUBINDEX></INDEX>
    stack monitoring, as at the end of
    section<SPACE></SPACE><REF NAME="sec:running-evaluator"></REF>, we can examine the
    stack usage of compiled code:
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <NAME>compile_and_go_example_2</NAME>
      <REQUIRES>compile_and_go</REQUIRES>
      <SCHEME>
(compile-and-go
 &apos;(define (factorial n)
    (if (= n 1)
        1
        (* (factorial (- n 1)) n))))
      </SCHEME>
      <SCHEMEOUTPUT>
(total-pushes = 0 maximum-depth = 0)
;;; EC-Eval value:
ok
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
compile_and_go(parse(`
function factorial(n) {
    return n === 1
           ? 1
           : factorial(n - 1) * n;
}
                     `));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
total pushes = 0 
maximum depth = 0
EC-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEMEPROMPT>
;;; EC-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(factorial 5)
      </SCHEME>
      <SCHEMEOUTPUT>
(total-pushes = 31 maximum-depth = 14)
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
     </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
factorial(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
total pushes = 36 
maximum depth = 14
EC-evaluate value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    Compare
    <INDEX>compiler for JavaScript<SUBINDEX>explicit-control evaluator vs.</SUBINDEX></INDEX>
    this example with the evaluation of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(factorial 5)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>factorial(5)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    using the interpreted version of the same
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    shown at the end of section<SPACE></SPACE><REF NAME="sec:running-evaluator"></REF>.
    <SPLITINLINE>
      <SCHEME>
        The interpreted version required 144 pushes and a maximum stack depth of 28.
      </SCHEME>
      <JAVASCRIPT>
        The interpreted version required 151 pushes and a maximum stack depth of 28.
      </JAVASCRIPT>
    </SPLITINLINE>
    This illustrates the optimization that results from our compilation strategy.
  <!-- Error occurred while translating this section --></TEXT>

  <SUBHEADING>
    <NAME>Interpretation and compilation</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <INDEX>interpreter<SUBINDEX>compiler vs.</SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>compiler<SUBINDEX>interpreter vs.</SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    With the programs in this section, we can now experiment with the
    alternative execution strategies of interpretation and
    compilation.<FOOTNOTE>We can do even better by extending the compiler
    to allow compiled code to call interpreted
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    See exercise<SPACE></SPACE><REF NAME="ex:compiled-call-interpreted"></REF>.</FOOTNOTE>
    An interpreter raises the machine to the level of the user program; a
    compiler lowers the user program to the level of the machine language.
    We can regard the 
    <SPLITINLINE>
      <SCHEME>
        Scheme
      </SCHEME>
      <JAVASCRIPT>
        JavaScript
      </JAVASCRIPT>
    </SPLITINLINE>
    language (or any programming language) as a
    coherent family of abstractions erected on the machine language.
    Interpreters are good for interactive program development and
    debugging because the steps of program execution are organized in
    terms of these abstractions, and are therefore more intelligible
    to the programmer.
    Compiled code can execute faster, because the steps of program execution
    are organized in terms of the machine language, and the compiler is free
    to make optimizations that cut across the higher-level
    abstractions.<!-- Error occurred while translating this section --><FOOTNOTE>Independent of the strategy of execution, we
    incur significant overhead if we insist that
    <INDEX>error handling<SUBINDEX>in compiled code</SUBINDEX></INDEX>
    errors encountered in
    execution of a user program be detected and signaled, rather than being
    allowed to kill the system or produce wrong answers.  For example, an
    out-of-bounds array reference can be detected by checking the validity
    of the reference before performing it.  The overhead of checking,
    however, can be many times the cost of the array reference itself, and
    a programmer should weigh speed against safety in determining whether
    such a check is desirable.  A good compiler should be able to produce
    code with such checks, should avoid redundant checks, and should allow
    programmers to control the extent and type of error checking in the
    compiled code.
    <P></P>
      Compilers for popular languages, such as
      <INDEX>C<SUBINDEX>error handling</SUBINDEX></INDEX>
      C and C++,
      put hardly any error-checking operations into
      running code, so as to make things run as fast as possible.  As a
      result, it falls to programmers to explicitly provide error checking.
      Unfortunately, people often neglect to do this, even in
      critical applications where speed is not a constraint.  Their programs
      lead fast and dangerous lives.  For example, the notorious 
      <INDEX>Internet <QUOTE>Worm</QUOTE></INDEX>
      <QUOTE>Worm</QUOTE>
      that paralyzed the Internet in 1988 exploited the 
      <INDEX>UNIX</INDEX>
      UNIX<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE>
      operating system<APOS></APOS>s failure to check whether the input buffer has
      overflowed in the finger daemon. (See
      <INDEX>Spafford, Eugene H.</INDEX>
      <CITATION>Spafford 1989</CITATION>.)
  </FOOTNOTE>
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    The alternatives of interpretation and compilation also lead to
    different strategies for
    <INDEX>porting a language</INDEX>
    porting languages to new computers. Suppose
    that we wish to implement
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    for a new machine.  One strategy is
    to begin with the explicit-control evaluator of
    section<SPACE></SPACE><REF NAME="sec:eceval"></REF>
    and translate its instructions to instructions for the
    new machine.  A different strategy is to begin with the compiler and
    change the code generators so that they generate code for the new
    machine.  The second strategy allows us to run any
    <SPLITINLINE><SCHEME>Lisp</SCHEME>
    <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program on the new machine by first compiling it with the compiler running
    on our
    original <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system, and linking it with a compiled version of the runtime
    library.<FOOTNOTE>Of course, with either the interpretation or the
    compilation strategy we must also implement for the new machine storage
    allocation, input and output, and all the various operations that we took
    as <QUOTE>primitive</QUOTE> in our discussion of
    the evaluator and compiler.  One strategy for minimizing work here is
    to write as many of these operations as possible in
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    and then compile them for the new machine.  Ultimately, everything reduces
    to a small kernel (such as garbage collection and the mechanism for
    applying actual machine primitives) that is hand-coded for the new
    machine.</FOOTNOTE>  Better yet, we can compile the compiler itself, and run
    this on the new machine to compile other
    <!-- Error occurred while translating this section --><SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> programs.<FOOTNOTE>
    This strategy leads to amusing tests of correctness of
    the compiler, such as checking
    whether the compilation of a program on the new machine, using the
    compiled compiler, is identical with the
    compilation of the program on the original
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system.  Tracking down the source of differences is fun but often
    frustrating, because the results are extremely sensitive to minuscule
    details.</FOOTNOTE>  Or we can compile one of the interpreters of
    section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF> to produce an interpreter that
    runs on the new machine.
  <!-- Error occurred while translating this section --></TEXT>

  <EXERCISE>
    <LABEL NAME="ex:measure-factorial-ratio"></LABEL>
    By
    <INDEX>compiler for JavaScript<SUBINDEX>monitoring performance (stack use) of compiled code</SUBINDEX></INDEX>
    <INDEX><USE>factorial</USE><SUBINDEX>stack usage, compiled</SUBINDEX></INDEX>
    comparing the stack operations used by compiled code to the stack
    operations used by the evaluator for the same computation, we can
    determine the extent to which the compiler optimizes use of the stack,
    both in speed (reducing the total number of stack operations) and in
    space (reducing the maximum stack depth).  Comparing this optimized
    stack use to the performance of a special-purpose machine for the same
    computation gives some indication of the quality of the compiler.
    <!-- Error occurred while translating this section --><OL>
      <LI>
	Exercise<SPACE></SPACE><REF NAME="ex:rec-fact"></REF> asked you to determine, as a
	function of <LATEXINLINE>$n$</LATEXINLINE>, the number of pushes and
	the maximum stack depth needed by the evaluator to compute
	<LATEXINLINE>$n!$</LATEXINLINE> using the recursive factorial
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	given above.  Exercise<SPACE></SPACE><REF NAME="ex:measure-fact"></REF> asked you
	to do the same measurements for the special-purpose factorial machine
	shown in figure<SPACE></SPACE><REF NAME="fig:fact-machine"></REF>. Now perform the
	same analysis using the compiled <SCHEMEINLINE>factorial</SCHEMEINLINE>
	<SPLITINLINE>
	  <SCHEME>procedure.</SCHEME>
	  <JAVASCRIPT>function.</JAVASCRIPT>
	</SPLITINLINE>
	<TEXT>
	  <PDF_ONLY>\quad</PDF_ONLY>
	  Take the ratio of the number of pushes in the compiled version to the
	  number of pushes in the interpreted version, and do the same for the
	  maximum stack depth.  Since the number of operations and the stack
	  depth used to compute <LATEXINLINE>$n!$</LATEXINLINE> are linear in
	  <LATEXINLINE>$n$</LATEXINLINE>, these ratios should
	  approach constants as <LATEXINLINE>$n$</LATEXINLINE> becomes large.
	  What are these constants? Similarly, find the ratios of the stack usage
	  in the special-purpose machine to the usage in the interpreted version.
	</TEXT>
	<TEXT>
	  <PDF_ONLY>\quad</PDF_ONLY>
	Compare the ratios for special-purpose versus interpreted code to the
	ratios for compiled versus interpreted code.  You should find that the
	special-purpose machine is much more efficient than the compiled code, since
	the hand-tailored controller code should be much better than what is
	produced by our rudimentary general-purpose compiler.
	</TEXT>
      </LI>
      <LI>
	Can you suggest improvements to the compiler that would help it
	generate code that would come closer in performance to the
	hand-tailored version?
      </LI>
    <!-- Error occurred while translating this section --></OL>
  </EXERCISE>

  <EXERCISE>
    Carry out an analysis like the one in
    exercise<SPACE></SPACE><REF NAME="ex:measure-factorial-ratio"></REF> to determine the
    effectiveness of compiling the tree-recursive
    <INDEX>compiler for JavaScript<SUBINDEX>monitoring performance (stack use) of compiled code</SUBINDEX></INDEX>
    <INDEX><USE>fib</USE><SUBINDEX>stack usage, compiled</SUBINDEX></INDEX>
    Fibonacci
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <SCHEME>
(define (fib n)
  (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) { 
    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2); 
}
      </JAVASCRIPT>
    </SNIPPET>
    compared to the effectiveness of using the special-purpose Fibonacci machine
    of figure<SPACE></SPACE><REF NAME="fig:fib-machine"></REF>.  (For measurement of the
    interpreted performance, see exercise<SPACE></SPACE><REF NAME="ex:rec-fib"></REF>.)
    For Fibonacci, the time resource used is not linear in
    <LATEXINLINE>$n$</LATEXINLINE>; hence the ratios of stack operations will not
    approach a limiting value that is independent of
    <LATEXINLINE>$n$</LATEXINLINE>.
    <LABEL NAME="ex:measure-fib-ratio"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    This section described how to modify the explicit-control evaluator so
    that interpreted code can call compiled
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
    <JAVASCRIPT>functions.</JAVASCRIPT></SPLITINLINE>
    Show how to modify the compiler so that compiled
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    can call not only primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and compiled
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    but interpreted
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    as well.  This requires modifying
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-procedure-call</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_function_call</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to handle the case of compound (interpreted)
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Be sure to handle all the same <!-- Error occurred while translating this section --><SCHEMEINLINE>target</SCHEMEINLINE> and
    <!-- Error occurred while translating this section --><SCHEMEINLINE>linkage</SCHEMEINLINE> combinations
    as in
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>compile-proc-appl</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_fun_appl</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    To do the actual
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application,
    the code needs to jump to the evaluator<APOS></APOS>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compound-apply</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compound_apply</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    entry point. This label cannot be directly referenced in object code
    (since the assembler requires that all labels referenced by the
    code it is assembling be defined there), so we will add a register
    called <!-- Error occurred while translating this section --><SCHEMEINLINE>compapp</SCHEMEINLINE> to the evaluator machine to
    hold this entry point, and add an instruction to initialize it:
    <!-- Error occurred while translating this section --><SNIPPET LATEX="yes">
      <SCHEME>
  (assign compapp (label compound-apply))
  (branch (label external-entry))      ; branches if $\texttt{flag}$ is set
read-eval-print-loop
  $\ldots$
      </SCHEME>
      <JAVASCRIPT LATEX="yes"><!--   The $\texttt{ }\texttt{ }$ below is a hack to ensure the leading spaces are not consumed  -->
$\texttt{ }\texttt{ }$assign(&quot;compapp&quot;, label(&quot;compound_apply&quot;)),
  branch(label(&quot;external_entry&quot;)),     // branches if flag is set
&quot;read_evaluate_print_loop&quot;,
  $\ldots$
      </JAVASCRIPT>
    </SNIPPET>
    To test your code, start by
    <SPLITINLINE>
      <SCHEME>
	defining
      </SCHEME>
      <JAVASCRIPT>
	declaring
      </JAVASCRIPT>
    </SPLITINLINE>
    a
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <JAVASCRIPT>
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>f</SCHEMEINLINE> that calls a
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <JAVASCRIPT>
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>g</SCHEMEINLINE>.  Use
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>compile-and-go</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_@and_@go</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to compile the
    <SPLITINLINE>
      <SCHEME>
	definition
      </SCHEME>
      <JAVASCRIPT>
	declaration
      </JAVASCRIPT>
    </SPLITINLINE>
    of <!-- Error occurred while translating this section --><SCHEMEINLINE>f</SCHEMEINLINE>
    and start the evaluator.  Now, typing at the evaluator,
    <SPLITINLINE>
      <SCHEME>
	define
	<SCHEMEINLINE>g</SCHEMEINLINE> and try to call
	<SCHEMEINLINE>f</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	declare 
	<SCHEMEINLINE>g</SCHEMEINLINE> and try to call
	<SCHEMEINLINE>f</SCHEMEINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <!-- Error occurred while translating this section --><LABEL NAME="ex:compiled-call-interpreted"></LABEL>
  </EXERCISE>

  <EXERCISE>
    The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-and-go</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_and_go</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    interface implemented in this section is
    awkward, since the compiler can be called only once (when the
    evaluator machine is started).  Augment the compiler<ENDASH></ENDASH><PDF_ONLY>\linebreak[2]</PDF_ONLY>interpreter 
    interface by providing a
    <INDEX><USE>compile_and_run</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-and-run</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_and_run</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    primitive that can be called from within the explicit-control evaluator
    as follows:
    <SNIPPET EVAL="no" POSTPADDING="no">
      <SCHEMEPROMPT>
;;; EC-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(compile-and-run
 &apos;(define (factorial n)
    (if (= n 1)
        1
        (* (factorial (- n 1)) n))))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval value:
ok
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
     </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
compile_and_run(parse(`
function factorial(n) {
    return n === 1
           ? 1
           : factorial(n - 1) * n;
}
                      `));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET POSTPADDING="no">
      <SCHEMEPROMPT>
;;; EC-Eval input:
      </SCHEMEPROMPT>
      <SCHEME>
(factorial 5)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
     </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
factorial(5)
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-Eval value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <LABEL NAME="ex:5_51"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    As an alternative to using the explicit-control evaluator<APOS></APOS>s
    <SPLITINLINE>
      <SCHEME>
	read-eval-print
      </SCHEME>
      <JAVASCRIPT>
	read-evaluate-print
      </JAVASCRIPT>
    </SPLITINLINE>
    loop, design a register machine that performs a
    read-compile-execute-print loop.  That is, the machine should run a
    loop that reads
    <SPLITINLINE>
      <SCHEME>
	an expression,
      </SCHEME>
      <JAVASCRIPT>
	a program,
      </JAVASCRIPT>
    </SPLITINLINE>
    compiles it, assembles and
    executes the resulting code, and prints the result.  This is easy to
    run in our simulated setup, since we can arrange to call the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>compile</SCHEMEINLINE> and
    <SCHEMEINLINE>assemble</SCHEMEINLINE> as <QUOTE>register-machine
    operations.</QUOTE>
    <LABEL NAME="ex:read-compile-execute"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    Use the compiler to compile the
    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>compilation of</SUBINDEX></INDEX>
    metacircular evaluator of
    section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF> and run this program using the
    register-machine simulator.
    <SPLIT>
      <SCHEME>
	      (To compile more than one definition at a time,
	      you can package the definitions in a
	      <SCHEMEINLINE>begin</SCHEMEINLINE>.)
      </SCHEME>
      <JAVASCRIPT>
        Because the parser takes a string as input, you will need to
        convert the program into a string. The simplest way to do this is
        to use the back quotes (<JAVASCRIPTINLINE>`</JAVASCRIPTINLINE>),
        as we have done for the example inputs to
	<JAVASCRIPTINLINE>compile_and_go</JAVASCRIPTINLINE> and
        <JAVASCRIPTINLINE>compile_and_run</JAVASCRIPTINLINE>. 
      </JAVASCRIPT>
    </SPLIT>
    The resulting interpreter will run very slowly because of the multiple
    levels of interpretation, but getting all the details to work is an
    instructive exercise.
    <LABEL NAME="ex:5_53"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    Develop a rudimentary implementation of
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    in
    <INDEX>C<SUBINDEX>JavaScript interpreter written in</SUBINDEX></INDEX>
    C (or some other low-level language of your choice) by translating the
    explicit-control evaluator of section<SPACE></SPACE><REF NAME="sec:eceval"></REF>
    into C.  In order to run this code you will need to also
    provide appropriate storage-allocation routines and other runtime
    support.
    <LABEL NAME="ex:interp-in-C"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    As a counterpoint to exercise<SPACE></SPACE><REF NAME="ex:interp-in-C"></REF>, modify
    the compiler so that it compiles 
    <SPLITINLINE>
      <SCHEME>Scheme procedures</SCHEME>
      <JAVASCRIPT>JavaScript functions</JAVASCRIPT>
    </SPLITINLINE>
    into sequences of
    <INDEX>C<SUBINDEX>compiling JavaScript into</SUBINDEX></INDEX>
    <INDEX>C<SUBINDEX>JavaScript interpreter written in</SUBINDEX></INDEX>
    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>compilation of</SUBINDEX></INDEX>
    C instructions.  Compile the metacircular evaluator of
    section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF> to produce a
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>  
    interpreter written in C.
    <LABEL NAME="ex:compiler-in-C"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <INDEX>compiler for JavaScript<SUBINDEX>interfacing to evaluator<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>compiler for JavaScript<SUBINDEX>running compiled code<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>compiler for JavaScript<CLOSE></CLOSE></INDEX><!-- Error occurred while translating this section -->

</SUBSECTION>
