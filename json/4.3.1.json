[{"id":"/sicpjs/4.3.1","tag":"TITLE","body":"4.3.1  \n    \n      \n      Search and amb"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    To extend\n    JavaScript\n    to support nondeterminism, we introduce a new\n    syntactic form \n    called ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.3.1#footnote-1"},{"body":"\n    The expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb("},{"body":"$e_1,\\ e_2,\\ldots, e_n$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n    returns the value of one of the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" expressions\n    ","tag":"#text"},{"body":"$e_i$","tag":"LATEX"},{"body":"\"","tag":"#text"},{"body":"ambiguously.","tag":"#text"},{"body":"\" For example,\n    the expression\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAbASwGcAXACgEMBbAIwuwBpQAmFjAShdoYCIqfFnzp9OnANy4QoWACcApiRKg+AJQCuAOz6gAZgHs5oMgAsF+onPKgSBghrJEDWtKAAqATwAOC6WEUyOU9-UCItE3NQNQBRWAAZUBdIizkiAHNTMhZDYxojCzsHJxcSIA","body":"list(amb(1, 2, 3), amb(\"a\", \"b\")); "},{"body":"\n    can have six possible values:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"list(1, \"a\") list(1, \"b\") list(2, \"a\") \nlist(2, \"b\") list(3, \"a\") list(3, \"b\")"},{"body":"\n\tAn ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expression\n      \n    with a single choice produces an ordinary (single) value.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n\tAn ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expression\n      \n    with no choices—the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb()"},{"body":"—is\n      \n    an expression with no acceptable values.  Operationally, we can think of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb()"},{"body":"\n    as an expression that when evaluated causes the computation to\n    \"","tag":"#text"},{"body":"fail","tag":"#text"},{"body":"\": The computation aborts and no value is produced.\n    Using this idea, we can express the requirement that a particular predicate\n    expression ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"p"},{"body":" must be true as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AJwFMBHIq5gCgAcBKUAN65QI0FQKhOAQlB9Bw0YoCGAWwBGnXgG4FIgL6gmAGwDOTQXtyXcZOiYqgAHqAC8oVRuwAaUBh8BWHwB2HwBObVxmNg4mTmcAPjcUCMcdEFBYZhMTUAAiACVSXNACGgZQCgALcwIOe1ATGiMiajo0UAAVAE9uJlx05goGLv6wKnoq83yAUVgAGVA6CurGKgBzSoofUvKVMvNG5taSEyA","body":"function require(p) {\n    if (! p) {\n        amb();\n    } else {}\n} "}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    With ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"require"},{"body":", we can implement the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"an_element_of"},{"body":" function\n      \n    used above:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AQxIH0BTAG1YFtWSLmaBABRUK3AM4BKUAG9coBaABOrAI5EqKoQEJQVccxJF27EWK5TJAbnmKVFIkvoMuAIyEALVgwAmZiZIANIwsHNy8-IJCFAxUpqIBkta4AL74ZHTiFKAAHuKgALyg7PoUQgBEDAAOVZzlweWuTM31oOVkSkyurEpKAJ7lyUxsnDx8AsJ51gCQuCCgsCri+eUASqTloAQ0SqAUXluaWaDiNOxE1HRooAAqfVWsc2D2-U969PusoKsAorAAMqA6HsDkoqABzDwUYLbXZcHZfU7nS4kcRAA","body":"function an_element_of(items) {\n    require(! is_null(items));\n    return amb(head(items), an_element_of(tail(items)));\n} "},{"body":"\n\tAn application of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"an_element_of"},{"body":"\n    fails if the list is empty.  Otherwise it ambiguously returns either the\n    first element of the list or an element chosen from the rest of the list.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    We can also express infinite ranges of choices.  The following\n    function\n    potentially returns any integer greater than or equal to some\n    given ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AQxIH0qSKBTAcw4CdmAzhQa9qJLswK8aAWwAUJAJSgA3rlAbQvDhSK96DGQCMFAGkYs2nHvyEixEqbIWgA1KGyLFAblwBffDI6IVAAD1AAXgtWdm4+QWFRNkdpeU9fbQBHIiptOXCAPij0AFYfXFDfEFBYbQEBUAAiACVSRtACGl5QCgALDg7ckIEaABsiajo0UAAVAE8ABw5cau0KXjmVsDYe-tBmgFFYABlQOl2B3iouXopzTu6ZLoGR8cmSASA","body":"function an_integer_starting_from(n) {\n    return amb(n, an_integer_starting_from(n + 1));\n} "},{"body":"\n    This is like the stream\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers_starting_from"},{"body":"  \n    described in section ","tag":"#text"},{"tag":"REF","body":"3.5.2","href":"/sicpjs/3.5.2"},{"body":", but with an\n    important difference: The stream\n    function\n    returns an object that represents the sequence of all integers beginning\n    with ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":", whereas the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"function\n    returns a single integer.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.3.1#footnote-2"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Abstractly, we can imagine that evaluating an\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expression causes\n    \n    time to split into\n    branches, where the computation continues on each branch with one of the\n    possible values of the expression.  We say that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" represents a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"nondeterministic choice point","tag":"#text"}]},{"body":". If we had a machine with a\n    sufficient number of processors that could be dynamically allocated, we\n    could implement the search in a straightforward way.  Execution would\n    proceed as in a sequential machine, until an ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"\n    expression is encountered.  At this point, more processors would be allocated\n    and initialized to continue all of the parallel executions implied by the\n    choice.  Each processor would proceed sequentially as if it were the only\n    choice, until it either terminates by encountering a failure, or it further\n    subdivides, or it finishes.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.3.1#footnote-3"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    On the other hand, if we have a machine that can execute only one process\n    (or a few concurrent processes), we must consider the alternatives\n    \n    sequentially. One could imagine modifying an evaluator to pick at random a\n    branch to follow whenever it encounters a choice point.  Random choice,\n    however, can easily lead to failing values. We might try running the\n    evaluator over and over, making random choices and hoping to find a\n    non-failing value, but it is better to \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"systematically search","tag":"#text"}]},{"body":" all possible execution paths. The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator that we will develop and work\n    with in this section implements a systematic search as follows: When the\n    evaluator encounters an application of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":", it\n    initially selects the first alternative.  This selection may itself lead to\n    a further choice.  The evaluator will always initially choose the first\n    alternative at each choice point.  If a choice results in a failure, then\n    the evaluator\n    \n    automagically","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.3.1#footnote-4"},{"tag":"EM","child":[{"body":"backtracks","tag":"#text"}]},{"body":" to the most recent choice point and tries the next\n    alternative.  If it runs out of alternatives at any choice point, the\n    evaluator will back up to the previous choice point and resume from there.\n    This process leads to a search strategy known as \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"depth-first search","tag":"#text"}]},{"body":" or\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"chronological\n    backtracking","tag":"#text"}]},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/4.3.1#footnote-5"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Driver loop","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    The\n    \n    driver loop for the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator has some\n    unusual properties.  It reads\n    a program    \n    and prints the value of the\n    first non-failing execution, as in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"prime_sum_pair"},{"body":"\n    example shown above.  If we want to see the value of the next successful\n    execution, we can ask the interpreter to backtrack and attempt to generate a\n    second non-failing execution.\n    \n\tThis is signaled by typing \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":".\n\tIf any other input except ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n\tis given, the interpreter will start a new problem, discarding the\n\tunexplored alternatives in the previous problem.\n      \n    Here is a sample interaction:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"body":"prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110)); ","prependLength":34,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSg2Pz8qpFaMbr6BtXsVIU8pcLlYrM6cYkN1Qxl4sfunvTMbFzcABacrEbcB5Og7SSbJx+gAPygFOxEnHen2OAC49IYTOYGFZbI1QLd7o9DvwgcCxD8CKxrAxAWiPmCqHtuBkuKxCgZMlRrEjJqpjhpjpUvITUo9lqtDtNcGQ6BlQEsVpwGIF+XUGgAmeyovHHZqBdoku7kghUonSmUahYC1aOdUavHxRIpNIGDJZeIDArFDCTPV4qaaaI7fnszimojk2r1bjWfQUbCOX0ZcWuY7vHkkPmsEWsEgGTi2VYJAw0Ag+v0TOniCN8ywxuMJzhJigptNBighrNiLgseo8LWu7jRsaWWnvJn0ctNxytrm4bVuhgexZi9MZbgB0AYRwAVkcAA5+IG-dxxSFHBg5+NsCE2yBQLAuAxhQAiABKpBPoAINHYv1u1-qfIYNGsRB2aFAABUnNVAfvJHYJxcH3eJ704UAzwAUVgAAZUBdAoB9liSa4KEcG870KW8IJfN8dgYIA","output":"Starting a new problem\namb-evaluate value:\n[3, [20, null]]"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"body":"retry ","prependLength":34,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSg2Pz8qpFaMbr6BtXsVIU8pcLlYrM6cYkN1Qxl4sfunvTMbFzcABacrEbcB5Og7SSbJx+gAPygFOxEnHen2OAC49IYTOYGFZbI1QLd7o9DvwgcCxD8CKxrAxAWiPmCqHtuBkuKxCgZMlRrEjJqpjhpjpUvITUo9lqtDtNcGQ6BlQEsVpwGIF+XUGgAmeyovHHZqBdoku7kghUonSmUahYC1aOdUavHxRIpNIGDJZeIDArFDCTPV4qaaaI7fnszimojk2r1bjWfQUbCOX0ZcWuY7vHkkPmsEWsEgGTi2VYJAw0Ag+v0TOniCN8ywxuMJzhJigptNBighrNiLgseo8LWu7jRsaWWnvJn0ctNxytrm4bVuhgexZi9MZbgB0AYRwAVkcAA5+IG-dxxSFHBg5+NsCE2yBQLAuAxhQAiABKpBPoAINHYv1u1-qfIYNGsRB2aFAABUnNVAfvJHYJxcH3eJ704UAzwAUVgAAZUBdAoB9liSa4KEcG870KW8IJfN8dgYIA","output":"amb-evaluate value:\n[3, [110, null]]"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"body":"retry ","prependLength":34,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSg2Pz8qpFaMbr6BtXsVIU8pcLlYrM6cYkN1Qxl4sfunvTMbFzcABacrEbcB5Og7SSbJx+gAPygFOxEnHen2OAC49IYTOYGFZbI1QLd7o9DvwgcCxD8CKxrAxAWiPmCqHtuBkuKxCgZMlRrEjJqpjhpjpUvITUo9lqtDtNcGQ6BlQEsVpwGIF+XUGgAmeyovHHZqBdoku7kghUonSmUahYC1aOdUavHxRIpNIGDJZeIDArFDCTPV4qaaaI7fnszimojk2r1bjWfQUbCOX0ZcWuY7vHkkPmsEWsEgGTi2VYJAw0Ag+v0TOniCN8ywxuMJzhJigptNBighrNiLgseo8LWu7jRsaWWnvJn0ctNxytrm4bVuhgexZi9MZbgB0AYRwAVkcAA5+IG-dxxSFHBg5+NsCE2yBQLAuAxhQAiABKpBPoAINHYv1u1-qfIYNGsRB2aFAABUnNVAfvJHYJxcH3eJ704UAzwAUVgAAZUBdAoB9liSa4KEcG870KW8IJfN8dgYIA","output":"amb-evaluate value:\n[8, [35, null]]"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"body":"retry ","prependLength":34,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSg2Pz8qpFaMbr6BtXsVIU8pcLlYrM6cYkN1Qxl4sfunvTMbFzcABacrEbcB5Og7SSbJx+gAPygFOxEnHen2OAC49IYTOYGFZbI1QLd7o9DvwgcCxD8CKxrAxAWiPmCqHtuBkuKxCgZMlRrEjJqpjhpjpUvITUo9lqtDtNcGQ6BlQEsVpwGIF+XUGgAmeyovHHZqBdoku7kghUonSmUahYC1aOdUavHxRIpNIGDJZeIDArFDCTPV4qaaaI7fnszimojk2r1bjWfQUbCOX0ZcWuY7vHkkPmsEWsEgGTi2VYJAw0Ag+v0TOniCN8ywxuMJzhJigptNBighrNiLgseo8LWu7jRsaWWnvJn0ctNxytrm4bVuhgexZi9MZbgB0AYRwAVkcAA5+IG-dxxSFHBg5+NsCE2yBQLAuAxhQAiABKpBPoAINHYv1u1-qfIYNGsRB2aFAABUnNVAfvJHYJxcH3eJ704UAzwAUVgAAZUBdAoB9liSa4KEcG870KW8IJfN8dgYIA","output":"There are no more values of\nprime_sum_pair([1, [3, [5, [8, null]]]], [20, [35, [110, null]]])"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"body":"prime_sum_pair(list(19, 27, 30), list(11, 36, 58)); ","prependLength":34,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSg2Pz8qpFaMbr6BtXsVIU8pcLlYrM6cYkN1Qxl4sfunvTMbFzcABacrEbcB5Og7SSbJx+gAPygFOxEnHen2OAC49IYTOYGFZbI1QLd7o9DvwgcCxD8CKxrAxAWiPmCqHtuBkuKxCgZMlRrEjJqpjhpjpUvITUo9lqtDtNcGQ6BlQEsVpwGIF+XUGgAmeyovHHZqBdoku7kghUonSmUahYC1aOdUavHxRIpNIGDJZeIDArFDCTPV4qaaaI7fnszimojk2r1bjWfQUbCOX0ZcWuY7vHkkPmsEWsEgGTi2VYJAw0Ag+v0TOniCN8ywxuMJzhJigptNBighrNiLgseo8LWu7jRsaWWnvJn0ctNxytrm4bVuhgexZi9MZbjYACcjnFAHZHBgQvxA36JwHQBgAGyOACsAA42yBQLAuAxhQAiABKpHPoAINHYv1ud-qfIYNGsRB2aFAABUnNUgJHpI7BOLgR7xE+nCgJeACisAADKgLoFDPssSTXBQjj3o+hQPtB76fjsDBAA","output":"Starting a new problem\namb-evaluate value:\n[30, [11, null]]"}]},{"tag":"EXERCISE","title":"Exercise 4.33","id":"#ex-4.33","child":[{"body":"\n    Write a\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"an_integer_between"},{"body":"\n    that returns an integer between two given bounds.  This can be used to\n    implement a\n    function\n    that finds\n    \n    Pythagorean triples, i.e., triples of integers\n    ","tag":"#text"},{"body":"$(i,j,k)$","tag":"LATEX"},{"body":" between the given bounds such\n    that ","tag":"#text"},{"body":"$i \\leq j$","tag":"LATEX"},{"body":" and\n    ","tag":"#text"},{"body":"$i^2 + j^2 =k^2$","tag":"LATEX"},{"body":", as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AQwH0AHATwoAsaBzGgJwCmDEkwr8qLADaCmAI0EUA7oMEkAFFJpKANKE5UenAJSgA3qEtXcV0GToBnCqCqgAvI1FUSFQT0H88ooqapraegZGxgDcNlb2JE6gAFbunkzevv6BCsqqGlQRhiaxtglJANZpIhk+fgFBeaHJRVGlVkIAjkRUQuquAFQuoADUKaBDqW7ToFVDFTFxlkIURPz0UlRO-Xots4sAvvjM7Fy8AsKi4pIyjSEaAKx62A+LIKCwQg4OoABEAEqkX6gAgCUBcQQg3pJBw0KREah0NCgAAqbBYglw7xW-DYWLA3nBnEh-wAorAADKgOhEyESIwUPSg-igAC2F1AsPhiMSQA","body":"function a_pythogorean_triple_between(low, high) {      \n    const i = an_integer_between(low, high);\n    const j = an_integer_between(i, high);\n    const k = an_integer_between(j, high);\n    require(i * i + j * j === k * k);\n    return list(i, j, k);\n} "}],"solution":[{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuRQBnAewBsBXAFwEsSA7UAIwE9QBxGqgCQqdApEApgCdQAKwYBDKgAsp9KiREihRfADMK9AMa0GoBQH0aioQHNRRpkKoB3IUPoAKMiTsAaULJrnZASlAAb1xQMNBVAEcKGlVXd1AAHgBeb18AgG5Q8NUqChFGKQBbJnjPQ3oTM0sRa1sHJzKAamwvHz9-fyyAXyA","body":"// solution by GitHub user jonathantorres\n\nfunction an_integer_between(low, high) {\n    require(low <= high);\n    return amb(low, an_integer_between(low+1, high));\n} "}]},{"tag":"EXERCISE","title":"Exercise 4.34","id":"#ex-4.34","child":[{"body":"\n    Exercise ","tag":"#text"},{"tag":"REF","body":"3.69","href":"/sicpjs/3.5.3#ex-3.69"},{"body":" discussed how to\n    generate the stream of ","tag":"#text"},{"tag":"EM","child":[{"body":"all","tag":"#text"}]},{"body":"\n    Pythagorean triples, with no upper bound\n    on the size of the integers to be searched.  Explain why simply replacing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"an_integer_between"},{"body":"\n    by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"an_integer_starting_from"},{"body":"\n    in the\n    function\n    in\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.33","href":"/sicpjs/4.3.1#ex-4.33"},{"body":" is not an adequate way to\n    generate arbitrary Pythagorean triples.  Write a\n    function\n    that actually will accomplish this.  (That is, write a\n    function\n    for which repeatedly typing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    would in principle eventually generate all Pythagorean triples.)\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.35","id":"#ex-4.35","child":[{"body":"\n    Ben Bitdiddle claims that the following method for generating\n    \n    Pythagorean\n    triples is more efficient than the one in\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.33","href":"/sicpjs/4.3.1#ex-4.33"},{"body":".  Is he correct?\n    (Hint: Consider the number of possibilities that must be explored.)\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":0,"program":"chap=3&variant=non-det&prgrm=PTAEGUEkGEAVQFLlAFgHQGY0EYBQuAzAVwDsBjAFwEsB7E0AQwH0AHATwoAsGBzGgJwCmDEkwr8qLADaCmAI0EUA7oMEkAFFJpKANKE5UenAJSgA3rlBXQZOgGcKoKqAC8jUVRIVBPQf3mKKmqa2noGRsYA3JbWtiQO+nYAjq76hpygAFRpRtHWNvaOAFapIkye3r7+CsqqGlRh6VExVnEJANbJqc7ZzgDUoCXZRXnWQklEVELqnF0AfG6dSc35bY7tqQC2DFxMyfwU6ksrY4ITU4LqVHblXj5+R8YnVkIURPz0UteHDYN67c0AL74Yjkah0Jw3Cr3fjqAAepgs+Ve73ocNcLjc212BC0AnhQNwzHYXF4AmEonEkhkAVqwQArHpsPSokA","body":"function a_pythagorean_triple_between(low, high) {\n    const i = an_integer_between(low, high);\n    const hsq = high * high;\n    const j = an_integer_between(i, high);\n    const ksq = i * i + j * j;\n    require(hsq >= ksq);\n    const k = math_sqrt(ksq);\n    require(is_integer(k));\n    return list(i, j, k);\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.3.1#footnote-link-1","child":[{"body":"The idea of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" for nondeterministic programming was\n    first described in 1961 by\n    \n    John McCarthy (see\n    McCarthy 1967).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.3.1#footnote-link-2","child":[{"body":"In actuality, the distinction between\n    nondeterministically returning a single choice and returning all choices\n    depends somewhat on our point of view.  From the perspective of the code\n    that uses the value, the nondeterministic choice returns a single value.\n    From the perspective of the programmer designing the code, the\n    nondeterministic choice potentially returns all possible values, and the\n    computation branches so that each value is investigated\n    separately.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.3.1#footnote-link-3","child":[{"body":"One might object that this is a\n    hopelessly inefficient mechanism.  It might require millions of processors\n    to solve some easily stated problem this way, and most of the time most\n    of those processors would be idle.  This objection should be taken in\n    the context of history.  Memory used to be considered just such an\n    expensive commodity.  \n    \n    In 1965 a megabyte of RAM cost about $400,000. Now every personal\n    computer has many gigabytes of RAM, and most of the time most of that RAM is\n    unused.  It is hard to underestimate the cost of mass-produced\n    electronics.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.3.1#footnote-link-4","child":[{"body":"Automagically: \"","tag":"#text"},{"body":"Automatically, but in a way\n    which, for some reason (typically because it is too complicated, or too ugly,\n    or perhaps even too trivial), the speaker doesn't feel like\n    explaining.","tag":"#text"},{"body":"\"\n    (Steele 1983,\n    Raymond 1996)","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/4.3.1#footnote-link-5","child":[{"body":"The integration of\n    \n    automatic search strategies\n    into programming languages has had a long and checkered history.  The first\n    suggestions that nondeterministic algorithms might be elegantly encoded in a\n    programming language with search and automatic backtracking came from\n    \n    Robert Floyd (1967).  \n    \n    Carl Hewitt (1969) invented a programming language called \n    \n    Planner that explicitly supported automatic chronological backtracking,\n    providing for a built-in depth-first search strategy.  \n    \n    Sussman, Winograd, and Charniak (1971) implemented a subset of this language,\n    called \n    \n    MicroPlanner, which was used to support work in problem solving and robot\n    planning. Similar ideas, arising from logic and theorem proving, led to the\n    genesis in Edinburgh and Marseille of the elegant language \n    \n    Prolog (which we will discuss in\n    section ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.4"},{"body":").  After sufficient\n    frustration with automatic search, \n    \n    McDermott and Sussman (1972) developed a language called \n    \n    Conniver, which included mechanisms for placing the search strategy under\n    programmer control.  This proved unwieldy, however, and \n    \n    Sussman and Stallman (1975) found a more tractable approach while\n    investigating methods of symbolic analysis for electrical circuits.  They\n    developed a nonchronological backtracking scheme that was based on tracing\n    out the logical dependencies connecting facts, a technique that has come to\n    be known as \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"dependency-directed backtracking","tag":"#text"}]},{"body":".  Although their method was\n    complex, it produced reasonably efficient programs because it did little\n    redundant search.  \n    Doyle (1979) and\n    McAllester (1978, 1980)\n    generalized and clarified the methods of Stallman and Sussman, developing a\n    new paradigm for formulating search that is now called\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"truth maintenance","tag":"#text"}]},{"body":".\n    \n\tMany problem-solving systems\n      \n    use some form of truth-maintenance system as a substrate.  See \n    Forbus and de Kleer 1993 for a discussion of elegant\n    ways to build truth-maintenance systems and applications using truth\n    maintenance.\n    Zabih, McAllester, and Chapman 1987 describes a\n    \n    nondeterministic extension to Scheme that is based on\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"; it is similar to the interpreter described\n    in this section, but more sophisticated, because it uses dependency-directed\n    backtracking rather than chronological\n    backtracking.\n    Winston 1992 gives an introduction to\n    both kinds of backtracking.","tag":"#text"}]}]