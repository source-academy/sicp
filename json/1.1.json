[{"id":"/sicpjs/1.1","tag":"TITLE","body":"1.1  The Elements of Programming"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    A powerful programming language is more than just a means for\n    instructing a computer to perform tasks.  The language also serves as\n    a framework within which we organize our ideas about processes.  Thus,\n    when we describe a language, we should pay particular attention to the\n    means that the language provides for combining simple ideas to form\n    more complex ideas.  Every powerful language has three mechanisms for\n    accomplishing this:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"B","child":[{"body":"primitive expressions","tag":"#text"}]},{"body":",\n\t\n\twhich represent the simplest\n        entities the language is concerned with,\n      ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"B","child":[{"body":"means of combination","tag":"#text"}]},{"body":", by\n        \n\twhich compound elements are built from simpler ones, and\n      ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"B","child":[{"body":"means of abstraction","tag":"#text"}]},{"body":",\n        \n\tby which compound elements can be named and manipulated as units.\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In programming, we deal with two kinds of elements: \n    \n\tfunctions\n      \n    and\n    \n    data. (Later we will discover that they are really not so distinct.)\n    Informally, data is \"","tag":"#text"},{"body":"stuff","tag":"#text"},{"body":"\" that we want to manipulate, and\n    functions\n    are descriptions of the rules for manipulating the data.\n    Thus, any powerful programming language should be able to describe\n    primitive data and primitive \n    functions\n    and should have methods for\n    combining and abstracting \n    functions\n    and data.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    In this chapter we will deal only with simple\n    \n    numerical data so that\n    we can focus on the rules for building\n    functions.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.1#footnote-1"},{"body":"\n  In later chapters we will see that\n  these same rules allow us to build \n  functions\n  to manipulate compound data as well.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.1#footnote-link-1","child":[{"body":"The\n    \n    characterization of numbers as \"","tag":"#text"},{"body":"simple data","tag":"#text"},{"body":"\" is a barefaced\n    bluff. In fact, the treatment of numbers is one of the trickiest and most\n    confusing aspects of any programming language.  Some typical issues\n    involved are these:\n    \n    Some computer systems distinguish ","tag":"#text"},{"tag":"EM","child":[{"body":"integers","tag":"#text"}]},{"body":", such as 2,\n    from ","tag":"#text"},{"tag":"EM","child":[{"body":"real numbers","tag":"#text"}]},{"body":", such as 2.71.  Is the real number\n    2.00 different from the integer 2? Are the arithmetic operations\n    used for integers the same as the operations used for real numbers?\n    Does 6 divided by 2 produce 3, or 3.0? How large a number can we\n    represent? How many decimal places of accuracy can we represent?\n    Is the range of integers the same as the range of real numbers?\n    \n    Above and beyond these questions, of course, lies a collection of\n    issues concerning roundoff and truncation errors—the\n    entire science of numerical analysis.  Since our focus in this\n    book is on large-scale program design rather than on numerical\n    techniques, we are going to ignore these problems.  The numerical\n    examples in this chapter will exhibit the usual roundoff behavior\n    that one observes when using arithmetic operations that preserve\n    a limited number of decimal places of accuracy in noninteger\n    operations.\n  ","tag":"#text"}]}]