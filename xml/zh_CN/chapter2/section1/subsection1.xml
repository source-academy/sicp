<SUBSECTION> 
   <NAME>
    示例: 有理数的算术操作
  </NAME> 

  <LABEL NAME="sec:rationals"></LABEL>

   <TEXT>
    假设我们要进行
    <INDEX>算术<SUBINDEX>有理数上的</SUBINDEX><OPEN></OPEN></INDEX>
    <INDEX>有理数<SUBINDEX>算术操作</SUBINDEX><OPEN></OPEN></INDEX>
    <INDEX>有理数算术<OPEN></OPEN></INDEX>
    用有理数进行算术。我们希望能够对它们进行加、减、乘、除操作，并测试两个有理数是否相等。
  </TEXT> 

   <TEXT>
    我们假设已经有一种方法可以从分子和分母构造一个有理数。我们还假设，对于给定的有理数，我们有一种方法可以提取（或选择）它的分子和分母。进一步假设构造器和选择器可用作
    <SPLITINLINE>
      过程:
      <JAVASCRIPT>函数:</JAVASCRIPT>
    </SPLITINLINE>
    <UL>
      <LI>
	<SPLITINLINE>
	  (make-rat n d)
	  <JAVASCRIPT><JAVASCRIPTINLINE>make_rat(</JAVASCRIPTINLINE>$n$<JAVASCRIPTINLINE>, </JAVASCRIPTINLINE>$d$<JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	<INDEX><USE>make_rat</USE></INDEX> 
	返回一个分子为整数
	$n$，分母为整数
	$d$的有理数。
      </LI>
      <LI>
	<SPLITINLINE>
	  (numer x)
	  <JAVASCRIPT><JAVASCRIPTINLINE>numer(</JAVASCRIPTINLINE>$x$<JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE> 
	<INDEX><USE>numer</USE></INDEX> 
	返回有理数
	$x$的分子。
      </LI>
      <LI>
	<SPLITINLINE>
	  (denom x)
	  <JAVASCRIPT><JAVASCRIPTINLINE>denom(</JAVASCRIPTINLINE>$x$<JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	<INDEX><USE>denom</USE></INDEX> 
	返回有理数
	$x$的分母。
      </LI>
    </UL>
  </TEXT> 

   <TEXT>
    我们在这里使用了一种强大的合成策略：<INDEX>愿望思维</INDEX><EM>愿望思维</EM>。我们还没有说明有理数是如何表示的，也没有说明过程和<JAVASCRIPT>函数</JAVASCRIPT>numer，denom和<SPLITINLINE>make-rat<JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>应该如何实现。即便如此，如果我们拥有这三个过程<JAVASCRIPT>函数</JAVASCRIPT>，那么我们可以使用以下关系来进行加、减、乘、除和测试相等性：

    
      \[
      \begin{array}{rll}
      \dfrac{n_{1}}{d_{1}}+\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}+n_{2}d_{1}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}-\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}-n_{2}d_{1}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}\cdot\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}n_{2}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}/d_{1}}{n_{2}/d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}}{d_{1}n_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}
      &amp;=&amp;\dfrac{n_{2}}{d_{2}}\ \quad \textrm{当且仅当}\ \ \  n_{1}d_{2}\ =\ n_{2}d_{1}
      \end{array}
      \]
    
  </TEXT> 

   <TEXT>
    我们可以将这些规则表示为
    <SPLITINLINE>
      过程:
      <JAVASCRIPT>函数:</JAVASCRIPT>
    </SPLITINLINE>
    
      <INDEX><DECLARATION>add_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>sub_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>mul_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>div_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>equal_rat</DECLARATION></INDEX>
      <NAME>add_rat</NAME>
      <REQUIRES>make_rat2</REQUIRES>
      
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
      
      <JAVASCRIPT>
function add_rat(x, y) {
    return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                    denom(x) * denom(y));
}
function sub_rat(x, y) {
    return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                    denom(x) * denom(y));
}
function mul_rat(x, y) {
    return make_rat(numer(x) * numer(y),
                    denom(x) * denom(y));
}
function div_rat(x, y) {
    return make_rat(numer(x) * denom(y),
                    denom(x) * numer(y));
}
function equal_rat(x, y) {
    return numer(x) * denom(y) === numer(y) * denom(x);
}
      </JAVASCRIPT>
    
  </TEXT> 

   <TEXT>
    现在我们已经定义了有理数的操作，以选择器和构造器
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    numer，denom和
    <SPLITINLINE>
      make-rat.
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    但我们尚未定义这些。我们需要的是一种将分子和分母粘合在一起形成有理数的方法。
  </TEXT> 

   <SUBHEADING>
    <NAME>序对</NAME>
  </SUBHEADING> 

  <TEXT> 
    为了使我们能够实现数据抽象的具体层次，我们的
    <SPLITINLINE>
      
	语言
      
      <JAVASCRIPT>
	JavaScript 环境
      </JAVASCRIPT>
    </SPLITINLINE>
    提供了一种称为
    <INDEX>序对</INDEX>
    <EM>序对</EM>的复合结构，可以通过
      <SPLITINLINE>
	原语过程
	<JAVASCRIPT>原语函数</JAVASCRIPT>
      </SPLITINLINE>
      <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>序对</USE> (\textit{ns})</SUBINDEX></INDEX>
      <INDEX><USE>序对</USE> (原语函数)</INDEX>
      <SPLITINLINE>
	
	cons.
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>.</JAVASCRIPT>
      </SPLITINLINE>
      这种
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      接受两个参数并返回一个包含这两个参数作为部分的复合数据对象。给定一个序对，我们可以通过原语
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      <INDEX><USE>head</USE> (原语函数)</INDEX>
      <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>head</USE> (\textit{ns})</SUBINDEX></INDEX>
      <SPLITINLINE>
	car
	<JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE> 
      和
      <INDEX><USE>tail</USE> (原语函数)</INDEX>
      <INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>tail</USE> (\textit{ns})</SUBINDEX></INDEX>
      <SPLITINLINE>cdr<JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>. 
 <SPLITINLINE><FOOTNOTE>名称
      <INDEX><USE>cons</USE> (原语函数)<SUBINDEX>名称的意义</SUBINDEX></INDEX>
      cons代表<QUOTE>构造(constr)</QUOTE>。
      名称
      <INDEX><USE>car</USE> (原语函数)<SUBINDEX>名称的起源</SUBINDEX></INDEX>
      car和
      <INDEX><USE>cdr</USE> (原语函数)<SUBINDEX>名称的起源</SUBINDEX></INDEX>
      cdr来源于 Lisp 在
      <INDEX>IBM 704</INDEX>
      <INDEX>Lisp<SUBINDEX>最初在 IBM<SPACE></SPACE>704 上的实现</SUBINDEX></INDEX>
      上的最初实现。那台机器的寻址方案允许参考存储位置的<QUOTE>地址</QUOTE>和<QUOTE>减量</QUOTE>部分。Car代表
      <QUOTE>寄存器地址部分的内容</QUOTE>，而 cdr（发音 <QUOTE>could-er</QUOTE>）
      代表<QUOTE>寄存器减量部分的内容。</QUOTE></FOOTNOTE></SPLITINLINE>
      因此，我们可以如下使用
      <SPLITINLINE>
	cons,
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	car,
	<JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      和
      <SPLITINLINE>
	cdr
	<JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>
      </JAVASCRIPT></SPLITINLINE>
      ：
<SNIPPET PAGE="85">
        <NAME>cons_1_2</NAME>
        <EXAMPLE>cons_1_2_example</EXAMPLE>
        <SCHEME>
(define x (cons 1 2))
        </SCHEME>
        <JAVASCRIPT>
const x = pair(1, 2);
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_example</NAME>
	<EXPECTED>1</EXPECTED>
        <REQUIRES>cons_1_2</REQUIRES>
        <SCHEME>
(car x)
        </SCHEME>
	<SCHEMEOUTPUT>
1
	</SCHEMEOUTPUT>
        <JAVASCRIPT>
head(x);
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
1
	</JAVASCRIPT_OUTPUT>
      </SNIPPET>

      <SNIPPET PAGE="85">
        <NAME>cons_1_2_example2</NAME>
	<EXPECTED>2</EXPECTED>
        <REQUIRES>cons_1_2</REQUIRES>
        <SCHEME>
(cdr x)
        </SCHEME>
	<SCHEMEOUTPUT>
2
	</SCHEMEOUTPUT>
        <JAVASCRIPT>
tail(x);
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
2
	</JAVASCRIPT_OUTPUT>
      </SNIPPET> 
      注意，序对是一个可以被命名和操作的数据对象，就像一个原语数据对象。此外，
      <SPLITINLINE>
	cons
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      可以用于形成元素为序对的序对，依此类推：
<SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4</NAME>
        <EXAMPLE>cons_1_2_3_4_example</EXAMPLE>
        <SCHEME>
(define x (cons 1 2))

(define y (cons 3 4))

(define z (cons x y))
        </SCHEME>
        <JAVASCRIPT>
const x = pair(1, 2);

const y = pair(3, 4);

const z = pair(x, y);
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4_example</NAME>
	<EXPECTED>1</EXPECTED>
        <REQUIRES>cons_1_2_3_4</REQUIRES>
        <SCHEME>
(car (car z))
        </SCHEME>
	<SCHEMEOUTPUT>
1
	</SCHEMEOUTPUT>
        <JAVASCRIPT>
head(head(z));
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
1
	</JAVASCRIPT_OUTPUT>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4_example2</NAME>
	<EXPECTED>3</EXPECTED>
        <REQUIRES>cons_1_2_3_4</REQUIRES>
        <SCHEME>
(car (cdr z))
        </SCHEME>
	<SCHEMEOUTPUT>
3
	</SCHEMEOUTPUT>
        <JAVASCRIPT>
head(tail(z));
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
3
	</JAVASCRIPT_OUTPUT>
      </SNIPPET> 
      在<REF NAME="sec:hierarchical-data"></REF>节中，我们将看到这种组合序对的能力意味着序对可以用作通用构建模块来创建各种复杂的数据结构。由
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	cons,
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      <SPLITINLINE>
	
	car,
	<JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      和
      <SPLITINLINE>
	cdr,
	<JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      实现的唯一复合数据原语<EM>序对</EM>就是我们所需的粘合剂。由序对构造的数据对象称为
      <INDEX>列表结构</INDEX>
      <INDEX>数据<SUBINDEX>列表结构化</SUBINDEX></INDEX>
      <EM>列表结构化</EM>数据。
     </TEXT>

     <SUBHEADING>
      <NAME>表示有理数</NAME>
    </SUBHEADING> 

    <LONG_PAGE LINES="2"></LONG_PAGE>
    <TEXT> 
      序对提供了一种完成
      <INDEX>有理数<SUBINDEX>表示为序对</SUBINDEX></INDEX>
      有理数系统的自然方式。只需将有理数表示为两个整数的序对：分子和分母。然后
      <SPLITINLINE>make-rat,
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
<SCHEMEINLINE>numer</SCHEMEINLINE> ，和 <SCHEMEINLINE>denom</SCHEMEINLINE> 可以很容易地实现如下： <FOOTNOTE> 另一种定义选择器和构造器的方法是 <SNIPPET PAGE="86" EVAL="no">
        <NAME>make_rat</NAME>
        <SCHEME>
(define make-rat cons)
(define numer car)
(define denom cdr)
        </SCHEME>
        <JAVASCRIPT>
const make_rat = pair;
const numer = head;
const denom = tail;
        </JAVASCRIPT>
      </SNIPPET> 第一个定义将名称
      <SPLITINLINE>
	make-rat
	<JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      与表达式的值相关联
      <SPLITINLINE>
	cons,
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
      </SPLITINLINE>
      这是构造序对的原语
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      。因此，
      <SPLITINLINE>
	make-rat
	<JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      和
      <SPLITINLINE>
	cons
	<JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      是相同原语构造器的名称。
 <P>
        以这种方式定义选择器和构造器是高效的: 而不是调用
	<SPLITINLINE>
	  make-rat
	  <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	<EM>调用</EM>
	<SPLITINLINE>
	  cons,
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
	</SPLITINLINE>
	<SPLITINLINE>
	  make-rat
	  <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
        <EM>是</EM>
	<SPLITINLINE>
	  cons,
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
	</SPLITINLINE>
	因此当
	<SPLITINLINE>
	  make-rat
	  <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	被调用时只调用一次
        <SPLITINLINE>
	  过程
	  <JAVASCRIPT>函数</JAVASCRIPT>
	</SPLITINLINE>
        ，而不是两次。另一方面，这样做使得跟踪
        <SPLITINLINE>
          过程
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        调用或对
        <SPLITINLINE>
          过程
          <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>
        调用设置断点的调试辅助失效：您可能希望查看
	<SPLITINLINE>
	  make-rat
	  <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE> </JAVASCRIPT>
	</SPLITINLINE>
	被调用，但您肯定不想查看每个对
	<SPLITINLINE>
	  cons.
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>.</JAVASCRIPT>
	  </SPLITINLINE>
      </P>
 <P>
        在本书中，我们选择不使用这种定义风格。
	
      </P>
     </FOOTNOTE>
    <SNIPPET PAGE="86">
      <INDEX><DECLARATION>make_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>numer</DECLARATION></INDEX>
      <INDEX><DECLARATION>denom</DECLARATION></INDEX>
      <NAME>make_rat2</NAME>
      <EXPECTED>2</EXPECTED>
      <EXAMPLE>rat_example_1</EXAMPLE>
      <SCHEME>
(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))
      </SCHEME>
      <JAVASCRIPT>
function make_rat(n, d) { return pair(n, d); }
<SHORT_SPACE></SHORT_SPACE>
function numer(x) { return head(x); }
<SHORT_SPACE></SHORT_SPACE>
function denom(x) { return tail(x); }
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="86" HIDE="yes">
      <NAME>rat_example_1</NAME>
      <JAVASCRIPT>
numer(make_rat(2, 3));
      </JAVASCRIPT>
    </SNIPPET> 
    此外，为了显示我们计算的结果，我们可以通过打印分子、斜杠和
<SPLIT>
      <SCHEME>
	denominator:<FOOTNOTE>
	<SCHEMEINLINE>Display</SCHEMEINLINE> is
	the Scheme primitive for
	<INDEX>printing, primitives for</INDEX>
	<INDEX><USE>display</USE> (primitive function)</INDEX>
	<INDEX>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)<SUBINDEX><DECLARATION>display</DECLARATION></SUBINDEX></INDEX>
	printing data.  The Scheme primitive
	<INDEX><USE>newline</USE> (primitive function)</INDEX>
	<INDEX>primitive functions (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}<SUBINDEX><DECLARATION>newline</DECLARATION></SUBINDEX></INDEX>
	<SCHEMEINLINE>newline</SCHEMEINLINE> starts a new line for printing.
	Neither of these procedures returns a useful value, so in the uses of
	<SCHEMEINLINE>print-rat</SCHEMEINLINE> below, we show only what
	<SCHEMEINLINE>print-rat</SCHEMEINLINE> prints, not what the interpreter
	prints as the value returned by
	<SCHEMEINLINE>print-rat</SCHEMEINLINE>.</FOOTNOTE>
      </SCHEME>
       <JAVASCRIPT>
	分母。
	我们使用原语函数
	<INDEX><USE>stringify</USE> (原语函数)</INDEX>
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>stringify</USE><ECMA>JSON.stringify</ECMA></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>stringify</JAVASCRIPTINLINE>将任何值（此处为数字）转换为字符串。运算符
	<INDEX>字符串<SUBINDEX>连接</SUBINDEX></INDEX>
	<INDEX>连接字符串</INDEX>
        <INDEX><USE>+</USE><SUBINDEX>作为字符串连接运算符</SUBINDEX></INDEX>
        <INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>+</USE> (用于字符串连接)</SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>在 JavaScript 中是
	<INDEX>重载运算符 <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE></INDEX>
	<EM>重载的</EM>; 它可以应用于两个数字或两个字符串，在后者情况下，它返回<EM>连接</EM>两个字符串的结果。<FOOTNOTE>在 JavaScript 中，运算符
	<JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>也可以应用于字符串和数字以及其他操作数组合，但在本书中，
	我们选择将其应用于两个数字或两个字符串。
      </FOOTNOTE>
      </JAVASCRIPT>
     </SPLIT>
    <SNIPPET PAGE="86">
      <INDEX><DECLARATION>print_rat</DECLARATION></INDEX>
      <NAME>print_rat</NAME>
      <REQUIRES>make_rat2</REQUIRES>
      <EXAMPLE>print_rat_example_0</EXAMPLE>
      <SCHEME>
(define (print-rat x)
  (newline)
  (display (numer x))
  (display &quot;/&quot;)
  (display (denom x)))
      </SCHEME>
      <JAVASCRIPT>
function print_rat(x) {
    return display(stringify(numer(x)) + &quot; / &quot; + stringify(denom(x)));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="86" HIDE="yes">
      <NAME>print_rat_example_0</NAME>
      <SCHEME>
(define one-half (make-rat 1 2))

(print-rat one-half)
      </SCHEME>
      <SCHEMEOUTPUT>
1/2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
const one_half = make_rat(1, 2);

print_rat(one_half);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
&quot;1 / 2&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET> 
    现在我们可以尝试我们的有理数
    <SPLITINLINE>
      过程:
      <JAVASCRIPT>函数:<FOOTNOTE>
	原语函数
	<INDEX><USE>display</USE> (原语函数)</INDEX>	
	<INDEX><PRIMITIVE></PRIMITIVE><SUBINDEX><USE>display</USE> (\textit{ns})</SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>display</JAVASCRIPTINLINE>
	在练习<SPACE></SPACE><REF NAME="ex:search-for-primes"></REF>中介绍
	返回它的参数，但在下面
	<JAVASCRIPTINLINE>print_rat</JAVASCRIPTINLINE>的用法中，我们仅显示
	print_rat打印的内容，而不是解释器打印的
	<JAVASCRIPTINLINE>print_rat</JAVASCRIPTINLINE>返回的值。
      </FOOTNOTE></JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET PAGE="86">
      <NAME>print_rat_example</NAME>
      <EXPECTED>[ 1, 2 ]</EXPECTED>
      <REQUIRES>make_rat2</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(define one-half (make-rat 1 2))

(print-rat one-half)
      </SCHEME>
      <SCHEMEOUTPUT>
1/2
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
const one_half = make_rat(1, 2);

print_rat(one_half);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const one_half = make_rat(1, 2);

one_half;
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
&quot;1 / 2&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no" PAGE="86" HIDE="yes">
      <NAME>one_half</NAME>
      <SCHEME>
(define one-half (make-rat 1 2))
      </SCHEME>
      <JAVASCRIPT>
const one_half = make_rat(1, 2);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="no" PAGE="86">
      <NAME>one_third</NAME>
      <SCHEME>
(define one-third (make-rat 1 3))
      </SCHEME>
      <JAVASCRIPT>
const one_third = make_rat(1, 3);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="87">
      <NAME>print_rat_example2</NAME>
      <EXPECTED>[ 5, 6 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_half</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-half one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
5/6
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
print_rat(add_rat(one_half, one_third));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
add_rat(one_half, one_third);
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
&quot;5 / 6&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <NAME>print_rat_example3</NAME>
      <EXPECTED>[ 1, 6 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_half</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (mul-rat one-half one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
1/6
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
print_rat(mul_rat(one_half, one_third));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
mul_rat(one_half, one_third);
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
&quot;1 / 6&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <NAME>print_rat_example4</NAME>
      <EXPECTED>[ 6, 9 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-third one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
6/9
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
print_rat(add_rat(one_third, one_third));
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
add_rat(one_third, one_third);	
      </JAVASCRIPT_TEST>
      <JAVASCRIPT_OUTPUT>
&quot;6 / 9&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>
  <LONG_PAGE LINES="1"></LONG_PAGE>
  <TEXT> 
    正如最后的例子所示，我们的有理数实现没有
    <INDEX>有理数<SUBINDEX>化简到最简形式</SUBINDEX></INDEX>
    <INDEX>化简到最简形式</INDEX>
    化简有理数到最简形式。我们可以通过更改
    <SPLITINLINE>
      
      make-rat.
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    如果我们有一个
<SCHEMEINLINE>gcd</SCHEMEINLINE>
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    如<REF NAME="sec:gcd"></REF>节中的那个，用于计算两个整数的
    <INDEX>最大公约数<SUBINDEX><ORDER>用于有理数算术</ORDER></SUBINDEX></INDEX>
    的最大公约数，我们可以使用
<SCHEMEINLINE>gcd</SCHEMEINLINE> 来在构造序对之前将分子和分母化简到最简形式： <SNIPPET PAGE="87" HIDE="yes">
      <NAME>numer</NAME>
      <JAVASCRIPT>
function numer(x) {
    return head(x);
}
function denom(x) {
    return tail(x);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <INDEX><DECLARATION>make_rat</DECLARATION><SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
      <NAME>make_rat_3</NAME>
      <EXPECTED>[ 2, 3 ]</EXPECTED>
      <REQUIRES>numer</REQUIRES>
      <EXAMPLE>make_rat_3_example_1</EXAMPLE>
      <REQUIRES>gcd_definition</REQUIRES>
      <SCHEME>
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))
      </SCHEME>
      <JAVASCRIPT>
function make_rat(n, d) {
    const g = gcd(n, d);
    return pair(n / g, d / g);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_rat_3_example_1</NAME>
      <JAVASCRIPT>
make_rat(4, 6);
      </JAVASCRIPT>
    </SNIPPET> 现在我们有 <SNIPPET PAGE="87">
      <NAME>numer_rat</NAME>
      <REQUIRES>add_rat_2</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-third one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
2/3
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
print_rat(add_rat(one_third, one_third));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
&quot;2 / 3&quot;
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="84" HIDE="yes">
      <NAME>add_rat_2</NAME>
      <REQUIRES>make_rat_3</REQUIRES>
      <SCHEME>
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
      </SCHEME>
      <JAVASCRIPT>
function add_rat(x, y) {
    return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                    denom(x) * denom(y));
}
function sub_rat(x, y) {
    return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                    denom(x) * denom(y));
}
function mul_rat(x, y) {
    return make_rat(numer(x) * numer(y),
                    denom(x) * denom(y));
}
function div_rat(x, y) {
    return make_rat(numer(x) * denom(y),
                    denom(x) * numer(y));
}
function equal_rat(x, y) {
    return numer(x) * denom(y) === numer(y) * denom(x);
}
      </JAVASCRIPT>
    </SNIPPET> 如愿。此修改通过更改构造器
    <SPLITINLINE>
      
      make-rat
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE> 而未改变任何
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      （例如
      <SPLITINLINE>
	add-rat
	<JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      和
      <SPLITINLINE>
	mul-rat)
	<JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
      </SPLITINLINE>
      实现了实际操作。
   </TEXT>
   <EXERCISE> 
    定义一个更好的版本
    <SPLITINLINE>
      make-rat
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    来处理正数和负数参数。
    <SPLITINLINE>
      Make-rat
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    应该规范化符号，使得如果有理数是正的，那么分子和分母都是正的；如果有理数是负的，则只有分子是负的。
    <SOLUTION>
      
	<EXPECTED>[ -3, 4 ]</EXPECTED>
	<REQUIRES>abs_definition</REQUIRES>
	<REQUIRES>gcd_definition</REQUIRES>
	<EXAMPLE>example_2.1</EXAMPLE>
	<JAVASCRIPT>
function sign(x) {
    return x &lt; 0 
           ? -1
	   : x &gt; 0
	     ? 1
	     : 0;
}
function make_rat(n, d) {
    const g = gcd(n, d);
    return pair(sign(n) * sign(d) * abs(n / g), 
                abs(d / g));
}
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
    
      <NAME>example_2.1</NAME>
      <JAVASCRIPT>
make_rat(3, -4);
      </JAVASCRIPT>
      
      
    
    
  </EXERCISE> 
   
    如所愿。此修改通过更改构造器
    <SPLITINLINE>
      
      make-rat
      <JAVASCRIPT><JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE> 而未改变任何
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
      （例如
      <SPLITINLINE>
	add-rat
	<JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      和
      <SPLITINLINE>
	mul-rat)
	<JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
      </SPLITINLINE>
      实现了实际操作。
   
   <INDEX>有理数<SUBINDEX>算术操作</SUBINDEX><CLOSE></CLOSE></INDEX> 
   <INDEX>有理数算术<CLOSE></CLOSE></INDEX> 
</SUBSECTION>
