<SUBSECTION>
  <NAME>
    Example: A Picture Language
  </NAME>

  <LABEL NAME="sec:graphics"/>
  <INDEX>picture language<OPEN/></INDEX>

  <TEXT>
    This section presents a simple language for drawing pictures that
    illustrates the power of data abstraction and closure, and also exploits
    higher-order
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in an essential way.  The language is designed to make it easy to
    experiment with patterns such as the ones in
    figure<SPACE/><REF NAME="fig:sqlimit-designs"/>, which are composed of
    repeated elements that are shifted and scaled.<FOOTNOTE>The picture
    language is based on the language
    <INDEX>Henderson, Peter</INDEX>
    Peter Henderson created to construct images like
    <INDEX>Escher, Maurits Cornelis</INDEX>
    M.C. Escher<APOS/>s <QUOTE>Square Limit</QUOTE> woodcut (see
    <CITATION>Henderson 1982</CITATION>). The woodcut incorporates a repeated
    scaled pattern, similar to the arrangements drawn using the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    in this section.</FOOTNOTE> In this language, the data objects being
    combined are represented as
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    rather than as list structure. Just as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which satisfies the
    <INDEX>closure<SUBINDEX><ORDER>closurepict</ORDER>closure property of picture-language operations</SUBINDEX></INDEX>
    closure property, allowed us to easily build arbitrarily complicated list
    structure, the operations in this language, which also satisfy the closure
    property, allow us to easily build arbitrarily complicated patterns.
    <FIGURE scale="0.5" src="img_original/2.9.svg">
      <LABEL NAME="fig:sqlimit-designs"/>
      <CAPTION>Designs generated with the picture language.
      </CAPTION>
    </FIGURE>

    <!--
      <JAVASCRIPT>
	  <FIGURE>
	    <IMAGE src="img_javascript/cross-carpet.png"/>
	    <SPACE/><SPACE/><SPACE/>
	    <IMAGE src="img_javascript/heart-carpet.png"/>
	    <LABEL NAME="fig:sqlimit-designs"/>
	    <CAPTION>Designs generated with the picture language.
	    </CAPTION>
	  </FIGURE>
      </JAVASCRIPT>
    -->

  </TEXT>

  <SUBHEADING>
    <NAME>The picture language</NAME>
  </SUBHEADING>

  <SHORT_PAGE lines="4"/>
  <TEXT>
    When we began our study of programming in
    section<SPACE/><REF NAME="sec:elements-of-programming"/>, we emphasized the
    importance of describing a language by focusing on the language<APOS/>s
    primitives, its means of combination, and its means of abstraction.
    We<APOS/>ll follow that framework here.
  </TEXT>

  <TEXT>
    Part of the elegance of this picture language is that there is only one
    kind of element, called a
    <INDEX>painter(s)</INDEX>
    <EM>painter</EM>.  A painter draws an image that is shifted and scaled to
    fit within a designated
    <INDEX>frame (picture language)</INDEX>
    parallelogram-shaped frame.  For example, there<APOS/>s a primitive painter
    we<APOS/>ll call <SCHEMEINLINE>wave</SCHEMEINLINE>
    that makes a crude line drawing,
    as shown in figure<SPACE/><REF NAME="fig:wave"/>.
    <FIGURE  web_scale="0.6" scale="1" src="img_original/2.10.svg">
      <LABEL NAME="fig:wave"/>
      <CAPTION>Images produced by the <SCHEMEINLINE>wave</SCHEMEINLINE>
      painter, with respect to four different frames.  The frames, shown
      with dashed lines, are not part of the images.
      </CAPTION>
    </FIGURE>

    <!--
        <JAVASCRIPT>
          <FIGURE>
	    <IMAGE  src="img_javascript/heart_shapes.png"/>
            <LABEL NAME="fig:wave"/>
            <CAPTION>Images produced by the
	    <JAVASCRIPTINLINE>heart</JAVASCRIPTINLINE> painter, with respect
            to four different frames.  The frames, shown with thin lines, are
	    not part of the images.
            </CAPTION>
          </FIGURE>
        </JAVASCRIPT>
    -->
    The actual shape of the drawing depends on the frame<EMDASH/>all four
    images in figure<SPACE/><REF NAME="fig:wave"/> are produced by the same
    <SCHEMEINLINE>wave</SCHEMEINLINE> painter, but with respect to four
    different frames. Painters can be more elaborate than this: The primitive
    painter called <SCHEMEINLINE>rogers</SCHEMEINLINE> paints a picture of
    MIT<APOS/>s founder, William Barton Rogers, as shown in
    figure<SPACE/><REF NAME="fig:rogers"/>.<FOOTNOTE>
    <INDEX>MIT<SUBINDEX>early history of</SUBINDEX></INDEX>
    <INDEX>Rogers, William Barton</INDEX>
      William Barton Rogers (1804<ENDASH/>1882) was the founder and first
      president of MIT.  A geologist and talented teacher, he taught at
      William and Mary College and at the University of Virginia.  In 1859
      he moved to Boston, where he had more time for research, worked on a
      plan for establishing a <QUOTE>polytechnic institute,</QUOTE> and
      served as Massachusetts<APOS/>s first State Inspector of Gas Meters.
      <P/>
      When MIT was established in 1861, Rogers was elected its first
      president. Rogers espoused an ideal of <QUOTE>useful learning</QUOTE>
      that was different from the university education of the time, with its
      overemphasis on the classics, which, as he wrote, <QUOTE>stand in the
      way of the broader, higher and more practical instruction and
      discipline of the natural and social sciences.</QUOTE>  This
      education was likewise to be different from narrow trade-school
      education.  In Rogers<APOS/>s words:
      <BLOCKQUOTE>
        The world-enforced distinction between the practical and the
        scientific worker is utterly futile, and the whole experience of
        modern times has demonstrated its utter worthlessness.
      </BLOCKQUOTE>
      Rogers served as president of MIT until 1870, when he resigned due to
      ill health.  In 1878 the second president of MIT,
      <INDEX>Runkle, John Daniel</INDEX>
      John Runkle, resigned under the pressure of a financial crisis
      brought on by the Panic of 1873 and strain of fighting off attempts
      by Harvard to take over MIT.  Rogers returned to hold the office of
      president until 1881.
      <P/>
      Rogers collapsed and died while addressing MIT<APOS/>s graduating
      class at the commencement exercises of 1882.  Runkle quoted
      Rogers<APOS/>s last words in a memorial address delivered that same
      year:
      <BLOCKQUOTE>
        <QUOTE>As I stand here today and see what the Institute is, <ELLIPSIS/><SPACE/>I call
        to mind the beginnings of science.  I remember one hundred and fifty
        years ago Stephen Hales published a pamphlet on the subject of
        illuminating gas, in which he stated that his researches had
        demonstrated that 128 grains of bituminous coal<EMDASH/></QUOTE>
        <P/>
          <INDEX>coal, bituminous</INDEX>
          <QUOTE>Bituminous coal,</QUOTE> these were his last words on
	  earth.  Here he bent forward, as if consulting some notes on the
	  table before him, then slowly regaining an erect position, threw
	  up his hands, and was translated from the scene of his earthly
	  labors and triumphs to <QUOTE>the tomorrow of death,</QUOTE>
	  where the mysteries of life are solved, and the disembodied
	  spirit finds unending satisfaction in contemplating the new and
	  still unfathomable mysteries of the infinite future.
      </BLOCKQUOTE>
      In the words of  Francis A. Walker
      <INDEX>Walker, Francis Amasa</INDEX>
      (MIT<APOS/>s third president):
      <BLOCKQUOTE>
        All his life he had borne himself most faithfully and heroically,
	and he died as so good a knight would surely have wished, in
	harness, at his post, and in the very part and act of public duty.
      </BLOCKQUOTE>
      </FOOTNOTE>
    The four images in figure<SPACE/><REF NAME="fig:rogers"/>
    are drawn with respect to the same four frames
    as the <SCHEMEINLINE>wave</SCHEMEINLINE> images in
    figure<SPACE/><REF NAME="fig:wave"/>.
    <FIGURE  web_scale="0.6" scale="1" src="img_original/2.11.svg">
      <LABEL NAME="fig:rogers"/>
      <CAPTION>
	Images of William Barton Rogers, founder and first
        president of MIT, painted with respect to the same four frames as in
	figure<SPACE/><REF NAME="fig:wave"/> (original image courtesy MIT Museum).
      </CAPTION>
    </FIGURE>
  </TEXT>

  <TEXT>
    To combine images, we use various
    <INDEX>painter(s)<SUBINDEX>operations</SUBINDEX></INDEX>
    operations that construct new painters
    from given painters. For example, the
     <INDEX><USE>beside</USE></INDEX> 
    <SCHEMEINLINE>beside</SCHEMEINLINE> operation takes two painters and
    produces a new, compound painter that draws the first painter<APOS/>s image
    in the left half of the frame and the second painter<APOS/>s image in the
    right half of the frame. Similarly,
     <INDEX><USE>below</USE></INDEX> 
    <SCHEMEINLINE>below</SCHEMEINLINE> takes two painters and produces a
    compound painter that draws the first painter<APOS/>s image below the
    second painter<APOS/>s image. Some operations transform a single painter
    to produce a new painter.  For example,
     <INDEX><USE>flip_vert</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flip-vert</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flip_vert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    takes a painter and produces a painter that draws its image upside-down, and
     <INDEX><USE>flip_horiz</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flip-horiz</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flip_horiz</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    produces a painter that draws the original painter<APOS/>s image
    left-to-right reversed.
  </TEXT>

  <TEXT>
    Figure<SPACE/><REF NAME="fig:build-up-wave"/> shows the drawing of a
    painter called <SCHEMEINLINE>wave4</SCHEMEINLINE>
    that is built up in two stages starting from
    <SCHEMEINLINE>wave</SCHEMEINLINE>:
    <SNIPPET EXT="RUNES">
      <NAME>wave2</NAME>
      <EXAMPLE>wave2_example</EXAMPLE>
      <SCHEME>
(define wave2
  (beside wave (flip-vert wave)))
(define wave4
  (below wave2 wave2))
      </SCHEME>
      <JAVASCRIPT>
const wave2 = beside(wave, flip_vert(wave));
const wave4 = below(wave2, wave2);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const heart2 = beside(heart, flip_vert(heart));
// const heart4 = stack(heart2, heart2);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>wave2_example</NAME>
      <JAVASCRIPT>
wave2;
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
show(heart2);
// show(heart4);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    In building up a complex image in this manner we are exploiting the fact
    that painters are
    <INDEX>closure<SUBINDEX><ORDER>closurepict</ORDER>closure property of picture-language operations</SUBINDEX></INDEX>
    closed under the language<APOS/>s means of combination.
    The <SCHEMEINLINE>beside</SCHEMEINLINE> or
    <SCHEMEINLINE>below</SCHEMEINLINE> of two painters is itself a painter;
    therefore, we can use it as an element in making more complex painters.
    As with building up list structure using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    the closure of our data under the means of combination is crucial to the
    ability to create complex structures while using only a few operations.
  </TEXT>

    <FIGURE scale="0.5" src="img_original/2.12.svg">
    <LABEL NAME="fig:build-up-wave"/> 
    <SNIPPET EXT="RUNES" LATEX="yes">
      <NAME>wave4_web</NAME>
      <EXAMPLE>wave2_example</EXAMPLE>
      <SCHEME>
(define wave2
  (beside wave (flip-vert wave)))
(define wave4
  (below wave2 wave2))
      </SCHEME>
      <JAVASCRIPT>
$\ $
const wave2 =                         const wave4 = 
    beside(wave, flip_vert(wave));        below(wave2, wave2);

      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const heart2 = beside(heart, flip_vert(heart));
// const heart4 = stack(heart2, heart2);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <CAPTION>Creating a complex figure,
    starting from the <SCHEMEINLINE>wave</SCHEMEINLINE> painter of
    figure<SPACE/><REF NAME="fig:wave"/>.
    </CAPTION>
    </FIGURE>
  

  <TEXT>
    Once we can combine painters, we would like to be able to abstract typical
    patterns of combining painters. We will implement the painter operations as 
    <SPLITINLINE>
      <SCHEME>Scheme procedures.</SCHEME>
      <JAVASCRIPT>JavaScript functions.</JAVASCRIPT>
    </SPLITINLINE>
    This means that we don<APOS/>t need a special abstraction mechanism in the
    picture language: Since the means of combination are ordinary 
    <SPLITINLINE><SCHEME>Scheme procedures,</SCHEME>
    <JAVASCRIPT>JavaScript functions,</JAVASCRIPT></SPLITINLINE>
    we automatically have the capability to do anything with painter operations
    that we can do with
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    For example, we can abstract the pattern in
    <SCHEMEINLINE>wave4</SCHEMEINLINE> as
    <SNIPPET EXT="RUNES">
      <INDEX><DECLARATION>flipped_pairs</DECLARATION></INDEX> 
      <NAME>flipped_pairs</NAME>
      <EXAMPLE>wave4_2</EXAMPLE>
      <SCHEME>
(define (flipped-pairs painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)))
      </SCHEME>
      <JAVASCRIPT>
function flipped_pairs(painter) {
    const painter2 = beside(painter, flip_vert(painter));
    return below(painter2, painter2);
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function flipped_pairs(painter) {
    const painter2 = beside(painter, flip_vert(painter));
    return stack(painter2, painter2);
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    and
    <SPLITINLINE>
      <SCHEME>define</SCHEME>
      <JAVASCRIPT>declare</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>wave4</SCHEMEINLINE> as an instance of this
    pattern:
    <SNIPPET EXT="RUNES">
      <NAME>wave4_2</NAME>
      <REQUIRES>flipped_pairs</REQUIRES>
      <SCHEME>
(define wave4 (flipped-pairs wave))
      </SCHEME>
      <JAVASCRIPT>
const wave4 = flipped_pairs(wave);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const heart4 = flipped_pairs(heart);
show(heart4);
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch2-Z-G-37.svg">
          <LABEL NAME="fig:split-plans_scheme"/>
          <CAPTION>Recursive plans for <SCHEMEINLINE>right-split</SCHEMEINLINE> and
	  <SCHEMEINLINE>corner-split</SCHEMEINLINE>.</CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE scale="0.59" src="img_javascript/ch2-Z-G-37.svg">
          <LABEL NAME="fig:split-plans"/>
          <CAPTION>Recursive plans for
	  <JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE> and
	  <JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE>.</CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    We can also define recursive operations. Here<APOS/>s one that makes
    painters split and branch towards the right as shown in
    <SPLITINLINE>
      <SCHEME>
	figures<SPACE/><REF NAME="fig:split-plans_scheme"/>
      </SCHEME>
      <JAVASCRIPT>
	figures<SPACE/><REF NAME="fig:split-plans"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME>
	<REF NAME="fig:split-plans-2_scheme"/>:
      </SCHEME>
      <JAVASCRIPT>
	<REF NAME="fig:split-plans-2"/>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EXT="RUNES">
      <INDEX><DECLARATION>right_split</DECLARATION></INDEX> 
      <NAME>right_split</NAME>
      <EXAMPLE>right_split_example_1</EXAMPLE>
      <SCHEME>
(define (right-split painter n)
  (if (= n 0)
    painter
    (let ((smaller (right-split painter (- n 1))))
      (beside painter (below smaller smaller)))))
      </SCHEME>
      <JAVASCRIPT>
function right_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const smaller = right_split(painter, n - 1);
        return beside(painter, below(smaller, smaller));
    }
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function right_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const smaller = right_split(painter, n - 1);
        return beside(painter, stack(smaller, smaller));
    }
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    We can produce balanced patterns by branching upwards as well as towards
    the right (see exercise<SPACE/><REF NAME="ex:up-split"/> and
    figures<SPACE/><REF NAME="fig:split-plans"/>
    and<SPACE/><REF  NAME="fig:split-plans-2"/>):
    <SNIPPET EXT="RUNES">
      <INDEX><DECLARATION>corner_split</DECLARATION></INDEX> 
      <NAME>corner_split</NAME>
      <REQUIRES>right_split</REQUIRES>
      <REQUIRES>up_split</REQUIRES>
      <EXAMPLE>corner_split_example_1</EXAMPLE>
      <SCHEME>
(define (corner-split painter n)
  (if (= n 0)
    painter
    (let ((up (up-split painter (- n 1)))
          (right (right-split painter (- n 1))))
      (let ((top-left (beside up up))
            (bottom-right (below right right))
            (corner (corner-split painter (- n 1))))
        (beside (below painter top-left)
                (below bottom-right corner))))))
      </SCHEME>
      <JAVASCRIPT>
function corner_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const up = up_split(painter, n - 1);
        const right = right_split(painter, n - 1);
        const top_left = beside(up, up);
        const bottom_right = below(right, right);
        const corner = corner_split(painter, n - 1);
        return beside(below(painter, top_left),
                      below(bottom_right, corner));
    }
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function corner_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const up = up_split(painter, n - 1);
        const right = right_split(painter, n - 1);
        const top_left = beside(up, up);
        const bottom_right = stack(right, right);
        const corner = corner_split(painter, n - 1);
        return stack(beside(top_left, corner),
                     beside(painter, bottom_right));
    }
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET EXT="RUNES" HIDE="yes">
      <NAME>corner_split_example_1</NAME>
      <EXAMPLE>corner_split_example_1</EXAMPLE>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
show(corner_split(heart, 4));
      </JAVASCRIPT>
    </SNIPPET>

  <SNIPPET EXT="RUNES" HIDE="yes">
    <NAME>right_split_example_1</NAME>
    <REQUIRES>right_split</REQUIRES>
    <SCHEME>
      (right-split wave 4)
      (right-split rogers 4)
      (corner-split wave 4)
      (corner-split rogers 4)
    </SCHEME>
    <JAVASCRIPT>
      right_split(wave, 4);    // (a)
      right_split(rogers, 4);  // (b)
      corner_split(wave, 4);   // (c)
      corner_split(rogers, 4); // (d)
    </JAVASCRIPT>
    <JAVASCRIPT_RUN>
      show(right_split(heart, 4));
    </JAVASCRIPT_RUN>
  </SNIPPET>
    <SPLIT>
      <SCHEME>
	<FIGURE web_scale="0.7" src="img_original/Fig2.14b.std.svg">
          <LABEL NAME="fig:split-plans-2_scheme"/>
          <CAPTION>The recursive operation
          <SCHEMEINLINE>right-split</SCHEMEINLINE> applied to the painters
          <SCHEMEINLINE>wave</SCHEMEINLINE> and
          <SCHEMEINLINE>rogers</SCHEMEINLINE>.
          Combining four
          <SCHEMEINLINE>corner-split</SCHEMEINLINE> figures produces
          symmetric
	  <SCHEMEINLINE>square-limit</SCHEMEINLINE>
          as shown in figure<SPACE/><REF NAME="fig:sqlimit-designs"/>.
          </CAPTION>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE web_scale="0.7" scale="0.45" src="img_javascript/2.14.svg">
          <LABEL NAME="fig:split-plans-2"/>
          <CAPTION>The recursive operation
          <JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE> applied to the
	  painters <JAVASCRIPTINLINE>wave</JAVASCRIPTINLINE> and
          <JAVASCRIPTINLINE>rogers</JAVASCRIPTINLINE>.
          Combining four
          <JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE> figures
	  produces symmetric
	  <JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>
          as shown in figure<SPACE/><REF NAME="fig:sqlimit-designs"/>.
          </CAPTION>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
    By placing four copies of a
    <SPLITINLINE><SCHEME><SCHEMEINLINE>corner-split</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    appropriately, we obtain a pattern called
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    whose application to <SCHEMEINLINE>wave</SCHEMEINLINE> and
    <SCHEMEINLINE>rogers</SCHEMEINLINE> is shown in
    figure<SPACE/><REF NAME="fig:sqlimit-designs"/>:
    <SNIPPET EXT="RUNES" POSTPADDING="no">
      <INDEX><DECLARATION>square_limit</DECLARATION></INDEX> 
      <NAME>square_limit</NAME>
      <REQUIRES>corner_split</REQUIRES>
      <EXAMPLE>square_limit_example</EXAMPLE>
      <SCHEME>
(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))
      </SCHEME>
      <JAVASCRIPT>
function square_limit(painter, n) {
    const quarter = corner_split(painter, n);
    const half = beside(flip_horiz(quarter), quarter);
    return below(flip_vert(half), half);
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function square_limit(painter, n) {
    const quarter = corner_split(painter, n);
    const upper_half = beside(flip_horiz(quarter), quarter);
    const lower_half = beside(turn_upside_down(quarter),
                              flip_vert(quarter));
    return stack(upper_half, lower_half);
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>square_limit_example</NAME>
      <JAVASCRIPT>
square_limit(rogers, 4);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
show(square_limit(heart, 4));
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>Define the procedure</SCHEME>
      <JAVASCRIPT>Declare the function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>up_split</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>up-split</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>up_split</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    used by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>corner-split</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    It is similar to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>right-split</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    except that it switches the roles of <SCHEMEINLINE>below</SCHEMEINLINE>
    and <SCHEMEINLINE>beside</SCHEMEINLINE>.
    <LABEL NAME="ex:up-split"/>
    <SOLUTION>
      <SNIPPET EXT="RUNES">
	<NAME>up_split</NAME>
	<EXAMPLE>up_split_example</EXAMPLE>
	<SCHEME>
	</SCHEME>
	<JAVASCRIPT>
function up_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const smaller = up_split(painter, n - 1);
        return stack(beside(smaller, smaller), painter);
    }
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
        <NAME>up_split_example</NAME>
        <JAVASCRIPT>
up_split(rogers, 4));
        </JAVASCRIPT>
        <JAVASCRIPT_RUN>
show(up_split(heart, 4));
        </JAVASCRIPT_RUN>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_44"/>
  </EXERCISE>

  <SUBHEADING>
    <NAME>Higher-order operations</NAME>
  </SUBHEADING>

  <INDEX>painter(s)<SUBINDEX>higher-order operations</SUBINDEX></INDEX>

  <TEXT>
    In addition to abstracting patterns of combining painters, we can work at a
    higher level, abstracting patterns of combining painter operations. That
    is, we can view the painter operations as elements to manipulate and can
    write means of combination for these
    <SPLITINLINE>
      <SCHEME>elements<EMDASH/>procedures</SCHEME>
    <JAVASCRIPT>elements<EMDASH/>functions</JAVASCRIPT></SPLITINLINE>
    that take painter operations as arguments and create new painter operations.
  </TEXT>

  <SHORT_PAGE lines="4"/>
  <TEXT>
    For example,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flipped-pairs</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flipped_pairs</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    each arrange four copies of a painter<APOS/>s image in a square pattern;
    they differ only in how they orient the copies. One way to abstract this
    pattern of painter combination is with the following
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which takes four one-argument painter operations and produces a painter
    operation that transforms a given painter with those four operations and
    arranges the results in a square.<SPLITINLINE><JAVASCRIPT><FOOTNOTE>
    In <JAVASCRIPTINLINE>square_of_four</JAVASCRIPTINLINE>,
    we use an extension of the syntax of lambda expressions that was introduced
    in section<SPACE/><REF NAME="sec:lambda"/>: The body of a lambda
    expression can be a block, not just a return expression.
    <INDEX>sequence of statements<SUBINDEX><ORDER>lambda</ORDER>as body of lambda expression</SUBINDEX></INDEX>
    <INDEX>lambda expression<SUBINDEX>block as body of</SUBINDEX></INDEX>
    Such a lambda expression has the shape
    <JAVASCRIPTINLINE>(</JAVASCRIPTINLINE><META>parameters</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE><FIXED_SPACE/><JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE><FIXED_SPACE/><JAVASCRIPTINLINE>{</JAVASCRIPTINLINE><FIXED_SPACE/><META>statements</META><FIXED_SPACE/><JAVASCRIPTINLINE>}</JAVASCRIPTINLINE> or
    <META>parameter</META><FIXED_SPACE/><JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE><FIXED_SPACE/><JAVASCRIPTINLINE>{</JAVASCRIPTINLINE><FIXED_SPACE/><META>statements</META><FIXED_SPACE/><JAVASCRIPTINLINE>}</JAVASCRIPTINLINE>.
    <LABEL NAME="foot:lambda_with_block"/>
    </FOOTNOTE></JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Tl</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>The functions <JAVASCRIPTINLINE>tl</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>tr</SCHEMEINLINE>, <SCHEMEINLINE>bl</SCHEMEINLINE>, and
    <SCHEMEINLINE>br</SCHEMEINLINE> are the transformations to apply to the
    top left copy, the top right copy, the bottom left copy, and the bottom
    right copy, respectively.
    <SNIPPET EXT="RUNES">
      <INDEX><DECLARATION>square_of_four</DECLARATION></INDEX> 
      <NAME>square_of_four</NAME>
      <EXAMPLE>square_of_four_example</EXAMPLE>
      <SCHEME>
(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
          (bottom (beside (bl painter) (br painter))))
      (below bottom top))))
      </SCHEME>
      <JAVASCRIPT>
function square_of_four(tl, tr, bl, br) {
    return painter => {
        const top = beside(tl(painter), tr(painter));
        const bottom = beside(bl(painter), br(painter));
        return below(bottom, top);
    };
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function square_of_four(tl, tr, bl, br) {
    return painter => stack(beside(tl(painter), tr(painter)),
                            beside(bl(painter), br(painter)));
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>square_of_four_example</NAME>
      <REQUIRES>identity</REQUIRES>
      <JAVASCRIPT>
square_of_four(flip_vert, identity,
     quarter_turn_right, quarter_turn_left)(rogers);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
show(square_of_four(turn_upside_down, identity, 
                    quarter_turn_right, quarter_turn_left)
     (heart)
    );
      </JAVASCRIPT_RUN>
    </SNIPPET>
    Then
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flipped-pairs</SCHEMEINLINE>
      can be defined in terms of
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flipped_pairs</JAVASCRIPTINLINE>
      can be defined in terms of
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-of-four</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_of_four</JAVASCRIPTINLINE>
      </JAVASCRIPT>
      </SPLITINLINE> as follows:<FOOTNOTE>Equivalently, we could
    write
    <SNIPPET EXT="RUNES" POSTPADDING="no">
      <INDEX><DECLARATION>flipped_pairs</DECLARATION></INDEX> 
      <NAME>flipped_pairs_call</NAME>
      <REQUIRES>square_of_four</REQUIRES>
      <REQUIRES>identity</REQUIRES>
      <EXAMPLE>flipped_pairs_example</EXAMPLE>
      <SCHEME>
(define flipped-pairs
  (square-of-four identity flip-vert identity flip-vert))
      </SCHEME>
      <JAVASCRIPT>
const flipped_pairs = square_of_four(identity, flip_vert,
                                     identity, flip_vert);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const flipped_pairs =
    square_of_four(turn_upside_down, flip_vert, 
                   flip_horiz, identity);
      </JAVASCRIPT_RUN>
    </SNIPPET></FOOTNOTE>
    <SNIPPET EXT="RUNES">
      <INDEX><DECLARATION>flipped_pairs</DECLARATION></INDEX> 
      <NAME>flipped_pairs_2</NAME>
      <REQUIRES>square_of_four</REQUIRES>
      <REQUIRES>identity</REQUIRES>
      <EXAMPLE>flipped_pairs_example</EXAMPLE>
      <SCHEME>
(define (flipped-pairs painter)
  (let ((combine4 (square-of-four identity flip-vert
                                  identity flip-vert)))
    (combine4 painter)))
      </SCHEME>
      <JAVASCRIPT>
function flipped_pairs(painter) {
    const combine4 = square_of_four(identity, flip_vert, 
                                    identity, flip_vert);
    return combine4(painter);
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function flipped_pairs(painter) {
    const combine4 = square_of_four(turn_upside_down, flip_vert, 
                                    flip_horiz, identity);
    return combine4(painter);
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>flipped_pairs_example</NAME>
      <SCHEME>
((flipped-pairs rogers) full-frame)
      </SCHEME>
      <JAVASCRIPT>
flipped_pairs(rogers);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
show(flipped_pairs(heart));
      </JAVASCRIPT_RUN>
    </SNIPPET>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    can be expressed as<FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Rotate180</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
      <JAVASCRIPTINLINE>rotate180</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    rotates a painter by 180 degrees. Instead of
    <SCHEMEINLINE>rotate180</SCHEMEINLINE>
    we could say
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(compose flip-vert flip-horiz)</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compose(flip_vert, flip_horiz)</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    using the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compose</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compose</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE/><REF NAME="ex:compose"/>.</FOOTNOTE>
    <SNIPPET POSTPADDING="no" EXT="RUNES">
      <INDEX><DECLARATION>square_limit</DECLARATION></INDEX> 
      <NAME>square_limit_2</NAME>
      <REQUIRES>square_of_four</REQUIRES>
      <REQUIRES>identity</REQUIRES>
      <REQUIRES>corner_split</REQUIRES>
      <EXAMPLE>square_limit_example_2</EXAMPLE>
      <SCHEME>
(define (square-limit painter n)
  (let ((combine4 (square-of-four flip-horiz identity
                                  rotate180 flip-vert)))
    (combine4 (corner-split painter n))))
      </SCHEME>
      <JAVASCRIPT>
function square_limit(painter, n) {
    const combine4 = square_of_four(flip_horiz, identity, 
                                    rotate180, flip_vert);
    return combine4(corner_split(painter, n));
}
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
function square_limit(painter, n) {
    const combine4 = square_of_four(flip_horiz, identity, 
                                    turn_upside_down, flip_vert);
    return combine4(corner_split(painter, n));
}
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>square_limit_example_2</NAME>
      <SCHEME>
	((square-limit rogers 4) full-frame)
      </SCHEME>
      <JAVASCRIPT>
square_limit(rogers, 4)(full_frame);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
show(square_limit(heart, 4));
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Right-split</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The functions
	<JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>up-split</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>up_split</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be expressed as instances of a general splitting operation. 
    <SPLITINLINE>
      <SCHEME>Define a procedure</SCHEME>
      <JAVASCRIPT>Declare a function</JAVASCRIPT>
    </SPLITINLINE>
     <INDEX><USE>split</USE></INDEX> 
    <SCHEMEINLINE>split</SCHEMEINLINE> with the property that evaluating
    <SNIPPET HIDE="yes">
      <NAME>split</NAME>
      <JAVASCRIPT>
// function split to be written by student
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET  EXT="RUNES">
      <NAME>right_split_up_split</NAME>
      <REQUIRES>split</REQUIRES>
      <SCHEME>
(define right-split (split beside below))
(define up-split (split below beside))
      </SCHEME>
      <JAVASCRIPT>
const right_split = split(beside, below);
const up_split = split(below, beside);
      </JAVASCRIPT>
    </SNIPPET>
    produces
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>right-split</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>up-split</SCHEMEINLINE>
      with the same behaviors as the ones already defined.
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>up_split</JAVASCRIPTINLINE>
      with the same behaviors as the ones already declared.
      </JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:splitting"/>
    <SOLUTION>
      <SNIPPET EXT="RUNES">
	<NAME>split_definition</NAME>
	<EXAMPLE>split_example</EXAMPLE>
	<JAVASCRIPT>
function split(bigger_op, smaller_op) {
    function rec_split(painter, n) {
        if (n === 0) {
            return painter;
        } else {
            const smaller = rec_split(painter, n - 1);
            return bigger_op(painter, 
                        smaller_op(smaller, smaller));
        }
    }
    return rec_split;
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
      <SNIPPET EXT="RUNES">
        <NAME>split_example</NAME>
        <REQUIRES>split_definition</REQUIRES>
        <JAVASCRIPT>
const right_split = split(beside, below);

right_split(rogers, 4);
        </JAVASCRIPT>
        <JAVASCRIPT_RUN>
const right_split = split(beside, stack);

show(right_split(heart, 4));
        </JAVASCRIPT_RUN>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
      
  <SUBHEADING>
    <NAME>Frames</NAME>
  </SUBHEADING>

  <INDEX>frame (picture language)</INDEX>
  <TEXT>
    Before we can show how to implement painters and their means of
    combination, we must first consider
    <INDEX>vector (mathematical)<SUBINDEX><ORDER>picture</ORDER>in picture-language frame</SUBINDEX></INDEX>
    frames.  A frame can be described by three vectors<EMDASH/>an origin vector
    and two edge vectors.  The origin vector specifies the offset of the
    frame<APOS/>s origin from some absolute origin in the plane, and the edge
    vectors specify the offsets of the frame<APOS/>s corners from its origin.
    If the edges are perpendicular, the frame will be rectangular.
    Otherwise the frame will be a more general parallelogram.
  </TEXT>

  <TEXT>
    Figure<SPACE/><REF NAME="fig:frame"/> shows a frame and its associated
    vectors.  In accordance with data abstraction, we need not be specific yet
    about how frames are represented, other than to say that there is a
    constructor
      <INDEX><USE>make_frame</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-frame</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_frame</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which takes three vectors and produces a frame, and three corresponding
    selectors
      <INDEX><USE>origin_frame</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>origin-frame</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>origin_frame</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
      <INDEX><USE>edge1_frame</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>edge1-frame</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>edge1_frame</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
      <INDEX><USE>edge2_frame</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>edge2-frame</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>edge2_frame</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    (see exercise<SPACE/><REF NAME="ex:implement-frames"/>).

    <FIGURE>
      <FIGURE scale="0.7" src="img_original/ch2-Z-G-42.svg"></FIGURE>
      <CAPTION>A frame is described by three vectors<EMDASH/>an origin and two edges.
      </CAPTION>
      <LABEL NAME="fig:frame"/>
    </FIGURE>
  </TEXT>

  <TEXT>
    We will use coordinates in the
    <INDEX>unit square</INDEX>
    unit square
    (<LATEXINLINE>$0\leq x, y\leq 1$</LATEXINLINE>) to specify images. With
    each frame, we associate a
    <INDEX>frame (picture language)<SUBINDEX>coordinate map</SUBINDEX></INDEX>
    <EM>frame coordinate map</EM>, which will be used to shift and scale images
    to fit the frame.  The map transforms the unit square into the frame by
    mapping the vector <LATEXINLINE>$\mathbf{v}=(x, y)$</LATEXINLINE> to the
    vector sum
    <LATEX>
      \[
      \text{Origin(Frame)} + x\cdot \text{ Edge}_1\text{ (Frame)}
      + y\cdot \text{ Edge}_2\text{ (Frame)}
      \]
    </LATEX>
    For example, <LATEXINLINE>$(0, 0)$</LATEXINLINE> is mapped to the origin of
    the frame, <LATEXINLINE>$(1, 1)$</LATEXINLINE> to the vertex diagonally
    opposite the origin, and <LATEXINLINE>$(0.5, 0.5)$</LATEXINLINE> to the
    center of the frame.  We can create a frame<APOS/>s coordinate map with
    the following
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:<FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Frame-coord-map</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>frame_coord_map</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    uses the vector operations described in
    exercise<SPACE/><REF NAME="ex:vectors"/> below, which we assume have been
    implemented using some representation for vectors. Because of data
    abstraction, it doesn<APOS/>t matter what this vector representation is,
    so long as the vector operations behave correctly.</FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>frame_coord_map</DECLARATION></INDEX> 
      <NAME>frame_coord_map</NAME>
      <EXAMPLE>frame_coord_map_example</EXAMPLE>
      <EXPECTED>[ 14, 18 ]</EXPECTED>
      <REQUIRES>frame_functions</REQUIRES>
      <REQUIRES>vector_functions</REQUIRES>
      <SCHEME>
(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
      (origin-frame frame)
      (add-vect (scale-vect (xcor-vect v)
                            (edge1-frame frame))
                (scale-vect (ycor-vect v)
                            (edge2-frame frame))))))
      </SCHEME>
      <JAVASCRIPT>
function frame_coord_map(frame) {
    return v => add_vect(origin_frame(frame), 
                         add_vect(scale_vect(xcor_vect(v), 
                                             edge1_frame(frame)), 
                                  scale_vect(ycor_vect(v), 
                                             edge2_frame(frame))));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>frame_coord_map_example</NAME>
      <JAVASCRIPT>
const my_origin = make_vect(1, 2);
const my_edge_1 = make_vect(3, 4);
const my_edge_2 = make_vect(5, 6);
const my_frame = make_frame(my_origin, my_edge_1, my_edge_2);
const my_coord_map = frame_coord_map(my_frame);
const my_vector = make_vect(1, 2);
const my_mapped_vector = my_coord_map(my_vector);
my_mapped_vector;
      </JAVASCRIPT>
    </SNIPPET>
    Observe that applying
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>frame-coord-map</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>frame_coord_map</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to a frame returns a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that, given a vector, returns a vector. If the argument vector is in the
    unit square, the result vector will be in the frame.  For example, 
    <SNIPPET EVAL="yes">
      <NAME>vector_example</NAME>
      <REQUIRES>frame_functions</REQUIRES>
      <REQUIRES>vector_functions</REQUIRES>
      <REQUIRES>frame_coord_map</REQUIRES>
      <EXPECTED>[ 1, 2 ]</EXPECTED>
      <SCHEME>
((frame-coord-map a-frame) (make-vect 0 0))
      </SCHEME>
      <JAVASCRIPT>
frame_coord_map(a_frame)(make_vect(0, 0));
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const a_frame = make_frame(make_vect(1, 2), 
                           make_vect(3, 4),
                           make_vect(5, 5));
frame_coord_map(a_frame)(make_vect(0, 0));
      </JAVASCRIPT_RUN>
    </SNIPPET>
    returns the same vector as
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <NAME>vector_example_2</NAME>
      <REQUIRES>frame_functions</REQUIRES>
      <EXPECTED>[ 1, 2 ]</EXPECTED>
      <SCHEME>
(origin-frame a-frame)
      </SCHEME>
      <JAVASCRIPT>
origin_frame(a_frame);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const a_frame = make_frame(make_vect(1, 2), 
                           make_vect(3, 4),
                           make_vect(5, 5));
origin_frame(a_frame);
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <SHORT_PAGE lines="2"/>
  <EXERCISE>
    <LABEL NAME="ex:vectors"/>
    A two-dimensional
    <INDEX>vector (mathematical)<SUBINDEX>represented as pair</SUBINDEX></INDEX>
    <INDEX>vector (mathematical)<SUBINDEX>operations on</SUBINDEX></INDEX>
    vector <LATEXINLINE>$v$</LATEXINLINE> running from the
    origin to a point can be represented as a pair consisting of an
    <LATEXINLINE>$x$</LATEXINLINE>-coordinate and a
    <LATEXINLINE>$y$</LATEXINLINE>-coordinate.  Implement a data abstraction
    for vectors by giving a constructor
    <INDEX><USE>make_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-vect</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_vect</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and corresponding selectors
    <INDEX><USE>xcor_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>xcor-vect</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>xcor_vect</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>ycor_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ycor-vect</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ycor_vect</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In terms of your selectors and constructor, implement
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>add_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-vect</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_vect</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>sub_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-vect</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_vect</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>scale_vect</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>scale-vect</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>scale_vect</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that perform the operations vector addition, vector subtraction, and
    multiplying a vector by a scalar:
    <LATEX>
      \[\begin{array}{lll}
      (x_1, y_1)+(x_2, y_2) &amp;=&amp; (x_1+x_2, y_1+y_2)\\
      (x_1, y_1)-(x_2, y_2) &amp;=&amp; (x_1-x_2, y_1-y_2)\\
      s\cdot(x, y)&amp;= &amp;(sx, sy)
      \end{array}\]
    </LATEX>
    <SOLUTION>
      <SNIPPET>
        <NAME>vector_functions</NAME>
	<EXAMPLE>vector_functions_example</EXAMPLE>
	<EXPECTED>[ 4, 6 ]</EXPECTED>
        <JAVASCRIPT>
function make_vect(x, y) {
    return pair(x, y);
}
function xcor_vect(vector) {
    return head(vector);
}
function ycor_vect(vector) {
    return tail(vector);
}
function scale_vect(factor, vector) {
    return make_vect(factor * xcor_vect(vector), 
                     factor * ycor_vect(vector));
}
function add_vect(vector1, vector2) {
    return make_vect(xcor_vect(vector1)  
                     + xcor_vect(vector2), 
                     ycor_vect(vector1)  
                     + ycor_vect(vector2));
}
function sub_vect(vector1, vector2) {
    return make_vect(xcor_vect(vector1)  
                     - xcor_vect(vector2), 
                     ycor_vect(vector1)  
                     - ycor_vect(vector2));
}
        </JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
        <NAME>vector_functions_example</NAME>
        <JAVASCRIPT>
const my_vector_1 = make_vect(1, 2);
const my_vector_2 = make_vect(3, 4);
add_vect(my_vector_1, my_vector_2);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Here are two possible constructors for frames:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>make_frame</DECLARATION><FRAGILE/></INDEX> 
      <SCHEME>
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))

(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
      </SCHEME>
      <JAVASCRIPT>
function make_frame(origin, edge1, edge2) {
    return list(origin, edge1, edge2);
}

function make_frame(origin, edge1, edge2) {
    return pair(origin, pair(edge1, edge2));
}
      </JAVASCRIPT>
    </SNIPPET>
    For each constructor supply the appropriate selectors to produce an
    implementation for frames.<LABEL NAME="ex:implement-frames"/>
    <SOLUTION>
      <OL>
	<LI>
	  <SNIPPET>
            <NAME>frame_functions</NAME>
	    <REQUIRES>vector_functions</REQUIRES>
	    <EXAMPLE>frame_functions_example</EXAMPLE>
	    <EXPECTED>[ 5, 6 ]</EXPECTED>
            <JAVASCRIPT>
function make_frame(origin, edge1, edge2) {
    return list(origin, edge1, edge2);
}
function origin_frame(frame) {
    return list_ref(frame, 0);
}
function edge1_frame(frame) {
    return list_ref(frame, 1);
}
function edge2_frame(frame) {
    return list_ref(frame, 2);
}
            </JAVASCRIPT>
          </SNIPPET>

          <SNIPPET HIDE="yes">
            <NAME>frame_functions_example</NAME>
            <JAVASCRIPT>
const my_origin = make_vect(1, 2);
const my_edge_1 = make_vect(3, 4);
const my_edge_2 = make_vect(5, 6);
const my_frame = make_frame(my_origin, my_edge_1, my_edge_2);
edge2_frame(my_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
	</LI>
	
	<LI>
	  <SNIPPET>
            <NAME>frame_functions_2</NAME>
	    <REQUIRES>vector_functions</REQUIRES>
	    <EXAMPLE>frame_functions_example</EXAMPLE>
	    <EXPECTED>[ 5, 6 ]</EXPECTED>
            <JAVASCRIPT>
function make_frame(origin, edge1, edge2) {
    return pair(origin, pair(edge1, edge2));
}
function origin_frame(frame) {
    return head(frame);
}
function edge1_frame(frame) {
    return head(tail(frame));
}
function edge2_frame(frame) {
    return tail(tail(frame));
}
            </JAVASCRIPT>
          </SNIPPET>
	</LI>
      </OL>
    </SOLUTION>
    <LABEL NAME="ex:2_47"/>
  </EXERCISE>

  <SUBHEADING>
    <NAME>Painters</NAME>
  </SUBHEADING>

  <TEXT>
    A painter is represented as a
    <INDEX>painter(s)<SUBINDEX>represented as <SPLITINLINE> <SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that, given a frame as argument, draws a particular image shifted and
    scaled to fit the frame. That is to say, if
    <SCHEMEINLINE>p</SCHEMEINLINE> is a painter and
    <SCHEMEINLINE>f</SCHEMEINLINE> is a frame, then we produce
    <SCHEMEINLINE>p</SCHEMEINLINE><APOS/>s image in
    <SCHEMEINLINE>f</SCHEMEINLINE> by calling <SCHEMEINLINE>p</SCHEMEINLINE>
    with <SCHEMEINLINE>f</SCHEMEINLINE> as argument.
  </TEXT>

  <SHORT_PAGE lines="3"/>
  <TEXT>
    The details of how primitive painters are implemented depend on the
    particular characteristics of the graphics system and the type of image to
    be drawn.  For instance, suppose we have a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>draw_line</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>draw-line</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>draw_line</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    that draws a line on the screen between two specified points.  Then we can
    create painters for line drawings, such as the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>wave</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>wave</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    painter in figure<SPACE/><REF NAME="fig:wave"/>, from lists of line
    segments as follows:<FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Segments-&gt;painter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>segments_to_painter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    uses the representation for line segments described in
    exercise<SPACE/><REF NAME="ex:segments2"/> below. It also uses the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>for-each</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>for_each</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    described in exercise<SPACE/><REF NAME="ex:for-each"/>.</FOOTNOTE>
    <SNIPPET HIDE="yes">
      <NAME>draw_line</NAME>
      <JAVASCRIPT>
// "drawing a line" here simulated
// by printing the coordinates of
// the start and end of the line
function draw_line(v_start, v_end) {
    display("line starting at");
    display(v_start);
    display("line ending at");
    display(v_end);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>segments_to_painter</DECLARATION></INDEX> 
      <NAME>segments_to_painter</NAME>
      <REQUIRES>frame_coord_map</REQUIRES>
      <REQUIRES>segment_functions</REQUIRES>
      <REQUIRES>draw_line</REQUIRES>
      <EXAMPLE>segments_to_painter_example</EXAMPLE>
      <SCHEME>
(define (segments-&gt;painter segment-list)
  (lambda (frame)
    (for-each
      (lambda (segment)
        (draw-line
          ((frame-coord-map frame) (start-segment segment))
          ((frame-coord-map frame) (end-segment segment))))
      segment-list)))
      </SCHEME>
      <JAVASCRIPT>
function segments_to_painter(segment_list) {
    return frame => 
             for_each(segment =>
                        draw_line(
                            frame_coord_map(frame)
                                (start_segment(segment)), 
                            frame_coord_map(frame)
                                (end_segment(segment))), 
                      segment_list);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>segments_to_painter_example</NAME>
      <JAVASCRIPT>
const my_origin = make_vect(1, 2);
const my_edge_1 = make_vect(3, 4);
const my_edge_2 = make_vect(5, 6);
const my_frame = make_frame(my_origin, my_edge_1, my_edge_2);

const my_start_1 = make_vect(0, 1);
const my_end_1 = make_vect(1, 1);
const my_segment_1 = make_segment(my_start_1, my_end_1);

const my_start_2 = make_vect(0, 2);
const my_end_2 = make_vect(2, 2);
const my_segment_2 = make_segment(my_start_2, my_end_2);

const my_painter = segments_to_painter(
                       list(my_segment_1, my_segment_2));

my_painter(my_frame);
      </JAVASCRIPT>
    </SNIPPET>
    The segments are given using coordinates with respect to the unit square.
    For each segment in the list, the painter transforms the segment endpoints
    with the frame coordinate map and draws a line between the transformed
    points.
  </TEXT>

  <TEXT>
    Representing painters as
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    erects a powerful abstraction barrier in the picture language.  We can
    create and intermix all sorts of primitive painters, based on a variety of
    graphics capabilities. The details of their implementation do not matter.
    Any
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can serve as a painter, provided that it takes a frame as argument and
    draws something scaled to fit the frame.<FOOTNOTE>
    For example, the <SCHEMEINLINE>rogers</SCHEMEINLINE> painter of
    figure<SPACE/><REF NAME="fig:rogers"/> was constructed from a gray-level
    image. For each point in a given frame, the
    <SCHEMEINLINE>rogers</SCHEMEINLINE> painter determines the point in
    the image that is mapped to it under the frame coordinate map, and
    shades it accordingly.
    <!--
      <JAVASCRIPT>
	For example, the <JAVASCRIPTINLINE>rogers</JAVASCRIPTINLINE> painter of
	figure<SPACE/><REF NAME="fig:wave"/> was constructed from a gray-level
	image. For each point in a given frame, the
	<SCHEMEINLINE>heart</SCHEMEINLINE> painter determines the point in the
	image that is mapped to it under the frame coordinate map, and shades
	it accordingly.
      </JAVASCRIPT>
    -->
    By allowing different types of painters, we are capitalizing on the
    abstract data idea discussed in section<SPACE/><REF NAME="sec:data?"/>,
    where we argued that a rational-number representation could be anything at
    all that satisfies an appropriate condition.  Here we<APOS/>re using the
    fact that a painter can be implemented in any way at all, so long as it
    draws something in the designated frame.
    <SHRINK_PARAGRAPH lines="1"/>
    Section<SPACE/><REF NAME="sec:data?"/> also showed how pairs could be
    implemented as
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Painters are our second example of a
    <SPLITINLINE>
      <SCHEME>
        procedural
      </SCHEME>
      <JAVASCRIPT>
        functional
      </JAVASCRIPT>
    </SPLITINLINE>
    representation for data.</FOOTNOTE>
  </TEXT>

  <EXERCISE>
    A directed line segment in the plane can be represented as a pair of
    <INDEX>line segment<SUBINDEX>represented as pair of vectors</SUBINDEX></INDEX>
    vectors<EMDASH/>the vector running from the origin to the start-point of
    the segment, and the vector running from the origin to the end-point of
    the segment. Use your vector representation from
    exercise<SPACE/><REF NAME="ex:vectors"/> to define a representation for
    segments with a constructor
    <INDEX><USE>make_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_segment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and selectors
    <INDEX><USE>start_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>start-segment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>start_segment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <INDEX><USE>end_segment</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>end-segment</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>end_segment</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:segments2"/>
    <SOLUTION>
      <SNIPPET>
	<NAME>segment_functions</NAME>
	<EXAMPLE>segment_functions_example</EXAMPLE>
	<EXPECTED>[ [ 0, 1 ], [ 1, 1 ] ]</EXPECTED>
	<JAVASCRIPT>
function make_segment(v_start, v_end) {
    return pair(v_start, v_end);
}
function start_segment(v) {
    return head(v);
}
function end_segment(v) {
    return tail(v);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>

      <SNIPPET HIDE="yes">
	<NAME>segment_functions_example</NAME>
	<REQUIRES>vector_functions</REQUIRES>
	<JAVASCRIPT>
const my_start = make_vect(0, 1);
const my_end = make_vect(1, 1);
const my_segment = make_segment(my_start, my_end);

my_segment;
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    Use
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>segments-&gt;painter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>segments_to_painter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to define the following primitive painters:
    <OL>
      <LI>
        The painter that draws the outline of the designated frame.
      </LI>
      <LI>
        The painter that draws an <QUOTE>X</QUOTE> by connecting opposite corners of
        the frame.
      </LI>
      <LI>
        The painter that draws a diamond shape by connecting the midpoints of
        the sides of the frame.
      </LI>
      <LI>
        The <SCHEMEINLINE>wave</SCHEMEINLINE> painter.
      </LI>
    </OL>
    <LABEL NAME="ex:making-wave"/>
    <SOLUTION>
      <OL>
        <LI>
          The painter that draws the outline of the designated frame.
	  <SNIPPET HIDE="yes">
            <NAME>unit_frame</NAME>
            <REQUIRES>frame_functions</REQUIRES>
	    <JAVASCRIPT>
const unit_origin = make_vect(0, 0);
const unit_edge_1 = make_vect(1, 0);
const unit_edge_2 = make_vect(0, 1);
const unit_frame = make_frame(unit_origin, 
                              unit_edge_1,
                              unit_edge_2);
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET>
            <NAME>outline_painter</NAME>
            <REQUIRES>vector_functions</REQUIRES>
	    <REQUIRES>segment_functions</REQUIRES>
            <REQUIRES>segments_to_painter</REQUIRES>
	    <EXAMPLE>outline_painter_example</EXAMPLE>
	    <JAVASCRIPT>
const outline_start_1 = make_vect(0, 0);
const outline_end_1 = make_vect(1, 0);
const outline_segment_1 = make_segment(outline_start_1, 
                                       outline_end_1);
const outline_start_2 = make_vect(1, 0);
const outline_end_2 = make_vect(1, 1);
const outline_segment_2 = make_segment(outline_start_2, 
                                       outline_end_2);
const outline_start_3 = make_vect(1, 1);
const outline_end_3 = make_vect(0, 1);
const outline_segment_3 = make_segment(outline_start_3, 
                                       outline_end_3);
const outline_start_4 = make_vect(0, 1);
const outline_end_4 = make_vect(0, 0);
const outline_segment_4 = make_segment(outline_start_4, 
                                       outline_end_4);
const outline_painter = segments_to_painter(
                              list(outline_segment_1, 
                                   outline_segment_2,
                                   outline_segment_3,
                                   outline_segment_4));
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
            <NAME>outline_painter_example</NAME>
            <REQUIRES>unit_frame</REQUIRES>
	    <JAVASCRIPT>
outline_painter(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
        <LI>
          The painter that draws an <QUOTE>X</QUOTE> by connecting opposite
	  corners of the frame.
	  <SNIPPET>
            <NAME>x_painter</NAME>
            <REQUIRES>vector_functions</REQUIRES>
	    <REQUIRES>segment_functions</REQUIRES>
            <REQUIRES>segments_to_painter</REQUIRES>
	    <EXAMPLE>x_painter_example</EXAMPLE>
	    <JAVASCRIPT>
const x_start_1 = make_vect(0, 0);
const x_end_1 = make_vect(1, 1);
const x_segment_1 = make_segment(x_start_1, 
                                 x_end_1);
const x_start_2 = make_vect(1, 0);
const x_end_2 = make_vect(0, 1);
const x_segment_2 = make_segment(x_start_2, 
                                 x_end_2);
const x_painter = segments_to_painter(
                              list(x_segment_1, 
                                   x_segment_2));
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
            <NAME>x_painter_example</NAME>
            <REQUIRES>unit_frame</REQUIRES>
            <REQUIRES>x_painter</REQUIRES>
	    <JAVASCRIPT>
x_painter(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
        <LI>
          The painter that draws a diamond shape by connecting the midpoints of
          the sides of the frame.
	  <SNIPPET>
            <NAME>diamond_painter</NAME>
            <REQUIRES>vector_functions</REQUIRES>
	    <REQUIRES>segment_functions</REQUIRES>
            <REQUIRES>segments_to_painter</REQUIRES>
	    <EXAMPLE>diamond_painter_example</EXAMPLE>
	    <JAVASCRIPT>
const diamond_start_1 = make_vect(0.5, 0);
const diamond_end_1 = make_vect(1, 0.5);
const diamond_segment_1 = make_segment(diamond_start_1, 
                                       diamond_end_1);
const diamond_start_2 = make_vect(1, 0.5);
const diamond_end_2 = make_vect(0.5, 1);
const diamond_segment_2 = make_segment(diamond_start_2, 
                                       diamond_end_2);
const diamond_start_3 = make_vect(0.5, 1);
const diamond_end_3 = make_vect(0, 0.5);
const diamond_segment_3 = make_segment(diamond_start_3, 
                                       diamond_end_3);
const diamond_start_4 = make_vect(0, 0.5);
const diamond_end_4 = make_vect(0.5, 0);
const diamond_segment_4 = make_segment(diamond_start_4, 
                                       diamond_end_4);
const diamond_painter = segments_to_painter(
                              list(diamond_segment_1, 
                                   diamond_segment_2,
                                   diamond_segment_3,
                                   diamond_segment_4));
	    </JAVASCRIPT>
	  </SNIPPET>
	  <SNIPPET HIDE="yes">
            <NAME>diamond_painter_example</NAME>
            <REQUIRES>unit_frame</REQUIRES>
	    <JAVASCRIPT>
diamond_painter(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
        </LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

  <SUBHEADING>
    <NAME>Transforming and combining painters</NAME>
  </SUBHEADING>

  <INDEX>painter(s)<SUBINDEX>transforming and combining</SUBINDEX></INDEX>

  <TEXT>
    An operation on painters (such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flip-vert</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flip_vert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    or <SCHEMEINLINE>beside</SCHEMEINLINE>)
    works by creating a painter that invokes the original painters with respect
    to frames derived from the argument frame. Thus, for example,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flip-vert</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flip_vert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    doesn<APOS/>t have to know how a painter works in order to flip
    it<EMDASH/>it just has to know how to turn a frame upside down: The flipped
    painter just uses the original painter, but in the inverted frame.
  </TEXT>

  <TEXT>
    Painter operations are based on the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>transform-painter</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>transform_painter</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which takes as arguments a painter and information on how to transform a
    frame and produces a new painter.  The transformed painter, when called on
    a frame, transforms the frame and calls the original painter on the
    transformed frame. The arguments to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>transform-painter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>transform_painter</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    are points (represented as vectors) that specify the corners of the new
    frame: When mapped into the frame, the first point specifies the new
    frame<APOS/>s origin and the other two specify the ends of its edge vectors.
    Thus, arguments within the unit square specify a frame contained within the
    original frame.
    <SNIPPET>
      <INDEX><DECLARATION>transform_painter</DECLARATION></INDEX> 
      <NAME>transform_painter</NAME>
      <REQUIRES>frame_functions</REQUIRES>
      <REQUIRES>vector_functions</REQUIRES>
      <REQUIRES>frame_coord_map</REQUIRES>
      <EXAMPLE>flip_vert_example</EXAMPLE>
      <SCHEME>
(define (transform-painter painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
        (painter
          (make-frame new-origin
            (sub-vect (m corner1) new-origin)
            (sub-vect (m corner2) new-origin)))))))
      </SCHEME>
      <JAVASCRIPT>
function transform_painter(painter, origin, corner1, corner2) {
    return frame => {
             const m = frame_coord_map(frame);
             const new_origin = m(origin);
             return painter(make_frame(
                                new_origin,
                                sub_vect(m(corner1), new_origin),
                                sub_vect(m(corner2), new_origin)));
           };
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Here<APOS/>s how to flip painter images vertically:
    <SNIPPET>
      <INDEX><DECLARATION>flip_vert</DECLARATION></INDEX> 
      <NAME>flip_vert</NAME>
      <REQUIRES>transform_painter</REQUIRES>
      <EXAMPLE>flip_vert_example</EXAMPLE>
      <SCHEME>
(define (flip-vert painter)
  (transform-painter painter
    (make-vect 0.0 1.0)   ; new origin
    (make-vect 1.0 1.0)   ; new end of edge1
    (make-vect 0.0 0.0))) ; new end of edge2
      </SCHEME>
      <JAVASCRIPT>
function flip_vert(painter) {
    return transform_painter(painter,
                             make_vect(0, 1),  // new origin
                             make_vect(1, 1),  // new end of edge1
                             make_vect(0, 0)); // new end of edge2
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>flip_vert_example</NAME>
      <REQUIRES>outline_painter</REQUIRES>
      <REQUIRES>unit_frame</REQUIRES>
      <REQUIRES>flip_vert</REQUIRES>
      <JAVASCRIPT>
const flipped_outline_painter =
          flip_vert(outline_painter);

flipped_outline_painter(unit_frame);
      </JAVASCRIPT>
    </SNIPPET>
    Using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>transform-painter</SCHEMEINLINE>,
      we can easily define new transformations.
      For example, we can define a
      painter that shrinks its image to the upper-right quarter of the frame it
      is given:
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>transform_painter</JAVASCRIPTINLINE>,
      we can easily define new transformations.      
      For example, we can declare a
      painter that shrinks its image to the upper-right quarter of the frame
      it is given:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>shrink_to_upper_right</DECLARATION></INDEX> 
      <NAME>shrink_to_upper_right</NAME>
      <REQUIRES>transform_painter</REQUIRES>
      <EXAMPLE>shrink_to_upper_right_example</EXAMPLE>
      <SCHEME>
(define (shrink-to-upper-right painter)
  (transform-painter painter
    (make-vect 0.5 0.5)
    (make-vect 1.0 0.5)
    (make-vect 0.5 1.0)))
      </SCHEME>
      <JAVASCRIPT>
function shrink_to_upper_right(painter) {
    return transform_painter(painter,
                             make_vect(0.5, 0.5),
                             make_vect(1, 0.5),
                             make_vect(0.5, 1));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>shrink_to_upper_right_example</NAME>
      <REQUIRES>outline_painter</REQUIRES>
      <REQUIRES>unit_frame</REQUIRES>
      <JAVASCRIPT>
const shrunk_outline_painter =
          shrink_to_upper_right(outline_painter);

shrunk_outline_painter(unit_frame);
      </JAVASCRIPT>
    </SNIPPET>
    Other transformations rotate images counterclockwise by 90
    degrees<FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Rotate90</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>rotate90</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is a pure rotation only for square frames, because it also stretches and
    shrinks the image to fit into the rotated frame.</FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>rotate90</DECLARATION></INDEX> 
      <NAME>rotate90</NAME>
      <REQUIRES>transform_painter</REQUIRES>
      <EXAMPLE>rotate90_example</EXAMPLE>
      <SCHEME>
(define (rotate90 painter)
  (transform-painter painter
    (make-vect 1.0 0.0)
    (make-vect 1.0 1.0)
    (make-vect 0.0 0.0)))
      </SCHEME>
      <JAVASCRIPT>
function rotate90(painter) {
    return transform_painter(painter,
                             make_vect(1, 0),
                             make_vect(1, 1),
                             make_vect(0, 0));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>rotate90_example</NAME>
      <REQUIRES>outline_painter</REQUIRES>
      <REQUIRES>unit_frame</REQUIRES>
      <JAVASCRIPT>
const rotated_outline_painter =
          rotate90(outline_painter);

rotated_outline_painter(unit_frame);
      </JAVASCRIPT>
    </SNIPPET>
    or squash images towards the center of the frame:<FOOTNOTE>
    The diamond-shaped images in
    figures<SPACE/><REF NAME="fig:wave"/>
    and<SPACE/><REF NAME="fig:rogers"/> were created with
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>squash-inwards</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>squash_inwards</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    applied to <SCHEMEINLINE>wave</SCHEMEINLINE> and
    <SCHEMEINLINE>rogers</SCHEMEINLINE>.
    <!--
      <JAVASCRIPT>
	The diamond-shaped images in figure<SPACE/><REF NAME="fig:wave"/>
	were created with <JAVASCRIPTINLINE>squash_inwards</JAVASCRIPTINLINE>
	applied to <JAVASCRIPTINLINE>heart</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    --> </FOOTNOTE>
    <SNIPPET>
      <INDEX><DECLARATION>squash_inwards</DECLARATION></INDEX> 
      <NAME>squash_inwards</NAME>
      <REQUIRES>transform_painter</REQUIRES>
      <EXAMPLE>squash_inwards_example</EXAMPLE>
      <SCHEME>
(define (squash-inwards painter)
  (transform-painter painter
    (make-vect 0.0 0.0)
    (make-vect 0.65 0.35)
    (make-vect 0.35 0.65)))
      </SCHEME>
      <JAVASCRIPT>
function squash_inwards(painter) {
    return transform_painter(painter,
                             make_vect(0, 0),
                             make_vect(0.65, 0.35),
                             make_vect(0.35, 0.65));
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>squash_inwards_example</NAME>
      <REQUIRES>outline_painter</REQUIRES>
      <REQUIRES>unit_frame</REQUIRES>
      <JAVASCRIPT>
const squashed_outline_painter =
          squash_inwards(outline_painter);

squashed_outline_painter(unit_frame);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Frame transformation is also the key to
    defining means of combining two or more painters.
    The <SCHEMEINLINE>beside</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    for example, takes two painters, transforms them to paint in the left and
    right halves of an argument frame respectively, and produces a new,
    compound painter. When the compound painter is given a frame, it calls the
    first transformed painter to paint in the left half of the frame and calls
    the second transformed painter to paint in the right half of the frame:
    <SNIPPET>
      <INDEX><DECLARATION>beside</DECLARATION></INDEX> 
      <NAME>beside</NAME>
      <REQUIRES>transform_painter</REQUIRES>
      <EXAMPLE>beside_example</EXAMPLE>
      <SCHEME>
(define (beside painter1 painter2)
  (let ((split-point (make-vect 0.5 0.0)))
    (let ((paint-left
            (transform-painter painter1
              (make-vect 0.0 0.0)
              split-point
              (make-vect 0.0 1.0)))
          (paint-right
            (transform-painter painter2
              split-point
              (make-vect 1.0 0.0)
              (make-vect 0.5 1.0))))
      (lambda (frame)
        (paint-left frame)
        (paint-right frame)))))
      </SCHEME>
      <JAVASCRIPT>
function beside(painter1, painter2) {
    const split_point = make_vect(0.5, 0);
    const paint_left  = transform_painter(painter1,
                                          make_vect(0, 0),
                                          split_point,
                                          make_vect(0, 1));
    const paint_right = transform_painter(painter2,
                                          split_point,
                                          make_vect(1, 0),
                                          make_vect(0.5, 1));
    return frame => {
               paint_left(frame);
               paint_right(frame);
           };
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>beside_example</NAME>
      <REQUIRES>x_painter_example</REQUIRES>
      <JAVASCRIPT>
beside(x_painter, x_painter)(unit_frame);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Observe how the painter data abstraction, and in particular the
    representation of painters as
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    makes
    <SCHEMEINLINE>beside</SCHEMEINLINE> easy to implement.  The
    <SCHEMEINLINE>beside</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    need not know anything about the details of the component painters other
    than that each painter will draw something in its designated frame.
  </TEXT>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>Define</SCHEME>
      <JAVASCRIPT>Declare</JAVASCRIPT>
    </SPLITINLINE>
    the transformation
    <INDEX><USE>flip_horiz</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>flip-horiz</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>flip_horiz</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which flips painters horizontally, and transformations that rotate painters
    counterclockwise by 180 degrees and 270 degrees.
    <LABEL NAME="ex:rotate"/>
    <SOLUTION>
      <OL>
	<LI>
	  The transformation 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>flip-horiz</SCHEMEINLINE>:</SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>flip_horiz</JAVASCRIPTINLINE>:
	    </JAVASCRIPT>
	  </SPLITINLINE>
          <SNIPPET>
            <NAME>flip_horiz</NAME>
            <REQUIRES>transform_painter</REQUIRES>
	    <EXAMPLE>flip_horiz_example</EXAMPLE>
            <SCHEME>
(define (flip-horiz painter)
  (transform-painter painter
    (make-vect 1.0 0.0)   ; new origin
    (make-vect 0.0 0.0)   ; new end of edge1
    (make-vect 1.0 1.0))) ; new end of edge2
            </SCHEME>
            <JAVASCRIPT>
function flip_horiz(painter) {
    return transform_painter(painter,
               make_vect(1, 0),  // new origin
               make_vect(0, 0),  // new end of edge1
               make_vect(1, 1)); // new end of edge2
}
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET HIDE="yes">
            <NAME>flip_horiz_example</NAME>
            <REQUIRES>x_painter_example</REQUIRES>
	    <JAVASCRIPT>
flip_horiz(x_painter)(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
	</LI>
	<LI>
	  The transformation 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>rotate180</SCHEMEINLINE>:</SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>rotate180</JAVASCRIPTINLINE>:
	    </JAVASCRIPT>
	  </SPLITINLINE>
          <SNIPPET>
            <NAME>rotate180</NAME>
            <REQUIRES>transform_painter</REQUIRES>
	    <EXAMPLE>rotate180_example</EXAMPLE>
            <SCHEME>
(define (rotate180 painter)
  (transform-painter painter
    (make-vect 1.0 1.0)   ; new origin
    (make-vect 0.0 1.0)   ; new end of edge1
    (make-vect 1.0 0.0))) ; new end of edge2
            </SCHEME>
            <JAVASCRIPT>
function rotate180(painter) {
    return transform_painter(
               painter, 
               make_vect(1, 1),  // new origin
               make_vect(0, 1),  // new end of edge1
               make_vect(1, 0)); // new end of edge2
}
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET HIDE="yes">
            <NAME>rotate180_example</NAME>
            <REQUIRES>x_painter_example</REQUIRES>
	    <JAVASCRIPT>
rotate180(x_painter)(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
	</LI>
	<LI>
	  The transformation 
          <SPLITINLINE>
	    <SCHEME><SCHEMEINLINE>rotate270</SCHEMEINLINE>:</SCHEME>
	    <JAVASCRIPT><JAVASCRIPTINLINE>rotate270</JAVASCRIPTINLINE>:
	    </JAVASCRIPT>
	  </SPLITINLINE>
          <SNIPPET>
            <NAME>rotate270</NAME>
            <REQUIRES>transform_painter</REQUIRES>
	    <EXAMPLE>rotate270_example</EXAMPLE>
            <SCHEME>
(define (rotate270 painter)
  (transform-painter painter
    (make-vect 0.0 1.0)   ; new origin
    (make-vect 0.0 0.0)   ; new end of edge1
    (make-vect 1.0 0.0))) ; new end of edge2
            </SCHEME>
            <JAVASCRIPT>
function rotate270(painter) {
    return transform_painter(
               painter, 
               make_vect(0, 1),  // new origin
               make_vect(0, 0),  // new end of edge1
               make_vect(1, 0)); // new end of edge2
}
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET HIDE="yes">
            <NAME>rotate270_example</NAME>
            <REQUIRES>x_painter_example</REQUIRES>
	    <JAVASCRIPT>
rotate270(x_painter)(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
	</LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <SPLITINLINE>
      <SCHEME>Define</SCHEME>
      <JAVASCRIPT>Declare</JAVASCRIPT>
    </SPLITINLINE>
    the
     <INDEX><USE>below</USE></INDEX> 
    <SCHEMEINLINE>below</SCHEMEINLINE> operation for painters.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Below</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>below</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes two painters as arguments. The resulting painter, given a frame, 
	draws with the first painter in the bottom of the frame and with the
	second painter in the top.
    Define <SCHEMEINLINE>below</SCHEMEINLINE> in two different
    ways<EMDASH/>first by writing a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that is analogous to the
    <SCHEMEINLINE>beside</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    given above, and again in terms of <SCHEMEINLINE>beside</SCHEMEINLINE> and
    suitable rotation operations (from exercise<SPACE/><REF NAME="ex:rotate"/>).
    <LABEL NAME="ex:below"/>
    <SOLUTION>
      <OL>
	<LI>
	  First the direct method:
          <SNIPPET>
	    <NAME>below_definition</NAME>
            <REQUIRES>transform_painter</REQUIRES>
            <EXAMPLE>below_example</EXAMPLE>
            <SCHEME>
(define (below painter1 painter2)
  (let ((split-point (make-vect 0.0 0.5)))
    (let ((paint-upper
            (transform-painter painter1
              split-point
              (make-vect 1.0 0.0)
              (make-vect 0.0 0.5)))
          (paint-lower
            (transform-painter painter2
              (make-vect 0.0 0.0)
              (make-vect 1.0 0.0)
              split-point)))
      (lambda (frame)
        (paint-upper frame)
        (paint-lower frame)))))
            </SCHEME>
            <JAVASCRIPT>
function below(painter1, painter2) {
    const split_point = make_vect(0, 0.5);
    const paint_upper =
        transform_painter(painter1,
                          split_point,
                          make_vect(1, 0.5),
                          make_vect(0, 1));
    const paint_lower =
        transform_painter(painter2,
                          make_vect(0, 0),
                          make_vect(1, 0),
                          split_point);
    return frame => {
               paint_upper(frame);
               paint_lower(frame);
           };
}
            </JAVASCRIPT>
          </SNIPPET>
          <SNIPPET HIDE="yes">
            <NAME>below_example</NAME>
            <REQUIRES>x_painter_example</REQUIRES>
	    <JAVASCRIPT>
below(x_painter, x_painter)(unit_frame);
	    </JAVASCRIPT>
	  </SNIPPET>
	</LI>
	<LI>
	  Now the version with rotation and
	  <JAVASCRIPTINLINE>beside</JAVASCRIPTINLINE>:
          <SNIPPET>
            <REQUIRES>beside</REQUIRES>
            <REQUIRES>rotate90</REQUIRES>
            <REQUIRES>rotate270</REQUIRES>
            <EXAMPLE>below_example</EXAMPLE>
            <SCHEME>
(define (below painter1 painter2)
   (rotate270 (beside (rotate90 painter1)
                      (rotate90 painter2))))
            </SCHEME>
            <JAVASCRIPT>
function below(painter1, painter2) {
    return rotate270(beside(rotate90(painter1),
                            rotate90(painter2)));
}
            </JAVASCRIPT>
          </SNIPPET>
	</LI>
      </OL>
    </SOLUTION>
  </EXERCISE>

  <SUBHEADING>
    <NAME>Levels of language for robust design</NAME>
  </SUBHEADING>

  <SHORT_PAGE lines="2"/>
  <TEXT>
    The picture language exploits some of the critical ideas we<APOS/>ve
    introduced about abstraction with
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and data.  The fundamental data abstractions, painters, are implemented
    using
    <SPLITINLINE>
      <SCHEME>
        procedural
      </SCHEME>
      <JAVASCRIPT>
        functional
      </JAVASCRIPT>
    </SPLITINLINE>
    representations, which enables the language to handle different basic
    drawing capabilities in a uniform way.  The means of combination satisfy
    the closure property, which permits us to easily build up complex designs.
    Finally, all the tools for abstracting
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    are available to us for abstracting means of combination for painters.
  </TEXT>

  <TEXT>
    We have also obtained a glimpse of another crucial idea about languages and
    program design.  This is the approach of
    <INDEX>stratified design</INDEX>
    <INDEX>design, stratified</INDEX>
    <EM>stratified design</EM>, the notion that a complex system should be
    structured as a sequence of levels that are described using a sequence of
    languages. Each level is constructed by combining parts that are regarded
    as primitive at that level, and the parts constructed at each level are
    used as primitives at the next level.  The language used at each level
    of a stratified design has primitives, means of combination, and means
    of abstraction appropriate to that level of detail.
  </TEXT>

  <TEXT>
    Stratified design pervades the engineering of complex systems.  For
    example, in computer engineering, resistors and transistors are
    combined (and described using a language of analog circuits) to
    produce parts such as and-gates and or-gates, which form the
    primitives of a language for digital-circuit design.<FOOTNOTE>
    Section<SPACE/><REF NAME="sec:circuit-simulator"/> describes one such
    language.</FOOTNOTE> These parts are combined to build
    processors, bus structures, and memory systems, which are in turn
    combined to form computers, using languages appropriate to computer
    architecture.  Computers are combined to form distributed systems,
    using languages appropriate for describing network interconnections,
    and so on.
  </TEXT>

  <TEXT>
    As a tiny example of stratification, our picture language uses primitive
    elements (primitive painters) that specify points and lines to provide the
    shapes of a painter like <SCHEMEINLINE>rogers</SCHEMEINLINE>. The bulk of
    our description of the picture language focused on combining these
    primitives, using geometric combiners such as
    <SCHEMEINLINE>beside</SCHEMEINLINE> and <SCHEMEINLINE>below</SCHEMEINLINE>.
    We also worked at a higher level, regarding
    <SCHEMEINLINE>beside</SCHEMEINLINE> and <SCHEMEINLINE>below</SCHEMEINLINE>
    as primitives to be manipulated in a language whose operations, such as
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-of-four</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_of_four</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    capture common patterns of combining geometric combiners.
  </TEXT>

  <TEXT>
    Stratified design helps make programs
    <INDEX>robustness</INDEX>
    <EM>robust</EM>, that is, it makes
    it likely that small changes in a specification will require
    correspondingly small changes in the program.  For instance, suppose we
    wanted to change the image based on <SCHEMEINLINE>wave</SCHEMEINLINE>
    shown in figure<SPACE/><REF NAME="fig:sqlimit-designs"/>.  We could work
    at the lowest level to change the detailed appearance of the
    <SCHEMEINLINE>wave</SCHEMEINLINE> element; we could work at the middle
    level to change the way
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>corner-split</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    replicates the <SCHEMEINLINE>wave</SCHEMEINLINE>; we could work at the
    highest level to change how
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    arranges the four copies of the corner. In general, each level of a
    stratified design provides a different vocabulary for expressing the
    characteristics of the system, and a different kind of ability to change it.
  </TEXT>

  <EXERCISE>
    Make changes to the square limit of <SCHEMEINLINE>wave</SCHEMEINLINE>
    shown in figure<SPACE/><REF NAME="fig:sqlimit-designs"/> by working at
    each of the levels described above.  In particular:
    <OL>
      <LI>
        Add some segments to the primitive
	<SCHEMEINLINE>wave</SCHEMEINLINE> painter
        of exercise<SPACE/><REF NAME="ex:making-wave"/> (to add a smile, for
	example).
      </LI>
      <LI>
        Change the pattern constructed by
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>corner-split</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>corner_split</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        (for example, by using only one copy of the
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>up-split</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>up_split</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	and
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>right-split</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>right_split</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	images instead of two).
      </LI>
      <LI>
        Modify the version of
	<INDEX><USE>square_limit</USE></INDEX> 
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>square-limit</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>square_limit</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	that uses
	<INDEX><USE>square_of_four</USE></INDEX> 
        <SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>square-of-four</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>square_of_four</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
        so as to assemble the corners in a different pattern.
	(For example, you might make the big Mr. Rogers look outward 
	from each corner of the square.)
      </LI>
    </OL>
    <SOLUTION>
      <SNIPPET EXT="RUNES">
	<NAME>combine4_click_here</NAME>
        <REQUIRES>square_of_four</REQUIRES>
        <REQUIRES>identity</REQUIRES>
        <REQUIRES>corner_split</REQUIRES>
        <REQUIRES>square_limit_2</REQUIRES>
        <EXAMPLE>square_limit_example_2</EXAMPLE>
        <SCHEME>
(define (square-limit painter n)
  (let ((combine4 (square-of-four flip-horiz identity
                                  rotate180 flip-vert)))
    (combine4 (corner-split painter n))))
        </SCHEME>
        <JAVASCRIPT>
// Click here to play with any abstraction
// used for square_limit
        </JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <LABEL NAME="ex:2_52"/>
  </EXERCISE>
  <INDEX>picture language<CLOSE/></INDEX>
</SUBSECTION>
