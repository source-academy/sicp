<SUBSECTION>
   <LABEL NAME="sec:evaluating-combinations"></LABEL><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT>
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLIT><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT>
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLIT>
  <NAME>
    评估
    <SPLITINLINE>
      <SCHEME>组合</SCHEME>
      <JAVASCRIPT>操作符组合</JAVASCRIPT>
    </SPLITINLINE>
  </NAME><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT>
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLIT>
  <NAME>
    评估
    <SPLITINLINE>
      <SCHEME>组合</SCHEME>
      <JAVASCRIPT>操作符组合</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LONG_PAGE lines="1"></LONG_PAGE> <LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT> 
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
   </SPLIT>
  <NAME>
    Evaluating
     <SPLITINLINE>
      <SCHEME>组合</SCHEME>
      <JAVASCRIPT>操作符组合</JAVASCRIPT>
    </SPLITINLINE>
   </NAME>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
     <SPLITINLINE>
      <JAVASCRIPT>
	操作符
      </JAVASCRIPT>
    </SPLITINLINE>
    组合, 解释器本身在遵循一个过程。
    <COMMENT>
      由于关键字
      <JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>很重要, 我们通常将对&quot;过程/过程式&quot;的引用替换为
      对&quot;函数/函数式&quot;的引用。上述句子是个例外; 
      术语&quot;过程性思维&quot;和&quot;过程&quot;或许在此JavaScript版中仍旧适用。
    </COMMENT>
    <UL>
      <LI>
      要评估
      <SPLITINLINE>
	<SCHEME>
	  一个组合,
	</SCHEME>
	<JAVASCRIPT>
	  一个操作符组合,
	</JAVASCRIPT>
      </SPLITINLINE>
      请执行以下操作：
      <OL>
        <LI>评估
	<SPLITINLINE>
	  <SCHEME>
	    子表达式
	  </SCHEME>
	  <JAVASCRIPT>
	    操作数表达式
	  </JAVASCRIPT>
	</SPLITINLINE>
	组合的。</LI>
        <LI>
	  <SPLITINLINE>
	    <SCHEME>
	      应用
	      该过程
	      就是左边第一个
              子表达式(操作符)的值，并应用于其它子表达式(操作数)的值。
	    </SCHEME>
	    <JAVASCRIPT>
	      应用该函数，该函数由操作符表示，并应用于
              操作数的值。
	    </JAVASCRIPT>
	  </SPLITINLINE>
        </LI>
      </OL>
      </LI>
    </UL>
    <COMMENT>
      Scheme版本不区分操作符和应用组合。然而，由于中缀表示法，
      JavaScript版本需要为这两者描述稍有不同的规则。本节包含了操作符
      组合的规则，而1.1.5节为函数应用引入了新的规则。
    </COMMENT>
    即使是这个简单的规则也说明了一些关于
    流程的重要点。首先可以看到，第一步规定
    为实现对组合的评估过程，我们必须首先对组合的
    每个操作数执行评估过程。因此，评估规则是
    <INDEX>递归</INDEX>
    <EM>递归</EM>性质的;
    也就是说，其步骤之一包括需要调用规则
    本身。<SPLITINLINE><SCHEME><FOOTNOTE>可能看起来奇怪的是评估
    规则在第一步中说，应该评估组合的最左边
    元素，因为此时该元素只能是一个操作符
    例如<SCHEMEINLINE>+</SCHEMEINLINE>或<SCHEMEINLINE>*</SCHEMEINLINE>
    代表内置基本过程如加法或
    乘法。我们稍后会看到可以使用
    其操作符本身是复合表达式的组合这点很有用。
  </FOOTNOTE></SCHEME></SPLITINLINE>
   </TEXT><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT> 
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
   </SPLIT>
  <NAME>
    Evaluating
     <SPLITINLINE>
      <SCHEME>组合</SCHEME>
      <JAVASCRIPT>操作符组合</JAVASCRIPT>
    </SPLITINLINE>
   </NAME>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
     <SPLITINLINE>
      <JAVASCRIPT>
	操作符
      </JAVASCRIPT>
    </SPLITINLINE>
    组合，解释器本身在遵循一个过程。
    <COMMENT>
      由于关键字
      <JAVASCRIPTINLINE>function</JAVASCRIPTINLINE>的重要性，我们通常将对&quot;过程/过程式&quot;的引用替换为
      对&quot;函数/函数式&quot;的引用。上述句子是一个例外；
      术语&quot;过程性思考&quot;和&quot;过程&quot;可能在这里的JavaScript版本中仍然适用。
    </COMMENT>
    <UL>
      <LI>
      要评估
      <SPLITINLINE>
	<SCHEME>
	  一个组合，
	</SCHEME>
	<JAVASCRIPT>
	  一个操作符组合，
	</JAVASCRIPT>
      </SPLITINLINE>
      请执行以下操作：
      <OL>
        <LI>评估
	<SPLITINLINE>
	  <SCHEME>
	    子表达式
	  </SCHEME>
	  <JAVASCRIPT>
	    操作数表达式
	  </JAVASCRIPT>
	</SPLITINLINE>
	组合的。</LI>
        <LI>
	  <SPLITINLINE>
	    <SCHEME>
	      应用
	      该过程
	      就是最左边
              子表达式（操作符）的值，应用于其他子表达式（操作数）的值。
	    </SCHEME>
	    <JAVASCRIPT>
	      应用由
              操作符表示的函数，将其应用于
              操作数的值。
	    </JAVASCRIPT>
	  </SPLITINLINE>
        </LI>
      </OL>
      </LI>
    </UL>
    <COMMENT>
      Scheme版本不区分操作符和
      应用组合。然而，由于中缀表示法，
      JavaScript版本需要为这两者描述稍微不同的
      规则。本节包含操作符
      组合的规则，而1.1.5节引入了函数
      应用的新规则。
    </COMMENT>
    即使是这个简单的规则也说明了一些关于
    过程的重要点。首先可以观察到，第一步规定
    为了完成组合的评估过程，我们必须首先对
    组合的每个操作数进行评估过程。因此，评估规则是
    <INDEX>递归</INDEX>
    <EM>递归的</EM>性质；
    也就是说，它包括的其中一个步骤需要调用规则
    本身。<SPLITINLINE><SCHEME><FOOTNOTE>评估规则可能看起来很奇怪，
    因为在第一步中，它说我们应该评估一个组合的最左边
    元素，因为在这一点上那只能是一个操作符
    例如<SCHEMEINLINE>+</SCHEMEINLINE>或<SCHEMEINLINE>*</SCHEMEINLINE>
    代表内建基本过程如加法或
    乘法。稍后我们将看到可以与
    操作符本身是复合表达式的组合进行工作是有用的。
  </FOOTNOTE></SCHEME></SPLITINLINE>
   </TEXT>
  <TEXT>
    Notice how succinctly the idea of recursion can be used to express
     <INDEX>递归<SUBINDEX>表示复杂过程</SUBINDEX></INDEX>
    在深入嵌套的组合情况下，否则将被视为相当复杂的过程。例如，评估
     <SNIPPET>
      <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
      </JAVASCRIPT>
    </SNIPPET>
    requires that the evaluation rule be applied to four different
    combinations.  We can obtain a picture of this process by
    representing the combination in the form of a
     <INDEX>操作符组合<SUBINDEX><ORDER>树</ORDER>作为树</SUBINDEX></INDEX>
    <INDEX>树<SUBINDEX>被视为组合</SUBINDEX></INDEX>
    树，如图
    <SPLITINLINE>
      <SCHEME>
	图<SPACE></SPACE><REF NAME="fig:tree-comb_scheme"></REF>.
      </SCHEME>
      <JAVASCRIPT>
	图<SPACE></SPACE><REF NAME="fig:tree-comb"></REF>.
      </JAVASCRIPT>
    </SPLITINLINE>
    每个组合由一个
    <INDEX>树的节点</INDEX>
    节点表示，其
    <INDEX>树的分支</INDEX>
    分支对应于操作符和
    从中分支出的组合的操作数。
    该
    <INDEX>树的终端节点</INDEX>
    终端节点（即没有
    从中分支出的节点）表示操作符或数字。
    从树的角度来看评估，我们可以想象操作数的
    值从终端节点开始向上流动，然后在更高的层级进行组合。一般来说，我们
    将看到递归是一种处理
    层次结构、树状对象的非常有力的技术。事实上，<QUOTE>向上渗透值</QUOTE>形式的评估规则是
    一种被称为
    <INDEX>树积累</INDEX>
    <EM>树积累</EM>的一般过程的示例。

    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch1-Z-G-1.svg">
          <LABEL NAME="fig:tree-comb_scheme"></LABEL>
          <CAPTION>树表示法，显示每个子组合的值。
          </CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE src="img_javascript/ch1-Z-G-1.svg"></FIGURE>
          <LABEL NAME="fig:tree-comb"></LABEL>
          <CAPTION>树表示法，显示每个子表达式的值。
          </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
   </TEXT><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT> 
    <SCHEME>
      <INDEX>组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </SCHEME>
    <JAVASCRIPT>
      <INDEX>操作符组合<SUBINDEX>的评估</SUBINDEX><OPEN></OPEN></INDEX>
      <INDEX>评估<SUBINDEX>操作符组合的</SUBINDEX><OPEN></OPEN></INDEX>
    </JAVASCRIPT>
   </SPLIT>
  <NAME>
    Evaluating
     <SPLITINLINE>
      <SCHEME>组合</SCHEME>
      <JAVASCRIPT>操作符组合</JAVASCRIPT>
    </SPLITINLINE>
   </NAME>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Thread thread_HVFxSAHlL1z9dR8NplUOQNKA already has an active run run_EWbh3JnXFQemAuIl0VrY4hIH.--></TEXT>
  <TEXT>
    Notice how succinctly the idea of recursion can be used to express
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SNIPPET>
      <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
      </JAVASCRIPT>
    </SNIPPET>
    requires that the evaluation rule be applied to four different
    combinations.  We can obtain a picture of this process by
    representing the combination in the form of a
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>


  <TEXT>
    Next, observe that the repeated application of the first step brings
    us to the point where we need to evaluate, not combinations, but
    primitive expressions such as 
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></SPLIT>
  <NAME>
    Evaluating
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></NAME>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>
  <TEXT>
    Notice how succinctly the idea of recursion can be used to express
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SNIPPET>
      <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
      </JAVASCRIPT>
    </SNIPPET>
    requires that the evaluation rule be applied to four different
    combinations.  We can obtain a picture of this process by
    representing the combination in the form of a
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>


  <TEXT>
    Next, observe that the repeated application of the first step brings
    us to the point where we need to evaluate, not combinations, but
    primitive expressions such as 
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>
  <TEXT>
    Notice that the
    evaluation rule given above does not handle
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SCHEMEINLINE>x</SCHEMEINLINE> and the other of which is
    3, since the purpose of the
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SCHEMEINLINE>x</SCHEMEINLINE> with a value.
    (That is,
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT><LABEL NAME="sec:evaluating-combinations"></LABEL>
  <SPLIT><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></SPLIT>
  <NAME>
    Evaluating
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></NAME>

  <LONG_PAGE lines="1"></LONG_PAGE>
  <TEXT>
    One of our goals in this chapter is to isolate issues about thinking
    procedurally.  As a case in point, let us consider that, in evaluating
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>
  <TEXT>
    Notice how succinctly the idea of recursion can be used to express
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SNIPPET>
      <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
      </SCHEME>
      <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
      </JAVASCRIPT>
    </SNIPPET>
    requires that the evaluation rule be applied to four different
    combinations.  We can obtain a picture of this process by
    representing the combination in the form of a
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>


  <TEXT>
    Next, observe that the repeated application of the first step brings
    us to the point where we need to evaluate, not combinations, but
    primitive expressions such as 
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>
  <TEXT>
    Notice that the
    evaluation rule given above does not handle
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SCHEMEINLINE>x</SCHEMEINLINE> and the other of which is
    3, since the purpose of the
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><SCHEMEINLINE>x</SCHEMEINLINE> with a value.
    (That is,
    <!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></TEXT>
  <TEXT>
    <SPLIT><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--><!-- Error occured while translating this section-->
<!-- Error: Error: 400 Can't add messages to thread_HVFxSAHlL1z9dR8NplUOQNKA while a run run_EWbh3JnXFQemAuIl0VrY4hIH is active.--></SPLIT>
  </TEXT></SUBSECTION>