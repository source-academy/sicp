<SECTION>

  <NAME>A Register-Machine Simulator</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:simulator"/>

  <INDEX>register machine<SUBINDEX>simulator<OPEN/></SUBINDEX></INDEX>
  <INDEX>register-machine simulator<OPEN/></INDEX>
  <INDEX>simulation<SUBINDEX><ORDER>register</ORDER>of register machine<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    <LONG_PAGE lines="2"/>In order to gain a good understanding of the design of register machines,
    we must test the machines we design to see if they perform as expected.
    One way to test a design is to hand-simulate the operation of the
    controller, as in exercise<SPACE/><REF NAME="ex:hand-sim"/>.  But this is
    extremely tedious for all but the simplest machines.  In this section we
    construct a simulator for machines described in the register-machine
    language.  The simulator is a
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    program with
    four interface
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <PYTHON>functions.</PYTHON>
    </SPLITINLINE>
    The first uses a description of a register
    machine to construct a model of the machine (a data structure whose
    parts correspond to the parts of the machine to be simulated), and the
    other three allow us to simulate the machine by manipulating the
    model:
    <UL>
      <LI>
	<SPLITINLINE>
	  <SCHEME>(make-machine register-names operations controller)</SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>make_machine(</PYTHONINLINE><!--
	    --><META>register-names</META><!--
	    --><PYTHONINLINE>, </PYTHONINLINE><!--
            --><META>operations</META><!--
	    --><PYTHONINLINE>, </PYTHONINLINE><!--
            --><META>controller</META><!--
	    --><PYTHONINLINE>)</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<INDEX><USE>make_machine</USE></INDEX> 
	<BR/>
	constructs and returns a model of the machine with the given
	registers, operations, and controller.
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>(set_register_contents machine-model register-name value)</SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>set_register_contents(</PYTHONINLINE><!--
	    --><META>machine-model</META><!--
	    --><PYTHONINLINE>, </PYTHONINLINE><!--
	    --><META>register-name</META><!--
	    --><PYTHONINLINE>, </PYTHONINLINE><!--
            --><META>value</META><!--
	    --><PYTHONINLINE>)</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<INDEX><USE>set_register_contents</USE></INDEX> 
	<BR/>
	stores a value in a simulated register in the given machine.
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>(get-register-contents machine-model, register-name)</SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>get_register_contents(</PYTHONINLINE><!--
	    --><META>machine-model</META><!--
	    --><PYTHONINLINE>, </PYTHONINLINE><!--
            --><META>register-name</META><!--
	    --><PYTHONINLINE>)</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<INDEX><USE>get_register_contents</USE></INDEX> 
	<BR/>
	returns the contents of a simulated register in the given machine.
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>(start machine-model)</SCHEME>
	  <PYTHON>
	    <PYTHONINLINE>start(</PYTHONINLINE><!--
	    --><META>machine-model</META><!--
	    --><PYTHONINLINE>)</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<INDEX><USE>start</USE> register machine</INDEX>
	<BR/>
	simulates the execution of the given machine, starting from the
	beginning of the controller sequence and stopping when it reaches the
	end of the sequence.
      </LI>
    </UL>
  </TEXT>

  <TEXT>
    As an example of how these
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are used, we can define
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>gcd-machine</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>gcd_machine</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    to be a model of the GCD machine
    of section<SPACE/><REF NAME="sec:register-machine-language"/> as follows:
    <SNIPPET HIDE="yes">
      <NAME>gcd_machine_example</NAME>
      <REQUIRES>gcd_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <PYTHON>
set_register_contents(gcd_machine, "a", 206);
set_register_contents(gcd_machine, "b", 40);
start(gcd_machine);
get_register_contents(gcd_machine, "a");	  
      </PYTHON>
    </SNIPPET>
    <SNIPPET>
      <INDEX><USE>gcd</USE><SUBINDEX>register machine for</SUBINDEX></INDEX>
      <INDEX><DECLARATION>gcd_machine</DECLARATION></INDEX>
      <NAME>gcd_machine</NAME>
      <REQUIRES>make_machine</REQUIRES>
      <EXAMPLE>gcd_machine_example</EXAMPLE>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(define gcd-machine
  (make-machine
   '(a b t)
   (list (list 'rem remainder) (list '= =))
   '(test-b
       (test (op =) (reg b) (const 0))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       (goto (label test-b))
     gcd-done)))
      </SCHEME>
      <PYTHON>
const gcd_machine =
    make_machine(
        list("a", "b", "t"),
        list(list("rem", (a, b) => a % b),
             list("=", (a, b) => a === b)),
        list(
          "test_b",
            test(list(op("="), reg("b"), constant(0))),
            branch(label("gcd_done")),
            assign("t", list(op("rem"), reg("a"), reg("b"))),
            assign("a", reg("b")),
            assign("b", reg("t")),
            go_to(label("test_b")),
          "gcd_done"));
      </PYTHON>
    </SNIPPET>
    The first argument to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-machine</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_machine</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    is a list of register names. The next argument is a table (a list of
    two-element lists) that pairs each operation name with a 
    <SPLITINLINE>
      <SCHEME>Scheme procedure</SCHEME>
      <PYTHON>JavaScript function</PYTHON>
    </SPLITINLINE>
    that implements the operation (that is, produces the same output value
    given the same input values). The last argument specifies the controller
    as a list of labels and machine instructions, as in
    section<SPACE/><REF NAME="sec:designing-register-machines"/>.
  </TEXT>

  <TEXT>
    To compute GCDs with this machine, we set the input registers, start the
    machine, and examine the result when the simulation terminates:
    <SNIPPET>
      <NAME>set_register_contents_a</NAME>
      <REQUIRES>gcd_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
(set-register-contents! gcd-machine 'a 206)
      </SCHEME>
      <SCHEMEOUTPUT>
done
      </SCHEMEOUTPUT>
      <PYTHON>
set_register_contents(gcd_machine, "a", 206);
      </PYTHON>
      <PYTHON_OUTPUT>
"done"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>set_register_contents_b</NAME>
      <REQUIRES>set_register_contents_a</REQUIRES>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
(set-register-contents! gcd-machine 'b 40)
      </SCHEME>
      <SCHEMEOUTPUT>
done
      </SCHEMEOUTPUT>
      <PYTHON>
set_register_contents(gcd_machine, "b", 40);
      </PYTHON>
      <PYTHON_OUTPUT>
"done"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>start_gcd_machine</NAME>
      <REQUIRES>set_register_contents_b</REQUIRES>
      <EXPECTED>'done'</EXPECTED>
      <SCHEME>
(start gcd-machine)
      </SCHEME>
      <SCHEMEOUTPUT>
done
      </SCHEMEOUTPUT>
      <PYTHON>
start(gcd_machine);
      </PYTHON>
      <PYTHON_OUTPUT>
"done"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>get_register_contents_a</NAME>
      <REQUIRES>start_gcd_machine</REQUIRES>
      <EXPECTED>2</EXPECTED>
      <SCHEME>
(get-register-contents gcd-machine 'a)
      </SCHEME>
      <SCHEMEOUTPUT>
2
      </SCHEMEOUTPUT>
      <PYTHON>
get_register_contents(gcd_machine, "a");
      </PYTHON>
      <PYTHON_OUTPUT>
2
      </PYTHON_OUTPUT>
    </SNIPPET>

    This computation will run much more slowly than a
    <SCHEMEINLINE>gcd</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    written in
    <SPLITINLINE>
      <SCHEME>Scheme,</SCHEME>
      <PYTHON>JavaScript,</PYTHON>
    </SPLITINLINE>
      because we will simulate low-level machine instructions, such as
      <SCHEMEINLINE>assign</SCHEMEINLINE>, by much more complex operations.
  </TEXT>

  <EXERCISE>
    Use the simulator to test the machines you designed in
    exercise<SPACE/><REF NAME="ex:design-reg-machines"/>.
    <LABEL NAME="ex:use-simulator"/>
  </EXERCISE>

  <!-- Subsection 1 : The Machine Model -->
  &amp;subsection5.2.1;

  <!-- Subsection 2 : The Assembler -->
  &amp;subsection5.2.2;

  <!-- Subsection 3 : Generating Execution Procedures for Instructions -->
  &amp;subsection5.2.3;

  <!-- Subsection 4 : Monitoring Machine Performance -->
  &amp;subsection5.2.4;

</SECTION>
