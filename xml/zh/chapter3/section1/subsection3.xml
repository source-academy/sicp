<SUBSECTION> 
   <NAME>
    引入赋值的代价
</NAME> 

  <LABEL NAME="sec:costs-of-assignment"></LABEL>
   <INDEX>赋值<SUBINDEX>代价<OPEN></OPEN></SUBINDEX></INDEX> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    正如我们所见，
    <SPLITINLINE>
      
	set! 操作
      
      <JAVASCRIPT>
	赋值
      </JAVASCRIPT>
    </SPLITINLINE>
    使我们能够建模具有局部状态的对象。然而，这种优势是有代价的。我们的编程语言不再可以根据我们在
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用的替换模型中进行解释，详情参见节<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>。此外，没有一个具有“良好”数学性质的简单模型可以成为处理编程语言中的对象和赋值的充分框架。
  </TEXT> 

   <TEXT>
    只要我们不使用赋值，两次评估相同
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    使用相同的参数将产生相同的结果，这样
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以被视为计算数学函数。因此，不使用任何赋值进行编程，就像我们在本书的前两章所做的那样，被称为
    <INDEX>函数式编程</INDEX>
    <EM>函数式编程</EM>。
  </TEXT> 

  <TEXT>
     <INDEX>函数应用的代换模型<SUBINDEX>不足之处<OPEN></OPEN></SUBINDEX></INDEX>
    为了理解赋值如何使事情变得复杂，考虑一个简化版本的
<SCHEMEINLINE>make_withdraw</SCHEMEINLINE>
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    在节<SPACE></SPACE><REF NAME="sec:local-state-variables"></REF>中，它不检查是否有不足的情况：
     <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_simplified_withdraw</DECLARATION></INDEX> 
      <NAME>make_simplified_withdraw</NAME>
      <EXAMPLE>make_simplified_withdraw_example</EXAMPLE>
      <SCHEME>
(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))
      </SCHEME>
      <JAVASCRIPT>
function make_simplified_withdraw(balance) {
    return amount =&gt; {
               balance = balance - amount;
               return balance;
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <SCHEME>
(define W (make-simplified-withdraw 25))
      </SCHEME>
      <JAVASCRIPT>
const W = make_simplified_withdraw(25);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example1</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example</REQUIRES>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>make_simplified_withdraw_example2</NAME>
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example</REQUIRES>
      <REQUIRES>make_simplified_withdraw_example1</REQUIRES>
      <EXPECTED>-5</EXPECTED>
      <SCHEME>
(W 10)
      </SCHEME>
      <SCHEMEOUTPUT>
-5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W(10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
-5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET> 
    比较此
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    与下列
<SCHEMEINLINE>make_decrementer</SCHEMEINLINE>
     <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    不使用
    <SPLITINLINE>
      set!:
      <JAVASCRIPT>赋值:</JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_decrementer</DECLARATION></INDEX> 
      <NAME>make_decrementer</NAME>
      <SCHEME>
            (define (make-decrementer balance)
            (lambda (amount)
            (- balance amount)))
      </SCHEME>
      <JAVASCRIPT>
function make_decrementer(balance) {
    return amount =&gt; balance - amount;
}    
      </JAVASCRIPT>
    </SNIPPET>
     <SPLITINLINE>
      make-decrementer
    
    <JAVASCRIPT>
      The function
      <JAVASCRIPTINLINE>make_decrementer</JAVASCRIPTINLINE>
    </JAVASCRIPT></SPLITINLINE>
    返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    用于从指定数量中减去其输入
     <SCHEMEINLINE>balance</SCHEMEINLINE> ，但与连续调用没有累积效果，如同 <SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE> ：
     <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer</REQUIRES>
      <NAME>make_decrementer_example</NAME>
      <SCHEME>
(define D (make-decrementer 25))
      </SCHEME>
      <JAVASCRIPT>
const D = make_decrementer(25);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer_example</REQUIRES>
      <NAME>make_decrementer_example1</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(D 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
D(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer_example1</REQUIRES>
      <NAME>make_decrementer_example2</NAME>
      <EXPECTED>15</EXPECTED>
      <SCHEME>
(D 10)
      </SCHEME>
      <SCHEMEOUTPUT>
15
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
D(10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
15
      </JAVASCRIPT_OUTPUT>
    </SNIPPET> 
    我们可以使用代换模型来解释如何
<SCHEMEINLINE>make_decrementer</SCHEMEINLINE> 工作。例如，让我们分析表达式的求值 <SNIPPET EVAL="yes">
      <REQUIRES>make_decrementer</REQUIRES>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
((make-decrementer 25) 20)
      </SCHEME>
      <JAVASCRIPT>
make_decrementer(25)(20)
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
make_decrementer(25)(20);
      </JAVASCRIPT_RUN>
    </SNIPPET> 
    首先，我们通过替换简化
    <SPLITINLINE>
      
	组合的运算符
      
      <JAVASCRIPT>
	应用的函数表达式
      </JAVASCRIPT>
    </SPLITINLINE>
     <LATEXINLINE>$25$</LATEXINLINE>  为  <SCHEMEINLINE>balance</SCHEMEINLINE> 在
    <SPLITINLINE>
      
	make-decrementer 的
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>make_decrementer</JAVASCRIPTINLINE> 的
      </JAVASCRIPT>
    </SPLITINLINE>
    函数体中。这将表达式简化为
     <SNIPPET EVAL="yes">
      <SCHEME>
((lambda (amount) (- 25 amount)) 20)
      </SCHEME>
      <JAVASCRIPT>
(amount =&gt; 25 - amount)(20)
      </JAVASCRIPT>
    </SNIPPET> 
    现在我们通过用 20 替换来应用
    <SPLITINLINE>
      
	运算符
      
      <JAVASCRIPT>
	函数 
      </JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>amount</SCHEMEINLINE> 
    现在我们在
    <SPLITINLINE>
      
	lambda 
      
      <JAVASCRIPT>
	lambda
      </JAVASCRIPT>
    </SPLITINLINE>
    表达式的函数体内进行替换：
<SNIPPET EVAL="yes">
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(- 25 20)
      </SCHEME>
      <JAVASCRIPT>
25 - 20
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
25 - 20;
      </JAVASCRIPT_RUN>
    </SNIPPET> 
    最终答案是 5。  <!--   FIXME: no page break here   -->
 </TEXT>

  <TEXT> 
    然而，请观察如果我们尝试进行类似的替换分析
    with 
<SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE> ：
     <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <SCHEME>
((make-simplified-withdraw 25) 20)
      </SCHEME>
      <JAVASCRIPT>
make_simplified_withdraw(25)(20)
      </JAVASCRIPT>
    </SNIPPET> 
    首先，我们通过用 25 替换来简化
    <SPLITINLINE>
      
	运算符
      
      <JAVASCRIPT>
	函数表达式
      </JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>balance</SCHEMEINLINE> 在
    <SPLITINLINE>函数体中
    <JAVASCRIPT>函数体中</JAVASCRIPT></SPLITINLINE>
     <SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE> 。这将表达式简化为
    <SPLITINLINE>
      
	表达式
      
      <JAVASCRIPT>
	表达式
      </JAVASCRIPT>
    </SPLITINLINE>
    <FOOTNOTE>我们不为
    balance 在
    <SPLITINLINE>
      set! 表达式
      <JAVASCRIPT>赋值</JAVASCRIPT>
    </SPLITINLINE>
    中的出现进行替换，因为在
    <SPLITINLINE>
      a set!
      <JAVASCRIPT>赋值</JAVASCRIPT>
    </SPLITINLINE>
    中的name不会被评估。如果我们对其进行替换，将得到
    <SPLITINLINE>
      (set! 25 (- 25 amount))，
      <JAVASCRIPT><JAVASCRIPTINLINE>25 = 25 - amount;，</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    这是没有意义的。</FOOTNOTE>
     <SNIPPET EVAL="no"> 
      <SCHEME>
((lambda (amount) (set! balance (- 25 amount)) 25) 20)
      </SCHEME>
      <JAVASCRIPT>
(amount =&gt; {
     balance = 25 - amount; 
     return 25;
 })(20)
      </JAVASCRIPT>
    </SNIPPET> 
    现在我们通过用 20 替换来应用
    <SPLITINLINE>
      运算符
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>amount</SCHEMEINLINE> 
    在
    <SPLITINLINE>
      
	lambda 表达式的函数体中：
      
      <JAVASCRIPT>
	lambda 表达式的函数体中：
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET EVAL="no">
      <SCHEME>
(set! balance (- 25 20)) 25
      </SCHEME>
      <JAVASCRIPT>
balance = 25 - 20;
return 25;
      </JAVASCRIPT>
    </SNIPPET> 
    如果我们坚持代换模型，我们就不得不说
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用的意义是先设置
<SCHEMEINLINE>balance</SCHEMEINLINE> 设为 5 然后返回 25 作为表达式的值。 这得出了错误的答案。 为了得到正确的答案，我们必须以某种方式区分出第一次出现的
<SCHEMEINLINE>balance</SCHEMEINLINE> (在
    <SPLITINLINE>
      set! 之前的效果
      
    <JAVASCRIPT>赋值之前的效果)
    </JAVASCRIPT>
    中的首次出现与第二次出现相区别 
</SPLITINLINE><SCHEMEINLINE>balance</SCHEMEINLINE> 
    (在 
    <SPLITINLINE>set! 之后的效果),
    <JAVASCRIPT>赋值之后的效果),</JAVASCRIPT>
    </SPLITINLINE>
    而代换模型无法做到这一点。
   </TEXT>

   <TEXT>
    这里的问题在于替换最终是基于这样一种观念：
    <SPLITINLINE>
      
        我们语言中的符号本质上是
        值的名称。
      
      <JAVASCRIPT>
        我们语言中的名称本质上是
        值的符号。
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      
        但一旦我们引入 set! 和
        变量值可以改变的观念，变量就不能再仅仅是一个名称。现在，变量以某种方式指向一个可以存储值的地方，并且存储在这个地方的值可以改变。
        <INDEX>函数应用的代换模型<SUBINDEX>不足之处<CLOSE></CLOSE></SUBINDEX></INDEX>
      
      <JAVASCRIPT>
        这对常量来说很好用。
        但一个值可以通过赋值改变的变量，不能仅仅是一个值的名称。变量以某种方式指向一个可以存储值的地方，并且存储在这个地方的值可以改变。
        <INDEX>函数应用的代换模型<SUBINDEX>不足之处<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLIT>
    在节<SPACE></SPACE><REF NAME="sec:environment-model"></REF>中，我们将看到环境在我们的计算模型中扮演“地方”的角色。
  </TEXT> 

   <SUBHEADING>
    <NAME>同一性与变化</NAME>
  </SUBHEADING> 

   <INDEX>同一性与变化<SUBINDEX>含义<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX>变化与同一性<SUBINDEX>含义<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    这里出现的问题不仅仅是某种特定计算模型的崩溃。当我们将变化引入到我们的计算模型中时，许多以前简单明了的概念变得复杂起来。考虑两个事物<QUOTE>相同</QUOTE>的概念。
  </TEXT> 

   <TEXT>
    假设我们调用
    <SPLITINLINE>
      make-decrementer
      <JAVASCRIPT><JAVASCRIPTINLINE>make_decrementer</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    两次，使用相同的参数来创建两个
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    
      <REQUIRES>make_decrementer</REQUIRES>
      
(define D1 (make-decrementer 25))

(define D2 (make-decrementer 25))
      
      <JAVASCRIPT>
const D1 = make_decrementer(25);
<SHORT_SPACE></SHORT_SPACE>
const D2 = make_decrementer(25);
      </JAVASCRIPT>
    
    D1
    和 
    D2
    是相同的吗？一个可以接受的答案是是，因为
    D1
    和
    D2
    具有相同的计算行为——每个都是一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，用于从 25 中减去其输入。事实上，
    D1
    可以替换
    D2
    于任何计算中而不改变结果。
  </TEXT> 

  <TEXT> 
    将此与两次调用
    <SPLITINLINE>
      make-simplified-withdraw：
      <JAVASCRIPT><JAVASCRIPTINLINE>make_simplified_withdraw</JAVASCRIPTINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw</REQUIRES>
      <NAME>make_simplified_withdraw_example3</NAME>
      <SCHEME>
(define W1 (make-simplified-withdraw 25))

(define W2 (make-simplified-withdraw 25))
      </SCHEME>
      <JAVASCRIPT>
const W1 = make_simplified_withdraw(25);
<SHORT_SPACE></SHORT_SPACE>
const W2 = make_simplified_withdraw(25);
      </JAVASCRIPT>
    </SNIPPET> 
    是
<SCHEMEINLINE>W1</SCHEMEINLINE> 和 
     <SCHEMEINLINE>W2</SCHEMEINLINE> 相同吗？当然不是，因为调用
     <SCHEMEINLINE>W1</SCHEMEINLINE> 和  <SCHEMEINLINE>W2</SCHEMEINLINE> 
    具有不同的效果，如以下交互序列所示：
     <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example3</REQUIRES>
      <NAME>make_simplified_withdraw_example4</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W1 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example4</REQUIRES>
      <NAME>make_simplified_withdraw_example5</NAME>
      <EXPECTED>-15</EXPECTED>
      <SCHEME>
(W1 20)
      </SCHEME>
      <SCHEMEOUTPUT>
-15
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W1(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
-15
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <REQUIRES>make_simplified_withdraw_example5</REQUIRES>
      <NAME>make_simplified_withdraw_example6</NAME>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(W2 20)
      </SCHEME>
      <SCHEMEOUTPUT>
5
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
W2(20);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
5
      </JAVASCRIPT_OUTPUT>
    </SNIPPET> 
    即使 
<SCHEMEINLINE>W1</SCHEMEINLINE> 和 
     <SCHEMEINLINE>W2</SCHEMEINLINE> 和
    make_simplified_withdraw(25)
    从某种意义上说是“相等”的，因为它们都是通过求值相同的表达式创建的，
    <SPLITINLINE>
      (make-simplified-withdraw 25)，
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>make_simplified_withdraw(25)</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    但这并不表示
<SCHEMEINLINE>W1</SCHEMEINLINE> 可以被替换为 
     <SCHEMEINLINE>W2</SCHEMEINLINE> 替代于任何表达式中而不改变该表达式的求值结果。
   </TEXT>

   <TEXT>
    一种支持在表达式中“相等可以替换为相等”而不改变表达式值的语言，被称为具有
    <INDEX>引用透明性</INDEX>
    <INDEX>透明性，引用</INDEX>
    <INDEX>相等性<SUBINDEX>引用透明性和</SUBINDEX></INDEX>
    <EM>引用透明性</EM>。当我们在计算机语言中加入
    <SPLITINLINE>
      set!
      <JAVASCRIPT>赋值</JAVASCRIPT>
    </SPLITINLINE>
    时，引用透明性被破坏。这使得通过替换等价表达式来简化表达式变得棘手。因此，关于使用赋值的程序的推理变得极其困难。
  </TEXT> 

   <TEXT>
    一旦我们放弃引用透明性，计算对象“相同”的概念在形式上就难以捉摸。事实上，我们的程序所模拟的现实世界中“相同”的含义本身就不明确。通常，我们只能通过修改一个对象，然后观察另一个对象是否以同样的方式发生了变化，来判断两个看似相同的对象是否确实是“同一个”。但是，除了通过两次观察“相同”对象并查看对象的一些属性是否在两次观察之间有所不同之外，我们如何能够判断对象是否“改变”了？因此，没有某种先验的“相同性”概念，我们无法确定“改变”，而不观察改变的影响，我们无法确定相同性。
  </TEXT> 

  <TEXT> 
    作为编程中出现此问题的一个例子，考虑彼得和保罗有一个
    <INDEX>银行账户<SUBINDEX>联名</SUBINDEX></INDEX>
    银行账户，上面有<DOLLAR></DOLLAR>100。将其建模为
     <SNIPPET EVAL="yes">
      <REQUIRES>make_account</REQUIRES>
      <EXPECTED>50</EXPECTED>
      <SCHEME>
(define peter-acc (make-account 100))
(define paul-acc (make-account 100))
      </SCHEME>
      <JAVASCRIPT>
const peter_acc = make_account(100);
const paul_acc = make_account(100);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const peter_acc = make_account(100);
const paul_acc = make_account(100);

peter_acc(&quot;withdraw&quot;)(10);
peter_acc(&quot;withdraw&quot;)(20);
paul_acc(&quot;withdraw&quot;)(50);
      </JAVASCRIPT_RUN>
    </SNIPPET> 
    和将其建模为
     <SNIPPET EVAL="yes">
      <REQUIRES>make_account</REQUIRES>
      <EXPECTED>20</EXPECTED>
      <SCHEME>
(define peter-acc (make-account 100))
(define paul-acc peter-acc)
      </SCHEME>
      <JAVASCRIPT>
const peter_acc = make_account(100);
const paul_acc = peter_acc;
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
const peter_acc = make_account(100);
const paul_acc = peter_acc;
peter_acc(&quot;withdraw&quot;)(10);
peter_acc(&quot;withdraw&quot;)(20);
paul_acc(&quot;withdraw&quot;)(50);
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <LONG_PAGE LINES="1"></LONG_PAGE> 在第一个情况下，两个银行账户是不同的。彼得的交易不会影响保罗的账户，反之亦然。然而，在第二种情况下，我们将
    <SPLITINLINE>
      paul-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    定义为与
    <SPLITINLINE>
      peter-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <EM>相同的事物</EM>。实际上，彼得和保罗现在有一个联名账户，如果彼得从
    <SPLITINLINE>
      peter-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    提款，保罗将在
    <SPLITINLINE>
      paul-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    中观察到较少的钱。这两个相似但不同的情况在构建计算模型时可能会引起混淆。特别是对于共享账户来说，一个对象（即银行账户）有两个不同的名称
    <SPLITINLINE>
      
	(peter-acc 和
	paul-acc);
      
      <JAVASCRIPT>
	(<JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE> 和
	<JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE>);
      </JAVASCRIPT>
    </SPLITINLINE>
    如果我们正在寻找程序中可以改变的所有地方
    <SPLITINLINE>
      paul-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，我们必须记住还要查看可能更改的内容【178:0†cn.txt】。
 <SPLITINLINE>peter-acc<JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>。<FOOTNOTE>单个计算对象被多个名称访问的现象称为
    <INDEX>别名</INDEX>
    <EM>别名</EM>。联名账户情况展示了别名的一个非常简单的例子。在节<SPACE></SPACE><REF NAME="sec:mutable-data"></REF>
    我们将看到更复杂的例子，例如共享部分的“不同”复合数据结构。如果我们忘记对象的更改也可能因为
    <INDEX>副作用错误</INDEX>
    <INDEX>错误<SUBINDEX>与别名的副作用</SUBINDEX></INDEX>
    <INDEX>赋值<SUBINDEX>相关的错误</SUBINDEX></INDEX>
    “副作用”而更改“不同”对象，因为这两个“不同”对象实际上是一个在不同别名下出现的单一对象，那么我们的程序中可能会出现错误。这些所谓的<EM>副作用错误</EM>是如此难以定位和分析，以至于有人提出编程语言应该设计成不允许副作用或别名
    <INDEX>Lampson, Butler</INDEX>
    <INDEX>Morris, J. H.</INDEX>
    <INDEX>Schmidt, Eric</INDEX>
    <INDEX>Wadler, Philip</INDEX>
    (<CITATION>Lampson et al.<SPACE></SPACE>1981</CITATION>; 
    <CITATION>Morris, Schmidt, and Wadler 1980</CITATION>)。
</FOOTNOTE>
</TEXT>

   <TEXT>
    参考上面关于“同一性”和“变化”的评论，注意，如果彼得和保罗只能查看他们的银行余额，而不能进行改变余额的操作，那么这两个账户是否不同就无关紧要了。一般来说，只要我们不修改数据对象，就可以将复合数据对象视为它各个部分的总和。例如，一个有理数是通过给定其分子和分母来确定的。但是，在存在变化的情况下，这种观点就不再有效，因为复合数据对象具有与其组成部分不同的“身份”。即使我们通过提款改变了余额，一个银行账户仍然是“同一个”银行账户；反过来，我们可能有两个不同的银行账户却具有相同的状态信息。这种复杂性不是由于我们的编程语言，而是因为我们将银行账户视为一个对象。例如，我们通常不把有理数视为具有身份且可更改的对象，好像我们能够改变分子但仍得到“相同”的有理数。
    <INDEX>同一性与变化<SUBINDEX>含义<CLOSE></CLOSE></SUBINDEX></INDEX>
    <INDEX>变化与同一性<SUBINDEX>含义<CLOSE></CLOSE></SUBINDEX></INDEX>
  </TEXT> 

   <SUBHEADING>
    <NAME>命令式编程的陷阱</NAME>
  </SUBHEADING> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
  <TEXT> 
    与函数式编程相对，广泛使用赋值的编程被称为
    <INDEX>命令式编程</INDEX>
    <INDEX>编程<SUBINDEX>命令式</SUBINDEX></INDEX>
    <EM>命令式编程</EM>。除了对计算模型引发复杂问题外，用命令式风格编写的程序还容易出现函数式程序中不会发生的错误。例如，回忆一下
    <SPLITINLINE>
      
	节<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>中的迭代阶乘程序：
      
      <JAVASCRIPT>
	节<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>中的迭代阶乘程序（这里使用条件语句而不是条件表达式）：
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET EVAL="yes">
      <NAME>factorial_iterative</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        if (counter &gt; n) {
            return product;
        } else {
            return iter(counter * product,
                        counter + 1);
        }
    }
    return iter(1, 1);
}
      </JAVASCRIPT>
    </SNIPPET> 
    与在内部迭代循环中传递参数不同，我们可以采用更具命令式风格的方式，通过使用显式赋值来更新变量的值
<SCHEMEINLINE>product</SCHEMEINLINE> 
    和
<SCHEMEINLINE>counter</SCHEMEINLINE> ：
     <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>factorial</DECLARATION><SUBINDEX>with assignment</SUBINDEX></INDEX>
      <NAME>factorial_imperative</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (let ((product 1)
        (counter 1))
    (define (iter)
      (if (&gt; counter n)
          product
          (begin (set! product (* counter product))
                 (set! counter (+ counter 1))
                 (iter))))
    (iter)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    let product = 1;
    let counter = 1;
    function iter() {
        if (counter &gt; n) {
            return product;
        } else {
            product = counter * product;
            counter = counter + 1;
            return iter();
        }
    }
    return iter();
}
      </JAVASCRIPT>
    </SNIPPET> 
    这不会改变程序产生的结果，但确实引入了一个微妙的陷阱。我们如何确定赋值的顺序？碰巧，这个程序按照书写的顺序是正确的。但是，如果赋值顺序相反
<SNIPPET EVAL="no">
      <SCHEME>
(set! counter (+ counter 1))
(set! product (* counter product))
      </SCHEME>
      <JAVASCRIPT>
counter = counter + 1;
product = counter * product;
      </JAVASCRIPT>
    </SNIPPET> 
    将会产生不同的，
    <INDEX>错误<SUBINDEX>赋值顺序</SUBINDEX></INDEX>
    <INDEX>赋值<SUBINDEX>相关的错误</SUBINDEX></INDEX>
    不正确的结果。通常，使用赋值进行编程迫使我们必须仔细考虑赋值的相对顺序，以确保每个语句使用的是已改变变量的正确版本。在函数式程序中，这个问题根本不会出现。<FOOTNOTE>考虑到这一点，具有讽刺意味的是，初学者编程通常是在一个高度命令式的风格下教授的。这可能是 20 世纪 60 年代和 70 年代普遍存在的信念的遗留，即调用
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的程序必然会比执行赋值的程序效率低。
    (<CITATION>Steele (1977)</CITATION> 
    <INDEX>Steele, Guy Lewis Jr.</INDEX>
    驳斥了这种说法。）或者这可能反映了一种观点，即逐步赋值对于初学者而言比
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    调用更易于可视化。无论出于何种原因，这通常使初学者程序员陷入“我应该在这一个之前还是之后设置这个变量”的困扰，这可能会使编程变得复杂，并掩盖重要的思想。</FOOTNOTE>
   </TEXT>

   <TEXT>
    命令式程序的复杂性在我们考虑多个进程同时执行的应用程序时变得更加糟糕。我们将在节<SPACE></SPACE><REF NAME="sec:time-is-of-the-essence"></REF>回到这个问题。然而，首先，我们将处理为涉及赋值的表达式提供计算模型的问题，并探讨具有局部状态的对象在设计模拟中的用途。
  </TEXT> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
  <EXERCISE>
    <LABEL NAME="ex:3_7"></LABEL> 
    考虑由
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-account</SCHEMEINLINE>,</SCHEME>
       <JAVASCRIPT><JAVASCRIPTINLINE>make_account</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
     </SPLITINLINE> 
    使用习题中描述的密码修改后的
     <SPACE></SPACE><REF NAME="ex:password-protection"></REF> 
    想象银行系统需要能够进行
     <INDEX> 银行账户<SUBINDEX>联名</SUBINDEX> </INDEX> 
    联名账户的功能。定义一个
     <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
       
    <JAVASCRIPT>函数</JAVASCRIPT>
     </SPLITINLINE>
    <INDEX> <USE>创建联名账户函数</USE> </INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-joint</SCHEMEINLINE></SCHEME>
       
    <JAVASCRIPT><JAVASCRIPTINLINE>创建联名账户函数</JAVASCRIPTINLINE></JAVASCRIPT>
     </SPLITINLINE> 
    来完成此操作。  
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-joint</SCHEMEINLINE></SCHEME>
       
    <JAVASCRIPT>创建联名账户函数 <JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE>
      </JAVASCRIPT>
     </SPLITINLINE> 
    应该接收三个参数。第一个是密码保护的账户。
    第二个参数必须与定义账户时的密码匹配，以便
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-joint</SCHEMEINLINE></SCHEME>
       
    <JAVASCRIPT>创建联名账户函数 <JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE>应
      </JAVASCRIPT>
     </SPLITINLINE> 
    操作可以进行。第三个参数是新密码。  
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-joint</SCHEMEINLINE></SCHEME>
       
    <JAVASCRIPT>创建联名账户函数 <JAVASCRIPTINLINE>make_joint</JAVASCRIPTINLINE>
      </JAVASCRIPT>
     </SPLITINLINE> 
    是为了使用新密码为原始账户创建额外的访问权限。例如，如果 
     <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>peter-acc</SCHEMEINLINE></SCHEME>
       
    是为了使用新密码为原始账户创建额外的访问权限。例如，如果
    <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
     </SPLITINLINE> 
    是一个拥有密码保护的银行账户，密码为 
      
    是一个拥有密码保护的银行账户，密码为
    <SPLITINLINE>
      open-sesame,
      <JAVASCRIPT><JAVASCRIPTINLINE>&quot;open sesame&quot;</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    ，那么
<SNIPPET EVAL="yes">
      <NAME>make_joint_example</NAME>
      <SCHEME>
(define paul-acc
  (make-joint peter-acc &apos;open-sesame &apos;rosebud))
      </SCHEME>
      <JAVASCRIPT>
const paul_acc = make_joint(peter_acc, &quot;open sesame&quot;, &quot;rosebud&quot;);
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
// make_joint to be written by students
const paul_acc = make_joint(peter_acc, &quot;open sesame&quot;, &quot;rosebud&quot;);
      </JAVASCRIPT_RUN>
    </SNIPPET> 
    将允许在
    <SPLITINLINE>
      peter-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>peter_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    上使用名称
    <SPLITINLINE>
      
      paul-acc
      <JAVASCRIPT><JAVASCRIPTINLINE>paul_acc</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    和密码
    <SPLITINLINE>
      
	rosebud。
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>&quot;rosebud&quot;</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLITINLINE>
    您可能希望修改您的解决方案以适应这一新功能
    习题<SPACE></SPACE><REF NAME="ex:password-protection"></REF>。
      <SOLUTION>
      
	<NAME>创建联名账户函数</NAME>
	<EXAMPLE>joint_acc_example</EXAMPLE>
	<EXPECTED>40</EXPECTED>
	<JAVASCRIPT>
function 创建联名账户函数(linked_acc, linked_pw, joint_pw) {
    return (message, input_pw) =&gt; {
        
        // 检查联名账户的身份验证
        if (input_pw !== joint_pw) {
            return x =&gt; &quot;错误的联名账户密码&quot;;
        } else {
            const access_linked = linked_acc(message, linked_pw);
            
            // 检查关联账户的身份验证
            if (access_linked(0) === &quot;密码不正确&quot;) {
                // access_linked(0) 执行存款 / 取款为 0
                // 以检测 &quot;密码不正确&quot; 信息。 
                return x =&gt; &quot;错误的关联账户密码&quot;;
            } else {
                // 所有身份验证都通过，返回访问的账户给用户
                return access_linked;
            }
        }
    };
}
	</JAVASCRIPT>
      
      
	<NAME>joint_acc_example</NAME>
	<REQUIRES>make_account_password_protected</REQUIRES>
	<JAVASCRIPT>
const peter_acc = make_account(100, &quot;open sesame&quot;);
peter_acc(&quot;withdraw&quot;, &quot;open sesame&quot;)(10); // 提款 10
peter_acc(&quot;withdraw&quot;, &quot;ben&quot;)(40); // 密码错误

// 创建联名账户
const paul_acc = 创建联名账户函数(peter_acc, &quot;open sesame&quot;, &quot;rosebud&quot;);

paul_acc(&quot;withdraw&quot;, &quot;rosebud&quot;)(50); // 提款 50，应返回 40
	</JAVASCRIPT>
      
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:3_8"></LABEL> 
    当我们在节<SPACE></SPACE><REF NAME="sec:evaluating-combinations"></REF>中定义求值模型时，我们说
    <INDEX>求值顺序<SUBINDEX><ORDER>JavaScript</ORDER>在 JavaScript 中</SUBINDEX></INDEX>
    <INDEX>求值顺序<SUBINDEX>与赋值</SUBINDEX></INDEX>
    求值表达式的第一步是求值其子表达式。但是，我们从未指明子表达式应该按照何种顺序求值（例如，从左到右或从右到左）。
    <SPLITINLINE>
      
	当我们引入
	赋值时，过程的参数求值顺序会对结果产生影响。
      
      <JAVASCRIPT>
	当我们引入赋值时，运算符组合的操作数求值顺序会对结果产生影响。
      </JAVASCRIPT>
    </SPLITINLINE>
    定义一个简单的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>f</SCHEMEINLINE> 使得对 
    <SPLITINLINE>
      (+ (f 0) (f 1))
      <JAVASCRIPT><JAVASCRIPTINLINE>f(0) + f(1)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    的求值会返回 0 如果
    <SPLITINLINE>
      + 的参数
      <JAVASCRIPT>+ 的运算对象</JAVASCRIPT>
    </SPLITINLINE>
    是从左到右求值的，但如果
    <SPLITINLINE>
      参数
      <JAVASCRIPT>运算对象</JAVASCRIPT>
    </SPLITINLINE>
    是从右到左求值则会返回 1。
<LABEL NAME="ex:order-of-evaluation"></LABEL>

     <SOLUTION>
      
        <EXAMPLE>exercise_3_8_solution_example</EXAMPLE>
      <JAVASCRIPT>
let v = -0.5;
function f(x) {
    v = x + v;
    return v;
}
      </JAVASCRIPT>
      

      
        <NAME>exercise_3_8_solution_example</NAME>
      <JAVASCRIPT>
// 分别尝试这些
display(f(0) + f(1)); // 返回 0
display(f(1) + f(0)); // 返回 1
      </JAVASCRIPT>
      
    </SOLUTION>

   </EXERCISE>
   <INDEX>赋值<CLOSE></CLOSE></INDEX> 
   <INDEX>局部状态<CLOSE></CLOSE></INDEX> 
   <INDEX>赋值<SUBINDEX>代价<CLOSE></CLOSE></SUBINDEX></INDEX> 
</SUBSECTION>
