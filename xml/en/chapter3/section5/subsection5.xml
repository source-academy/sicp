<SUBSECTION>
  <NAME>
    Modularity of Functional Programs and Modularity of Objects
  </NAME>

  <LABEL NAME="sec:functions-and-objects"/>

  <INDEX>modularity<SUBINDEX>functional programs vs.<SPACE/>objects<OPEN/></SUBINDEX></INDEX>
  <INDEX>functional programming<OPEN/></INDEX>

  <TEXT>
    As we saw in section<SPACE/><REF NAME="sec:benefits-of-assignment"/>, one of
    the major benefits of introducing assignment is that we can increase the
    modularity of our systems by encapsulating, or <QUOTE>hiding,</QUOTE> parts
    of the state of a large system within local variables.  Stream models can
    provide an equivalent modularity without the use of assignment.  As an
    illustration, we can reimplement the
    <INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>Dirichlet estimate for</SUBINDEX></INDEX>
    <INDEX>Monte Carlo simulation<SUBINDEX>stream formulation</SUBINDEX></INDEX>
    Monte Carlo estimation
    of<SPACE/><LATEXINLINE>$\pi$</LATEXINLINE>, which we examined in
    section<SPACE/><REF NAME="sec:benefits-of-assignment"/>, from a
    stream-processing point of view.
  </TEXT>

  <TEXT>
    The key modularity issue was that we wished to hide the internal state
    of a random-number generator from programs that used random numbers.
    We began with a
    <SPLITINLINE>
      <SCHEME>procedure <SCHEMEINLINE>rand-update</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>function <JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    whose successive values furnished our supply of random numbers, and used
    this to produce a random-number generator:
    <SNIPPET>
      <REQUIRES>rand_update</REQUIRES>
      <REQUIRES>random_init</REQUIRES>
      <EXAMPLE>rand_example</EXAMPLE>
      <EXPECTED>40083849805</EXPECTED>
      <SCHEME>
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
    x)))
      </SCHEME>
      <JAVASCRIPT>
function make_rand() {
    let x = random_init;
    return () => {
               x = rand_update(x);
               return x;
           };
}
const rand = make_rand();
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <DO_BREAK_PAGE/>
  <TEXT>
    In the stream formulation there is no random-number generator <EM>per
    se</EM>, just a stream of random numbers produced by successive calls to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE>:
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>random_numbers</DECLARATION> (infinite stream)</INDEX>
      <INDEX>infinite stream(s)<SUBINDEX>of random numbers</SUBINDEX></INDEX>
      <NAME>random_numbers</NAME>
      <REQUIRES>rand_update</REQUIRES>
      <REQUIRES>random_init</REQUIRES>
      <EXAMPLE>random_numbers_example</EXAMPLE>
      <EXPECTED>172561279022</EXPECTED>
      <SCHEME>
(define random-numbers
  (cons-stream random-init
               (stream-map rand-update random-numbers)))
      </SCHEME>
      <JAVASCRIPT>
const random_numbers =
    pair(random_init,
         () => stream_map(rand_update, random_numbers));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>random_numbers_example</NAME>
      <JAVASCRIPT>
eval_stream(random_numbers, 5);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
stream_ref(random_numbers, 4);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    We use this to construct the stream of outcomes of the Ces<AGRAVE_LOWER/>ro
    experiment performed on consecutive pairs in the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>random-numbers</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>random_numbers</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    stream:
    <SNIPPET>
      <INDEX><DECLARATION>dirichlet_stream</DECLARATION></INDEX> 
      <INDEX><DECLARATION>map_successive_pairs</DECLARATION></INDEX> 
      <NAME>cesaro_stream</NAME>
      <REQUIRES>random_numbers</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>cesaro_stream_example</EXAMPLE>
      <EXPECTED>true</EXPECTED>
      <SCHEME>
(define cesaro-stream
  (map-successive-pairs (lambda (r1 r2) (= (gcd r1 r2) 1))
                        random-numbers))

(define (map-successive-pairs f s)
  (cons-stream
   (f (stream-car s) (stream-car (stream-cdr s)))
      (map-successive-pairs f (stream-cdr (stream-cdr s)))))
      </SCHEME>
      <JAVASCRIPT>
function map_successive_pairs(f, s) {
    return pair(f(head(s), head(stream_tail(s))),
                () => map_successive_pairs(
                          f,
                          stream_tail(stream_tail(s))));
}
const dirichlet_stream =
    map_successive_pairs((r1, r2) => gcd(r1, r2) === 1,
                         random_numbers);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>cesaro_stream_example</NAME>
      <JAVASCRIPT>
eval_stream(dirichlet_stream, 20);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
stream_ref(dirichlet_stream, 42);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    The
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cesaro-stream</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>dirichlet_stream</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is now fed to a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>monte-carlo</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    which produces a stream of estimates of probabilities.  The results are then
    converted into a stream of estimates of <LATEXINLINE>$\pi$</LATEXINLINE>.
    This version of the program doesn<APOS/>t need a parameter telling how many
    trials to perform.  Better estimates of <LATEXINLINE>$\pi$</LATEXINLINE>
    (from performing more experiments) are obtained by looking farther into the
    <SCHEMEINLINE>pi</SCHEMEINLINE> stream:
    <SNIPPET>
      <INDEX><DECLARATION>monte_carlo</DECLARATION><SUBINDEX>infinite stream</SUBINDEX></INDEX>
      <NAME>monte_carlo_stream</NAME>
      <REQUIRES>cesaro_stream</REQUIRES>
      <EXAMPLE>display_pi</EXAMPLE>
      <EXPECTED>3.1780497164141406</EXPECTED>
      <SCHEME>
(define (monte-carlo experiment-stream passed failed)
  (define (next passed failed)
    (cons-stream
     (/ passed (+ passed failed))
     (monte-carlo
      (stream-cdr experiment-stream) passed failed)))
  (if (stream-car experiment-stream)
      (next (+ passed 1) failed)
      (next passed (+ failed 1))))

(define pi
  (stream-map 
   (lambda (p) (sqrt (/ 6 p)))
   (monte-carlo cesaro-stream 0 0)))
      </SCHEME>
      <JAVASCRIPT>
function monte_carlo(experiment_stream, passed, failed) {      
    function next(passed, failed) {
        return pair(passed / (passed + failed),
                    () => monte_carlo(stream_tail(experiment_stream),
                                      passed, failed));
    }
    return head(experiment_stream)
           ? next(passed + 1, failed)
           : next(passed, failed + 1);
}
const pi = stream_map(p => math_sqrt(6 / p),
                      monte_carlo(dirichlet_stream, 0, 0));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>display_pi</NAME>
      <JAVASCRIPT>
stream_ref(pi, 100);	
      </JAVASCRIPT>
    </SNIPPET>
    There is considerable
    <INDEX>modularity<SUBINDEX>through infinite streams</SUBINDEX></INDEX>
    modularity in this approach, because we still
    can formulate a general 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>monte-carlo</SCHEMEINLINE> procedure</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE> function
      </JAVASCRIPT>
    </SPLITINLINE>
    that can deal with arbitrary experiments.  Yet there is no assignment or
    local state.
  </TEXT>

  <LONG_PAGE lines="2"/>
  <EXERCISE>
    Exercise<SPACE/><REF NAME="ex:random-with-reset"/> discussed generalizing
    the random-number generator to allow one to
    <INDEX>random-number generator<SUBINDEX>with reset, stream version</SUBINDEX></INDEX>
    reset the random-number sequence
    so as to produce repeatable sequences of <QUOTE>random</QUOTE> numbers.
    Produce a stream formulation of this same generator that operates on an
    input stream of requests to
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>generate</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"generate"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    a new
    random number or to
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>reset</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"reset"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    the sequence to a
    specified value and that produces the desired stream of random numbers.
    Don<APOS/>t use assignment in your solution.
    <LABEL NAME="ex:3_81"/>
  </EXERCISE>

  <EXERCISE>
    Redo exercise<SPACE/><REF NAME="ex:monte-carlo-integration"/> on
    <INDEX>Monte Carlo integration<SUBINDEX>stream formulation</SUBINDEX></INDEX>
    <INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>approximation with Monte Carlo integration</SUBINDEX></INDEX>
    <INDEX>definite integral<SUBINDEX>estimated with Monte Carlo simulation</SUBINDEX></INDEX>
    Monte Carlo integration in terms of streams.  The stream version of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>estimate-integral</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>estimate_integral</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will not have an argument telling how many trials to perform.  Instead, it
    will produce a stream of estimates based on successively more trials.
    <LABEL NAME="ex:3_82"/>
  </EXERCISE>

  <SUBHEADING>
    <NAME>A functional-programming view of time</NAME>
  </SUBHEADING>

  <INDEX>time<SUBINDEX>functional programming and<OPEN/></SUBINDEX></INDEX>
  <INDEX>functional programming<SUBINDEX>time and<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Let us now return to the issues of objects and state that were raised
    at the beginning of this chapter and examine them in a new light.  We
    introduced assignment and mutable objects to provide a mechanism for
    modular construction of programs that model systems with state.
    We constructed computational objects with local state variables and used
    assignment to modify these variables.  We modeled the temporal behavior of
    the objects in the world by the temporal behavior of the corresponding
    computational objects.
  </TEXT>

  <TEXT>
    Now we have seen that streams provide an alternative way to model
    objects with local state.  We can model a changing quantity, such as
    the local state of some object, using a stream that represents the
    time history of successive states.  In essence, we represent time
    explicitly, using streams, so that we decouple time in our simulated
    world from the sequence of events that take place during evaluation.
    Indeed, because of the presence of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>delay</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	delayed evaluation
      </JAVASCRIPT>
    </SPLITINLINE>
    there may be little relation between simulated time in the model and the
    order of events during the evaluation.
  </TEXT>

  <TEXT>
    In order to contrast these two approaches to modeling, let us
    reconsider the implementation of a <QUOTE>withdrawal processor</QUOTE> that
    monitors the balance in a
    <INDEX>bank account<SUBINDEX>stream model</SUBINDEX></INDEX>
    bank account.  In
    section<SPACE/><REF NAME="sec:costs-of-assignment"/> we implemented a
    simplified version of such a processor:
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>make_simplified_withdraw</DECLARATION></INDEX> 
      <EXAMPLE>make_simplified_withdraw_example</EXAMPLE>
      <EXAMPLE>make_simplified_withdraw_example1</EXAMPLE>
      <EXAMPLE>make_simplified_withdraw_example2</EXAMPLE>
      <SCHEME>
(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))
      </SCHEME>
      <JAVASCRIPT>
function make_simplified_withdraw(balance) {
    return amount => {
               balance = balance - amount;
               return balance;
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    Calls to
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>make-simplified-withdraw</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>make_simplified_withdraw</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    produce computational objects, each with a local state variable
    <SCHEMEINLINE>balance</SCHEMEINLINE> that is decremented by successive calls
    to the object.  The object takes an <SCHEMEINLINE>amount</SCHEMEINLINE> as
    an argument and returns the new balance.  We can imagine the user of a bank
    account typing a sequence of inputs to such an object and observing the
    sequence of returned values shown on a display screen.
  </TEXT>

  <TEXT>
    Alternatively, we can model a withdrawal processor as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that takes as input a balance and a stream of amounts to withdraw and
    produces the stream of successive balances in the account:
    <SNIPPET>
      <INDEX><DECLARATION>stream_withdraw</DECLARATION></INDEX> 
      <NAME>stream_withdraw</NAME>
      <EXAMPLE>stream_withdraw_example</EXAMPLE>
      <EXPECTED>50</EXPECTED>
      <SCHEME>
(define (stream-withdraw balance amount-stream)
  (cons-stream
   balance
   (stream-withdraw (- balance (stream-car amount-stream))
                    (stream-cdr amount-stream))))
      </SCHEME>
      <JAVASCRIPT>
function stream_withdraw(balance, amount_stream) {      
    return pair(balance,
                () => stream_withdraw(balance - head(amount_stream),
                                      stream_tail(amount_stream)));   
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>stream_withdraw_example</NAME>
      <JAVASCRIPT>
const my_amounts = list_to_stream(list(50, 100, 40));
const my_account_stream = stream_withdraw(200, my_amounts);	
eval_stream(my_account_stream, 3);
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
const my_amounts = list_to_stream(list(50, 100, 40));
const my_account_stream = stream_withdraw(200, my_amounts);	
stream_ref(my_account_stream, 2);
      </JAVASCRIPT_TEST>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Stream-withdraw</SCHEMEINLINE>	
      </SCHEME>
      <JAVASCRIPT>
	The function <JAVASCRIPTINLINE>stream_withdraw</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    implements a well-defined mathematical function whose output is fully
    determined by its input.  Suppose, however, that the input
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>amount-stream</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>amount_stream</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is the stream of successive values typed by the user and that the resulting
    stream of balances is displayed. Then, from the perspective of the user who
    is typing values and watching results, the stream process has the same
    behavior as the object created by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-simplified-withdraw</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_simplified_withdraw</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    However, with the stream version, there is no assignment, no local state
    variable, and consequently none of the theoretical difficulties that we
    encountered
    <INDEX>state<SUBINDEX>vanishes in stream formulation</SUBINDEX></INDEX>
    in section<SPACE/><REF NAME="sec:costs-of-assignment"/>.  Yet the system
    has state!
  </TEXT>

  <TEXT>
    This is really remarkable.  Even though
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>stream-withdraw</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>stream_withdraw</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    implements a well-defined mathematical function whose behavior does not
    change, the user<APOS/>s perception here is one of interacting with a system
    that has a changing state.  One way to resolve this paradox is to realize
    that it is the user<APOS/>s temporal existence that imposes state on the
    system.  If the user could step back from the interaction and think in terms
    of streams of balances rather than individual transactions, the system
    would appear stateless.<FOOTNOTE>Similarly in physics, when we observe a
    moving particle, we say that the position (state) of the particle is
    changing.  However, from the perspective of the particle<APOS/>s 
    <INDEX>world line of a particle</INDEX>
    world line in space-time there is no change involved.</FOOTNOTE>
  </TEXT>

  <TEXT>
    From the point of view of one part of a complex process, the other parts
    appear to change with time.  They have hidden time-varying local state.  If
    we wish to write programs that model this kind of natural decomposition in
    our world (as we see it from our viewpoint as a part of that world) with
    structures in our computer, we make computational objects that are not
    functional<EMDASH/>they must change with time.  We model state with local
    state variables, and we model the changes of state with assignments to
    those variables.  By doing this we make the time of execution of a
    computation model time in the world that we are part of, and thus we
    get <QUOTE>objects</QUOTE> in our computer.
  </TEXT>

  <TEXT>
    Modeling with objects is powerful and intuitive, largely because this
    matches the perception of interacting with a world of which we are
    part.  However, as we<APOS/>ve seen repeatedly throughout this chapter,
    these models raise thorny problems of constraining the order of events
    and of synchronizing multiple processes.  The possibility of avoiding
    these problems has stimulated the development of 
    <INDEX>programming language<SUBINDEX>functional</SUBINDEX></INDEX>
    <INDEX>functional programming<SUBINDEX>functional programming languages</SUBINDEX></INDEX>
    <EM>functional programming languages</EM>, which do not include any
    provision for assignment or mutable data.  In such a language, all
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    implement well-defined mathematical functions of their arguments,
    whose behavior does not change.  The functional approach is extremely
    attractive for dealing with
    <INDEX>concurrency<SUBINDEX>functional programming and</SUBINDEX></INDEX>
    <INDEX>functional programming<SUBINDEX>concurrency and</SUBINDEX></INDEX>
    concurrent systems.<FOOTNOTE>John Backus, the
    <INDEX>Fortran<SUBINDEX>inventor of</SUBINDEX></INDEX>
    inventor of Fortran, gave high
    visibility to functional programming when he was awarded the ACM Turing
    award in 1978.  His acceptance speech
    <INDEX>Backus, John</INDEX>
    (<CITATION>Backus 1978</CITATION>)
    strongly advocated the functional approach.  A good overview of functional
    programming is given in 
    <INDEX>Henderson, Peter</INDEX>
    <CITATION>Henderson 1980</CITATION> and in 
    <INDEX>Darlington, John</INDEX>
    <INDEX>Turner, David</INDEX>
    <CITATION>Darlington, Henderson, and Turner 1982</CITATION>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    On the other hand, if we look closely, we can see time-related problems
    creeping into functional models as well.  One particularly troublesome area
    arises when we wish to design interactive systems, especially ones that
    model interactions between independent entities. For instance, consider once
    more the implementation of a banking system that permits joint bank accounts.
    In a conventional system using assignment and objects, we would model the
    fact that Peter and Paul share an account by having both Peter and Paul send
    their transaction requests to the same bank-account object, as we saw in
    section<SPACE/><REF NAME="sec:costs-of-assignment"/>. From the stream point
    of view, where there are no <QUOTE>objects</QUOTE> <EM>per se</EM>, we have
    already indicated that a bank account can be modeled as a process that
    operates on a stream of transaction requests to produce a stream of
    responses.  Accordingly, we could model the fact that Peter and Paul have a
    joint bank account by merging Peter<APOS/>s stream of transaction requests
    with Paul<APOS/>s stream of requests and feeding the result to the
    bank-account stream process, as shown in
    figure<SPACE/><REF NAME="fig:joint-account-stream"/>.
    <FIGURE>
      <FIGURE split_scale="0.5" web_scale="0.7" scale="0.59" src="img_original/ch3-Z-G-60.svg"></FIGURE>
      <CAPTION>
	A joint
	<INDEX>bank account<SUBINDEX>joint, modeled with streams</SUBINDEX></INDEX>
	bank account, modeled by merging two streams of transaction
	requests.
      </CAPTION>
      <LABEL NAME="fig:joint-account-stream"/>
    </FIGURE>
  </TEXT>

  <TEXT>
    The trouble with this formulation is in the notion of <EM>merge</EM>.  It
    will not do to merge the two streams by simply taking alternately one
    request from Peter and one request from Paul. Suppose Paul accesses
    the account only very rarely.  We could hardly force Peter to wait for
    Paul to access the account before he could issue a second transaction.
    <INDEX>infinite stream(s)<SUBINDEX>merging</SUBINDEX></INDEX>
    However such a merge is implemented, it must interleave the two
    transaction streams in some way that is constrained by <QUOTE>real
    time</QUOTE> as perceived by Peter and Paul, in the sense that, if Peter and
    Paul meet, they can agree that certain transactions were processed
    before the meeting, and other transactions were processed after the
    meeting.<FOOTNOTE>Observe that, for any two streams, there is in general
    more than one
    acceptable order of interleaving.  Thus, technically, <QUOTE>merge</QUOTE>
    is a
    <INDEX>nondeterminism, in behavior of concurrent programs</INDEX>
    <INDEX>infinite stream(s)<SUBINDEX>merging as a relation</SUBINDEX></INDEX>
    relation rather than a function<EMDASH/>the answer is not a
    deterministic function of the inputs.  We already mentioned
    (footnote<SPACE/><REF NAME="foot:nondeterministic"/>) that nondeterminism
    is essential when dealing with concurrency.  The merge relation illustrates
    the same essential nondeterminism, from the functional perspective.
    In section<SPACE/><REF NAME="sec:nondeterministic-evaluation"/>, we
    will look at nondeterminism from yet another point of view.</FOOTNOTE>
    This is precisely the same constraint that we had to deal with in
    section<SPACE/><REF NAME="sec:nature-of-time"/>, where we found the need to
    introduce explicit synchronization to ensure a <QUOTE>correct</QUOTE> order
    of events in concurrent processing of objects with state.  Thus, in an
    attempt to support the functional style, the need to merge inputs from
    different agents reintroduces the same problems that the functional style
    was meant to eliminate.
  </TEXT>

  <TEXT>
    We began this chapter with the goal of building computational models
    whose structure matches our perception of the real world we are trying
    to model.  We can model the world as a collection of separate,
    time-bound, interacting objects with state, or we can model the world
    as a single, timeless, stateless unity.  Each view has powerful
    advantages, but neither view alone is completely satisfactory.  A
    grand unification has yet to emerge.<FOOTNOTE>The object model approximates
    the world by dividing it into separate pieces.  The functional model does
    not
    <INDEX>modularity<SUBINDEX>along object boundaries</SUBINDEX></INDEX>
    modularize along object boundaries.  The object model is useful when
    the unshared state of the <QUOTE>objects</QUOTE> is much larger than the
    state that they share.  An example of a place where the object viewpoint
    fails is 
    <INDEX>quantum mechanics</INDEX>
    quantum mechanics, where thinking of things as individual particles leads
    to paradoxes and confusions.  Unifying the object view with the
    functional view may have little to do with programming, but rather
    with fundamental epistemological issues.</FOOTNOTE>

    <INDEX>stream(s)<CLOSE/></INDEX>
    <INDEX>modularity<SUBINDEX>functional programs vs.<SPACE/>objects<CLOSE/></SUBINDEX></INDEX>
    <INDEX>functional programming<CLOSE/></INDEX>
    <INDEX>time<SUBINDEX>functional programming and<CLOSE/></SUBINDEX></INDEX>
    <INDEX>functional programming<SUBINDEX>time and<CLOSE/></SUBINDEX></INDEX>

  </TEXT>
</SUBSECTION>
