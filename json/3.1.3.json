[{"id":"/sicpjs/3.1.3","tag":"TITLE","body":"3.1.3  \n    The Costs of Introducing Assignment"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    As we have seen,\n    \n\tassignment\n      \n    enables us to model objects\n    that have local state.  However, this advantage comes at a price.  Our\n    programming language can no longer be interpreted in terms of the\n    substitution model of\n    function\n    application that we introduced in\n    section ","tag":"#text"},{"tag":"REF","body":"1.1.5","href":"/sicpjs/1.1.5"},{"body":".  Moreover, no simple\n    model with \"","tag":"#text"},{"body":"nice","tag":"#text"},{"body":"\" mathematical properties can be an adequate\n    framework for dealing with objects and assignment in programming languages.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    So long as we do not use assignments, two evaluations of the same\n    function\n    with the same arguments will produce the same result, so that\n    functions\n    can be viewed as computing mathematical functions. Programming without any\n    use of assignments, as we did throughout the first two chapters of this\n    book, is accordingly known as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"functional programming","tag":"#text"}]},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    To understand how assignment complicates matters, consider a simplified\n    version of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"3.1.1","href":"/sicpjs/3.1.1"},{"body":" that does not\n    bother to check for an insufficient amount:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1fyY2Lh4BIRFxKVkFJWUAJgBWHRigA","body":"function make_simplified_withdraw(balance) {\n    return amount => {\n               balance = balance - amount;\n               return balance;\n           };\n} "},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":8,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1fyY2Lh4BIRFxKVkFJWUAJgBWHRigA","body":"const W = make_simplified_withdraw(25); "},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":10,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1fyY2Lh4BIRFxKVkFJWUAJgBWHTicEtaABk6gA","body":"W(20); ","output":"5"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1fyY2Lh4BIRFxKVkFJWUAJgBWHTicEtaABk68Hox+mKA","body":"W(10); ","output":"-5"},{"body":"\n    Compare this\n    function\n    with the following ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_decrementer"},{"body":"function,\n    which does not use\n    assignment:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+QA","body":"function make_decrementer(balance) {\n    return amount => balance - amount;\n} "},{"body":"\n      The function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_decrementer"},{"body":"\n    returns a\n    function\n    that subtracts its input from a designated amount\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":", but there is no accumulated effect\n    over successive calls, as with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_simplified_withdraw"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+eUrQDOxgCKmDCwc3HwCQiLiAEwArArOQA","body":"const D = make_decrementer(25); "},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":7,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+eUrQDOxgCKmDCwc3HwCQiLiAEwArAquOH5iUQAM8UA","body":"D(20); ","output":"5"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+eUrQDOxgCKmDCwc3HwCQiLiAEwArAquOH5iUQAM8XhJGGnOQA","body":"D(10); ","output":"15"},{"body":"\n    We can use the substitution model to explain how\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_decrementer"},{"body":" works.  For instance, let us\n    analyze the evaluation of the expression\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+eJmy49+g4aJiAEwArArBAAwKzkA","body":"make_decrementer(25)(20) "},{"body":"\n    We first simplify the\n    \n\tfunction expression of the application\n      \n    by substituting\n    ","tag":"#text"},{"body":"$25$","tag":"LATEX"},{"body":" for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" in\n    the body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_decrementer"},{"body":".\n      \n    This reduces the\n    expression to\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4BQCGAtgPYCuAdgC6gC8AfKAEwCsoAtKCRTQJT5mABj5A","body":"(amount => 25 - amount)(20) "},{"body":"\n    Now we apply the\n    \n\tfunction \n      \n    by substituting 20 for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":" in the body of the\n    \n\tlambda\n      \n    expression:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4EwCsoAtKPgAwDcQA","body":"25 - 20 "},{"body":"\n    The final answer is 5. ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Observe, however, what happens if we attempt a similar substitution analysis\n    with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_simplified_withdraw"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":8,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8JjYuHgEhEXEpWQUlZQAmAFYdOoAGHSA","body":"make_simplified_withdraw(25)(20) "},{"body":"\n    We first simplify the\n    \n\tfunction expression\n      \n    by substituting 25 for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" in\n    the body of","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_simplified_withdraw"},{"body":". This reduces the\n    \n\texpression\n      \n    to","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.1.3#footnote-1"},{"tag":"SNIPPET","latex":false,"id":13,"eval":false,"body":"(amount => {\n     balance = 25 - amount; \n     return 25;\n })(20)"},{"body":"\n    Now we apply the\n    function\n    by substituting 20 for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":"\n    in the body of the\n    \n\tlambda expression:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":false,"body":"balance = 25 - 20;\nreturn 25;"},{"body":"\n    If we adhered to the substitution model, we would have to say that the\n    meaning of the\n    function\n    application is to first set ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" to 5 and\n    then return 25 as the value of the expression.  This gets the wrong answer.\n    In order to get the correct answer, we would have to somehow distinguish the\n    first occurrence of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" (before the effect\n    of the\n    assignment)\n    from the second occurrence of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":"\n    (after the effect of the\n    assignment),\n    and the substitution model cannot do this.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The trouble here is that substitution is based ultimately on the notion that\n    \n\tthe name in our language are essentially\n\tsymbols for values.\n      \n\tThis worked well for constants.\n\tBut a variable, whose value can change with assignment, cannot simply\n\tbe a name for a value. A variable somehow refers to a place where a\n\tvalue can be stored, and the value stored at this place can change.\n        \n    In section ","tag":"#text"},{"tag":"REF","body":"3.2","href":"/sicpjs/3.2"},{"body":" we will see how\n    environments play this role of \"","tag":"#text"},{"body":"place","tag":"#text"},{"body":"\" in our computational\n    model.    \n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Sameness and change","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The issue surfacing here is more profound than the mere breakdown of a\n    particular model of computation.  As soon as we introduce change into\n    our computational models, many notions that were previously\n    straightforward become problematical.  Consider the concept of two\n    things being \"","tag":"#text"},{"body":"the same.","tag":"#text"},{"body":"\"","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Suppose we call \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_decrementer"},{"body":"\n    twice with the same argument to create two\n    functions:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gCaukBOr9VsXKteACgBGjADaMyrAJSgA3jlDrQ-coV51G9aiXKgAvAD5QU2fNABaUPsPCA3DgC+eUrQDOxgCIYpgwsHNx8AkIi4gBMAKwKrjhexL6gftFBTGxcPPyCwqJicQlAA","body":"const D1 = make_decrementer(25);\n\nconst D2 = make_decrementer(25); "},{"body":"\n    Are \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D1"},{"body":"\n    and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D2"},{"body":"\n    the same?  An acceptable answer is yes, because \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D1"},{"body":"\n    and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D2"},{"body":"\n    have the same computational behavior—each is a\n    function\n    that subtracts its input from 25.  In fact, \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D1"},{"body":"\n    could be substituted for \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"D2"},{"body":"\n    in any computation without changing the result.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Contrast this with making two calls to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_simplified_withdraw"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":8,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1DH8mNi4eASERcSlZBSVlACYAVh04nELiYtAS1oqWDm4+QWExSWk5RRUOrqA","body":"const W1 = make_simplified_withdraw(25);\n\nconst W2 = make_simplified_withdraw(25); "},{"body":"\n    Are ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" the same?  Surely not, because calls to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":"\n    have distinct effects, as shown by the following sequence of interactions:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1DH8mNi4eASERcSlZBSVlACYAVh04nELiYtAS1oqWDm4+QWExSWk5RRUOrrwytoAGLqA","body":"W1(20); ","output":"5"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":14,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1DH8mNi4eASERcSlZBSVlACYAVh04nELiYtAS1oqWDm4+QWExSWk5RRUOrrwytoAGRZxl1rWYoA","body":"W1(20); ","output":"-15"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":16,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gM6X0AOANpXyVWAE3YB3SuQAWogE6MJACgBGjfozKsAlKADeOUMdDzW5QvLqN61EuVABeAHwGjJj5+PrN2p6B8tUlZQAFpQGzticgBudy8EswsrAI0g1jiEjwBfOOy8UlpOBwB1DH8mNi4eASERcSlZBSVlACYAVh04nELiYtAS1oqWDm4+QWExSWk5RRUOrrwytoAGRZxl1rXuwdWuoA","body":"W2(20); ","output":"5"},{"body":"\n    Even though ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" are \"","tag":"#text"},{"body":"equal","tag":"#text"},{"body":"\" in the sense that\n    they are both created by evaluating the same expression, \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_simplified_withdraw(25)"},{"body":",\n      \n    it is not true that \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" could be substituted for \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" in any expression without changing the\n    result of evaluating the expression.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    A language that supports the concept that \"","tag":"#text"},{"body":"equals can be substituted\n    for equals","tag":"#text"},{"body":"\" in an expression without changing the value of the\n    expression is said to be\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"referentially transparent","tag":"#text"}]},{"body":".  Referential transparency is violated\n    when we include\n    assignment\n    in our computer language.  This makes it tricky to determine when we can\n    simplify expressions by substituting equivalent expressions.  Consequently,\n    reasoning about programs that use assignment becomes drastically more\n    difficult.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    Once we forgo referential transparency, the notion of what it means for\n    computational objects to be \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" becomes difficult to\n    capture in a formal way.  Indeed, the meaning of \"","tag":"#text"},{"body":"same","tag":"#text"},{"body":"\" in the\n    real world that our programs model is hardly clear in itself.  In general,\n    we can determine that two apparently identical objects are indeed\n    \"","tag":"#text"},{"body":"the same one","tag":"#text"},{"body":"\" only by modifying one object and then observing\n    whether the other object has changed in the same way.  But how can we tell\n    if an object has \"","tag":"#text"},{"body":"changed","tag":"#text"},{"body":"\" other than by observing the\n    \"","tag":"#text"},{"body":"same","tag":"#text"},{"body":"\" object twice and seeing whether some property of the\n    object differs from one observation to the next?  Thus, we cannot determine\n    \"","tag":"#text"},{"body":"change","tag":"#text"},{"body":"\" without some a priori notion of\n    \"","tag":"#text"},{"body":"sameness,","tag":"#text"},{"body":"\" and we cannot determine sameness without observing\n    the effects of change.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    As an example of how this issue arises in programming, consider the\n    situation where Peter and Paul have a\n    \n    bank account with $100 in\n    it.  There is a substantial difference between modeling this as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":24,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+o6adSeQBQAjRgBtGZVgEpQAbxygFoImSq1QAd0rkAFgBMATo3X9G9XsXLS5im6Er5QQ0eNKtQAPgC8oU+cuz5WyDhMQlQbxCXNwBaHzM+AG5AoJt9VnJCfTpIiSSU0ABfUFYRAGc3a3zFNIys0AAiSGJSwnx8SlJKVgslEl1S+ryUguTC0eUKGjpdVgAHalKtE3iLK1GbHNdw0E23AGo4vyGgmszs51zRkZsJ1WnKUtnGclJtfno1-NO6+nDPb3qmh0BiM9XWVVAAH4NFo9IZ1OCqgAuBh-AEzeaLchgiG2aEYhZaRH5FGsfT6aj6d4AGgaJGYxGo6joaQAjoRWKVyKBorEmGxONw-PVJMcxql0mdQLoHk8XtokiMcDxmtzZukyYLSNt+RwuDw+PwMAAGY2i5W0LmgJ6EERanUsPVCw0ms1JHDq8ia-X8QGwkHqEVGt0ejX6LW+oFw0GSfgAJhDNrtPr9wPhQYArG6gA","body":"const peter_acc = make_account(100);\nconst paul_acc = make_account(100); "},{"body":"\n    and modeling it as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":24,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+o6adSeQBQAjRgBtGZVgEpQAbxygFoImSq1QAd0rkAFgBMATo3X9G9XsXLS5im6Er5QQ0eNKtQAPgC8oU+cuz5WyDhMQlQbxCXNwBaHzM+AG5AoJt9VnJCfTpIiSSU0ABfUFYRAGc3a3zFNIys0AAiSGJSwnx8SlJKVgslEl1S+ryUguTC0eUKGjpdVgAHalKtE3iLK1GbHNdw0E23AGo4vyGgmszs51zRkZsJ1WnKUtnGclJtfno1-NO6+nDPb3qmh0BiM9XWVVAAH4NFo9IZ1OCqgAuBh-AEzeaLchgiG2aEYhZaRH5FGsfT6aj6d4AGgaJGYxGo6joaQAjoRWKVyKBorEmGxONw-PVJMcxql0mdQLoHk8XtokiMcDxmtzZukyYLSNt+RwuDw+PwMAAGY2i5W0LmgJ6EERa7bq8ia-VJR3O7j8QGwkHqEVGs2ujX6LWeoFw0GSfgAJgDOBtdv1oe98L9AFYA0A","body":"const peter_acc = make_account(100);\nconst paul_acc = peter_acc; "},{"body":"In the first situation, the two bank accounts are distinct.\n    Transactions made by Peter will not affect Paul's account, and vice\n    versa.  In the second situation, however, we have defined \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"paul_acc"},{"body":"\n    to be ","tag":"#text"},{"tag":"EM","child":[{"body":"the same thing","tag":"#text"}]},{"body":" as \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":".\n    In effect, Peter and Paul now have a joint bank account, and if Peter makes\n    a withdrawal from \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":"\n    Paul will observe less money in \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"paul_acc"},{"body":".\n    These two similar but distinct situations can cause confusion in building\n    computational models.  With the shared account, in particular, it can be\n    especially confusing that there is one object (the bank account) that has\n    two different names \n    \n\t(","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"paul_acc"},{"body":");\n      \n    if we are searching for all the places in our program where \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"paul_acc"},{"body":"\n    can be changed, we must remember to look also at things that change \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.1.3#footnote-2"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    With reference to the above remarks on \"","tag":"#text"},{"body":"sameness","tag":"#text"},{"body":"\" and\n    \"","tag":"#text"},{"body":"change,","tag":"#text"},{"body":"\" observe that if Peter and Paul could only examine\n    their bank balances, and could not perform operations that changed the\n    balance, then the issue of whether the two accounts are distinct would be\n    moot.  In general, so long as we never modify data objects, we can regard a\n    compound data object to be precisely the totality of its pieces.  For\n    example, a rational number is determined by giving its numerator and\n    its denominator.  But this view is no longer valid in the presence of\n    change, where a compound data object has an \"","tag":"#text"},{"body":"identity","tag":"#text"},{"body":"\" that is\n    something different from the pieces of which it is composed.  A bank\n    account is still \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" bank account even if we change the\n    balance by making a withdrawal; conversely, we could have two\n    different bank accounts with the same state information.  This\n    complication is a consequence, not of our programming language, but of\n    \n    our perception of a bank account as an object.  We do not, for\n    example, ordinarily regard a rational number as a changeable object\n    with identity, such that we could change the numerator and still have\n    \"","tag":"#text"},{"body":"the same","tag":"#text"},{"body":"\" rational number.\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Pitfalls of imperative programming","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    In contrast to functional programming, programming that makes extensive use\n    of assignment is known as \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"imperative programming","tag":"#text"}]},{"body":".  In addition to raising complications about\n    computational models, programs written in imperative style are susceptible\n    to bugs that cannot occur in functional programs.  For example, recall the\n    iterative factorial program from\n    \n\tsection ","tag":"#text"},{"tag":"REF","body":"1.2.1","href":"/sicpjs/1.2.1"},{"body":"\n\t(here using a conditional statement instead of a conditional\n\texpression):\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGj4CGF1ATpQwDYAUxAlKAG8coEfRIUadSuQCmLLgAcW1ACaEKAGlClqJWS35DRx0JXyguOvXNAA+UH0HCTLljPKEWdJavXkA3M4uAL6gMhwAzjJOLq7unlL6lrrE+qAAVKA+appBsfkuVqk2ANSgGLyB+cF5NcZuHl6mSRhaFYE1BEzkrOzcAKyVQA","body":"function factorial(n) {\n    function iter(product, counter) {\n        if (counter > n) {\n            return product;\n        } else {\n            return iter(counter * product,\n                        counter + 1);\n        }\n    }\n    return iter(1, 1);\n} "},{"body":"\n    Instead of passing arguments in the internal iterative loop, we could\n    adopt a more imperative style by using explicit assignment\n    to update the values of the variables ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"product"},{"body":"\n    and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"counter"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGj4CGF1ATpQwDYAUxAlKAG8coEaA4BTcqAAOLagBNCFUAF5QGANzDREqaWoly4lqvVbR9EhRp1KRll35CLFyvlBd9h46AB8oPkFtFxcWSUIWOlkFJXJzENAAX1BxDgBncSCEl2jFZTUvYntQACoZOTy44OzQQuKCgyKfAGozauyw8gjbe0d4kMTqwYtO7tA7Yz6cQYImclZ2bgBWXg0gA","body":"function factorial(n) {\n    let product = 1;\n    let counter = 1;\n    function iter() {\n        if (counter > n) {\n            return product;\n        } else {\n            product = counter * product;\n            counter = counter + 1;\n            return iter();\n        }\n    }\n    return iter();\n} "},{"body":"\n    This does not change the results produced by the program, but it does\n    introduce a subtle trap.  How do we decide the order of the assignments?\n    As it happens, the program is correct as written.  But writing the\n    assignments in the opposite order\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":false,"body":"counter = counter + 1;\nproduct = counter * product;"},{"body":"\n    would have produced a different,\n    \n    incorrect result. In general, programming\n    with assignment forces us to carefully consider the relative orders of the\n    assignments to make sure that each statement is using the correct version\n    of the variables that have been changed.  This issue simply does not arise\n    in functional programs.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/3.1.3#footnote-3"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n    The complexity of imperative programs becomes even worse if we consider\n    applications in which several processes execute concurrently.  We will\n    return to this in section ","tag":"#text"},{"tag":"REF","body":"3.4","href":"/sicpjs/3.4"},{"body":".\n    First, however, we will address the issue of providing a computational\n    model for expressions that involve assignment, and explore the uses of\n    objects with local state in designing simulations.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.7","id":"#ex-3.7","child":[{"body":"\n    Consider the bank account objects created by \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_account"},{"body":",\n      \n    with the password modification described in\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.3","href":"/sicpjs/3.1.1#ex-3.3"},{"body":".  Suppose that our\n    banking system requires the ability to make\n    \n    joint accounts.  Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_joint"},{"body":"\n    that accomplishes this.  \n    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_joint"},{"body":"\n    should take three arguments.  The first is a password-protected account.\n    The second argument must match the password with which the account was\n    defined in order for the \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_joint"},{"body":"\n    operation to proceed.  The third argument is a new password.  \n    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_joint"},{"body":"\n    is to create an additional access to the original account using the new\n    password.  For example, if \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":"\n    is a bank account with\n    password \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"open sesame\""},{"body":",\n      \n    then\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA5KALYCGA1gKYD6AVgPYCWAdgC6jO2gBG5oA7gE71mzcoy4BPUAGdmAVwAmo5lJwBjWoxmgADsVkAbSsVWrQAXiJkqdJswAU28iP5GTAGlAAiWo7FTyUsSE5J4envy0-pwKngCUANxAA","body":"const paul_acc = make_joint(peter_acc, \"open sesame\", \"rosebud\"); "},{"body":"\n    will allow one to make transactions on \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"peter_acc"},{"body":"\n    using the name\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"paul_acc"},{"body":"\n    and the password\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"rosebud\""},{"body":".\n      \n    You may wish to modify your solution to\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.3","href":"/sicpjs/3.1.1#ex-3.3"},{"body":" to accommodate this\n    new feature.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":32,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+o6adSeQBQAjRgBtGZVgBpQABwCUoAN45Qq0ETJVaoAO6VyACwAmAJ0Y7+jer2LkFytY9CV8oIaPGlWoAHwBeUCsbOyUVJ3DhMQlQAMjPbwBaQOs+AG4w8McTVnJCEzo4iXTM0ABfUFYRAGdvBxK1bNz80AAiSGIqwnx8SlJKVlt1EiMqluLM0oyyqY0KGjojVhlqKv1LFNt7KcdCrxjQXe8AamTg8fDGvIKPIqnJx1mtBcoqmUZyUgN+emkARy2Si43DIYn4Av9QvUGjkrgxQQEWnpDKZzC1tlDHAB+XT6YxmHTojGqABccLBCMWy1W5DRRMy2MpK30hKJpJaAFViMxiNQdHRsr9CKwquRSUw2JxuMExizypUapCMZdmr8Yj5Wu0eCZshRQLBGFUqjpqCYjDKSvc1JbVMrnq93p90pMcDwOuRAvtxRwuDw+PwMAAGAPSFqsABujBacnSjH4iNxKJ0LRD4cjcn4AFYA9HQCAkXjzFVQFmcLH48j8cnWoIBlH+AAWbOpXPAShkE0691vQ3G014R7zBgsDgAK2obYEIjbbCMktI0inXNYs5kOmkY4n7FXAOhTTo32FVUYAHMpM5iDJCOQtzoFH51XVwiyQKBoAZWKRmIEr+-bL13oO+AmqAG6DD6wQskC-Btpe16rqAACEYIgeOtg3juUK2qAAAeaqtAA6iYtDHihE6BFKfCyAaRomma5xOHK1S1CyjiuiK5FeIa7CLjO+w8cuc4HoaJ5nvxK63vRJQsWoL5vh+X6MD+AxUKQAHaEBJigGJHEQUSUE+oe3HTsu-DZvCGrttqH7uvqPa0VGip0i2HGGWJpkKEY1DCqAjLUrmOIVuYoigNQrgBtJ4QvuQ1CgOQwruhpFlap2erUb2ZoMIeIloKAEVOFhuH3gRRHECR2ngZR3Y0aa5oYoxCqPnSL4AIIiCI36GMp-5PFRhrLtIWEGX1Rg4AAkCUL4VYM0WgIQNQmHlWQws0Q1VEZS5GJJEyyncTp4GxXY5KwJhzp6w5zsE-pBiG1AyAMoA1Ee9CsFG6R3XFJ0+nG+aJlWLS3fdj1WC96aBjmL74Qm+JFoGODvcdgnlgWSYhjWxB1o24NgJqHbWaldl9jgL4ALLDogqHus1FG2C6tDsW8hAiKdAReuwoECPDn3cDdd10EDz1-URNSCIQZrRngDNM19SO-SGQusCLYuZk2zmQ4FOhFlm0hVAYvAiEYoBYY2QA","body":"function make_joint(linked_acc, linked_pw, joint_pw) {\n    return (message, input_pw) => {\n        \n        // Check authentication for joint account\n        if (input_pw !== joint_pw) {\n            return x => \"Wrong joint account password\";\n        } else {\n            const access_linked = linked_acc(message, linked_pw);\n            \n            // Check authentication for linked account\n            if (access_linked(0) === \"Incorrect Password\") {\n                // access_linked(0) does deposit / withdrawal of 0\n                // to test for \"Incorrect Password\" message. \n                return x => \"Wrong linked account password\";\n            } else {\n                // All authentication passed, return accessed\n\t        // account to user\n                return access_linked;\n            }\n        }\n    };\n} "}]},{"tag":"EXERCISE","title":"Exercise 3.8","id":"#ex-3.8","child":[{"body":"\n    When we defined the evaluation model in\n    section ","tag":"#text"},{"tag":"REF","body":"1.1.3","href":"/sicpjs/1.1.3"},{"body":", we said that the\n    \n    first step in evaluating an expression is to evaluate its subexpressions.\n    But we never specified the order in which the subexpressions should be\n    evaluated (e.g., left to right or right to left).\n    \n\tWhen we introduce\n\tassignment, the order in which the operands of an\n\toperator combination are evaluated can make a difference to the result.\n      \n    Define a simple\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":" such that evaluating\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f(0) + f(1)"},{"body":"\n    will return 0 if the\n    operands of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"+"},{"body":"\n    are evaluated from left to right but will return 1 if the\n    operands\n    are evaluated from right to left.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":27,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQEY0oFA4DYCmALqAG6gC8oAtAAxoCsA3DgGYCuAdgMbECWAey6g2ACgAeASlABvHKEXkqoCaADU5VktAAnEh10iyrAL54QoYroCeVgBaEAzoVAuADgENdn4oXw2OAAm-E7u+J42YuJ0MpriGFJSzKCW+sSGXE6gdMGh4ZHRYokaomKxyalg6ZnZGEA","body":"let v = -0.5;\nfunction f(x) {\n    v = x + v;\n    return v;\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.1.3#footnote-link-1","child":[{"body":"We don't substitute for the occurrence of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" in the\n    assignment\n    because the ","tag":"#text"},{"body":"name","tag":"LATEX"},{"body":" in\n    an assignment\n    is not evaluated. If we did substitute for it, we would get\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"25 = 25 - amount;"},{"body":",\n      \n    which makes no sense.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.1.3#footnote-link-2","child":[{"body":"The\n    phenomenon of a single computational object being accessed by more than one\n    name is known as \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"aliasing","tag":"#text"}]},{"body":".  The joint bank account situation illustrates a very\n    simple example of an alias.  In section ","tag":"#text"},{"tag":"REF","body":"3.3","href":"/sicpjs/3.3"},{"body":"\n    we will see much more complex examples, such as \"","tag":"#text"},{"body":"distinct","tag":"#text"},{"body":"\"\n    compound data structures that share parts.  Bugs can occur in our programs if\n    we forget that a change to an object may also, as a\n    \"","tag":"#text"},{"body":"side effect,","tag":"#text"},{"body":"\" change a \"","tag":"#text"},{"body":"different","tag":"#text"},{"body":"\" object because\n    the two \"","tag":"#text"},{"body":"different","tag":"#text"},{"body":"\" objects are actually a single object\n    appearing under different aliases.  These so-called ","tag":"#text"},{"tag":"EM","child":[{"body":"side-effect\n    bugs","tag":"#text"}]},{"body":" are so difficult to locate and to analyze that some people have\n    proposed that programming languages be designed in such a way as to not\n    allow side effects or aliasing\n    \n    (Lampson et al. 1981; \n    Morris, Schmidt, and Wadler 1980).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/3.1.3#footnote-link-3","child":[{"body":"In view of this, it is ironic that\n    introductory programming is most often taught in a highly imperative style.\n    This may be a vestige of a belief, common throughout the 1960s and 1970s,\n    that programs that call\n    functions\n    must inherently be less efficient than programs that perform assignments.  \n    (Steele (1977)\n    debunks this argument.)  Alternatively it may reflect a view that\n    step-by-step assignment is easier for beginners to visualize than\n    function\n    call. Whatever the reason, it often saddles beginning programmers with\n    \"","tag":"#text"},{"body":"should I set this variable before or after that one","tag":"#text"},{"body":"\" concerns\n    that can complicate programming and obscure the important ideas.","tag":"#text"}]}]