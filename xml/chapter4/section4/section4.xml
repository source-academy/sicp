<SECTION>
  <NAME>Logic Programming</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:logic-programming"/>

  <INDEX>logic programming<OPEN/></INDEX>

  <TEXT>
    In chapter<SPACE/>1 we stressed that computer science deals with
    <INDEX>declarative vs.<SPACE/>imperative knowledge</INDEX>
    <INDEX>imperative vs.<SPACE/>declarative knowledge</INDEX>
    <INDEX>mathematics<SUBINDEX>computer science vs.</SUBINDEX></INDEX>
    <INDEX>computer science<SUBINDEX>mathematics vs.</SUBINDEX></INDEX>
    imperative
    (how to) knowledge, whereas mathematics deals with declarative (what
    is) knowledge.  Indeed, programming languages require that the
    programmer express knowledge in a form that indicates the step-by-step
    methods for solving particular problems.  On the other hand,
    high-level languages provide, as part of the language implementation,
    a substantial amount of methodological knowledge that frees
    the user from concern with numerous details of how a specified
    computation will progress.
  </TEXT>

  <TEXT>
    Most programming languages, including
    <SPLITINLINE><SCHEME>Lisp,</SCHEME>
    <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    are organized around
    computing the values of mathematical functions.  Expression-oriented
    languages
    <SPLITINLINE>
      <SCHEME>
	(such as Lisp, Fortran, Algol and JavaScript)
      </SCHEME>
      <JAVASCRIPT>
	(such as Lisp, C, Python, and JavaScript)
      </JAVASCRIPT>
    </SPLITINLINE>
    capitalize on the
    <QUOTE>pun</QUOTE> that an expression that describes the value of a
    function may also be interpreted as a means of computing that value.
    Because of this, most programming languages are strongly biased toward
    unidirectional computations (computations with well-defined inputs and
    outputs). There are, however, radically different programming languages
    that relax this bias.  We saw one such example in
    section<SPACE/><REF NAME="sec:constraints"/>, where the objects of
    computation were arithmetic constraints.  In a constraint system the
    direction and the order of computation are not so well specified; in
    carrying out a computation the system must therefore provide more detailed
    <QUOTE>how to</QUOTE> knowledge than would be the case with an ordinary
    arithmetic computation.  This does not mean, however, that the user is
    released altogether from the responsibility of providing imperative
    knowledge. There are many constraint networks that implement the same set
    of constraints, and the user must choose from the set of mathematically
    equivalent networks a suitable network to specify a particular computation.
  </TEXT>

  <TEXT>
    The nondeterministic program evaluator of
    section<SPACE/><REF NAME="sec:nondeterministic-evaluation"/> also moves
    away from the view that programming is about constructing algorithms for
    computing unidirectional functions.  In a nondeterministic language,
    expressions can have more than one value, and, as a result, the
    computation is
    dealing with
    <INDEX>relations, computing in terms of</INDEX>
    relations rather than with single-valued functions.  Logic
    programming extends this idea by combining a relational vision of programming
    with a powerful kind of symbolic pattern matching called 
    <EM>unification</EM>.<FOOTNOTE>Logic programming has grown out of a long
    <INDEX>logic programming<SUBINDEX>history of</SUBINDEX></INDEX>
    history of research in
    <INDEX>theorem proving (automatic)</INDEX>
    automatic theorem proving.  Early theorem-proving
    programs could accomplish very little, because they exhaustively searched
    the space of possible proofs.  The major breakthrough that made such a
    search plausible was the discovery in the early 1960s of the 
    <INDEX>unification<SUBINDEX>discovery of algorithm</SUBINDEX></INDEX>
    <EM>unification algorithm</EM> and the 
    <INDEX>resolution principle</INDEX>
    <EM>resolution principle</EM> (<CITATION>Robinson 1965</CITATION>).  
    Resolution was used, for example, by 
    <INDEX>Green, Cordell</INDEX>
    <INDEX>Raphael, Bertram</INDEX>
    Green and Raphael (1968) (see also <CITATION>Green 1969</CITATION>) as the
    basis for a deductive question-answering system.  During most of this period,
    researchers concentrated on algorithms that are guaranteed to find a proof if
    one exists.  Such algorithms were difficult to control and to direct toward
    a proof.  
    <INDEX>Hewitt, Carl Eddie</INDEX>
    Hewitt (1969) recognized the possibility of merging the control structure of
    a programming language with the operations of a logic-manipulation system,
    leading to the work in automatic search mentioned in
    section<SPACE/><REF NAME="sec:amb"/>
    (footnote<SPACE/><REF NAME="foot:backtrack"/>).  At the same time that this
    was being done,
    <INDEX>Colmerauer, Alain</INDEX>
    Colmerauer, in Marseille, was developing rule-based systems for manipulating
    natural language (see <CITATION>Colmerauer et al.<SPACE/>1973</CITATION>).
    He invented a programming language called 
    <INDEX>Prolog</INDEX>
    Prolog for representing those rules.  
    <INDEX>Kowalski, Robert</INDEX>
    <CITATION>Kowalski (1973; 1979)</CITATION>
    in Edinburgh, recognized that execution of a Prolog program could be
    interpreted as proving theorems (using a proof technique called linear 
    <INDEX>resolution, Horn-clause</INDEX>
    Horn-clause resolution).  The merging of the last two strands led to the
    logic-programming movement.  Thus, in assigning credit for the development
    of logic programming, the French can point to Prolog<APOS/>s genesis at the 
    <INDEX>University of Marseille</INDEX>
    University of Marseille, while the British can highlight the work at the 
    <INDEX>University of Edinburgh</INDEX>
    University of Edinburgh. According to people at 
    <INDEX>MIT</INDEX>
    MIT, logic programming was developed by these groups in an attempt to figure
    out what Hewitt was talking about in his brilliant but impenetrable Ph.D.
    thesis.  For a history of logic
    programming, see
    <INDEX>Robinson, J. A.</INDEX>
    <CITATION>Robinson 1983</CITATION>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    This approach, when it works, can be a very
    <INDEX>declarative vs.<SPACE/>imperative knowledge<SUBINDEX>logic programming and<OPEN/></SUBINDEX></INDEX>
    <INDEX>imperative vs.<SPACE/>declarative knowledge<SUBINDEX>logic programming and<OPEN/></SUBINDEX></INDEX>
    powerful way to write programs.
    Part of the power comes from the fact that a single <QUOTE>what is</QUOTE>
    fact can be used to solve a number of different problems that would have
    different <QUOTE>how to</QUOTE> components.  As an example, consider the 
    <INDEX><USE>append</USE><SUBINDEX><ORDER>what</ORDER><QUOTE>what is</QUOTE> (rules) vs.<SPACE/><QUOTE>how to</QUOTE> (<SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>)</SUBINDEX><OPEN/></INDEX>
    <SCHEMEINLINE>append</SCHEMEINLINE> operation, which takes two lists as
    arguments and combines their elements to form a single list.  In a procedural
    language such as
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    we could define <SCHEMEINLINE>append</SCHEMEINLINE> in terms of the
    basic list constructor
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    as we did in section<SPACE/><REF NAME="sec:sequences"/>:
    <SNIPPET>
      <SCHEME>
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
      </SCHEME>
      <JAVASCRIPT>
function append(x, y) {    
    return is_null(x)
           ? y
           : pair(head(x), append(tail(x), y));
}
      </JAVASCRIPT>
    </SNIPPET>
    This
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can be regarded as a translation into
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    of the following two rules, the first of which covers the case where the
    first list is empty and the second of which handles the case of a nonempty
    list, which is a
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    of two parts:
    <UL>
      <LI>
	For any list <SCHEMEINLINE>y</SCHEMEINLINE>, the empty list and
	<SCHEMEINLINE>y</SCHEMEINLINE> <SCHEMEINLINE>append</SCHEMEINLINE> to
	form <SCHEMEINLINE>y</SCHEMEINLINE>.
      </LI>
      <LI>
	For any <SCHEMEINLINE>u</SCHEMEINLINE>, <SCHEMEINLINE>v</SCHEMEINLINE>,
	<SCHEMEINLINE>y</SCHEMEINLINE>, and <SCHEMEINLINE>z</SCHEMEINLINE>,
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(cons u v)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair(u, v)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	and <SCHEMEINLINE>y</SCHEMEINLINE> <SCHEMEINLINE>append</SCHEMEINLINE>
	to form
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(cons<SPACE/>u<SPACE/>z)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair(u, z)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	if <SCHEMEINLINE>v</SCHEMEINLINE> and <SCHEMEINLINE>y</SCHEMEINLINE>
	<SCHEMEINLINE>append</SCHEMEINLINE> to form
	<SCHEMEINLINE>z</SCHEMEINLINE>.<FOOTNOTE>To see the correspondence
	between the rules and the
	<SPLITINLINE>
	  <SCHEME>procedure,</SCHEME>
	  <JAVASCRIPT>function,</JAVASCRIPT>
	</SPLITINLINE>
	let <SCHEMEINLINE>x</SCHEMEINLINE> in the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	(where <SCHEMEINLINE>x</SCHEMEINLINE> is nonempty) correspond to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(cons u v)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>pair(u, v)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	in the rule.  Then <SCHEMEINLINE>z</SCHEMEINLINE> in the rule corresponds
	to the <SCHEMEINLINE>append</SCHEMEINLINE> of
	<SPLITINLINE>
	  <SCHEME>
	  <SCHEMEINLINE>(cdr x)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>tail(x)</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	and <SCHEMEINLINE>y</SCHEMEINLINE>.</FOOTNOTE>
      </LI>
    </UL>
    Using the <SCHEMEINLINE>append</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    we can answer questions such as
    <BLOCKQUOTE>
      Find the <SCHEMEINLINE>append</SCHEMEINLINE> of
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(a b)</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>list("a", "b")</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(c d)</SCHEMEINLINE>.</SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>list("c", "d")</JAVASCRIPTINLINE>.
      </JAVASCRIPT></SPLITINLINE>
    </BLOCKQUOTE>
    But the same two rules are also sufficient for answering the following
    sorts of questions, which the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can<APOS/>t answer:
    <BLOCKQUOTE>
      Find a list <SCHEMEINLINE>y</SCHEMEINLINE> that
      <SCHEMEINLINE>append</SCHEMEINLINE>s with
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(a b)</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>list("a", "b")</JAVASCRIPTINLINE>
	</JAVASCRIPT>
      </SPLITINLINE> 
      to produce
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(a b c d)</SCHEMEINLINE>.</SCHEME>
	<JAVASCRIPT>
	  <JAVASCRIPTINLINE>list("a", "b", "c", "d")</JAVASCRIPTINLINE>.
	</JAVASCRIPT>
      </SPLITINLINE>
    </BLOCKQUOTE>
    <BLOCKQUOTE>
      Find all <SCHEMEINLINE>x</SCHEMEINLINE> and <SCHEMEINLINE>y</SCHEMEINLINE>
      that <SCHEMEINLINE>append</SCHEMEINLINE> to form
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>(a b c d)</SCHEMEINLINE>.</SCHEME>
	<JAVASCRIPT>
	  <JAVASCRIPTINLINE>list("a", "b", "c", "d")</JAVASCRIPTINLINE>.
	</JAVASCRIPT>
      </SPLITINLINE>
    </BLOCKQUOTE>
    In a
    <INDEX>logic programming<SUBINDEX>logic programming languages</SUBINDEX></INDEX>
    <INDEX>programming language<SUBINDEX>logic</SUBINDEX></INDEX>
    logic programming language, the programmer writes an
    <SCHEMEINLINE>append</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME><QUOTE>procedure</QUOTE></SCHEME>
      <JAVASCRIPT><QUOTE>function</QUOTE></JAVASCRIPT>
    </SPLITINLINE>
    by stating the two rules about <SCHEMEINLINE>append</SCHEMEINLINE> given
    above.
    <INDEX><USE>append</USE><SUBINDEX><ORDER>what</ORDER><QUOTE>what is</QUOTE> (rules) vs.<SPACE/><QUOTE>how to</QUOTE> (<SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>)</SUBINDEX><CLOSE/></INDEX>
    <QUOTE>How to</QUOTE> knowledge is provided automatically by the
    interpreter to allow this single pair of rules to be used to answer all
    three types of questions about
    <SCHEMEINLINE>append</SCHEMEINLINE>.<FOOTNOTE>This certainly does not
    relieve the user of the entire problem of how to compute the answer. There
    are many different mathematically equivalent sets of rules for formulating
    the <SCHEMEINLINE>append</SCHEMEINLINE> relation, only some of which can be
    turned into effective devices for computing in any direction.  In addition,
    sometimes <QUOTE>what is</QUOTE> information gives no clue
    <QUOTE>how to</QUOTE> compute an answer.  For example, consider the problem
    of computing the <LATEXINLINE>$y$</LATEXINLINE> such that
    <LATEXINLINE>$y^2 = x$</LATEXINLINE>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    Contemporary logic programming languages (including the one we
    implement here) have substantial deficiencies, in that their general
    <QUOTE>how to</QUOTE> methods can lead them into spurious infinite loops or
    other undesirable behavior. Logic programming is an active field of research
    in computer science.<FOOTNOTE>Interest in logic programming peaked
    <INDEX>logic programming<SUBINDEX>history of</SUBINDEX></INDEX>
    <INDEX>logic programming<SUBINDEX>in Japan</SUBINDEX></INDEX>
    <INDEX>logic programming<SUBINDEX>computers for</SUBINDEX></INDEX>
    during the early <APOS/>80s when the Japanese government began an ambitious
    project aimed at building superfast computers optimized to run logic
    programming languages.  The speed of such computers was to be measured
    in LIPS (Logical Inferences Per Second) rather than the usual FLOPS
    (FLoating-point Operations Per Second).  Although the project
    succeeded in developing hardware and software as originally planned,
    the international computer industry moved in a different direction.
    See 
    <INDEX>Feigenbaum, Edward</INDEX>
    <INDEX>Shrobe, Howard E.</INDEX>
    <CITATION>Feigenbaum and Shrobe 1993</CITATION> for an overview evaluation
    of the Japanese project.  The logic programming community has also moved on
    to consider relational programming based on techniques other than
    simple pattern matching, such as the ability to deal with numerical
    constraints such as the ones illustrated in the constraint-propagation
    system of section<SPACE/><REF NAME="sec:constraints"/>.</FOOTNOTE>
  </TEXT>

  <INDEX>declarative vs.<SPACE/>imperative knowledge<SUBINDEX>logic programming and<CLOSE/></SUBINDEX></INDEX>
  <INDEX>imperative vs.<SPACE/>declarative knowledge<SUBINDEX>logic programming and<CLOSE/></SUBINDEX></INDEX>
  
  <TEXT>
    Earlier in this chapter we explored the technology of implementing
    interpreters and described the elements that are essential to an
    interpreter for a
    <SPLITINLINE>
      <SCHEME>Lisp-like</SCHEME>
      <JAVASCRIPT>JavaScript-like</JAVASCRIPT>
    </SPLITINLINE>
    language (indeed, to an interpreter for any conventional language).  Now we
    will apply these ideas to discuss an interpreter for a logic programming
    language.  We call this
    language the
    <INDEX>query language</INDEX>
    <EM>query language</EM>, because it is very useful for
    retrieving information from data bases by formulating 
    <INDEX>query</INDEX>
    <EM>queries</EM>, or questions, expressed in the language.  Even though the
    query language is very different from
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
    <JAVASCRIPT>JavaScript,</JAVASCRIPT></SPLITINLINE>
    we will find it convenient to describe the language in terms of the same
    general framework we have been using all along: as a collection of primitive
    elements, together with means of combination that enable us to combine
    simple elements to create more complex elements and means of abstraction
    that enable us to regard complex elements as single conceptual units.  An
    interpreter for a logic programming language is considerably more complex
    than an interpreter for a language like
    <SPLITINLINE>
      <SCHEME>Lisp.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    Nevertheless, we will see
    that our
    <INDEX>query interpreter</INDEX>
    query-language interpreter contains many of the same elements
    found in the interpreter of section<SPACE/><REF NAME="sec:mc-eval"/>.  In
    particular, there will be an <QUOTE>evaluate</QUOTE> part that classifies
    expressions according to type and an <QUOTE>apply</QUOTE> part that
    implements the language<APOS/>s abstraction mechanism
    <SPLITINLINE>
      <SCHEME>(procedures</SCHEME>
      <JAVASCRIPT>(functions</JAVASCRIPT>
    </SPLITINLINE>
    in the case of
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    and <EM>rules</EM> in the case of logic programming).  Also, a central role
    is played in the implementation by a frame data structure, which determines
    the correspondence between symbols and their associated values.  One
    additional interesting aspect of our query-language implementation is
    that we make substantial use of streams, which were introduced in
    chapter<SPACE/>3.
  </TEXT>

  <INDEX>logic programming<CLOSE/></INDEX>
  
  <!-- Subsection 1 : Deductive Information Retrieval -->
  &amp;subsection4.4.1;

  <!-- Subsection 2 : How the Query System Works -->
  &amp;subsection4.4.2;

  <!-- Subsection 3 : Is Logic Programming Mathematical Logic? -->
  &amp;subsection4.4.3;

  <!-- Subsection 4 : Implementing the Query System -->
  &amp;subsection4.4.4;
  
</SECTION>
