<SUBSECTION>
   <NAME>线性递归与迭代</NAME> 

  <LABEL NAME="sec:recursion-and-iteration"></LABEL>
   <INDEX>迭代过程<SUBINDEX>递归过程 对比.<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX>递归过程<SUBINDEX>迭代过程 对比.<OPEN></OPEN></SUBINDEX></INDEX> 

   <TEXT>
    我们首先考虑
    <INDEX>阶乘</INDEX>
    阶乘函数，其定义为
    <LATEX>
      \[
      \begin{array}{lll}
      n! &amp;=&amp; n\cdot(n-1)\cdot(n-2)\cdots3\cdot2\cdot1
      \end{array}
      \]
    </LATEX>
    计算阶乘的方法有很多种。其中一种是利用观察到的事实：对于任意正整数<SPACE></SPACE><LATEXINLINE>$n$</LATEXINLINE>，
    <LATEXINLINE>$n!$</LATEXINLINE> 等于
    <LATEXINLINE>$n$</LATEXINLINE> 乘以 <LATEXINLINE>$(n-1)!$</LATEXINLINE>：
    <LATEX>
      \[
      \begin{array}{lll}
      n! &amp;=&amp; n\cdot\left[(n-1)\cdot(n-2)\cdots3\cdot2\cdot1\right] \quad = \quad n \cdot(n-1)!
      \end{array}
      \]
    </LATEX>
    因此，我们可以通过计算 <LATEXINLINE>$(n-1)!$</LATEXINLINE> 并乘以 
    <LATEXINLINE>$n$</LATEXINLINE> 来计算 <LATEXINLINE>$n!$</LATEXINLINE>。如果我们加上规定1! 
    等于1，这一观察可以直接转化成一个
    <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>计算机函数：</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>阶乘</DECLARATION><SUBINDEX>线性递归版本</SUBINDEX></INDEX>
      <NAME>factorial_definition</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="32" HIDE="yes">
      <NAME>factorial_example</NAME>
      <SCHEME>
(factorial 5)
      </SCHEME>
      <JAVASCRIPT>
factorial(5);
      </JAVASCRIPT>
    </SNIPPET>

    <SPLIT>
      <SCHEME>
          我们可以使用第<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节的替换模型观察这个
          <INDEX>过程应用的替换模型<SUBINDEX>过程形态</SUBINDEX></INDEX>
          来计算6!，如图<SPACE></SPACE><REF NAME="fig:recursive-factorial-scheme"></REF>所示。
	<FIGURE WEB_SCALE="0.80" SRC="img_original/ch1-Z-G-7.svg">
	  <LABEL NAME="fig:recursive-factorial-scheme"></LABEL>
	  <CAPTION>计算6!的线性递归过程。
	  </CAPTION>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	      我们可以使用第<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>节的替换模型观察这个
        <INDEX>函数应用的替换模型<SUBINDEX>过程形态</SUBINDEX></INDEX>
        来计算6!，如图<SPACE></SPACE><REF NAME="fig:recursive-factorial-javascript"></REF>所示。
  <WEB_ONLY>
    &lt;!--  图像后移以适应SICP JS分页 --&gt;
    &lt;!--  图像代码在本文件后面以PDF_ONLY形式重复 --&gt;
	<FIGURE>
	  <FIGURE WEB_SCALE="0.7" SRC="img_javascript/ch1-Z-G-7.svg"></FIGURE>
	  <LABEL NAME="fig:recursive-factorial-javascript"></LABEL>
	  <CAPTION>计算6!的线性递归过程。
	  </CAPTION>
	</FIGURE>
  </WEB_ONLY>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT> 

   <TEXT>
    现在让我们换一种计算阶乘的视角。我们可以通过说明：先将1乘以2，然后将结果乘以3，再乘以4，依此类推，直到乘到<LATEXINLINE>$n$</LATEXINLINE>，来描述计算&lt; LATEXINLINE&gt;$n!$&lt;/LATEXINLINE&gt;的规则。
    更正式地说，我们维护一个正在进行的积，以及一个从1计数到<LATEXINLINE>$n$</LATEXINLINE>的计数器。我们可以描述计算过程为计数器和积同时根据如下规则从一步变化到下一步：
    <LATEX>
      \[
      \begin{array}{lll}
      \textrm{积} &amp; \leftarrow &amp; \textrm{计数器} \cdot \textrm{积}\\
      \textrm{计数器} &amp; \leftarrow &amp; \textrm{计数器} + 1
      \end{array}
      \]
    </LATEX>
    并规定当计数器超过<LATEXINLINE>$n$</LATEXINLINE>时，积的值即为<LATEXINLINE>$n!$</LATEXINLINE>。
  </TEXT> 

   <TEXT>
    我们可以再次将描述重新表述为计算阶乘的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>:
    <FOOTNOTE>在实际程序中，我们可能会使用上一节介绍的块结构来隐藏
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>fact-iter</SCHEMEINLINE> 的定义：
      </SCHEME>
      <JAVASCRIPT>
    	<JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE> 的声明：
      </JAVASCRIPT>
    </SPLITINLINE>

    <SNIPPET PAGE="33">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        return counter &gt; n 
               ? product
               : iter(counter * product,
                      counter + 1);
    }
    return iter(1, 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    这里为了尽量减少需要同时考虑的内容，我们避免了这样做。<LABEL NAME="foot:block-structured-factorial"></LABEL></FOOTNOTE>
    <SNIPPET PAGE="34">
      <INDEX><DECLARATION>factorial</DECLARATION><SUBINDEX>线性迭代版本</SUBINDEX></INDEX>
      <NAME>factorial_iterative_definition</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <SCHEME>
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return fact_iter(1, 1, n);
}
function fact_iter(product, counter, max_count) {
    return counter &gt; max_count
           ? product
           : fact_iter(counter * product,
                       counter + 1,
                       max_count);
}
      </JAVASCRIPT>
    </SNIPPET>
        像之前一样，我们可以使用替换模型来形象地展示
  <SPLIT>
    <SCHEME>
      <FIGURE WEB_SCALE="0.4" SRC="img_original/ch1-Z-G-10.svg">
	<LABEL NAME="fig:iterative-factorial-scheme"></LABEL>
	<CAPTION>计算
	<LATEXINLINE>$6!$</LATEXINLINE>的线性迭代过程。
	</CAPTION>
      </FIGURE>
        计算 <LATEXINLINE>$6!$</LATEXINLINE>的过程，如
	图<SPACE></SPACE><REF NAME="fig:iterative-factorial-scheme"></REF>所示。
    </SCHEME>
    <JAVASCRIPT>
  <PDF_ONLY>
    &lt;!-- 图像为SICP JS排版以前移至此处 --&gt;
    &lt;!-- 图像代码复制自本文件之前的WEB_ONLY部分 --&gt;
	<FIGURE>
	  <FIGURE WEB_SCALE="0.7" SRC="img_javascript/ch1-Z-G-7.svg"></FIGURE>
	  <LABEL NAME="fig:recursive-factorial-javascript"></LABEL>
	  <CAPTION>计算6!的线性递归过程。
	  </CAPTION>
	</FIGURE>
  </PDF_ONLY>
      <FIGURE>
	<FIGURE WEB_SCALE="0.4" SRC="img_javascript/ch1-Z-G-10.svg"></FIGURE>
	<LABEL NAME="fig:iterative-factorial-javascript"></LABEL>
	<CAPTION>计算
	<LATEXINLINE>$6!$</LATEXINLINE>的线性迭代过程。
	</CAPTION>
      </FIGURE>
        计算 <LATEXINLINE>$6!$</LATEXINLINE>的过程，如
	图<SPACE></SPACE><REF NAME="fig:iterative-factorial-javascript"></REF>所示。
    </JAVASCRIPT>
  </SPLIT>
  </TEXT> 
  <LONG_PAGE LINES="1"></LONG_PAGE>
   <TEXT>
    比较这两个过程。从一个角度看，它们几乎没有什么不同。两者都在相同的定义域上计算相同的数学函数，并且每个都需要与
    <LATEXINLINE>$n$</LATEXINLINE>
    成正比的步骤数来计算
    <LATEXINLINE>$n!$</LATEXINLINE>。事实上，这两个过程甚至执行了相同的乘法序列，得到相同的部分积序列。另一方面，当我们考虑
    <INDEX>过程的形状</INDEX>
    <INDEX>过程<SUBINDEX>形状</SUBINDEX></INDEX>
    <QUOTE>“形状”</QUOTE>时，我们发现它们的发展方式却截然不同。
  </TEXT> 

   <TEXT>
    考虑第一个过程。替换模型显示了一个先展开后收缩的形状，如图
    <REF NAME="fig:recursive-factorial-javascript"></REF>
    中箭头所示。展开发生在过程构建了一系列
    <INDEX>延迟操作</INDEX>
    <EM>延迟操作</EM>（在此情况下是一系列乘法）时。收缩则发生在这些操作被实际执行时。这种以延迟操作链为特征的过程称为
    <INDEX>递归过程</INDEX>
    <INDEX>过程<SUBINDEX>递归</SUBINDEX></INDEX>
    <EM>递归过程</EM>。执行这个过程需要解释器跟踪后续要执行的操作。在计算
    <LATEXINLINE>$n!$</LATEXINLINE>时，延迟乘法链的长度，因此跟踪它所需的信息量，
    <INDEX>线性增长</INDEX>
    随着
    <LATEXINLINE>$n$</LATEXINLINE>
    线性增长（与
    <LATEXINLINE>$n$</LATEXINLINE>
    成正比），就像步骤数一样。这种过程称为
    <INDEX>递归过程<SUBINDEX>线性</SUBINDEX></INDEX>
    <INDEX>线性递归过程</INDEX>
    <INDEX>过程<SUBINDEX>线性递归</SUBINDEX></INDEX>
    <EM>线性递归过程</EM>。
  </TEXT> 

   <TEXT>
    相比之下，第二个过程既不展开也不收缩。对于任何
    <LATEXINLINE>$n$</LATEXINLINE>，在每一步中，我们只需跟踪
    <SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>product</SCHEMEINLINE>、<SCHEMEINLINE>counter</SCHEMEINLINE>和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>max-count</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>max_count</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    当前的值。我们称这种为
    <INDEX>迭代过程</INDEX>
    <INDEX>过程<SUBINDEX>迭代</SUBINDEX></INDEX>
    <EM>迭代过程</EM>。一般来说，迭代过程是指其状态可以通过固定数量的
    <INDEX>状态变量</INDEX>
    <EM>状态变量</EM>来总结，同时有一条固定规则描述状态变量应如何在过程从一个状态向另一个状态转移时进行更新，且（可选）有一个终止测试，用于指定过程应终止的条件。在计算
    <LATEXINLINE>$n!$</LATEXINLINE>时，所需步骤数随
    <LATEXINLINE>$n$</LATEXINLINE>线性增长。这种过程称为
    <INDEX>迭代过程<SUBINDEX>线性</SUBINDEX></INDEX>
    <INDEX>线性迭代过程</INDEX>
    <INDEX>过程<SUBINDEX>线性迭代</SUBINDEX></INDEX>
    <EM>线性迭代过程</EM>。
  </TEXT> 

  <LONG_PAGE LINES="3"></LONG_PAGE>
   <TEXT>
    这两种过程的对比也可以从另一个方面体现出来。
    在迭代情况下，状态变量提供了过程在任意时刻状态的完整描述。
    如果我们在步骤之间停止计算，恢复计算所需做的仅仅是向解释器提供三个状态变量的值。
    递归过程则不然。在此情况下，解释器维护着一些额外的<QUOTE>隐藏的</QUOTE>信息，这些信息不包含在状态变量中，
    它表明了在处理一连串延迟操作时<QUOTE>过程所处的位置</QUOTE>。
    链越长，必须维护的信息就越多。<FOOTNOTE>当我们在第<REF NAME="chap:reg"></REF>章讨论
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>在寄存器机上的实现时，我们将看到任何迭代过程都可以“通过硬件”实现为具有一组固定寄存器且无辅助内存的机器。
    对比之下，实现递归过程需要使用一种称为<INDEX>栈</INDEX><EM>栈</EM>的辅助数据结构的机器。</FOOTNOTE>
    <INDEX><SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>应用的替换模型<SUBINDEX>过程形态</SUBINDEX></INDEX>
  </TEXT> 

   <TEXT>
    在对比迭代和递归时，我们必须小心不要将<INDEX>递归的<SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE><SUBINDEX>递归过程vs.</SUBINDEX></INDEX>
    <INDEX>递归过程<SUBINDEX>递归的<SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> vs.</SUBINDEX></INDEX>
    递归<EM>过程</EM>的概念，与递归的<SPLITINLINE><SCHEME>过程</SCHEME><JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE>的概念相混淆。
    当我们描述一个<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>为递归时，我们指的是语法上的事实，即该<SPLITINLINE>
      <SCHEME>过程定义</SCHEME>
      <JAVASCRIPT>函数声明</JAVASCRIPT>
    </SPLITINLINE>（无论是直接还是间接）引用了该<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>本身。但当我们描述一个过程遵循某种模式，比如线性递归时，我们讲的是过程如何演变，而不是<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>如何被书写的语法。  
    说一个递归的<SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>，例如<SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>产生的是一个迭代过程，可能让人感到不安。然而，该过程实际上是迭代的：它的状态完全由三个状态变量捕获，且解释器执行该过程时仅需跟踪三个<SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE>。
  </TEXT> 

  <TEXT> 
    过程和
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    区别可能令人困惑的一个原因是，大多数常用语言的实现
    <SPLITINLINE>
      <SCHEME>
        （包括
        <INDEX>Ada<SUBINDEX>递归过程</SUBINDEX></INDEX>
        <INDEX>Pascal<SUBINDEX>递归过程</SUBINDEX></INDEX>
        <INDEX>C<SUBINDEX>递归过程</SUBINDEX></INDEX>
        Ada、Pascal 和 C）
      </SCHEME>
      <JAVASCRIPT>
        （包括
        <INDEX>C<SUBINDEX>递归函数</SUBINDEX></INDEX>
        C，
        <INDEX>Java，递归函数</INDEX>
        Java，以及
        <INDEX>Python，递归函数</INDEX>
        Python）
      </JAVASCRIPT>
    </SPLITINLINE>
    都是这样设计的：解释任何递归的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    会消耗随着
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    调用次数而增长的内存，尽管所描述的过程原则上是迭代的。
    因此，这些语言只能通过借助专用的
    <INDEX>循环结构</INDEX>
    <QUOTE>循环结构</QUOTE>来描述迭代过程，例如
<LATEXINLINE>$\texttt{do}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{repeat}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{until}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{for}$</LATEXINLINE><LATEXINLINE>$\texttt{while}$</LATEXINLINE>。
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    的实现我们将在第<SPACE></SPACE>章中考虑<REF NAME="chap:reg"></REF>不具有这个缺陷。它将以常量空间执行迭代过程，即使迭代过程是由递归
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
	具有此特性的实现称为
	<INDEX>尾递归</INDEX>
	<EM>尾递归的</EM>。使用尾递归实现，
	迭代可以使用普通的过程调用机制
	<INDEX>迭代过程<SUBINDEX>由过程调用实现</SUBINDEX></INDEX>
	来表达，因此特殊的迭代结构仅作为
	<INDEX>语法糖<SUBINDEX>循环结构作为</SUBINDEX></INDEX>
	语法糖而有用。<FOOTNOTE>尾递归长期以来一直被认为是编译器的优化技巧。尾递归的连贯语义基础由
	<INDEX>休伊特, 卡尔 艾迪</INDEX>
	卡尔·休伊特<CITATION>Hewitt (1977)</CITATION>提供，他在
	<INDEX>消息传递<SUBINDEX>尾递归和</SUBINDEX></INDEX>
	我们将在第<SPACE></SPACE><REF NAME="chap:state"></REF>章讨论的
	<QUOTE>消息传递</QUOTE>计算模型中解释了它。受此启发，杰拉尔德·杰伊·萨斯曼
	和
	<INDEX>斯蒂尔, 盖·刘易斯 小</INDEX>
	盖·刘易斯·斯蒂尔 小（参见<CITATION>Steele 1975</CITATION>）
	构造了一个用于 Scheme 的尾递归解释器。斯蒂尔后来展示了尾递归是编译过程调用的自然结果
	<INDEX>萨斯曼, 杰拉尔德·杰伊</INDEX>
	(<CITATION>Steele 1977</CITATION>)。
	Scheme 的 IEEE 标准要求 Scheme 实现
	<INDEX>尾递归<SUBINDEX><ORDER>Scheme</ORDER>中</SUBINDEX></INDEX>
	必须是尾递归的。</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
	具有此特性的实现称为
	<INDEX>尾递归</INDEX>
	<EM>尾递归的</EM>。<FOOTNOTE>尾递归长期以来一直被认为是编译器的优化技巧。尾递归的连贯语义基础由
	<INDEX>休伊特, 卡尔 艾迪</INDEX>
	卡尔·休伊特 (1977)，他在
	<INDEX>消息传递<SUBINDEX>尾递归和</SUBINDEX></INDEX>
	我们将在第<SPACE></SPACE><REF NAME="chap:state"></REF>章讨论的
	<QUOTE>消息传递</QUOTE>计算模型中解释了它。受此启发，杰拉尔德·杰伊·萨斯曼
	和
	<INDEX>斯蒂尔, 盖·刘易斯 小</INDEX>
	盖·刘易斯·斯蒂尔 小（参见<CITATION>Steele 1975</CITATION>）
	构造了一个用于 Scheme 的尾递归解释器。斯蒂尔后来展示了尾递归是编译函数调用的自然结果
	<INDEX>萨斯曼, 杰拉尔德·杰伊</INDEX>
	(<CITATION>Steele 1977</CITATION>)。
	Scheme 的 IEEE 标准要求 Scheme 实现
	<INDEX>尾递归<SUBINDEX><ORDER>Scheme</ORDER>中</SUBINDEX></INDEX>
	<INDEX>尾递归<SUBINDEX><ORDER>JavaScript</ORDER>中</SUBINDEX></INDEX>
	<INDEX>Scheme<SUBINDEX>中的尾递归</SUBINDEX></INDEX>
	<INDEX>JavaScript<SUBINDEX>中的尾递归</SUBINDEX></INDEX>
	必须是尾递归的。ECMA 标准随后在 ECMAScript 2015 (<CITATION>ECMA 2015</CITATION>)中也采纳了这一点。但请注意，截至本文撰写时（2021 年），大多数 JavaScript 实现
	并未遵守此标准中关于尾递归的规定。</FOOTNOTE>
	使用尾递归实现，
	<INDEX>迭代过程<SUBINDEX>由函数调用实现</SUBINDEX></INDEX>
	迭代可以使用普通的函数调用机制表达，因此特殊的迭代结构仅作为
	<INDEX>语法糖<SUBINDEX>循环结构作为</SUBINDEX></INDEX>
	语法糖而有用。<FOOTNOTE>练习<SPACE></SPACE><REF NAME="ex:while_loop"></REF>探讨了 JavaScript 的 while 循环作为生成迭代过程的函数的语法糖。
	完整语言 JavaScript，像其他传统语言一样，具有大量的语法形式，
	所有这些都可以在 Lisp 语言中更统一地表达。这一点，加上这些结构通常涉及分号，其放置规则有时不明显，
	促使艾伦·珀利斯戏言：<QUOTE>语法糖导致分号癌症。</QUOTE>
	<INDEX>语法糖</INDEX>
	<INDEX>珀利斯, 艾伦·J.<SUBINDEX>的戏言</SUBINDEX></INDEX>
	<INDEX>分号 (<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>癌症</SUBINDEX></INDEX>
      </FOOTNOTE>
      </JAVASCRIPT>
    </SPLIT>
    <INDEX>迭代过程<SUBINDEX>递归过程与</SUBINDEX></INDEX>
    <INDEX>递归过程<SUBINDEX>迭代过程与</SUBINDEX></INDEX>
   </TEXT>

   
  <EXERCISE>
    <LABEL NAME="ex:addition-procedures"></LABEL>
    以下两个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    都定义了一种利用
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>inc</SCHEMEINLINE>（将其参数加 1）和 <SCHEMEINLINE>dec</SCHEMEINLINE>（将其参数减 1）来对两个正整数求和的方法。
    <DO_BREAK_PAGE></DO_BREAK_PAGE>
    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>inc_dec_definition</NAME>
      <SCHEME>
(define (inc x)
  (- x -1))
(define (dec x)
  (- x 1))
      </SCHEME>
      <JAVASCRIPT>
function inc(x) {
    return x + 1;
}
function dec(x) {
    return x - 1;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>plus_example</NAME>
      <SCHEME>
(+ 4 5)
      </SCHEME>
      <JAVASCRIPT>
plus(4, 5);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <REQUIRES>inc_dec_definition</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <EXAMPLE>plus_example</EXAMPLE>
      <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))
      </SCHEME>
      <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : inc(plus(dec(a), b)); 
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <REQUIRES>inc_dec_definition</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <EXAMPLE>plus_example</EXAMPLE>
      <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
      </SCHEME>
      <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : plus(dec(a), inc(b));
}
      </JAVASCRIPT>
    </SNIPPET>

    使用替换模型，说明每个
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    在计算
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ 4 5)</SCHEMEINLINE>时产生的过程。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>plus(4, 5);</JAVASCRIPTINLINE>时产生的过程。</JAVASCRIPT>
    </SPLITINLINE>
    这些过程是迭代的还是递归的？

    <SOLUTION>
      <SPLIT>
	<JAVASCRIPT>
	  第一个函数产生的过程是递归的。
          <SNIPPET PAGE="36" EVAL="no">
	    <JAVASCRIPT>
plus(4, 5)
4 === 0 ? 5 : inc(plus(dec(4), 5))
inc(plus(dec(4), 5))
...
inc(plus(3, 5))
...
inc(inc(plus(2, 5)))
...
inc(inc(inc(plus(1, 5))))
...
inc(inc(inc(inc(plus(0, 5)))))
inc(inc(inc(inc( 0 === 0 ? 5 : inc(plus(dec(0), 5))))))
inc(inc(inc(inc( 5 ))))
inc(inc(inc( 6 )))
inc(inc( 7 ))
inc( 8 )
9
	    </JAVASCRIPT>
	  </SNIPPET>
	  第二个函数产生的过程是迭代的。
          <SNIPPET PAGE="36" EVAL="no">
	    <JAVASCRIPT>
plus(4, 5)
4 === 0 ? 5 : plus(dec(4), inc(5))
plus(dec(4), inc(5))
...
plus(3, 6)
...
plus(2, 7)
...
plus(1, 8)
...
plus(0, 9)
0 === 0 ? 9 : plus(dec(0), inc(9))
9
	    </JAVASCRIPT>
	  </SNIPPET>
	</JAVASCRIPT>
      </SPLIT>
    </SOLUTION>
  </EXERCISE> 


   
  <EXERCISE>
    以下
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    计算一种数学函数，称为
    <INDEX>阿克曼<APOS></APOS>函数</INDEX>
    <INDEX>函数（数学）<SUBINDEX>阿克曼<APOS></APOS>函数</SUBINDEX></INDEX>
    阿克曼<APOS></APOS>函数。

    <SNIPPET PAGE="36">
      <NAME>ackermann_definition</NAME>
      <EXAMPLE>ackermann_example</EXAMPLE>
      <SCHEME>
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
      </SCHEME>
      <JAVASCRIPT>
function A(x, y) {
    return y === 0
           ? 0
           : x === 0
           ? 2 * y
           : y === 1
           ? 2
           : A(x - 1, A(x, y - 1));
}
      </JAVASCRIPT>
    </SNIPPET>

    以下
    <SPLITINLINE>
      <SCHEME>表达式</SCHEME>
      <JAVASCRIPT>语句</JAVASCRIPT>
    </SPLITINLINE>
    的值是多少？

    <SNIPPET PAGE="36">
      <NAME>ackermann_example</NAME>
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>1024</EXPECTED>
      <SCHEME>
(A 1 10)
      </SCHEME>
      <JAVASCRIPT>
A(1, 10);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36">
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>65536</EXPECTED>
      <SCHEME>
(A 2 4)
      </SCHEME>
      <JAVASCRIPT>
A(2, 4);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36">
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>65536</EXPECTED>
      <SCHEME>
(A 3 3)
      </SCHEME>
      <JAVASCRIPT>
A(3, 3);
      </JAVASCRIPT>
    </SNIPPET>

    考虑以下
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    其中 <SCHEMEINLINE>A</SCHEMEINLINE> 是上面定义的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>：
    <SNIPPET PAGE="36">
      <NAME>fghk_definition</NAME>
      <EXAMPLE>fghk_example</EXAMPLE>
      <REQUIRES>ackermann_definition</REQUIRES>
      <SCHEME>
(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))
      </SCHEME>
      <JAVASCRIPT>
function f(n) {
    return A(0, n);
}
function g(n) {
    return A(1, n);
}
function h(n) {
    return A(2, n);
}
function k(n) {
   return 5 * n * n;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>fghk_example</NAME>
      <EXPECTED>80</EXPECTED>
      <REQUIRES>fghk_definition</REQUIRES>
      <SCHEME>
(k 4)
      </SCHEME>
      <JAVASCRIPT>
k(4);
      </JAVASCRIPT>
    </SNIPPET>
    请简明地用数学定义描述
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>f</SCHEMEINLINE>、<SCHEMEINLINE>g</SCHEMEINLINE> 和
    <SCHEMEINLINE>h</SCHEMEINLINE>
    对正整数 <LATEXINLINE>$n$</LATEXINLINE> 计算的函数。例如，
    <LATEXINLINE>$k(n)$</LATEXINLINE> 计算
    <LATEXINLINE>$5n^2$</LATEXINLINE>。

    <SOLUTION>
      函数 <LATEXINLINE>$f(n)$</LATEXINLINE> 计算
      <LATEXINLINE>$2 n$</LATEXINLINE>，
      函数 <LATEXINLINE>$g(n)$</LATEXINLINE> 计算
      <LATEXINLINE>$2^n$</LATEXINLINE>，
      函数 <LATEXINLINE>$h(n)$</LATEXINLINE> 计算
      <LATEXINLINE>$2^{2^{\cdot^{\cdot^{\cdot^2}}}}$</LATEXINLINE>，
      其中指数塔中 2 的个数为
      <LATEXINLINE>$n$</LATEXINLINE>。
    </SOLUTION>
    <LABEL NAME="ex:1_10"></LABEL>
  </EXERCISE> 


   <DO_BREAK_PAGE></DO_BREAK_PAGE> 
</SUBSECTION>
