<SUBSECTION>
  <NAME>
    Is Logic Programming Mathematical Logic?
  </NAME>

  <LABEL NAME="sec:math-logic"/>

  <INDEX>query language<SUBINDEX>mathematical logic vs.<OPEN/></SUBINDEX></INDEX>
  <INDEX>logic programming<SUBINDEX>mathematical logic vs.<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    The means of combination used in the query language may at first seem
    identical to the operations <SCHEMEINLINE>and</SCHEMEINLINE>,
    <SCHEMEINLINE>or</SCHEMEINLINE>, and <SCHEMEINLINE>not</SCHEMEINLINE> of
    mathematical logic, and the application of query-language rules is in
    fact accomplished through a legitimate method of
    <INDEX>inference, method of</INDEX>
    inference.<FOOTNOTE>That a particular method of inference is
    legitimate is not a trivial assertion.  One must prove that if one
    starts with true premises, only true conclusions can be derived.  The
    method of inference represented by rule applications is 
    <INDEX><ORDER>modus</ORDER><EM>modus ponens</EM></INDEX>
    <EM>modus ponens</EM>,
    the familiar method of inference that says that if <EM>A</EM> is
    true and <EM>A implies B</EM> is true, then we may conclude that <EM>B</EM>
    is true.</FOOTNOTE> This identification of the query language with
    mathematical logic is not really valid, though, because the query language
    provides a 
    <INDEX>control structure</INDEX>
    <EM>control structure</EM> that interprets the logical statements
    procedurally.  We can often take advantage of this control structure.
    For example, to find all of the supervisors of programmers we could
    formulate a query in either of two logically equivalent forms:
    <SNIPPET EVAL="no">
      <SCHEME>
(and (job ?x (computer programmer))
     (supervisor ?x ?y))
      </SCHEME>
      <JAVASCRIPT>
and(job($x, list("computer", "programmer")),
    supervisor($x, $y))
      </JAVASCRIPT>
    </SNIPPET>
    or
    <SNIPPET EVAL="no">
      <SCHEME>
(and (supervisor ?x ?y)
     (job ?x (computer programmer)))
      </SCHEME>
      <JAVASCRIPT>
and(supervisor($x, $y),
    job($x, list("computer", "programmer")))
      </JAVASCRIPT>
    </SNIPPET>
    If a company has
    <INDEX>bureaucracy</INDEX>
    many more supervisors than programmers,
    it is better to use the first form rather than the second,
    because the data base must be scanned for each intermediate result
    (frame) produced by the first clause of the <SCHEMEINLINE>and</SCHEMEINLINE>.
  </TEXT>

  <SHORT_PAGE lines="2"/>
  <TEXT>
    The aim of logic programming is to provide the programmer with
    techniques for decomposing a computational problem into two separate
    problems:
    <INDEX>declarative vs.<SPACE/>imperative knowledge<SUBINDEX>logic programming and</SUBINDEX></INDEX>
    <INDEX>imperative vs.<SPACE/>declarative knowledge<SUBINDEX>logic programming and</SUBINDEX></INDEX>
    <QUOTE>what</QUOTE> is to be computed, and <QUOTE>how</QUOTE> this
    should be computed.  This is accomplished by selecting a subset of the
    statements of mathematical logic that is powerful enough to be able to
    describe anything one might want to compute, yet weak enough to have a
    controllable procedural interpretation.  The intention here is that,
    on the one hand, a program specified in a logic programming language
    should be an effective program that can be carried out by a computer.
    Control (<QUOTE>how</QUOTE> to compute) is effected by using the order of
    evaluation of the language.  We should be able to arrange the order of
    clauses and the order of subgoals within each clause so that the
    computation is done in an order deemed to be effective and efficient.
    At the same time, we should be able to view the result of the
    computation (<QUOTE>what</QUOTE> to compute) as a simple consequence of the
    laws of logic.
  </TEXT>

  <TEXT>
    Our query language can be regarded as just such a procedurally
    interpretable subset of mathematical logic.  An assertion represents a
    simple fact (an atomic proposition).  A rule represents the
    implication that the rule conclusion holds for those cases where the
    rule body holds.  A rule has a natural procedural interpretation: To
    establish the conclusion of the rule, establish the body of the rule.
    Rules, therefore, specify computations.  However, because rules can
    also be regarded as statements of mathematical logic, we can justify any
    <QUOTE>inference</QUOTE> accomplished by a logic program by asserting that
    the same result could be obtained by working entirely within
    mathematical logic.<FOOTNOTE>We must qualify this statement by
    agreeing that, in speaking of the <QUOTE>inference</QUOTE> accomplished
    by a logic program, we assume that the computation terminates.
    Unfortunately, even this qualified statement is false for our
    implementation of the query language (and also false for programs in
    Prolog and most other current logic programming languages) because of
    our use of <SCHEMEINLINE>not</SCHEMEINLINE> and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lisp-value</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>javascript_predicate</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    As we will describe below, the <SCHEMEINLINE>not</SCHEMEINLINE> implemented
    in the query language is not always consistent with the
    <SCHEMEINLINE>not</SCHEMEINLINE> of mathematical logic, and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lisp-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>javascript_predicate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    introduces additional complications.  We could implement a language
    consistent with mathematical logic by simply removing
    <SCHEMEINLINE>not</SCHEMEINLINE> and
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lisp-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>javascript_predicate</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    from the language and agreeing to write programs using only simple queries,
    <SCHEMEINLINE>and</SCHEMEINLINE>, and <SCHEMEINLINE>or</SCHEMEINLINE>.
    However, this would greatly restrict the expressive power of the language.
    One of the major concerns of research in logic programming was to find ways
    to achieve more consistency with mathematical logic without unduly
    sacrificing expressive power.</FOOTNOTE>
  </TEXT>

  <SUBHEADING>
    <NAME>Infinite loops</NAME>
  </SUBHEADING>

  <INDEX>query interpreter<SUBINDEX>infinite loops<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    A consequence of the procedural interpretation of logic programs is
    that it is possible to construct hopelessly inefficient programs for
    solving certain problems.  An extreme case of inefficiency occurs when
    the system falls into infinite loops in making deductions.  As a
    simple example, suppose we are setting up a data base of famous
    marriages, including
    <SNIPPET EVAL="no">
      <INDEX>Mouse, Minnie and Mickey</INDEX>
      <SCHEME>
(assert! (married Minnie Mickey))
      </SCHEME>
      <JAVASCRIPT>
assert(married("Minnie", "Mickey"))
      </JAVASCRIPT>
    </SNIPPET>
    If we now ask
    <SNIPPET EVAL="no">
      <SCHEME>
(married Mickey ?who)
      </SCHEME>
      <JAVASCRIPT>
married("Mickey", $who)
      </JAVASCRIPT>
    </SNIPPET>
    we will get no response, because the system doesn<APOS/>t know that if
    <LATEXINLINE>$A$</LATEXINLINE> is married to <LATEXINLINE>$B$</LATEXINLINE>,
    then <LATEXINLINE>$B$</LATEXINLINE> is married to
    <LATEXINLINE>$A$</LATEXINLINE>.  So we assert the rule
    <SNIPPET EVAL="no">
      <SCHEME>
(assert! (rule (married ?x ?y)
         (married ?y ?x)))
      </SCHEME>
      <JAVASCRIPT>
assert(rule(married($x, $y), 
            married($y, $x)))
      </JAVASCRIPT>
    </SNIPPET>
    and again query
    <SNIPPET EVAL="no">
      <SCHEME>
(married Mickey ?who)
      </SCHEME>
      <JAVASCRIPT>
married("Mickey", $who)
      </JAVASCRIPT>
    </SNIPPET>
    Unfortunately, this will drive the system into an infinite loop, as
    follows:
    <UL>
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    The system finds that the <SCHEMEINLINE>married</SCHEMEINLINE> rule is
	    applicable; that is, the rule conclusion
	    <SCHEMEINLINE>(married ?x ?y)</SCHEMEINLINE>
	    successfully unifies with the query pattern
	    <SCHEMEINLINE>(married Mickey ?who)</SCHEMEINLINE>
	    to produce a frame in which
	  </SCHEME>
	  <JAVASCRIPT>
	    The system finds that the <SCHEMEINLINE>married</SCHEMEINLINE> rule is
	    applicable; that is, the rule conclusion
	    <JAVASCRIPTINLINE>married($x, $y)</JAVASCRIPTINLINE>
	    unifies with the query pattern
	    <JAVASCRIPTINLINE>married("Mickey", $who)</JAVASCRIPTINLINE>
	    to produce a frame in which
	  </JAVASCRIPT>
	</SPLITINLINE>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>?x</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>$x</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	is bound to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>Mickey</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>"Mickey"</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	and
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>?y</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>$y</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>      
	is bound to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>?who</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>$who</JAVASCRIPTINLINE>.</JAVASCRIPT>
	</SPLITINLINE>
	So the interpreter proceeds to evaluate the rule body
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(married ?y ?x)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>married($y, $x)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	in this frame<EMDASH/>in effect, to process the query
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(married ?who Mickey)</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>married($who, "Mickey")</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>
	    One answer appears directly as an assertion in the data
	    base:
	    <SCHEMEINLINE>(married Minnie Mickey)</SCHEMEINLINE>.
	  </SCHEME>
	  <JAVASCRIPT>
	    One answer,
	    <JAVASCRIPTINLINE>married("Minnie", "Mickey")</JAVASCRIPTINLINE>,
	    appears directly as an assertion in the data base.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	The <SCHEMEINLINE>married</SCHEMEINLINE> rule is also applicable, so the
	interpreter again evaluates the rule body, which this time is equivalent
	to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(married Mickey ?who)</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>married("Mickey", $who)</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
    </UL>
    The system is now in an infinite loop.  Indeed, whether the system
    will find the simple answer
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(married Minnie Mickey)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>married("Minnie", "Mickey")</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    before it goes into the loop depends on implementation details concerning the
    order in which the system checks the items in the data base.  This is a very
    simple example of the kinds of loops that can occur. Collections of
    interrelated rules can lead to loops that are much harder to anticipate, and
    the appearance of a loop can depend on the order of clauses in an
    <SCHEMEINLINE>and</SCHEMEINLINE> (see
    exercise<SPACE/><REF NAME="ex:query-simple-loop"/>) or on low-level details
    concerning the order in which the system processes queries.<FOOTNOTE>This is
    not a problem of the logic but one of the procedural interpretation of the
    logic provided by our interpreter. We could write an interpreter that would
    not fall into a loop here. For example, we could enumerate all the proofs
    derivable from our assertions and our rules in a breadth-first rather than a
    depth-first order.  However, such a system makes it more difficult to take
    advantage of the order of deductions in our programs.  One attempt to
    build sophisticated control into such a program is described in
    <INDEX>de Kleer, Johan</INDEX>
    <CITATION>de Kleer et al.<SPACE/>1977</CITATION>.  
    Another technique, which does not lead to such serious control problems, is
    to put in special knowledge, such as detectors for particular kinds of loops
    (exercise<SPACE/><REF NAME="ex:query-loop-detector"/>).  However, there can
    be no general scheme for reliably preventing a system from going down
    infinite paths in performing deductions.  Imagine a diabolical rule of
    the form <QUOTE>To show <LATEXINLINE>$P(x)$</LATEXINLINE> is true, show that
    <LATEXINLINE>$P(f(x))$</LATEXINLINE> is true,</QUOTE> for some suitably
    chosen function <LATEXINLINE>$f$</LATEXINLINE>.</FOOTNOTE>
  </TEXT>

  <INDEX>query interpreter<SUBINDEX>infinite loops<CLOSE/></SUBINDEX></INDEX>
  
  <SUBHEADING>
    <NAME>Problems with <SCHEMEINLINE>not</SCHEMEINLINE></NAME>
  </SUBHEADING>

  <INDEX>query interpreter<SUBINDEX>problems with <SCHEMEINLINE>not</SCHEMEINLINE> and <SCHEMEINLINE>javascript_predicate</SCHEMEINLINE><OPEN/></SUBINDEX></INDEX>

  <TEXT>
    Another quirk in the query system concerns
    <INDEX><USE>not</USE> (query language)</INDEX>
    <SCHEMEINLINE>not</SCHEMEINLINE>.
    Given the data base of
    section<SPACE/><REF NAME="sec:deductive-info-retrieval"/>, consider the
    following two queries:
    <SNIPPET EVAL="no">
      <SCHEME>
(and (supervisor ?x ?y)
     (not (job ?x (computer programmer))))

(and (not (job ?x (computer programmer)))
     (supervisor ?x ?y))
      </SCHEME>
      <JAVASCRIPT>
and(supervisor($x, $y),
    not(job($x, list("computer", "programmer"))))

and(not(job($x, list("computer", "programmer"))),
    supervisor($x, $y))
      </JAVASCRIPT>
    </SNIPPET>
    These two queries do not produce the same result.  The first query
    begins by finding all entries in the data base that match
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(supervisor ?x ?y)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>supervisor($x, $y)</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and then filters the resulting frames by removing the ones in which the
    value of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>?x</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>$x</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    satisfies
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(job ?x (computer programmer))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
  <JAVASCRIPTINLINE>job($x,@list("computer", "programmer"))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The second query begins by filtering the 
    incoming frames to remove those that can satisfy
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(job ?x (computer programmer))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>job($x, list("computer",@"programmer"))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Since the only incoming frame is empty, it checks the data base
    <SPLITINLINE>
      <SCHEME>
        to see if there are any 
      </SCHEME>
      <JAVASCRIPT>
        for
      </JAVASCRIPT>
    </SPLITINLINE>
    patterns that satisfy
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(job ?x (computer programmer))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>job($x, list("computer", "programmer"))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Since there generally are entries of this form, the
    <SCHEMEINLINE>not</SCHEMEINLINE> clause filters out the empty frame and
    returns an empty stream of frames.  Consequently, the entire compound query
    returns an empty stream.
  </TEXT>

  <TEXT>
    The trouble is that our implementation of <SCHEMEINLINE>not</SCHEMEINLINE>
    really is meant to serve as a filter on values for the variables.  If a
    <SCHEMEINLINE>not</SCHEMEINLINE> clause is processed with a frame in which
    some of the variables remain unbound (as does
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>?x</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>$x</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in the example above), the system will produce unexpected results. Similar
    problems occur with the use of
    <INDEX><USE>javascript_predicate</USE> (query language)</INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lisp-value</SCHEMEINLINE><EMDASH/>the</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>javascript_@predicate</JAVASCRIPTINLINE><EMDASH/>the
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	Lisp
	predicate can<APOS/>t work if some of its arguments are unbound.
      </SCHEME>
      <JAVASCRIPT>
	JavaScript
	predicate can<APOS/>t work if some of its variables are unbound.
      </JAVASCRIPT>
    </SPLITINLINE>
    See exercise<SPACE/><REF NAME="ex:not-query-filter"/>.
  </TEXT>

  <TEXT>
    There is also a much more serious way in which the
    <SCHEMEINLINE>not</SCHEMEINLINE> of the query language differs from the
    <SCHEMEINLINE>not</SCHEMEINLINE> of mathematical logic.  In logic, we
    interpret the statement <QUOTE>not<SPACE/><LATEXINLINE>$P$</LATEXINLINE></QUOTE> to
    mean that <LATEXINLINE>$P$</LATEXINLINE> is not true.  In the query system,
    however, <QUOTE>not <LATEXINLINE>$P$</LATEXINLINE></QUOTE> means that
    <LATEXINLINE>$P$</LATEXINLINE> is not deducible from the knowledge in the
    data base.  For example, given the personnel data base of
    section<SPACE/><REF NAME="sec:deductive-info-retrieval"/>, the system would
    happily deduce all sorts of <SCHEMEINLINE>not</SCHEMEINLINE> statements,
    such as that Ben Bitdiddle is not a baseball fan, that it is not raining
    outside, and that <LATEXINLINE>$2 + 2$</LATEXINLINE>
    is not 4.<FOOTNOTE>Consider the query
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(not (baseball-fan (Bitdiddle Ben)))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>not(baseball_fan(list("Bitdiddle", "Ben")))</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    The system finds that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(baseball-fan (Bitdiddle Ben))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>baseball_fan(list("Bitdiddle", "Ben"))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is not in the data base, so the empty frame does not satisfy the pattern and
    is not filtered out of the initial stream of frames.  The result of the
    query is thus the empty frame, which is used to instantiate the input query
    to produce
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(not (baseball-fan (Bitdiddle Ben)))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>not(baseball_fan(list("Bitdiddle", "Ben")))</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.</FOOTNOTE> In other
    words, the <SCHEMEINLINE>not</SCHEMEINLINE> of logic programming languages
    reflects the so-called 
    <INDEX>closed world assumption</INDEX>
    <EM>closed world assumption</EM> that all relevant information has been
    included in the data base.<FOOTNOTE>A discussion and justification of this
    treatment of <SCHEMEINLINE>not</SCHEMEINLINE> can be found in the article
    <INDEX>negation as failure</INDEX>
    <QUOTE>Negation as Failure</QUOTE> by
    <INDEX>Clark, Keith L.</INDEX>
    Clark (1978).</FOOTNOTE>
  </TEXT>
  <INDEX>query interpreter<SUBINDEX>problems with <SCHEMEINLINE>not</SCHEMEINLINE> and <SCHEMEINLINE>javascript_predicate</SCHEMEINLINE><CLOSE/></SUBINDEX></INDEX>
  
  <EXERCISE>
    Louis Reasoner mistakenly deletes the
    <INDEX><USE>outranked_by</USE> (rule)</INDEX>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>outranked-by</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>outranked_by</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    rule (section<SPACE/><REF NAME="sec:deductive-info-retrieval"/>) from the
    data base.  When he realizes this, he quickly reinstalls it.  Unfortunately,
    he makes a slight change in the rule, and types it in as
    <SNIPPET EVAL="no">
      <SCHEME>
(rule (outranked-by ?staff-person ?boss)
      (or (supervisor ?staff-person ?boss)
          (and (outranked-by ?middle-manager ?boss)
               (supervisor ?staff-person ?middle-manager))))
      </SCHEME>
      <JAVASCRIPT>
rule(outranked_by($staff_person, $boss),      
     or(supervisor($staff_person, $boss),
        and(outranked_by($middle_manager, $boss),
            supervisor($staff_person, $middle_manager))))
      </JAVASCRIPT>
    </SNIPPET>
    Just after Louis types this information into the system, DeWitt
    Aull comes by to find out who outranks Ben Bitdiddle. He issues
    the query
    <SNIPPET EVAL="no">
      <SCHEME>
(outranked-by (Bitdiddle Ben) ?who)
      </SCHEME>
      <JAVASCRIPT>
outanked_by(list("Bitdiddle", "Ben"), $who)
      </JAVASCRIPT>
    </SNIPPET>

    After answering, the system goes into an infinite loop.  Explain why.
    <LABEL NAME="ex:query-simple-loop"/>
  </EXERCISE>

  <EXERCISE>
    Cy D. Fect, looking forward to the day when he will rise in the
    organization, gives a query to find all the wheels (using the
    <INDEX><USE>wheel</USE> (rule)</INDEX>
    <SCHEMEINLINE>wheel</SCHEMEINLINE> rule of
    section<SPACE/><REF NAME="sec:deductive-info-retrieval"/>):
    <SNIPPET EVAL="no">
      <SCHEME>
(wheel ?who)
      </SCHEME>
      <JAVASCRIPT>
wheel($who)
      </JAVASCRIPT>
    </SNIPPET>
    To his surprise, the system responds
    <SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; Query results:
(wheel (Warbucks Oliver))
(wheel (Bitdiddle Ben))
(wheel (Warbucks Oliver))
(wheel (Warbucks Oliver))
(wheel (Warbucks Oliver))
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
Query results:
wheel(list("Warbucks", "Oliver"))
wheel(list("Bitdiddle", "Ben"))
wheel(list("Warbucks", "Oliver"))
wheel(list("Warbucks", "Oliver"))
wheel(list("Warbucks", "Oliver"))
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    Why is Oliver Warbucks listed four times?
    <LABEL NAME="ex:multiple-query"/>
  </EXERCISE>

  <EXERCISE>
    Ben has been
    <INDEX>query language<SUBINDEX>extensions to</SUBINDEX></INDEX>
    generalizing the query system to provide statistics about the
    company.  For example, to find the total salaries of all the computer
    programmers one will be able to say
    <SNIPPET EVAL="no">
      <SCHEME>
(sum ?amount
     (and (job ?x (computer programmer))
          (salary ?x ?amount)))
      </SCHEME>
      <JAVASCRIPT>
sum($amount,      
    and(job($x, list("computer", "programmer")),
        salary($x, $amount)))
      </JAVASCRIPT>
    </SNIPPET>
    In general, Ben<APOS/>s new system allows expressions of the form
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(accumulation-function variable
                       $\langle query$ $pattern\rangle$)
      </SCHEME>
      <JAVASCRIPT>
accumulation_function($variable$, 
                      $query$-$pattern$)
      </JAVASCRIPT>
    </SNIPPET>
    where
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>accumulation-function</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>accumulation_function</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    can be things like <SCHEMEINLINE>sum</SCHEMEINLINE>,
    <SCHEMEINLINE>average</SCHEMEINLINE>, or
    <SCHEMEINLINE>maximum</SCHEMEINLINE>.
    Ben reasons that it should be a cinch to implement this.  He will simply
    feed the query pattern to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>qeval</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate_query</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    This will produce a stream of frames.  He will then pass this stream through
    a mapping function that extracts the value of the designated variable from
    each frame in the stream and feed the resulting stream of values to the
    accumulation function.  Just as Ben completes the implementation and is
    about to try it out, Cy walks by, still puzzling over the
    <SCHEMEINLINE>wheel</SCHEMEINLINE> query result in
    exercise<SPACE/><REF NAME="ex:multiple-query"/>.  When Cy shows Ben the
    system<APOS/>s response, Ben groans, <QUOTE>Oh, no, my simple accumulation
    scheme won<APOS/>t work!</QUOTE>
    <P/>
    What has Ben just realized?  Outline a method he can use to salvage the
    situation.
    <LABEL NAME="ex:4_64"/>
  </EXERCISE>

  <EXERCISE>
    Devise a
    <INDEX>query interpreter<SUBINDEX>improvements to</SUBINDEX></INDEX>
    <INDEX>query interpreter<SUBINDEX>infinite loops</SUBINDEX></INDEX>
    way to install a loop detector in the query system so as to
    avoid the kinds of simple loops illustrated in the text and in
    exercise<SPACE/><REF NAME="ex:query-simple-loop"/>.  The general idea is
    that the system should maintain some sort of history of its current chain of
    deductions and should not begin processing a query that it is already
    working on.  Describe what kind of information (patterns and frames)
    is included in this history, and how the check should be made.  (After
    you study the details of the query-system implementation in
    section<SPACE/><REF NAME="sec:implementing-the-query-system"/>, you may
    want to modify the system to include your loop detector.)
    <LABEL NAME="ex:query-loop-detector"/>
  </EXERCISE>

  <DO_BREAK_PAGE/>
  <EXERCISE>
    Define rules to implement the
    <INDEX><USE>reverse</USE><SUBINDEX>rules</SUBINDEX></INDEX>
    <SCHEMEINLINE>reverse</SCHEMEINLINE> operation
    of exercise<SPACE/><REF NAME="ex:reverse"/>, which returns a list containing
    the same elements as a given list
	  in reverse order.
    (Hint: Use
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>append-to-form</SCHEMEINLINE>.)
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>append_to_form</JAVASCRIPTINLINE>.)
      </JAVASCRIPT>
    </SPLITINLINE>
    Can your rules answer both
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(reverse (1 2 3) ?x)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>the query
	<JAVASCRIPTINLINE>reverse(list(1, 2, 3), $x)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(reverse ?x (1 2 3))</SCHEMEINLINE>?</SCHEME>
    <JAVASCRIPT>the query <JAVASCRIPTINLINE>reverse($x, list(1, 2, 3))</JAVASCRIPTINLINE>?
    </JAVASCRIPT>
    </SPLITINLINE>
    <LABEL NAME="ex:4_66"/>
  </EXERCISE>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<LABEL NAME="ex:great-grandson_scheme"/>
	Beginning with the data base and the rules you formulated in
	exercise<SPACE/><REF NAME="ex:genesis"/>, devise a rule for adding
	<QUOTE>greats</QUOTE> to a grandson relationship. This should enable the
	system to deduce that Irad is the great-grandson of Adam, or that Jabal
	and Jubal are the great-great-great-great-great-grandsons of Adam.
	(Hint: Represent the fact about Irad, for example, as
	<SCHEMEINLINE>((great grandson) Adam Irad)</SCHEMEINLINE>.
	Write rules that determine if a list ends in the word
	<SCHEMEINLINE>grandson</SCHEMEINLINE>.
	Use this to express a rule that allows one to derive the relationship
	<SCHEMEINLINE>((great .  ?rel) ?x ?y)</SCHEMEINLINE>,
	where <SCHEMEINLINE>?rel</SCHEMEINLINE> is a list ending in
	<SCHEMEINLINE>grandson</SCHEMEINLINE>.)	Check your rules on queries such
	as <SCHEMEINLINE>((great grandson) ?g ?ggs)</SCHEMEINLINE> and
	<SCHEMEINLINE>(?relationship Adam Irad)</SCHEMEINLINE>.
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	<LABEL NAME="ex:great-grandson"/>
	Let us modify the data base and the rules of
	exercise<SPACE/><REF NAME="ex:genesis"/> to add 
	<QUOTE>great</QUOTE> to a grandson relationship. This should enable the
	system to deduce that Irad is the great-grandson of Adam, or that Jabal
	and Jubal are the great-great-great-great-great-grandsons of Adam.
	<OL>
	  <LI>
	    Change the assertions in the data base such that there is only one
	    kind of relationship information, namely
	    <JAVASCRIPTINLINE>related</JAVASCRIPTINLINE>. The first item
	    then describes the relationship. Thus, instead of
	    <JAVASCRIPTINLINE>son("Adam", "Cain")</JAVASCRIPTINLINE>, you would
	    write
	    <JAVASCRIPTINLINE>related("son", "Adam", "Cain")</JAVASCRIPTINLINE>.
	    Represent the fact about Irad, for example, as
	    <SNIPPET EVAL="no">
	      <JAVASCRIPT>
related(list("great", "grandson"), "Adam", "Irad")
	      </JAVASCRIPT>
	    </SNIPPET>
	  </LI>
	  <LI>
	    Write rules that determine if a list ends in the word
	    <JAVASCRIPTINLINE>"grandson"</JAVASCRIPTINLINE>.
	  </LI>
	  <LI>
	    Use this to express a rule that allows one to derive the relationship
	    <SNIPPET EVAL="no">
	      <JAVASCRIPT>
list(pair("great", $rel), $x, $y)
	      </JAVASCRIPT>
	    </SNIPPET>
	    where <JAVASCRIPTINLINE>$rel</JAVASCRIPTINLINE> is a list ending in
	    <JAVASCRIPTINLINE>"grandson"</JAVASCRIPTINLINE>.
	  </LI>
	  <LI>
	    Check your rules on the queries
	    <JAVASCRIPTINLINE>related(list("great", "grandson"), $g, $ggs)</JAVASCRIPTINLINE>
	    and
	    <JAVASCRIPTINLINE>related($relationship, "Adam", "Irad")</JAVASCRIPTINLINE>.
	  </LI>
	</OL>
	<COMMENT>
	  This exercise is a bit more verbose than the original, because of the
	  choice of using explicit predicate symbols rather than general lists,
	  see comment in the beginning of section 4.4.1. So the hint here is
	  to revert to a list representation that makes the relationship
	  explicit, and therefore programmable. This trick is used in the
	  implementation of HiLog, a logic programming language with first-class
	  predicates, see 
	  Chen, Weidong; Kifer, Michael; Warren, David S. 
	  (February 1993). <QUOTE>HiLog: A foundation for higher-order logic 
	  programming</QUOTE>. Journal of Logic Programming. 15 (3): 187–230.
	</COMMENT>
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>

  <INDEX>query language<SUBINDEX>mathematical logic vs.<CLOSE/></SUBINDEX></INDEX>
  <INDEX>logic programming<SUBINDEX>mathematical logic vs.<CLOSE/></SUBINDEX></INDEX>

</SUBSECTION>
