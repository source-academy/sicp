[{"id":"/sicpjs/2.2.1","tag":"TITLE","body":"2.2.1  \n    Representing Sequences"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n\n    One of the useful structures we can build with pairs is a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"sequence","tag":"#text"}]},{"body":"—an ordered collection of data objects.  There\n    are, of course, many ways to represent sequences in terms of pairs.  One\n    particularly straightforward representation is illustrated in\n    figure ","tag":"#text"},{"tag":"REF","body":"2.4","href":"/sicpjs/2.2.1#fig-2.4"},{"body":",\n      \n    where the sequence 1, 2, 3, 4 is represented as a chain of pairs.  The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of each pair is the\n    corresponding item in the chain, and the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the pair is the next pair in the chain.  The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the final pair signals the end of the\n    \n\tsequence,\n      \n    represented in box-and-pointer\n    diagrams as a diagonal line\n    \n    and in programs as\n    \n\tJavaScript's primitive value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":".\n      \n    The entire sequence is constructed by nested\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    operations:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsAcBDASwCcAKTAGlG1DrsNLJWtvvYePIGZWP-2jcgBZqAOwCuAGykBKebIDcQA","body":"pair(1, \n     pair(2, \n          pair(3, \n               pair(4, null)))); "}]},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-13.svg","id":"#fig-2.4","captionHref":"/sicpjs/2.2.1#fig-2.4","captionName":"Figure 2.4 ","captionBody":[{"body":"The sequence 1, 2, 3, 4 represented as a chain of pairs.\n\t  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Such a sequence of pairs, formed by nested\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":" applications,\n      \n    is called a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"list","tag":"#text"}]},{"body":", and\n    our JavaScript environment\n    provides a primitive called \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":" to help in constructing \n    lists.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.2.1#footnote-1"},{"body":"\n    The above sequence could be produced by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(1, 2, 3, 4)"},{"body":".\n      \n    In general, \n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nlist($a$$_{1}$, $a$$_{2}$, $\\ldots$, $a$$_{n}$)\n      "},{"body":"\n    is equivalent to\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\npair($a$$_{1}$, pair($a$$_{2}$, pair($\\ldots$, pair($a$$_{n}$, null)$\\ldots$)))\n      "},{"body":"\n        Our interpreter prints pairs using a textual representation of\n\tbox-and-pointer diagrams that we call ","tag":"#text"},{"tag":"EM","child":[{"body":"box notation","tag":"#text"}]},{"body":".\n        \n\tThe result of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(1, 2)"},{"body":"\n        is printed as ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[1, 2]"},{"body":", and\n\tthe data object in figure ","tag":"#text"},{"tag":"REF","body":"2.4","href":"/sicpjs/2.2.1#fig-2.4"},{"body":" \n        is printed as \n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[1, [2, [3, [4, null]]]]"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5c1Ok1YduvVUA","body":"const one_through_four = list(1, 2, 3, 4); "},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5c1Ok1YduvVUA","body":"one_through_four; ","output":"[1, [2, [3, [4, null]]]]"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We can think of \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    as selecting the first item in the list, and of \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    as selecting the sublist consisting of all but the first item.  Nested\n    applications of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    can be used to extract the second, third, and subsequent items in the\n    list.\n    The constructor \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    makes a list like the original one, but with an additional item at the\n    beginning.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5c9KgEMAJuOp0mrDt15qgA","body":"head(one_through_four); ","output":"1"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5cZAIYih46nSasO3XmqA","body":"tail(one_through_four); ","output":"[2, [3, [4, null]]]"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5c9KgEMAJuLJaRQ8dTpNWHbr2VqgA","body":"head(tail(one_through_four)); ","output":"2"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5cABwCGIxpIAMM6nSasO3XmqA","body":"pair(10, one_through_four); ","output":"[10, [1, [2, [3, [4, null]]]]]"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUYgUwH0yALAJwIFcBzemgM1cdAF5QAGwCW5ABSYANKhkBmGQBYAlAG5cABwCGIxuICsM6nSasO3XmqA","body":"pair(5, one_through_four); ","output":"[5, [1, [2, [3, [4, null]]]]]"},{"body":"\n        The value ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":", used to terminate\n\tthe chain of pairs, can be thought of as a sequence of no elements, the \n        ","tag":"#text"},{"tag":"EM","child":[{"body":"empty list","tag":"#text"}]},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/2.2.1#footnote-2"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n      Box notation is sometimes difficult to read. In this book, when we want to\n      indicate the list nature of a data structure, we will employ the\n      alternative\n      ","tag":"#text"},{"tag":"EM","child":[{"body":"list notation","tag":"#text"}]},{"body":": Whenever possible, list notation uses\n      applications\n      of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":" whose evaluation would result in the\n      desired structure. For example, instead of the box notation\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"output":"[1, [[2, 3], [[4, [5, null]], [6, null]]]]"},{"body":"\n      we write ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":false,"output":"list(1, [2, 3], list(4, 5), 6)"},{"body":"\n      in list notation.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/2.2.1#footnote-3"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"List operations","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    The use of pairs to represent sequences of elements as lists is accompanied\n    by conventional programming techniques for manipulating lists by\n    successively \n    \n\tusing ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":" to walk down the lists.\n      \n    For example, the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_ref"},{"body":"\n    takes as arguments a list and a number ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" and\n    returns the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th item of the list.  It is\n    customary to number the elements of the list beginning with 0.  The method\n    for computing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_ref"},{"body":"\n    is the following:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tFor ","tag":"#text"},{"body":"$n=0$","tag":"LATEX"},{"body":",\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_ref"},{"body":"\n\tshould return the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n\tof the list.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tOtherwise,\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_ref"},{"body":"\n\tshould return  the ","tag":"#text"},{"body":"$(n-1)$","tag":"LATEX"},{"body":"st item of the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tof the list.\n      ","tag":"#text"}]}]},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAbCgZzIH0AnAUzwAoKyOAtowA0oIgEpQAb2yg5oTmQJtatALwbQABlny98gPygAFhwCGAE178h43fr0Auek1aceZMxTrXBjcaK0ALSgmOIA3NgAvrgkNMygjACOBGacjKBqLszcmKIALKIAnKKYAGyiKACsEbgMzOxc3Mmp6aIAzBFAA","body":"function list_ref(items, n) {\n    return n === 0\n           ? head(items)\n           : list_ref(tail(items), n - 1);\n} "},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAbCgZzIH0AnAUzwAoKyOAtowA0oIgEpQAb2yg5oTmQJtatALwbQABlny98gPygAFhwCGAE178h43fr0Auek1aceZMxTrXBjcaK0ALSgmOIA3NgAvrgkNMygjACOBGacjKBqLszcmKIALKIAnKKYAGyiKACsEbgMzOxc3Mmp6aIAzBFAA","body":"const squares = list(1, 4, 9, 16, 25);\n\nlist_ref(squares, 3); ","output":"16"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Often we\n    \n\twalk down the whole list.\n      \n    To aid in this,\n    our JavaScript environment\n    includes a primitive\n    predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_null"},{"body":",\n    which tests whether its argument is the empty list.  The\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":", which returns the number of items in\n    a list, illustrates this typical pattern of use:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAbAUyIHMyALACgrIYFsBnAJSgA3tlATQAJwZkCU2hX4B9IgTp0uPAYPGT9kgPygADHoP6AXKEygA1PSatOZAIYVN3PkMEBubAC+uCQ0-GSgVAAmkfygALz0SmQcmAA0oADM6QCs6QDsfriMLOwcUTF+QA","body":"function length(items) {\n    return is_null(items)\n           ? 0\n           : 1 + length(tail(items));\n} "},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUAgEypNAF5QAbAS3IApMAaUAZh4CsPAOwBKANy4mAUyIBzMgAt21WhKA","body":"const odds = list(1, 3, 5, 7);\n\nlength(odds); ","output":"4"},{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":"function\n    implements a simple recursive plan. The reduction step is:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tThe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":" of any list is 1 plus the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":" of the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tof the list.\n      ","tag":"#text"}]}]},{"body":"\n    This is applied successively until we reach the base case:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tThe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":" of the empty list is 0.\n      ","tag":"#text"}]}]},{"body":"\n    We could also compute ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"length"},{"body":" in an iterative\n    style:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAbAUyIHMyALACgrIYFsBnAJSgA3tlATQhUpRr0mrNgH1uDAE4cAhgBpQJKsTLCxk06DUMyBNbQr8lRAnTpbB4sx8kB+PQaJl3Tw8ALnkWdhUeDTJNChdNQV19Q1AAalBMQQBuQNAAX1yLKxswxUj1Lh4BXQAGbOwC7H0ifjJQKgATDv5QAF56OzIOTF0AZl0AVl0AdnrsRnDOTu7soA","body":"function length(items) {\n    function length_iter(a, count) {\n        return is_null(a)\n               ? count\n               : length_iter(tail(a), count + 1);\n    }\n    return length_iter(items, 0);\n} "}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Another conventional programming technique is to \n    \n\tconstruct an answer list by adjoining elements to\n\tthe front of the list with\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n\twhile walking down a list using\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":",\n      \n    as in the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":", which takes two lists as arguments and\n    combines their elements to make a new list:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgBsKBnMzABpQPfigCUoAN7ZQc0ACdmZAgtp8A+kQJcu3PgPGz5J+QH4RBlMdMmAXKAZ0KCjgAtmdTqMPDGLdg4yZz0fTHFhHwlxAG5sAF9cEhp+UF4ARwI6JV5QAF5Lfg4hUAAWYQBOYUwANmEUAFZYpJSyUCo2NlyCn2LhAGZhBuEAdmbsf1ZODKyc4Q6u2KA","body":"append(squares, odds); ","output":"list(1, 4, 9, 16, 25, 1, 3, 5, 7)"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":11,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBDABwYFMiATACgBsKBnMzABpQPfigCUoAN7ZQc0ACdmZAgtp8A+kQJcu3PgPGz5J+QH4RBlMdMmAXKAZ0KCjgAtmdTqMPDGLdg4yZz0fTHFhHwlxAG5sAF9cEhp+UF4ARwI6JV5QAF5Lfg4hUAAWYQBOYUwANmEUAFZYpJSyUCo2NlyCn2LhAGZhBuEAdmbsf1ZODq7hDKyc2KA","body":"append(odds, squares); ","output":"list(1, 3, 5, 7, 1, 4, 9, 16, 25)"},{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":"\n    is also implemented using a recursive plan. To\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":" lists\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list2"},{"body":",\n    do the following:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tIf ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list1"},{"body":" is the empty list, then the\n      result is just ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list2"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tOtherwise, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"append"},{"body":" the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n\tof ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list1"},{"body":" and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list2"},{"body":", and\n\tadjoin\n\tthe\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n\tof ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list1"},{"body":"\n\t    to the result:\n\t  ","tag":"#text"}]}]},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUEgRwFcBDAJwFMTQBeUAGwEtyAKTABpQAFmEBOYZgBswlAFYAlAG5chUhQIATLaw49+Q0AGZh84QHYVuAGY0ieMt2Kg6ABzdMiWvgbJG-FEVQAG9sUAjQZjIaBiJQXgB9IhpOTl9ef0VwyNzIgH4uTJQcvNyALlA3Om4GPgALJjofP0xFYXdPbz4yGvTW9qLyIOsAX1xOrx9qemYSYW1dFSA","body":"function append(list1, list2) {\n    return is_null(list1)\n           ? list2\n           : pair(head(list1), append(tail(list1), list2));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.17","id":"#ex-2.17","child":[{"body":" \n    Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"last_pair"},{"body":"\n    that returns the list that contains only the last element of a given\n    (nonempty) list:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslADYCGAzgC4D6ADkQJYBOoZA9qAEYCmoA5rQG4cAduwCeocgFcAJkLK5i5anXoAKArXIqUAZgA0oAOwp9mACwBOfdtMBKGwG4gA","body":"last_pair(list(23, 72, 149, 34)); ","output":"list(34)"}],"solution":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslADYCGAzgC4D6ADkQJYBOoZA9qAEYCmoA5rQG4cAduwCeocgFcAJkLK4AZhMEBjMrWbDi5anXoAKWmQ4BbEgEpQAb2yhboehzIT6w2iQqCJBAnrJ0fhibmZjZ2YXYA-KCBpqHhYQBchKSUNAy+-gZGpmZmANzYAL64Wqm6egRuZHooAMwANKAA7CiNmAAsAJyNte25eUA","body":"function last_pair(items) {\n    return is_null(tail(items))\n           ? items\n           : last_pair(tail(items));\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.18","id":"#ex-2.18","child":[{"body":"\n    Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"reverse"},{"body":" that takes a list as argument and\n    returns a list of the same elements in reverse order:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsCcBTANwLwGcCAKAGwEsyAXSzAGlABY2BONzANjYoArAEoRAbiA","body":"reverse(list(1, 4, 9, 16, 25)); ","output":"list(25, 16, 9, 4, 1)"}],"solution":[{"body":"\n      Naive reverse (what is the run time?):\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAnAUwDcG6BnBgCgrIYFs2ASlABvbKAn0GZAnVoU2AfSIEANqu68Bg8ZL2SA-KBXrd+vQC5QAQwAOthkQAmnRi3Zcy1ihp78hggA02ACQ5ua23nScABYM1i5+2oHGaqqCggDc2AC+uG6sHJyqCmScmCkALCkArCkAnCmYAGwpKDUZmUA","body":"function reverse(items) {\n    return is_null(items)\n           ? null\n           : append(reverse(tail(items)),\n\t            pair(head(items), null));\n} "},{"body":"\n      A better version:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAnAUwDcG6BnBgCgrIYFs2ASlABvbKAmhCpSjXrNWHAPo9W3XgIA08tgQA2ZYWMkn5ZAnVoU2Sovr3r+Q8adeSA-Dv1kXb1wC55FnYGFV46TjIAQwoHVQFBTWwASD800wAHGIiACwYogBNHBO1GXQNBQQBuX1AAX1rGc0sgxVDVCPi2bTs9PWrsBuxGYI5OPWsyTkxtABZtAFZtAE5tTAA2bRQFyqqgA","body":"function reverse(items) {\n    function reverse_iter(items, result) {\n        return is_null(items)\n               ? result\n               : reverse_iter(tail(items),\n\t                      pair(head(items), result));\n    }\n    return reverse_iter(items, null);\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.19","id":"#ex-2.19","child":[{"body":"\n      Consider the \n      \n      change-counting program of\n      section ","tag":"#text"},{"tag":"REF","body":"1.2.2","href":"/sicpjs/1.2.2"},{"body":".  It would be nice to be\n      able to easily change the currency used by the program, so that we could\n      compute the number of ways to change a British pound, for example.  As\n      the program is written, the knowledge of the currency is distributed\n      partly into the\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_denomination"},{"body":"\n      and partly into the\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count_change"},{"body":"\n      (which knows\n      that there are five kinds of U.S. coins).\n      It would be nicer\n      to be able to supply a list of coins to be used for making change.\n    ","tag":"#text"},{"tag":"TEXT","id":"#p8","child":[{"body":"\n      We want to rewrite the\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cc"},{"body":" so that its second argument is a list of\n      the values of the coins to use rather than an integer specifying which\n      coins to use.  We could then have lists that defined each kind of\n      currency:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGMB7AOwGcAXUAVxIH1CBLU0AXlABt7yAKAVgAYANKh5DMg0CNCYAlAG58xclQDWdAoxIt2nMlzHj+QlOLFDJKUXKA","body":"const us_coins = list(50, 25, 10, 5, 1);\nconst uk_coins = list(100, 50, 20, 10, 5, 2, 1); "},{"body":"\n      We could then call ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cc"},{"body":" as follows:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":16,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslAGYCWATgM4AuA+gCYCmAdgPYC2RDAhhUUwwDSg6ADwDGdAA7Vi5avWZtO3XnjAcGNUMyosmJOqApNQAI30BzIgDdGJgJ6hKAVzkVcBRwxFKGoESIAUHDoeFAIiTOxUlhwANo50ZACUoADe2KAZoHoUjiQ+QUwhoAC8paAADOmZ1ZkA-KA4NU0AXKAFRQA8FaAAPj2aTNq6dP7hkdFxCYlVTXUVM7OgrX6BwQyhgqISUqSUtIys7Fw8DKMRDFGx8UnJANQLi74B7eugALSEu7IHCse8Z+MrlMwudLpMkgBubAAX1w4QYlFAjjIVDGCJKoBiREo-gArOUBChcQJMATQMSGokofDEY4ANao85kDFYnGksn4wlk0kCCkoElUuEBdkCZGM9iQoA","body":"cc(100, us_coins); ","output":"292"},{"body":"\n      To do this will require changing the program\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cc"},{"body":" somewhat.  It will still have the same\n      form, but it will access its second argument differently, as follows:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslAGYCWATgM4AuA+gCYCmAdgPYC2RDAhhUUwwDSg6ADwDGdAA7Vi5avWZtO3XnjAcGNUMyosmJOqApNQAI30BzIgDdGJgJ6hKAVzkVcI3pVCOyVd+zKgALygADZElAAUAKwADAIoUQKYcaCJoJgAlADc2O4Mno4A1r5M-kGh4RQRySmx8SnJAmkoSdm4BI4MIkoMoCIiERw6nRQCfgxUlhwhjnRkGaAA3tigq6B6FI4kvUNMI0GBwTEra6drAPzpJ2enAFygu-sAPKAxoAA+75pM2rp0EeNJtNZvNrjdVpdjuC7n0Bo8GKNBKIJFJSJRaIxWOwuDwGADShMpjM5hkFgBqMHQ2GDYYI0AAWkIaNkmIUON4+PYQOJ8zGBO5ILaAF83AMagJvCV-NkgA","body":"function cc(amount, coin_values) {\n    return amount === 0\n           ? 1\n           : amount < 0 || no_more(coin_values)\n           ? 0\n           : cc(amount, except_first_denomination(coin_values)) +\n             cc(amount - first_denomination(coin_values), coin_values);\n} "},{"body":"\n      Define the\n      functions","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_denomination"},{"body":",\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"except_first_denomination"},{"body":",\n\t\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"no_more"},{"body":"\n      in terms of primitive operations on list structures.  Does the order of\n      the list\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"coin_values"},{"body":"\n      affect the answer produced by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cc"},{"body":"?\n      Why or why not?\n    ","tag":"#text"}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":27,"eval":true,"prependLength":16,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslAGYCWATgM4AuA+gCYCmAdgPYC2RDAhhUUwwDSg6ADwDGdAA7Vi5avWZtO3XnjAcGNUMyosmJOqApNQAI30BzIgDdGJgJ6hKAVzkVcBRwxFKGoESIAUHDoeFAIiTOxUlhwANo50ZACUoADe2KAZoHoUjiQ+QUwhoAC8paAADOmZ1ZkA-KA4NU0AXKAFRQA8FaAAPj2aTNq6dP7hkdFxCYlVTXUVM7OgrX6BwQyhgqISUqSUtIys7Fw8DKMRDFGx8UnJANQLi74B7eugALSEu7IHCse8Z+MrlMwudLpMkgBubAAX1w4QYlFAjjIVDGCJKoBiREo-gArOUBChcQJMATQMSGokofDEY4ANao85kDFYnGksn4wlk0kCCkoElUtweLwnT4yfbyI7eAEXCbXZJparZXI+AAWdA4NBlYPlUNh7k83k2YkkVGkezkh0UJ21cqmqQWyryBg4RBitqBkJh2ANIt4AyGeg94IVjroOWd2KoDEcMXdaJ1Uz1cIC7IEyMZ7EhQA","body":"function first_denomination(coin_values) {\n    return head(coin_values);\n}\nfunction except_first_denomination(coin_values) {\n    return tail(coin_values);\n}\nfunction no_more(coin_values) {\n    return is_null(coin_values);\n} "},{"body":"\n      The order of the list ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"coin_values"},{"body":"\n      does not affect the answer given by any correct solution of the problem,\n      because the given list represents an unordered collection of\n      denominations.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.20","id":"#ex-2.20","child":[{"body":"\n\tIn the presence of higher-order functions, it is not strictly necessary\n\tfor functions to have multiple parameters; one would\n\tsuffice. If we have a function such as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"plus"},{"body":" that naturally requires two\n\targuments, we could write a variant of the function to which we pass\n\tthe arguments one at a time. An application of the variant to the\n\tfirst argument could return a function that we can then apply to the\n\tsecond argument, and so on. This practice—called\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"currying","tag":"#text"}]},{"body":" and named after the American mathematician and\n\tlogician\n\t\n\tHaskell Brooks Curry—is quite common in programming\n\tlanguages such as\n\t\n\tHaskell and\n\t\n\tOCaml. In JavaScript, a curried\n\tversion of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"plus"},{"body":" looks as follows.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":28,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cjFuy48BggMyjBAFlGmgA","body":"function plus_curried(x) {\t    \n    return y => x + y;\n} "},{"body":"\n\tWrite a function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"brooks"},{"body":" that\n\ttakes a curried function as first argument and as second argument a list\n\tof arguments to which the curried function is then applied, one by one,\n\tin the given order. For example, the following application of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"brooks"},{"body":" should have the\n\tsame effect as\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"plus_curried(3)(4)"},{"body":":\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":29,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cIUACNOVKgGtmoMlTu9QAdx5kyvLS2mmQAFl7MqvyBZLj2ji6CjCzsXDwCADSgDBSRggDMWQAsoqKmQA","body":"brooks(plus_curried, list(3, 4)); ","output":"7"},{"body":"\n\tWhile we are at it, we might as well curry the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"brooks"},{"body":"! Write a function \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"brooks_curried"},{"body":" that can be applied\n\tas follows:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":30,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cIUACNOVKgGs2Hbn36gyVO71AB3HjIyXlpbTTIACz9mVX5Qslx7Rxd2Lh4BQQYKWMFGFjT3AQAaUABmUoAWUVFTIA","body":"brooks_curried(list(plus_curried, 3, 4)); ","output":"7"},{"body":"\n\tWith this function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"brooks_curried"},{"body":",\n\twhat are the results of evaluating the following two statements?\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":31,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cIUACNOVKgGs2Hbn36gyVO71AB3HjIyXlpbTTIACz9mVX5Qslx7Rxd2Lh4BQQYKWMFk51d0jwAaBUVyisVs3MYWNPcBYtAAZiaAFlFO0yA","body":"brooks_curried(list(brooks_curried,\n                    list(plus_curried, 3, 4))); "},{"tag":"SNIPPET","latex":false,"id":32,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cIUACNOVKgGs2Hbn36gyVO71AB3HjIyXlpbTTIACz9mVX5Qslx7Rxd2Lh4BQQYKWMFk51d0jwAaBUVyisVs3PzUtwz+YvlKltbQarJBRhY09wEmgGYmgBZRMdFTIA","body":"brooks_curried(list(brooks_curried,\n                    list(brooks_curried, \n                         list(plus_curried, 3, 4)))); "}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":33,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9cIUACNOVKgGtmoMlTu9QAdx5kyvLS2mmQAFl7MqvyBZLiEpJQ0dg7OzIJ4ADSgFAEAtsziEgpyyqqctBRsRAQMDII5vPmixYqtAPygeC2tcgBcyY4u6YLhAIZCDU2iWWSjFHWTBaLmVtj2g2mMLOxcPAJZDJVkggDMWQAsostAA","body":"function brooks(f, items) {\n    return is_null(items)\n           ? f\n           : brooks(f(head(items)), tail(items));\n} "}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":34,"eval":true,"prependLength":13,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9chUpRqgARpypUA1s0F4ANKApleALbM4hIKcsqqnLQUbEQEDAyCfoHBYYrpAPygeGnpcgBcjs5uHniCABa8AIZCyUGioj5kVRSJdcGi5lbYIEUu7uxcPAKgZFSOvKAA7jxk-rQOmmSVoMyq-LxEZNbE5NQLxQMc3Hy1-vWSuRFqfSUV1WcpjaMtbecdXbhO-WzHw0IMGJkQSMFiDE4CHwAZh8ABYGqYgA","body":"function brooks_curried(items) {\n    return brooks(head(items), tail(items));\n} "}]},{"tag":"LI","child":[{"body":"\n\t      The statement \n\t      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":35,"eval":true,"prependLength":15,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9chUpRqgARpypUA1s0F4ANKApleALbM4hIKcsqqnLQUbEQEDAyCfoHBYYrpAPygeGnpcgBcjs5uHniCABa8AIZCyUGioj5kVRSJdcGi5lb4xOTUtE4u7uxcPAJJ-vWSuRFqRUMelTUTKY2gza0r9Z2WuIMlI9x8QgwxZIL7wxxHAl65eQ9yp8znjCyHY-w+AMw+ACwNTpAA","body":"brooks_curried(list(brooks_curried,\n                    list(plus_curried, 3, 4))); "},{"body":"\n\t      of course evaluates to 7, as does\n\t    ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"SNIPPET","latex":false,"id":36,"eval":true,"prependLength":15,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQAHAGwIGcB9EggJ04oFMATABQAPAJSgA3gEhQs0NjmhOvMl1oBPUAF4AfKGGgA1KHUBubAF9chUpRqgARpypUA1s0F4ANKApleALbM4hIKcsqqnLQUbEQEDAyCfoHBYYrpAPygeGnpcgBcjs5uHniCABa8AIZCyUGioj5kVRSJdcGi5lb4xOTUtE4u7uxcPAJJ-vWSuRFqRUMelTUTKY2gza0r9Z2WuIMlI9x8QgwxZIL7wxxHAl65eQ9yp8znl2zXY-w+94+-T2eCRgsQ6fHwAZh8ABYGg1TEA","body":"brooks_curried(list(brooks_curried,\n                    list(brooks_curried, \n                         list(plus_curried, 3, 4)))); "}]}]}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Mapping over lists","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    One extremely useful operation is to apply some transformation to each\n    element in a list and generate the list of results. For instance, the\n    following\n    function\n    scales each number in a list by a given factor:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":37,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnEgQwBsBTAfWYrrIAoKyrALZ0ANKDyNyVAE4BKUAG9soVaBmsyBGbW7siBZs36CRclWstqA-KANGLVywC5QAB0YUZvABatGACYmwnQKAFQSUmSy4o5O8aoMLBxcPLxknsYCIXLiktLycgDc2AC+uElsnNx8qXyY4ijiAMziACziAKy5oJgADMVAA","body":"function scale_list(items, factor) {\n    return is_null(items)\n           ? null\n           : pair(head(items) * factor, \n                  scale_list(tail(items), factor));\n} "},{"tag":"SNIPPET","latex":false,"id":38,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGcBjAQwBsBTAfRIEs8AXAChvocwBpUOBmDgFg4CsASg6YADEIDcQA","body":"scale_list(list(1, 2, 3, 4, 5), 10); ","output":"[10, [20, [30, [40, [50, null]]]]]"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    We can abstract this general idea and capture it as a common pattern\n    expressed as a higher-order\n    function,\n    just as in section ","tag":"#text"},{"tag":"REF","body":"1.3","href":"/sicpjs/1.3"},{"body":".  The\n    higher-order\n    function\n    here is called ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":".\n    The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":"\n    takes as arguments a\n    function\n    of one argument and a list, and returns a list of the results produced by\n    applying the\n    function\n    to each element in the list:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":39,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBDAIwGcAKADwEpQBvbUf0ACcApmQKDabUAD4AvKAAMoAPygpALlABaNQG5sAX1yFSlGqAC2dAA4sTAGlAUywi0y68BQ0eNoUmAPpEBAA2ISzOru58XrEqoMFhMXECmtZ0FIJ2xCwAFsJ0ACYRLm4cHI7JKdVWtg6gZBnhkWXl+kbYtSyMTI4h-mQsWpgKjugArI7DmGgAbI6YAOxtQA","body":"function map(fun, items) {\n    return is_null(items)\n           ? null\n           : pair(fun(head(items)), \n                  map(fun, tail(items)));\n} "},{"tag":"SNIPPET","latex":false,"id":40,"eval":true,"prependLength":12,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBDAIwGcAKADwEpQBvbUf0ACcApmQKDabUAD4AvKAAMoAPygpALlABaNQG5sAX1yFSlGqAC2dAA4sTAGlAUywi0y68BQ0eNoUmAPpEBAA2ISzOru58XrEqoMFhMXECmtZ0FIJ2xCwAFsJ0ACYRLm4cHI7JKdVWtg6gZBnhkWXl+kbYtSyMTI4h-mQsWpgKjugArI7DmGgAbI6YAOxtQA","body":"map(abs, list(-10, 2.5, -11.6, 17)); ","output":"[10, [2.5, [11.6, [17, null]]]]"},{"tag":"SNIPPET","latex":false,"id":41,"eval":true,"prependLength":8,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBbAQwAcAKQogGlArIFM6AzgEpQAb2yhJoAE68yBabQoCA+kQIAbDSx79hEqYakB+UOq0GjhgFygmDCtLbEWAC14MAJjr6ChQrksrYMlGVnYuMgdtXT9-AG5sAF9cMJYAD1AAXgA+UEyAKnyuDWUyFkwuFC4AZi4AFgSgA","body":"map(x => x * x, list(1, 2, 3, 4)); ","output":"[1, [4, [9, [16, null]]]]"},{"body":"\n    Now we can give a new definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_list"},{"body":"\n    in terms of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":42,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnEgQwBsBTAfWYrrIAoKyrALZ0ANKDyNyVAE4BKUAG9soVaBmsyBGbSGMADrwAeoALwA+UCYBUEqWVniBwunIDc2AL64GLDlx5eAL5McRRxAGZxABZxAFY5cUwABncgA","body":"function scale_list(items, factor) {\n    return map(x => x * factor, items);\n} "}]},{"tag":"TEXT","id":"#p11","child":[{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":"\n    is an important construct, not only because it captures a common pattern,\n    but because it establishes a higher level of abstraction in dealing with\n    lists.  In the original definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_list"},{"body":",\n    the recursive structure of the program draws attention to the\n    element-by-element processing of the list.  Defining\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_list"},{"body":"\n    in terms of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" suppresses that level of\n    detail and emphasizes that scaling transforms a list of elements to a list\n    of results.  The difference between the two definitions is not that the\n    computer is performing a different process (it isn't) but that we\n    think about the process differently.  In effect,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" helps establish an abstraction barrier\n    that isolates the implementation of\n    functions\n    that transform lists from the details of how the elements of the list are\n    extracted and combined.  Like the barriers shown in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"2.1","href":"/sicpjs/2.1.2#fig-2.1"},{"body":",\n      \n    this abstraction gives us the flexibility to change the low-level details\n    of how sequences are implemented, while preserving the conceptual framework\n    of operations that transform sequences to sequences.\n    Section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":" expands\n    on this use of sequences as a framework for organizing programs.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.21","id":"#ex-2.21","child":[{"body":"\n    The\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_list"},{"body":"\n    takes a list of numbers as argument and returns a list of the squares of\n    those numbers.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":43,"eval":true,"prependLength":0,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsGcBHAVwEMAnAUwH0AbASzwBcAKep5zAGlW4GZuALAEohAbiA","body":"square_list(list(1, 2, 3, 4)); ","output":"[1, [4, [9, [16, null]]]]"},{"body":"\n    Here are two different definitions of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_list"},{"body":".\n    Complete both of them by filling in the missing expressions:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction square_list(items) {\n    return is_null(items) \n           ? null\n           : pair($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$);\n}\n      "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction square_list(items) {\n   return map($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$);\n}\n      "}],"solution":[{"tag":"SNIPPET","latex":false,"id":44,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0mbdgH0ANhTplOFMuwC2dfkNFj2EqaBP6iBQ4fOWbvYQ6BoAD8oB5eAUGiAFygAA7MFKycjCwcnAAW7MwAJj7WtrwANNgAkFGiqXpGJmZkid4WBbwtymrYVRw1ppzGPZhFqIMAzIMALK1AA","body":"function square_list(items) {\n    return is_null(items)\n           ? null\n           : pair(square(head(items)),\n\t          square_list(tail(items)));\n} "},{"tag":"SNIPPET","latex":false,"id":45,"eval":true,"prependLength":5,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9chUpRr0mbdgH0ANhTplOFMuwC2dfkNFj2EqaCvMADp0YsOAGlAW1rbKatjeekYmZsamnJj+KP4AzP4ALLy8ikA","body":"function square_list(items) {\n    return map(square, items);\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.22","id":"#ex-2.22","child":[{"body":" \n    Louis Reasoner tries to rewrite the first\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_list"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"2.21","href":"/sicpjs/2.2.1#ex-2.21"},{"body":" so that it evolves an\n    iterative process:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":46,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cIUABUAEpGR7QAOQDym0AEFQ0YwCUbAUWhnwxgDIBVTZGOHchUpQ09Exs7AD6ADYUdGScFGTsALZ0-EKioP7k1LTx7KycZAAWFEQA5nQANKDMRHQA7nmpwumi4pI5dGFEBBERBcVlKaDNLaMiAPzVtQ2sI2MtAFyguflkzBR9RSXlvFVz8wegAA7r+YwsHJyF7MwAJv3bKbvDh6+jNfWNvMrpaultUmWCXyuWSVW6vW+qlw51CkWisSiMU4mCqKCqAGYqgAWXjfIA","body":"function square_list(items) {\n    function iter(things, answer) {\n        return is_null(things) \n               ? answer\n               : iter(tail(things), \n                      pair(square(head(things)), \n                           answer));\n    }\n    return iter(items, null);\n} "},{"body":"\n    Unfortunately, defining\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square_list"},{"body":"\n    this way produces the answer list in the reverse order of the one desired.\n    Why?\n    ","tag":"#text"},{"tag":"TEXT","id":"#p12","child":[{"body":"\n      Louis then tries to fix his bug by interchanging the arguments to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":":","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":47,"eval":true,"prependLength":7,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChsDMBXAOwGMAXASwHsjQBnARwIEMAnAUwAoAPASlADe2UCNAcyBVrW6gAVKG4BubAF9cIUABUAEpGR7QAOQDym0AEFQ0YwCUbAUWhnwxgDIBVTZGOHchUpQ09Exs7AD6ADYUdGScFGTsALZ0-EKioP7k1LTx7KycZAAWFEQA5nQANKDMRHQA7nmpwumi4pI5dGFEBBERBcVlKc0tIyIA-NW1DazDoy0AXKC5+WTMFH1FJeW8VbNz+6AADmv5NfV5uwdXI4wsHJyF7MwAJv1bKbyfyulq6W1SSwS+VyySq3V6vGUamwt1CkWisSiMU4mCqKCqAGYqgAWL5AA","body":"function square_list(items) {\n    function iter(things, answer) {\n        return is_null(things)\n               ? answer\n               : iter(tail(things), \n                      pair(answer, \n                           square(head(things))));\n    }\n    return iter(items, null);\n} "},{"body":"\n    This doesn't work either.  Explain.\n    ","tag":"#text"}]}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\t  The result list is reversed in the first program because the argument\n\t  list is traversed in the given order, from first to last, but squares\n\t  are added successively to the front of the answer list via\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".\n\t  The last element of the list is the last one to be added to the answer\n\t  and thus ends up as the first element of the result list.\n\t","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t  The second program makes things worse! The result is not even a list\n\t  any longer, because the elements occupy the tail position of the\n\t  result list and not the head position.\n\t","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 2.23","id":"#ex-2.23","child":[{"body":"\n    The\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n    is similar to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":".  It takes as arguments a\n    function\n    and a list of elements.  However, rather than forming a list of the\n    results,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n    just applies the\n    function\n    to each of the elements in turn, from left to right. The values returned by\n    applying the\n    function\n    to the elements are not used\n    at all—","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n    is used with\n    functions\n    that perform an action, such as printing.  For example, \n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":48,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslAGYD2ATgPoCmAhgMYAWoALkaAEYWgDmAlgG4UA7NgE9QAZ0YBXACaDGuYuWr0AFAA9QAXgB8oadzEAHADZVh6gJQAaUMYOMVAVgDsNgMwpMNgBzeLFgG4gA","body":"for_each(x => display(x), list(57, 321, 88)); ","output":"57\n321\n88"},{"body":"\n    The value returned by the call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n    (not illustrated above) can be something arbitrary, such as true.  Give an\n    implementation of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":".","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":49,"eval":true,"prependLength":3,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHToIwChslAGYD2ATgPoCmAhgMYAWoALkaAEYWgDmAlgG4UA7NgE9QAZ0YBXACaDGuApIE1G3IkOLlq9ABSKBAGlDdGFALZiAlKADe2UA+MFQO7mLIDJAGy+vTFy0s7RxDQEgopEiElWQJuAQppAG57RwBfUAovMQ5g0Id9HTpqaT9zK0sU-ILSSlo6PSUjRipuXxNywKr07DSFWu0GgA9QAF4APlBpNwAHLyphHSHLIy83Rh0AVgB2IwBmFEwjAA5jrqA","body":"function for_each(fun, items) {\n    if (is_null(items)){\n        return undefined;\n    } else {\n        fun(head(items));\n        for_each(fun, tail(items));\n    }\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.2.1#footnote-link-1","child":[{"body":"In this book, we use ","tag":"#text"},{"tag":"EM","child":[{"body":"list","tag":"#text"}]},{"body":" to mean a chain of\n    pairs terminated by the end-of-list marker.  In contrast, the term\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"list structure","tag":"#text"}]},{"body":" refers to any data structure made out of pairs, \n    not just to lists.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/2.2.1#footnote-link-2","child":[{"body":"The value\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":" is used in JavaScript for\n\tvarious purposes, but in this book we shall only use it to\n\trepresent the empty list.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/2.2.1#footnote-link-3","child":[{"body":"Our JavaScript environment provides\n      a primitive function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display_list"},{"body":"\n      that works like the primitive function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"display"},{"body":", except that\n      it uses list notation instead of box notation.\n    ","tag":"#text"}]}]