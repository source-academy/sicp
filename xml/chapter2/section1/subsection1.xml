<SUBSECTION> 
  <NAME>
    Example: Arithmetic Operations for Rational Numbers
  </NAME>

  <LABEL NAME="sec:rationals"/>

  <TEXT>
    Suppose we want to do
    <INDEX>arithmetic<SUBINDEX>on rational numbers</SUBINDEX><OPEN/></INDEX>
    <INDEX>rational number(s)<SUBINDEX>arithmetic operations on</SUBINDEX><OPEN/></INDEX>
    <INDEX>rational-number arithmetic<OPEN/></INDEX>
    arithmetic with rational numbers.  We want to be
    able to add, subtract, multiply, and divide them and to test whether
    two rational numbers are equal.
  </TEXT>

  <TEXT>
    Let us begin by assuming that we already have a way of constructing a
    rational number from a numerator and a denominator.  We also assume
    that, given a rational number, we have a way of extracting (or
    selecting) its numerator and its denominator.  Let us further assume
    that the constructor and selectors are available as
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <PYTHON>functions:</PYTHON>
    </SPLITINLINE>
    <UL>
      <LI>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(make-rat n d)</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>make_rat(</PYTHONINLINE><LATEXINLINE>$n$</LATEXINLINE><PYTHONINLINE>, </PYTHONINLINE><LATEXINLINE>$d$</LATEXINLINE><PYTHONINLINE>)</PYTHONINLINE>
	  </PYTHON>
	</SPLITINLINE>
	<INDEX><USE>make_rat</USE></INDEX> 
	returns the
	rational number whose  numerator is the integer
	<LATEXINLINE>$n$</LATEXINLINE> and whose denominator is the integer
	<LATEXINLINE>$d$</LATEXINLINE>. 
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(numer x)</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>numer(</PYTHONINLINE><LATEXINLINE>$x$</LATEXINLINE><PYTHONINLINE>)</PYTHONINLINE></PYTHON>
	</SPLITINLINE> 
	<INDEX><USE>numer</USE></INDEX> 
	returns the numerator of the rational number
	<LATEXINLINE>$x$</LATEXINLINE>.
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(denom x)</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>denom(</PYTHONINLINE><LATEXINLINE>$x$</LATEXINLINE><PYTHONINLINE>)</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
	<INDEX><USE>denom</USE></INDEX> 
	returns the denominator of the rational number
	<LATEXINLINE>$x$</LATEXINLINE>.
      </LI>
    </UL>
  </TEXT>

  <TEXT>
    We are using here a powerful strategy of synthesis: 
    <INDEX>wishful thinking</INDEX>
    <EM>wishful thinking</EM>. We haven<APOS/>t yet said how a rational number
    is represented, or how the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, <SCHEMEINLINE>denom</SCHEMEINLINE>, and 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    should be implemented.  Even so, if we did have these three
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <PYTHON>functions,</PYTHON>
    </SPLITINLINE>
    we could then add, subtract, multiply, divide, and test equality by using
    the following relations:

    <LATEX>
      \[
      \begin{array}{rll}
      \dfrac{n_{1}}{d_{1}}+\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}+n_{2}d_{1}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}-\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}-n_{2}d_{1}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}\cdot\dfrac{n_{2}}{d_{2}}
      &amp;=&amp;\dfrac{n_{1}n_{2}}{d_{1}d_{2}}\\[15pt]
      \dfrac{n_{1}/d_{1}}{n_{2}/d_{2}}
      &amp;=&amp;\dfrac{n_{1}d_{2}}{d_{1}n_{2}}\\[15pt]
      \dfrac{n_{1}}{d_{1}}
      &amp;=&amp;\dfrac{n_{2}}{d_{2}}\ \quad \textrm{if and only if}\ \ \  n_{1}d_{2}\ =\ n_{2}d_{1}
      \end{array}
      \]
    </LATEX>
  </TEXT>

  <TEXT>
    We can express these rules as
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <PYTHON>functions:</PYTHON>
    </SPLITINLINE>
    <SNIPPET PAGE="84" EVAL="no">
      <INDEX><DECLARATION>add_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>sub_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>mul_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>div_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>equal_rat</DECLARATION></INDEX>
      <NAME>add_rat</NAME>
      <REQUIRES>make_rat2</REQUIRES>
      <SCHEME>
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
      </SCHEME>
      <PYTHON>
function add_rat(x, y) {
    return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                    denom(x) * denom(y));
}
function sub_rat(x, y) {
    return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                    denom(x) * denom(y));
}
function mul_rat(x, y) {
    return make_rat(numer(x) * numer(y),
                    denom(x) * denom(y));
}
function div_rat(x, y) {
    return make_rat(numer(x) * denom(y),
                    denom(x) * numer(y));
}
function equal_rat(x, y) {
    return numer(x) * denom(y) === numer(y) * denom(x);
}
      </PYTHON>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now we have the operations on rational numbers defined in terms of the
    selector and constructor
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>, <SCHEMEINLINE>denom</SCHEMEINLINE>, and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
    But we haven<APOS/>t yet defined these. What we need is some way to glue
    together a numerator and a denominator to form a rational number.
  </TEXT>

  <SUBHEADING>
    <NAME>Pairs</NAME>
  </SUBHEADING>

  <TEXT>
    To enable us to implement the concrete level of our data abstraction, our
    <SPLITINLINE>
      <SCHEME>
	language
      </SCHEME>
      <PYTHON>
	JavaScript environment
      </PYTHON>
    </SPLITINLINE>
    provides a compound structure called a 
    <INDEX>pair(s)</INDEX>
    <EM>pair</EM>, which can be constructed with the 
      <SPLITINLINE>
	<SCHEME>primitive procedure</SCHEME>
	<PYTHON>primitive function</PYTHON>
      </SPLITINLINE>
      <INDEX><PRIMITIVE/><SUBINDEX><USE>pair</USE> (\textit{ns})</SUBINDEX></INDEX>
      <INDEX><USE>pair</USE> (primitive function)</INDEX>
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>cons</SCHEMEINLINE>.</SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE>.</PYTHON>
      </SPLITINLINE>
      This
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<PYTHON>function</PYTHON>
      </SPLITINLINE>
      takes two arguments and returns a compound data object that contains the
      two arguments as parts.  Given a pair, we can extract the parts using the
      primitive
      <SPLITINLINE>
	<SCHEME>procedures</SCHEME>
	<PYTHON>functions</PYTHON>
      </SPLITINLINE>
      <INDEX><USE>head</USE> (primitive function)</INDEX>
      <INDEX><PRIMITIVE/><SUBINDEX><USE>head</USE> (\textit{ns})</SUBINDEX></INDEX>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>head</PYTHONINLINE></PYTHON>
      </SPLITINLINE> 
      and
      <INDEX><USE>tail</USE> (primitive function)</INDEX>
      <INDEX><PRIMITIVE/><SUBINDEX><USE>tail</USE> (\textit{ns})</SUBINDEX></INDEX>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><PYTHON><PYTHONINLINE>tail</PYTHONINLINE></PYTHON></SPLITINLINE>.<SPLITINLINE><SCHEME><FOOTNOTE>The name 
      <INDEX><USE>cons</USE> (primitive function)<SUBINDEX>meaning of the name</SUBINDEX></INDEX>
      <SCHEMEINLINE>cons</SCHEMEINLINE> stands for <QUOTE>construct.</QUOTE>
      The names 
      <INDEX><USE>car</USE> (primitive function)<SUBINDEX>origin of the name</SUBINDEX></INDEX>
      <SCHEMEINLINE>car</SCHEMEINLINE> and 
      <INDEX><USE>cdr</USE> (primitive function)<SUBINDEX>origin of the name</SUBINDEX></INDEX>
      <SCHEMEINLINE>cdr</SCHEMEINLINE> derive from the original implementation
      of Lisp on the 
      <INDEX>IBM 704</INDEX>
      <INDEX>Lisp<SUBINDEX>original implementation on IBM<SPACE/>704</SUBINDEX></INDEX>
      IBM 704.  That machine had an addressing scheme that allowed one to
      reference the <QUOTE>address</QUOTE> and <QUOTE>decrement</QUOTE> parts of
      a memory location.  <SCHEMEINLINE>Car</SCHEMEINLINE> stands for
      <QUOTE>Contents of Address part of Register</QUOTE> and
      <SCHEMEINLINE>cdr</SCHEMEINLINE> (pronounced <QUOTE>could-er</QUOTE>)
      stands for <QUOTE>Contents of Decrement part of
      Register.</QUOTE></FOOTNOTE></SCHEME></SPLITINLINE>
      Thus, we can use
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>
	</SCHEME><PYTHON><PYTHONINLINE>tail</PYTHONINLINE>
      </PYTHON></SPLITINLINE>
      as follows:
      <SNIPPET PAGE="85">
        <NAME>cons_1_2</NAME>
        <EXAMPLE>cons_1_2_example</EXAMPLE>
        <SCHEME>
(define x (cons 1 2))
        </SCHEME>
        <PYTHON>
const x = pair(1, 2);
        </PYTHON>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_example</NAME>
	<EXPECTED>1</EXPECTED>
        <REQUIRES>cons_1_2</REQUIRES>
        <SCHEME>
(car x)
        </SCHEME>
	<SCHEMEOUTPUT>
1
	</SCHEMEOUTPUT>
        <PYTHON>
head(x);
        </PYTHON>
	<PYTHON_OUTPUT>
1
	</PYTHON_OUTPUT>
      </SNIPPET>

      <SNIPPET PAGE="85">
        <NAME>cons_1_2_example2</NAME>
	<EXPECTED>2</EXPECTED>
        <REQUIRES>cons_1_2</REQUIRES>
        <SCHEME>
(cdr x)
        </SCHEME>
	<SCHEMEOUTPUT>
2
	</SCHEMEOUTPUT>
        <PYTHON>
tail(x);
        </PYTHON>
	<PYTHON_OUTPUT>
2
	</PYTHON_OUTPUT>
      </SNIPPET>
      Notice that a pair is a data object that can be given a name and
      manipulated, just like a primitive data object.  Moreover,
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      can be used to form pairs whose elements are pairs, and so on:
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4</NAME>
        <EXAMPLE>cons_1_2_3_4_example</EXAMPLE>
        <SCHEME>
(define x (cons 1 2))

(define y (cons 3 4))

(define z (cons x y))
        </SCHEME>
        <PYTHON>
const x = pair(1, 2);

const y = pair(3, 4);

const z = pair(x, y);
        </PYTHON>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4_example</NAME>
	<EXPECTED>1</EXPECTED>
        <REQUIRES>cons_1_2_3_4</REQUIRES>
        <SCHEME>
(car (car z))
        </SCHEME>
	<SCHEMEOUTPUT>
1
	</SCHEMEOUTPUT>
        <PYTHON>
head(head(z));
        </PYTHON>
	<PYTHON_OUTPUT>
1
	</PYTHON_OUTPUT>
      </SNIPPET>
      <SNIPPET PAGE="85">
        <NAME>cons_1_2_3_4_example2</NAME>
	<EXPECTED>3</EXPECTED>
        <REQUIRES>cons_1_2_3_4</REQUIRES>
        <SCHEME>
(car (cdr z))
        </SCHEME>
	<SCHEMEOUTPUT>
3
	</SCHEMEOUTPUT>
        <PYTHON>
head(tail(z));
        </PYTHON>
	<PYTHON_OUTPUT>
3
	</PYTHON_OUTPUT>
      </SNIPPET>
      In section<SPACE/><REF NAME="sec:hierarchical-data"/> we will see how this
      ability to combine pairs means that pairs can be used as general-purpose
      building blocks to create all sorts of complex data structures.  The single
      compound-data primitive <EM>pair</EM>, implemented by the
      <SPLITINLINE>
	<SCHEME>procedures</SCHEME>
	<PYTHON>functions</PYTHON>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      <SPLITINLINE>
	<SCHEME>
	<SCHEMEINLINE>car</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>head</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>tail</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      is the only glue we need.  Data objects constructed from pairs are called 
      <INDEX>list structure</INDEX>
      <INDEX>data<SUBINDEX>list-structured</SUBINDEX></INDEX>
      <EM>list-structured</EM> data.
    </TEXT>

    <SUBHEADING>
      <NAME>Representing rational numbers</NAME>
    </SUBHEADING>

    <LONG_PAGE lines="2"/>
    <TEXT>
      Pairs offer a natural way to complete the
      <INDEX>rational number(s)<SUBINDEX>represented as pairs</SUBINDEX></INDEX>
      rational-number system.
      Simply represent a rational number as a pair of two integers: a numerator
      and a denominator.  Then
      <SPLITINLINE><SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      <SCHEMEINLINE>numer</SCHEMEINLINE>, and <SCHEMEINLINE>denom</SCHEMEINLINE>
      are readily implemented as follows:<FOOTNOTE>
      Another way to define the selectors and constructor is
      <SNIPPET PAGE="86" EVAL="no">
        <NAME>make_rat</NAME>
        <SCHEME>
(define make-rat cons)
(define numer car)
(define denom cdr)
        </SCHEME>
        <PYTHON>
const make_rat = pair;
const numer = head;
const denom = tail;
        </PYTHON>
      </SNIPPET>
      The first definition associates the name
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      with the value of the expression
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
      </SPLITINLINE>
      which is the primitive
      <SPLITINLINE>
	<SCHEME>procedure</SCHEME>
	<PYTHON>function</PYTHON>
      </SPLITINLINE>
      that constructs pairs.  Thus
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      are names for the same primitive constructor.
      <P>
        Defining selectors and constructors in this way is efficient: Instead of
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
	<EM>calling</EM>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
	  <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
	</SPLITINLINE>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
        <EM>is</EM>
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>,</SCHEME>
	  <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>,</PYTHON>
	</SPLITINLINE>
	so there is only one
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
        called, not two, when
	<SPLITINLINE>
	  <SCHEME>
	  <SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
	</SPLITINLINE>
	is called.  On the other hand, doing this defeats debugging aids that
	trace
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
        calls or put breakpoints on
        <SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <PYTHON>function</PYTHON>
	</SPLITINLINE>
        calls:
        You may want to watch
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
	  <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE> </PYTHON>
	</SPLITINLINE>
	being called, but you certainly don<APOS/>t want to watch every call to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>.</SCHEME>
	  <PYTHON><PYTHONINLINE>pair</PYTHONINLINE>.</PYTHON>
	  </SPLITINLINE>
      </P>
      <P>
        We have chosen not to use this style of definition in this book.
	<LABEL NAME="foot:proc-def-style"/>
      </P>
    </FOOTNOTE>
    <SNIPPET PAGE="86">
      <INDEX><DECLARATION>make_rat</DECLARATION></INDEX>
      <INDEX><DECLARATION>numer</DECLARATION></INDEX>
      <INDEX><DECLARATION>denom</DECLARATION></INDEX>
      <NAME>make_rat2</NAME>
      <EXPECTED>2</EXPECTED>
      <EXAMPLE>rat_example_1</EXAMPLE>
      <SCHEME>
(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))
      </SCHEME>
      <PYTHON>
function make_rat(n, d) { return pair(n, d); }
<SHORT_SPACE/>
function numer(x) { return head(x); }
<SHORT_SPACE/>
function denom(x) { return tail(x); }
      </PYTHON>
    </SNIPPET>
    <SNIPPET PAGE="86" HIDE="yes">
      <NAME>rat_example_1</NAME>
      <PYTHON>
numer(make_rat(2, 3));
      </PYTHON>
    </SNIPPET>
    Also, in order to display the results of our computations, we can 
    <INDEX>rational number(s)<SUBINDEX>printing</SUBINDEX></INDEX>
    print rational numbers by printing the numerator, a slash, and the 
    <SPLIT>
      <SCHEME>
	denominator:<FOOTNOTE>
	<SCHEMEINLINE>Display</SCHEMEINLINE> is
	the Scheme primitive for
	<INDEX>printing, primitives for</INDEX>
	<INDEX><USE>display</USE> (primitive function)</INDEX>
	<INDEX>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)<SUBINDEX><DECLARATION>display</DECLARATION></SUBINDEX></INDEX>
	printing data.  The Scheme primitive
	<INDEX><USE>newline</USE> (primitive function)</INDEX>
	<INDEX>primitive functions (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}<SUBINDEX><DECLARATION>newline</DECLARATION></SUBINDEX></INDEX>
	<SCHEMEINLINE>newline</SCHEMEINLINE> starts a new line for printing.
	Neither of these procedures returns a useful value, so in the uses of
	<SCHEMEINLINE>print-rat</SCHEMEINLINE> below, we show only what
	<SCHEMEINLINE>print-rat</SCHEMEINLINE> prints, not what the interpreter
	prints as the value returned by
	<SCHEMEINLINE>print-rat</SCHEMEINLINE>.</FOOTNOTE>
      </SCHEME>
      <PYTHON>
	denominator.
	We use the primitive function
	<INDEX><USE>stringify</USE> (primitive function)</INDEX>
	<INDEX><PRIMITIVE/><SUBINDEX><USE>stringify</USE><ECMA>JSON.stringify</ECMA></SUBINDEX></INDEX>
	<PYTHONINLINE>stringify</PYTHONINLINE> to turn any value (here
	a number) into a string. The operator
	<INDEX>string(s)<SUBINDEX>concatenation</SUBINDEX></INDEX>
	<INDEX>concatenating strings</INDEX>
        <INDEX><USE>+</USE><SUBINDEX>as string concatenation operator</SUBINDEX></INDEX>
        <INDEX><OPERATOR/><SUBINDEX><USE>+</USE> (for string concatenation)</SUBINDEX></INDEX>
	<PYTHONINLINE>+</PYTHONINLINE> in JavaScript is
	<INDEX>overloaded operator <PYTHONINLINE>+</PYTHONINLINE></INDEX>
	<EM>overloaded</EM>; it can be applied to two numbers or to two strings,
	and in the latter case it returns the result of <EM>concatenating</EM>
	the two strings.<FOOTNOTE>In JavaScript, the operator
	<PYTHONINLINE>+</PYTHONINLINE> can also be applied to a string and a number
	and to other operand combinations, but in this book,
	we choose to apply it either to two numbers or to two strings.
      </FOOTNOTE>
      </PYTHON>
    </SPLIT>
    <SNIPPET PAGE="86">
      <INDEX><DECLARATION>print_rat</DECLARATION></INDEX>
      <NAME>print_rat</NAME>
      <REQUIRES>make_rat2</REQUIRES>
      <EXAMPLE>print_rat_example_0</EXAMPLE>
      <SCHEME>
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
      </SCHEME>
      <PYTHON>
function print_rat(x) {
    return display(stringify(numer(x)) + " / " + stringify(denom(x)));
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET PAGE="86" HIDE="yes">
      <NAME>print_rat_example_0</NAME>
      <SCHEME>
(define one-half (make-rat 1 2))

(print-rat one-half)
      </SCHEME>
      <SCHEMEOUTPUT>
1/2
      </SCHEMEOUTPUT>
      <PYTHON>
const one_half = make_rat(1, 2);

print_rat(one_half);
      </PYTHON>
      <PYTHON_OUTPUT>
"1 / 2"
      </PYTHON_OUTPUT>
    </SNIPPET>
    Now we can try our rational-number
    <SPLITINLINE>
      <SCHEME>procedures:</SCHEME>
      <PYTHON>functions:<FOOTNOTE>
	The primitive function
	<INDEX><USE>display</USE> (primitive function)</INDEX>	
	<INDEX><PRIMITIVE/><SUBINDEX><USE>display</USE> (\textit{ns})</SUBINDEX></INDEX>
	<PYTHONINLINE>display</PYTHONINLINE> 
	introduced in exercise<SPACE/><REF NAME="ex:search-for-primes"/>
	returns its argument, but in the uses of
	<PYTHONINLINE>print_rat</PYTHONINLINE> below, we show only what
	<SCHEMEINLINE>print_rat</SCHEMEINLINE> prints, not what the interpreter
	prints as the value returned by
	<PYTHONINLINE>print_rat</PYTHONINLINE>.
      </FOOTNOTE></PYTHON>
    </SPLITINLINE>
    <SNIPPET PAGE="86">
      <NAME>print_rat_example</NAME>
      <EXPECTED>[ 1, 2 ]</EXPECTED>
      <REQUIRES>make_rat2</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(define one-half (make-rat 1 2))

(print-rat one-half)
      </SCHEME>
      <SCHEMEOUTPUT>
1/2
      </SCHEMEOUTPUT>
      <PYTHON>
const one_half = make_rat(1, 2);

print_rat(one_half);
      </PYTHON>
      <PYTHON_TEST>
const one_half = make_rat(1, 2);

one_half;
      </PYTHON_TEST>
      <PYTHON_OUTPUT>
"1 / 2"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no" PAGE="86" HIDE="yes">
      <NAME>one_half</NAME>
      <SCHEME>
(define one-half (make-rat 1 2))
      </SCHEME>
      <PYTHON>
const one_half = make_rat(1, 2);
      </PYTHON>
    </SNIPPET>
    <SNIPPET EVAL="no" PAGE="86">
      <NAME>one_third</NAME>
      <SCHEME>
(define one-third (make-rat 1 3))
      </SCHEME>
      <PYTHON>
const one_third = make_rat(1, 3);
      </PYTHON>
    </SNIPPET>

    <SNIPPET PAGE="87">
      <NAME>print_rat_example2</NAME>
      <EXPECTED>[ 5, 6 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_half</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-half one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
5/6
      </SCHEMEOUTPUT>
      <PYTHON>
print_rat(add_rat(one_half, one_third));
      </PYTHON>
      <PYTHON_TEST>
add_rat(one_half, one_third);
      </PYTHON_TEST>
      <PYTHON_OUTPUT>
"5 / 6"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <NAME>print_rat_example3</NAME>
      <EXPECTED>[ 1, 6 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_half</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (mul-rat one-half one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
1/6
      </SCHEMEOUTPUT>
      <PYTHON>
print_rat(mul_rat(one_half, one_third));
      </PYTHON>
      <PYTHON_TEST>
mul_rat(one_half, one_third);
      </PYTHON_TEST>
      <PYTHON_OUTPUT>
"1 / 6"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <NAME>print_rat_example4</NAME>
      <EXPECTED>[ 6, 9 ]</EXPECTED>
      <REQUIRES>add_rat</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-third one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
6/9
      </SCHEMEOUTPUT>
      <PYTHON>
print_rat(add_rat(one_third, one_third));
      </PYTHON>
      <PYTHON_TEST>
add_rat(one_third, one_third);	
      </PYTHON_TEST>
      <PYTHON_OUTPUT>
"6 / 9"
      </PYTHON_OUTPUT>
    </SNIPPET>
  </TEXT>
  <LONG_PAGE lines="1"/>
  <TEXT>
    As the final example shows, our rational-number implementation does not
    <INDEX>rational number(s)<SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
    <INDEX>reducing to lowest terms</INDEX>
    reduce rational numbers to lowest terms.  We can remedy this by changing
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>make-rat</SCHEMEINLINE>.</SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE>.</PYTHON>
    </SPLITINLINE>
    If we have a 
    <SCHEMEINLINE>gcd</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    like the one in section<SPACE/><REF NAME="sec:gcd"/> that produces
    <INDEX>greatest common divisor<SUBINDEX><ORDER>used-rational</ORDER>used in rational-number arithmetic</SUBINDEX></INDEX>
    the greatest common divisor of two integers, we can use
    <SCHEMEINLINE>gcd</SCHEMEINLINE> to reduce the numerator and the
    denominator to lowest terms before constructing the pair:
    <SNIPPET PAGE="87" HIDE="yes">
      <NAME>numer</NAME>
      <PYTHON>
function numer(x) {
    return head(x);
}
function denom(x) {
    return tail(x);
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET PAGE="87">
      <INDEX><DECLARATION>make_rat</DECLARATION><SUBINDEX>reducing to lowest terms</SUBINDEX></INDEX>
      <NAME>make_rat_3</NAME>
      <EXPECTED>[ 2, 3 ]</EXPECTED>
      <REQUIRES>numer</REQUIRES>
      <EXAMPLE>make_rat_3_example_1</EXAMPLE>
      <REQUIRES>gcd_definition</REQUIRES>
      <SCHEME>
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))
      </SCHEME>
      <PYTHON>
function make_rat(n, d) {
    const g = gcd(n, d);
    return pair(n / g, d / g);
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>make_rat_3_example_1</NAME>
      <PYTHON>
make_rat(4, 6);
      </PYTHON>
    </SNIPPET>
    Now we have
    <SNIPPET PAGE="87">
      <NAME>numer_rat</NAME>
      <REQUIRES>add_rat_2</REQUIRES>
      <REQUIRES>one_third</REQUIRES>
      <REQUIRES>print_rat</REQUIRES>
      <SCHEME>
(print-rat (add-rat one-third one-third))
      </SCHEME>
      <SCHEMEOUTPUT>
2/3
      </SCHEMEOUTPUT>
      <PYTHON>
print_rat(add_rat(one_third, one_third));
      </PYTHON>
      <PYTHON_OUTPUT>
"2 / 3"
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="84" HIDE="yes">
      <NAME>add_rat_2</NAME>
      <REQUIRES>make_rat_3</REQUIRES>
      <SCHEME>
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
      </SCHEME>
      <PYTHON>
function add_rat(x, y) {
    return make_rat(numer(x) * denom(y) + numer(y) * denom(x),
                    denom(x) * denom(y));
}
function sub_rat(x, y) {
    return make_rat(numer(x) * denom(y) - numer(y) * denom(x),
                    denom(x) * denom(y));
}
function mul_rat(x, y) {
    return make_rat(numer(x) * numer(y),
                    denom(x) * denom(y));
}
function div_rat(x, y) {
    return make_rat(numer(x) * denom(y),
                    denom(x) * numer(y));
}
function equal_rat(x, y) {
    return numer(x) * denom(y) === numer(y) * denom(x);
}
      </PYTHON>
    </SNIPPET>
    as desired.  This modification was accomplished by changing the constructor
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_@rat</PYTHONINLINE></PYTHON>
      </SPLITINLINE> without changing any of the
      <SPLITINLINE>
	<SCHEME>procedures</SCHEME>
	<PYTHON>functions</PYTHON>
      </SPLITINLINE>
      (such as
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>add-rat</SCHEMEINLINE></SCHEME>
	<PYTHON><PYTHONINLINE>add_rat</PYTHONINLINE></PYTHON>
      </SPLITINLINE>
      and
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>mul-rat</SCHEMEINLINE>)</SCHEME>
	<PYTHON><PYTHONINLINE>mul_rat</PYTHONINLINE>)</PYTHON>
      </SPLITINLINE>
      that implement the actual operations.
  </TEXT>
  <EXERCISE> 
    Define a better version of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-rat</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>make_rat</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    that handles both positive and negative arguments.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-rat</SCHEMEINLINE></SCHEME>
      <PYTHON>The function <PYTHONINLINE>make_rat</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    should normalize the sign so that if the rational number is positive, both
    the numerator and denominator are positive, and if the rational number is
    negative, only the numerator is negative.
    <SOLUTION>
      <SNIPPET>
	<EXPECTED>[ -3, 4 ]</EXPECTED>
	<REQUIRES>abs_definition</REQUIRES>
	<REQUIRES>gcd_definition</REQUIRES>
	<EXAMPLE>example_2.1</EXAMPLE>
	<PYTHON>
function sign(x) {
    return x &lt; 0 
           ? -1
	   : x &gt; 0
	     ? 1
	     : 0;
}
function make_rat(n, d) {
    const g = gcd(n, d);
    return pair(sign(n) * sign(d) * abs(n / g), 
                abs(d / g));
}
	</PYTHON>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_2.1</NAME>
      <PYTHON>
make_rat(3, -4);
      </PYTHON>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
    <LABEL NAME="ex:2_1"/>
  </EXERCISE>
  <INDEX>arithmetic<SUBINDEX>on rational numbers</SUBINDEX><CLOSE/></INDEX>
  <INDEX>rational number(s)<SUBINDEX>arithmetic operations on</SUBINDEX><CLOSE/></INDEX>
  <INDEX>rational-number arithmetic<CLOSE/></INDEX>
</SUBSECTION>
