<SUBSECTION>
  <NAME>
    Structure of the Compiler
  </NAME>

  <LABEL NAME="sec:compiler-structure"/>
  <INDEX>compiler for JavaScript<SUBINDEX>structure of<OPEN/></SUBINDEX></INDEX>
  <TEXT>
    <INDEX>compiler for JavaScript<SUBINDEX>analyzing evaluator vs.</SUBINDEX></INDEX>
    In section<SPACE/><REF NAME="sec:separating-analysis"/> we modified our
    original metacircular interpreter to separate analysis from execution.  We
    analyzed each
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    to produce an execution
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that took an environment as argument and performed the required operations.
    In our compiler, we will do essentially the same analysis.  Instead of
    producing execution
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    however, we will generate sequences of instructions to be run by our
    register machine.
  </TEXT>

  <TEXT>
    The
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>compile</SCHEMEINLINE> is the top-level dispatch in the
    compiler. It corresponds to the <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:core-of-evaluator"/>, the
    <SCHEMEINLINE>analyze</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:separating-analysis"/>, and the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    entry point of the explicit-control-evaluator in
    section<SPACE/><REF NAME="sec:eceval-core"/>. The compiler, like the
    interpreters, uses the 
    <INDEX>compiler for JavaScript<SUBINDEX>expression-syntax <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    expression-syntax
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    defined in
    section<SPACE/><REF NAME="sec:representing-expressions"/>.<FOOTNOTE>Notice,
    however, that our compiler is a <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> program, and the syntax
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that it uses to manipulate expressions are the actual
    <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    used with the metacircular evaluator.  For the explicit-control evaluator, in
    contrast, we assumed that equivalent syntax operations were available
    as operations for the register machine.  (Of course, when we simulated
    the register machine in
    <SPLITINLINE>
      <SCHEME>Scheme,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    we used the actual
    <SPLITINLINE>
      <SCHEME>Scheme procedures</SCHEME>
      <JAVASCRIPT>JavaScript functions</JAVASCRIPT>
    </SPLITINLINE>
    in our register machine simulation.)</FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Compile</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>compile</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> performs a case analysis on the
    syntactic type of the expression to be compiled.  For
    each type of expression, it dispatches to a
    specialized
    <INDEX>code generator</INDEX>
    <EM>code generator</EM>:
    <INDEX><DECLARATION>compile</DECLARATION></INDEX> 
    <SNIPPET EVAL="no">
      <NAME>compile</NAME>
      <SCHEME>
(define (compile exp target linkage)
  (cond ((self-evaluating? exp)
         (compile-self-evaluating exp target linkage))
        ((quoted? exp) (compile-quoted exp target linkage))
        ((variable? exp)
         (compile-variable exp target linkage))
        ((assignment? exp)
         (compile-assignment exp target linkage))
        ((definition? exp)
         (compile-definition exp target linkage))
        ((if? exp) (compile-if exp target linkage))
        ((lambda? exp) (compile-lambda exp target linkage))
        ((begin? exp)
         (compile-sequence (begin-actions exp)
                           target
                           linkage))
        ((cond? exp) (compile (cond-&gt;if exp) target linkage))
                               ((application? exp)
                                (compile-application exp target linkage))
                               (else
                                (error "Unknown expression type - - COMPILE" exp))))
      </SCHEME>
      <JAVASCRIPT>
function compile(component, target, linkage) {
    return is_literal(component)
           ? compile_literal(component, target, linkage)
           : is_name(component)
           ? compile_name(component, target, linkage)
           : is_application(component)
           ? compile_application(component, target, linkage)
           : is_operator_combination(component)
           ? compile(operator_combination_to_application(component), target, linkage)
           : is_conditional(component)
           ? compile_conditional(component, target, linkage)
           : is_lambda_expression(component)
           ? compile_lambda_expression(component, target, linkage)
           : is_sequence(component)
           ? compile_sequence(sequence_statements(component), target, linkage)
           : is_block(component)
           ? compile_block(component, target, linkage)
           : is_return_statement(component)
           ? compile_return_statement(component, target, linkage) 
           : is_function_declaration(component)
           ? compile(function_decl_to_constant_decl(component), target, linkage)
           : is_declaration(component)
           ? compile_declaration(component, target, linkage)
           : is_assignment(component)
           ? compile_assignment(component, target, linkage)
           : error(component, "unknown component type -- compile");
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING> 
    <NAME>Targets and linkages</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>code generator<SUBINDEX>arguments of</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Compile</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>compile</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and the code generators that it calls
    take two arguments in addition to the
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    to compile.  There is a 
    <INDEX>target register</INDEX>
    <EM>target</EM>, which specifies the register in which the compiled code is
    to return the value of the
    <SPLITINLINE>
      <SCHEME>
        expression.
      </SCHEME>
      <JAVASCRIPT>
        component.
      </JAVASCRIPT>
    </SPLITINLINE>
    There is also a 
    <INDEX>linkage descriptor</INDEX>
    <EM>linkage descriptor</EM>, which describes how the code resulting from the
    compilation of the
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    should proceed when it has finished its
    execution.  The linkage descriptor can require the code to do one of
    the following three things:
    <UL>
      <LI>
	continue at the next instruction in sequence (this is
	<INDEX><USE>next</USE> (linkage descriptor)</INDEX>
	specified by the linkage descriptor
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>next</SCHEMEINLINE>),
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>),
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	return from the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	being compiled (this is specified
	<INDEX><ORDER>return</ORDER>\texttt{return} (linkage descriptor)</INDEX>
	<INDEX><USE>return_undefined</USE> (linkage descriptor)</INDEX>
	by the linkage descriptor
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>return</SCHEMEINLINE>),
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE> or <JAVASCRIPTINLINE>"return_undefined"</JAVASCRIPTINLINE>),
	  </JAVASCRIPT>
	</SPLITINLINE>
	or
      </LI>
      <LI>
	jump to a named entry point (this is specified by using the
	designated label as the linkage descriptor).
      </LI>
    </UL>

    For example, compiling the
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        literal
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>5</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>
        (which is self-evaluating)
      </SCHEME>
    </SPLITINLINE>
    with a target of the <SCHEMEINLINE>val</SCHEMEINLINE>
    register and a linkage of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>next</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"next"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should produce
    the instruction
    <SNIPPET EVAL="no">
      <SCHEME>
(assign val (const 5))
      </SCHEME>
      <JAVASCRIPT>
assign("val", constant(5)),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Compiling the same expression with a linkage of
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>return</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>"return"</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should produce the instructions
    <SNIPPET EVAL="no">
      <SCHEME>
(assign val (const 5))
(goto (reg continue))
      </SCHEME>
      <JAVASCRIPT>
assign("val", constant(5)),
go_to(reg("continue"))
      </JAVASCRIPT>
    </SNIPPET>

    In the first case, execution will continue with the next instruction
    in the sequence. In the second case, we will return from a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    call.  In both cases, the value of the expression will be placed into
    the target <SCHEMEINLINE>val</SCHEMEINLINE> register.
  </TEXT>

  <SUBHEADING>
    <NAME>Instruction sequences and stack usage</NAME>
  </SUBHEADING>

  <LABEL NAME="sec:instruction-sequences"/>
  <TEXT>
    <INDEX>instruction sequence<OPEN/></INDEX>
    <INDEX>code generator<SUBINDEX>value of</SUBINDEX></INDEX>
    Each code generator returns an 
    <EM>instruction sequence</EM> containing
    the object code it has generated for the
    <SPLITINLINE>
      <SCHEME>
        expression.
      </SCHEME>
      <JAVASCRIPT>
        statement or expression.
      </JAVASCRIPT>
    </SPLITINLINE>
    Code generation
    for a compound expression is accomplished by combining the output from
    simpler code generators for component expressions, just as
    evaluation of a compound expression is accomplished by evaluating the
    component expressions.
  </TEXT>

  <TEXT>
    The simplest method for combining instruction sequences is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>append_instruction_sequences</USE></INDEX> 
    called
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>append-instruction-sequences</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>append_instruction_sequences</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    It takes 
    <SPLITINLINE>
      <SCHEME>
	as arguments any number of instruction sequences
      </SCHEME>
      <JAVASCRIPT>
	as arguments two instruction sequences 
      </JAVASCRIPT>
    </SPLITINLINE>
    that are to be
    executed sequentially; it appends them and returns the combined sequence.
    That is, if <LATEXINLINE>$seq_1$</LATEXINLINE> and
    <LATEXINLINE>$seq_2$</LATEXINLINE> are sequences of instructions, then
    evaluating
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      (append-instruction-sequences ^$seq_1$^ ^$seq_2$^)
      </SCHEME>
      <JAVASCRIPT>
      append_instruction_sequences(<META>seq</META>$_1$, <META>seq</META>$_2$)
      </JAVASCRIPT>
    </SNIPPET>
    produces the sequence
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      ^$seq_1$^
      ^$seq_2$^
      </SCHEME>
      <JAVASCRIPT>
<META>seq</META>$_1$
<META>seq</META>$_2$
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>compiler for JavaScript<SUBINDEX>stack usage</SUBINDEX></INDEX>
    Whenever registers might need to be saved, the compiler<APOS/>s code
    generators use
    <INDEX><USE>preserving</USE></INDEX> 
    <SCHEMEINLINE>preserving</SCHEMEINLINE>, which is a more subtle method for
    combining instruction sequences.
    <SPLITINLINE>
      <SCHEME>
	      <SCHEMEINLINE>Preserving</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	      The function <JAVASCRIPTINLINE>preserving</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    takes three arguments: a set of registers and two instruction sequences that
    are to be executed sequentially.  It appends the sequences in such a way
    that the contents of each register in the set is preserved over the
    execution of the first sequence, if this is needed for the execution of the
    second sequence.  That is, if the first sequence modifies the register
    and the second sequence actually needs the register<APOS/>s original
    contents, then <SCHEMEINLINE>preserving</SCHEMEINLINE> wraps a
    <SCHEMEINLINE>save</SCHEMEINLINE> and a <SCHEMEINLINE>restore</SCHEMEINLINE>
    of the register around the first sequence before appending the sequences.
    Otherwise, <SCHEMEINLINE>preserving</SCHEMEINLINE> simply returns the
    appended instruction sequences.  Thus, for example,
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      (preserving (list ^$reg_1$^ ^$reg_2$^) ^$seq_1$^ ^$seq_2$^)
      </SCHEME>
      <JAVASCRIPT>
      preserving(list($reg_1$, $reg_2$), $seq_1$, $seq_2$)
      </JAVASCRIPT>
    </SNIPPET>
    produces one of the following four sequences of instructions, depending on
    how
    <META>seq</META><LATEXINLINE>$_1$</LATEXINLINE> and
    <META>seq</META><LATEXINLINE>$_2$</LATEXINLINE> use
    <META>reg</META><LATEXINLINE>$_1$</LATEXINLINE> and
    <META>reg</META><LATEXINLINE>$_2$</LATEXINLINE>:
  </TEXT>
  <!-- comment from original latex (Abelson/Sussman): -->
  <!--  %Whew!  What a pain it was to set this, because of the blank lines. -->
  <SPLIT>
    <SCHEME>
      <FIGURE src="img_original/preserving_table.svg"></FIGURE>
    </SCHEME>
    <JAVASCRIPT>
    <LATEX>
      \[
      {
      \begin{array}{l|l|l|l}
\textit{seq}_1 &amp; \texttt{save(}\textit{reg}_1\texttt{),}    &amp; \texttt{save(}\textit{reg}_2\texttt{),}      &amp; \texttt{save(}\textit{reg}_2\texttt{),}    \\
\textit{seq}_2 &amp; \textit{seq}_1                            &amp; \textit{seq}_1                              &amp; \texttt{save(}\textit{reg}_1\texttt{),}    \\
               &amp; \texttt{restore(}\textit{reg}_1\texttt{),} &amp; \texttt{restore(}\textit{reg}_2\texttt{),}   &amp; \textit{seq}_1                            \\
               &amp; \textit{seq}_2                            &amp; \textit{seq}_2                              &amp; \texttt{restore(}\textit{reg}_1\texttt{),} \\
               &amp;                                           &amp;                                             &amp; \texttt{restore(}\textit{reg}_2\texttt{),} \\
               &amp;                                           &amp;                                             &amp; \textit{seq}_2                            
\end{array}}
      \]
    </LATEX>
    </JAVASCRIPT>
  </SPLIT>
  <TEXT>
    By using <SCHEMEINLINE>preserving</SCHEMEINLINE> to combine instruction
    sequences the compiler avoids unnecessary stack operations.  This also
    isolates the details of whether or not to generate
    <SCHEMEINLINE>save</SCHEMEINLINE> and <SCHEMEINLINE>restore</SCHEMEINLINE>
    instructions within the <SCHEMEINLINE>preserving</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
      <JAVASCRIPT>function,</JAVASCRIPT>
    </SPLITINLINE>
    separating them from the concerns that arise in writing each of the
    individual code  generators.
    In fact no <SCHEMEINLINE>save</SCHEMEINLINE> or
    <SCHEMEINLINE>restore</SCHEMEINLINE> instructions are explicitly
    produced by the code generators<SPLITINLINE><JAVASCRIPT>, except in relation to calling and returning from functions</JAVASCRIPT></SPLITINLINE>.
  </TEXT>

  <TEXT>
    In principle, we could represent an instruction sequence simply as a
    list of instructions.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Append-instruction-sequences</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>append_instruction_sequences</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    could then combine instruction sequences by performing an ordinary list
    <SCHEMEINLINE>append</SCHEMEINLINE>.  However,
    <SCHEMEINLINE>preserving</SCHEMEINLINE> would then be a complex operation,
    because it would have to analyze each instruction sequence to
    determine how the sequence uses its registers.
    <SPLITINLINE>
      <SCHEME>
	      <SCHEMEINLINE>Preserving</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	      The function <JAVASCRIPTINLINE>preserving</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    would be inefficient as well as complex, because it would have to
    analyze each of its instruction sequence arguments, even though these
    sequences might themselves have been constructed by calls to
    <SCHEMEINLINE>preserving</SCHEMEINLINE>, in which case their parts would
    have already been analyzed.  To avoid such repetitious analysis we will
    associate with each instruction sequence some information about its register
    use. When we construct a basic instruction sequence we
    will provide this information explicitly,
    and the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that combine instruction sequences will derive
    register-use information for the combined sequence from the
    information associated with the component sequences.
  </TEXT>

  <TEXT>
    An instruction sequence will contain three pieces of information:
    <UL>
      <LI>the set of registers that must be initialized before the
      instructions in the sequence are executed (these registers are said to
      be <EM>needed</EM> by the sequence),
      </LI>
      <LI>the set of registers whose values are modified by the
      instructions in the sequence, and
      </LI>
      <LI>the actual instructions
      <SPLITINLINE>
	<SCHEME>
	  (also called <EM>statements</EM>)
	</SCHEME>
      </SPLITINLINE>
      in the sequence.
      </LI>
    </UL>

    We will represent an instruction sequence as a list of its three
    parts.  The constructor for instruction sequences is thus
    <INDEX><DECLARATION>make_instruction_sequence</DECLARATION></INDEX> 
    <SNIPPET EVAL="no">
      <NAME>make_instruction_sequence</NAME>
      <SCHEME>
      (define (make-instruction-sequence needs modifies statements)
      (list needs modifies statements))
      </SCHEME>
      <JAVASCRIPT>
function make_instruction_sequence(needs, modifies, instructions) {
    return list(needs, modifies, instructions);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For example, the two-instruction
    sequence that looks up the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>x</SCHEMEINLINE> in the current environment,
    assigns the result to <SCHEMEINLINE>val</SCHEMEINLINE>,
    <SPLITINLINE><SCHEME>and then returns</SCHEME><JAVASCRIPT>and then proceeds with the continuation</JAVASCRIPT></SPLITINLINE>,
    requires registers <SCHEMEINLINE>env</SCHEMEINLINE> and
    <SCHEMEINLINE>continue</SCHEMEINLINE> to have been initialized, and
    modifies register <SCHEMEINLINE>val</SCHEMEINLINE>.
    This sequence would therefore be constructed as
    <SNIPPET EVAL="no">
      <SCHEME>
      (make-instruction-sequence '(env continue) '(val)
      '((assign val
            (op lookup-variable-value) (const x) (reg env))
      (goto (reg continue))))
      </SCHEME>
      <JAVASCRIPT>
make_instruction_sequence(
    list("env", "continue"),
    list("val"),
    list(assign("val",
                list(op("lookup_symbol_value"), constant(symbol_of_name("x")), reg("env"))),
         go_to(reg("continue"))));
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We sometimes need to construct an instruction sequence with no
    <SPLITINLINE>
      <SCHEME>
	statements:
      </SCHEME>
      <JAVASCRIPT>
	instructions:
      </JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><DECLARATION>empty_instruction_sequence</DECLARATION></INDEX> 
    <SNIPPET EVAL="no">
      <NAME>empty_instruction_sequence</NAME>
      <SCHEME>
      (define (empty-instruction-sequence)
      (make-instruction-sequence '() '() '()))
      </SCHEME>
      <JAVASCRIPT>
function empty_instruction_sequence() {
    return make_instruction_sequence(null, null, null);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for combining instruction sequences are shown in
    section<SPACE/><REF NAME="sec:combining-instruction-sequences"/>.

    <SPLITINLINE>
      <SCHEME>
        <INDEX>compiler for Scheme<SUBINDEX>structure of|)</SUBINDEX></INDEX>
        <INDEX>instruction sequence|)</INDEX>
      </SCHEME>
      <JAVASCRIPT>
        <INDEX>compiler for JavaScript<SUBINDEX>structure of<CLOSE/></SUBINDEX></INDEX>
        <INDEX>instruction sequence<CLOSE/></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:comp-optimize"/>
    <INDEX>compiler for JavaScript<SUBINDEX>stack usage</SUBINDEX></INDEX>
    <INDEX><USE>preserving</USE></INDEX> 
    In evaluating a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    application, the explicit-control evaluator always saves and restores
    the <SCHEMEINLINE>env</SCHEMEINLINE> register around the evaluation of the
    <SPLITINLINE>
      <SCHEME>operator,</SCHEME>
      <JAVASCRIPT>function expression,</JAVASCRIPT>
    </SPLITINLINE>
    saves and restores <SCHEMEINLINE>env</SCHEMEINLINE> around the
    evaluation of each
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <JAVASCRIPT>argument expression</JAVASCRIPT>
    </SPLITINLINE>
    (except the final one), saves and restores
    <SCHEMEINLINE>argl</SCHEMEINLINE> around the evaluation of each
    <SPLITINLINE>
      <SCHEME>operand,</SCHEME>
      <JAVASCRIPT>argument expression,</JAVASCRIPT>
    </SPLITINLINE>
    and saves and restores
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>proc</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>fun</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    around the
    evaluation of the
    <SPLITINLINE>
      <SCHEME>operand</SCHEME>
      <JAVASCRIPT>argument expression</JAVASCRIPT>
    </SPLITINLINE>
    sequence.  For each of the following
    <SPLITINLINE>
      <SCHEME>combinations,</SCHEME>
      <JAVASCRIPT>applications,</JAVASCRIPT>
    </SPLITINLINE>
    say which of these <SCHEMEINLINE>save</SCHEMEINLINE> and
    <SCHEMEINLINE>restore</SCHEMEINLINE> operations are superfluous and
    thus could be eliminated by the compiler<APOS/>s
    <SCHEMEINLINE>preserving</SCHEMEINLINE> mechanism:
    <SNIPPET EVAL="no">
      <SCHEME>
      (f 'x 'y)

      ((f) 'x 'y)

      (f (g 'x) y)

      (f (g 'x) 'y)
      </SCHEME>
      <JAVASCRIPT>
f("x", "y")

f()("x", "y")

f(g("x"), y)

f(g("x"), "y")
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <INDEX>compiler for JavaScript<SUBINDEX>explicit-control evaluator vs.</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>optimizations (additional)</SUBINDEX></INDEX>
    Using the <SCHEMEINLINE>preserving</SCHEMEINLINE> mechanism, the compiler
    will avoid saving and restoring <SCHEMEINLINE>env</SCHEMEINLINE> around the
    evaluation of the
    <SPLITINLINE>
      <SCHEME>
	operator of a combination
      </SCHEME>
      <JAVASCRIPT>
	function expression of an application
      </JAVASCRIPT>
    </SPLITINLINE>
    in the case where the
    <SPLITINLINE>
      <SCHEME>
	operator is a symbol.
      </SCHEME>
      <JAVASCRIPT>
	function expression is a name.
      </JAVASCRIPT>
    </SPLITINLINE>
    We could also build such optimizations into the evaluator.
    Indeed, the explicit-control evaluator of
    section<SPACE/><REF NAME="sec:eceval"/> already performs a similar
    optimization, by treating
    <SPLITINLINE>
      <SCHEME>
	combinations with no operands
      </SCHEME>
      <JAVASCRIPT>
	applications with no arguments
      </JAVASCRIPT>
    </SPLITINLINE>
    as a special case.
    <OL>
      <LI>
	Extend the explicit-control evaluator to recognize as a separate class
	of
	<SPLITINLINE>
	  <SCHEME>
	expressions combinations whose operator is a symbol,
	  </SCHEME>
	  <JAVASCRIPT>
	    components applications whose function expression is a name,
	  </JAVASCRIPT>
	</SPLITINLINE>
	and to take
	advantage of this fact in evaluating such
	<SPLITINLINE>
	  <SCHEME>
	    expressions.
	  </SCHEME>
	  <JAVASCRIPT>
	    components.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	Alyssa P. Hacker suggests that by extending the evaluator to recognize
	more and more special cases we could incorporate all the compiler<APOS/>s
	optimizations, and that this would eliminate the advantage of compilation
	altogether.  What do you think of this idea?
      </LI>
    </OL>
  </EXERCISE>

</SUBSECTION>
