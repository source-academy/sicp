<SUBSECTION>
  <NAME>示例: 牛顿方法求平方根<APOS></APOS></NAME>
  <LABEL NAME="sec:sqrt"></LABEL>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX>数学函数 vs.<OPEN></OPEN></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>过程 vs.<OPEN></OPEN></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>数学函数 vs.<OPEN></OPEN></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>JavaScript 函数 vs.<OPEN></OPEN></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程，</SCHEME>
      <JAVASCRIPT>函数，</JAVASCRIPT>
    </SPLITINLINE>
    上面介绍的，与普通数学函数非常相似。它们指定一个由一个或多个参数确定的值。但是数学函数和计算机
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
    之间有一个重要的区别。
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        计算机函数
      </JAVASCRIPT>
    </SPLITINLINE>
    必须是有效的。
  </TEXT>
  <TEXT>
    举个例子，考虑计算平方根的问题。我们可以将平方根函数定义为
    <LATEX>
      \[
      \sqrt{x}\ =\text{ the }y\text{ such that }y \geq 0\text{ and }
      y^2\ =\ x
      \]
    </LATEX>
    这描述了一个完全合法的数学函数。我们可以用它来识别一个数字是否是另一个数字的平方根，或者推导有关平方根的一般事实。另一方面，这个定义并没有描述
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>计算机函数。</JAVASCRIPT>
    </SPLITINLINE>
    实际上，它几乎没有告诉我们如何实际找到一个给定数的平方根。用
    <SPLITINLINE>
      <SCHEME>伪Lisp：</SCHEME>
      <JAVASCRIPT>伪JavaScript：</JAVASCRIPT>
    </SPLITINLINE>
    来重新表述这个定义也无济于事。
    <SNIPPET LATEX="yes">
      <SCHEME>
(define (sqrt x)
  (the y (and (&gt;= y 0)
              (= (square y) x))))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return the y $\texttt{with}$ y &gt;= 0 &amp;&amp; square(y) === x;
}
      </JAVASCRIPT>
    </SNIPPET>
    这只不过是回到了原点。
  </TEXT>
  <SHORT_PAGE lines="2"></SHORT_PAGE>
  <TEXT>
    The contrast between
    <SPLITINLINE>
      <SCHEME>
        函数和过程
      </SCHEME>
      <JAVASCRIPT>
        数学函数和计算机函数
      </JAVASCRIPT>
    </SPLITINLINE><INDEX>声明性与命令性知识</INDEX><INDEX>命令性与声明性知识</INDEX><INDEX>数学<SUBINDEX>计算机科学 vs.</SUBINDEX></INDEX><INDEX>计算机科学<SUBINDEX>数学 vs.</SUBINDEX></INDEX><FOOTNOTE>声明性和命令性描述密切相关，正如数学和计算机科学密切相关一样。例如，说程序产生的答案是
    <INDEX>程序的正确性</INDEX>
    <QUOTE>正确的</QUOTE>是对程序做出的声明性陈述。大量研究旨在建立
    <INDEX>证明程序正确性</INDEX>
    证明程序正确性的技术，而该学科的许多技术困难与在命令性陈述（程序由此构建）和声明性陈述（可用于推断事物）之间的过渡有关。
    <SPLITINLINE>
      <SCHEME>
	与此相关，编程语言设计的一个重要当前领域是探索所谓的
	<INDEX>编程语言<SUBINDEX>非常高级</SUBINDEX></INDEX>
	<INDEX>非常高级语言</INDEX>
	非常高级语言，在这种语言中，人们实际上以声明性陈述进行编程。
      </SCHEME>
      <JAVASCRIPT>
	与此相关，编程语言设计者已经探索了所谓的
	<INDEX>编程语言<SUBINDEX>非常高级</SUBINDEX></INDEX>
	<INDEX>非常高级语言</INDEX>
	非常高级语言，其中人们实际上以声明性陈述进行编程。
      </JAVASCRIPT>
    </SPLITINLINE>
    这个想法是让解释器足够聪明，以便在给定程序员指定的<QUOTE>是什么的</QUOTE>知识后，它们可以自动生成<QUOTE>如何做的</QUOTE>知识。一般来说，这是不可能的，但在一些重要领域已经取得了进展。我们将在<SPACE></SPACE><REF NAME="chap:meta"></REF>中重新探讨这一想法。</FOOTNOTE><SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX>数学函数 vs.<CLOSE></CLOSE></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>过程 vs.<CLOSE></CLOSE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>数学函数 vs.<CLOSE></CLOSE></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>JavaScript 函数 vs.<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE></TEXT>
  <TEXT>
    如何计算
    <INDEX>平方根<OPEN></OPEN></INDEX>
    <INDEX>牛顿<APOS></APOS>方法<SUBINDEX><ORDER>平方</ORDER>用于平方根<OPEN></OPEN></SUBINDEX></INDEX>
    平方根？最常见的方法是使用牛顿的逐次近似方法，该方法指出，只要我们有一个猜测 <LATEXINLINE>$y$</LATEXINLINE> 作为数字 <LATEXINLINE>$x$</LATEXINLINE> 的平方根的值，我们就可以通过将 <LATEXINLINE>$y$</LATEXINLINE> 与 <LATEXINLINE>$x/y$</LATEXINLINE> 平均来进行简单操作以获得更好的猜测（更接近实际平方根）。<FOOTNOTE>此平方根算法实际上是牛顿法则的一个特例，牛顿法则是一种用于求解方程根的一般技术。平方根算法本身是由亚历山大的<INDEX>希伦</INDEX>在公元一世纪开发的。我们将在<SPACE></SPACE><REF NAME="sec:proc-returned-values"></REF>中看到如何将一般的牛顿法表示为
    <SPLITINLINE>
      <SCHEME>
        Lisp 过程
      </SCHEME>
      <JAVASCRIPT>
        JavaScript 函数
      </JAVASCRIPT>
    </SPLITINLINE>。</FOOTNOTE>
    例如，我们可以如下计算 2 的平方根。假设我们的初始猜测是<SPACE></SPACE>1：
    <LATEX>
      \[
      \begin{array}{lll}
      \textrm{猜测} &amp; \textrm{商} &amp; \textrm{平均}\\[1em]
      1      &amp; {\displaystyle \frac{2}{1} = 2}           &amp; {\displaystyle \frac{(2+1)}{2} = 1.5} \\[1em]
      1.5    &amp; {\displaystyle \frac{2}{1.5} = 1.3333}    &amp; {\displaystyle \frac{(1.3333+1.5)}{2} = 1.4167} \\[1em]
      1.4167 &amp; {\displaystyle \frac{2}{1.4167} = 1.4118} &amp; {\displaystyle \frac{(1.4167+1.4118)}{2} = 1.4142} \\[1em]
      1.4142 &amp; \ldots &amp; \ldots
      \end{array}
      \]
    </LATEX>
    继续这个过程，我们将获得越来越接近平方根的近似值。
  </TEXT>
  <TEXT>
    Now let<APOS></APOS><INDEX>被开方数</INDEX><SPLITINLINE>
      <SCHEME>
        过程：
      </SCHEME>
      <JAVASCRIPT>
        函数：
      </JAVASCRIPT>
    </SPLITINLINE><SNIPPET>
      <NAME>sqrt_iter</NAME>
      <REQUIRES>is_good_enough</REQUIRES>
      <REQUIRES>improve</REQUIRES>
      <EXAMPLE>sqrt_iter_example</EXAMPLE>
      <SCHEME>
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
      </SCHEME>
      <JAVASCRIPT>
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : sqrt_iter(improve(guess, x), x);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_iter_example</NAME>
      <SCHEME>
(sqrt-iter 3 25)
      </SCHEME>
      <JAVASCRIPT>
sqrt_iter(3, 25);
      </JAVASCRIPT>
    </SNIPPET>
    A guess is improved by averaging it with the quotient of the radicand and
    the old guess:
    <SNIPPET>
      <NAME>improve</NAME>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>improve_example</EXAMPLE>
      <SCHEME>
(define (improve guess x)
  (average guess (/ x guess)))
      </SCHEME>
      <JAVASCRIPT>
function improve(guess, x) {
    return average(guess, x / guess);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>improve_example</NAME>
      <SCHEME>
(improve 3 25)
      </SCHEME>
      <JAVASCRIPT>
improve(3, 25);
      </JAVASCRIPT>
    </SNIPPET>
    where
    <SNIPPET>
      <INDEX><DECLARATION>average</DECLARATION></INDEX>
      <NAME>average_definition</NAME>
      <EXAMPLE>average_example</EXAMPLE>
      <SCHEME>
(define (average x y)
  (/ (+ x y) 2))
      </SCHEME>
      <JAVASCRIPT>
function average(x, y) {
    return (x + y) / 2;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>average_example</NAME>
      <SCHEME>
(average 3 6)
      </SCHEME>
      <JAVASCRIPT>
average(3, 6);
      </JAVASCRIPT>
    </SNIPPET>
    We also have to say what we mean by <QUOTE>足够好。</QUOTE><SPACE></SPACE><REF NAME="ex:ex-sqrt-end-test"></REF><SPLIT><SCHEME><FOOTNOTE>我们通常会给
    <INDEX>谓词<SUBINDEX>命名约定</SUBINDEX></INDEX>
    <INDEX>命名约定<SUBINDEX><ORDER>？</ORDER><SCHEMEINLINE>？</SCHEMEINLINE>用于谓词</SUBINDEX></INDEX>
    <INDEX>问号，用于谓词名称</INDEX>
    <INDEX><USE>？</USE>，用于谓词名称</INDEX> 
    谓词名称以问号结尾，帮助我们记住它们是谓词。这只是一个风格上的约定。对于解释器来说，问号只是一个普通字符。</FOOTNOTE></SCHEME><JAVASCRIPT><FOOTNOTE>我们通常会给
    <INDEX>谓词<SUBINDEX>命名约定</SUBINDEX></INDEX>
    <INDEX>命名约定<SUBINDEX><ORDER>是</ORDER><JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE>用于谓词</SUBINDEX></INDEX>
    <INDEX><JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE>，在谓词名称中<ORDER>是</ORDER></INDEX>
    谓词名称以<JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE>开头，帮助我们记住它们是谓词。</FOOTNOTE></JAVASCRIPT></SPLIT><SNIPPET>
      <NAME>is_good_enough</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>is_good_enough_example</EXAMPLE>
      <SCHEME>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_good_enough_example</NAME>
      <SCHEME>
(good-enough? 1.41 2)
      </SCHEME>
      <JAVASCRIPT>
is_good_enough(1.41, 2);
      </JAVASCRIPT>
    </SNIPPET>
    Finally, we need a way to get started.  For instance, we can always guess
    that the square root of any number
    is<SPACE></SPACE><SPLITINLINE><SCHEME><FOOTNOTE>注意，我们将初始猜测表示为1.0而不是1。这在许多Lisp实现中没有区别。
    <INDEX>有理数<SUBINDEX><ORDER>MIT</ORDER>在MIT Scheme中</SUBINDEX></INDEX>
    <INDEX>精确整数</INDEX>
    <INDEX>整数<SUBINDEX>精确</SUBINDEX></INDEX>
    <INDEX>整数除法</INDEX>
    <INDEX>整数<SUBINDEX>除法</SUBINDEX></INDEX>
    <INDEX>数<SUBINDEX>有理数</SUBINDEX></INDEX>
    <INDEX>数<SUBINDEX>整数，精确</SUBINDEX></INDEX>
    <INDEX>数<SUBINDEX>小数点</SUBINDEX></INDEX>
    <INDEX>数中的小数点</INDEX>
    <INDEX>MIT Scheme<SUBINDEX>数</SUBINDEX></INDEX>
    <INDEX>实现依赖<SUBINDEX>数</SUBINDEX></INDEX>
    <INDEX>数<SUBINDEX>实现依赖</SUBINDEX></INDEX>
    然而，MIT Scheme区分精确整数和小数值，两个整数相除得到一个有理数而不是小数。例如，10除以6得到5/3，而10.0除以6.0得到1.6666666666666667。（我们将在<SPACE></SPACE><REF NAME="sec:rationals"></REF>中学习如何实现对有理数的算术运算。）如果我们在平方根程序中以1作为初始猜测，而<LATEXINLINE>$x$</LATEXINLINE>是一个精确整数，那么平方根计算中产生的所有后续值将是有理数而非小数。对有理数和小数进行混合运算始终会得到小数，因此将初始猜测设为1.0会使所有后续值都变为小数。</FOOTNOTE></SCHEME></SPLITINLINE><COMMENT>脚注已移除：它是特定于Scheme的（甚至更具体来说：特定于MIT Scheme）</COMMENT><SNIPPET>
      <INDEX><DECLARATION>sqrt</DECLARATION></INDEX>
      <NAME>sqrt</NAME>
      <REQUIRES>sqrt_iter</REQUIRES>
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (sqrt-iter 1.0 x))
                </SCHEME>
                <JAVASCRIPT>
function sqrt(x) {
    return sqrt_iter(1, x);
}
                </JAVASCRIPT>
    </SNIPPET>
    If we type these
    <SPLITINLINE>
      <SCHEME>
	定义
      </SCHEME>
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE><SCHEMEINLINE>sqrt</SCHEMEINLINE>
    just as we can use any
    <SPLITINLINE>
      <SCHEME>
        过程：
      </SCHEME>
      <JAVASCRIPT>
        函数：
      </JAVASCRIPT>
    </SPLITINLINE><SNIPPET PAGE="24">
      <NAME>sqrt_example</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt 9)
      </SCHEME>
      <SCHEMEOUTPUT>
3.00009155413138
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(9);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
3.00009155413138
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="24" HIDE="yes">
      <NAME>sqrt_example_2</NAME>
      <SCHEME>
(sqrt 5)
      </SCHEME>
      <JAVASCRIPT>
sqrt(5);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <NAME>sqrt_example_3</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ 100 37))
      </SCHEME>
      <SCHEMEOUTPUT>
11.704699917758145
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(100 + 37);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
11.704699917758145
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_4</NAME>
      <EXPECTED>1.7739279023207892</EXPECTED>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ (sqrt 2) (sqrt 3)))
      </SCHEME>
      <SCHEMEOUTPUT>
1.7739279023207892
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(sqrt(2) + sqrt(3));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1.7739279023207892		
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_5</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(square (sqrt 1000))
      </SCHEME>
      <SCHEMEOUTPUT>
1000.000369924366
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square(sqrt(1000));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1000.000369924366
      </JAVASCRIPT_OUTPUT>
      <INDEX>square root<CLOSE></CLOSE></INDEX>
      <INDEX>Newton<APOS></APOS>s method<SUBINDEX><ORDER>square</ORDER>for square roots<CLOSE></CLOSE></SUBINDEX></INDEX>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> 程序还说明了我们迄今为止介绍的简单
    <SPLITINLINE>
      <SCHEME>
	<INDEX>迭代过程<SUBINDEX>通过过程调用实现<OPEN></OPEN></SUBINDEX></INDEX>
	过程式
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>迭代过程<SUBINDEX>通过函数调用实现<OPEN></OPEN></SUBINDEX></INDEX>
	函数式
      </JAVASCRIPT>
    </SPLITINLINE>
    语言足以编写可以在 C 或 Pascal 中编写的任何纯数值程序。这似乎令人惊讶，因为我们在语言中没有包含任何指示计算机反复执行某些操作的迭代<INDEX>循环结构</INDEX>
    （循环）结构。
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Sqrt-iter</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	函数 <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    另一方面，演示了如何使用普通的过程调用而无需任何特殊结构来完成迭代。
    <SPLITINLINE><SCHEME>过程。</SCHEME><JAVASCRIPT>函数。</JAVASCRIPT></SPLITINLINE><FOOTNOTE>对使用
    <SPLITINLINE>
      <SCHEME>
	过程
      </SCHEME>
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    调用来实现迭代的效率问题感到担忧的读者请注意<QUOTE>尾递归</QUOTE>在<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>中的说明。</FOOTNOTE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>迭代过程<SUBINDEX>通过过程调用实现<CLOSE></CLOSE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>迭代过程<SUBINDEX>通过函数调用实现<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <EXERCISE>
    <SPLIT><SCHEME>
        Alyssa P. Hacker 不明白为什么<SCHEMEINLINE>if</SCHEMEINLINE>需要作为
        <INDEX><DECLARATION>if</DECLARATION><SUBINDEX>为什么是特殊形式</SUBINDEX></INDEX>
        <INDEX>特殊形式<SUBINDEX>需要</SUBINDEX></INDEX>
        特殊形式提供。<QUOTE>为什么我不能只是用<SCHEMEINLINE>cond</SCHEMEINLINE>来定义它作为一个普通过程呢？</QUOTE>她问。
        Alyssa<APOS></APOS>的朋友Eva Lu Ator声称这确实可以做到，她定义了一个<SCHEMEINLINE>if</SCHEMEINLINE>的新版本：
        <SNIPPET>
          <NAME>new_if</NAME>
          <SCHEME>
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
          </SCHEME>
        </SNIPPET>
        Eva 为 Alyssa 演示了程序：
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 2 3) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
5
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 1 1) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
0
          </SCHEMEOUTPUT>
        </SNIPPET>
        兴奋的 Alyssa 使用 <SCHEMEINLINE>new-if</SCHEMEINLINE> 重写了平方根程序：
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <SCHEME>
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
          </SCHEME>
        </SNIPPET>
        当 Alyssa 尝试使用此方法计算平方根时会发生什么？解释。
        <LABEL NAME="ex:new-if"></LABEL>
      </SCHEME><JAVASCRIPT>
        Alyssa P. Hacker 不喜欢<INDEX>语法形式<SUBINDEX>需要</SUBINDEX></INDEX>
        <INDEX>条件表达式<SUBINDEX>为什么是语法形式</SUBINDEX></INDEX>
	条件表达式的语法，包括字符<SCHEMEINLINE>?</SCHEMEINLINE>和<SCHEMEINLINE>:</SCHEMEINLINE>。
	<QUOTE>为什么我不能简单地声明一个普通的条件函数，其应用方式与条件表达式相同呢？</QUOTE>她问道。<FOOTNOTE>
	作为最初的<EM>计算机程序的构造与解释</EM>中的Lisp黑客，Alyssa更喜欢一种更简单、更统一的语法。</FOOTNOTE>
	Alyssa 的朋友 Eva Lu Ator 声称这确实可以做到，并且她声明了一个<JAVASCRIPTINLINE>conditional</JAVASCRIPTINLINE>
	函数，如下所示：
        <SNIPPET>
          <NAME>conditional</NAME>
          <JAVASCRIPT>
function conditional(predicate, then_clause, else_clause) {		    
    return predicate ? then_clause : else_clause;
}
	  </JAVASCRIPT>
        </SNIPPET>
        Eva 为 Alyssa 演示了程序：
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <JAVASCRIPT>
conditional(2 === 3, 0, 5);
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
5
	  </JAVASCRIPT_OUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <JAVASCRIPT>
conditional(1 === 1, 0, 5);
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
0
	  </JAVASCRIPT_OUTPUT>
        </SNIPPET>
	高兴的Alyssa使用<SCHEMEINLINE>conditional</SCHEMEINLINE>重写了平方根程序：
        <SNIPPET>
	  <NAME>delighted</NAME>
          <REQUIRES>conditional</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <JAVASCRIPT>
function sqrt_iter(guess, x) {
    return conditional(is_good_enough(guess, x),
                       guess,
                       sqrt_iter(improve(guess, x),
                                 x));
}
	  </JAVASCRIPT>
        </SNIPPET>
        当 Alyssa 尝试使用此方法计算平方根时会发生什么？解释。
        <LABEL NAME="ex:new-if"></LABEL>
	<SOLUTION>
	  任何调用<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>都会立即导致一个无限循环。原因是我们的应用序求值。<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>的返回表达式的求值需要首先求值其参数，包括递归调用<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>，无论谓词是求值为<EM>true</EM>还是<EM>false</EM>。当然，递归调用也是如此，因此<JAVASCRIPTINLINE>conditional</JAVASCRIPTINLINE>函数实际上从未真正被应用。
	</SOLUTION>
      </JAVASCRIPT></SPLIT>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:ex-sqrt-end-test"></LABEL>
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    测试用于计算平方根对于非常小的数字将不是很有效。此外，在实际计算机中，算术运算几乎总是在有限精度下进行。这使得我们的测试对非常大的数字不够充分。用例子解释这些语句，显示测试对于小数和大数如何失败的。实现
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的另一种策略是观察<SCHEMEINLINE>guess</SCHEMEINLINE>如何从一次迭代变化到下一次，并在变化是猜测的一小部分时停止。设计一个使用这种终止测试的平方根
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    这对于小数和大数效果更好吗？
    <SOLUTION>
      绝对容差0.001在计算一个小值的平方根时太大。例如，
      <JAVASCRIPTINLINE>sqrt(0.0001)</JAVASCRIPTINLINE>
      的结果是0.03230844833048122，而不是预期的值0.01，误差超过200%。
      <P></P>
      另一方面，对于非常大的值，舍入错误可能导致算法无法接近平方根，在这种情况下它将不会终止。
      <P></P>
      以下程序通过使用相对容差替换绝对容差来缓解这个问题。
      <SNIPPET>
        <REQUIRES>abs_definition</REQUIRES>
        <REQUIRES>average_definition</REQUIRES>
        <REQUIRES>sqrt</REQUIRES>
        <REQUIRES>improve</REQUIRES>
        <REQUIRES>sqrt_iter</REQUIRES>	
        <REQUIRES>square_definition</REQUIRES>	
	<EXAMPLE>example_1.8</EXAMPLE>
	<JAVASCRIPT>
const relative_tolerance = 0.0001;
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; guess * relative_tolerance;
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.8</NAME>
      <JAVASCRIPT>
display(sqrt(0.0001));
display(sqrt(4000000000000));
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:cube-root-newton"></LABEL>
    牛顿<APOS></APOS>方法用于
    <INDEX>立方根<SUBINDEX><ORDER>牛顿</ORDER>通过牛顿<APOS></APOS>的方法</SUBINDEX></INDEX>
    <INDEX>牛顿<APOS></APOS>方法<SUBINDEX><ORDER>立方</ORDER>用于立方根</SUBINDEX></INDEX>
    立方根基于这样一个事实：如果 <LATEXINLINE>$y$</LATEXINLINE> 是 <LATEXINLINE>$x$</LATEXINLINE> 的立方根的一个近似值，那么更好的近似值由以下公式给出：
    <LATEX>
      \[
      \begin{array}{lll}
      \dfrac{x/y^{2}+2y} {3}
      \end{array}
      \]
    </LATEX>
    使用此公式实现一个立方根
    <SPLITINLINE>
      <SCHEME>
	过程
      </SCHEME>
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    类似于平方根
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    （在<SPACE></SPACE><REF NAME="sec:proc-returned-values"></REF>部分，我们将看到如何实现牛顿<APOS></APOS>方法作为这些平方根和立方根的
    <SPLITINLINE>
      <SCHEME>过程的</SCHEME>
      <JAVASCRIPT>函数的抽象。）</JAVASCRIPT>
    </SPLITINLINE>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>example_1.9</EXAMPLE>
	<REQUIRES>abs_definition</REQUIRES>
	<REQUIRES>cube_definition</REQUIRES>
	<JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(cube(guess) - x) &lt; 0.001;
}
function div3(x, y) {
     return (x + y) / 3;
}
function improve(guess, x) {
    return div3(x / (guess * guess), 2 * guess);
}
function cube_root(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : cube_root(improve(guess, x), x);
}
	</JAVASCRIPT>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.9</NAME>
      <JAVASCRIPT>
	cube_root(3, 27);
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>
</SUBSECTION>
