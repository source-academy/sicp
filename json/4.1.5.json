[{"id":"/sicpjs/4.1.5","tag":"TITLE","body":"4.1.5  \n    Data as Programs"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In thinking about a\n    JavaScript\n    program that evaluates\n    JavaScript statements and\n    expressions, an analogy might be helpful.  One operational view of the\n    meaning of a program is that a \n    \n    program is a description of an abstract (perhaps infinitely large) machine.\n    For example, consider the familiar program to compute factorials:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0FYBQuAzAVwDsBjAFwEsB7E0AgQ0poCcrGAbAChIEpQAb1yhRoVgFMKRVvXoBeRaAwixasQH5lq9WoBcDZhTYce9ALTKBAKlAkA3LgC++Ji3Zdu2PvaA","body":"function factorial(n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n} "},{"body":"\n    We may regard this program as the description of a\n    \n    machine containing\n    parts that decrement, multiply, and test for equality, together with a\n    two-position switch and another factorial machine. (The factorial\n    machine is infinite because it contains another factorial machine\n    within it.)  Figure ","tag":"#text"},{"tag":"REF","body":"4.3","href":"/sicpjs/4.1.5#fig-4.3"},{"body":" is a flow\n    diagram for the factorial machine, showing how the parts are wired together.\n  ","tag":"#text"},{"tag":"FIGURE","scale":"90%","src":"img_original/ch4-Z-G-2.svg","id":"#fig-4.3","captionHref":"/sicpjs/4.1.5#fig-4.3","captionName":"Figure 4.3 ","captionBody":[{"body":"The factorial program, viewed as an abstract machine.\n      ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In a similar way, we can regard the evaluator as a very special\n    \n    machine that takes as input a description of a machine.  Given this\n    input, the evaluator configures itself to emulate the machine\n    described.  For example, if we feed our evaluator the definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":", as shown in\n    figure ","tag":"#text"},{"tag":"REF","body":"4.4","href":"/sicpjs/4.1.5#fig-4.4"},{"body":",\n    the evaluator will be able to compute factorials.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch4-Z-G-3.svg","id":"#fig-4.4","captionHref":"/sicpjs/4.1.5#fig-4.4","captionName":"Figure 4.4 ","captionBody":[{"body":"The evaluator emulating a factorial machine.\n          ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    From this perspective, our evaluator is seen to be a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"universal machine","tag":"#text"}]},{"body":".\n    It mimics other machines when these are described as \n    JavaScript \n    programs.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.1.5#footnote-1"},{"body":"\n    This is striking. Try to imagine an analogous evaluator for electrical\n    circuits.  This would be a circuit that takes as input a signal encoding the\n    plans for some other circuit, such as a filter.  Given this input, the\n    circuit evaluator would then behave like a filter with the same description.\n    Such a universal electrical circuit is almost unimaginably complex.  It is\n    remarkable that the program evaluator is a rather simple\n    program.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.1.5#footnote-2"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Another striking aspect of the evaluator is that it acts as a bridge between\n    the data objects that are manipulated by our programming language and the\n    programming language itself.  Imagine that the evaluator program\n    (implemented in JavaScript)\n    is running, and that a user is typing\n    programs\n    to the evaluator and\n    observing the results. From the perspective of the user, an input\n    program\n    such as \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x * x;"},{"body":"\n    is\n    a program\n    in the programming language, which the evaluator should\n    execute.\n    \n\tFrom the perspective of the evaluator, however, the program is simply\n\ta string or—after parsing—a tagged-list representation\n\tthat is to be manipulated according to a well-defined set of rules.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tThat the\n\t\n\tuser's programs are the evaluator's data need not\n\tbe a source of confusion.  In fact, it is sometimes convenient to ignore\n\tthis distinction, and to give the user the ability to explicitly\n\tevaluate a string as a JavaScript statement, using JavaScript's\n\tprimitive function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":"\n\tthat takes as argument a string. It parses the string\n\tand—provided that it is syntactically correct—evaluates the\n\tresulting representation in the environment in which\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":" is applied. Thus,\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQEY0FYBQuBTANwEMAbACgCJtQAqUbAbioEomg","body":"eval(\"5 * 5;\"); "},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":461,"program":"chap=4&prgrm=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-KAAAZLS0A5MxBSH8WzaKUUYpEufNi-Zn1ZjhHpAQ0CITJwOCxTivFWC6EkQFZ4GQz1V6ePcIKm5bKTCBGBaKxlzL-FVhoEK35zTPpFIdLKrww0yWhS1VKmVyq5VJI2WUo1rTZgDGvs8EV-VxW4p8lK3CJE3UKtVochwJr+jegCfgy1YMbWBuSYEmQzqQ2bwTeot1NKCkgqZSypQeqDU3yTZQhCWFUJqs1V6lwJKfX4p+NKlZSQg0HKLfWj8jzhWZq1dm3VVLvxdtzT2n8uk0mfRbTnD5VTxm1PbeWwyfa839v1YOwtGTUFiIgT8m+nrDLeslQS-1adhG-DeZxUAAAfU9TYd2+r3eeUi0gzJSFbA6Y9xhz2Xsrdi6tfrb3RPii+3lrS3lXOaBmmdtFU2-XTXOgdhDh2AbXcBUZE6vmnI9R2-q0HF3ztgwB5NYaD0fjeUoN1ehhqfJqWQaNIKbUEaPQh4kDqSOOpmshijy7MUuAjAaI0rHvmge2Vqq9Nauk-plW6HjkIUMMEbZ48TlLyo+lxIsxB8ot2hvmJG65kHvR6Ew-mpBcHk1cajJw2M06BMYZ1Qu782HQK6Vw0WsNxmJPVL42Vb0lU9BSLU19WtYnIwucnWQB17mKqYiBlIhzK6XB-vo6h1TJgACQGqLPbo-RK69tb-WxYPuumTrSctAVwemstqWHBqOsEQOhGBDNFsK+I1coXFMqc2D5ira06Gotqxk+r66OFcNK4Taj30SkddwgAZm6xvQrz46DimjoRr8-Ghtavw7Iw9+8iuPBcVdENm2GvhsGHUnbTm5O8e21-XriGmuVSVjtwIV3cGJSXVFjjo3RXwOFr8w2FKq27qy6JrJVYy7aHy8mypkmKPLatZZnNtnDWvdELMXm9McabvQ2l7lGXhPSpR2qFo53pOvovYKIT37JmkTx-zT7oOpuiCpzLUym0aAs3dQlooMaRuVeq3ThwDOGbzatiJ77w9Oe+257hLrHjWn88iHLTECs2etdF8N8XY2f2TcR2Ki+49ta6zJb9z9-3NyB1IrAksYOi3m4dNkhBc99emEsBzrNVn52B3s4qgrxcacm-nj9l3Oa4689ClnGeQIg-+61W7+e0vk2m3NiZa39ug6R4rf0X+yf9H8T5ZxxC08Qe+7tgbkFrqM-R6L+xpHLg2HQ5h5jv7mXhdnOiWwy3GS2H9bMyLsD2q4cwbs7HxzdoHQ19t8rnvNrW-JOBzk5IWvdR0ixIyfEhJ0FquS07srup5EsBMovhkuIV+sind9t9pPq+r93z0DES-D-MlXzBUCg-osaOyFf-f2I7+NAf-F5XG+LA95k43oU7RI757434H5Mjf7H7BbB6zAsggjgH0if5QEIGP4i7-7PIrZp4N447+oIHv4QEoFH7ARt4bwf6Mhtrd5b7tZVa4Q1bP7Tbe776Si15i6-AS4-pS6e7Jopi8zX70isGDbkqq4cHq4gGa6rxNoZJhoiQs7oJtSQ7fISRghPxJDkbfLBIY7lYEokRyEsyrBJL3aKGuarAqGghqEfiE5MCV4OAUFf5oFshzb6Fr7maWBML2F5z2HAb6byjVwUpgECG36oE-4n43zoSyGcjyHOhhrpr2EpTTKBBSrdw-QQFCF2ZELgzD4ciLDRGPCxERrxEAquLJHMFpGsoiz3Zfx8FSxBHCIVGGq2EIRREGFhFobO6CbpZfrAHN56EtGkHB4mFBbQ5gx6aDqMHCRggaFHwjEB7dpYb96NH7JQpqwwpwpcCIq8AopoDjYYpV7PikwUwHBXBUadEcLNDMprAnFYHbChBXD-hHRERXCkRNAXHCLiA3BHiKAfyhQlg0AaQShkH7FEB6LHEyR14OAACEuoJMZMlMSgJxXEoAwaQ+xSWkSgN24WXmpm5yE+uhXkWUWkIWXoYWmc2JMYCc2eLqnkPg3kvkIat4pxOBRujet4lOtJhJasQJDgpUJJzWjJju7Bo2VWRAegDByJexPJasneAp6qQp3OopoAUuEp0h020pFinUs4RA4J8pHWipmuKpxq2RpSMQ3g2g4+NBuhJp7QDqr4c0cBLg1pygFqPmQBtamy0STp3JEJoydps4Lp2hve8x34FqTRxYbYDwZA4IGpnShwPScpIK86syhpXuTcjoCmcZRggpcxmZ3EKpTCXKZsagFsMZG4ecJCZCkpWRaJGZympGZSWhEJoAno1KdZzGgIeZKJPWCmPhVUCmOpOZsK3onZVZQ5uQrcfZw52ZUeA6Y5bcSJXZG8GU782UEgHUsZbZ0QEWiEDo+SE+WgoIFMmmqS7KqiB5R5W5t8oQLZREYac5x5gY9ZgYv4DQO5q5mRMg555MD5wSAAPGEF+UoJeehI8UoCRNiHQFkWQLULZBYQgpvFULkZtBkCRKAAANQ3F1Q-BmRRnyQHDKbGAYUOqoUYVVEWDYWEigh4VAV6LIL4QsCERgUQXEBiBUSwWWF6wIVRHIXRLoWYXFQUW4VED4UJrBJEWkR8VkWbwkyUXUWXlNFtgVBVA+E3KLK4kPatLjCuBlCQx7lTCfRCJrCbm0UpyOwl5ZAZ4EVSWUgGDaXohxnHh0CRnRk5SWKzgcxSUZCLKnlBk-m3xTChB9rAVfxeXbzWZ+V6DzryVLyvRWhezjA+WFkJ6rnrkbiWovIMXHRqWgFkBNDeSgCBrSLFAezJwMJBSyKsDeh5wpHpkRpAphhgyGW3g9nKbNXDl6BzkTltW5Ae5TD8SOQ95aWKW6WLxSEjpYQqUNzZXRDqWtSaW2XDW5mmUWAGVhXGXPnLWhzmXp6kJ+XWUJh2UjWOXOUpVuUFQeUhUpr4I+V9pWVfyhApi-BBU2LMb+XLSbxhVu6iW-hRW0VFWpBORxXuQJUcqcpMqXDJWlkWmCigXZVkS5W7ySgFVVUsRGQloNr-VBAlVDxFRMJznVXe73n1WdwgpNWdWtVzm-idXDSTk9WY0DUM3YGGRDU6W5nLFgDQqsAcAbE8DIr8AoBVnKRmRqS0AaT0mUInSUauldHG6S2kQqQi3-FiCNqqmiAK0WTOCqSLCz4KHJTTmw7BmS32b5kVXq2i2WQhoqK+abgCg2pdoOqWBdqpQJFBA2p5oO0WB5rO0Ao2o3ke3NlUosDe2226FYL+1YLB3FA2ql6kIOox0yCfAu1JG6FSiMCLBSC1AOqp3p0wXbBJ2WA2qPEe2PFhj50WA2q2gUxzANCMBJKV3kzV3MBTBl3W1gVoX+2WAIl6C1DGBRRwyMQYW50t02pMQd0WBd2gA91RKMSsRD0+26FMRgEe2MSBB92WCsQr3D26GJJ6CpAT1T1r2MQxKT0WBb1+bABj2KTPGT29392gBgBz0h1+YACkl9+9t9oAjEz9J9oAZ9m4JEoNHd7909PlPd89fmkJHKQD19B9d9kDMUYDT9-9v5b9MDH9jE-5FgiDUduhv5UUY9wDh9oAeDWDf9YFMMqD3d6DoAcMpD4D-9MM+Du9gQhDd9jDdDSDYFkJl9n9QQa9Fg0JFgJxAoPUTCZtSt4tuCym0UkwQCXaeg4jYt0KojptwtGt8UdADQAAVl8SorIxpkIFEr7Wo+bQ6mMd1MUYoxbZQvorgGIyYxI7RlbVKjamCq7A6m45tC3YkTapAGQC7O4JnbvX4wE7dN49MhXQoA3bAJAB7fXc4DE+Ew0pE1XQAKL+3xOpNJMlG6EAByUguTl9+TuTb1X8Kjb4zZDjYttGvZMjgQQCFAUSfaFAv4Vj8274QcPE9j5k5t7TG2NNdTgCGmjTa9YxLTrTVTDoTjPUqtDgxkpkPTEj6JNkkkWCTJhk8zhIr+h4LAoklFzgWjUg0gW8ZkxZtyaUbTWtn5G4utlG5haz8+j1ylUNBU6z6sVwZip1mpBUb8rBbT8UdZUlLUbTNTBFxRdivz-i-z0pmjOj1AziiRgoIL62H4NN2TX8SVxZJkLzc+UhBZ4NoIbYr5BOrl3zkUMUTz1QOLSgMzhcZUKYYF2AoAx92AXEnEkVBLRLkQOL3EQAA","body":"evaluate(parse(\"5 * 5;\"), the_global_environment); "},{"body":"\n\twill both return 25.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.1.5#footnote-3"}]},{"tag":"EXERCISE","title":"Exercise 4.15","id":"#ex-4.15","child":[{"body":"\n    Given a one-argument\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    and an object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    is said to \"","tag":"#text"},{"body":"halt","tag":"#text"},{"body":"\" on\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" if evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f(a)"},{"body":"\n    returns a value (as opposed to terminating with an error message or running\n    forever).\n    \n    Show that it is impossible to write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    that correctly determines whether\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    halts on\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" for any\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":"\n    and object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":".\n    Use the following reasoning: If you had such a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":",\n    you could implement the following program:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function run_forever() { return run_forever(); }\n\t\nfunction strange(f) {\n    return halts(f, f)\n           ? run_forever()\n           : \"halted\";\n}"},{"body":"\n    Now consider evaluating the expression\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"strange(strange)"},{"body":"\n    and show that any possible outcome (either halting or running forever)\n    violates the intended behavior of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.1.5#footnote-4"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.1.5#footnote-link-1","child":[{"body":"The fact that the machines are described in \n    JavaScript \n    is inessential.  If we give our evaluator a \n    JavaScript \n    program that behaves as an evaluator for some other language, say C, the \n    JavaScript \n    evaluator will emulate the C evaluator, which in turn can emulate any\n    machine described as a C program.  Similarly, writing a \n    JavaScript \n    evaluator in C produces a C program that can execute any \n    JavaScript \n    program.  The deep idea here is that any evaluator can emulate any other.\n    Thus, the notion of \"","tag":"#text"},{"body":"what can in principle be computed","tag":"#text"},{"body":"\"\n    (ignoring practicalities of time and memory required) is independent of the\n    language or the computer, and instead reflects an underlying notion of \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"computability","tag":"#text"}]},{"body":".  This was first demonstrated in a clear way by \n    \n    Alan M. Turing (1912–1954), whose 1936 paper laid the foundations\n    for theoretical \n    \n    computer science.  In the paper, Turing presented a simple computational\n    model—now known as a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Turing machine","tag":"#text"}]},{"body":"—and argued that any \"","tag":"#text"},{"body":"effective\n    process","tag":"#text"},{"body":"\" can be formulated as a program for such a machine.  (This\n    argument is known as the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Church–Turing thesis","tag":"#text"}]},{"body":".) Turing then implemented a universal machine,\n    i.e., a Turing machine that behaves as an evaluator for Turing-machine\n    programs.  He used this framework to demonstrate that there are well-posed\n    problems that cannot be computed by Turing machines (see\n    exercise ","tag":"#text"},{"tag":"REF","body":"4.15","href":"/sicpjs/4.1.5#ex-4.15"},{"body":"), and so by implication\n    cannot be formulated as \"","tag":"#text"},{"body":"effective processes.","tag":"#text"},{"body":"\"  Turing went on\n    to make fundamental contributions to practical computer science as well.\n    For example, he invented the idea of \n    \n    structuring programs using general-purpose subroutines.  See \n    Hodges 1983 for a biography of Turing.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.1.5#footnote-link-2","child":[{"body":"Some people find it counterintuitive that an evaluator,\n    which is implemented by a relatively simple\n    function,\n    can emulate programs that are more complex than the evaluator itself.  The\n    existence of a universal evaluator machine is a deep and wonderful property\n    of computation.\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Recursion theory","tag":"#text"}]},{"body":", a branch of mathematical logic, is concerned with\n    logical limits of computation.  \n    \n    Douglas Hofstadter's beautiful book ","tag":"#text"},{"tag":"EM","child":[{"body":"Gödel, Escher,\n    Bach","tag":"#text"}]},{"body":" (1979) explores some of these ideas.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.1.5#footnote-link-3","child":[{"body":"Note that\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval"},{"body":"\n\tmay not be available in the JavaScript environment that you are\n\tusing, or its use may be restricted for security reasons.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.1.5#footnote-link-4","child":[{"body":"Although\n    we stipulated that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    is given a\n    function\n    object, notice that this reasoning still applies even if\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"halts"},{"body":"\n    can gain access to the\n    function's\n    text and its environment.\n    \n    This is Turing's celebrated\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Halting Theorem","tag":"#text"}]},{"body":", which gave the\n    first clear example of a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"noncomputable","tag":"#text"}]},{"body":" problem, i.e., a well-posed\n    task that cannot be carried out as a computational\n    function.","tag":"#text"}]}]