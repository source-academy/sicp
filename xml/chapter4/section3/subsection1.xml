<SUBSECTION>
  <NAME>
    Amb and Search
  </NAME>

  <LABEL NAME="sec:amb"/>

  <TEXT>
    <!--  \indcode*{amb} -->
    To extend
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    to support nondeterminism, we introduce a new
    <SPLITINLINE>
      <SCHEME>special form</SCHEME>
      <JAVASCRIPT>syntactic form</JAVASCRIPT>
    </SPLITINLINE>
    called<SPACE/><SCHEMEINLINE>amb</SCHEMEINLINE>.<FOOTNOTE>The idea of
    <SCHEMEINLINE>amb</SCHEMEINLINE> for nondeterministic programming was
    <INDEX>McCarthy, John</INDEX>
    first described in 1961 by John McCarthy (see
    <CITATION>McCarthy 1967</CITATION>).</FOOTNOTE> The expression
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(amb </SCHEMEINLINE><LATEXINLINE>$e_1\ e_2\ldots e_n$</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>amb(</JAVASCRIPTINLINE><LATEXINLINE>$e_1,\ e_2,\ldots, e_n$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    returns the value of one of the <LATEXINLINE>$n$</LATEXINLINE> expressions
    <LATEXINLINE>$e_i$</LATEXINLINE> <QUOTE>ambiguously.</QUOTE> For example,
    the expression
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>list_non_det</NAME>
      <SCHEME>
(list (amb 1 2 3) (amb 'a 'b))
      </SCHEME>
      <JAVASCRIPT>
list(amb(1, 2, 3), amb("a", "b"));
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
list(amb(1, 2, 3), amb("a", "b"));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
    can have six possible values:
    <SNIPPET EVAL="no">
      <SCHEME>
(1 a) (1 b) (2 a) (2 b) (3 a) (3 b)
      </SCHEME>
      <JAVASCRIPT>
list(1, "a") list(1, "b") list(2, "a") 
list(2, "b") list(3, "a") list(3, "b")
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Amb</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	An <JAVASCRIPTINLINE>amb</JAVASCRIPTINLINE> expression
      </JAVASCRIPT>
    </SPLITINLINE>
    with a single choice produces an ordinary (single) value.
  </TEXT>

  <TEXT>
    <INDEX>failure, in nondeterministic computation</INDEX>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Amb</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	An <JAVASCRIPTINLINE>amb</JAVASCRIPTINLINE> expression
      </JAVASCRIPT>
    </SPLITINLINE>
    with no choices<EMDASH/>the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(amb)</SCHEMEINLINE><EMDASH/>is</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>amb()</JAVASCRIPTINLINE><EMDASH/>is
      </JAVASCRIPT>
    </SPLITINLINE>
    an expression with no acceptable values.  Operationally, we can think of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(amb)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>amb()</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as an expression that when evaluated causes the computation to
    <QUOTE>fail</QUOTE>: The computation aborts and no value is produced.
    Using this idea, we can express the requirement that a particular predicate
    expression <SCHEMEINLINE>p</SCHEMEINLINE> must be true as follows:
    <SNIPPET HIDE="yes">
      <NAME>require_non_det_example</NAME>
      <JAVASCRIPT>
const x = amb(1, 3, 5, 7, 9);
require(x &gt;= 4);
x;
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT>
    </SNIPPET>
      <!--  \indcode*{require} -->
      <!-- FIXME: include test case once this is fixed:
	   https://github.com/source-academy/js-slang/issues/638
      <EXPECTED>5</EXPECTED> -->
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>require_non_det</NAME>
      <EXAMPLE>require_non_det_example</EXAMPLE>
      <SCHEME>
(define (require p)
  (if (not p) (amb)))
      </SCHEME>
      <JAVASCRIPT>
function require(p) {
    return ! p ? amb() : "Satisfied require";      
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    With <SCHEMEINLINE>amb</SCHEMEINLINE> and
    <SCHEMEINLINE>require</SCHEMEINLINE>, we can implement the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>an-element-of</SCHEMEINLINE> procedure</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>an_element_of</JAVASCRIPTINLINE> function
      </JAVASCRIPT>
    </SPLITINLINE>
    used above:
    <SNIPPET HIDE="yes">
      <NAME>an_element_of_example</NAME>
      <JAVASCRIPT>
const xs = list("apple", "banana", "cranberry");
an_element_of(xs);	
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT>
    </SNIPPET>
      <!-- FIXME: include test case once this is fixed:
	   https://github.com/source-academy/js-slang/issues/638
      <EXPECTED>'apple'</EXPECTED> -->
      <!--  \indcode*{an-element-of} -->
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>an_element_of</NAME>
      <EXAMPLE>an_element_of_example</EXAMPLE>
      <SCHEME>
(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) (an-element-of (cdr items))))
      </SCHEME>
      <JAVASCRIPT>
function an_element_of(items) {
    require(! is_null(items));
    return amb(head(items), an_element_of(tail(items)));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>An-element-of</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	An application of <JAVASCRIPTINLINE>an_element_of</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    fails if the list is empty.  Otherwise it ambiguously returns either the
    first element of the list or an element chosen from the rest of the list.
  </TEXT>

  <TEXT>
    We can also express infinite ranges of choices.  The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    potentially returns any integer greater than or equal to some
    given<SPACE/><LATEXINLINE>$n$</LATEXINLINE>:
    <SNIPPET HIDE="yes">
      <NAME>an_integer_starting_from_example</NAME>
      <JAVASCRIPT>
const x = an_integer_starting_from(1);
require(x >= 4.5);
x;
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT>
    </SNIPPET>
      <!-- FIXME: include test case once this is fixed:
	   https://github.com/source-academy/js-slang/issues/638
      <EXPECTED>5</EXPECTED> -->
      <!--  \indcode*{an-integer-starting-from} -->
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>an_integer_starting_from</NAME>
      <EXAMPLE>an_integer_starting_from_example</EXAMPLE>
      <SCHEME>
(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))
      </SCHEME>
      <JAVASCRIPT>
function an_integer_starting_from(n) {
    return amb(n, an_integer_starting_from(n + 1));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    This is like the stream
    <SPLITINLINE>
      <SCHEME>procedure
      <SCHEMEINLINE>integers-starting-from</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
      <JAVASCRIPTINLINE>integers_starting_from</JAVASCRIPTINLINE>
    </SPLITINLINE>  
    described in section<SPACE/><REF NAME="sec:infinite-streams"/>, but with an
    important difference: The stream
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    returns an object that represents the sequence of all integers beginning
    with <LATEXINLINE>$n$</LATEXINLINE>, whereas the
    <SCHEMEINLINE>amb</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    returns a single integer.<FOOTNOTE>In actuality, the distinction between
    nondeterministically returning a single choice and returning all choices
    depends somewhat on our point of view.  From the perspective of the code
    that uses the value, the nondeterministic choice returns a single value.
    From the perspective of the programmer designing the code, the
    nondeterministic choice potentially returns all possible values, and the
    computation branches so that each value is investigated
    separately.</FOOTNOTE>
  </TEXT>

  <TEXT>
    <INDEX>time<SUBINDEX>in nondeterministic computing</SUBINDEX></INDEX>
    Abstractly, we can imagine that evaluating an
    <SCHEMEINLINE>amb</SCHEMEINLINE> expression causes time to split into
    branches, where the computation continues on each branch with one of the
    possible values of the expression.  We say that
    <SCHEMEINLINE>amb</SCHEMEINLINE> represents a 
    <INDEX>nondeterministic choice point</INDEX>
    <EM>nondeterministic choice point</EM>. If we had a machine with a
    sufficient number of processors that could be dynamically allocated, we
    could implement the search in a straightforward way.  Execution would
    proceed as in a sequential machine, until an <SCHEMEINLINE>amb</SCHEMEINLINE>
    expression is encountered.  At this point, more processors would be allocated
    and initialized to continue all of the parallel executions implied by the
    choice.  Each processor would proceed sequentially as if it were the only
    choice, until it either terminates by encountering a failure, or it further
    subdivides, or it finishes.<FOOTNOTE>One might object that this is a
    hopelessly inefficient mechanism.  It might require millions of processors
    to solve some easily stated problem this way, and most of the time most
    of those processors would be idle.  This objection should be taken in
    the context of history.  Memory used to be considered just such an
    expensive commodity.  
    <INDEX>memory<SUBINDEX>in 1964</SUBINDEX></INDEX>
    In 1964 a megabyte of RAM cost about <DOLLAR/>400,000. Now every personal
    computer has many megabytes of RAM, and most of the time most of that RAM is
    unused.  It is hard to underestimate the cost of mass-produced
    electronics.</FOOTNOTE>
  </TEXT>

  <TEXT>
    <INDEX>failure, in nondeterministic computation
    <SUBINDEX>searching and</SUBINDEX></INDEX>
    On the other hand, if we have a machine that can execute only one process
    (or a few concurrent processes), we must consider the alternatives
    sequentially. One could imagine modifying an evaluator to pick at random a
    branch to follow whenever it encounters a choice point.  Random choice,
    however, can easily lead to failing values. We might try running the
    evaluator over and over, making random choices and hoping to find a
    non-failing value, but it is better to 
    <INDEX>systematic search</INDEX><INDEX>search
    <SUBINDEX>systematic</SUBINDEX></INDEX>
    <EM>systematically search</EM> all possible execution paths. The
    <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator that we will develop and work
    with in this section implements a systematic search as follows: When the
    evaluator encounters an application of <SCHEMEINLINE>amb</SCHEMEINLINE>, it
    initially selects the first alternative.  This selection may itself lead to
    a further choice.  The evaluator will always initially choose the first
    alternative at each choice point.  If a choice results in a failure, then
    the evaluator
    <INDEX>automagically</INDEX>
    automagically<FOOTNOTE>Automagically: <QUOTE>Automatically, but in a way
    which, for some reason (typically because it is too complicated, or too ugly,
    or perhaps even too trivial), the speaker doesn<APOS/>t feel like
    explaining.</QUOTE>  
    <INDEX>Steele, Guy Lewis Jr.</INDEX><INDEX>Raymond, Eric</INDEX>
    (<CITATION>Steele 1983</CITATION>,
    <CITATION>Raymond 1993</CITATION>)</FOOTNOTE> 
    <INDEX>backtracking</INDEX>
    <EM>backtracks</EM> to the most recent choice point and tries the next
    alternative.  If it runs out of alternatives at any choice point, the
    evaluator will back up to the previous choice point and resume from there.
    This process leads to a search strategy known as 
    <INDEX>depth-first search</INDEX>
    <INDEX>search<SUBINDEX>depth-first</SUBINDEX></INDEX>
    <INDEX>chronological backtracking</INDEX>
    <EM>depth-first search</EM> or <EM>chronological
    backtracking</EM>.<FOOTNOTE>The integration of automatic search strategies
    <INDEX>automatic search<SUBINDEX>history of</SUBINDEX></INDEX>
    into programming languages has had a long and checkered history.  The first
    suggestions that nondeterministic algorithms might be elegantly encoded in a
    programming language with search and automatic backtracking came from
    <INDEX>Floyd, Robert</INDEX>
    Robert Floyd (1967).  
    <INDEX>Hewitt, Carl Eddie</INDEX>
    Carl Hewitt (1969) invented a programming language called 
    <INDEX>Planner</INDEX>
    Planner that explicitly supported automatic chronological backtracking,
    providing for a built-in depth-first search strategy.  
    <INDEX>Sussman, Gerald Jay</INDEX>
    <INDEX>Winograd, Terry</INDEX><INDEX>Charniak, Eugene</INDEX>
    Sussman, Winograd, and Charniak (1971) implemented a subset of this language,
    called 
    <INDEX>MicroPlanner</INDEX>
    MicroPlanner, which was used to support work in problem solving and robot
    planning. Similar ideas, arising from logic and theorem proving, led to the
    genesis in Edinburgh and Marseille of the elegant language 
    <INDEX>Prolog</INDEX>
    Prolog (which we will discuss in
    section<SPACE/><REF NAME="sec:logic-programming"/>).  After sufficient
    frustration with automatic search, 
    <INDEX>McDermott, Drew</INDEX><INDEX>Sussman, Gerald Jay</INDEX>
    McDermott and Sussman (1972) developed a language called 
    <INDEX>Conniver</INDEX>
    Conniver, which included mechanisms for placing the search strategy under
    programmer control.  This proved unwieldy, however, and 
    <INDEX>Sussman, Gerald Jay</INDEX><INDEX>Stallman, Richard M.</INDEX>
    Sussman and Stallman (1975) found a more tractable approach while
    investigating methods of symbolic analysis for electrical circuits.  They
    developed a non-chronological backtracking scheme that was based on tracing
    out the logical dependencies connecting facts, a technique that has come to
    be known as 
    <INDEX>dependency-directed backtracking</INDEX>
    <EM>dependency-directed backtracking</EM>.  Although their method was
    complex, it produced reasonably efficient programs because it did little
    redundant search.  
    <INDEX>Doyle, Jon</INDEX><INDEX>McAllester, David Allen</INDEX>
    <CITATION>Doyle 1979</CITATION> and McAllester
    (<CITATION>McAllester 1978</CITATION>, <CITATION>McAllester 1980</CITATION>)
    generalized and clarified the methods of Stallman and Sussman, developing a
    new paradigm for formulating search that is now called
    <INDEX>truth maintenance</INDEX>
    <EM>truth maintenance</EM>.  Modern problem-solving systems all use some
    form of truth-maintenance system as a substrate.  See 
    <INDEX>Forbus, Kenneth D.</INDEX><INDEX>deKleer, Johan</INDEX>
    <CITATION>Forbus and deKleer 1993</CITATION> for a discussion of elegant
    ways to build truth-maintenance systems and applications using truth
    maintenance.
    <INDEX>Zabih, Ramin</INDEX>
    <INDEX>McAllester, David Allen</INDEX>
    <INDEX>Chapman, David</INDEX>
    <CITATION>Zabih, McAllester, and Chapman 1987</CITATION> describes a
    nondeterministic extension to Scheme that is based on
    <SCHEMEINLINE>amb</SCHEMEINLINE>; it is similar to the interpreter described
    in this section, but more sophisticated, because it uses dependency-directed
    backtracking rather than chronological
    <INDEX>Winston, Patrick Henry</INDEX>
    backtracking.  <CITATION>Winston 1992</CITATION> gives an introduction to
    both kinds of backtracking.<LABEL NAME="foot:backtrack"/></FOOTNOTE>
  </TEXT>

  <SUBHEADING>
    <NAME>Driver loop</NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>driver loop
    <SUBINDEX>nondeterministic@in nondeterministic evaluator</SUBINDEX></INDEX>
    The driver loop for the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator has some
    unusual properties.  It reads an expression and prints the value of the
    first non-failing execution, as in the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>prime-sum-pair</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>prime_sum_pair</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    example shown above.  If we want to see the value of the next successful
    execution, we can ask the interpreter to backtrack and attempt to generate a
    second non-failing execution.
    <SPLIT>
      <SCHEME>
	This is signaled by typing the symbol
	<!--  \indcode*{try-again} -->
	<SCHEMEINLINE>try-again</SCHEMEINLINE>. If any expression except
	<SCHEMEINLINE>try-again</SCHEMEINLINE>
	is given, the interpreter will start a new problem, discarding the
	unexplored alternatives in the previous problem.
      </SCHEME>
      <JAVASCRIPT>
	This is signaled by typing 
	<!--  \indcode*{try-again} -->
	<LATEXINLINE>$\texttt{try again}$</LATEXINLINE>.
	If any other input except <LATEXINLINE>$\texttt{try again}$</LATEXINLINE>
	is given, the interpreter will start a new problem, discarding the
	unexplored alternatives in the previous problem.
      </JAVASCRIPT>
    </SPLIT>
    Here is a sample interaction:
    <SNIPPET EVAL="no">
      <SCHEME>
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval input:
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>interaction_non_det</NAME>
      <REQUIRES>is_prime2</REQUIRES>
      <REQUIRES>prime_sum_pair_non_det</REQUIRES>
      <SCHEME>
(prime-sum-pair '(1 3 5 8) '(20 35 110))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Starting a new problem
;;; Amb-Eval value:
(3 20)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
Starting a $new$ problem
amb-evaluate value:
[3, [20, null]]
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_RUN>
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEME>
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval input:
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>interaction_non_det_2</NAME>
      <REQUIRES>is_prime2</REQUIRES>
      <REQUIRES>prime_sum_pair_non_det</REQUIRES>
      <SCHEME>
try-again
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval value:
(3 110)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
try again
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate value:
[3, [110, null]]
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_RUN>
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEME>
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval input:
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>interaction_non_det_3</NAME>
      <REQUIRES>is_prime2</REQUIRES>
      <REQUIRES>prime_sum_pair_non_det</REQUIRES>
      <SCHEME>
try-again
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval value:
(8 35)

;;; Amb-Eval input:
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
try again
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate value:
[8, [35, null]]

amb-evaluate input:
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_RUN>
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>interaction_non_det_4</NAME>
      <REQUIRES>is_prime2</REQUIRES>
      <REQUIRES>prime_sum_pair_non_det</REQUIRES>
      <SCHEME>
try-again
      </SCHEME>
      <SCHEMEOUTPUT>
;;; There are no more values of
(prime-sum-pair (quote (1 3 5 8)) (quote (20 35 110)))
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
try again
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
There are no more values of
prime_sum_pair([1, [3, [5, [8, null]]]], [20, [35, [110, null]]])
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_RUN>
prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <SCHEME>
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Amb-Eval input:
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
amb-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>interaction_non_det_5</NAME>
      <REQUIRES>is_prime2</REQUIRES>
      <REQUIRES>prime_sum_pair_non_det</REQUIRES>
      <SCHEME>
(prime-sum-pair '(19 27 30) '(11 36 58))
      </SCHEME>
      <SCHEMEOUTPUT>
;;; Starting a new problem
;;; Amb-Eval value:
(30 11)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
prime_sum_pair(list(19, 27, 30), list(11, 36, 58));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
Starting a $new$ problem
amb-evaluate value:
[30, [11, null]]
      </JAVASCRIPT_OUTPUT>
      <JAVASCRIPT_RUN>
prime_sum_pair(list(19, 27, 30), list(11, 36, 58));
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT_RUN>
    </SNIPPET>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:amb-pythag-triples"/>
    <INDEX>Pythagorean triples
    <SUBINDEX>with nondeterministic programs</SUBINDEX></INDEX>
    <INDEX>nondeterministic programs
    <SUBINDEX>Pythagorean triples</SUBINDEX></INDEX>
    Write a
    <SPLITINLINE>
      <SCHEME>procedure
      <SCHEMEINLINE>an-integer-between</SCHEMEINLINE> 
      </SCHEME>
      <JAVASCRIPT>function
      <JAVASCRIPTINLINE>an_integer_between</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that returns an integer between two given bounds.  This can be used to
    implement a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that finds Pythagorean triples, i.e., triples of integers
    <LATEXINLINE>$(i,j,k)$</LATEXINLINE> between the given bounds such
    that <LATEXINLINE>$i \leq j$</LATEXINLINE> and
    <LATEXINLINE>$i^2 + j^2 =k^2$</LATEXINLINE>, as follows:
    <SNIPPET HIDE="yes">
      <NAME>pythagorean_triple_amb_example</NAME>
      <JAVASCRIPT>
a_pythogorean_triple_between(5, 15);
// Press "Run" for the first solution. Type
// try again
// in the REPL on the right, for more solutions
      </JAVASCRIPT>
    </SNIPPET>
      <!-- FIXME: include test case once this is fixed:
	   https://github.com/source-academy/js-slang/issues/638
      <EXPECTED>what</EXPECTED> -->
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>pythagorean_triple_amb</NAME>
      <EXAMPLE>pythagorean_triple_amb_example</EXAMPLE>
      <SCHEME>
(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j high)))
        (require (= (+ (* i i) (* j j)) (* k k)))
        (list i j k)))))
      </SCHEME>
      <JAVASCRIPT>
function a_pythogorean_triple_between(low, high) {      
    const i = an_integer_between(low, high);
    const j = an_integer_between(i, high);
    const k = an_integer_between(j, high);
    require(i * i + j * j === k * k);
    return list(i, j, k);
}
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:amb-pythag-triples_2"/>
    <INDEX>Pythagorean triples
    <SUBINDEX>with nondeterministic programs</SUBINDEX></INDEX>
    <INDEX>nondeterministic programs
    <SUBINDEX>Pythagorean triples</SUBINDEX></INDEX>
    Exercise<SPACE/><REF NAME="ex:stream-pythagorean-triples"/> discussed how to
    generate the stream of <EM>all</EM> Pythagorean triples, with no upper bound
    on the size of the integers to be searched.  Explain why simply replacing
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>an-integer-between</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>an_integer_between</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    by
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>an-integer-starting-from</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>an_integer_starting_from</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    in the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    in
    exercise<SPACE/><REF NAME="ex:amb-pythag-triples"/> is not an adequate way to
    generate arbitrary Pythagorean triples.  Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that actually will accomplish this.  (That is, write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for which repeatedly typing
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>try-again</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<LATEXINLINE>$\texttt{try again}$</LATEXINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    would in principle eventually generate all Pythagorean triples.)
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:amb-pythag-triples_3"/>
    <INDEX>Pythagorean triples
    <SUBINDEX>with nondeterministic programs</SUBINDEX></INDEX>
    <INDEX>nondeterministic programs
    <SUBINDEX>Pythagorean triples</SUBINDEX></INDEX>
    Ben Bitdiddle claims that the following method for generating Pythagorean
    triples is more efficient than the one in
    exercise<SPACE/><REF NAME="ex:amb-pythag-triples"/>.  Is he correct?
    (Hint: Consider the number of possibilities that must be explored.)
    <SNIPPET HIDE="yes">
      <NAME>a_pythagorean_triple_between_2_example</NAME>
      <JAVASCRIPT>
function is_integer(x) {
    return x === math_floor(x);
}
a_pythagorean_triple_between(5, 15);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET CHAP="3" VARIANT="non-det">
      <NAME>a_pythagorean_triple_between_2</NAME>
      <EXAMPLE>a_pythagorean_triple_between_2_example</EXAMPLE>
      <SCHEME>
(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high))
        (hsq (* high high)))
    (let ((j (an-integer-between i high)))
      (let ((ksq (+ (* i i) (* j j))))
        (require (&gt;= hsq ksq))
        (let ((k (sqrt ksq)))
          (require (integer? k))
          (list i j k))))))
      </SCHEME>
      <JAVASCRIPT>
function a_pythagorean_triple_between(low, high) {
    const i = an_integer_between(low, high);
    const hsq = high * high;
    const j = an_integer_between(i, high);
    const ksq = i * i + j * j;
    require(hsq &gt;= ksq);
    const k = math_sqrt(ksq);
    require(is_integer(k));
    list(i, j, k);
}
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE>
</SUBSECTION>
