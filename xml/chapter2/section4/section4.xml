<SECTION>
  <NAME>Multiple Representations for Abstract Data</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:multiple-reps"/>

  <INDEX>data abstraction</INDEX>

  <TEXT>
    We have introduced data abstraction, a methodology for structuring systems
    in such a way that much of a program can be specified independent of the
    choices involved in implementing the data objects that the program
    manipulates.  For example, we saw in
    section<SPACE/><REF NAME="sec:rationals"/> how to separate the task of
    designing a program that uses rational numbers from the task of implementing
    rational numbers in terms of the computer language<APOS/>s primitive
    mechanisms for constructing compound data.  The key idea was to erect an
    <INDEX>abstraction barriers</INDEX>
    abstraction barrier<EMDASH/>in this case, the selectors and constructors for
    rational numbers
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>make-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>make_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>numer</SCHEMEINLINE>,
    <SCHEMEINLINE>denom</SCHEMEINLINE>)<EMDASH/>that isolates the way rational
    numbers are used from their underlying representation in terms of list
    structure.  A similar abstraction barrier isolates the details of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that perform rational arithmetic
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>add-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-rat</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_rat</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-rat</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_rat</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    from the <QUOTE>higher-level</QUOTE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    that use rational numbers.  The resulting program has the structure shown
    in figure<SPACE/><REF NAME="fig:abstraction-barriers"/>.
  </TEXT>
  <TEXT>
    These data-abstraction barriers are powerful tools for controlling
    complexity.  By isolating the underlying representations of data
    objects, we can divide the task of designing a large program into
    smaller tasks that can be performed separately.  But this kind of data
    abstraction is not yet powerful enough, because it may not always make
    sense to speak of <QUOTE>the underlying representation</QUOTE> for a
    data object.
  </TEXT>
  <TEXT>
    For one thing, there might be more than one useful representation for
    a data object, and we might like to design systems that can deal with
    multiple representations.  To take a simple example, complex numbers
    may be represented in two almost equivalent ways: in rectangular form
    (real and imaginary parts) and in polar form (magnitude and angle).
    Sometimes rectangular form is more appropriate and sometimes polar
    form is more appropriate.  Indeed, it is perfectly plausible to
    imagine a system in which complex numbers are represented in both
    ways, and in which the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for manipulating complex numbers work with either representation.
  </TEXT>
  <TEXT>
    More importantly, programming systems are often designed by many
    people working over extended periods of time, subject to requirements
    that change over time.  In such an environment, it is simply not
    possible for everyone to agree in advance on choices of data
    representation.  So in addition to the data-abstraction barriers that
    isolate representation from use, we need abstraction barriers that
    isolate different design choices from each other and permit different
    choices to coexist in a single program.  Furthermore, since large
    programs are often created by combining
    <SPLITINLINE>
      <SCHEME>pre-existing</SCHEME>
      <JAVASCRIPT>preexisting</JAVASCRIPT>
    </SPLITINLINE>
    modules that were
    designed in isolation, we need conventions that permit programmers to
    incorporate modules into larger systems 
    <INDEX>additivity</INDEX>
    <EM>additively</EM>, that is,
    without having to redesign or reimplement these modules.
  </TEXT>
  <TEXT>
    In this section, we will learn how to cope with data that may be
    represented in different ways by different parts of a program.  This
    requires constructing 
    <INDEX>generic <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></INDEX>
    <INDEX><FUNCTION/><SUBINDEX>generic</SUBINDEX></INDEX>
    <EM>generic <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></EM><EMDASH/><SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    that can operate on data that may be represented in more than one way.  Our
    main technique for building generic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    will be to work in terms of data objects that have 
    <INDEX>type tag</INDEX>
    <EM>type tags</EM>, that is, data objects that include explicit information
    about how they are to be processed. We will also discuss 
    <INDEX>data-directed programming</INDEX>
    <EM>data-directed</EM> programming, a powerful and convenient
    implementation strategy for additively assembling systems with generic
    operations.
  </TEXT>
  <TEXT>
    We begin with the simple complex-number example. We will see how
    type tags and data-directed style enable us to design separate
    rectangular and polar representations for complex numbers while
    maintaining the notion of an abstract
    <INDEX>complex-number arithmetic</INDEX>
    <INDEX>arithmetic<SUBINDEX>on complex numbers</SUBINDEX></INDEX>
    <QUOTE>complex-number</QUOTE>
    data object.
    We will accomplish this by defining arithmetic
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    for complex numbers
    <SPLITINLINE>
      <SCHEME>(<SCHEMEINLINE>add-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>(<JAVASCRIPTINLINE>add_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sub-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sub_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>mul-complex</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>mul_complex</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>div-complex</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>div_complex</JAVASCRIPTINLINE>)
      </JAVASCRIPT>
    </SPLITINLINE>
    in terms of generic selectors that access parts of a complex number
    independent of how the number is represented.  The resulting complex-number
    system, as shown in
    <SPLITINLINE>
      <SCHEME>
	figure<SPACE/><REF NAME="fig:complex-system_scheme"/>,
      </SCHEME>
      <JAVASCRIPT>
	figure<SPACE/><REF NAME="fig:complex-system"/>,
      </JAVASCRIPT>
    </SPLITINLINE>
    contains two different kinds of
    <INDEX>abstraction barriers<SUBINDEX>in complex-number system</SUBINDEX></INDEX>
    abstraction barriers.  The <QUOTE>horizontal</QUOTE> abstraction barriers
    play the same role as the ones in
    figure<SPACE/><REF NAME="fig:abstraction-barriers"/>.  They isolate
    <QUOTE>higher-level</QUOTE> operations from <QUOTE>lower-level</QUOTE>
    representations.  In addition, there is a <QUOTE>vertical</QUOTE> barrier
    that gives us the ability to separately design and install alternative
    representations.
    <SPLIT>
      <SCHEME>
	<FIGURE>
          <FIGURE src="img_original/ch2-Z-G-54.svg"></FIGURE>
	  <CAPTION>
	    Data-abstraction barriers in the complex-number system.
	  </CAPTION>
	  <LABEL NAME="fig:complex-system_scheme"/>
	</FIGURE>
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
          <FIGURE scale="0.59" src="img_javascript/ch2-Z-G-54.svg"></FIGURE>
	  <CAPTION>
	    Data-abstraction barriers in the
	    complex-number system.
	  </CAPTION>
	  <LABEL NAME="fig:complex-system"/>
	</FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    In section<SPACE/><REF NAME="sec:generic-operators"/> we will show how to
    use type tags and data-directed style to develop a generic arithmetic
    package.  This provides
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    (<SCHEMEINLINE>add</SCHEMEINLINE>, <SCHEMEINLINE>mul</SCHEMEINLINE>, and so
    on) that can be used to manipulate all sorts of <QUOTE>numbers</QUOTE> and
    can be easily extended when a new kind of number is needed. In
    section<SPACE/><REF NAME="sec:symbolic-algebra"/>, we<APOS/>ll show how to
    use generic arithmetic in a system that performs symbolic algebra.
  </TEXT>

  <!-- Subsection 1 : Representations for Complex Numbers -->
  &amp;subsection2.4.1;

  <!-- Subsection 2 : Tagged Data -->
  &amp;subsection2.4.2;

  <!-- Subsection 3 : Data-Directed Programming and Additivity -->
  &amp;subsection2.4.3;

</SECTION>
