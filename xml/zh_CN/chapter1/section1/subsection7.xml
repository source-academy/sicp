<SUBSECTION>
   <NAME>示例：牛顿求平方根方法</NAME> 
  <LABEL NAME="sec:sqrt"></LABEL>

   <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX>数学函数与.<OPEN></OPEN></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>过程与.<OPEN></OPEN></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>数学函数与.<OPEN></OPEN></SUBINDEX></INDEX>
	<INDEX>函数（数学）<SUBINDEX>JavaScript函数与.<OPEN></OPEN></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    如上所述，非常类似于普通的数学函数。它们指定一个由一个或多个参数决定的值。但是数学函数与计算机
    <SPLITINLINE>
      <SCHEME>过程之间存在一个重要区别。</SCHEME>
      <JAVASCRIPT>函数之间存在一个重要区别。</JAVASCRIPT>
      </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        计算机函数
      </JAVASCRIPT>
    </SPLITINLINE>
    必须是有效的。
  </TEXT> 
   <TEXT>
    以计算平方根的问题为例。我们可以将平方根函数定义为
    <LATEX>
      \[
      \sqrt{x}\ =\text{ 满足 }y \geq 0\text{ 且 }
      y^2\ =\ x\text{ 的 }y
      \]
    </LATEX>
    这描述了一个完全合法的数学函数。我们可以用它来判断一个数是否是另一个数的平方根，或者推导关于平方根的一般性质。另一方面，这一定义并没有描述一个
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>计算机函数。</JAVASCRIPT>
    </SPLITINLINE>
    实际上，它几乎没有告诉我们如何实际找到一个给定数的平方根。如果用
    <SPLITINLINE>
      <SCHEME>伪Lisp：</SCHEME>
      <JAVASCRIPT>伪JavaScript：</JAVASCRIPT>
    </SPLITINLINE>
    换一种说法也无济于事：
    <SNIPPET LATEX="yes">
      <SCHEME>
(define (sqrt x)
  (the y (and (&gt;= y 0)
              (= (square y) x))))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return the y $\texttt{with}$ y &gt;= 0 &amp;&amp; square(y) === x;
}
      </JAVASCRIPT>
    </SNIPPET>
    这只会使问题更加突出。
  </TEXT> 
   <SHORT_PAGE LINES="2"></SHORT_PAGE> 
   <TEXT>   
    之间的对比    
    <SPLITINLINE>    
      <SCHEME>    
        函数和过程    
      </SCHEME>    
      <JAVASCRIPT>    
        数学函数和计算机函数    
      </JAVASCRIPT>    
    </SPLITINLINE>    
    反映了一般性区别，即描述事物属性和描述如何做事之间的区别，或者有时所说的，    
    <INDEX>声明式知识与命令式知识的区别</INDEX>    
    <INDEX>命令式知识与声明式知识的区别</INDEX>    
    声明式知识和命令式知识之间的区别。在    
    <INDEX>数学<SUBINDEX>计算机科学与之相对</SUBINDEX></INDEX>    
    <INDEX>计算机科学<SUBINDEX>数学与之相对</SUBINDEX></INDEX>    
    数学中，我们通常关注声明式（是什么的）描述，    
    而在计算机科学中，我们通常关注命令式（如何做的）描述。<FOOTNOTE>声明式和命令式描述密切相关，    
    数学和计算机科学也是如此。例如，要表明程序产生的答案是    
    <INDEX>程序的正确性</INDEX>    
    <QUOTE>正确</QUOTE>    
    ，就是对程序做出一个声明式的陈述。    
    有大量研究旨在建立证明程序正确的技术，并且该领域技术难点主要在于协调    
    命令式陈述（程序构造的基础）和声明式陈述（可用于推导）的转变。    
    <SPLITINLINE>    
      <SCHEME>    
        在相关领域，编程语言设计中的一个重要当前研究领域是探索所谓的    
        <INDEX>编程语言<SUBINDEX>非常高级</SUBINDEX></INDEX>    
        <INDEX>非常高级语言</INDEX>    
        ，在其中人们实际上用声明式语句进行编程。    
      </SCHEME>    
      <JAVASCRIPT>    
        在相关领域，编程语言设计者探索了所谓的    
        <INDEX>编程语言<SUBINDEX>非常高级</SUBINDEX></INDEX>    
        <INDEX>非常高级语言</INDEX>    
        ，其中人们实际上用声明式语句进行编程。    
      </JAVASCRIPT>    
    </SPLITINLINE>    
    其思想是使解释器足够智能，以至于在程序员指定的<QUOTE>是什么</QUOTE>知识基础上，    
    它们能够自动生成<QUOTE>如何做</QUOTE>的知识。这在一般情况下无法实现，但在某些重要领域已取得进展。    
    我们将在第<SPACE></SPACE><REF NAME="chap:meta"></REF>章重新探讨这一思想。</FOOTNOTE>    
    <SPLITINLINE>    
      <SCHEME>    
        <INDEX>过程<SUBINDEX>数学函数与之相对</SUBINDEX></INDEX>    
        <INDEX>函数（数学）<SUBINDEX>过程与之相对</SUBINDEX></INDEX>    
      </SCHEME>    
      <JAVASCRIPT>    
        <INDEX><FUNCTION></FUNCTION><SUBINDEX>数学函数与之相对</SUBINDEX></INDEX>    
        <INDEX>函数（数学）<SUBINDEX>JavaScript 函数与之相对</SUBINDEX></INDEX>    
      </JAVASCRIPT>    
    </SPLITINLINE>    
  </TEXT> 
   <TEXT>  
    如何计算  
    <INDEX>平方根<OPEN></OPEN></INDEX>  
    <INDEX>牛顿<APOS></APOS>法<SUBINDEX><ORDER>平方根的平方</ORDER>计算<OPEN></OPEN></SUBINDEX></INDEX>  
    平方根？最常用的方法是使用  
    牛顿<APOS></APOS>的连续逼近法，它指出每当我们对一个数  
    <LATEXINLINE>$x$</LATEXINLINE>的平方根的值有一个猜测  
    <LATEXINLINE>$y$</LATEXINLINE>时，我们可以通过将  
    <LATEXINLINE>$y$</LATEXINLINE>与  
    <LATEXINLINE>$x/y$</LATEXINLINE>取平均来进行简单运算，得到一个更好的猜测（更接近实际平方根）。<FOOTNOTE>该平方根算法实际上是牛顿<APOS></APOS>法的一个特例，牛顿法是一种用于求方程根的通用技术。平方根算法本身由公元一世纪的  
    <INDEX>亚历山大港的海龙</INDEX>  
    海龙（Heron of Alexandria）开发。我们将在第<SPACE></SPACE><REF NAME="sec:proc-returned-values"></REF>节中看到如何将通用牛顿<APOS></APOS>法表示为  
    <SPLITINLINE>  
      <SCHEME>  
        Lisp 过程  
      </SCHEME>  
      <JAVASCRIPT>  
        JavaScript 函数  
      </JAVASCRIPT>  
    </SPLITINLINE>  
    。</FOOTNOTE>  
    例如，我们可以如下计算2的平方根。假设我们的初始猜测值是1：  
    <LATEX>  
      \[  
      \begin{array}{lll}  
      \textrm{猜测} &amp; \textrm{商} &amp; \textrm{平均} \\[1em]  
      1      &amp; {\displaystyle \frac{2}{1} = 2}           &amp; {\displaystyle \frac{(2+1)}{2} = 1.5} \\[1em]  
      1.5    &amp; {\displaystyle \frac{2}{1.5} = 1.3333}    &amp; {\displaystyle \frac{(1.3333+1.5)}{2} = 1.4167} \\[1em]  
      1.4167 &amp; {\displaystyle \frac{2}{1.4167} = 1.4118} &amp; {\displaystyle \frac{(1.4167+1.4118)}{2} = 1.4142} \\[1em]  
      1.4142 &amp; \ldots &amp; \ldots  
      \end{array}  
      \]  
    </LATEX>  
    通过继续该过程，我们得到对平方根越来越好的近似。  
  </TEXT> 
  <TEXT>  
    现在让我们用函数来形式化这个过程。我们从一个  
    <INDEX>被开方数</INDEX>  
    （我们试图计算其平方根的数）的值和一个猜测值开始。如果这个猜测对我们的目的来说足够好，我们就完成了；如果不够好，我们必须用改进的猜测重复这个过程。我们将这个基本策略写成一个  
    <SPLITINLINE>  
      <SCHEME>  
        过程：  
      </SCHEME>  
      <JAVASCRIPT>  
        函数：  
      </JAVASCRIPT>  
    </SPLITINLINE>  
<SNIPPET>
      <NAME>sqrt_iter</NAME>
      <REQUIRES>is_good_enough</REQUIRES>
      <REQUIRES>improve</REQUIRES>
      <EXAMPLE>sqrt_iter_example</EXAMPLE>
      <SCHEME>
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
      </SCHEME>
      <JAVASCRIPT>
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : sqrt_iter(improve(guess, x), x);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_iter_example</NAME>
      <SCHEME>
(sqrt-iter 3 25)
      </SCHEME>
      <JAVASCRIPT>
sqrt_iter(3, 25);
      </JAVASCRIPT>
    </SNIPPET>  
    猜测值通过将其与被开方数除以旧猜测值得到的商取平均来改进：  
<SNIPPET>
      <NAME>improve</NAME>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>improve_example</EXAMPLE>
      <SCHEME>
(define (improve guess x)
  (average guess (/ x guess)))
      </SCHEME>
      <JAVASCRIPT>
function improve(guess, x) {
    return average(guess, x / guess);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>improve_example</NAME>
      <SCHEME>
(improve 3 25)
      </SCHEME>
      <JAVASCRIPT>
improve(3, 25);
      </JAVASCRIPT>
    </SNIPPET> 
    其中
<SNIPPET>
      <INDEX><DECLARATION>average</DECLARATION></INDEX>
      <NAME>average_definition</NAME>
      <EXAMPLE>average_example</EXAMPLE>
      <SCHEME>
(define (average x y)
  (/ (+ x y) 2))
      </SCHEME>
      <JAVASCRIPT>
function average(x, y) {
    return (x + y) / 2;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>average_example</NAME>
      <SCHEME>
(average 3 6)
      </SCHEME>
      <JAVASCRIPT>
average(3, 6);
      </JAVASCRIPT>
    </SNIPPET> 
    我们还必须说明我们所说的“足够好”是什么意思。下面的示例可以说明问题，但它并不是真正很好的测试。（见练习<SPACE></SPACE> 
<REF NAME="ex:ex-sqrt-end-test"></REF> .)
    这个想法是不断改进答案，直到它足够接近，使其平方与被开方数的差小于预定的容差（这里为0.001）:<SPLIT><SCHEME><FOOTNOTE>我们通常会给出
    <INDEX>谓词<SUBINDEX>命名约定</SUBINDEX></INDEX>
    <INDEX>命名约定<SUBINDEX><ORDER>?</ORDER><SCHEMEINLINE>?</SCHEMEINLINE>谓词的</SUBINDEX></INDEX>
    <INDEX>谓词名称中的问号</INDEX>
    <INDEX><USE>?</USE>，谓词名称中使用</INDEX>
    以问号结尾的谓词名称，帮助我们记住它们是谓词。这仅仅是一种风格上的约定。对于解释器来说，问号只是一个普通字符。</FOOTNOTE></SCHEME><JAVASCRIPT><FOOTNOTE>我们通常会给出
    <INDEX>谓词<SUBINDEX>命名约定</SUBINDEX></INDEX>
    <INDEX>命名约定<SUBINDEX><ORDER>是</ORDER><JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE>谓词的</SUBINDEX></INDEX>
    <INDEX><JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE>，谓词名称中的前缀<ORDER>是</ORDER></INDEX>
    以 <JAVASCRIPTINLINE>is_</JAVASCRIPTINLINE> 开头的谓词名称，帮助我们记住它们是谓词。</FOOTNOTE></JAVASCRIPT></SPLIT>
     <SNIPPET>
      <NAME>is_good_enough</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>is_good_enough_example</EXAMPLE>
      <SCHEME>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_good_enough_example</NAME>
      <SCHEME>
(good-enough? 1.41 2)
      </SCHEME>
      <JAVASCRIPT>
is_good_enough(1.41, 2);
      </JAVASCRIPT>
    </SNIPPET>
    最后，我们需要一种方法来开始。例如，我们总可以猜测任何数字的平方根是1:<SPLITINLINE><SCHEME><FOOTNOTE>注意我们将初始猜测表达为1.0而不是1。在许多Lisp实现中，这不会有任何区别。
    MIT Scheme区分精确整数和小数值，两个整数相除会产生有理数而不是小数。例如，10除以6得到5/3，而10.0除以6.0得到1.6666666666666667。（我们将在第<SPACE></SPACE><REF NAME="sec:rationals"></REF>节学习如何实现有理数的算术。）如果我们在平方根程序中以1作为初始猜测，并且<LATEXINLINE>$x$</LATEXINLINE>是精确整数，那么平方根计算中产生的所有后续值都将是有理数而不是小数。有理数和小数的混合运算总是产生小数，因此以1.0作为初始猜测会强制所有后续值都是小数。</FOOTNOTE></SCHEME></SPLITINLINE>
    <COMMENT>注释已删除：它特指Scheme（或者更具体地说是MIT Scheme）</COMMENT>
<SNIPPET>
      <INDEX><DECLARATION>sqrt</DECLARATION></INDEX>
      <NAME>sqrt</NAME>
      <REQUIRES>sqrt_iter</REQUIRES>
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (sqrt-iter 1.0 x))
                </SCHEME>
                <JAVASCRIPT>
function sqrt(x) {
    return sqrt_iter(1, x);
}
                </JAVASCRIPT>
    </SNIPPET>  
    如果我们在解释器中输入这些  
    <SPLITINLINE>  
      <SCHEME>  
	定义  
      </SCHEME>  
      <JAVASCRIPT>  
	声明  
      </JAVASCRIPT>  
    </SPLITINLINE>  
    ，我们就可以使用  
<SCHEMEINLINE>sqrt</SCHEMEINLINE>  
    就像我们可以使用任何  
    <SPLITINLINE>  
      <SCHEME>  
	过程：  
      </SCHEME>  
      <JAVASCRIPT>  
	函数：  
      </JAVASCRIPT>  
    </SPLITINLINE>  
<SNIPPET PAGE="24">
      <NAME>sqrt_example</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt 9)
      </SCHEME>
      <SCHEMEOUTPUT>
3.00009155413138
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(9);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
3.00009155413138
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="24" HIDE="yes">
      <NAME>sqrt_example_2</NAME>
      <SCHEME>
(sqrt 5)
      </SCHEME>
      <JAVASCRIPT>
sqrt(5);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <NAME>sqrt_example_3</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ 100 37))
      </SCHEME>
      <SCHEMEOUTPUT>
11.704699917758145
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(100 + 37);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
11.704699917758145
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_4</NAME>
      <EXPECTED>1.7739279023207892</EXPECTED>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ (sqrt 2) (sqrt 3)))
      </SCHEME>
      <SCHEMEOUTPUT>
1.7739279023207892
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
sqrt(sqrt(2) + sqrt(3));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1.7739279023207892		
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_5</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(square (sqrt 1000))
      </SCHEME>
      <SCHEMEOUTPUT>
1000.000369924366
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
square(sqrt(1000));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
1000.000369924366
      </JAVASCRIPT_OUTPUT>
      <INDEX>square root<CLOSE></CLOSE></INDEX>
      <INDEX>Newton<APOS></APOS>s method<SUBINDEX><ORDER>square</ORDER>for square roots<CLOSE></CLOSE></SUBINDEX></INDEX>
    </SNIPPET>
  </TEXT>
   <TEXT>
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> 程序同样说明了，
    我们迄今为止介绍的简单
    <SPLITINLINE>
      <SCHEME>
	<INDEX>迭代过程<SUBINDEX>通过过程调用实现<OPEN></OPEN></SUBINDEX></INDEX>
	的过程式
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>迭代过程<SUBINDEX>通过函数调用实现<OPEN></OPEN></SUBINDEX></INDEX>
	的函数式
      </JAVASCRIPT>
    </SPLITINLINE>
    语言足以编写任何纯数值程序，比如用 C 或 Pascal 编写的程序。 这看起来可能令人惊讶，
    因为我们的语言中没有包括任何指示计算机反复执行某事的
    <INDEX>循环结构</INDEX>。
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Sqrt-iter</SCHEMEINLINE>，
      </SCHEME>
      <JAVASCRIPT>
	函数 <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    另一方面，演示了如何仅使用普通的调用
    <SPLITINLINE><SCHEME>过程。</SCHEME><JAVASCRIPT>函数。</JAVASCRIPT></SPLITINLINE>能力来完成迭代，而不需要任何特殊结构。<FOOTNOTE>担心使用
    <SPLITINLINE>
      <SCHEME>
	过程
      </SCHEME>
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    调用来实现迭代所涉及的效率问题的读者，应注意
    <QUOTE>尾递归</QUOTE> 部分在
    <REF NAME="sec:recursion-and-iteration"></REF> 节中的相关说明。</FOOTNOTE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>迭代过程<SUBINDEX>通过过程调用实现<CLOSE></CLOSE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>迭代过程<SUBINDEX>通过函数调用实现<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 

   <EXERCISE>
    <SPLIT>
      <SCHEME>
        Alyssa P. Hacker 不明白为什么必须将 <SCHEMEINLINE>if</SCHEMEINLINE>
	提供为一个
        <INDEX><DECLARATION>if</DECLARATION><SUBINDEX>为什么需要特殊形式</SUBINDEX></INDEX>
        <INDEX>特殊形式<SUBINDEX>需要原因</SUBINDEX></INDEX>。
	她问：“我为什么不能仅用普通过程并借助
        <SCHEMEINLINE>cond</SCHEMEINLINE>来定义它呢？”
        Alyssa 的朋友 Eva Lu Ator 声称这的确可以做到，
	于是她定义了一个新的 <SCHEMEINLINE>if</SCHEMEINLINE> 版本：
        <SNIPPET>
          <NAME>new_if</NAME>
          <SCHEME>
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
          </SCHEME>
        </SNIPPET>
        Eva 向 Alyssa 演示该程序：
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 2 3) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
5
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 1 1) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
0
          </SCHEMEOUTPUT>
        </SNIPPET>
        Alyssa 非常高兴，她使用 <SCHEMEINLINE>new-if</SCHEMEINLINE> 重写了求平方根程序：
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <SCHEME>
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
          </SCHEME>
        </SNIPPET>
        当 Alyssa 试图用此程序来计算平方根时会发生什么？ 请解释。
        <LABEL NAME="ex:new-if"></LABEL>
      </SCHEME>
      <JAVASCRIPT>
        Alyssa P. Hacker 不喜欢
        <INDEX>语法形式<SUBINDEX>需要原因</SUBINDEX></INDEX>
        <INDEX>条件表达式<SUBINDEX>为什么需要语法形式</SUBINDEX></INDEX>
	，涉及字符 <SCHEMEINLINE>?</SCHEMEINLINE>
	和 <SCHEMEINLINE>:</SCHEMEINLINE>。
	她问：“我为什么不能仅声明一个普通条件函数，使其应用就像条件表达式一样工作呢？”
	<FOOTNOTE>作为最早《计算机程序的结构和解释》的 Lisp 爱好者，Alyssa 更喜欢更简单、更统一的语法。</FOOTNOTE>
	Alyssa 的朋友 Eva Lu Ator 声称这确实可以做到，她声明了如下一个 <JAVASCRIPTINLINE>conditional</JAVASCRIPTINLINE> 函数：
        <SNIPPET>
          <NAME>conditional</NAME>
          <JAVASCRIPT>
function conditional(predicate, then_clause, else_clause) {		    
    return predicate ? then_clause : else_clause;
}
	  </JAVASCRIPT>
        </SNIPPET>
        Eva 向 Alyssa 演示该程序：
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <JAVASCRIPT>
conditional(2 === 3, 0, 5);
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
5
	  </JAVASCRIPT_OUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <JAVASCRIPT>
conditional(1 === 1, 0, 5);
	  </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
0
	  </JAVASCRIPT_OUTPUT>
        </SNIPPET>
	Alyssa 非常高兴，她使用 <SCHEMEINLINE>conditional</SCHEMEINLINE> 重写了求平方根程序：
        <SNIPPET>
	  <NAME>delighted</NAME>
          <REQUIRES>conditional</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <JAVASCRIPT>
function sqrt_iter(guess, x) {
    return conditional(is_good_enough(guess, x),
                       guess,
                       sqrt_iter(improve(guess, x),
                                 x));
}
	  </JAVASCRIPT>
        </SNIPPET>
        当 Alyssa 试图用此程序计算平方根时会发生什么？ 请解释。
        <LABEL NAME="ex:new-if"></LABEL>
	<SOLUTION>
	  任何对 <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE> 的调用都会立即导致无限循环。原因是我们的求值采用函数求值顺序。 <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE> 返回表达式的求值需要先对其所有参数求值，包括对自身的递归调用，无论谓词是否求值为 <EM>true</EM> 还是 <EM>false</EM>。递归调用同样如此，因此函数 <JAVASCRIPTINLINE>conditional</JAVASCRIPTINLINE> 实际上永远不会被应用。
	</SOLUTION>
      </JAVASCRIPT>
    </SPLIT>
  </EXERCISE> 

   <EXERCISE>
    <LABEL NAME="ex:ex-sqrt-end-test"></LABEL>
    用于计算平方根的
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    测试对于求非常小数字的平方根效果不佳。此外，在真实的计算机中，算术运算几乎总是以有限精度执行。这使得我们的测试对于非常大的数字同样不够充分。请解释这些说法，并举例说明该测试在小数和大数时如何失效。实现
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的另一种策略是观察 <SCHEMEINLINE>guess</SCHEMEINLINE> 在连续两次迭代中的变化，当变化仅为猜测值的很小一部分时停止。设计一个使用这种终止测试的平方根
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>。这种方法对于小数和大数效果更好吗？
    <SOLUTION>
      在计算小数的平方根时，绝对容差 0.001 太大。例如，
      <JAVASCRIPTINLINE>sqrt(0.0001)</JAVASCRIPTINLINE>
      结果为 0.03230844833048122，而预期值为 0.01，误差超过 200%。
      <P></P>
      另一方面，对于非常大的数值，舍入误差可能导致算法无法足够接近平方根，从而无法终止。
      <P></P>
      下列程序通过用相对容差替代绝对容差来缓解此问题。
      <SNIPPET>
        <REQUIRES>abs_definition</REQUIRES>
        <REQUIRES>average_definition</REQUIRES>
        <REQUIRES>sqrt</REQUIRES>
        <REQUIRES>improve</REQUIRES>
        <REQUIRES>sqrt_iter</REQUIRES>	
        <REQUIRES>square_definition</REQUIRES>	
	<EXAMPLE>example_1.8</EXAMPLE>
	<JAVASCRIPT>
const relative_tolerance = 0.0001;
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; guess * relative_tolerance;
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.8</NAME>
      <JAVASCRIPT>
display(sqrt(0.0001));
display(sqrt(4000000000000));
      </JAVASCRIPT>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE> 

   <EXERCISE>
    <LABEL NAME="ex:cube-root-newton"></LABEL>
    牛顿<APOS></APOS>求
    <INDEX>立方根<SUBINDEX><ORDER>牛顿法</ORDER>通过牛顿<APOS></APOS>法求解立方根</SUBINDEX></INDEX>
    <INDEX>牛顿<APOS></APOS>法<SUBINDEX><ORDER>立方</ORDER>用于立方根</SUBINDEX></INDEX>
    的方法基于这样一个事实：如果
    <LATEXINLINE>$y$</LATEXINLINE> 是
    <LATEXINLINE>$x$</LATEXINLINE> 的立方根的近似值，则更好的近似值为
    <LATEX>
      \[
      \begin{array}{lll}
      \dfrac{x/y^{2}+2y} {3}
      \end{array}
      \]
    </LATEX>
    使用该公式实现一个立方根
    <SPLITINLINE>
      <SCHEME>
	      过程
      </SCHEME>
      <JAVASCRIPT>
	      函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，类似于平方根
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    （在第<SPACE></SPACE><REF NAME="sec:proc-returned-values"></REF>节中我们将看到如何
    将牛顿<APOS></APOS>法实现为这些
    平方根和立方根
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的抽象。）
    <SOLUTION>
      <SNIPPET>
	    <EXAMPLE>example_1.9</EXAMPLE>
	    <REQUIRES>abs_definition</REQUIRES>
	    <REQUIRES>cube_definition</REQUIRES>
	    <JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(cube(guess) - x) &lt; 0.001;
}
function div3(x, y) {
     return (x + y) / 3;
}
function improve(guess, x) {
    return div3(x / (guess * guess), 2 * guess);
}
function cube_root(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : cube_root(improve(guess, x), x);
}
	    </JAVASCRIPT>
	    <SCHEME>
	    </SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.9</NAME>
      <JAVASCRIPT>
	    cube_root(3, 27);
      </JAVASCRIPT>
    </SNIPPET>
  </EXERCISE> 
</SUBSECTION>
