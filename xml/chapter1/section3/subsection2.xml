<SUBSECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Constructing Procedures using Lambda</SCHEME>
      <JAVASCRIPT>Constructing Functions using Lambda Expressions
      </JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:lambda"/>

  <SPLIT>
    <SCHEME>
      <TEXT>
        In using <SCHEMEINLINE>sum</SCHEMEINLINE> as in
	section<SPACE/><REF NAME="sec:procedures-as-parameters"/>,
        it seems terribly awkward to have to define trivial procedures such as
        <SCHEMEINLINE>pi-term</SCHEMEINLINE> and
	<SCHEMEINLINE>pi-next</SCHEMEINLINE> just so we can use them as
	arguments to our higher-order procedure.
        Rather than define <SCHEMEINLINE>pi-next</SCHEMEINLINE> and 
        <SCHEMEINLINE>pi-term</SCHEMEINLINE>, it would be more convenient to
	have a way to directly specify <QUOTE>the procedure that returns its
        input incremented by 4</QUOTE> and <QUOTE>the procedure that returns the
        reciprocal of its input times its input plus 2.</QUOTE>  We can do this
	by introducing the special form <SCHEMEINLINE>lambda</SCHEMEINLINE>,
	which creates procedures. Using <SCHEMEINLINE>lambda</SCHEMEINLINE> we
	can describe what we want as
        <SNIPPET EVAL="no">
          <SCHEME>
(lambda (x) (+ x 4))
          </SCHEME>
        </SNIPPET>
        and 
        <SNIPPET EVAL="no">
          <SCHEME>
(lambda (x) (/ 1.0 (* x (+ x 2))))
          </SCHEME>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        In using <JAVASCRIPTINLINE>sum</JAVASCRIPTINLINE> as in
	section<SPACE/><REF NAME="sec:procedures-as-parameters"/>, it seems
	terribly awkward to have to declare trivial functions such as
        <JAVASCRIPTINLINE>pi_term</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>pi_next</JAVASCRIPTINLINE> just so we can use them as
	arguments to our higher-order function. Rather than declare
	<JAVASCRIPTINLINE>pi_next</JAVASCRIPTINLINE> and 
        <JAVASCRIPTINLINE>pi_term</JAVASCRIPTINLINE>, it would be more convenient
        to have a way to directly specify <QUOTE>the function that returns its
        input incremented by 4</QUOTE> and <QUOTE>the function that returns the
        reciprocal of its input times its input plus 2.</QUOTE>  We can do this
	by introducing <EM>lambda expressions</EM> as a syntactic form for
	creating functions.
	Using lambda expressions, we can describe what we want as
        <SNIPPET EVAL="yes">
          <JAVASCRIPT>
x => x + 4;
          </JAVASCRIPT>
        </SNIPPET>
        and 
        <SNIPPET EVAL="yes">
          <JAVASCRIPT>
x => 1.0 / (x * (x + 2));
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <TEXT>
    Then our 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>pi-sum</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pi_sum</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    can be expressed without 
    <SPLITINLINE>
      <SCHEME>defining any auxiliary procedures</SCHEME>
      <JAVASCRIPT>declaring any auxiliary functions</JAVASCRIPT>
    </SPLITINLINE>
    as
    <SNIPPET PAGE="62">
      <NAME>pi_sum_definition3</NAME>
      <EXPECTED>3.139592655589783</EXPECTED>
      <REQUIRES>sum_definition</REQUIRES>
      <EXAMPLE>pi_sum_example</EXAMPLE>
      <EXPECTED>3.139592655589783</EXPECTED>
      <SCHEME>
(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
      </SCHEME>
      <JAVASCRIPT>
function pi_sum(a, b) {
    return sum(x => 1.0 / (x * (x + 2)),
               a,
               x => x + 4,
               b);
}
      </JAVASCRIPT>
    </SNIPPET>
    <!-- \indcode*{pi-sum}[lambda@with <SCHEMEINLINE>lambda</SCHEMEINLINE>] -->
  </TEXT>
  <TEXT>
    Again using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT>a lambda expression,</JAVASCRIPT>
    </SPLITINLINE> 
    we can write the <SCHEMEINLINE>integral</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    without having to 
    <SPLITINLINE>
      <SCHEME>define the auxiliary procedure</SCHEME>
      <JAVASCRIPT>declare the auxiliary function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>add-dx</SCHEMEINLINE>:</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>add_dx</JAVASCRIPTINLINE>:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="62">
      <NAME>integral_definition2</NAME>
      <REQUIRES>sum_definition</REQUIRES>
      <REQUIRES>cube_definition</REQUIRES>
      <EXAMPLE>integral_example</EXAMPLE>
      <EXPECTED>0.24998750000000042</EXPECTED>
      <SCHEME>
(define (integral f a b dx)
  (* (sum f
          (+ a (/ dx 2.0))
          (lambda (x) (+ x dx))
          b)
     dx))
      </SCHEME>
      <JAVASCRIPT>
function integral(f, a, b, dx) {
    return sum(f,
               a + dx / 2.0,
               x => x + dx,
               b)
           *
           dx;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <!--
      \indsf*{lambda}
      \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE>]
      <INDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>creating with <SCHEMEINLINE>lambda</SCHEMEINLINE></SUBINDEX></INDEX>
      \indsf{lambda}[define@<SCHEMEINLINE>define</SCHEMEINLINE> vs.|(]
      \indsf{define}[lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE> vs.|(]
  -->
  <SPLIT>
    <SCHEME>
      <TEXT>
        In general, <SCHEMEINLINE>lambda</SCHEMEINLINE> is used to create
        procedures in the same way as <SCHEMEINLINE>define</SCHEMEINLINE>,
	except that 
        <INDEX>procedure<SUBINDEX>anonymous</SUBINDEX></INDEX>
        no name is specified for the procedure:
        <SNIPPET EVAL="no">
	  <SCHEME>
	    (lambda (^formal-parameters^) ^body^)
	  </SCHEME>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        In general, lambda expressions are used to create functions in the
	same way as function declarations, except that 
        <INDEX>procedure<SUBINDEX>anonymous</SUBINDEX></INDEX>
        no name is specified for the function and the
	<JAVASCRIPT>return</JAVASCRIPT> keyword and curly braces are
	omitted.<FOOTNOTE>If there is only one parameter, the
	parentheses around the parameter list can also be omitted. In
	section<SPACE/><REF NAME="sec:graphics"/>, we will extend the syntax of
	lambda expressions to allow blocks as bodies, as in function declaration
	statements.</FOOTNOTE>
        <LATEX>
	  \[ \texttt{(} \ \textit{parameters}\ \texttt{) => }
	  \textit{expression} \]
	</LATEX>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <TEXT>
    The resulting
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is just as much a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    as one that is created using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>define</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>a function declaration statement.</JAVASCRIPT>
    </SPLITINLINE>
    The only difference is that it has not been associated with any name in the
    environment.
    <SPLITINLINE>
      <SCHEME>In fact,</SCHEME>
      <JAVASCRIPT>We consider</JAVASCRIPT>
    </SPLITINLINE>
    <!--
        \indsf{define}[<SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>@for<SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>]
    -->
    <SNIPPET PAGE="62">
      <NAME>plus4_definition_1</NAME>
      <EXAMPLE>plus4_example</EXAMPLE>
      <SCHEME>
(define (plus4 x) (+ x 4))
      </SCHEME>
      <JAVASCRIPT>
function plus4(x) { 
    return x + 4; 
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="62" HIDE="yes">
      <NAME>plus4_example</NAME>
      <SCHEME>
(plus4 3)
      </SCHEME>
      <JAVASCRIPT>
plus4(3);
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME>is equivalent to</SCHEME>
      <JAVASCRIPT>
	to be
	equivalent to<FOOTNOTE><LABEL NAME="foot:function-decl-vs-lambda"/>In
	JavaScript, there are subtle differences between the two versions:
	Function declaration statements are automatically moved to the beginning
	of the surrounding block, whereas constant declarations are not, and
	names declared with function declaration can be re-assigned using
	assignment (see	chapter<SPACE/><REF NAME="sec:assignment"/>). In this
	book, we are avoiding these features and shall treat
	function declarations as equivalent to the corresponding constant
	declaration.</FOOTNOTE>
    </JAVASCRIPT>
    </SPLITINLINE>
    <!--
        \indsf{lambda}[define@<SCHEMEINLINE>define</SCHEMEINLINE> vs.|)]
        \indsf{define}[lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE> vs.|)]
    -->
    <SNIPPET PAGE="63">
      <NAME>plus4_definition_2</NAME>
      <EXAMPLE>plus4_example</EXAMPLE>
      <SCHEME>
(define plus4 (lambda (x) (+ x 4)))
      </SCHEME>
      <JAVASCRIPT>
const plus4 = x => x + 4;
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    <SPLIT>
      <SCHEME>
        We can read a <SCHEMEINLINE>lambda</SCHEMEINLINE> expression as follows:
        <SNIPPET EVAL="no" LATEX="yes">
          <SCHEME>
(lambda             (x)   (+  x    4))
^\hskip17pt$\uparrow$\hskip104pt$\uparrow$\hskip30pt$\uparrow$\hskip12pt$\uparrow$\hskip28pt$\uparrow$^
^the procedure of an argument^ x ^that adds^ x ^and^ 4
          </SCHEME>
        </SNIPPET>
      </SCHEME>
      <JAVASCRIPT>
        We can read a lambda expression as follows:
	<WEB_ONLY>
        <SNIPPET EVAL="no">
          <JAVASCRIPT>
                        x         =>                   x    +   4
// read as:             ^         ^                    ^    ^   ^
// the function of an argument x that results in the value plus 4
	  </JAVASCRIPT>
	</SNIPPET>
	</WEB_ONLY>
	<PDF_ONLY>
      <SNIPPET EVAL="no" LATEX="yes">
	<JAVASCRIPT>
$\;\;$                    x              =>             x    +   4
	</JAVASCRIPT>
      </SNIPPET>
      <LATEX>
\vspace{-4mm}	
\hspace{45mm} $\Big\uparrow$ \hspace{29mm} $\Big\uparrow$ \hspace{27.5mm} $\Big\uparrow$ \hspace{7mm} $\Big\uparrow$ \hspace{4mm} $\Big\uparrow$ 

\vspace{-2mm}
      </LATEX>
      <SNIPPET EVAL="no" LATEX="yes">
	<JAVASCRIPT>
the $\texttt{function}$ of an argument x that results $\texttt{in}$ the value plus 4
	</JAVASCRIPT>
      </SNIPPET>
	</PDF_ONLY>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    <INDEX>combination<SUBINDEX>lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE> 
    expression as operator of</SUBINDEX></INDEX>
    <!--\indcodeplus{lambda}{expression}[operator@as operator of combination] -->
    <INDEX>operator of a combination
    <SUBINDEX>lambda@<SCHEMEINLINE>lambda</SCHEMEINLINE> expression as
    </SUBINDEX></INDEX>
    Like any expression that has a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    as its value, a
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    expression can be used as the function expression in an application
    <SPLITINLINE><SCHEME>combination</SCHEME></SPLITINLINE> such as
    <SNIPPET PAGE="63">
      <REQUIRES>square_definition</REQUIRES>
      <EXPECTED>12</EXPECTED>
      <SCHEME>
((lambda (x y z) (+ x y (square z))) 
 1 2 3)
      </SCHEME>
      <SCHEMEOUTPUT>
12
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
((x, y, z) => x + y + square(z))(1, 2, 3);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
12
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    or, more generally, in any context where we would normally use a
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> name.<FOOTNOTE>It would be clearer and less intimidating to
    people learning
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    if a
    <SPLITINLINE>
      <SCHEME>name</SCHEME>
      <JAVASCRIPT>term</JAVASCRIPT>
    </SPLITINLINE>
    more obvious than
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE>, such as
        <SCHEMEINLINE>make-procedure</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	lambda expression, such as <EM>function definition</EM>
      </JAVASCRIPT>
    </SPLITINLINE>
    were used. But the convention is
    <SPLITINLINE>
      <SCHEME>
	firmly entrenched.
      </SCHEME>
      <JAVASCRIPT>
	very firmly entrenched, not just for Lisp and Scheme but also for
	JavaScript, Java and other languages, no doubt partly due to the
	influence of the Scheme editions of this book.
      </JAVASCRIPT>
    </SPLITINLINE>
    The notation is adopted from the 
    <INDEX>lambda@<LATEXINLINE>$\lambda$</LATEXINLINE>
    calculus (lambda calculus)</INDEX>
    <LATEXINLINE>$\lambda$</LATEXINLINE> calculus, a
    <INDEX>Church, Alonzo</INDEX>
    mathematical formalism introduced by the mathematical logician Alonzo
    Church (1941).  Church developed the <LATEXINLINE>$\lambda$</LATEXINLINE>
    calculus to provide a rigorous foundation for studying the notions of
    function and function application.  The <LATEXINLINE>$\lambda$</LATEXINLINE>
    calculus has become a basic tool for mathematical investigations of the
    semantics of programming languages.
  </FOOTNOTE>
  <SPLITINLINE><JAVASCRIPT>Note that <JAVASCRIPTINLINE>=&gt;</JAVASCRIPTINLINE>
  has lower precedence than function application and thus the parentheses around
  the lambda expression are necessary here.
  </JAVASCRIPT></SPLITINLINE>
  </TEXT>

  <SUBHEADING>
    <NAME>Using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>let</SCHEMEINLINE> to create local variables</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> to create local names
      </JAVASCRIPT>
    </SPLITINLINE>
    </NAME>
  </SUBHEADING>
  <INDEX>local variable|(</INDEX>
  <INDEX>local name|(</INDEX>
  <TEXT>
    Another use of 
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE> is in creating local variables.
      </SCHEME>
      <JAVASCRIPT>lambda expressions is in creating local names.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>We often need local variables in our procedures
      other than those that have been bound as formal parameters.
      </SCHEME>
      <JAVASCRIPT>We often need local names in our functions
      other than those that have been bound as parameters.
      </JAVASCRIPT>
    </SPLITINLINE>
    For example, suppose we wish to compute the function
    <LATEX>
      \[ f(x,y)=x(1+xy)^2 +y(1-y)+(1+xy)(1-y)\]
    </LATEX>
    which we could also express as
    <LATEX>
      \begin{eqnarray*}
      a &amp;=&amp; 1+xy\\
      b &amp;=&amp; 1-y\\
      f(x,y) &amp;=&amp; xa^2 +yb +ab
      \end{eqnarray*}
    </LATEX>
    In writing a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    to compute <LATEXINLINE>$f$</LATEXINLINE>, we would like to include as
    <SPLITINLINE>
      <SCHEME>
	local variables
      </SCHEME>
      <JAVASCRIPT>
	local names
      </JAVASCRIPT>
    </SPLITINLINE>
    not only <LATEXINLINE>$x$</LATEXINLINE> and <LATEXINLINE>$y$</LATEXINLINE>
    but also the names of intermediate quantities like
    <LATEXINLINE>$a$</LATEXINLINE> and <LATEXINLINE>$b$</LATEXINLINE>.  One way
    to accomplish this is to use an auxiliary
    <SPLITINLINE>
      <SCHEME>procedure to bind the local variables:</SCHEME>
      <JAVASCRIPT>function to bind the local names:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="64">
      <NAME>f_helper_definition</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>f_helper_example</EXAMPLE>
      <EXPECTED>456</EXPECTED>
      <SCHEME>
(define (f x y)
  (define (f-helper a b)
    (+ (* x (square a))
       (* y b)
       (* a b)))
  (f-helper (+ 1 (* x y)) 
            (- 1 y)))
      </SCHEME>
      <JAVASCRIPT>
function f(x, y) {
    function f_helper(a, b) {
        return x * square(a) + 
               y * b + 
               a * b;
    }
    return f_helper(1 + x * y,
                    1 - y);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="64" HIDE="yes">
      <NAME>f_helper_example</NAME>
      <SCHEME>
(f 3 4)
      </SCHEME>
      <JAVASCRIPT>
f(3, 4);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
  <TEXT>
    Of course, we could use a 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    expression to specify an anonymous
    <SPLITINLINE>
      <SCHEME>procedure for binding our local variables.</SCHEME>
      <JAVASCRIPT>function for binding our local names.</JAVASCRIPT>
    </SPLITINLINE>
    The body of
    <SCHEMEINLINE>f</SCHEMEINLINE> then becomes a single call to that
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="64">
      <NAME>f_helper_definition2</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>f_helper_example</EXAMPLE>
      <EXPECTED>456</EXPECTED>
      <SCHEME>
(define (f x y)
  ((lambda (a b)
     (+ (* x (square a))
        (* y b)
        (* a b)))
   (+ 1 (* x y))
   (- 1 y)))
      </SCHEME>
      <JAVASCRIPT>
function f(x,y) {
    return ( (a, b) => x * square(a) + 
                      y * b + 
                      a * b
           )(1 + x * y, 1 - y);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
        This construct is so useful that there is a special form called
        <SCHEMEINLINE>let</SCHEMEINLINE> to make its use more convenient.  
        Using <SCHEMEINLINE>let</SCHEMEINLINE>, the
	<SCHEMEINLINE>f</SCHEMEINLINE> procedure could be written as
        <SNIPPET PAGE="64">
          <NAME>f_helper_definition3</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_helper_example</EXAMPLE>
          <SCHEME>
(define (f x y)
  (let ((a (+ 1 (* x y)))
       (b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))
          </SCHEME>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	<COMMENT>
	  JavaScript's <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> cannot
	  be explained as a shorthand for lambda expression/application.
	  Thus we use the weaker formulation "a more convenient way"; this
	  section is therefore a lot shorter in JavaScript than in Scheme.
	</COMMENT>
        A more convenient way to declare local names is by using constant
	declarations within the body of the function. Using
	<JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>, the  function
        <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE> can be written as
        <SNIPPET PAGE="64">
          <NAME>f_helper_definition3</NAME>
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_helper_example</EXAMPLE>
	  <EXPECTED>456</EXPECTED>
          <JAVASCRIPT>
function f(x, y) {
    const a = 1 + x * y;
    const b = 1 - y;
    return x * square(a) + 
           y * b + 
           a * b;
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <SPLIT>
    <SCHEME>
      <!--
          \indsf*{let}
          \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[let@<SCHEMEINLINE>let</SCHEMEINLINE>]
      -->
      <TEXT>
        The general form of a <SCHEMEINLINE>let</SCHEMEINLINE> expression is
        <SNIPPET EVAL="no">
          <SCHEME>
(let ((^var$_1$^ ^exp$_1$^)
      (^var$_2$^ ^exp$_2$^)
      ^$\vdots$^
      (^var$_n$^ ^exp$_n$^))
   ^body^)
          </SCHEME>
        </SNIPPET>
        which can be thought of as saying
        <LATEX>
          \begin{tabular}{ll}
          let &amp;var$_1$ have the value exp$_1$\ and\\
          &amp;var$_2$ have the value exp$_2$\ and\\
          &amp;\vdots\\
          &amp;var$_n$ have the value exp$_n$\\
          in  &amp;body
          \end{tabular}
	</LATEX>
      </TEXT>
      <TEXT>
        The first part of the <SCHEMEINLINE>let</SCHEMEINLINE> expression is a
	list of name-expression pairs.  When the <SCHEMEINLINE>let</SCHEMEINLINE>
	is evaluated, each name is associated with the value of the
	corresponding expression.  The body of the
	<SCHEMEINLINE>let</SCHEMEINLINE> is evaluated with these names bound as
	local variables. The way this happens is that the
	<SCHEMEINLINE>let</SCHEMEINLINE> expression is interpreted as an
	alternate syntax for
        <SNIPPET EVAL="no">
          <SCHEME>
((lambda (^var$_1$^ ^$\ldots$^ ^var$_n$^)
   ^body^)
 ^exp$_1$^
 ^$\vdots$^
 ^exp$_n$^)
          </SCHEME>
        </SNIPPET>
      </TEXT>
      <TEXT>
        No new mechanism is required in the interpreter in order to
        provide local variables.  A 
        <INDEX>syntactic sugar
	<SUBINDEX>let@<SCHEMEINLINE>let</SCHEMEINLINE> as</SUBINDEX></INDEX>
        <!--\indsf{let}[syntactic@as syntactic sugar]-->
        <SCHEMEINLINE>let</SCHEMEINLINE> expression is simply syntactic sugar for
        the underlying <SCHEMEINLINE>lambda</SCHEMEINLINE> application.

        <!--\indsf{let}[scope of variables]-->
        <INDEX>scope of a variable
	<SUBINDEX>let@in <SCHEMEINLINE>let</SCHEMEINLINE></SUBINDEX></INDEX>
        We can see from this equivalence that the scope of a variable specified
	by a <SCHEMEINLINE>let</SCHEMEINLINE> expression is the body of the
	<SCHEMEINLINE>let</SCHEMEINLINE>. This implies that:
        <UL>
          <LI>
            <SCHEMEINLINE>Let</SCHEMEINLINE> allows one to bind variables as
	    locally as possible to where they are to be used.  For example, if
	    the value of <SCHEMEINLINE>x</SCHEMEINLINE> is 5, the value of the
	    expression
            <SNIPPET PAGE="65" HIDE="yes">
              <NAME>x_definition</NAME>
              <SCHEME>
(define x 5)
              </SCHEME>
            </SNIPPET> 

            <SNIPPET PAGE="65">
              <REQUIRES>x_definition</REQUIRES>
              <SCHEME>
(+ (let ((x 3))
     (+ x (* x 10)))
   x)
              </SCHEME>
            </SNIPPET> 
            is 38. Here, the <SCHEMEINLINE>x</SCHEMEINLINE> in the body of the
	    <SCHEMEINLINE>let</SCHEMEINLINE> is 3, so the value of the
	    <SCHEMEINLINE>let</SCHEMEINLINE> expression is 33.  On the other
	    hand, the <SCHEMEINLINE>x</SCHEMEINLINE> that is the second argument
	    to the outermost <SCHEMEINLINE>+</SCHEMEINLINE> is still<SPACE/>5.
          </LI>
          <LI>
            The variables<APOS/> values are computed outside the
	    <SCHEMEINLINE>let</SCHEMEINLINE>. This matters when the expressions
	    that provide the values for the local variables depend upon
	    variables having the same names as the local variables themselves.
            For example, if the value of <SCHEMEINLINE>x</SCHEMEINLINE> is 2,
	    the expression
            <SNIPPET PAGE="65" HIDE="yes">
              <NAME>x_definition2</NAME>
              <SCHEME>
(define x 2)
              </SCHEME>
            </SNIPPET> 

            <SNIPPET PAGE="65">
              <REQUIRES>x_definition2</REQUIRES>
              <SCHEME>
(let ((x 3)
      (y (+ x 2)))
  (* x y))
              </SCHEME>
            </SNIPPET> 
            will have the value 12 because, inside the body of the
	    <SCHEMEINLINE>let</SCHEMEINLINE>, <SCHEMEINLINE>x</SCHEMEINLINE>
	    will be 3 and <SCHEMEINLINE>y</SCHEMEINLINE> will be 4 (which is the
            outer <SCHEMEINLINE>x</SCHEMEINLINE> plus 2).
          </LI>
        </UL>
      </TEXT>
      <TEXT>
        <INDEX>internal definition<SUBINDEX>let@<SCHEMEINLINE>let</SCHEMEINLINE> vs.</SUBINDEX></INDEX>
        <!--\indsf{let}[internal definition vs.]-->
        Sometimes we can use internal definitions to get the same effect as with
	<SCHEMEINLINE>let</SCHEMEINLINE>.  For example, we could have defined
	the procedure <SCHEMEINLINE>f</SCHEMEINLINE> above as
        <SNIPPET PAGE="66">
          <REQUIRES>square_definition</REQUIRES>
          <EXAMPLE>f_helper_example</EXAMPLE>
          <SCHEME>
(define (f x y)
  (define a (+ 1 (* x y)))
  (define b (- 1 y))
  (+ (* x (square a))
     (* y b)
     (* a b)))
          </SCHEME>
        </SNIPPET>
      </TEXT>
      <TEXT>
        We prefer, however, to use <SCHEMEINLINE>let</SCHEMEINLINE> in
	situations like this and to use internal
	<SCHEMEINLINE>define</SCHEMEINLINE> 
        only for internal procedures.<FOOTNOTE>Understanding internal
	definitions well enough to be sure a program means what we intend it to
	mean requires a more elaborate model of the evaluation process than we
	have presented in this chapter. The subtleties do not arise with
	internal definitions of procedures, however.  We will return to this
	issue in sections<SPACE/><REF NAME="sec:env-internal-def"/>
	and<SPACE/><REF NAME="sec:internal-definitions"/>, after
	we learn more about evaluation.</FOOTNOTE>
        <INDEX>local variable|)</INDEX>
        <INDEX>local name|)</INDEX>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      Names that are declared with <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>
      inside of a block have the body of the immediately surrounding block as
      their scope.<FOOTNOTE>
      <LABEL NAME="foot:tdz"/>
      Note that a name declared in a block using
      <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> cannot be used before the
      declaration fully is evaluated, not even in the right-hand expression
      of the declaration itself, and regardless whether the same name is
      declared outside of the function. Thus the program
      <SNIPPET PAGE="66">
        <NAME>h_error_example</NAME>
        <JAVASCRIPT>
function h() {
    const x = 1;
    function i() {
        const x = x + 1;
        return x;
    }
    return i();
}
h();
	</JAVASCRIPT>
      </SNIPPET>
      leads to an error, because the <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> in
      <JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE> is used before its declaration
      is fully evaluated. The <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> 
      declaration makes sure that the declared name is not used before the
      evaluation of the declaration is complete, even if it is declared outside
      the block already. We will return to this issue in
      section<SPACE/><REF NAME="sec:internal-definitions"/>, after we learn
      more about evaluation.
    </FOOTNOTE>
    </JAVASCRIPT>
  </SPLIT>
  <SPLIT>
    <SCHEME></SCHEME>
    <JAVASCRIPT>
      <COMMENT>
	This is the perfect place to introduce conditional statements, which
	are of course heavily used in the rest of the book. Their proper
	substitution model would be a bit technical and quite pointless to
	explain, so we limit the discussion of the substitution model to
	conditional expressions.
      </COMMENT>
      
      <SUBHEADING>
        <NAME>Conditional statements
        </NAME>
      </SUBHEADING>
      
      <INDEX>conditional statements|(</INDEX>
      <INDEX>conditional statements|(</INDEX>
      We have seen that it is often useful to declare names that are local to
      function declarations. When functions become big, we should
      keep the scope of the names as narrow as possible. 
      Consider for example <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> in
      exercise<SPACE/><REF NAME="ex:louis-fast-prime"/>.
      <SNIPPET PAGE="55">
        <NAME>expmod_definition_2</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example_2</EXAMPLE>
	<EXPECTED>4</EXPECTED>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    return exp === 0
           ? 1
           : is_even(exp)
             ? expmod(base, exp / 2, m) 
               * expmod(base, exp / 2, m)
               % m
             : base
               * expmod(base, exp - 1, m) 
               % m;
}
        </JAVASCRIPT>
      </SNIPPET>
      This function is unnecessarily inefficient, because it contains two
      identical calls:
      <SNIPPET>
        <NAME>expmod_example_2</NAME>
        <REQUIRES>even_definition</REQUIRES>
        <REQUIRES>expmod_definition_2</REQUIRES>
	<JAVASCRIPT>
expmod(base, exp / 2, m);
	</JAVASCRIPT>
        <JAVASCRIPT_RUN> 
expmod(4, 3, 5);         
        </JAVASCRIPT_RUN>
      </SNIPPET>
      While this can be easily fixed in this example using the
      <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> function, this is not so easy
      in general. Without using <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>,
      we would be tempted to introduce a local name for the expression as
      follows:
      <SNIPPET PAGE="55">
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example</EXAMPLE>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    const to_half = expmod(base, exp / 2, m);
    return exp === 0
           ? 1
           : is_even(exp)
             ? to_half * to_half
               % m
             : base
               * expmod(base, exp - 1, m) 
               % m;
}
        </JAVASCRIPT>
      </SNIPPET>
      This would make the function not just inefficient, but actually
      non-terminating! The problem is that the constant declaration appears
      outside the conditional expression, which means that it is executed even
      when the base case <JAVASCRIPTINLINE>exp === 0</JAVASCRIPTINLINE> is
      reached. To avoid this situation, we shall provide for <EM>conditional
      statements</EM>, and allow <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>
      statements to appear in several branches of the statement. Using a
      conditional statement, the function
      <JAVASCRIPTINLINE>expmod</JAVASCRIPTINLINE> can be written as follows:
      <SNIPPET PAGE="55">
        <REQUIRES>even_definition</REQUIRES>
        <EXAMPLE>expmod_example</EXAMPLE>
	<EXPECTED>4</EXPECTED>
        <JAVASCRIPT>
function expmod(base, exp, m) {
    if (exp === 0) {
        return 1;
    } else {
        if (is_even(exp)) {
            const to_half = expmod(base, exp / 2, m);    
            return to_half * to_half % m;
        } else {
            return base * expmod(base, exp - 1, m) % m;
        }
    }	    
}
	</JAVASCRIPT>
      </SNIPPET>
      The general form of a conditional statement is
      <SNIPPET EVAL="no" LATEX="yes">
	<JAVASCRIPT>
if ($predicate$) { $consequent$ } else { $alternative$ }
	</JAVASCRIPT>
      </SNIPPET>
      and, like conditional expressions, their evaluation first evaluates the
      <LATEXINLINE>$\textit{predicate}$</LATEXINLINE>. If it evaluates to true,
      the interpreter evaluates the
      <LATEXINLINE>$\textit{consequent}$</LATEXINLINE> statements and if it
      evaluates to false, the interpreter evaluates
      the <LATEXINLINE>$\textit{alternative}$</LATEXINLINE> statements. Note that
      any constant declarations occurring in either part are local to that part,
      because both are enclosed in curly braces and thus form their own block.
    </JAVASCRIPT>
  </SPLIT>
  
  <EXERCISE> 
    Suppose we 
    <SPLITINLINE>
      <SCHEME>define the procedure</SCHEME>
      <JAVASCRIPT>declare</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET PAGE="66">
      <NAME>fg_definition</NAME>
      <SCHEME>
(define (f g)
  (g 2))
      </SCHEME>
      <JAVASCRIPT>
function f(g) {
   return g(2);
}
      </JAVASCRIPT>
    </SNIPPET>
    Then we have
    <SNIPPET PAGE="66">
      <REQUIRES>fg_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(f square)
      </SCHEME>
      <SCHEMEOUTPUT>
4
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
f(square);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
4
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    <SNIPPET PAGE="66">
      <REQUIRES>fg_definition</REQUIRES>
      <SCHEME>
(f (lambda (z) (* z (+ z 1))))
      </SCHEME>
      <SCHEMEOUTPUT>
              6
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
f(z => z * (z + 1));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
6
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    What happens if we (perversely) ask the interpreter to evaluate the
    <SPLITINLINE>
      <SCHEME>combination <SCHEMEINLINE>(f f)</SCHEMEINLINE>?</SCHEME>
      <JAVASCRIPT>application <JAVASCRIPTINLINE>f(f)</JAVASCRIPTINLINE>?
      </JAVASCRIPT>
    </SPLITINLINE>
    Explain.
    <SOLUTION>        
      <TEXT>
	Let's use the substitution model to illustrate what happens:
	<SNIPPET EVAL="no">
	  <JAVASCRIPT>
f(f)
f(2)
2(2)
	  </JAVASCRIPT>
	</SNIPPET>
	The application <JAVASCRIPTINLINE>2(2)</JAVASCRIPTINLINE> leads to an
	error, since 2 is neither a primitive nor a compound function. 
      </TEXT>
    </SOLUTION>
  </EXERCISE>
</SUBSECTION>
