<SUBSECTION>
  <LABEL NAME="sec:substitution-model"></LABEL>
   <SPLITINLINE>
    
      <INDEX>程序应用的代换模型<OPEN></OPEN></INDEX>
    
    <JAVASCRIPT>
      <INDEX>函数应用的代换模型<OPEN></OPEN></INDEX>
    </JAVASCRIPT>
  </SPLITINLINE> 
   <NAME>
    代换模型 
    <SPLITINLINE>
      
        程序
      
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    应用
  </NAME> 

   <TEXT>
    <SPLIT>
      
        为了评估一个运算符名称为复合程序的组合，解释器遵循与我们在
        <SPACE></SPACE><REF NAME="sec:evaluating-combinations"></REF>
        小节中描述的运算符名称为原语程序的组合几乎相同的过程。
      
      <JAVASCRIPT>
        为了评估一个函数应用，解释器遵循
	<SPACE></SPACE><REF NAME="sec:compound-procedures"></REF>
        小节中描述的过程。
      </JAVASCRIPT>
    </SPLIT>
    也就是说，解释器评估
    <SPLITINLINE>
      
	组合
      
      <JAVASCRIPT>
        应用
      </JAVASCRIPT>
    </SPLITINLINE>
    的元素，并将
    <SPLITINLINE>
      
	程序
      
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    （这是
    <SPLITINLINE>
      
	组合的运算符
      
      <JAVASCRIPT>
        应用的函数表达式
      </JAVASCRIPT>
    </SPLITINLINE>
    的值）应用于参数（这些参数的值是
    <SPLITINLINE>
      
	组合的操作数）。
      
      <JAVASCRIPT>
	应用的参数表达式）。
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 
  <TEXT>
     <SPLITINLINE>
      
    我们可以假设将原语程序应用于参数的机制内置于解释器中。
      
      <JAVASCRIPT>
	我们可以假设原语函数的应用由解释器或库处理。
      </JAVASCRIPT>
    </SPLITINLINE>
    对于复合
    <SPLITINLINE>
      
	程序，
      
      <JAVASCRIPT>
	函数，
      </JAVASCRIPT>
    </SPLITINLINE>
    应用过程如下：
    <UL>
      <LI>
        要将一个复合
	<SPLITINLINE>
	  
	    程序
	  
	  <JAVASCRIPT>
	    函数
	  </JAVASCRIPT>
	</SPLITINLINE>
	应用于参数，
	<SPLITINLINE>
	  
	    评估程序的主体
	  
	  <JAVASCRIPT>
	    评估函数的返回表达式
	  </JAVASCRIPT>
	</SPLITINLINE>
	并用相应的参数替换每个
	<SPLITINLINE>
	  形式
	</SPLITINLINE>
	参数。<FOOTNOTE>如果函数的主体是语句序列，则主体将在替换参数后求值，应用的值是遇到的第一个返回语句的返回表达式的值。</FOOTNOTE>
      </LI>
    </UL>
    为了说明这个过程，让我们评估
    <SPLITINLINE>
      
	组合
      
      <JAVASCRIPT>
	应用
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>f_of_five</NAME>
      <REQUIRES>f</REQUIRES>
      <EXPECTED>136</EXPECTED>
      <SCHEME>
(f 5)
      </SCHEME>
      <JAVASCRIPT>
f(5)	
      </JAVASCRIPT>
      <JAVASCRIPT_RUN>
f(5);
      </JAVASCRIPT_RUN>
    </SNIPPET> 
    在哪里 
<SCHEMEINLINE>f</SCHEMEINLINE>  是
    <SPLITINLINE>
      
	程序定义
      
      <JAVASCRIPT>
	函数声明
      </JAVASCRIPT>
    </SPLITINLINE>
    在 <SPACE></SPACE><REF NAME="sec:compound-procedures"></REF> 小节中。
    我们首先检索 
    <SPLITINLINE>
      
	主体
      
      <JAVASCRIPT>
	返回表达式
      </JAVASCRIPT>
    </SPLITINLINE>
    的内容 
<SCHEMEINLINE>f</SCHEMEINLINE> 
    : 
<SNIPPET EVAL="no">
      <REQUIRES>f</REQUIRES>
      <SCHEME>
(sum-of-squares (+ a 1) (* a 2))
      </SCHEME>
      <JAVASCRIPT>
sum_of_squares(a + 1, a * 2)
      </JAVASCRIPT>
    </SNIPPET> 
    然后我们替换参数 
<SCHEMEINLINE>a</SCHEMEINLINE>  
    由参数 5 替换：
<SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))
      </SCHEME>
      <JAVASCRIPT>
sum_of_squares(5 + 1, 5 * 2)
      </JAVASCRIPT>
    </SNIPPET>  
    通过两个
    <SPLITINLINE>
      
	操作数
      
      <JAVASCRIPT>
	参数
      </JAVASCRIPT>
    </SPLITINLINE>
    和
    <SPLITINLINE>
      
	一个运算符 sum-of-squares。  
      
      <JAVASCRIPT>
	一个函数表达式
	<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>。
      </JAVASCRIPT>
    </SPLITINLINE>
    评估这个
    <SPLITINLINE>
      
	组合
      
      <JAVASCRIPT>
	应用
      </JAVASCRIPT>
    </SPLITINLINE>
    涉及三个子问题。我们必须评估
    <SPLITINLINE>
      
	运算符
      
      <JAVASCRIPT>
	函数表达式
      </JAVASCRIPT>
    </SPLITINLINE>
    以获得要应用的
    <SPLITINLINE>
      
	程序
      
      <JAVASCRIPT>
	函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，同时我们必须评估
    <SPLITINLINE>
      
	操作数
      
      <JAVASCRIPT>
	参数表达式
      </JAVASCRIPT>
    </SPLITINLINE>
    以获得参数。现在
    <SPLITINLINE>
      
	(+ 5 1)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    产生 6，而
    <SPLITINLINE>
      
	(* 5 2)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    产生 10，因此我们必须将
    <SPLITINLINE>
      
	sum-of-squares 程序
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE> 函数
      </JAVASCRIPT>
    </SPLITINLINE>
    应用于 6 和 10。这些值被替换用于
 
    形式参数 
<SCHEMEINLINE>x</SCHEMEINLINE> 
    和 
<SCHEMEINLINE>y</SCHEMEINLINE> 
    在
    <SPLITINLINE>
      
	sum-of-squares 
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE> 
      </JAVASCRIPT>
    </SPLITINLINE>
    的主体中，将表达式简化为 
<SNIPPET EVAL="no">
      <SCHEME>
(+ (square 6) (square 10))
      </SCHEME>
      <JAVASCRIPT>
square(6) + square(10)
      </JAVASCRIPT>
    </SNIPPET> 
    如果我们使用 
    <SPLITINLINE>
      
	定义
      
      <JAVASCRIPT>
	声明
      </JAVASCRIPT>
    </SPLITINLINE>
    的 
<SCHEMEINLINE>square</SCHEMEINLINE> 
    , 这简化为 
<SNIPPET EVAL="no">
      <SCHEME>
(+ (* 6 6) (* 10 10))
      </SCHEME>
      <JAVASCRIPT>
(6 * 6) + (10 * 10)
      </JAVASCRIPT>
    </SNIPPET> 
    通过乘法简化为 
<SNIPPET EVAL="no">
      <SCHEME>
(+ 36 100)
      </SCHEME>
      <JAVASCRIPT>
36 + 100
      </JAVASCRIPT>
    </SNIPPET> 
    并最终简化为 
<SNIPPET EVAL="no">
      <SCHEME>
136
      </SCHEME>
      <JAVASCRIPT>
136	
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   <DO_BREAK_PAGE></DO_BREAK_PAGE> 
  <TEXT> 
    我们刚刚描述的过程称为 <EM>代换模型</EM> 
    用于 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    应用。它可以作为一个模型，用于确定
    <QUOTE>意义</QUOTE> 
    的 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    应用，因为本章中涉及的 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE> 
    。然而，有两个要点需要强调：
<UL>
       <LI>
        代换的目的是帮助我们思考 
        <SPLITINLINE>
	  程序
	  <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE> 
        应用，而不是提供解释器实际工作的描述。典型的解释器并不是通过操作 
        <SPLITINLINE>
	  程序
	  <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE>  
        的文本来评估它们的应用，而是通过使用局部环境来实现 <QUOTE>代换</QUOTE>，用于 
        <SPLITINLINE>
	  形式
	  <JAVASCRIPT>function</JAVASCRIPT>
        </SPLITINLINE>
        参数。我们将在第 3 章和第 4 章中详细讨论这一点，当时我们将仔细检查解释器的实现。
      </LI>
<LI> 
        在本书中，我们将呈现一系列越来越复杂的模型，以解释解释器是如何工作的，最终将以第<REF NAME="chap:reg"></REF>章中完整的解释器和编译器实现作为结尾。代换模型仅是这些模型的第一个<EMDASH></EMDASH>一种开始正式思考求值过程的方式。一般来说，当我们在 
        <INDEX>建模<SUBINDEX>在科学和工程中</SUBINDEX></INDEX>
        时，我们从简化和不完整的模型开始。随着我们对事物进行更详细的检查，这些简单模型变得不足，并必须被更精细的模型所替代。代换模型也不例外。特别是当我们在第<REF NAME="chap:state"></REF>章中讨论使用 
        <SPLITINLINE>
	  程序
	  <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE> 
        与<QUOTE>可变数据</QUOTE>时，我们将看到代换模型失效，必须被更复杂的模型所替代，用于 
        <SPLITINLINE>
	  程序
	  <JAVASCRIPT>函数</JAVASCRIPT>
        </SPLITINLINE> 
        应用。
 
<FOOTNOTE>尽管代换思想很简单，但给出代换过程的严格数学定义却出乎意料地复杂。问题出在于用于<SPILTINLINE>
	  程序的形式参数
	  <JAVASCRIPT>函数的参数</JAVASCRIPT>
        &lt;/SPLITINLINE&gt; 
        的名称与在表达式中使用的（可能是相同的）名称之间可能产生的混淆。实际上，逻辑和程序语义文献中对<EM>代换</EM>的错误定义历史悠久。<INDEX>Stoy, Joseph E.</INDEX>请参见<CITATION>Stoy 1977</CITATION>，以了解有关代换的详细讨论。</SPILTINLINE></FOOTNOTE>
</LI>
    </UL>
  </TEXT>

   <SUBHEADING> 
    <NAME>应用序与正则序</NAME>
  </SUBHEADING> 

  <TEXT> 
    根据在 
    <SPLITINLINE>
      第<SPACE></SPACE><REF NAME="sec:evaluating-combinations"></REF>节
      <JAVASCRIPT>第<SPACE></SPACE><REF NAME="sec:compound-procedures"></REF>节</JAVASCRIPT>
    </SPLITINLINE>
    中给出的求值描述，解释器首先评估 
    <SPLITINLINE>
      运算符
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    和 
    <SPLITINLINE>
      操作数
      <JAVASCRIPT>参数表达式</JAVASCRIPT>
    </SPLITINLINE>
    ，然后将结果 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用到结果参数上。这并不是执行求值的唯一方法。替代的求值模型不会在它们的值被需要之前评估 
    <SPLITINLINE>
      操作数
      <JAVASCRIPT>参数</JAVASCRIPT>
    </SPLITINLINE>
    。而是，它将首先将 
    <SPLITINLINE>
      操作数
      <JAVASCRIPT>参数</JAVASCRIPT>
    </SPLITINLINE>
    表达式替换为参数，直到获得一个只涉及 
    <SPLITINLINE>
      原语运算符，
      <JAVASCRIPT>运算符和原语函数，</JAVASCRIPT>
    </SPLITINLINE>
    的表达式，然后执行求值。如果我们使用这种方法，求值将...
<SNIPPET EVAL="no">
      <SCHEME>
(f 5)
      </SCHEME>
      <JAVASCRIPT>
f(5)
      </JAVASCRIPT>
    </SNIPPET> 
    将按照扩展的顺序进行 
<SNIPPET EVAL="no">
      <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))

(+  (square (+ 5 1))     (square (* 5 2))  )

(+  (* (+ 5 1) (+ 5 1))  (* (* 5 2) (* 5 2)))
      </SCHEME>
      <JAVASCRIPT>
sum_of_squares(5 + 1, 5 * 2)

square(5 + 1)     + square(5 * 2)

(5 + 1) * (5 + 1) + (5 * 2) * (5 * 2)
      </JAVASCRIPT>
    </SNIPPET> 
    随后是化简 
<SNIPPET EVAL="no">
      <SCHEME>
(+        (* 6 6)            (* 10 10))

(+          36                  100)

                    136
      </SCHEME>
      <JAVASCRIPT>
6    *    6    +    10   *   10

    36         +        100

              136
      </JAVASCRIPT>
    </SNIPPET> 
    这给出了与我们之前的求值模型相同的答案，但过程是不同的。特别是， 
    <SPLITINLINE>
      
	(+ 5 1)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    和 
    <SPLITINLINE>
      
	(* 5 2)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的求值在这里各执行两次，分别对应于表达式的化简。
<SNIPPET EVAL="no">
      <SCHEME>
(* x x)
      </SCHEME>
      <JAVASCRIPT>
x * x
      </JAVASCRIPT>
    </SNIPPET> 
    与 
<SCHEMEINLINE>x</SCHEMEINLINE> 
    分别被替换为 
    <SPLITINLINE>
      
	(+ 5 1)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE>       
      </JAVASCRIPT>
    </SPLITINLINE>
    和 
    <SPLITINLINE>
      
	(* 5 2).
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>.      
      </JAVASCRIPT>
    </SPLITINLINE>
</TEXT>
   
    这种替代的<QUOTE>完全展开然后化简</QUOTE>求值方法称为 
    <INDEX>正则序求值</INDEX>
    <EM>正则序求值</EM>，与解释器实际使用的<QUOTE>评估参数然后应用</QUOTE>方法形成对比，后者称为 
    <INDEX>应用序求值</INDEX>
    <EM>应用序求值</EM>。可以证明，对于可以通过代换建模的 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用（包括本书前两章中所有的 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ）并且能够产生合法值的情况，正则序和应用序求值会产生相同的值。（请参见<REF NAME="ex:normal-order-vs-appl-order-test"></REF>练习中的一个例子，其中正则序和应用序求值未能产生相同的结果，此时的值被称为<QUOTE>非法</QUOTE>。）

  <TEXT>
     
    <SPLITINLINE>
      
	Lisp
        <INDEX>应用序求值<SUBINDEX><ORDER>Lisp</ORDER>在 Lisp 中</SUBINDEX></INDEX>
        <INDEX>Lisp<SUBINDEX>在应用序求值中的</SUBINDEX></INDEX>
      
      <JAVASCRIPT>
	JavaScript
	<INDEX>应用序求值<SUBINDEX><ORDER>JavaScript</ORDER>在 JavaScript 中</SUBINDEX></INDEX>
        <INDEX>JavaScript<SUBINDEX>在应用序求值中的</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    使用应用序求值，部分原因是通过避免对表达式的多次求值而获得的额外效率，例如以上用 
    <SPLITINLINE>
      
	(+ 5 1) 
	和 (* 5 2)
      
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE> 
	和 <JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    所示的表达式，更重要的是，当我们离开可以通过代换建模的 
    <SPLITINLINE>
      程序
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    领域时，正则序求值变得更加复杂。另一方面，正则序求值可以成为一个极其有价值的工具，我们将在第3章和第4章中探讨它的一些含义。<FOOTNOTE>在第3章中，我们将介绍 <EM>流处理</EM>，这是一种通过结合有限形式的正则序求值来处理显然<QUOTE>无穷</QUOTE>的数据结构的方法。在<SPACE></SPACE><REF NAME="sec:lazy-evaluation"></REF>节中，我们将修改 
    <SPLITINLINE>
      Scheme
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    解释器，以生成正则序的变体 
    <SPLITINLINE>
      Scheme。
      <JAVASCRIPT>JavaScript。</JAVASCRIPT>
    </SPLITINLINE></FOOTNOTE>
 <SPLITINLINE>
      
	<INDEX>程序应用的代换模型<CLOSE></CLOSE></INDEX>
      
      <JAVASCRIPT>
	<INDEX>函数应用的代换模型<CLOSE></CLOSE></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
</TEXT>
</SUBSECTION>
