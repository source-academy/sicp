<CHAPTER>
   <NAME>模块性, 对象, 和状态</NAME> 
  <LABEL NAME="chap:state"></LABEL>
   <PDF_ONLY>\addtocontents{toc}{\protect\enlargethispage{2\baselineskip}}</PDF_ONLY> 
  
   <HISTORY>
    % 1997 年冬 增加 tex &apos;\label&apos; 以供手册参考。
    % 8/28/96 修正第三版打印的 3.5.5 页眉 - - 第353, 355, 357页

    % 4/13-4/15 索引整理 [在最终章节打印后]
    % 4/12 从校对中进行修正和页面调整
    % 4/11 校对中修正 - - 与索引前对比无异
    % 4/8-... Julie 进行索引修复 (以及 4/8 改变 &apos;ns&apos;)
    % 4/7/96 修正文本错误 &amp; 索引；完成页面编排
    % 4/6/96 根据 Hal 的要求编辑例题 3.73；分页到 3.4.2
    % 4/5/96 Hal: 修正索引
    % 4/3/96 Julie: 修正索引
    % 3/30/96 Julie: 修正校对中发现的错误
    % 3/29/96 Julie: 修正索引
    % 3/18-3/21 Julie 进行的恒定修正
    % 3/17/96 Hal 索引，Julie 修正
    % 3/13/96 新增几个索引条目： 一些 (并非全部) 原语和特殊形式的条目，用于题诗
    % 3/11/96 新增几个索引条目
    % 3/9/96  在两个图注中强制换行
    % 3/6/96  修正错别字；轻微排版调整
    % 3/5/96  修正例题中图的位置 (2/26 遗漏了 rc)
    % 3/4/96  重写以&quot;修正&quot;大多数三重和四重连字符
    %         将操作规范 (队列, 导线, 议程, 连接器) 分开行并重写连接器操作
    % 3/3/96  更正标题 3.4、3.4.2、3.5 的大写
    % 3/3/96  拼出 3 位作者 (Morris...) 而不是等。等人。
    % 2/26-3/3/96 修复一些不良换行
    % 2/26/96 移动 ode2, srlcb, srlc 图到练习中以避免额外的练习间空隙
    % 2/24/96 在 {lisp} 后紧接 \noindent 以关闭空白
    % 2/24/96 向 Gordon 参考文献中添加缺少的作者
    % 2/22/96 题诗的新规格
    % 2/19/96 更正错别字
    % 2/19/96 修正参考文献中的 () 
    % 2/19/96 \ 在 et al. 后面。
  </HISTORY> 

   <EPIGRAPH>
    $\def\aal{\alpha{\raise 1pt\hbox{\hskip -4pt{\char&apos;47}}}}
    M\epsilon\tau\alpha\beta\acute{\alpha}\lambda\lambda o \nu\
    ἀ\nu\alpha\pi\alpha\acute{\upsilon}\epsilon\tau\alpha\iota$
    <BR></BR>
    (即使在变化中，它仍然保持不变。)
    <INDEX>赫拉克利特</INDEX>
    <ATTRIBUTION><AUTHOR>赫拉克利特</AUTHOR></ATTRIBUTION>
  </EPIGRAPH> 
   <EPIGRAPH>
    Plus ça change, plus c&apos;est la même chose.

    <INDEX>Karr, Alphonse</INDEX>
    <ATTRIBUTION><AUTHOR>Alphonse Karr</AUTHOR></ATTRIBUTION>
  </EPIGRAPH> 

   <CHAPTERCONTENT></CHAPTERCONTENT> 

   <SHORT_PAGE LINES="2"></SHORT_PAGE> 
   <TEXT>
    <NOINDENT></NOINDENT>
    前几章介绍了构建程序的基本元素。我们看到如何将原语
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    和原语数据结合构建复合实体，并了解到抽象是帮助我们应对大型系统复杂性的重要手段。但这些工具不足以设计程序。有效的程序综合还需要能指导我们制定程序总体设计的组织原则。特别是，我们需要策略来帮助我们构建大型系统，使其模块化，即可以自然地分成可以分别开发和维护的一致部分。
    <INDEX>模块化</INDEX>
    <EM>模块化</EM>, 即，它们可以被<QUOTE>自然地</QUOTE>分成可以独立开发和维护的多个部分。
  </TEXT> 

   <TEXT>
    一个强大的设计策略，特别适用于构建用于物理系统建模的程序，是将我们程序的结构基于被建模系统的结构。对于系统中的每个对象，我们构建一个对应的计算对象。对于每个系统操作，我们在我们的计算模型中定义一个符号操作。我们使用此策略的希望在于，扩展模型以适应新对象或新操作不需要对程序进行战略性更改，只需添加这些对象或操作的新符号类比。如果我们的系统组织成功，那么为添加新功能或调试旧功能，我们将只需在系统的局部部分工作。
  </TEXT> 

   <TEXT>
    在很大程度上，我们组织大型程序的方式是由我们对被建模系统的感知决定的。在本章中，我们将研究由两种截然不同的系统结构<QUOTE>世界观</QUOTE>产生的两种突出的组织策略。第一种组织策略集中于<INDEX>对象</INDEX><EM>对象</EM>，将大型系统视为一组不同的对象，其行为随着时间可能会改变。另一种组织策略集中于系统中流动的<INDEX>流</INDEX><EM>流</EM>信息，就像电气工程师看待信号处理系统一样【16:0†cn.txt】。
  </TEXT> 

   <TEXT>
    对象化方法和流处理方法在编程中都提出了重要的语言学问题。对于对象，我们必须关注计算对象如何在改变的同时保持其身份。这将迫使我们放弃旧的计算代换模型 (节<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>)，转而采用一种更具机械性但在理论上不易处理的求值环境模型 。处理对象、变化和身份带来的困难是我们在计算模型中需要处理时间的基本结果。当我们允许程序的并发执行时，这些困难会更大。流方法可以在我们将模型中的模拟时间与评估期间计算机中发生事件的顺序分离时得到最充分的利用。我们将通过一种称为延迟求值的技术来实现这一点 。
  </TEXT> 

   <CHAPTERCONTENT></CHAPTERCONTENT> 

  <!--  Section 1 : Assignment and Local State  -->
  &amp;section3.1;

  <!--  Section 2 : The Environment Model of Evaluation  -->
  &amp;section3.2;

  <!--  Section 3 : Modeling with Mutable Data  -->
  &amp;section3.3;

  <!--  Section 4 : Concurrency: Time Is of the Essence  -->
  &amp;section3.4;

  <!--  Section 5 : Streams  -->
  &amp;section3.5;

</CHAPTER>
