[{"id":"/sicpjs/5.4","tag":"TITLE","body":"5.4  The Explicit-Control Evaluator"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In section ","tag":"#text"},{"tag":"REF","body":"5.1","href":"/sicpjs/5.1"},{"body":" we saw how to\n    transform simple\n    JavaScript\n    programs into descriptions of register\n    machines.  We will now perform this transformation on a more complex\n    program, the metacircular evaluator of\n    sections ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":"–","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":",\n    which shows how the behavior of a\n    JavaScript\n    interpreter can be described in terms of the\n    \n\tfunctions\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":".\n    The ","tag":"#text"},{"tag":"EM","child":[{"body":"explicit-control\n    evaluator","tag":"#text"}]},{"body":" that we develop in this section shows how the underlying\n    function-calling\n    and argument-passing mechanisms used in the\n    evaluation process can be described in terms of operations on\n    registers and stacks.  In addition, the explicit-control evaluator can\n    serve as an implementation of a\n    JavaScript\n    interpreter, written in a language that is very similar to the native machine\n    language of conventional computers.  The evaluator can be executed by the\n    register-machine simulator of section ","tag":"#text"},{"tag":"REF","body":"5.2","href":"/sicpjs/5.2"},{"body":".\n    Alternatively, it can be used as a starting point for building a\n    machine-language implementation of a\n    JavaScript\n    evaluator, or even a\n    \n    special-purpose machine for evaluating\n    JavaScript programs.\n    Figure ","tag":"#text"},{"tag":"REF","body":"5.16","href":"/sicpjs/5.4#fig-5.16"},{"body":" shows such a hardware\n    implementation: a silicon chip that acts as an evaluator for\n    \n        Scheme, the language used in place of JavaScript in the original edition of this book.\n      \n    The chip designers started with the data-path and controller specifications\n    for a register machine similar to the evaluator described in this section\n    and used design automation programs to construct the\n    integrated-circuit layout.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/5.4#footnote-1"}]},{"tag":"FIGURE","scale":"80%","src":"img_original/chip.png","id":"#fig-5.16","captionHref":"/sicpjs/5.4#fig-5.16","captionName":"Figure 5.16 ","captionBody":[{"body":"A silicon-chip implementation of an evaluator for Scheme.\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Registers and operations","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In designing the explicit-control evaluator, we must specify the\n    operations to be used in our register machine.  We described the\n    metacircular evaluator in terms of abstract syntax, using\n    functions\n    such as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_literal"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_function"},{"body":".\n    \n    In implementing the\n    register machine, we could expand these\n    functions\n    into sequences of\n    elementary list-structure memory operations, and implement these\n    operations on our register machine.  However, this would make our\n    evaluator very long, obscuring the basic structure with\n    details.  To clarify the presentation, we will include as primitive\n    operations of the register machine the syntax\n    functions\n    given in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.2","href":"/sicpjs/4.1.2"},{"body":" and the\n    functions\n    for representing environments and other runtime data given in\n    sections ","tag":"#text"},{"tag":"REF","body":"4.1.3","href":"/sicpjs/4.1.3"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":".\n    In order to completely specify an evaluator that could be programmed\n    in a low-level machine language or implemented in hardware, we would\n    replace these operations by more elementary operations, using the\n    list-structure implementation we described in\n    section ","tag":"#text"},{"tag":"REF","body":"5.3","href":"/sicpjs/5.3"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Our\n    JavaScript\n    evaluator register machine includes a stack and seven\n    registers:\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"comp"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"continue"},{"body":",\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"argl"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unev"},{"body":".\n    \n\tThe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"comp"},{"body":" register\n      \n    is used to hold the\n    \n\tcomponent\n      \n    to be evaluated, and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":" contains the environment in\n    which the evaluation is to be performed. At the end of an evaluation,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" contains the value obtained by evaluating the\n    component\n    in the designated environment. The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"continue"},{"body":" register is\n    used to implement recursion, as explained in section ","tag":"#text"},{"tag":"REF","body":"5.1.4","href":"/sicpjs/5.1.4"},{"body":". (The evaluator needs to call itself recursively, since\n    evaluating a \n    component requires  evaluating its\n    subcomponents.) The registers\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"argl"},{"body":", and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unev"},{"body":" are\n    used in evaluating function applications. \n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    We will not provide a data-path diagram to show how the registers and\n    operations of the evaluator are connected, nor will we give the\n    complete list of machine operations.  These are implicit in the\n    evaluator's controller, which will be presented in detail.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/5.4#footnote-link-1","child":[{"body":"See \n    Batali et al. 1982 for more\n    information on the chip and the method by which it was designed.","tag":"#text"}]}]