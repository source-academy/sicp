<SECTION>
  <NAME>The Explicit-Control Evaluator</NAME><!-- Error occurred while translating this section -->

  <PDF_ONLY>
    <!--  Figure moved here from later for SICP JS pagination  -->
    <!--  Figure code is copy of code later in this file in a WEB_ONLY  -->
  <FIGURE WEB_SCALE="0.8" SCALE="0.4" SRC="img_original/chip.png">
    <CAPTION>A silicon-chip implementation of an evaluator for Scheme.
    </CAPTION>
    <LABEL NAME="fig:Scheme-chip"></LABEL>
  </FIGURE>
  </PDF_ONLY><!-- Error occurred while translating this section -->

  <SECTIONCONTENT></SECTIONCONTENT><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:eceval"></LABEL>

  <INDEX>explicit-control evaluator for JavaScript<OPEN></OPEN></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    In section<SPACE></SPACE><REF NAME="sec:designing-register-machines"></REF> we saw how to
    transform simple
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    programs into descriptions of register
    machines.  We will now perform this transformation on a more complex
    program, the metacircular evaluator of
    sections<SPACE></SPACE><REF NAME="sec:core-of-evaluator"></REF><ENDASH></ENDASH><REF NAME="sec:running-eval"></REF>,
    which shows how the behavior of a
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    interpreter can be described in terms of the
    <SPLITINLINE>
      <SCHEME>
	procedures
	<SCHEMEINLINE>eval</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	functions
	<SCHEMEINLINE>evaluate</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and <!-- Error occurred while translating this section --><SCHEMEINLINE>apply</SCHEMEINLINE>.
    The <!-- Error occurred while translating this section --><EM>explicit-control
    evaluator<!-- Error occurred while translating this section --></EM> that we develop in this section shows how the underlying
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>procedure-calling</SCHEME>
      <JAVASCRIPT>function-calling</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    and argument-passing mechanisms used in the
    evaluation process can be described in terms of operations on
    registers and stacks.  In addition, the explicit-control evaluator can
    serve as an implementation of a
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    interpreter, written in a language that is very similar to the native machine
    language of conventional computers.  The evaluator can be executed by the
    register-machine simulator of section<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="sec:simulator"></REF>.
    Alternatively, it can be used as a starting point for building a
    machine-language implementation of a
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    evaluator, or even a
    <!-- Error occurred while translating this section --><INDEX>Scheme chip<!-- Error occurred while translating this section --></INDEX>
    <INDEX>integrated-circuit implementation of Scheme<!-- Error occurred while translating this section --></INDEX>
    <INDEX>chip implementation of Scheme<!-- Error occurred while translating this section --></INDEX>
    <INDEX>Scheme<SUBINDEX>integrated-circuit implementation of</SUBINDEX><!-- Error occurred while translating this section --></INDEX>
    special-purpose machine for evaluating
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>Scheme expressions.</SCHEME>
      <JAVASCRIPT>JavaScript programs.</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    Figure<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="fig:Scheme-chip"></REF> shows such a hardware
    implementation: a silicon chip that acts as an evaluator for
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <JAVASCRIPT>
        Scheme, the language used in place of JavaScript in the original edition of this book.
      </JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    The chip designers started with the data-path and controller specifications
    for a register machine similar to the evaluator described in this section
    and used design automation programs to construct the
    integrated-circuit layout.<!-- Error occurred while translating this section --><FOOTNOTE>See 
    <INDEX>Batali, John Dean</INDEX>
    <CITATION>Batali et al.<SPACE></SPACE>1982</CITATION> for more
    information on the chip and the method by which it was designed.</FOOTNOTE>
  <!-- Error occurred while translating this section --></TEXT>

  <WEB_ONLY>
    <!--  Figure moved earlier for SICP JS pagination  -->
    <!--  Figure code is copy of code earlier in this file in a PDF_ONLY  -->
  <FIGURE WEB_SCALE="0.8" SCALE="0.4" SRC="img_original/chip.png">
    <CAPTION>A silicon-chip implementation of an evaluator for Scheme.
    <INDEX>Scheme chip</INDEX>
    <INDEX>integrated-circuit implementation of Scheme</INDEX>
    <INDEX>Scheme<SUBINDEX>integrated-circuit implementation of</SUBINDEX></INDEX>
    <INDEX>chip implementation of Scheme</INDEX>
    </CAPTION>
    <LABEL NAME="fig:Scheme-chip"></LABEL>
  </FIGURE>
  </WEB_ONLY><!-- Error occurred while translating this section -->

  
  <SUBHEADING>
    <NAME>Registers and operations</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>data paths<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>operations</SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    In designing the explicit-control evaluator, we must specify the
    operations to be used in our register machine.  We described the
    metacircular evaluator in terms of abstract syntax, using
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    such as
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME><SCHEMEINLINE>quoted?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_literal</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    and
    <!-- Error occurred while translating this section --><SPLITINLINE><SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE>.</SCHEME>
    <JAVASCRIPT>
      <JAVASCRIPTINLINE>make_function</JAVASCRIPTINLINE>.
    </JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    In implementing the
    register machine, we could expand these
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    into sequences of
    elementary list-structure memory operations, and implement these
    operations on our register machine.  However, this would make our
    evaluator very long, obscuring the basic structure with
    details.  To clarify the presentation, we will include as primitive
    operations of the register machine the syntax
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    given in
    section<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="sec:representing-expressions"></REF> and the
    <!-- Error occurred while translating this section --><SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    <!-- Error occurred while translating this section --></SPLITINLINE>
    for representing environments and other runtime data given in
    sections<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="sec:eval-data-structures"></REF>
    and<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="sec:running-eval"></REF>.
    In order to completely specify an evaluator that could be programmed
    in a low-level machine language or implemented in hardware, we would
    replace these operations by more elementary operations, using the
    list-structure implementation we described in
    section<!-- Error occurred while translating this section --><SPACE></SPACE><REF NAME="sec:storage-allocation"></REF>.
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    Our
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    evaluator register machine includes a stack and seven
    registers:
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>registers</SUBINDEX></INDEX>
    <INDEX><USE>comp</USE> register</INDEX>
    <SPLITINLINE>
      <SCHEME> <SCHEMEINLINE>exp</SCHEMEINLINE>, </SCHEME>
      <JAVASCRIPT> <SCHEMEINLINE>comp</SCHEMEINLINE>, </JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>env</USE> register</INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>env</SCHEMEINLINE>,
    <INDEX><USE>val</USE> register</INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE>,
    <INDEX><USE>continue</USE> register<SUBINDEX><ORDER>explicit</ORDER>in explicit-control evaluator</SUBINDEX></INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>continue</SCHEMEINLINE>,
    <INDEX><USE>fun</USE> register</INDEX>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>fun</SCHEMEINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>argl</USE> register</INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>argl</SCHEMEINLINE>, and
    <INDEX><USE>unev</USE> register</INDEX>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>unev</SCHEMEINLINE>.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Exp</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The <JAVASCRIPTINLINE>comp</JAVASCRIPTINLINE> register
      </JAVASCRIPT>
    </SPLITINLINE>
    is used to hold the
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	component
      </JAVASCRIPT>
    </SPLITINLINE>
    to be evaluated, and <!-- Error occurred while translating this section --><SCHEMEINLINE>env</SCHEMEINLINE> contains the environment in
    which the evaluation is to be performed. At the end of an evaluation,
    <!-- Error occurred while translating this section --><SCHEMEINLINE>val</SCHEMEINLINE> contains the value obtained by evaluating the
    <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>component</JAVASCRIPT></SPLITINLINE>
    in the designated environment. The <!-- Error occurred while translating this section --><SCHEMEINLINE>continue</SCHEMEINLINE> register is
    used to implement recursion, as explained in section<SPACE></SPACE><REF NAME="sec:stack-recursion"></REF>. (The evaluator needs to call itself recursively, since
    evaluating <SPLITINLINE><SCHEME>an expression</SCHEME><JAVASCRIPT>a 
    component</JAVASCRIPT></SPLITINLINE> requires  evaluating its
    <SPLITINLINE><SCHEME>subexpressions.</SCHEME><JAVASCRIPT>subcomponents.</JAVASCRIPT></SPLITINLINE>) The registers
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>proc</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<SCHEMEINLINE>fun</SCHEMEINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <!-- Error occurred while translating this section --><SCHEMEINLINE>argl</SCHEMEINLINE>, and <!-- Error occurred while translating this section --><SCHEMEINLINE>unev</SCHEMEINLINE> are
    used in evaluating function applications. 
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    We will not provide a data-path diagram to show how the registers and
    operations of the evaluator are connected, nor will we give the
    complete list of machine operations.  These are implicit in the
    evaluator<APOS></APOS>s controller, which will be presented in detail.
  </TEXT><!-- Error occurred while translating this section -->

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>data paths<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  <!--  Subsection 1 : The Core of the Explicit-Control Evaluator  -->
  &amp;subsection5.4.1;
  
  <!--  Subsection 2 : Sequence Evaluation and Tail Recursion  -->
  &amp;subsection5.4.2;

  <!--  Subsection 3 : Conditionals, Assignments, and Definitions  -->
  &amp;subsection5.4.3;

  <!--  Subsection 4 : Running the Evaluator  -->
  &amp;subsection5.4.4;

</SECTION>

