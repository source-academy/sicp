[{"id":"/sicpjs/4.3.3","tag":"TITLE","body":"4.3.3  \n    Implementing the\n    \n      \n      amb\n    \n    Evaluator"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The evaluation of an ordinary\n    JavaScript program\n    may return a value, may never terminate, or may signal an error.\n    In nondeterministic\n    JavaScript\n    the evaluation of\n    a program\n    may in addition result in the discovery of\n    a dead end, in which case evaluation must backtrack to a previous choice\n    point.  The interpretation of nondeterministic\n    JavaScript\n    is complicated by this extra case.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    We will construct the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator for\n    nondeterministic\n    JavaScript\n    by modifying the\n    \n    analyzing evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.7","href":"/sicpjs/4.1.7"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.3.3#footnote-1"},{"body":" As in the analyzing evaluator, evaluation of\n    a component\n    is accomplished by calling an \n    \n    execution\n    function\n    produced by analysis of that\n    component.\n    The difference between the interpretation of ordinary\n    JavaScript\n    and the interpretation of nondeterministic\n    JavaScript\n    will be entirely\n    in the execution\n    functions.","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"\n      Execution\n      functions\n      and continuations\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Recall that the\n    \n    execution\n    functions\n    for the ordinary evaluator take one argument: the environment of execution.\n    In contrast, the execution\n    functions\n    in the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator take three arguments:\n    the environment, and two\n    functions\n    called\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"continuation functions","tag":"#text"}]},{"body":".\n    The evaluation of\n    a component\n    will finish by calling one of these two\n    continuations: If the evaluation results in a value, the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"success continuation","tag":"#text"}]},{"body":" is called with that value; if the evaluation\n    results in the discovery of a dead end, the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"failure continuation","tag":"#text"}]},{"body":" is called.  Constructing and calling\n    appropriate continuations is the mechanism by which the nondeterministic\n    evaluator implements backtracking.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    It is the job of the success continuation to receive a value and proceed\n    with the computation.  Along with that value, the success continuation is\n    passed another failure continuation, which is to be called subsequently if\n    the use of that value leads to a dead end.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    It is the job of the failure continuation to try another branch of the\n    nondeterministic process.  The essence of the nondeterministic\n    language is in the fact that\n    components\n    may represent choices among\n    alternatives.  The evaluation of such\n    a component\n    must proceed with\n    one of the indicated alternative choices, even though it is not known\n    in advance which choices will lead to acceptable results.  To deal\n    with this, the evaluator picks one of the alternatives and passes this\n    value to the success continuation.  Together with this value, the\n    evaluator constructs and passes along a failure continuation that can\n    be called later to choose a different alternative.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    A failure is triggered during evaluation (that is, a failure\n    continuation is called) when a user program explicitly rejects the\n    current line of attack (for example, a call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"require"},{"body":" may result in execution of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb()"},{"body":",\n    an expression that always\n    fails—see section ","tag":"#text"},{"tag":"REF","body":"4.3.1","href":"/sicpjs/4.3.1"},{"body":").  The failure\n    continuation in hand at that point will cause the most recent choice point\n    to choose another alternative.  If there are no more alternatives to be\n    considered at that choice point, a failure at an earlier choice point\n    is triggered, and so on.  Failure continuations are also invoked by\n    the driver loop in response to a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    request, to find another value of the\n    program.","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    In addition, if a side-effect operation (such as assignment to a\n    variable) occurs on a branch of the process resulting from a choice,\n    it may be necessary, when the process finds a dead end, to undo the\n    side effect before making a new choice.  This is accomplished by\n    having the side-effect operation produce a failure continuation that\n    undoes the side effect and propagates the failure.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    In summary, failure continuations are constructed by\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expressions—to provide a\n\tmechanism to make alternative choices if the current choice made by the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expression leads to a dead end;\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tthe top-level driver—to provide a mechanism to report failure\n\twhen the choices are exhausted;\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tassignments—to intercept failures and undo assignments\n\tduring backtracking.\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Failures are initiated only when a dead end is encountered. This occurs\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\tif the user program executes\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb()"},{"body":";","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tif the user types\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n\tat the top-level driver.\n      ","tag":"#text"}]}]}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    Failure continuations are also called during processing of a failure:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"When the failure continuation created by an assignment finishes\n      undoing a side effect, it calls the failure continuation it intercepted,\n      in order to propagate the failure back to the choice point that\n      led to this assignment or to the top level.\n\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"When the failure continuation for an ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"\n      runs out of choices, it calls the failure continuation that was originally\n      given to the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":", in order to propagate the\n      failure back to the previous choice point or to the top level.\n      ","tag":"#text"}]}]}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Structure of the evaluator","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    The syntax- and data-representation\n    functions\n    for the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator, and also the basic\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze"},{"body":"function,\n    are identical to those in the evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.7","href":"/sicpjs/4.1.7"},{"body":", except for the fact\n    that we need additional syntax\n    functions\n    to recognize\n    \n\tthe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" syntactic form:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":186,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQGZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMaAJlzFy1OqCr0A+hQCGAc3kBTACZSANpIoAKMmwAOdJSQoAaUBQAWSmQoCUoAN7ZQr0EyUUiTEhOn7ZKiZdAyMTBwAyCNBrWRUQ1kMSYwoHAF4Mi2tbeQBubABfYVJKWl9JDSoKJSZZdQSklIdnN3dPb3LpOUVVSvodPUSws1AAIk1q2vVRu3yikVLxCZq6qQA3OqIlBuHm1pc3Dy8fGKU47TkqesHG8NnC4tEy0FZZAGsbZantDfUt5oOriOHVAmn62nGVRW03Mv3+c0ei06UhIslY2xuuycgLax2R3WUajBA1CyRM5lGqPRMwR2AWYl8rw+KLR23oAE9WAAjGjqAGtYEnYkQqlKUbmDnc3n3Ip0koM0CSnnqKQ0Ags9E7MmpbEC9onWLxS7XUlNGWIhUVWT0ehUeQkdEmLVNXWHfX4hSEvokobainW232x0UGkPenPAN2h0pKRK3nO8KuoHu07nY3aQ0XQIm31muzm8PiSNBmNwmxKAAe+g8NrKCZ1LTdeNTRuzWau9fz5rlT3EFRUSjI6lktQZnaTuJBFQJvWFmL9Yz0DDkJikA6HI9kDJmoAAPruca03NPPbOtPWKRsmFRZFz1DZ18PR2Ud-vD0e-DkvXPTeSxoWSDXQcny3F9uwA0BH03BlY05ZVx0bZNmzjFU1Q1bZM3Tec8wRCCoOfOh1k2csqxrW06AQnFBV8TC2yw39UnzWkIKZGwl36WRV3w0CKNFWFiKkStqyUWs6H5JsQWFUZ2JXCggI3AiSHFUA+NAMtBNIkTyJIcD5WeCph25FRZA04TRJISi9WbE8eiJc9sL-cY0S5YzTLIsDcL0pZnNcgJanRSZYKldR6EsiSTlefRtBQ1V1VU2iOwcxiCy83xDJckyeRUdkwqQkEEvqejczuXTe0Zd5Ph8kyhPcii-NZSZ6HMLL2XEvKhXPJyjOqzTzOU+qApqJrQBa0qkU-AD5JAsckuaABIfYrKnLpTzs8EkopSbuO3FKysIVKpugsp0NyycOv6KQPAIC9QF4Xbxq24CjsIgbPCG07qNBLRLqUa6NtAAR7oVR6FJ4wCWo+lNiR+v6GPMDAgeeEGVQoGgpBkzi5MfSHm1Y9G6A4rinsU7R3w-NxkeewDRU7UwyfJl4Ko0Kq3K0ut6YZimDu247Xsa2mOc5-aysOxSpAh2amIeHtxoqajYzkapg1yz6bO-ey4bGeWOKVlJQ3mVKzsAmq2Yo2ak0+grOzGy1pCXFQqjKOoceWr8z3WzXpLoB2GVWE2+ocN8hc-Gc1p9W4Ri9kgfadlUdaUYN9ZlhV7cduhVmEh2yC3DEGLaz7oaum67s8vbU99lV2KUABHLYnXNxCC++ov-sB0vxvL2OpDqSZUWoNZc+KhtASbi6W81hHmMNip6BruuyDZChWGH8KPVs71oqXyPZ9r4wF6TiCd-nmx4+DUL+mXvZXBHlMrYvxj2+BoILtPlJN+X+h89vs54nvz-H+eDWOSr8TDny3p-C2KZ0x-0Rn2aQCd9AUHZLGOee9F4fy-tZaQJAiDqHqDAgBcDmYv0VgnN+MDIFYJRLgwqbYYE230tIO8NAyBvBdicNW7tw7DApMw1hB9DZ8LeOLGg2V2E0R-u2HMEcpYGz2njIRm8c7BjakbL64JRhCOUiA1IU89oVBoPoFYqMmD425FQPudYG4LTcFRFMFRSAjmQYY4xNBTGDC5BYsG44g5CwqJ41ETBnFGNHG4sxATvGzUIciRxQTVQhK3GEjxXiZp5ycDY6+S0OErXXj+IeFJYnBNce4tgESdrRM-BEuJLjQklPMZYs2aTHAZNAHYqhocN7-U0V46pCSTHhJSR5MMhsamJNMShcR6i5Lj3ybdWBvgCDPzkqM6OkzC6-Rum3YZe1Z723iSsVZDc2mSWbhs-6k9pYsSZrIfQ+hNDZzHJNf22lzAjnkEQYMrNzIQMQmoqSNy7lUAeS+OmwcjxPN6i80AbyPkxmeWUf+lyRl9KSaUwZhFUbd1ufcyJTScQyVAKMkxoA0iEpReMuC8YonHOyVIQp+zakDIaRZWagtQAAH5GbMgBTisceMaZErcXYUFYLRWtGFIspgF0VnxElnYNlAAuLlNgeVAu8fy1k2hBVMGFWysVR4JVLIZZxWVecRX6ota4XZ3tjWHLzrIi0jCsWAuBY0oemDXYdLyRHf02K1XlO2Q9A68K3UyMoflSRRUZHzOhUweQXztKhSOavFsUi01yr0bLaQzkEIfhpWvdWHtZmjFVa6pSkRohsoqDTCFZltLW1AFEVpwcYpoRrcGyFVj7UksyCW7kowKnOXRpYGgQKRKTLeQmhFnY5hAA","body":"function is_amb(component) {      \n    return is_tagged_list(component, \"application\") && \n           is_name(function_expression(component)) && \n           symbol_of_name(function_expression(component)) === \"amb\";\n}\nfunction amb_choices(component) {\n    return arg_expressions(component);\n} "},{"body":"\n\tWe continue to use the parse function of\n\tsection ","tag":"#text"},{"tag":"REF","body":"4.1.2","href":"/sicpjs/4.1.2"},{"body":", which\n\tdoesn't support ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" as a syntactic\n\tform and instead treats ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb("},{"body":"$\\ldots$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":" as\n\ta function application. The function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_amb"},{"body":" ensures that\n\twhenever the name\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" appears as the function\n\texpression of an application, the evaluator treats the\n\t\"","tag":"#text"},{"body":"application","tag":"#text"},{"body":"\" as\n\ta nondeterministic choice point.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.3.3#footnote-2"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    We must also add to the dispatch in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze"},{"body":" a\n    clause that will recognize\n    such expressions and generate an appropriate execution\n      function:","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n$\\ldots$\n: is_amb(component)\n? analyze_amb(component)\n: is_application(component)\n$\\ldots$\n      "}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    The top-level\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ambeval"},{"body":" (similar to the version of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    given in section ","tag":"#text"},{"tag":"REF","body":"4.1.7","href":"/sicpjs/4.1.7"},{"body":") analyzes the\n    given\n    component\n    and applies the resulting execution\n    function\n    to the given environment, together with two given continuations:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":674,"program":"chap=4&prgrm=","body":"function ambeval(component, env, succeed, fail) {      \n    return analyze(component)(env, succeed, fail);\n} "}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n    A success\n    \n    continuation is a\n    function\n    of two arguments: the value just obtained and another failure continuation to\n    be used if that value leads to a subsequent failure. A\n    \n    failure continuation\n    is a\n    function\n    of no arguments.  So \n    the general form of an\n    \n    execution\n    function\n    is\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n(env, succeed, fail) => {      \n    // $\\texttt{succeed}\\,$ is $\\texttt{(value, fail) =>}~\\ldots$\n    // $\\texttt{fail}\\,$ is $\\texttt{() =>}~\\ldots$\n    $\\ldots$\n}\n      "}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\n    For example, executing\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nambeval($component$,\n        the_global_environment,\n        (value, fail) => value,\n        () => \"failed\");\n\t  "},{"body":"\n    will attempt to evaluate the given\n    component\n    and will return either the\n    component's\n    value (if the evaluation succeeds) or the\n    \n\tstring ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"failed\""},{"body":"\n    (if the evaluation fails).\n    The call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ambeval"},{"body":" in the driver loop shown\n    below uses much more complicated continuation\n    functions,\n    which continue the loop and support the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    request.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p16","child":[{"body":"\n    Most of the complexity of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator\n    results from the mechanics of passing the continuations around as the\n    execution\n    functions\n    call each other.  In going through the following code, you should compare\n    each of the execution\n    functions\n    with the corresponding\n    function\n    for the ordinary evaluator given in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.7","href":"/sicpjs/4.1.7"},{"body":".\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h3","child":[{"body":"Simple expressions","tag":"#text"}]},{"tag":"TEXT","id":"#p17","child":[{"body":"\n    The execution\n    functions\n    for the simplest kinds of expressions are\n    essentially the same as those for the ordinary evaluator, except for the\n    need to manage the continuations.  The execution\n    functions\n    simply succeed with the value of the expression, passing along the failure\n    continuation that was passed to them.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":673,"program":"chap=4&prgrm=","body":"function analyze_literal(component) {\n    return (env, succeed, fail) =>\n             succeed(literal_value(component), fail);\n} "},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":671,"program":"chap=4&prgrm=","body":"function analyze_name(component) {\n    return (env, succeed, fail) =>\n             succeed(lookup_symbol_value(symbol_of_name(component),\n                                         env),\n                     fail);\n} "},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":670,"program":"chap=4&prgrm=","body":"function analyze_lambda_expression(component) {\n    const params = lambda_parameter_symbols(component);\n    const bfun = analyze(lambda_body(component));\n    return (env, succeed, fail) =>\n             succeed(make_function(params, bfun, env),\n                     fail);\n} "}]},{"tag":"TEXT","id":"#p18","child":[{"body":"\n    Notice that looking up a\n    name\n    always \"","tag":"#text"},{"body":"succeeds.","tag":"#text"},{"body":"\"\n    If\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"lookup_symbol_value"},{"body":"\n    fails to find the\n    name,\n    it signals an\n    error, as usual.  Such a \"","tag":"#text"},{"body":"failure","tag":"#text"},{"body":"\" indicates a program\n    bug—a reference to an unbound\n    name;\n    it is not an indication\n    that we should try another nondeterministic choice instead of the one that\n    is currently being tried.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h4","child":[{"body":"Conditionals and sequences","tag":"#text"}]},{"tag":"TEXT","id":"#p19","child":[{"body":"\n    Conditionals are also handled in a similar way as in the ordinary\n    evaluator.  The execution\n    function\n    generated by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze_conditional"},{"body":"\n    invokes the predicate execution\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pfun"},{"body":"\n    with a success continuation that checks whether the predicate value is true\n    and goes on to execute either the consequent or the alternative.  If the\n    execution of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pfun"},{"body":"\n    fails, the original failure continuation for\n    the\n    \n\tconditional\n      \n    expression is called.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction analyze_conditional(component) {      \n    const pfun = analyze(conditional_predicate(component));\n    const cfun = analyze(conditional_consequent(component));\n    const afun = analyze(conditional_alternative(component));\n    return (env, succeed, fail) =>\n             pfun(env,\n                  // success continuation for evaluating the predicate \n                  // to obtain $\\texttt{pred\\char`_value}$\n                  (pred_value, fail2) =>\n                    is_truthy(pred_value) \n                    ? cfun(env, succeed, fail2)\n                    : afun(env, succeed, fail2),\n                  // failure continuation for evaluating the predicate\t\t    \n                  fail);\n}\n      "}]},{"tag":"TEXT","id":"#p20","child":[{"body":"\n\tSequences are also handled in the same way as in the previous\n\tevaluator, except for the machinations in the\n\tsubfunction\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sequentially"},{"body":" that are required for passing the\n\tcontinuations. Namely, to sequentially execute ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":"\n\tand then ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":", we call\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"a"},{"body":" with a success continuation that calls\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"b"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction analyze_sequence(stmts) {\n    function sequentially(a, b) {\n        return (env, succeed, fail) => \n                 a(env, \n                   // success continuation for calling $\\texttt{a}$\n                   (a_value, fail2) =>\n                     is_return_value(a_value)\n                     ? succeed(a_value, fail2)\n                     : b(env, succeed, fail2),\n                   // failure continuation for calling $\\texttt{a}$\n                   fail);\n    }\n    function loop(first_fun, rest_funs) {\n        return is_null(rest_funs)\n               ? first_fun\n               : loop(sequentially(first_fun, head(rest_funs)),\n                      tail(rest_funs));\n    }\n    const funs = map(analyze, stmts);\n    return is_null(funs) \n           ? env => undefined\n           : loop(head(funs), tail(funs));\n}\n\t  "}]},{"tag":"SUBHEADING","id":"#h5","child":[{"body":"Declarations\n      and assignments\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p21","child":[{"body":"Declarations\n    are another case where we must go to some trouble to\n    manage the continuations, because it is necessary to evaluate the\n    \n\tdeclaration-value expression before actually declaring the new name.\n      \n    To accomplish this, the\n    declaration-value\n    execution\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"vfun"},{"body":"\n    is called with the environment, a success continuation, and the\n    failure continuation.  If the execution of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"vfun"},{"body":"\n    succeeds, obtaining a value ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"val"},{"body":" for the\n    \n\tdeclared name, the name is declared and the success is propagated:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":666,"program":"chap=4&prgrm=","body":"function analyze_declaration(component) {\n    const symbol = declaration_symbol(component);\n    const vfun = analyze(declaration_value_expression(component));\n    return (env, succeed, fail) => \n             vfun(env,\n                  (val, fail2) => {\n                      assign_symbol_value(symbol, val, env);\n                      return succeed(undefined, fail2);\n                  },\n                  fail);\n} "}]},{"tag":"TEXT","id":"#p22","child":[{"body":"\n    Assignments\n    \n    are more interesting.  This is the first place where we\n    really use the continuations, rather than just passing them around.\n    The execution\n    function\n    for assignments starts out like the one for\n    declarations.\n    It first attempts\n    to obtain the new value to be assigned to the\n    name.\n    If this evaluation of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"vfun"},{"body":"  \n    fails, the assignment fails.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p23","child":[{"body":"\n    If\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"vfun"},{"body":"  \n    succeeds, however, and we go on to make the assignment, we must consider the\n    possibility that this branch of the computation might later fail, which will\n    require us to backtrack out of the assignment.  Thus, we must arrange to\n    undo the assignment as part of the backtracking  process.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.3.3#footnote-3"}]},{"tag":"TEXT","id":"#p24","child":[{"body":"\n    This is accomplished by giving\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"vfun"},{"body":"  \n    a success continuation (marked with the comment \"","tag":"#text"},{"body":"*1*","tag":"#text"},{"body":"\" below)\n    that saves the old value of the variable before assigning the new value to\n    the variable and proceeding from the assignment.  The failure continuation\n    that is passed along with the value of the assignment (marked with the\n    comment \"","tag":"#text"},{"body":"*2*","tag":"#text"},{"body":"\" below) restores the old value of the variable\n    before continuing the failure. That is, a successful assignment provides a\n    failure continuation that will intercept a subsequent failure; whatever\n    failure would otherwise have called ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fail2"},{"body":" calls\n    this\n    function\n    instead, to undo the assignment before actually calling\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fail2"},{"body":".\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":658,"program":"chap=4&prgrm=","body":"function analyze_assignment(component) {\n    const symbol = assignment_symbol(component);\n    const vfun = analyze(assignment_value_expression(component));\n    return (env, succeed, fail) =>\n             vfun(env,\n                  (val, fail2) => {              // *1*\n                      const old_value = lookup_symbol_value(symbol,\n                                                            env);\n                      assign_symbol_value(symbol, val, env);\n                      return succeed(val,\n                                     () => {     // *2*\n                                         assign_symbol_value(symbol,\n                                                             old_value, \n                                                             env);\n                                         return fail2();\n                                     });\n                  },\n                  fail);\n} "}]},{"tag":"SUBHEADING","id":"#h6","child":[{"body":"Return statements and blocks","tag":"#text"}]},{"tag":"TEXT","id":"#p25","child":[{"body":"\n\tAnalyzing return statements is straightforward.\n\tThe return expression is analyzed to produce an execution function.\n\tThe execution function for the return statement calls that execution\n\tfunction with a success continuation that wraps the return value\n\tin a return value object and passes it to the original success continuation.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":669,"program":"chap=4&prgrm=","body":"function analyze_return_statement(component) {\n    const rfun = analyze(return_expression(component));\n    return (env, succeed, fail) =>\n             rfun(env,\n                  (val, fail2) =>\n                    succeed(make_return_value(val), fail2),\n                  fail);\n} "}]},{"tag":"TEXT","id":"#p26","child":[{"body":"\n\tThe execution function for blocks calls the body's execution\n\tfunction on an extended environment, without changing success or\n\tfailure continuations.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":667,"program":"chap=4&prgrm=","body":"function analyze_block(component) {\n    const body = block_body(component);\n    const locals = scan_out_declarations(body);\n    const unassigneds = list_of_unassigned(locals);\n    const bfun = analyze(body);\n    return (env, succeed, fail) =>\n             bfun(extend_environment(locals, unassigneds, env),\n                  succeed, \n                  fail);\n} "}]},{"tag":"SUBHEADING","id":"#h7","child":[{"body":"Function\n      applications\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p27","child":[{"body":"\n    The execution\n    function\n    for applications contains no new ideas except for the technical complexity\n    of managing the continuations.  This complexity arises in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze_application"},{"body":",  \n    due to the need to keep track of the success and failure continuations as\n    we evaluate the\n    argument expressions.\n    We use a\n    function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_args"},{"body":"  \n    to evaluate the list of\n    argument expressions,\n    rather than a simple\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"map"},{"body":" as in the ordinary evaluator.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":661,"program":"chap=4&prgrm=","body":"function analyze_application(component) {\n    const ffun = analyze(function_expression(component));\n    const afuns = map(analyze, arg_expressions(component));\n    return (env, succeed, fail) =>\n             ffun(env,\n                  (fun, fail2) =>\n                    get_args(afuns, \n                             env,\n                             (args, fail3) =>\n                               execute_application(fun,\n                                                   args, \n                                                   succeed,\n                                                   fail3),\n                             fail2),\n                  fail); \n} "}]},{"tag":"TEXT","id":"#p28","child":[{"body":"\n\tIn ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_args"},{"body":",\n\tnotice how walking down the list of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"afun"},{"body":"\n\texecution functions\n\tand constructing the resulting list of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"args"},{"body":"\n\tis accomplished by calling each\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"afun"},{"body":"\n\tin the list with a success continuation that recursively calls\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_args"},{"body":".\n    Each of these recursive calls to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_args"},{"body":"  \n    has a success continuation whose value is the\n    \n\tnew list resulting from using\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n\tto adjoin the newly obtained argument\n\tto the list of accumulated arguments:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction get_args(afuns, env, succeed, fail) {      \n    return is_null(afuns)\n           ? succeed(null, fail)\n           : head(afuns)(env,\n                         // success continuation for this $\\texttt{afun}$\n                         (arg, fail2) =>\n                           get_args(tail(afuns),\n                                    env,\n                                    // success continuation for\n                                    // recursive call to $\\texttt{get\\char`_args}$\n                                    (args, fail3) =>\n                                      succeed(pair(arg, args),\n                                              fail3),\n                                    fail2),\n                         fail);\n}\n      "}]},{"tag":"TEXT","id":"#p29","child":[{"body":"\n    The actual\n    function\n    application, which is performed by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"execute_application"},{"body":",\n        \n    is accomplished in the same way as for the ordinary evaluator, except for\n    the need to manage the continuations.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":660,"program":"chap=4&prgrm=","body":"function execute_application(fun, args, succeed, fail) {\n    return is_primitive_function(fun)\n           ? succeed(apply_primitive_function(fun, args),\n                     fail)\n           : is_compound_function(fun) \n           ? function_body(fun)(\n                 extend_environment(function_parameters(fun),\n                                    args,\n                                    function_environment(fun)),\n                 (body_result, fail2) => \n                   succeed(is_return_value(body_result) \n                           ? return_value_content(body_result)\n                           : undefined,\n                           fail2),\n                 fail)\n           : error(fun, \"unknown function type - execute_application\");\n} "}]},{"tag":"SUBHEADING","id":"#h8","child":[{"body":"Evaluating ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expressions","tag":"#text"}]},{"tag":"TEXT","id":"#p30","child":[{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"syntactic\n    form is the key element in the nondeterministic language.  Here we see the\n    essence of the interpretation process and the reason for keeping track of\n    the continuations.  The execution\n    function\n    for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" defines a loop\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"try_next"},{"body":"\n    that cycles through the execution\n    functions\n    for all the possible values of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"\n    expression.  Each execution\n    function\n    is called with a\n    \n    failure continuation that will try the next one.  When\n    there are no more alternatives to try, the entire\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" expression fails.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":663,"program":"chap=4&prgrm=","body":"function analyze_amb(component) {\n    const cfuns = map(analyze, amb_choices(component));\n    return (env, succeed, fail) => {\n               function try_next(choices) {\n                   return is_null(choices)\n                          ? fail()\n                          : head(choices)(env,\n                                          succeed,\n                                          () =>\n                                            try_next(tail(choices)));\n               }\n               return try_next(cfuns);\n           };\n} "}]},{"tag":"SUBHEADING","id":"#h9","child":[{"body":"Driver loop","tag":"#text"}]},{"tag":"TEXT","id":"#p31","child":[{"body":"\n    The driver loop for the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator is\n    complex, due to the mechanism that permits the user to retry in evaluating\n    a program.\n    The driver uses a\n    function\n    called\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"internal_loop"},{"body":",\n      \n    which takes as argument a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":".\n      \n    The intent is that calling\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    should go on to the next untried alternative in the nondeterministic\n    evaluation.\n    The function\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"internal_loop"},{"body":"\n    either calls\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    in response to the user typing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    at the driver loop, or else starts a new evaluation by calling\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ambeval"},{"body":".  \n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p32","child":[{"body":"\n    The failure continuation for this call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ambeval"},{"body":"\n    informs the user that there are no more values and reinvokes the driver\n    loop.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p33","child":[{"body":"\n    The success continuation for the call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ambeval"},{"body":"\n    is more subtle.  We print the obtained value and then\n    \n\treinvoke the internal loop\n      \n    with a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"function\n    that will be able to try the next alternative.  This\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"next_alternative"},{"body":"function\n    is the second argument that was passed to the success continuation.\n    Ordinarily, we think of this second argument as a failure continuation to\n    be used if the current evaluation branch later fails.  In this case,\n    however, we have completed a successful evaluation, so we can invoke the\n    \"","tag":"#text"},{"body":"failure","tag":"#text"},{"body":"\" alternative branch in order to search for additional\n    successful evaluations.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":601,"program":"chap=4&prgrm=","body":"const input_prompt = \"amb-evaluate input:\";\nconst output_prompt =  \"amb-evaluate value:\";\n\nfunction driver_loop(env) {\n    function internal_loop(retry) {\n        const input = user_read(input_prompt);\n        if (is_null(input)) {\n            display(\"evaluator terminated\");\n        } else if (input === \"retry\") {\n            return retry();\n        } else {\n            display(\"Starting a new problem\");\n            const program = parse(input);\n            const locals = scan_out_declarations(program);\n            const unassigneds = list_of_unassigned(locals);\n            const program_env = extend_environment(\n                                    locals, unassigneds, env);\n            return ambeval(\n                       program,  \n                       program_env,\n                       // ambeval success\n                       (val, next_alternative) => {\n                           user_print(output_prompt, val);\n                           return internal_loop(next_alternative);\n                       },\n                       // ambeval failure\n                       () => {\n                           display(\"There are no more values of\");\n                           display(input);\n                           return driver_loop(program_env);\n                       });\n        }\n    }\n    return internal_loop(() => {\n                             display(\"There is no current problem\");\n                             return driver_loop(env);\n                         });\n} "},{"body":"\n    The initial call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"internal_loop"},{"body":"\n    uses a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"function\n    that complains that there is no current problem and restarts the driver loop.\n    This is the behavior that will happen if the user types\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n    when there is no evaluation in progress.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p34","child":[{"body":"\n\tWe start the driver loop as usual, by setting up the global environment\n\tand passing it as the enclosing environment for the first iteration of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"driver_loop"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":false,"body":"const the_global_environment = setup_environment();\ndriver_loop(the_global_environment);"}]},{"tag":"EXERCISE","title":"Exercise 4.48","id":"#ex-4.48","child":[{"body":"\n    Implement a new\n    syntactic\n    form ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ramb"},{"body":" that is like\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" except that it searches alternatives in a\n    random order, rather than from left to right.  Show how this can help with\n    Alyssa's problem in exercise ","tag":"#text"},{"tag":"REF","body":"4.47","href":"/sicpjs/4.3.2#ex-4.47"},{"body":".\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.49","id":"#ex-4.49","child":[{"body":"\n\tChange the implementation of assignment so that it\n      \n    is not undone upon failure. For example, we can choose two distinct\n    elements from a list and count the number of trials required to make a\n    successful choice as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":false,"body":"let count = 0;\n\nlet x = an_element_of(\"a\", \"b\", \"c\");\nlet y = an_element_of(\"a\", \"b\", \"c\");\ncount = count + 1;\nrequire(x !== y);\nlist(x, y, count);","output":"Starting a new problem\namb-evaluate value:\n[\"a\", [\"b\", [2, null]]]"},{"tag":"SNIPPET","latex":false,"id":16,"eval":false,"body":"retry","output":"amb-evaluate value:\n[\"a\", [\"c\", [3, null]]]"},{"body":"\n\tWhat values would have been displayed if we had used\n\tthe original meaning of assignment rather than\n\tpermanent assignment?\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.50","id":"#ex-4.50","child":[{"body":"\n\tWe shall horribly abuse the syntax for conditional statements, by\n\timplementing a construct of the following form: \n\t","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nif (evaluation_succeeds_take) { $statement$ } else { $alternative$ }\n\t  "},{"body":"\n\tThe construct permits the user to catch the failure of a\n\tstatement. It evaluates the statement as usual and returns\n\tas usual if the evaluation succeeds. If the evaluation fails,\n\thowever, the given alternative statement \n\tis evaluated, as in the following example:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":false,"body":"if (evaluation_succeeds_take) {\n    const x = an_element_of(list(1, 3, 5));\n    require(is_even(x));\n    x;\n} else {\n    \"all odd\";\n}","output":"Starting a new problem\namb-evaluate value:\n\"all odd\""},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"if (evaluation_succeeds_take) {\n    const x = an_element_of(list(1, 3, 5, 8));\n    require(is_even(x));\n    x;\n} else {\n    \"all odd\";\n}","output":"Starting a new problem\namb-evaluate value:\n8"},{"body":"\n\tImplement this construct by extending the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":"\n\tevaluator. Hint: The function \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_amb"},{"body":" shows\n\thow to abuse the existing JavaScript syntax in order to implement\n\ta new syntactic form.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.51","id":"#ex-4.51","child":[{"body":"\n    With\n    \n\tthe new kind of assignment\n      \n    as described in exercise ","tag":"#text"},{"tag":"REF","body":"4.49","href":"/sicpjs/4.3.3#ex-4.49"},{"body":" and\n    \n\tthe construct\n\t","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nif (evaluation_succeeds_take) { $\\ldots$ } else { $\\ldots$ }\n      "},{"body":"\n    as in exercise ","tag":"#text"},{"tag":"REF","body":"4.50","href":"/sicpjs/4.3.3#ex-4.50"},{"body":", what will be the result of\n    evaluating\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":false,"body":"let pairs = null;      \nif (evaluation_succeeds_take) {\n    const p = prime_sum_pair(list(1, 3, 5, 8), list(20, 35, 110));\n    pairs = pair(p, pairs); // using permanent assignment\n    amb();\n} else {\n    pairs;\n}"}]},{"tag":"EXERCISE","title":"Exercise 4.52","id":"#ex-4.52","child":[{"body":"\n    If we had not realized that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"require"},{"body":" could be\n    implemented as an ordinary\n    function\n    that uses ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":", to be defined by the user as\n    part of a nondeterministic program, we would have had to implement it\n    as a \n    syntactic\n    form. This would require syntax\n    functions","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":false,"body":"function is_require(component) {\n    return is_tagged_list(component, \"require\"); \n}\nfunction require_predicate(component) { return head(tail(component)); }"},{"body":"\n    and a new clause in the dispatch in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze"},{"tag":"SNIPPET","latex":false,"id":21,"eval":false,"body":": is_require(component)\n? analyze_require(component)"},{"body":"\n    as well the\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze_require"},{"body":"\n    that handles ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"require"},{"body":"\n    expressions.  Complete the following definition of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"analyze_require"},{"body":".\n      ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction analyze_require(component) {\n    const pfun = analyze(require_predicate(component));\n    return (env, succeed, fail) =>\n             pfun(env,\n                  (pred_value, fail2) =>\n                    $\\langle{}$??$\\rangle$\n                    ? $\\langle{}$??$\\rangle$\n                    : succeed(\"ok\", fail2),\n                  fail);\n}\n      "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.3.3#footnote-link-1","child":[{"body":"We chose to\n    implement the lazy evaluator in\n    section ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.2"},{"body":" as a modification of the\n    ordinary metacircular evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".  In contrast, we will\n    base the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" evaluator on the analyzing\n    evaluator of section ","tag":"#text"},{"tag":"REF","body":"4.1.7","href":"/sicpjs/4.1.7"},{"body":", because\n    the execution\n    functions\n    in that evaluator provide a convenient framework for implementing\n    backtracking.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.3.3#footnote-link-2","child":[{"body":"With this treatment, \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" is no longer a name with\n\tproper scoping.\tTo avoid confusion, we must\n\trefrain from declaring ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amb"},{"body":" as a\n\tname in our nondeterministic programs.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.3.3#footnote-link-3","child":[{"body":"We\n    \n\tdidn't worry about undoing declarations, since we assume that a\n\tname can't be used prior to the evaluation of its declaration,\n\t\n\tso its previous value doesn't matter.\n      ","tag":"#text"}]}]