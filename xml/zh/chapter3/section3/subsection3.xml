<SUBSECTION> 
  
  <NAME>表示表格</NAME>


  <LABEL NAME="sec:tables"></LABEL>
  
  <INDEX>表格<OPEN></OPEN></INDEX>


  
  

   <TEXT>
    我们首先考虑一个 
    <INDEX>表<SUBINDEX>一维<OPEN></OPEN></SUBINDEX></INDEX>
    一维表，其中每个值都存储在一个单一的键下。我们将该表实现为记录列表，每条记录都实现为由一个键和其关联值构成的二元组。记录通过一对对的 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE>s</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>s</JAVASCRIPT>
    </SPLITINLINE>
    链接在一起，指向连续的记录。这些连接对被称为 
    <INDEX>表<SUBINDEX>骨干</SUBINDEX></INDEX>
    <EM>骨干</EM>。为了在向表中添加新记录时能够有可变更的位置，我们将该表构建为 
    <INDEX>带头列表</INDEX>
    <INDEX>列表<SUBINDEX>带头</SUBINDEX></INDEX>
    <EM>带头列表</EM>。带头列表在开头有一个特殊的骨干对，其中存放了一个虚拟的<QUOTE>记录</QUOTE><EMDASH></EMDASH>——在这种情况下，即任意选定的 
    <SPLITINLINE>
      <SCHEME>符号 <SCHEMEINLINE>*table*</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT>字符串 <JAVASCRIPTINLINE>&quot;*table*&quot;</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE></SPACE><REF NAME="fig:table_scheme"></REF>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE></SPACE><REF NAME="fig:table"></REF>
      </JAVASCRIPT>
    </SPLITINLINE>
    展示了该表的盒与指针图
    <SNIPPET EVAL="no">
      <SCHEME>
a:  1
b:  2
c:  3
      </SCHEME>
      <JAVASCRIPT>
a: 1
b: 2
c: 3
      </JAVASCRIPT>
    </SNIPPET>
    <SPLIT>
      <SCHEME>
        <FIGURE>
          <FIGURE SRC="img_original/ch3-Z-G-22.svg"></FIGURE>
          <CAPTION>以带头列表表示的表。</CAPTION>
          <LABEL NAME="fig:table_scheme"></LABEL>
        </FIGURE>
      </SCHEME></SPLIT>
      <JAVASCRIPT>
        <FIGURE>
          <FIGURE SRC="img_javascript/ch3-Z-G-22.svg"></FIGURE>
          <CAPTION>以带头列表表示的表。</CAPTION>
          <LABEL NAME="fig:table"></LABEL>
        </FIGURE>
      </JAVASCRIPT>
    &lt;/SPLIT&gt;
  </TEXT> 

   <TEXT>
    为了从表中提取信息，我们使用
    <SCHEMEINLINE>lookup</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>过程,</SCHEME>
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    它以一个键作为参数并返回关联的值（或者
    <SPLITINLINE>
      <SCHEME>false</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    如果该键下未存储值）。
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    是基于
    <SCHEMEINLINE>assoc</SCHEMEINLINE>
    操作定义的，该操作期望一个键和一个记录列表作为参数。注意，
    <SCHEMEINLINE>assoc</SCHEMEINLINE>
    从不处理虚拟记录。
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Assoc</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>assoc</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    返回具有给定键作为其
    <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    的记录。<FOOTNOTE>
    <SPLIT>
      <SCHEME>
	因为
	<SCHEMEINLINE>assoc</SCHEMEINLINE> 使用
	<SCHEMEINLINE>equal?</SCHEMEINLINE>，它能够识别符号、数字或列表结构作为键。
      </SCHEME>
      <JAVASCRIPT>
	因为 <SCHEMEINLINE>assoc</SCHEMEINLINE> 使用
	<JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE>，它能够识别作为字符串、数字或列表结构的键。&lt;!-- 
    --&gt;</JAVASCRIPT>&lt;!-- 
  --&gt;</SPLIT></FOOTNOTE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    然后检查由
    <SCHEMEINLINE>assoc</SCHEMEINLINE>
    返回的记录是否不是
    <SPLITINLINE>
      <SCHEME>false,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    并返回该记录的值（即
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE>)</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE>)</JAVASCRIPT>
    </SPLITINLINE>
    。

    <SNIPPET HIDE="yes">
      <NAME>lookup1_example</NAME>
      <REQUIRES>make_table1</REQUIRES>
      <REQUIRES>insert_into_table1</REQUIRES>
      <JAVASCRIPT>
const t = make_table();
insert(&quot;a&quot;, 10, t);
lookup(&quot;a&quot;, t);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>lookup</DECLARATION><SUBINDEX>在一维表中</SUBINDEX></INDEX>
      <INDEX><DECLARATION>assoc</DECLARATION></INDEX>
      <NAME>lookup1</NAME>
      <EXAMPLE>lookup1_example</EXAMPLE>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        false)))

(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
      </SCHEME>
      <JAVASCRIPT>
function lookup(key, table) {
    const record = assoc(key, tail(table));
    return is_undefined(record)
           ? undefined
           : tail(record);
}
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
           ? head(records)
           : assoc(key, tail(records));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT> 

   <TEXT>
    为了在表中指定的键下插入一个值，我们首先使用
    <SCHEMEINLINE>assoc</SCHEMEINLINE>
    来检查表中是否已经存在该键对应的记录。如果不存在，则我们通过
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>ing</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>ing</JAVASCRIPT>
    </SPLITINLINE>
    将该键与值组成一个新的记录，并在伪记录之后，将此记录插入到表头的记录列表中。如果该键对应的记录已存在，则我们将该记录的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    设为指定的新值。表头为我们提供了一个固定的位置，用于插入新记录的修改。<FOOTNOTE>因此，第一个骨干对就是代表表
    <QUOTE>本身</QUOTE>的对象；也就是说，指向表的指针实际上就是指向该对的指针。这个骨干对始终作为表的起始，如果不这样安排，
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    在添加新记录时就必须返回一个新的起始值。</FOOTNOTE>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>insert</DECLARATION><SUBINDEX>in one-dimensional table</SUBINDEX></INDEX>
      <REQUIRES>lookup1</REQUIRES>
      <NAME>insert_into_table1</NAME>
      <SCHEME>
(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value) (cdr table)))))
  &apos;ok)
      </SCHEME>
      <JAVASCRIPT>
function insert(key, value, table) {
    const record = assoc(key, tail(table));
    if (is_undefined(record)) {
        set_tail(table,
                 pair(pair(key, value), tail(table)));
    } else {
        set_tail(record, value);
    }
    return &quot;ok&quot;;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT> 

   <TEXT>
    要构造一个新的表，我们只需创建一个包含以下内容的列表：
    <SPLITINLINE>
      <SCHEME>
	符号 <SCHEMEINLINE>*table*</SCHEMEINLINE>：
      </SCHEME>
      <JAVASCRIPT>
	只是字符串 <SCHEMEINLINE>&quot;*table*&quot;</SCHEMEINLINE>：
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="yes" POSTPADDING="no">
      <INDEX><DECLARATION>make_table</DECLARATION><SUBINDEX>一维表</SUBINDEX></INDEX>
      <NAME>make_table1</NAME>
      <SCHEME>
(define (make-table)
  (list &apos;*table*))
      </SCHEME>
      <JAVASCRIPT>
function make_table() {
    return list(&quot;*table*&quot;);
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>table<SUBINDEX>一维</SUBINDEX></INDEX>
  </TEXT> 

   <SUBHEADING>
    <NAME>二维表</NAME>
  </SUBHEADING> 

   <INDEX>二维表<SUBINDEX>二维<OPEN></OPEN></SUBINDEX></INDEX> 

  
  <TEXT>
在二维表中，每个值由两个键索引。我们可以将这样的表构建为一维表，其中每个键标识一个子表。
<SPLITINLINE>
  <SCHEME>
    Figure<SPACE></SPACE><REF NAME="fig:2dtable_scheme"></REF>
  </SCHEME>
  <JAVASCRIPT>
    Figure<SPACE></SPACE><REF NAME="fig:2dtable"></REF>
  </JAVASCRIPT>
</SPLITINLINE>
展示了该表的框图与指针图
<SNIPPET EVAL="no">
  <SCHEME>
math:
    +:  43
    -:  45
    *:  42
letters:
    a:  97
    b:  98
  </SCHEME>
  <JAVASCRIPT>
&quot;math&quot;:
    &quot;+&quot;:  43
    &quot;-&quot;:  45
    &quot;*&quot;:  42
&quot;letters&quot;:
    &quot;a&quot;:  97
    &quot;b&quot;:  98
  </JAVASCRIPT>
</SNIPPET>
该表有两个子表。（子表不需要专用的标题
<SPLITINLINE>
  <SCHEME>
	symbol,
  </SCHEME>
  <JAVASCRIPT>
	string,
  </JAVASCRIPT>
</SPLITINLINE>
因为标识子表的键已起到此作用。）
<SPLIT>
  <SCHEME>
    <FIGURE>
      <FIGURE SRC="img_original/ch3-Z-G-23.svg"></FIGURE>
      <CAPTION>二维表。</CAPTION>
      <LABEL NAME="fig:2dtable_scheme"></LABEL>
    </FIGURE>
  </SCHEME>
  <JAVASCRIPT>
    <FIGURE>
      <FIGURE SRC="img_javascript/ch3-Z-G-23.svg"></FIGURE>
      <CAPTION>二维表。</CAPTION>
      <LABEL NAME="fig:2dtable"></LABEL>
    </FIGURE>
  </JAVASCRIPT>
</SPLIT>
</TEXT>

  <TEXT>
当我们查找一个条目时，我们使用第一个键来确定正确的子表。然后，我们使用第二个键来确定子表中的记录。
<SNIPPET HIDE="yes">
  <NAME>lookup2_example</NAME>
  <REQUIRES>make_table2</REQUIRES>
  <REQUIRES>insert_into_table2</REQUIRES>
  <JAVASCRIPT>
const t = list(&quot;table&quot;);
insert(&quot;a&quot;, &quot;b&quot;, 10, t);
lookup(&quot;a&quot;, &quot;b&quot;, t);
  </JAVASCRIPT>
</SNIPPET>
<SNIPPET HIDE="yes">
  <NAME>just_assoc</NAME>
  <JAVASCRIPT>
function assoc(key, records) {
    return is_null(records)
           ? undefined
           : equal(key, head(head(records)))
           ? head(records)
           : assoc(key, tail(records));
}
  </JAVASCRIPT>
</SNIPPET>
<SNIPPET EVAL="yes">
  <INDEX><DECLARATION>lookup</DECLARATION><SUBINDEX>in two-dimensional table</SUBINDEX></INDEX>
  <NAME>lookup2</NAME>
  <REQUIRES>just_assoc</REQUIRES>
  <EXAMPLE>lookup2_example</EXAMPLE>
  <EXPECTED>10</EXPECTED>
  <SCHEME>
(define (lookup key-1 key-2 table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record (assoc key-2 (cdr subtable))))
          (if record
              (cdr record)
              false))
        false)))
  </SCHEME>
  <JAVASCRIPT>
function lookup(key_1, key_2, table) {
    const subtable = assoc(key_1, tail(table));
    if (is_undefined(subtable)) {
        return undefined;
    } else {
        const record = assoc(key_2, tail(subtable));
        return is_undefined(record)
               ? undefined
               : tail(record);
    }
}
  </JAVASCRIPT>
</SNIPPET>
</TEXT>

  <TEXT>
为了在一对键下插入一个新项，我们使用<SCHЕMEINLINE>assoc&lt;/SCHEMEINLINE&gt;来检查第一键下是否存有子表。如果没有，我们构建一个包含单个记录的新子表
<SPLITINLINE>
  <SCHEME>(<SCHEMEINLINE>key-2</SCHEMEINLINE>,</SCHEME>
  <JAVASCRIPT>(<JAVASCRIPTINLINE>key_2</JAVASCRIPTINLINE>,</JAVASCRIPT>
</SPLITINLINE>
<SCHEMEINLINE>value</SCHEMEINLINE>)，并将其插入到第一键对应的表中。如果第一键下已存在子表，我们便把新记录插入该子表中，使用上述一维表的插入方法：
<SNIPPET EVAL="yes" POSTPADDING="no">
  <INDEX><DECLARATION>insert</DECLARATION><SUBINDEX>in two-dimensional table</SUBINDEX></INDEX>
  <REQUIRES>just_assoc</REQUIRES>
  <NAME>insert_into_table2</NAME>
  <SCHEME>
(define (insert! key-1 key-2 value table)
  (let ((subtable (assoc key-1 (cdr table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr table)))))
  &apos;ok)
      </SCHEME>
      <JAVASCRIPT>
function insert(key_1, key_2, value, table) {
    const subtable = assoc(key_1, tail(table));
    if (is_undefined(subtable)) {
        set_tail(table,
                 pair(list(key_1, pair(key_2, value)), tail(table)));
    } else {
        const record = assoc(key_2, tail(subtable));
        if (is_undefined(record)) {
            set_tail(subtable,
                     pair(pair(key_2, value), tail(subtable)));
        } else {
            set_tail(record, value);
        }
    }
    return &quot;ok&quot;;
}
      </JAVASCRIPT>
    </SNIPPET>
    <INDEX>table<SUBINDEX>two-dimensional<CLOSE></CLOSE></SUBINDEX></INDEX>
  </SCHЕMEINLINE></TEXT>

  
  <SUBHEADING>
    <NAME>创建本地表</NAME>
  </SUBHEADING>


  
  <INDEX>表<SUBINDEX>本地<OPEN></OPEN></SUBINDEX></INDEX>


  
  <TEXT>
    上面定义的<SCHEMEINLINE>查找</SCHEMEINLINE>和 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>插入!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>插入</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    操作以表作为参数。这使我们能够使用访问多个表的程序。另一种处理多个表的方法是为每个表提供单独的<SCHEMEINLINE>查找</SCHEMEINLINE>和 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>插入!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>插入</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。我们可以通过过程化地表示表来实现这一点，即将表表示为一个在其局部状态中维护内部表的对象。当发送适当消息时，这个<QUOTE>表对象</QUOTE>提供用于操作内部表的
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。下面是以这种方式表示的二维表生成器：
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>make_table</DECLARATION><SUBINDEX>消息传递实现</SUBINDEX></INDEX>
      <NAME>make_table2</NAME>
      <REQUIRES>just_assoc</REQUIRES>
      <SCHEME>
(define (make-table)
  (let ((local-table (list &apos;*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      &apos;ok)    
    (define (dispatch m)
      (cond ((eq? m &apos;lookup-proc) lookup)
            ((eq? m &apos;insert-proc!) insert!)
            (else (error &quot;Unknown operation - - TABLE&quot; m))))
  dispatch))
      </SCHEME>
      <JAVASCRIPT>
function make_table() {
    const local_table = list(&quot;*table*&quot;);
    function lookup(key_1, key_2) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            return undefined;
        } else {
            const record = assoc(key_2, tail(subtable));
            return is_undefined(record)
                   ? undefined
                   : tail(record);
        }
    }
    function insert(key_1, key_2, value) {
        const subtable = assoc(key_1, tail(local_table));
        if (is_undefined(subtable)) {
            set_tail(local_table,
                     pair(list(key_1, pair(key_2, value)),
                          tail(local_table)));
        } else {
            const record = assoc(key_2, tail(subtable));
            if (is_undefined(record)) {
                set_tail(subtable,
                         pair(pair(key_2, value), tail(subtable)));
            } else {
                set_tail(record, value);
            }
        }
    }
    function dispatch(m) {
        return m === &quot;lookup&quot;
               ? lookup
               : m === &quot;insert&quot;
               ? insert
               : error(m, &quot;unknown operation -- table&quot;);
    }
    return dispatch;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>


  
  <TEXT>
    使用
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    我们可以通过
    <INDEX>operation-and-type table<SUBINDEX>implementing</SUBINDEX></INDEX>
    来实现用于数据定向编程中（参见<REF NAME="sec:data-directed"></REF>节）所用的
    <SCHEMEINLINE>get</SCHEMEINLINE> 和
    <SCHEMEINLINE>put</SCHEMEINLINE> 操作，方法如下：
    <SNIPPET HIDE="yes">
      <NAME>operation_table_example</NAME>
      <JAVASCRIPT>
put(&quot;a&quot;, &quot;b&quot;, 10);
get(&quot;a&quot;, &quot;b&quot;);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>get</DECLARATION></INDEX> 
      <INDEX><DECLARATION>put</DECLARATION></INDEX> 
      <NAME>operation_table</NAME>
      <REQUIRES>make_table2</REQUIRES>
      <EXAMPLE>operation_table_example</EXAMPLE>
      <EXPECTED>10</EXPECTED>
      <SCHEME>
        <INDEX>operation-and-type table<SUBINDEX>implementing</SUBINDEX></INDEX>
(define operation-table (make-table))
(define get (operation-table &apos;lookup-proc))
(define put (operation-table &apos;insert-proc!))
      </SCHEME>
      <JAVASCRIPT>
const operation_table = make_table();
const get = operation_table(&quot;lookup&quot;);
const put = operation_table(&quot;insert&quot;);
      </JAVASCRIPT>
    </SNIPPET>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Get</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>get</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    接受两个键作为参数，而 <SCHEMEINLINE>put</SCHEMEINLINE> 接受两个键和一个值作为参数。两者都访问相同的局部表，该局部表封装于调用 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    创建的对象中。
    <INDEX>table<SUBINDEX>local<CLOSE></CLOSE></SUBINDEX></INDEX>
  </TEXT>


  
  <EXERCISE>
    在上述表实现中，关键字使用
    <INDEX>table<SUBINDEX>testing equality of keys</SUBINDEX></INDEX>
    <INDEX>key of a record<SUBINDEX>testing equality of</SUBINDEX></INDEX>
    通过
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>equal?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>equal</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    （由 <SCHEMEINLINE>assoc</SCHEMEINLINE> 调用）来测试相等性。这并不总是合适的测试方法。例如，我们可能有一个数字作为关键字的表，在这种情况下，我们不需要与所查找的数字完全匹配，而只需在一定容差范围内。请设计一个表构造器
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-table</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    ，该构造器接受一个
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>same-key?</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>same_key</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    作为参数，用来测试关键字的<QUOTE>相等性</QUOTE>。  
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Make-table</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>函数 <JAVASCRIPTINLINE>make_table</JAVASCRIPTINLINE>
    </JAVASCRIPT></SPLITINLINE>
    应返回一个 <SCHEMEINLINE>dispatch</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    ，该函数可用于访问本地表中适当的 <SCHEMEINLINE>lookup</SCHEMEINLINE> 和 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    。
    <LABEL NAME="ex:numeric-keys"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<JAVASCRIPT>
// GitHub 用户 clean99 的解法

function make_table(same_key) {
    const local_table = list(&quot;*table*&quot;);
    function assoc(key, records) {
        return is_null(records)
               ? undefined
               : same_key(key, head(head(records)))
               ? head(records)
               : assoc(key, tail(records));
    }
    function lookup(key) {
        const record = assoc(key, tail(local_table));
        return is_undefined(record)
               ? undefined
               : tail(record);
    }
    function insert(key, value) {
        const record = assoc(key, tail(local_table));
        if (is_undefined(record)) {
               set_tail(local_table,
                        pair(pair(key, value), tail(local_table)));
            } else {
               set_tail(record, value);
            }
            return &quot;ok&quot;;
    }
    function dispatch(m) {
        return m === &quot;lookup&quot;
               ? lookup
               : m === &quot;insert&quot;
               ? insert
               : error(m, &quot;unknow operation -- table&quot;);
    }
    return dispatch;
}

const operation_table = make_table((a, b) =&gt; a === b);
const get = operation_table(&quot;lookup&quot;);
const put = operation_table(&quot;insert&quot;);
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    概括一维和二维表，展示如何实现一个表，其中的值存储在 <INDEX>table<SUBINDEX><ORDER>n</ORDER><LATEXINLINE>$n$</LATEXINLINE>-维</SUBINDEX></INDEX> 的任意数量的键下，并且可以在不同数量的键下存储不同的值。<SCHEMEINLINE>lookup</SCHEMEINLINE> 和 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>insert!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>insert</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    应以一个键列表作为输入，用于访问该表。
    <LABEL NAME="ex:3_25"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<NAME>solution_3_25</NAME>
	<EXAMPLE>solution_3_25_example</EXAMPLE>
	<JAVASCRIPT>
// 由 GitHub 用户 tttinkl 提供

function assoc(key, records, same_key) {
  return is_null(records)
    ? undefined
    : same_key(key, head(head(records)))
    ? head(records)
    : assoc(key, tail(records), same_key);
}


function make_table(same_key) {
  const local_table = list(&quot;&quot;*table&quot;&quot;);

  const get_value = tail;

  function is_table(t) {
    return is_pair(t) &amp;&amp; head(t) === &quot;&quot;*table&quot;&quot;;
  }

  function lookup(keys) {
    function lookup_generic(keys, table) {
      if (is_null(keys)) {
        return table;
      }
      const key_1 = head(keys);
      const key_rest = tail(keys);
      const record = assoc(key_1, tail(table), same_key);
      if (is_undefined(record)) {
        return undefined;
      }
      if (is_null(key_rest)) {
        return get_value(record);
      } else if (is_table(get_value(record))) {
        return lookup_generic(key_rest, get_value(record));
      } else {
        error(&apos;无效的键&apos;);
      }
    }
    return lookup_generic(keys, local_table);
  }


  function insert(keys, value) {
    function insert_generic(keys, value, table) {
      const key_1 = head(keys);
      const key_rest = tail(keys);
      const record = assoc(key_1, tail(table), same_key);
      if (is_undefined(record)) {
        if (is_null(key_rest)) {
          set_tail(
            table,
            pair(pair(key_1, value), tail(table)));
        } else {
          const new_subtable = list(&quot;&quot;*table&quot;&quot;);
          set_tail(
            table,
            pair(pair(key_1, new_subtable), tail(table))
          );
          insert_generic(key_rest, value, new_subtable);
        }
      } else {
        if (is_null(key_rest)) {
          set_tail(record, value);
        } else {
          if (is_table(get_value(record))) {
            insert_generic(key_rest, value, get_value(record));
          } else {
            const new_subtable = list(&quot;&quot;*table&quot;&quot;);
            set_tail(record, new_subtable);
            insert_generic(key_rest, value, new_subtable);
          }
        }
      }
    }
    insert_generic(keys, value, local_table);
  }

  function dispatch(m) {
    return m === &quot;lookup&quot;
      ? lookup
      : m === &quot;insert&quot;
      ? insert
      : m === &quot;show&quot;
      ? () =&gt; {
        display(local_table);
        return local_table;
      }
      : error(m, &quot;未知操作 -- 表&quot;);
  }
  return dispatch;
}

const table = make_table(equal);

const get = table(&apos;lookup&apos;);
const put = table(&apos;insert&apos;);
const show = table(&apos;show&apos;);
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>solution_3_25_example</NAME>
	<JAVASCRIPT>
put(list(&quot;a&quot;), 1);
put(list(&quot;b&quot;, &quot;c&quot;), 2);
put(list(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;), 3);

display(get(list(&quot;a&quot;)));
display(get(list(&quot;b&quot;, &quot;c&quot;)));
display(get(list(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;)));

put(list(&quot;a&quot;, &quot;b&quot;), 1);
display(get(list(&quot;a&quot;)));
put(list(&quot;b&quot;, &quot;c&quot;, &quot;d&quot;), 2);
display(get(list(&quot;b&quot;, &quot;c&quot;)));
put(list(&quot;b&quot;), 1);
display(get(list(&quot;b&quot;)));
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  
  <EXERCISE>
    要搜索上述实现的表，需要扫描记录列表。这基本上是<REF NAME="sec:representing-sets"></REF>中无序列表的表示。对于较大的表，采用不同的结构实现可能更高效。请描述一种表的实现方法，其中(key, value)记录是使用
    <INDEX>二叉树<SUBINDEX>表的结构作为</SUBINDEX></INDEX>
    <INDEX>二叉树<SUBINDEX>以二叉树与无序列表表示的表</SUBINDEX></INDEX>
    来组织的，假设键可以以某种方式排序（例如按数值或字母顺序）。（参见第<REF NAME="chap:data"></REF>章的习题<REF NAME="ex:set-lookup-binary-tree"></REF>。）
    <LABEL NAME="ex:3_26"></LABEL>
    <SOLUTION>
      <SNIPPET>
	<NAME>ex_3_26_solution</NAME>
	<EXAMPLE>ex_3_26_solution_example</EXAMPLE>
	<JAVASCRIPT>
// 由 GitHub 用户 devinryu 提供

function entry(tree) { return head(tree); }
function left_branch(tree) { return head(tail(tree)); }
function right_branch(tree) { return head(tail(tail(tree))); }
function make_tree(entry, left, right) { 
    return list(entry, left, right);
}

// kv 是 list(key, value)
function adjoin_set(kv, set) {
    return is_null(set)
           ? make_tree(kv, null, null)
           : head(kv) === head(entry(set))
           ? set
           : head(kv) &lt; head(entry(set))
           ? make_tree(entry(set),
                       adjoin_set(kv, left_branch(set)),
                       right_branch(set))
           : make_tree(entry(set),
                       left_branch(set),
                       adjoin_set(kv, right_branch(set)));
}

function make_table() {
    let local_table = null;
    function lookup(given_key, tree_of_records) {
        if (is_null(tree_of_records)) {
            return null;
        } else {
            const this_entry = entry(tree_of_records);
            const this_key = head(this_entry);
            return given_key === this_key 
                   ? this_entry
                   : given_key &lt; this_key
                   ? lookup(given_key, 
                            left_branch(tree_of_records))
                   : lookup(given_key, 
                            right_branch(tree_of_records));
        }
    }
    function insert(k, v) {
        let record = lookup(k, local_table);
        if(is_null(record)) {
            local_table = adjoin_set(list(k, v), local_table);
        } else {
            // 不做处理
        }
    }
    function get(k) {
        return head(tail(lookup(k, local_table)));
    }
    function print() {
        return display(local_table);
    }
    function dispatch(m) {
        return m === &quot;lookup&quot;
        ? get
        : m === &quot;insert&quot;
        ? insert
        : m  === &quot;print&quot;
        ? print
        : error(m, &quot;error&quot;);
    }
    return dispatch;
}
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET HIDE="yes">
	<NAME>ex_3_26_solution_example</NAME>
	<JAVASCRIPT>
const t = make_table();
const get = t(&quot;lookup&quot;);
const put = t(&quot;insert&quot;);
const print = t(&quot;print&quot;);

// 测试结果

put(3, &quot;d&quot;);
put(1, &quot;a&quot;);
put(2, &quot;b&quot;);
put(2, &quot;c&quot;);
put(4, &quot;e&quot;);
put(5, &quot;f&quot;);

print();

display(get(2)); // 显示: &quot;b&quot;
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>


  <EXERCISE>
    
  <EM>记忆化</EM>
  <INDEX>记忆化</INDEX>
  <INDEX>表格化</INDEX>
  <INDEX>表<SUBINDEX>用于存储计算后的值</SUBINDEX></INDEX>
  <INDEX><FUNCTION></FUNCTION><SUBINDEX>已记忆化</SUBINDEX></INDEX>
  (也叫<EM>表格化</EM>) 是一种技术，它使得一个
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  能够在局部表中记录先前计算过的值。这项技术能够显著提升程序的性能。一个已记忆化的
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  维护着一个表，其中存储了之前调用的值，并且使用产生这些值的参数作为键。当已记忆化的
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  被要求计算一个值时，它首先会检查表中是否已经存在该值；如果存在，则直接返回该值。否则，它就以常规方式计算新值并将其存入表中。作为记忆化的一个例子，请回忆第<SPACE></SPACE><REF NAME="sec:tree-recursion"></REF>节中用于计算斐波那契数的指数级过程：
<SNIPPET EVAL="yes">
      <EXAMPLE>fib_example</EXAMPLE>
      <EXPECTED>8</EXPECTED>
      <SCHEME>
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) {
    return n === 0
           ? 0
           : n === 1
           ? 1
           : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
  同样的已记忆化
  <SPLITINLINE>
    <SCHEME>过程</SCHEME>
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  是
<SNIPPET HIDE="yes">
      <NAME>memorize_example</NAME>
      <JAVASCRIPT>
memo_fib(5);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="yes">
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>with memoization</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <INDEX><DECLARATION>memo_fib</DECLARATION></INDEX> 
      <NAME>memo_fib</NAME>
      <REQUIRES>memorize</REQUIRES>
      <EXAMPLE>memorize_example</EXAMPLE>
      <EXPECTED>5</EXPECTED>
      <SCHEME>
(define memo-fib
  (memoize (lambda (n)
             (cond ((= n 0) 0)
                   ((= n 1) 1)
                   (else (+ (memo-fib (- n 1))
                            (memo-fib (- n 2))))))))
      </SCHEME>
      <JAVASCRIPT>
const memo_fib = memoize(n =&gt; n === 0
                              ? 0
                              : n === 1
                              ? 1
                              : memo_fib(n - 1) +
                                memo_fib(n - 2)
                        );
      </JAVASCRIPT>
    </SNIPPET>
    其中，memoizer 被定义为
<SNIPPET EVAL="yes">
      <INDEX><DECLARATION>memoize</DECLARATION><FRAGILE></FRAGILE></INDEX> 
      <REQUIRES>make_table1</REQUIRES>
      <REQUIRES>lookup1</REQUIRES>
      <REQUIRES>insert_into_table1</REQUIRES>
      <NAME>memorize</NAME>
      <SCHEME>
(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
      </SCHEME>
      <JAVASCRIPT>
function memoize(f) {
    const table = make_table();
    return x =&gt; {
               const previously_computed_result =
                   lookup(x, table);
               if (is_undefined(previously_computed_result)) {
                   const result = f(x);
                   insert(x, result, table);
                   return result;
               } else {
                   return previously_computed_result;
               }
           };
}
      </JAVASCRIPT>
    </SNIPPET>
    画一个环境图以分析
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(memo-fib 3)</SCHEMEINLINE>。</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib(3)</JAVASCRIPTINLINE>。</JAVASCRIPT>
    </SPLITINLINE>
    解释为什么 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>memo-fib</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    计算
<LATEXINLINE>$n$</LATEXINLINE>求第 n 个斐波那契数所需的步骤数与 n 成正比<LATEXINLINE>$n$</LATEXINLINE>。如果我们只是简单地将 
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>memo-fib</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>memo_fib</JAVASCRIPTINLINE></JAVASCRIPT>
</SPLITINLINE>
 定义为 
<SPLITINLINE>
  <SCHEME><SCHEMEINLINE>(memoize fib)</SCHEMEINLINE>?</SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>memoize(fib)</JAVASCRIPTINLINE>?</JAVASCRIPT>
</SPLITINLINE>
 ，这个方案依然有效吗？<LABEL NAME="ex:memoization"></LABEL>
  </EXERCISE>
   <INDEX>表格<CLOSE></CLOSE></INDEX> 
</SUBSECTION>
