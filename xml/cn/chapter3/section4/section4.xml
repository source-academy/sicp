<SECTION>
   <NAME>并发: 时间至关重要</NAME> 

   <SECTIONCONTENT></SECTIONCONTENT> 

  <LABEL NAME="sec:time-is-of-the-essence"></LABEL>

   <INDEX>并发<OPEN></OPEN></INDEX> 

   <TEXT>
    我们已经见识过具有局部状态的计算对象作为建模工具的强大功能。然而，正如<SPACE></SPACE><REF NAME="sec:costs-of-assignment"></REF>章节所警告的，这种功能是有代价的：丧失了引用透明性，引发了一系列关于相同性和变化的问题，并且需要放弃替换模型的求值，转而使用更加复杂的环境模型。
  </TEXT> 

   <TEXT>
    隐藏在状态的复杂性、相同性与变化之下的核心问题是，通过引入赋值，我们被迫将<INDEX>时间<SUBINDEX>与赋值</SUBINDEX></INDEX><EM>时间</EM>引入到我们的计算模型中。在引入赋值之前，我们的所有程序都是无时间性的，因为任何具有值的表达式总是拥有相同的值。相比之下，回忆在章节<SPACE></SPACE><REF NAME="sec:local-state-variables"></REF>开始时介绍的一个示例：模拟银行账户的提款并返回结果余额。

    
      <NAME>withdraw_example_3_4</NAME>
      <REQUIRES>withdraw</REQUIRES>
      <EXPECTED>75</EXPECTED>
      
(withdraw 25)
      
      <JAVASCRIPT>
withdraw(25);
      </JAVASCRIPT>
      <SCHEMEOUTPUT>
75
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
75
      </JAVASCRIPT_OUTPUT>
    

    
      <NAME>withdraw_example_3_4_second</NAME>
      <REQUIRES>withdraw</REQUIRES>
      <REQUIRES>withdraw_example_3_4</REQUIRES>
      <EXPECTED>50</EXPECTED>
      
(withdraw 25)
      
      <JAVASCRIPT>
withdraw(25);
      </JAVASCRIPT>
      <SCHEMEOUTPUT>
50
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
50
      </JAVASCRIPT_OUTPUT>
    
    在这里，对同一表达式的连续求值产生不同的值。这种行为源于执行赋值（在本例中，对变量balance的赋值）划定了值改变的<EM>时间点</EM>。求值表达式的结果不仅取决于表达式本身，还取决于求值是否发生在这些时间点之前或之后。使用具有局部状态的计算对象构建模型迫使我们将时间视为编程中的一个基本概念。
  </TEXT> 

   <TEXT>
    我们可以进一步构建计算模型以匹配我们对物理世界的感知。世界中的对象并不是一个接一个地依次改变的。相反，我们感知它们为<EM>并发的</EM><EMDASH></EMDASH>同时发生的。因此，将系统建模为<EM>并发</EM>执行的<EM>计算过程<JAVASCRIPT><INDEX>thread</INDEX><EM>线程</EM>（计算步骤的序列）</JAVASCRIPT></EM>集合通常是自然的。<SPLITINLINE><JAVASCRIPT><FOOTNOTE>在整本书中，这样的顺序线程被称为<QUOTE>过程</QUOTE>，但在本节中，我们使用术语<QUOTE>线程</QUOTE>来强调它们对共享内存的访问。</FOOTNOTE></JAVASCRIPT></SPLITINLINE>就像我们通过具有分离局部状态的对象组织模型使程序模块化一样，将计算模型划分为分开并且并发演化的部分通常也是合适的。即使程序是在一个顺序计算机上执行，把程序写得好像它们要并发执行一样，迫使程序员避免非本质的时间约束，从而使程序更模块化。
  </TEXT> 

  <LONG_PAGE LINES="1"></LONG_PAGE>
   <TEXT>
    除了使程序更模块化之外，并发计算还可以比顺序计算提供速度优势。顺序计算机一次只执行一个操作，因此执行任务所需的时间与执行的总操作数成正比。<FOOTNOTE>大多数实际处理器实际上一次执行几个操作，采用一种称为<INDEX>流水线</INDEX><EM>流水线</EM>的策略。尽管这种技术极大地提高了硬件的有效利用率，但仅用于加速顺序指令流的执行，同时保持顺序程序的行为。</FOOTNOTE>然而，如果可能将问题分解为相对独立且只需偶尔通信的部分，则可能将这些部分分配给不同的计算处理器，从而产生与可用处理器数量成正比的速度优势。
  </TEXT> 

   <TEXT>
    不幸的是，由赋值引入的复杂性在并发存在时变得更加成问题。并发执行的事实，无论是因为世界并行运作还是因为我们的计算机这样做，都带来了我们对时间理解上的额外复杂性。
  </TEXT> 

  <!--  Subsection 1 : The Nature of Time in Concurrent Systems  -->
  &amp;subsection3.4.1;

  <!--  Subsection 2 : Mechanisms for Controlling Concurrency  -->
  &amp;subsection3.4.2;

</SECTION>
