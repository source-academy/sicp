<SUBSECTION>
   <NAME>最大公约数</NAME> 

  <LABEL NAME="sec:gcd"></LABEL>
   <INDEX>最大公约数<OPEN></OPEN></INDEX> 

   <TEXT>
    两个整数的最大公约数 (GCD) 被定义为能够同时整除这两个数 $a$ 和 $b$ 的最大整数，并且没有余数。例如，16 和 28 的 GCD 是 4。在<REF NAME="chap:data"></REF>章中，当我们研究如何实现有理数算术时，我们将需要能够计算 GCD，以便将有理数简化为最简形式。(要将有理数简化为最简形式，我们必须将分子和分母都除以它们的 GCD。例如，16/28 简化为 4/7。) 找到两个整数 GCD 的一种方法是对它们进行因子分解并搜索共同因子，但还有一个著名的算法更为高效。
  </TEXT> 

  <TEXT>
     <INDEX>欧几里得算法<APOS></APOS><OPEN></OPEN></INDEX>
    算法的思想基于这样的观察：如果
<LATEXINLINE>$r$</LATEXINLINE>  是余数，当
<LATEXINLINE>$a$</LATEXINLINE>  被除以
<LATEXINLINE>$b$</LATEXINLINE> , 然后 <COMMON> 的公因子 
</COMMON><LATEXINLINE>$a$</LATEXINLINE>  和 
<LATEXINLINE>$b$</LATEXINLINE>  正是 <COMMON> 的公因子
</COMMON><LATEXINLINE>$b$</LATEXINLINE>  和 
<LATEXINLINE>$r$</LATEXINLINE> . 因此，我们可以使用方程
<LATEX>
      \[\begin{array}{lll}
      \textrm{GCD} (a, b) &amp;=&amp; \textrm{GCD}(b, r)
      \end{array}\]
    </LATEX> 
    逐步将计算 GCD 的问题简化为计算越来越小的整数对的 GCD 的问题。例如，
<DO_BREAK_PAGE></DO_BREAK_PAGE>
<!--  
        %could squeeze onto 1 line with
        %\par
        %\begin{smallequation}
        %{\textrm{GCD}}(206,40)={\textrm{GCD}}(40,6)={\textrm{GCD}}(6,4)={\textrm{GCD}}(4,2)={\textrm{GCD}}(2,0)=2
        %\end{smallequation}
        % (to match, would have to make above equation small too)
        %Hal prefers the following since looks like a process (steps)
      -->
    <LATEX>
      \[\begin{array}{lll}
      \textrm{GCD}(206,40) &amp; = &amp; \textrm{GCD}(40,6) \\
                           &amp; = &amp; \textrm{GCD}(6,4) \\
                           &amp; = &amp; \textrm{GCD}(4,2) \\
                           &amp; = &amp; \textrm{GCD}(2,0) \\
                           &amp; = &amp; 2
      \end{array}\]
    </LATEX> 
    化简 
<LATEXINLINE>$\textrm{GCD}(206, 40)$</LATEXINLINE>  到 
<LATEXINLINE>$\textrm{GCD}(2, 0)$</LATEXINLINE> , 其结果是 2。可以显示，从任何两个正整数开始，进行反复化简将始终最终产生一对，其中第二个数字为 0。然后 GCD 就是这一对中的另一个数字。这个计算 GCD 的方法被称为 <EM>欧几里得算法</EM>。<FOOTNOTE>欧几里得算法之所以如此称呼，是因为它出现在欧几里得的 <INDEX><ORDER>欧几里得的几何原本</ORDER>欧几里得的 <EM>几何原本</EM></INDEX> <EM>几何原本</EM>（书 7，大约公元前 300 年）。根据 <INDEX>Knuth, Donald E.</INDEX> Knuth (1997a) 的说法，可以认为这是已知的最古老的非平凡算法。古埃及的乘法方法（练习<SPACE></SPACE><REF NAME="ex:it-pro-mult-int"></REF>）无疑更古老，但正如 Knuth 解释的，欧几里得算法是已知的最古老的被提出作为一般算法的方法，而不是一组插图示例。</FOOTNOTE>
</TEXT>

   <TEXT>
    表达欧几里得算法很容易作为一个
    <SPLITINLINE>
      过程:
      <JAVASCRIPT>函数:</JAVASCRIPT>
    </SPLITINLINE>
    
      <INDEX><DECLARATION>gcd</DECLARATION></INDEX>
      <NAME>gcd_definition</NAME>
      <EXAMPLE>gcd_example</EXAMPLE>
      
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (余数 a b))))
      
      <JAVASCRIPT>
function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}
      </JAVASCRIPT>
    

    
      <NAME>gcd_example</NAME>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXPECTED>4</EXPECTED>
      
(gcd 20 12)
      
      <JAVASCRIPT>
gcd(20, 12);
      </JAVASCRIPT>
    
    这生成了一个迭代过程，其步骤数量随着相关数字的对数增长。
  </TEXT> 

  <TEXT> 
    欧几里得算法所需步骤数量的对数增长与 
    <INDEX>斐波那契数<SUBINDEX>欧几里得的 GCD 算法与</SUBINDEX></INDEX>
    斐波那契数之间存在有趣的关系：
<BLOCKQUOTE>
       <B>拉梅定理:</B>
      <INDEX><ORDER>拉梅</ORDER>拉梅定理</INDEX>
      如果欧几里得的算法需要 
<LATEXINLINE>$k$</LATEXINLINE>  步骤来计算某对的 GCD，那么对中的较小数字必须大于或等于 
<LATEXINLINE>$k$</LATEXINLINE> 
第 th 斐波那契数。
<FOOTNOTE> 
这个定理由 
<INDEX><ORDER>拉梅</ORDER>拉梅</INDEX> 证明于1845年，他是一位法国数学家和工程师，主要以对数学物理的贡献而闻名。为了证明该定理，我们考虑对 
<LATEXINLINE>$(a_k ,b_k)$</LATEXINLINE> , 其中 
<LATEXINLINE>$a_k\geq b_k$</LATEXINLINE> , 其中欧几里得的算法在 
<LATEXINLINE>$k$</LATEXINLINE> 
步骤。证明基于这样的说法，如果 
<LATEXINLINE>$(a_{k+1},\ b_{k+1}) \rightarrow (a_{k},\ b_{k})
      \rightarrow (a_{k-1},\ b_{k-1})$</LATEXINLINE> 
是三个连续对在化简过程中，那么我们必须 
<LATEXINLINE>$b_{k+1}\geq b_{k} + b_{k-1}$</LATEXINLINE> 
要验证这一说法，考虑到化简步骤是通过应用 
<LATEXINLINE>$a_{k-1} = b_{k}$</LATEXINLINE>, 
      <LATEXINLINE>$b_{k-1} =
      \textrm{remainder of}\ a_{k}\ \textrm{divided by}\ b_{k}$</LATEXINLINE> 
步骤。第二个方程意味着 
<LATEXINLINE>$a_{k} = qb_{k} + b_{k-1}$</LATEXINLINE> 
某个正整数 
<LATEXINLINE>$q$</LATEXINLINE> 
因为 
<LATEXINLINE>$q$</LATEXINLINE> 
至少必须为 1，我们有 
<LATEXINLINE>$a_{k} = qb_{k} + b_{k-1} \geq b_{k} + b_{k-1}$</LATEXINLINE> 
。而在之前的化简步骤中，我们有 
<LATEXINLINE>$b_{k+1}= a_{k}$</LATEXINLINE> 
。因此， 
<LATEXINLINE>$b_{k+1} = a_{k}\geq b_{k} + b_{k-1}$</LATEXINLINE> 
。这验证了该声称。现在我们可以通过对 
<LATEXINLINE>$k$</LATEXINLINE> 
算法终止所需的步骤数。结果对于 
<LATEXINLINE>$k=1$</LATEXINLINE> 
，因为这仅仅要求 
<LATEXINLINE>$b$</LATEXINLINE> 
至少与 
<LATEXINLINE>$\text{Fib}(1)=1$</LATEXINLINE> 
。假设结果对于所有小于或等于 
<LATEXINLINE>$k$</LATEXINLINE> 
并建立结果 
<LATEXINLINE>$k+1$</LATEXINLINE> 
。设 
<LATEXINLINE>$(a_{k+1},\ b_{k+1})\rightarrow(a_{k},\ b_{k})
      \rightarrow(a_{k-1},\ b_{k-1})$</LATEXINLINE> 
在化简过程中是连对。根据我们的归纳假设，我们有 
<LATEXINLINE>$b_{k-1}\geq {\textrm{Fib}}(k-1)$</LATEXINLINE> 
和 
<LATEXINLINE>$b_{k}\geq {\textrm{Fib}}(k)$</LATEXINLINE> 
因此，将我们刚刚证明的结论与斐波那契数的定义结合起来得到 
<LATEXINLINE>$b_{k+1} \geq b_{k} + b_{k-1}\geq {\textrm{Fib}}(k) +
      {\textrm{Fib}}(k-1) = {\textrm{Fib}}(k+1)$</LATEXINLINE> 
，这完成了拉梅定理的证明。</FOOTNOTE>
    </BLOCKQUOTE>
  </TEXT>

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    我们可以利用这个定理来获得欧几里得算法的增长阶估计。设 $n$ 为两个输入中较小的一个
    <SPLITINLINE>
      过程.
      <JAVASCRIPT>函数.</JAVASCRIPT>
    </SPLITINLINE>
    如果该过程需要 $k$ 步骤，则我们必须有 
    $n\geq {\textrm{Fib}} (k)\approx\phi^k/\sqrt{5}$。
    因此步骤数 $k$ 的增长与 
    $n$ 的对数（以 $\phi$ 为底）相同。因此，增长阶为 
    $\Theta(\log n)$。
    <INDEX>最大公约数<CLOSE></CLOSE></INDEX>
    <INDEX>欧几里得算法<CLOSE></CLOSE></INDEX>
  </TEXT> 

  <EXERCISE>
    <LABEL NAME="ex:gcd-process"></LABEL>  
    由 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    生成的过程当然取决于解释器使用的规则。作为一个例子，考虑迭代 
<SCHEMEINLINE>gcd</SCHEMEINLINE> 
      
上述 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。假设我们使用
    <INDEX>正常序求值<SUBINDEX>应用序 vs.</SUBINDEX></INDEX>
    <INDEX>应用序求值<SUBINDEX>正常序 vs.</SUBINDEX></INDEX>
    正常序求值来解释这个 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，正如在
    <REF NAME="sec:substitution-model"></REF>一节中讨论的那样。(正常序求值规则
    <SPLITINLINE>
      if
      <JAVASCRIPT>条件表达式</JAVASCRIPT>
    </SPLITINLINE>
    的描述见练习<REF NAME="ex:normal-order-vs-appl-order-test"></REF>。)
    使用代换法（对于正常序），说明评估过程中的 
    <SPLITINLINE>
      (gcd 206 40)
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    生成的过程，并指示 
<SCHEMEINLINE>remainder</SCHEMEINLINE>  
实际执行的操作。多少 
<SCHEMEINLINE>remainder</SCHEMEINLINE> 
在正常序求值中实际执行的操作有多少 
    <SPLITINLINE>
      (gcd 206 40)?
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE>?</JAVASCRIPT>
    </SPLITINLINE>
    在应用序求值中又有多少？
<SOLUTION>
      <SPLIT>
	<JAVASCRIPT>
	  <OL>
	    <LI> 
使用正常序求值，过程经历了 18 次余数操作。在评估条件时有 14 次，最终化简阶段有其余的操作。
<SNIPPET PAGE="49" EVAL="no">
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
206 % 40 === 0 ? 40 : gcd(206 % 40,
                          40 % (206 % 40))
// remainder operation (1)
6 === 0 ? 40 : gcd(206 % 40,
                   40 % (206 % 40))
gcd(206 % 40, 40 % (206 % 40))
40 % (206 % 40) === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
// remainder operations (2) and (3)
4 === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
gcd(40 % (206 % 40), (206 % 40) % (40 % (206 % 40)))
(206 % 40) % (40 % (206 % 40)) === 0 
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)))
// remainder operations (4), (5), (6), (7)
2 === 0
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
gcd((206 % 40) % (40 % (206 % 40)), 
    (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)))
(40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))) === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
// remainder operations 
                    (8), (9), (10), (11), (12), (13), (14)
0 === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
(206 % 40) % (40 % (206 % 40))    
// remainder operations (15), (16), (17), (18)
2
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	     
使用应用序求值，过程执行了 4 次余数操作。 
              
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
// 余数操作 (1)
gcd(40, 6)
6 === 0 ? 40 : gcd(6, 40 % 6)
gcd(6, 40 % 6)
// 余数操作 (2)
gcd(6, 4)
4 === 0 ? 6 : gcd(4, 6 % 4)
gcd(4, 6 % 4)
// 余数操作 (3)
gcd(4, 2)
2 === 0 ? 4 : gcd(2, 4 % 2)
gcd(2, 4 % 2)
// 余数操作 (4)
gcd(2, 0)
0 === 0 ? 2 : gcd(0, 2 % 0)
2
		</JAVASCRIPT>
	      
	    &lt;/LI&gt;
</OL>
	</JAVASCRIPT>
      </SPLIT>
    </SOLUTION>
  </EXERCISE>
</SUBSECTION>
