<SUBSECTION>
  <NAME>
    The Benefits of Introducing Assignment
  </NAME>

  <LABEL NAME="sec:benefits-of-assignment"/>
  <INDEX>assignment<SUBINDEX>benefits of<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    As we shall see, introducing assignment into our programming language
    leads us into a thicket of difficult conceptual issues.  Nevertheless,
    viewing systems as
    <INDEX>object(s)<SUBINDEX>benefits of modeling with</SUBINDEX></INDEX>
    collections of objects with local state is a
    powerful technique for maintaining a
    <INDEX>modularity<SUBINDEX>through modeling with objects</SUBINDEX></INDEX>
    modular design.  As a simple
    example, consider the design of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>rand</SCHEMEINLINE> that, whenever
    it is called, returns an integer chosen at random.
  </TEXT>

  <TEXT>
    It is not at all clear what is meant by <QUOTE>chosen at random.</QUOTE>
    What we presumably want is for successive calls to
    <INDEX>random-number generator</INDEX>
    <SCHEMEINLINE>rand</SCHEMEINLINE> to produce a sequence of numbers that has
    statistical properties of uniform distribution.  We will not discuss methods
    for generating suitable sequences here.  Rather, let us assume that we have a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    that has the property that if we start with a given number
    <LATEXINLINE>$x_{1}$</LATEXINLINE> and form
    <SPLIT>
      <SCHEME>
	<SNIPPET EVAL="no" LATEX="yes">
	  <SCHEME>
<LATEXINLINE>$x_{2}$</LATEXINLINE> = (rand-update <LATEXINLINE>$x_{1}$</LATEXINLINE>)
<LATEXINLINE>$x_{3}$</LATEXINLINE> = (rand-update <LATEXINLINE>$x_{2}$</LATEXINLINE>)
	  </SCHEME>
	</SNIPPET>
      </SCHEME>
      <JAVASCRIPT>
	<SNIPPET EVAL="no" LATEX="yes">
	  <JAVASCRIPT>
$x_2$ = rand_update($x_1$);
$x_3$ = rand_update($x_2$);
      </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
    then the sequence of values
    <LATEXINLINE>$x_1, x_2, x_3, \ldots$</LATEXINLINE>, will have the desired
    statistical properties.<FOOTNOTE>One common way to implement
    <SPLITINLINE><SCHEME>
      <SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    is to use the rule that <LATEXINLINE>$x$</LATEXINLINE> is updated to
    <LATEXINLINE>$ax+b$</LATEXINLINE> modulo <LATEXINLINE>$m$</LATEXINLINE>,
    where <LATEXINLINE>$a$</LATEXINLINE>, <LATEXINLINE>$b$</LATEXINLINE>, and
    <LATEXINLINE>$m$</LATEXINLINE> are appropriately chosen integers.
    Chapter<SPACE/><REF NAME="chap:state"></REF> of
    <INDEX>Knuth, Donald E.</INDEX>
    <CITATION>Knuth 1997b</CITATION> includes an extensive
    discussion of techniques for generating sequences of random numbers and
    establishing their statistical properties.  Notice that the 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    computes a mathematical function: Given the same input twice, it
    produces the same output.  Therefore, the number sequence produced by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    certainly is not <QUOTE>random,</QUOTE> if by <QUOTE>random</QUOTE> we
    insist that each number in the sequence is unrelated to the preceding
    number.  The relation between <QUOTE>real randomness</QUOTE> and so-called 
    <INDEX>pseudo-random sequence</INDEX>
    <EM>pseudo-random</EM> sequences, which are produced by well-determined
      computations and yet have suitable statistical properties, is a
      complex question involving difficult issues in mathematics and
      philosophy.  
      <INDEX>Kolmogorov, A. N.</INDEX>
      Kolmogorov,
      <INDEX>Solomonoff, Ray</INDEX>
      Solomonoff, and
      <INDEX>Chaitin, Gregory</INDEX>
      Chaitin have made great
      progress in clarifying these issues; a discussion can be found in
      <CITATION>Chaitin 1975</CITATION>.</FOOTNOTE>
  </TEXT>

  <TEXT>
    We can implement <SCHEMEINLINE>rand</SCHEMEINLINE> as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with a local state variable <SCHEMEINLINE>x</SCHEMEINLINE> that is
    initialized to some fixed value 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>random-init</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>random_init</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Each call to <SCHEMEINLINE>rand</SCHEMEINLINE> computes 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    of the current value of <SCHEMEINLINE>x</SCHEMEINLINE>, returns this as the
    random number, and also stores this as the new value of
    <SCHEMEINLINE>x</SCHEMEINLINE>.
    <SNIPPET HIDE="yes">
      <NAME>rand_update</NAME>
      <JAVASCRIPT>
// A very simple rand_update function computes a number
// from 0 (inclusive) to 200560490131 (a large prime)
// from a value x by multiplying it with a constant a,
// adding a constant b, and then taking the remainder
// of dividing it by the large prime. We used it here 
// for illustration only, and do not claim any 
// statistical properties.
const m = 200560490131; 
const a = 1103515245;
const b = 12345;

function rand_update(x) {
    return (a * x + b) % m;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <INDEX><DECLARATION>rand</DECLARATION></INDEX> 
      <NAME>rand_definition</NAME>
      <REQUIRES>rand_update</REQUIRES>
      <REQUIRES>random_init</REQUIRES>
      <EXAMPLE>rand_example</EXAMPLE>
      <EXPECTED>40083849805</EXPECTED>
      <SCHEME>
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
      </SCHEME>
      <JAVASCRIPT>
function make_rand() {
   let x = random_init;
   return () => {
              x = rand_update(x);
              return x;
          };
}
const rand = make_rand();
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET HIDE="yes">
      <NAME>random_init</NAME>
      <JAVASCRIPT>
const random_init = 123456789;
      </JAVASCRIPT>
    </SNIPPET>
    
    <SNIPPET HIDE="yes">
      <NAME>rand_example</NAME>
      <JAVASCRIPT>
display(rand());
display(rand());
display(rand());
      </JAVASCRIPT>
      <JAVASCRIPT_TEST>
rand();
rand();
rand();
      </JAVASCRIPT_TEST>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Of course, we could generate the same sequence of random numbers
    without using assignment by simply calling 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    directly. However, this would mean that any part of our program that used
    random numbers would have to explicitly remember the current value of
    <SCHEMEINLINE>x</SCHEMEINLINE> to be passed as an argument to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    To realize what an annoyance this would be, consider using random numbers
    to implement a technique called 
    <INDEX>Monte Carlo simulation</INDEX>
    <INDEX>random-number generator<SUBINDEX>in Monte Carlo simulation</SUBINDEX></INDEX>
    <EM>Monte Carlo simulation</EM>.
  </TEXT>

  <TEXT>
    The Monte Carlo method consists of choosing sample experiments at random
    from a large set and then making deductions on the basis of the
    probabilities estimated from tabulating the results of those experiments.
    For example, we can approximate 
    <INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>Dirichlet estimate for</SUBINDEX></INDEX>
    <LATEXINLINE>$\pi$</LATEXINLINE> using the fact that
    <LATEXINLINE>$6/\pi^2$</LATEXINLINE> is the probability that two integers
    chosen at random will have no factors in common; that is, that their
    greatest common divisor will be 1.<FOOTNOTE>This theorem is due to G. 
    <INDEX>Dirichlet, Peter Gustav Lejeune</INDEX>
    Lejeune Dirichlet.  See section 4.5.2 of
    <INDEX>Knuth, Donald E.</INDEX>
    <CITATION>Knuth 1997b</CITATION> for a discussion and a proof.</FOOTNOTE>
    To obtain the approximation to <LATEXINLINE>$\pi$</LATEXINLINE>, we perform
    a large number of experiments. In each experiment we choose two integers at
    random and perform a test
    <INDEX>greatest common divisor<SUBINDEX><ORDER>used-estimate</ORDER>used to estimate <LATEXINLINE>$\pi$</LATEXINLINE></SUBINDEX></INDEX>
    to see if their GCD is 1.  The fraction of times that the test is passed
    gives us our estimate of <LATEXINLINE>$6/\pi^2$</LATEXINLINE>, and from this
    we obtain our approximation to <LATEXINLINE>$\pi$</LATEXINLINE>.
  </TEXT>

  <TEXT>
    The heart of our program is a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>monte-carlo</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which takes as arguments the number of times to try an experiment, together
    with the experiment, represented as a no-argument
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that will return either true or false each time it is run.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Monte-carlo</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function
	<SCHEMEINLINE>monte_carlo</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    runs the experiment for the designated number of trials and returns a
    number telling the fraction of the trials in which the experiment was
    found to be true.
  </TEXT>

  <TEXT>
    <SNIPPET>
      <INDEX><DECLARATION>estimate_pi</DECLARATION></INDEX> 
      <INDEX><DECLARATION>dirichlet_test</DECLARATION></INDEX> 
      <INDEX><DECLARATION>monte_carlo</DECLARATION></INDEX> 
      <NAME>monte_carlo</NAME>
      <REQUIRES>rand_definition</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>estimate_pi_example</EXAMPLE>
      <EXPECTED>3.1408877612819492</EXPECTED>
      <SCHEME>
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))
      </SCHEME>
      <JAVASCRIPT>
function estimate_pi(trials) {
    return math_sqrt(6 / monte_carlo(trials, dirichlet_test));
}
function dirichlet_test() {
    return gcd(rand(), rand()) === 1;
}
function monte_carlo(trials, experiment) {
    function iter(trials_remaining, trials_passed) {
        return trials_remaining === 0
               ? trials_passed / trials
               : experiment()
               ? iter(trials_remaining - 1, trials_passed + 1)
               : iter(trials_remaining - 1, trials_passed);
    }
    return iter(trials, 0);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>estimate_pi_example</NAME>
      <JAVASCRIPT>
estimate_pi(10000);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Now let us try the same computation using 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    directly rather than <SCHEMEINLINE>rand</SCHEMEINLINE>, the way we would be
    forced to proceed if we did not use assignment to model local state:
    <SNIPPET>
      <INDEX><DECLARATION>estimate_pi</DECLARATION></INDEX> 
      <NAME>estimate_pi_alternative</NAME>
      <REQUIRES>rand_definition</REQUIRES>
      <REQUIRES>gcd_definition</REQUIRES>
      <EXAMPLE>estimate_pi_example</EXAMPLE>
      <EXPECTED>3.1408877612819492</EXPECTED>
      <SCHEME>
(define (estimate-pi trials)
  (sqrt (/ 6 (random-gcd-test trials random-init))))

(define (random-gcd-test trials initial-x)
  (define (iter trials-remaining trials-passed x)
    (let ((x1 (rand-update x)))
      (let ((x2 (rand-update x1)))
        (cond ((= trials-remaining 0)   
               (/ trials-passed trials))
              ((= (gcd x1 x2) 1)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)
                     x2))
              (else
               (iter (- trials-remaining 1)
                     trials-passed
                     x2))))))
  (iter trials 0 initial-x))
      </SCHEME>
      <JAVASCRIPT>
function estimate_pi(trials) {
    return math_sqrt(6 / random_gcd_test(trials, random_init));
}
function random_gcd_test(trials, initial_x) {
    function iter(trials_remaining, trials_passed, x) {
        const x1 = rand_update(x);
        const x2 = rand_update(x1);
        return trials_remaining === 0
               ? trials_passed / trials
               : gcd(x1, x2) === 1
               ? iter(trials_remaining - 1, trials_passed + 1, x2)
               : iter(trials_remaining - 1, trials_passed, x2);
    }
    return iter(trials, 0, initial_x);
}   
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    While the program is still simple, it betrays some painful breaches of
    modularity.  In our first version of the program, using
    <SCHEMEINLINE>rand</SCHEMEINLINE>, we can express the Monte Carlo method
    directly as a general 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>monte-carlo</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that takes as an argument an arbitrary
    <SCHEMEINLINE>experiment</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    In our second version of the program, with no local state for the
    random-number generator, 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>random-gcd-test</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>random_gcd_test</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE> 
    must explicitly manipulate the random numbers
    <SCHEMEINLINE>x1</SCHEMEINLINE> and <SCHEMEINLINE>x2</SCHEMEINLINE> and
    recycle <SCHEMEINLINE>x2</SCHEMEINLINE> through the iterative loop as the
    new input to 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>rand-update</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand_update</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    This explicit handling of the random numbers intertwines the structure of
    accumulating test results with the fact that our particular experiment uses
    two random numbers, whereas other Monte Carlo experiments might use one
    random number or three.  Even the top-level
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>estimate-pi</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_pi</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    has to be concerned with supplying an initial random number.  The fact that
    the random-number generator<APOS/>s insides are leaking out into other parts
    of the program makes it difficult for us to isolate the Monte Carlo idea so
    that it can be applied to other tasks.  In the first version of the program,
    assignment encapsulates the state of the random-number generator within the
    <SCHEMEINLINE>rand</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure,</SCHEME>
    <JAVASCRIPT>function,</JAVASCRIPT></SPLITINLINE>
    so that the details of random-number generation remain independent of the
    rest of the program.
  </TEXT>

  <TEXT>
    The general phenomenon illustrated by the Monte Carlo example is this: From
    the point of view of one part of a complex process, the other parts appear
    to change with time.  They have hidden time-varying local state.  If we wish
    to write computer programs whose structure reflects this decomposition, we
    make computational objects (such as bank accounts and random-number
    generators) whose behavior changes with time.  We model state with local
    state variables, and we model the changes of state with assignments to those
    variables.
  </TEXT>

  <TEXT>
    It is tempting to conclude this discussion by saying that, by introducing
    assignment and the technique of hiding state in local variables, we are able
    to structure systems in a more modular fashion than if all state had to be
    manipulated explicitly, by passing additional parameters.  Unfortunately,
    as we shall see, the story is not so simple.
  </TEXT>

  <SHORT_PAGE lines="2"/>
  <EXERCISE>
    <LABEL NAME="ex:monte-carlo-integration"/>
    <EM>Monte Carlo integration</EM>
    <INDEX>Monte Carlo integration</INDEX>
    <INDEX><ORDER>pi</ORDER><LATEXINLINE>$\pi$</LATEXINLINE> (pi)<SUBINDEX>approximation with Monte Carlo integration</SUBINDEX></INDEX>
    <INDEX>definite integral<SUBINDEX>estimated with Monte Carlo simulation</SUBINDEX></INDEX>
    is a method of estimating definite
    integrals by means of Monte Carlo simulation.  Consider computing the
    area of a region of space described by a predicate
    <LATEXINLINE>$P(x, y)$</LATEXINLINE> that is true for points
    <LATEXINLINE>$(x, y)$</LATEXINLINE> in the region and false for points not
    in the region.  For example, the region contained within a circle of radius
    <LATEXINLINE>$3$</LATEXINLINE> centered at
    <LATEXINLINE>$(5, 7)$</LATEXINLINE> is described by the predicate that tests
    whether <LATEXINLINE>$(x-5)^2 + (y-7)^2\leq 3^2$</LATEXINLINE>.  To estimate
    the area of the region described by such a predicate, begin by choosing a
    rectangle that contains the region.  For example, a rectangle with diagonally
    opposite corners at <LATEXINLINE>$(2, 4)$</LATEXINLINE> and
    <LATEXINLINE>$(8, 10)$</LATEXINLINE> contains the circle above. The desired
    integral is the area of that portion of the rectangle that lies in the
    region.  We can estimate the integral by picking, at random, points
    <LATEXINLINE>$(x, y)$</LATEXINLINE> that lie in the rectangle, and testing
    <LATEXINLINE>$P(x, y)$</LATEXINLINE> for each point to determine whether the
    point lies in the region. If we try this with many points, then the fraction
    of points that fall in the region should give an estimate of the proportion
    of the rectangle that lies in the region.  Hence, multiplying this fraction
    by the area of the entire rectangle should produce an estimate of the
    integral.
    <P/>
    Implement Monte Carlo integration as a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><USE>estimate_integral</USE></INDEX> 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>estimate-integral</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_integral</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments a predicate <SCHEMEINLINE>P</SCHEMEINLINE>, upper
    and lower bounds <SCHEMEINLINE>x1</SCHEMEINLINE>,
    <SCHEMEINLINE>x2</SCHEMEINLINE>, <SCHEMEINLINE>y1</SCHEMEINLINE>, and
    <SCHEMEINLINE>y2</SCHEMEINLINE> for the rectangle, and the number of trials
    to perform in order to produce the estimate.  Your
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    should use the same 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>monte-carlo</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>monte_carlo</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that was used above to estimate <LATEXINLINE>$\pi$</LATEXINLINE>.  Use your 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>estimate-integral</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>estimate_integral</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to produce an estimate of <LATEXINLINE>$\pi$</LATEXINLINE> by measuring the
    area of a unit circle.
    <P/>
    You will find it useful to have a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that returns a number chosen at random from a given range.  The following 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>random-in-range</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>random_in_range</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    implements this in terms of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>random</SCHEMEINLINE>
	procedure
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_random</JAVASCRIPTINLINE>
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    used in section<SPACE/><REF NAME="sec:primality"/>, which returns a
    nonnegative number less 
    <SPLITINLINE>
      <SCHEME>
	than its input.<FOOTNOTE>
	MIT Scheme
	<INDEX>MIT Scheme<SUBINDEX><ORDER>random</ORDER><SCHEMEINLINE>random</SCHEMEINLINE></SUBINDEX></INDEX>
	provides such a
	<SPLITINLINE>
	  <SCHEME>procedure.</SCHEME>
	  <JAVASCRIPT>function.</JAVASCRIPT>
	</SPLITINLINE>
	If 
	<INDEX><USE>random</USE> (primitive function) MIT Scheme</INDEX>
	<INDEX>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)<SUBINDEX>random</SUBINDEX></INDEX>	
	<SCHEMEINLINE>random</SCHEMEINLINE> is given an exact integer (as in
	section<SPACE/><REF NAME="sec:primality"/>) it returns an exact integer,
	but if it is given a decimal value (as in this exercise) it returns a
	decimal value.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
	than<SPACE/>1.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET POSTPADDING="no">
      <INDEX><DECLARATION>random_in_range</DECLARATION><FRAGILE/></INDEX> 
      <NAME>random_in_range</NAME>
      <REQUIRES>random_definition</REQUIRES>
      <EXAMPLE>random_in_range_example</EXAMPLE>
      <SCHEME>
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
      </SCHEME>
      <JAVASCRIPT>
function random_in_range(low, high) {
    const range = high - low;
    return low + math_random() * range;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>random_in_range_example</NAME>
      <JAVASCRIPT>
random_in_range(80000, 81000);
      </JAVASCRIPT>
    </SNIPPET>
    <SOLUTION>
      <SNIPPET HIDE="yes">
	<NAME>exercise_3_5_solution_example</NAME>
	<JAVASCRIPT>
function inside_unit_circle(x, y) {
    return square(x) + square(y) &lt;= 1;
}
estimate_integral(inside_unit_circle, -1, 1, -1, 1, 50000);
	</JAVASCRIPT>
      </SNIPPET>
      <SNIPPET>
	<NAME>exercise_3_5_solution</NAME>
	<REQUIRES>square_definition</REQUIRES>
	<REQUIRES>monte_carlo</REQUIRES>
	<EXAMPLE>exercise_3_5_solution_example</EXAMPLE>
	<JAVASCRIPT>
function random_in_range(low, high) {
    const range = high - low;
    return low + math_random() * range;
}
function estimate_integral(pred, x1, x2, y1, y2, trials) {
    const area_rect = (x2 - x1) * (y2 - y1);
    return monte_carlo(trials,
                       () => pred(random_in_range(x1, x2),
                                  random_in_range(y1, y2))) * area_rect;
}
	</JAVASCRIPT>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:random-with-reset"/>
    It is useful to be able to
    <INDEX>random-number generator<SUBINDEX>with reset</SUBINDEX></INDEX>
    <INDEX><USE>rand</USE><SUBINDEX>with reset</SUBINDEX></INDEX>
    reset a random-number generator to produce
    a sequence starting from a given value.  Design a new
    <SCHEMEINLINE>rand</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that is called with an argument that is either the
    <SPLITINLINE>
      <SCHEME>
	symbol <SCHEMEINLINE>generate</SCHEMEINLINE> or the symbol
	<SCHEMEINLINE>reset</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	string <SCHEMEINLINE>"generate"</SCHEMEINLINE> or the string
	<SCHEMEINLINE>"reset"</SCHEMEINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and behaves as follows:
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(rand 'generate)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>rand("generate")</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    produces a new random number; 
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>((rand 'reset)</SCHEMEINLINE>
	<LATEXINLINE>$\langle \textit{new-value} \rangle$</LATEXINLINE>
	<SCHEMEINLINE>)</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>rand("reset")(</JAVASCRIPTINLINE><META>new-value</META><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    resets the internal state variable to the designated <META>new-value</META>. Thus, by resetting the
    state, one can generate repeatable sequences.  These are very handy to have
    when testing and debugging programs that use random numbers.
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>prng_example</EXAMPLE>
	<EXPECTED>127</EXPECTED>
	<JAVASCRIPT>
let state = 2;

function rand(symbol) {
    if (symbol === "reset") {
        return new_state => {
                   state = new_state;
               };
    } else {
        // symbol is "generate"
        state = (state * 1010) % 1101;
        return state;
    } 
}
	</JAVASCRIPT>
      </SNIPPET>

      <SNIPPET HIDE="yes">
	<NAME>prng_example</NAME>
	<JAVASCRIPT>
display(rand("generate"));
display(rand("generate"));
display(rand("generate"));

// This should display 919, 47, 127

rand("reset")(2);

// State is reset to 2 again

display(rand("generate"));
display(rand("generate"));
display(rand("generate"));

// Because initial state is the same, 919, 47, 127 is displayed again
	</JAVASCRIPT>
	<JAVASCRIPT_TEST>
rand("generate");
rand("generate");
rand("generate");

// This generates 919, 47, 127

rand("reset")(2);

// State is reset to 2 again

rand("generate");
rand("generate");
rand("generate");

// Because initial state is the same, 919, 47, 127 is generated
	</JAVASCRIPT_TEST>
      </SNIPPET>
    </SOLUTION>
  </EXERCISE>
  <INDEX>assignment<SUBINDEX>benefits of<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
    
