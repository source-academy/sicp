<SUBSECTION>
  <NAME>
    Running the Evaluator
  </NAME><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:running-evaluator"></LABEL>

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>running<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    With the implementation of the explicit-control evaluator we come to
    the end of a development, begun in chapter<SPACE></SPACE><REF NAME="chap:fun"></REF>, in which we have
    explored successively more precise
    <INDEX>models of evaluation</INDEX>
    <INDEX>evaluation<SUBINDEX>models of</SUBINDEX></INDEX>
    models of the evaluation process.
    We started with the relatively informal substitution model, then
    extended this in chapter<SPACE></SPACE><REF NAME="chap:state"></REF> to the environment model, which enabled us
    to deal with state and change.  In the metacircular evaluator of
    chapter<SPACE></SPACE><REF NAME="chap:meta"></REF>, we used
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    itself as a language for making more
    explicit the environment structure constructed during evaluation of an
    <SPLITINLINE>
      <SCHEME>expression.</SCHEME>
      <JAVASCRIPT>component.</JAVASCRIPT>
      </SPLITINLINE>
    Now, with register machines, we have taken a close look
    at the evaluator<APOS></APOS>s mechanisms for storage management,
    argument passing, and control.  At
    each new level of description, we have had to raise issues and resolve
    ambiguities that were not apparent at the previous, less precise
    treatment of evaluation.  To understand the behavior of the
    explicit-control evaluator, we can simulate it and monitor its
    performance.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    We will install a
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>driver loop</SUBINDEX></INDEX>
    <INDEX>driver loop<SUBINDEX><ORDER>explicit</ORDER>in explicit-control evaluator</SUBINDEX></INDEX>
    driver loop in our evaluator machine.  This plays
    the role of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>driver-loop</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE></SPACE><REF NAME="sec:running-eval"></REF>. The evaluator
    will repeatedly print a prompt, read 
    <SPLITINLINE>
      <SCHEME>an expression,</SCHEME>
      <JAVASCRIPT>a program,</JAVASCRIPT>
    </SPLITINLINE>
    evaluate
    <SPLITINLINE>
      <SCHEME>the expression</SCHEME>
      <JAVASCRIPT>the program</JAVASCRIPT>
    </SPLITINLINE>
    by going to
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and print the result.
    <SPLITINLINE>
      <JAVASCRIPT>
        If nothing is entered at the prompt, we jump to the label
        <JAVASCRIPTINLINE>evaluator_done</JAVASCRIPTINLINE>, which is
        the last entry point in the controller. 
      </JAVASCRIPT>
    </SPLITINLINE>
    The following instructions form the beginning of the
    explicit-control evaluator<APOS></APOS>s controller sequence:<!-- Error occurred while translating this section --><FOOTNOTE>We assume
    here that
    <SPLITINLINE>
      <SCHEME>
	      <SCHEMEINLINE>read</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	      <JAVASCRIPTINLINE>user_read</JAVASCRIPTINLINE>,
	      <JAVASCRIPTINLINE>parse</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and the various printing
    operations are available as primitive machine operations, which is useful
    for our simulation, but completely unrealistic in practice.  These are
    actually extremely complex operations.  In practice,
    <SPLITINLINE>
      <SCHEME>they</SCHEME>
      <JAVASCRIPT>reading and printing</JAVASCRIPT>
    </SPLITINLINE>
    would be
    implemented using low-level input-output operations such as transferring
    single characters to and from a device.
    <SPLIT>
      <SCHEME>
	<P></P>
	To support the
	<SCHEMEINLINE>get-global-environment</SCHEMEINLINE> operation we define
	<SNIPPET EVAL="no">
	  <INDEX><DECLARATION>the-global-environment</DECLARATION></INDEX> 
	  <INDEX><DECLARATION>get-global-environment</DECLARATION></INDEX> 
	  <NAME>the_global</NAME>
	  <SCHEME>
	    (define the-global-environment (setup-environment))

	    (define (get-global-environment)
	    the-global-environment)
	  </SCHEME>
	</SNIPPET>
      </SCHEME>
    </SPLIT>
  </FOOTNOTE>
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX>prompts<SUBINDEX>explicit-control evaluator</SUBINDEX></INDEX>
      <INDEX><DECLARATION>read_evaluate_print_loop</DECLARATION></INDEX> 
      <INDEX><DECLARATION>print_result</DECLARATION></INDEX> 
      <SCHEME>
      read-eval-print-loop
      (perform (op initialize-stack))
      (perform
      (op prompt-for-input) (const &quot;;;; EC-Eval input:&quot;))
      (assign exp (op read))
      (assign env (op get-global-environment))
      (assign continue (label print-result))
      (goto (label eval-dispatch))
      print-result
      (perform
      (op announce-output) (const &quot;;;; EC-Eval value:&quot;))
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
&quot;read_evaluate_print_loop&quot;,
  perform(list(op(&quot;initialize_stack&quot;))),
  assign(&quot;comp&quot;, list(op(&quot;user_read&quot;),
                      constant(&quot;EC-evaluate input:&quot;))),
  assign(&quot;comp&quot;, list(op(&quot;parse&quot;), reg(&quot;comp&quot;))),
  test(list(op(&quot;is_null&quot;), reg(&quot;comp&quot;))),
  branch(label(&quot;evaluator_done&quot;)),
  assign(&quot;env&quot;, list(op(&quot;get_current_environment&quot;))),
  assign(&quot;val&quot;, list(op(&quot;scan_out_declarations&quot;), reg(&quot;comp&quot;))),
  save(&quot;comp&quot;),    // so we can use it to temporarily hold $\texttt{*unassigned*}$ values
  assign(&quot;comp&quot;, list(op(&quot;list_of_unassigned&quot;), reg(&quot;val&quot;))),
  assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                     reg(&quot;val&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
  perform(list(op(&quot;set_current_environment&quot;), reg(&quot;env&quot;))),
  restore(&quot;comp&quot;), // the program 
  assign(&quot;continue&quot;, label(&quot;print_result&quot;)),
  go_to(label(&quot;eval_dispatch&quot;)),
&quot;print_result&quot;,
  perform(list(op(&quot;user_print&quot;),
               constant(&quot;EC-evaluate value:&quot;), reg(&quot;val&quot;))),
  go_to(label(&quot;read_evaluate_print_loop&quot;)), 
  </JAVASCRIPT>
    </SNIPPET>

    <SPLIT>
      <SCHEME>
      </SCHEME>
      <JAVASCRIPT>
        We store the current environment, initially the global environment,
        in the variable <JAVASCRIPTINLINE>current_@environment</JAVASCRIPTINLINE>
        and update it each time around the loop to remember past declarations.
        The operations
	<JAVASCRIPTINLINE>get_@current_@environment</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>set_@current_@environment</JAVASCRIPTINLINE> 
	simply get and set this variable.
    <SNIPPET EVAL="no">
      <INDEX><DECLARATION>get_current_environment</DECLARATION></INDEX>
      <INDEX><DECLARATION>set_current_environment</DECLARATION></INDEX>
      <NAME>the_global</NAME>
      <JAVASCRIPT>
let current_environment = the_global_environment;
<SHORT_SPACE></SHORT_SPACE>
function get_current_environment() {
    return current_environment;
}
<SHORT_SPACE></SHORT_SPACE>
function set_current_environment(env) {
    current_environment = env;
}
      </JAVASCRIPT>
      </SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
  <!-- Error occurred while translating this section --></TEXT>

  <TEXT>
    When we encounter an
    <INDEX>error handling<SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>error handling</SUBINDEX></INDEX>
    error in a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    (such as the 
    <SPLITINLINE>
      <SCHEME><QUOTE>unknown procedure type error</QUOTE></SCHEME>
      <JAVASCRIPT><QUOTE>unknown function type</QUOTE> error</JAVASCRIPT>
    </SPLITINLINE>
    indicated at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>),</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>),
      </JAVASCRIPT>
    </SPLITINLINE>
    we print an error message and return to the driver loop.<FOOTNOTE>There are
    other errors that we would like the interpreter to handle, but these are not
    so simple.  See exercise<SPACE></SPACE><REF NAME="ex:interp-errors"></REF>.</FOOTNOTE>
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><DECLARATION>unknown_component_type</DECLARATION></INDEX> 
      <INDEX><DECLARATION>unknown_function_type</DECLARATION></INDEX> 
      <INDEX><DECLARATION>signal_error</DECLARATION></INDEX> 
      <SCHEME>
      unknown-expression-type
      (assign val (const unknown-expression-type-error))
      (goto (label signal-error))

      unknown-procedure-type
      (restore continue)    <EM>; clean up stack (from <SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>)</EM>
      (assign val (const unknown-procedure-type-error))
      (goto (label signal-error))

      signal-error
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
&quot;unknown_component_type&quot;,
  assign(&quot;val&quot;, constant(&quot;unknown syntax&quot;)),
  go_to(label(&quot;signal_error&quot;)),
      
&quot;unknown_function_type&quot;,
  restore(&quot;continue&quot;), // clean up stack (from $\texttt{apply_dispatch}$)
  assign(&quot;val&quot;, constant(&quot;unknown function type&quot;)),
  go_to(label(&quot;signal_error&quot;)),
      
&quot;signal_error&quot;,
  perform(list(op(&quot;user_print&quot;),
               constant(&quot;EC-evaluator error:&quot;), reg(&quot;val&quot;))),
  go_to(label(&quot;read_evaluate_print_loop&quot;)),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For the purposes of the simulation, we initialize the stack each time
    through the driver loop, since it might not be empty after an error
    <SPLITINLINE>
      <SCHEME>
	(such as an undefined variable)
      </SCHEME>
      <JAVASCRIPT>
	(such as an undeclared name)
      </JAVASCRIPT>
    </SPLITINLINE>
    interrupts an evaluation.<FOOTNOTE>We
    could perform the stack initialization only after errors, but doing it in
    the driver loop will be convenient for monitoring the evaluator<APOS></APOS>s
    performance, as described below.</FOOTNOTE>
  </TEXT><!-- Error occurred while translating this section -->

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>controller<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  <TEXT>
    If we combine all the code fragments presented in sections
    <REF NAME="sec:eceval-core"></REF><ENDASH></ENDASH><REF NAME="sec:running-evaluator"></REF>,
    we can create an
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>machine model</SUBINDEX></INDEX>
    evaluator machine model that we can run using the
    register-machine simulator of section<SPACE></SPACE><REF NAME="sec:simulator"></REF>.

    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <INDEX><DECLARATION>eceval</DECLARATION></INDEX>
      <SCHEME>
      (define eceval
      (make-machine
      &apos;(exp env val proc argl continue unev)
      eceval-operations
      &apos;(
      read-eval-print-loop
      $\langle$entire machine controller as given above$\rangle$
      )))
      </SCHEME>
      <JAVASCRIPT>
const eceval = make_machine(list(&quot;comp&quot;, &quot;env&quot;, &quot;val&quot;, &quot;fun&quot;,
                                 &quot;argl&quot;, &quot;continue&quot;, &quot;unev&quot;),
                            eceval_operations,
                            list(&quot;read_evaluate_print_loop&quot;,
                                 <METAPHRASE>entire machine controller as given above</METAPHRASE>
                                 &quot;evaluator_done&quot;));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>eceval</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <REQUIRES>user_print</REQUIRES>
      <REQUIRES>the_global</REQUIRES>
      <REQUIRES>make_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <REQUIRES>eceval_operations</REQUIRES>
      <REQUIRES>eceval_controller</REQUIRES>
      <JAVASCRIPT>
const eceval =
    make_machine(list(&quot;comp&quot;, &quot;env&quot;, &quot;val&quot;, &quot;fun&quot;,
                      &quot;argl&quot;, &quot;continue&quot;, &quot;unev&quot;),
                 eceval_operations,
                 eceval_controller);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>eceval_controller</NAME>
      <JAVASCRIPT>
const eceval_controller =	
    list(
      &quot;read_evaluate_print_loop&quot;,
      perform(list(op(&quot;initialize_stack&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;user_read&quot;), constant(&quot;EC-evaluate input:&quot;))),
      test(list(op(&quot;is_null&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;evaluator_done&quot;)),
      assign(&quot;comp&quot;, list(op(&quot;parse&quot;), reg(&quot;comp&quot;))),
      assign(&quot;env&quot;, list(op(&quot;get_current_environment&quot;))),
      assign(&quot;val&quot;, list(op(&quot;scan_out_declarations&quot;), reg(&quot;comp&quot;))),
      save(&quot;comp&quot;), // temporarily store to comp
      assign(&quot;comp&quot;, list(op(&quot;list_of_unassigned&quot;), reg(&quot;val&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;val&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      perform(list(op(&quot;set_current_environment&quot;), reg(&quot;env&quot;))),
      restore(&quot;comp&quot;),
      assign(&quot;continue&quot;, label(&quot;print_result&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;print_result&quot;,
      perform(list(op(&quot;user_print&quot;),
                   constant(&quot;EC-evaluate value:&quot;), reg(&quot;val&quot;))),
      go_to(label(&quot;read_evaluate_print_loop&quot;)), 

      &quot;eval_dispatch&quot;,
      test(list(op(&quot;is_literal&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_literal&quot;)),
      test(list(op(&quot;is_name&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_name&quot;)),
      // Unsorted
      test(list(op(&quot;is_operator_combination&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_operator_combination&quot;)),
      test(list(op(&quot;is_function_declaration&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_function_declaration&quot;)),
      test(list(op(&quot;is_operator_combination&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_operator_combination&quot;)),
      // Treat let/const the same
      test(list(op(&quot;is_declaration&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_declaration&quot;)),
      test(list(op(&quot;is_assignment&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_assignment&quot;)),
      test(list(op(&quot;is_return_statement&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_return&quot;)),
      test(list(op(&quot;is_conditional&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_conditional&quot;)),
      test(list(op(&quot;is_lambda_expression&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_lambda&quot;)),
      test(list(op(&quot;is_sequence&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_sequence_start&quot;)),
      test(list(op(&quot;is_block&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_block&quot;)),
      test(list(op(&quot;is_application&quot;), reg(&quot;comp&quot;))),
      branch(label(&quot;ev_application&quot;)),
      go_to(label(&quot;unknown_component_type&quot;)),

      &quot;ev_return&quot;,
      revert_stack_to_marker(),
      restore(&quot;continue&quot;),
      assign(&quot;comp&quot;, list(op(&quot;return_expression&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;ev_literal&quot;,
      assign(&quot;val&quot;, list(op(&quot;literal_value&quot;), reg(&quot;comp&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_name&quot;,
      assign(&quot;val&quot;, list(op(&quot;symbol_of_name&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;lookup_symbol_value&quot;), reg(&quot;val&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_lambda&quot;,
      assign(&quot;unev&quot;, list(op(&quot;lambda_parameter_symbols&quot;), reg(&quot;comp&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;lambda_body&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;make_function&quot;),
                         reg(&quot;unev&quot;), reg(&quot;comp&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),

      &quot;ev_operator_combination&quot;,
      assign(&quot;comp&quot;, list(op(&quot;operator_combination_to_application&quot;),
                          reg(&quot;comp&quot;))),
      
      &quot;ev_application&quot;,
      save(&quot;continue&quot;),
      save(&quot;env&quot;),
      assign(&quot;unev&quot;, list(op(&quot;arg_expressions&quot;), reg(&quot;comp&quot;))),
      save(&quot;unev&quot;),
      assign(&quot;comp&quot;, list(op(&quot;function_expression&quot;), reg(&quot;comp&quot;))),
      assign(&quot;continue&quot;, label(&quot;ev_appl_did_function_expression&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_did_function_expression&quot;,
      restore(&quot;unev&quot;), // the args
      restore(&quot;env&quot;),
      assign(&quot;argl&quot;, list(op(&quot;empty_arglist&quot;))),
      assign(&quot;fun&quot;, reg(&quot;val&quot;)), // the function_expression
      test(list(op(&quot;is_null&quot;),
                reg(&quot;unev&quot;))),
      branch(label(&quot;apply_dispatch&quot;)),
      save(&quot;fun&quot;),
      
      &quot;ev_appl_argument_expression_loop&quot;,
      save(&quot;argl&quot;),
      assign(&quot;comp&quot;, list(op(&quot;head&quot;), reg(&quot;unev&quot;))),
      test(list(op(&quot;is_last_argument_expression&quot;),
                reg(&quot;unev&quot;))),
      branch(label(&quot;ev_appl_last_arg&quot;)),
      save(&quot;env&quot;),
      save(&quot;unev&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_appl_accumulate_arg&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_accumulate_arg&quot;,
      restore(&quot;unev&quot;),
      restore(&quot;env&quot;),
      restore(&quot;argl&quot;),
      assign(&quot;argl&quot;, list(op(&quot;adjoin_arg&quot;),
                          reg(&quot;val&quot;), reg(&quot;argl&quot;))),
      assign(&quot;unev&quot;, list(op(&quot;tail&quot;), reg(&quot;unev&quot;))),
      go_to(label(&quot;ev_appl_argument_expression_loop&quot;)),
      
      &quot;ev_appl_last_arg&quot;,
      assign(&quot;continue&quot;, label(&quot;ev_appl_accum_last_arg&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_appl_accum_last_arg&quot;,
      restore(&quot;argl&quot;),
      assign(&quot;argl&quot;, list(op(&quot;adjoin_arg&quot;),
                          reg(&quot;val&quot;), reg(&quot;argl&quot;))),
      restore(&quot;fun&quot;),
      go_to(label(&quot;apply_dispatch&quot;)),
      
      &quot;apply_dispatch&quot;,
      test(list(op(&quot;is_primitive_function&quot;),
                reg(&quot;fun&quot;))),
      branch(label(&quot;primitive_apply&quot;)),
      test(list(op(&quot;is_compound_function&quot;),
                reg(&quot;fun&quot;))),
      branch(label(&quot;compound_apply&quot;)),
      go_to(label(&quot;unknown_function_type&quot;)),

      &quot;primitive_apply&quot;,
      assign(&quot;val&quot;, list(op(&quot;apply_primitive_function&quot;), 
                         reg(&quot;fun&quot;), 
                         reg(&quot;argl&quot;))),
      restore(&quot;continue&quot;),
      go_to(reg(&quot;continue&quot;)),

      &quot;compound_apply&quot;,
      assign(&quot;unev&quot;, list(op(&quot;function_parameters&quot;), reg(&quot;fun&quot;))),
      assign(&quot;env&quot;, list(op(&quot;function_environment&quot;), reg(&quot;fun&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;unev&quot;), reg(&quot;argl&quot;), reg(&quot;env&quot;))),
      assign(&quot;comp&quot;, list(op(&quot;function_body&quot;), reg(&quot;fun&quot;))),
      push_marker_to_stack(),
      assign(&quot;continue&quot;, label(&quot;return_undefined&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),

      &quot;return_undefined&quot;,
      assign(&quot;val&quot;, constant(undefined)),
      revert_stack_to_marker(),
      restore(&quot;continue&quot;),
      go_to(reg(&quot;continue&quot;)),

      &quot;ev_block&quot;,
      assign(&quot;comp&quot;, list(op(&quot;block_body&quot;), reg(&quot;comp&quot;))),
      assign(&quot;val&quot;, list(op(&quot;scan_out_declarations&quot;), reg(&quot;comp&quot;))),

      save(&quot;comp&quot;), // temporarily store to comp
      assign(&quot;comp&quot;, list(op(&quot;list_of_unassigned&quot;), reg(&quot;val&quot;))),
      assign(&quot;env&quot;, list(op(&quot;extend_environment&quot;), 
                         reg(&quot;val&quot;), 
                         reg(&quot;comp&quot;), 
                         reg(&quot;env&quot;))),
      restore(&quot;comp&quot;),
      go_to(label(&quot;eval_dispatch&quot;)),

&quot;ev_sequence_start&quot;,
      assign(&quot;unev&quot;, list(op(&quot;sequence_statements&quot;), reg(&quot;comp&quot;))),
      test(list(op(&quot;is_empty_sequence&quot;), reg(&quot;unev&quot;))),
      branch(label(&quot;ev_empty_sequence&quot;)),
      save(&quot;continue&quot;),

&quot;ev_sequence&quot;,
      assign(&quot;comp&quot;, list(op(&quot;first_statement&quot;), reg(&quot;unev&quot;))),
      test(list(op(&quot;is_last_statement&quot;), reg(&quot;unev&quot;))),
      branch(label(&quot;ev_sequence_last_statement&quot;)),
      save(&quot;unev&quot;),
      save(&quot;env&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_sequence_continue&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)),
      
&quot;ev_sequence_continue&quot;,
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      assign(&quot;unev&quot;, list(op(&quot;rest_statements&quot;), reg(&quot;unev&quot;))),
      go_to(label(&quot;ev_sequence&quot;)),
 
&quot;ev_sequence_last_statement&quot;,
      restore(&quot;continue&quot;),
      go_to(label(&quot;eval_dispatch&quot;)),

&quot;ev_sequence_empty&quot;,
      assign(&quot;val&quot;, constant(undefined)),
      go_to(reg(&quot;continue&quot;)), 

      &quot;ev_conditional&quot;,
      save(&quot;comp&quot;), // save expression for later
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_conditional_decide&quot;)),
      assign(&quot;comp&quot;, list(op(&quot;conditional_predicate&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate the predicate
      
      &quot;ev_conditional_decide&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;comp&quot;),
      test(list(op(&quot;is_falsy&quot;), reg(&quot;val&quot;))),
      branch(label(&quot;ev_conditional_alternative&quot;)),
      
      &quot;ev_conditional_consequent&quot;,
      assign(&quot;comp&quot;, list(op(&quot;conditional_consequent&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_conditional_alternative&quot;,
      assign(&quot;comp&quot;, list(op(&quot;conditional_alternative&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;eval_dispatch&quot;)),
      
      &quot;ev_assignment&quot;,
      assign(&quot;unev&quot;, list(op(&quot;assignment_symbol&quot;), reg(&quot;comp&quot;))),
      save(&quot;unev&quot;), // save variable for later
      assign(&quot;comp&quot;, list(op(&quot;assignment_value_expression&quot;), reg(&quot;comp&quot;))),
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_assignment_1&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate assignment value
      
      &quot;ev_assignment_1&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      perform(list(op(&quot;assign_symbol_value&quot;),
                   reg(&quot;unev&quot;), reg(&quot;val&quot;), reg(&quot;env&quot;))),
      go_to(reg(&quot;continue&quot;)),
      
      &quot;ev_function_declaration&quot;,
      assign(&quot;comp&quot;, list(op(&quot;function_decl_to_constant_decl&quot;), reg(&quot;comp&quot;))),
      
      &quot;ev_declaration&quot;,
      assign(&quot;unev&quot;, list(op(&quot;declaration_symbol&quot;),
                          reg(&quot;comp&quot;))),
      save(&quot;unev&quot;), // save variable for later
      assign(&quot;comp&quot;, list(op(&quot;declaration_value_expression&quot;),
                          reg(&quot;comp&quot;))),
      save(&quot;env&quot;),
      save(&quot;continue&quot;),
      assign(&quot;continue&quot;, label(&quot;ev_declaration_assign&quot;)),
      go_to(label(&quot;eval_dispatch&quot;)), // evaluate declaration value
      
      &quot;ev_declaration_assign&quot;,
      restore(&quot;continue&quot;),
      restore(&quot;env&quot;),
      restore(&quot;unev&quot;),
      perform(list(op(&quot;assign_symbol_value&quot;),
                   reg(&quot;unev&quot;), reg(&quot;val&quot;), reg(&quot;env&quot;))),
      assign(&quot;val&quot;, constant(undefined)),
      go_to(reg(&quot;continue&quot;)),
      
      // Error handling
      &quot;unknown_component_type&quot;,
      assign(&quot;val&quot;, constant(&quot;Unknown expression type&quot;)),
      go_to(label(&quot;signal_error&quot;)),
      
      &quot;unknown_function_type&quot;,
      restore(&quot;continue&quot;), /// clean up stack (from apply_dispatch)
      assign(&quot;val&quot;, constant(&quot;Unknown function type&quot;)),
      go_to(label(&quot;signal_error&quot;)),
      
      &quot;signal_error&quot;,
      perform(list(op(&quot;user_print&quot;),
                   constant(&quot;EC-evaluator error:&quot;), reg(&quot;comp&quot;))),
      go_to(label(&quot;read_evaluate_print_loop&quot;)),
      
      &quot;evaluator_done&quot;
     );
      </JAVASCRIPT>
    </SNIPPET>

    We must define 
    <SPLITINLINE>
      <SCHEME>Scheme procedures</SCHEME>
      <JAVASCRIPT>JavaScript functions</JAVASCRIPT>
    </SPLITINLINE>
    to simulate the operations used as primitives by the evaluator.  These are
    the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we used for the metacircular evaluator in
    section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF>, together with the few additional
    ones defined in footnotes throughout section<SPACE></SPACE><REF NAME="sec:eceval"></REF>.
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define eceval-operations
  (list (list &apos;self-evaluating? self-evaluating)
        <EM><LATEXINLINE>\textit{complete list of operations for eceval machine}</LATEXINLINE></EM>))
      </SCHEME>
      <JAVASCRIPT>
const eceval_operations = list(list(&quot;is_literal&quot;, is_literal),
                               $\langle\mathit{complete}\;\,\mathit{list}\;\,\mathit{of}\;\mathit{operations}\:\,\mathit{for}\;\,\mathit{eceval}\;\,\mathit{machine}\rangle$);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>prompt_for_input</NAME>
      <JAVASCRIPT>
function prompt_for_input(input_prompt) {
    const input = prompt(input_prompt);
    if (is_null(input)) {
        display(&quot;--- evaluator terminated ---&quot;);
        return null;
    } else {
        display(input_prompt + &quot;\n&quot; + input + &quot;\n----------------------------&quot;);
        return parse(input);
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    <!--   FIXME: remove no_args, first_arg etc   -->
    <SNIPPET HIDE="yes">
      <NAME>eceval_operations</NAME>
      <REQUIRES>user_read</REQUIRES>
      <REQUIRES>empty_arglist</REQUIRES>
      <REQUIRES>is_last_argument_expression</REQUIRES>
      <JAVASCRIPT>
const eceval_operations = 
    list(
      // args
      list(&quot;arg_expressions&quot;      , arg_expressions),
      list(&quot;function_expression&quot;  , function_expression),
      list(&quot;is_null&quot;
                                  , is_null),
      list(&quot;head&quot;        , head),
      list(&quot;is_last_argument_expression&quot;, is_last_argument_expression),
      list(&quot;tail&quot;        , tail),

      //arg
      list(&quot;empty_arglist&quot;        , empty_arglist),
      list(&quot;adjoin_arg&quot;           , adjoin_arg),

      // comp (sequence)
      list(&quot;first_statement&quot;     , first_statement),
      list(&quot;rest_statements&quot;     , rest_statements),
      list(&quot;is_last_statement&quot;   , is_last_statement),
      list(&quot;is_empty_sequence&quot;   , is_empty_sequence),
      list(&quot;sequence_statements&quot; , sequence_statements),

      // eval functions from meta-circular evaluator
      list(&quot;is_literal&quot;  , is_literal),
      list(&quot;literal_value&quot;       , literal_value),
      list(&quot;is_name&quot;             , is_name),
      list(&quot;symbol_of_name&quot;      , symbol_of_name),
      list(&quot;is_assignment&quot;       , is_assignment),
      list(&quot;assignment_symbol&quot;   , assignment_symbol),
      list(&quot;assignment_value_expression&quot;
                                 , assignment_value_expression),
      list(&quot;assign_symbol_value&quot; , assign_symbol_value),
      list(&quot;is_declaration&quot;      , is_declaration),
      list(&quot;declaration_symbol&quot;  , declaration_symbol),
      list(&quot;declaration_value_expression&quot;
                                 , declaration_value_expression),
      list(&quot;assign_symbol_value&quot; , assign_symbol_value),
      list(&quot;is_lambda_expression&quot;, is_lambda_expression),
      list(&quot;lambda_parameter_symbols&quot;
                                 , lambda_parameter_symbols),
      list(&quot;lambda_body&quot;         , lambda_body),
      list(&quot;is_return_statement&quot; , is_return_statement),
      list(&quot;return_expression&quot;   , return_expression),
      list(&quot;is_conditional&quot;
                                 , is_conditional),
      list(&quot;conditional_predicate&quot;
				 , conditional_predicate),
      list(&quot;conditional_consequent&quot;
                                 , conditional_consequent),
      list(&quot;conditional_alternative&quot;
                                 , conditional_alternative),
      list(&quot;is_sequence&quot;         , is_sequence),
      list(&quot;is_block&quot;            , is_block),
      list(&quot;block_body&quot;          , block_body),
      list(&quot;scan_out_declarations&quot;
                                 , scan_out_declarations),
      list(&quot;list_of_unassigned&quot;  , list_of_unassigned),
      list(&quot;is_application&quot;      , is_application),
      list(&quot;is_primitive_function&quot;
                                 , is_primitive_function),
      list(&quot;apply_primitive_function&quot;
                                 , apply_primitive_function),
      list(&quot;is_compound_function&quot;, is_compound_function),
      list(&quot;function_parameters&quot; , function_parameters),
      list(&quot;function_environment&quot;, function_environment),
      list(&quot;function_body&quot;       , function_body),
      list(&quot;extend_environment&quot;  , extend_environment),
      list(&quot;make_function&quot;       , make_function),

      list(&quot;lookup_symbol_value&quot; , lookup_symbol_value),

      list(&quot;get_current_environment&quot;
                                 , get_current_environment),
      list(&quot;set_current_environment&quot;
                                 , set_current_environment),

      // Unsorted
      list(&quot;is_function_declaration&quot;  , is_function_declaration),
      list(&quot;function_declaration_body&quot;  , function_declaration_body),
      list(&quot;function_declaration_parameters&quot;  , function_declaration_parameters),
      list(&quot;function_declaration_name&quot;  , function_declaration_name),
      list(&quot;function_decl_to_constant_decl&quot;, function_decl_to_constant_decl),
      list(&quot;declaration_symbol&quot;  , declaration_symbol),
      list(&quot;is_operator_combination&quot;, is_operator_combination),
      list(&quot;operator_combination_to_application&quot;, operator_combination_to_application),
      list(&quot;parse&quot;, parse),

      // generic helpers
      list(&quot;is_truthy&quot;, is_truthy),
      list(&quot;is_falsy&quot;, v =&gt; !is_truthy(v)),
      list(&quot;is_null&quot;, is_null),

      list(&quot;user_read&quot;, user_read),
      list(&quot;user_print&quot;, user_print),
      list(&quot;display&quot;, display),
      list(&quot;list&quot;, list)
    );
    </JAVASCRIPT>
  </SNIPPET>
  </TEXT>

  
  <TEXT>
    Finally, we can initialize the global environment and run the evaluator:
    <!-- Error occurred while translating this section --><SNIPPET>
      <INDEX><DECLARATION>the_global_environment</DECLARATION></INDEX>
      <NAME>ec_eval_all</NAME>
      <REQUIRES>eceval</REQUIRES>
      <REQUIRES>user_read</REQUIRES>
      <REQUIRES>type_function</REQUIRES>
      <SCHEME>
      (define the-global-environment (setup-environment))

      (start eceval)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (append x y)
(if (null? x)
y
(cons (car x)
    (append (cdr x) y))))
;;; EC-Eval value:
ok

;;; EC-Eval input:
(append &apos;(a b c) &apos;(d e f))
;;; EC-Eval value:
(a b c d e f)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_RUN>
const test_program_1 = &quot;                       \
function test1() {                             \
    display(&apos;A 1&apos;);                            \
    const result = test2();                    \
    return display(stringify(result) + &apos; 3&apos;);  \
    display(&apos;I should not be printed 7&apos;);      \
}                                              \
function test2() {                             \
    display(&apos;B 2&apos;);                            \
    return &apos;C&apos;;                                \
    display(&apos;I should not be printed 4&apos;);      \
}                                              \
function test3() {                             \
    display(&apos;Hello from test3&apos;);               \
}                                              \
function test4() {                             \
    return display(&apos;Hello from test4&apos;);        \
}                                              \
display(&apos;5 &apos; + stringify(test1()));                           \
display(&apos;6 &apos; + stringify(test3())); // Should print undefined \
display(&apos;8 &apos; + stringify(test4()));                           \
&quot;;

const test_program_2 = &quot;           \
function adder(a, b) {             \
    return                         \
        a === 0                    \
      ? b                          \
      : adder(a - 1, b + 1);       \
 42;                               \
}                                  \
display(\&quot;7 + 5 = \&quot; + stringify(adder(7, 5)); \
&quot;;

start(eceval);
get_register_contents(eceval, &quot;val&quot;);
</JAVASCRIPT_RUN>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
start(eceval);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
function append(x, y) {
    return is_null(x)	
           ? y
           : pair(head(x), append(tail(x), y));
}
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>
append(list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), list(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate value:
[&quot;a&quot;, [&quot;b&quot;, [&quot;c&quot;, [&quot;d&quot;, [&quot;e&quot;, [&quot;f&quot;, null]]]]]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Of course, evaluating
    <SPLITINLINE>
      <SCHEME>expressions</SCHEME>
      <JAVASCRIPT>programs</JAVASCRIPT>
    </SPLITINLINE>
    in this way will take much longer
    than if we had directly typed them into
    <SPLITINLINE>
      <SCHEME>Scheme,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    because of the
    multiple levels of simulation involved.  Our
    <SPLITINLINE>
      <SCHEME>expressions</SCHEME>
      <JAVASCRIPT>programs</JAVASCRIPT>
    </SPLITINLINE>
    are evaluated
    by the explicit-control-evaluator machine, which is being simulated by
    a
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    program, which is itself being evaluated by the
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    interpreter.
  </TEXT><!-- Error occurred while translating this section -->

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>running<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  <SUBHEADING> 
    <NAME>Monitoring the performance of the evaluator</NAME>
  </SUBHEADING><!-- Error occurred while translating this section -->

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>monitoring performance (stack use)<OPEN></OPEN></SUBINDEX></INDEX><!-- Error occurred while translating this section -->
  
  <SHORT_PAGE LINES="2"></SHORT_PAGE><!-- Error occurred while translating this section -->
  <TEXT>
    Simulation can be a powerful tool to guide the implementation of
    evaluators.
    <INDEX>simulation<SUBINDEX><ORDER>machine</ORDER>as machine-design tool</SUBINDEX></INDEX>
    Simulations make it easy not only to explore variations
    of the register-machine design but also to monitor the performance of
    the simulated evaluator.  For example, one important factor in
    performance is how efficiently the evaluator uses the stack.  We can
    observe the number of stack operations required to evaluate various
    <SPLITINLINE>
      <SCHEME>expressions</SCHEME>
      <JAVASCRIPT>programs</JAVASCRIPT>
    </SPLITINLINE>
    by defining the evaluator register machine with the
    version of the simulator that collects statistics on stack use
    (section<SPACE></SPACE><REF NAME="sec:monitor"></REF>), and adding an instruction at the
    evaluator<APOS></APOS>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-result</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_result</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    entry point to print the statistics:
    <!-- Error occurred while translating this section --><SNIPPET LATEX="yes">
      <INDEX><DECLARATION>print_result</DECLARATION><SUBINDEX>monitored-stack version</SUBINDEX></INDEX>
      <SCHEME EVAL="no">
      print-result
      (perform (op print-stack-statistics))<EM>; added instruction</EM>
      (perform
      (op announce-output) (const &quot;EC-Eval value:&quot;))
      $\ldots$ ; same as before
      </SCHEME>
      <JAVASCRIPT>
&quot;print_result&quot;,
  perform(list(op(&quot;print_stack_statistics&quot;))), // added instruction
  // rest is same as before
  perform(list(op(&quot;user_print&quot;),
               constant(&quot;EC-evaluate value:&quot;), reg(&quot;val&quot;))),
  go_to(label(&quot;read_evaluate_print_loop&quot;)),
      </JAVASCRIPT>
    </SNIPPET>
    Interactions with the evaluator now look like this:
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (factorial n)
(if (= n 1)
1
(* (factorial (- n 1)) n)))
(total-pushes = 3 maximum-depth = 3)
;;; EC-Eval value:
ok

;;; EC-Eval input:
(factorial 5)
(total-pushes = 144 maximum-depth = 28)
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT BREAK_AFTER="yes">
function factorial (n) {
    return n === 1
           ? 1
           : factorial(n - 1) * n;
}
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
total pushes = 4 
maximum depth = 3
EC-evaluate value:
undefined
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT_PROMPT>
EC-evaluate input:
      </JAVASCRIPT_PROMPT>
      <JAVASCRIPT>      
factorial(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
total pushes = 151 
maximum depth = 28
EC-evaluate value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    Note that the driver loop of the evaluator reinitializes the stack
    at the start of
    each interaction, so that the statistics printed will refer only to
    stack operations used to evaluate the previous
    <SPLITINLINE>
      <SCHEME>expression.</SCHEME>
      <JAVASCRIPT>program.</JAVASCRIPT>
      </SPLITINLINE>
  <!-- Error occurred while translating this section --></TEXT>

  <EXERCISE>
    <LABEL NAME="ex:tail-rec-fact"></LABEL>
    Use the monitored stack to explore the
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion<SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    tail-recursive property of the
    evaluator (section<SPACE></SPACE><REF NAME="sec:tail-recursion-return"></REF>).  Start the
    evaluator and define the
    <INDEX><USE>factorial</USE><SUBINDEX>stack usage, interpreted</SUBINDEX></INDEX>
    iterative <!-- Error occurred while translating this section --><SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    from section<SPACE></SPACE><REF NAME="sec:recursion-and-iteration"></REF>:
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (define (iter product counter)
      (if (&gt; counter n)
            product
            (iter (* counter product)
            (+ counter 1))))
      (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        return counter &gt; n
               ? product
               : iter(counter * product,
                      counter + 1);
    }
    return iter(1, 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    Run the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with some small values of <!-- Error occurred while translating this section --><LATEXINLINE>$n$</LATEXINLINE>.  Record the
    maximum stack depth and the number of pushes required to compute
    <!-- Error occurred while translating this section --><LATEXINLINE>$n!$</LATEXINLINE> for each of these values.
    <OL>
      <LI>
	You will find that the maximum depth required to evaluate
	<LATEXINLINE>$n!$</LATEXINLINE> is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  What is that depth?
      </LI>
      <LI>
	Determine from your data a formula in terms of
	<LATEXINLINE>$n$</LATEXINLINE> for the total number of push operations
	used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for any
	<LATEXINLINE>$n \geq 1$</LATEXINLINE>. Note that the number of
	operations used is a linear function of <LATEXINLINE>$n$</LATEXINLINE>
	and is thus determined by two constants.
      </LI>
    </OL>
  <!-- Error occurred while translating this section --></EXERCISE>

  <SHORT_PAGE LINES="2"></SHORT_PAGE><!-- Error occurred while translating this section -->
  <EXERCISE>
    <LABEL NAME="ex:rec-fact"></LABEL>
    For comparison with exercise<SPACE></SPACE><REF NAME="ex:tail-rec-fact"></REF>, explore
    the behavior of the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for computing
    <INDEX><USE>factorial</USE><SUBINDEX>stack usage, interpreted</SUBINDEX></INDEX>
    factorials recursively:
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : factorial(n - 1) * n;
}
      </JAVASCRIPT>
    </SNIPPET>
    By running this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the monitored stack, determine, as a function of
    <!-- Error occurred while translating this section --><LATEXINLINE>$n$</LATEXINLINE>, the maximum depth of the stack and the total
    number of pushes used in evaluating <!-- Error occurred while translating this section --><LATEXINLINE>$n!$</LATEXINLINE> for
    <!-- Error occurred while translating this section --><LATEXINLINE>$n \geq 1$</LATEXINLINE>.  (Again, these functions will be
    linear.)  Summarize your experiments by filling in the following table with
    the appropriate expressions in terms of <!-- Error occurred while translating this section --><LATEXINLINE>$n$</LATEXINLINE>:
    <WEB_ONLY>
      <FIGURE SRC="img_original/527table.svg">
	<LABEL NAME="527table"></LABEL>
      </FIGURE>
    </WEB_ONLY>
    <PDF_ONLY>
      <BLOCKQUOTE>
      <LATEX>
        \begin{center}
        \smallskip
      \begin{tabular}{l|l|l}
 &amp; Maximum depth &amp; Number of pushes \\ \hline
 \rule{0pt}{7mm} Recursive factorial &amp; &amp; \\ \hline
 \rule{0pt}{7mm} Iterative factorial &amp; &amp; \\ \hline
 \end{tabular}
        \smallskip
        \end{center}
     </LATEX>
      </BLOCKQUOTE>
    </PDF_ONLY>
    The maximum depth is a measure of the amount of space used by the
    evaluator in carrying out the computation, and the number of pushes
    correlates well with the time required.
  <!-- Error occurred while translating this section --></EXERCISE>
      
  <EXERCISE>
    Modify the definition of the evaluator by changing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE>
      as described in section<SPACE></SPACE><REF NAME="sec:sequence-evaluation"></REF> 
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_return</JAVASCRIPTINLINE>
      as described in section<SPACE></SPACE><REF NAME="sec:tail-recursion-return"></REF> 
      </JAVASCRIPT>
    </SPLITINLINE>
    so that the evaluator is no longer
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion<SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    tail-recursive.  Rerun your experiments from
    exercises<SPACE></SPACE><REF NAME="ex:tail-rec-fact"></REF>
    and<SPACE></SPACE><REF NAME="ex:rec-fact"></REF> to demonstrate that both versions of
    the <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    now require space that grows linearly with their input.
    <LABEL NAME="ex:5_29"></LABEL>
  </EXERCISE><!-- Error occurred while translating this section -->

  <EXERCISE>
    Monitor the stack operations in the tree-recursive
    <INDEX><USE>fib</USE><SUBINDEX>stack usage, interpreted</SUBINDEX></INDEX>
    Fibonacci computation:
    <!-- Error occurred while translating this section --><SNIPPET EVAL="no">
      <INDEX><DECLARATION>fib</DECLARATION><SUBINDEX>tree-recursive version</SUBINDEX><FRAGILE></FRAGILE></INDEX>
      <SCHEME>
      (define (fib n)
      (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
      </SCHEME>
      <JAVASCRIPT>
function fib(n) {
    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Give a formula in terms of <LATEXINLINE>$n$</LATEXINLINE> for the
	maximum depth of the stack required to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  Hint: In
	section<SPACE></SPACE><REF NAME="sec:tree-recursion"></REF> we argued that the space
	used by this process grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.
      </LI>
      <LI>
	Give a formula for the total number of pushes used to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  You should find that the number
	of pushes (which correlates well with the time used) grows exponentially
	with <LATEXINLINE>$n$</LATEXINLINE>.  Hint: Let
	<LATEXINLINE>$S(n)$</LATEXINLINE> be the number of pushes used in
	computing <LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE>.  You should be
	able to argue that there is a formula that expresses
	<LATEXINLINE>$S(n)$</LATEXINLINE> in terms of
	<LATEXINLINE>$S(n-1)$</LATEXINLINE>, <LATEXINLINE>$S(n-2)$</LATEXINLINE>,
	and some fixed <QUOTE>overhead</QUOTE> constant
	<LATEXINLINE>$k$</LATEXINLINE> that is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  Give the formula, and say what
	<LATEXINLINE>$k$</LATEXINLINE> is.  Then show that
	<LATEXINLINE>$S(n)$</LATEXINLINE> can be expressed as
	<LATEXINLINE>$a {\textrm{Fib}}(n+1) + b$</LATEXINLINE> and give the
	values of <LATEXINLINE>$a$</LATEXINLINE> and
	<LATEXINLINE>$b$</LATEXINLINE>.
      </LI>
    </OL>
    <!-- Error occurred while translating this section --><LABEL NAME="ex:rec-fib"></LABEL>
  </EXERCISE>

  <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>monitoring performance (stack use)<CLOSE></CLOSE></SUBINDEX></INDEX><!-- Error occurred while translating this section -->

  <EXERCISE>
    <LABEL NAME="ex:interp-errors"></LABEL>
    Our evaluator currently catches and signals only two kinds of
    <INDEX>error handling<SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for JavaScript<SUBINDEX>error handling</SUBINDEX></INDEX>
    errors<EMDASH></EMDASH>unknown
    <SPLITINLINE>
      <SCHEME>
        expression
      </SCHEME>
      <JAVASCRIPT>
        component
      </JAVASCRIPT>
    </SPLITINLINE>
    types and unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    types.  Other errors will take us out of the evaluator
    <SPLITINLINE>
      <SCHEME>
	read-eval-print
      </SCHEME>
      <JAVASCRIPT>
	read-evaluate-print
      </JAVASCRIPT>
    </SPLITINLINE>
    loop.
    When we run the evaluator using the register-machine simulator, these
    errors are caught by the underlying
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system.  This is analogous
    to the computer crashing when a user program makes an error.<!-- Error occurred while translating this section --><FOOTNOTE>
    <SPLIT>
      <SCHEME>
	Regrettably, this is the normal state of affairs in
	<INDEX>C<SUBINDEX>error handling</SUBINDEX></INDEX>
	conventional compiler-based language systems such as C.  
	<INDEX>UNIX</INDEX>
	In UNIX<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE><WEB_ONLY><SPACE></SPACE><SPACE></SPACE></WEB_ONLY> the system <QUOTE>dumps
	core,</QUOTE> and in
	<INDEX>DOS/Windows</INDEX>
	DOS/Windows<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE><WEB_ONLY><SPACE></SPACE><SPACE></SPACE></WEB_ONLY>
	it becomes catatonic. The
	<INDEX>Macintosh</INDEX>
	Macintosh<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE><WEB_ONLY><SPACE></SPACE><SPACE></SPACE></WEB_ONLY> displays a picture of
	an exploding bomb and offers you the opportunity to reboot the
	computer<EMDASH></EMDASH>if you<APOS></APOS>re lucky.
      </SCHEME>
      <JAVASCRIPT>
        This manifests itself as, for example, a <QUOTE>kernel panic</QUOTE> or a <QUOTE>blue
        screen of death</QUOTE> or even a reboot. Automatic rebooting is an approach
        typically used on phones and tablets. Most modern operating systems do a
        decent job of preventing user programs from causing an entire machine to
        crash.
      </JAVASCRIPT>
    </SPLIT></FOOTNOTE>
    It is a large project to
    make a real error system work, but it is well worth the effort to understand
    what is involved here.
    <!-- Error occurred while translating this section --><OL>
      <LI>
	Errors that occur in the evaluation process, such as an attempt to
	access an unbound
	<SPLITINLINE>
	  <SCHEME>variable,</SCHEME>
	  <JAVASCRIPT>name,</JAVASCRIPT>
	</SPLITINLINE>
	could be caught by changing the lookup
	operation to make it return a distinguished condition code, which cannot
	be a possible value of any user
	<SPLITINLINE>
	  <SCHEME>variable.</SCHEME>
	  <JAVASCRIPT>name.</JAVASCRIPT>
	</SPLITINLINE>
	The evaluator can test
	for this condition code and then do what is necessary to go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	Find all of the places in the evaluator where such a
	change is necessary and fix them.  This is lots of work.
      </LI>
      <!-- Error occurred while translating this section --><LI>
	Much worse is the problem of handling errors that are signaled by
	applying primitive
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	such as an attempt to divide by zero or an attempt to extract the
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>car</SCHEMEINLINE>
	    of a symbol.	    
	  </SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>head</JAVASCRIPTINLINE>
	    of a string.
	  </JAVASCRIPT>
	</SPLITINLINE>
	In a professionally written high-quality system, each
	primitive application is checked for safety as part of the primitive.
	For example, every call to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	could first check that the argument is a pair.  If the argument is not
	a pair, the application would return a distinguished condition code to
	the evaluator, which would then report the failure.  We could arrange
	for this in our register-machine simulator by making each primitive
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	check for applicability and returning an appropriate distinguished
	condition code on failure. Then the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>primitive-apply</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>primitive_apply</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	code in the evaluator can check for the condition code and go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	if necessary.  Build this structure and make it work.
	This is a major project.
      </LI>
    <!-- Error occurred while translating this section --></OL>
  </EXERCISE>

  <INDEX>explicit-control evaluator for JavaScript<CLOSE></CLOSE></INDEX><!-- Error occurred while translating this section -->
  
</SUBSECTION>
