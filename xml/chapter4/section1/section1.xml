<SECTION>
  <NAME>The Metacircular Evaluator</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:mc-eval"/>

  <INDEX>metacircular evaluator for JavaScript<OPEN/></INDEX>

  <TEXT>
    Our evaluator for 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE> 
    will be implemented as a 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE> 
    program.  It may
    seem circular to think about evaluating 
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE> 
    programs using an evaluator that is itself implemented in 
    <SPLITINLINE>
      <SCHEME>Lisp.</SCHEME>
      <JAVASCRIPT>JavaScript.</JAVASCRIPT>
    </SPLITINLINE>
    However, evaluation is a process, so it is appropriate to describe the
    evaluation process using
    <SPLITINLINE>
      <SCHEME>Lisp,</SCHEME>
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    which, after all, is our tool for describing processes.<FOOTNOTE>Even so,
    there will remain important aspects of the evaluation process that are not
    elucidated by our evaluator.  The most important of these are the detailed
    mechanisms by which
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    call other
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and return values to their callers. We will address these issues in
    chapter<SPACE/>5, where we take a closer look at the evaluation process by
    implementing the evaluator as a simple register machine.</FOOTNOTE>  
    An evaluator that is written in the same language
    that it evaluates is said to be
    <INDEX>metacircular evaluator</INDEX>
    <INDEX>evaluator<SUBINDEX>metacircular</SUBINDEX></INDEX>
    <EM>metacircular</EM>.
  </TEXT>

  <TEXT>
    The metacircular evaluator is essentially a 
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    formulation of the
    <INDEX>environment model of evaluation<SUBINDEX>metacircular evaluator and</SUBINDEX></INDEX>
    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>environment model of evaluation in</SUBINDEX></INDEX>
    environment model of evaluation described in
    section<SPACE/><REF NAME="sec:environment-model"/>.
    <SPLITINLINE>
      <SCHEME>Recall that the model has two basic parts:</SCHEME>
      <JAVASCRIPT>
	Recall that the model specifies the
	evaluation of function application in two basic steps:
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    <OL>
      <LI> 
	<SPLIT>
	  <SCHEME>
            To evaluate a combination (a compound expression other than a 
            special form), evaluate the subexpressions and then apply the value
	    of the operator subexpression to the values of the operand
            subexpressions.
	  </SCHEME>
	  <JAVASCRIPT>
	    To evaluate a function application, evaluate the 
	    subexpressions and then apply the
	    value of the function subexpression to the values of the argument
            subexpressions.
	  </JAVASCRIPT>
	</SPLIT>
      </LI>
      <LI>
        To apply a compound
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	to a set of arguments, evaluate the
        body of the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	in a new environment.  To construct this
        environment, extend the environment part of the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	object by a
        frame in which the
	<SPLITINLINE>
	  <SCHEME>formal</SCHEME>
	</SPLITINLINE>
	parameters of the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	are bound to
	the arguments to which the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	is applied.
      </LI>
    </OL>
  </TEXT>

  <TEXT>
    These two rules describe the essence of the evaluation process, a basic
    <SPLITINLINE>
      <SCHEME>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX><ORDER>eval</ORDER><SCHEMEINLINE>eval</SCHEMEINLINE>-<SCHEMEINLINE>apply</SCHEMEINLINE> cycle</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
      <INDEX>metacircular evaluator for JavaScript<SUBINDEX><ORDER>evaluate</ORDER><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>-<JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE> cycle</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    cycle in which 
    <SPLITINLINE><JAVASCRIPT>statements and</JAVASCRIPT></SPLITINLINE>
    expressions to be evaluated in environments are reduced to
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to be applied to arguments, which in turn are reduced to new 
    <SPLITINLINE>
      <JAVASCRIPT>statements and</JAVASCRIPT>
    </SPLITINLINE>
    expressions to be evaluated in new environments, and so on, until we get
    down to
    <SPLITINLINE>
      <SCHEME>
	symbols,
      </SCHEME>
      <JAVASCRIPT>
	names,
      </JAVASCRIPT>
    </SPLITINLINE>
    whose values are looked up in the environment, and to 
    <SPLITINLINE>
      <SCHEME>primitive procedures,</SCHEME>
      <JAVASCRIPT>operators and primitive functions,</JAVASCRIPT>
    </SPLITINLINE>
    which are applied directly (see
    figure<SPACE/><REF NAME="fig:eval-apply"/>).<FOOTNOTE>If we grant ourselves
    the ability to apply primitives,
    then what remains for us to implement in the evaluator?  The
    <INDEX>metacircular evaluator for JavaScript<SUBINDEX>job of</SUBINDEX></INDEX>
    job of the
    evaluator is not to specify the primitives of the language, but rather to
    provide the connective tissue<EMDASH/>the means of combination and the means
    of abstraction<EMDASH/>that binds a collection of primitives to form a
    language.  Specifically:
    <UL>
      <LI>
	The evaluator enables us to deal with nested expressions. For example,
	although simply applying primitives would suffice for evaluating the
	expression
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(+ 1 6)</SCHEMEINLINE>,</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>2 * 6</JAVASCRIPTINLINE>,</JAVASCRIPT>
	</SPLITINLINE>
	it is not adequate for handling 
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(+ 1 (* 2 3))</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>2 * (1 + 5)</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	As far as the 
	<SPLITINLINE>
	  <SCHEME>
	    primitive procedure
	    <SCHEMEINLINE>+</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    operator
	    <SCHEMEINLINE>*</SCHEMEINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	is concerned, its arguments must be numbers, and it would choke if we
	passed it the expression
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(* 2 3)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>1 + 5</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	as an argument.	One important role of the evaluator is to choreograph
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT></JAVASCRIPT>
	</SPLITINLINE>
	composition so that
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(* 2 3)</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>1 + 5</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	is reduced to 6 before being passed as an 
	<SPLITINLINE>
	  <SCHEME>
	    argument to<SPACE/><SCHEMEINLINE>+</SCHEMEINLINE>.
	  </SCHEME>
	  <JAVASCRIPT>
	    argument to<SPACE/><JAVASCRIPTINLINE>*</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	The evaluator allows us to use
	<SPLITINLINE>
	  <SCHEME>variables.</SCHEME>
	  <JAVASCRIPT>names.</JAVASCRIPT>
	</SPLITINLINE>
	For example, the 
	<SPLITINLINE>
	  <SCHEME>primitive procedure for addition</SCHEME>
	  <JAVASCRIPT>addition operator</JAVASCRIPT>
	</SPLITINLINE>
	has no way to deal with expressions such as
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>(+ x 1)</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE>.</JAVASCRIPT>
	</SPLITINLINE>
	We need an evaluator to keep track of
	<SPLITINLINE>
	  <SCHEME>variables</SCHEME>
	  <JAVASCRIPT>names</JAVASCRIPT>
	</SPLITINLINE>
	and obtain their values before invoking the 
	<SPLITINLINE>
	  <SCHEME>primitive procedures.</SCHEME>
	  <JAVASCRIPT>operators.</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	The evaluator allows us to define compound
	<SPLITINLINE>
	  <SCHEME>procedures.</SCHEME>
	  <JAVASCRIPT>functions.</JAVASCRIPT>
	</SPLITINLINE>
	<SPLITINLINE>
	  <SCHEME>
	    This involves keeping track of procedure definitions, knowing
	    how to use these definitions in evaluating
	    expressions, and providing a mechanism that enables
	    procedures to accept arguments.
	  </SCHEME>
	  <JAVASCRIPT>
	    This involves knowing how to use these functions in evaluating 
	    expressions and providing a mechanism that enables functions
	    to accept arguments.
	  </JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	<SPLITINLINE>
	  <SCHEME>The evaluator provides the special forms, which must be
	  evaluated differently from procedure calls.</SCHEME>
	  <JAVASCRIPT>The evaluator provides the other syntactic forms of
	  the language such as conditionals and blocks.
	</JAVASCRIPT></SPLITINLINE>
      </LI>
    </UL></FOOTNOTE>
    This evaluation cycle will be embodied by the interplay between the two
    critical
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    in the evaluator,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><SCHEMEINLINE>evaluate</SCHEMEINLINE></JAVASCRIPT>
    </SPLITINLINE>
    and <SCHEMEINLINE>apply</SCHEMEINLINE>, which are described in
    section<SPACE/><REF NAME="sec:core-of-evaluator"/>
    (see figure<SPACE/><REF NAME="fig:eval-apply"/>).
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	The implementation of the evaluator will depend upon procedures
	that define the <EM>syntax</EM> of the expressions to be evaluated.
	We will use
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>data abstraction in</SUBINDEX></INDEX>
	data abstraction to make the evaluator independent of the representation of
	the language.  For example, rather than committing to a choice that an
	assignment is to be represented by a list beginning with the 
	symbol <SCHEMEINLINE>set!</SCHEMEINLINE> we use an abstract predicate
	<SCHEMEINLINE>assignment?</SCHEMEINLINE>
	to test for an assignment, and we use abstract selectors
	<SCHEMEINLINE>assignment-variable</SCHEMEINLINE> and 
	<SCHEMEINLINE>assignment-value</SCHEMEINLINE>
	to access the parts of an assignment.
	Implementation of expressions will be described in detail in
	section<SPACE/><REF NAME="sec:representing-expressions"/>. 	
      </SCHEME>
      <JAVASCRIPT>
	The implementation of the evaluator will depend upon functions that
	define the <EM>syntax</EM> of the expressions to be evaluated.  
	We will use
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX>data abstraction in</SUBINDEX></INDEX>
	data abstraction to make the evaluator independent of the
	representation of the language.
	For example, rather than committing
	to a choice that an assignment is to be represented by a 
	string beginning with a name followed by
	<JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>, we use an abstract predicate
	<JAVASCRIPTINLINE>is_assignment</JAVASCRIPTINLINE> to test for an
	assignment, and we use abstract
	selectors <JAVASCRIPTINLINE>assignment_symbol</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>assignment_value_expression</JAVASCRIPTINLINE> to
	access the parts of an assignment.
	The data abstraction layers presented in
	section<SPACE/><REF NAME="sec:representing-expressions"/>
	will allow the evaluator to remain independent of concrete syntactic
	issues, such as the keywords of the interpreted language, and of the
	choice of data structures that represent the program components.
      </JAVASCRIPT>
    </SPLITINLINE>
    There are also
    operations, described in
    section<SPACE/><REF NAME="sec:eval-data-structures"/>, that specify the
    representation of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    and environments.  For example,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>make_function</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    constructs compound
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    accesses the values of
    <SPLITINLINE>
      <SCHEME>variables,</SCHEME>
      <JAVASCRIPT>names,</JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    applies a primitive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    to a given list of arguments.
  </TEXT>

  <!-- Subsection 1 : The Core of the Evaluator -->
  &amp;subsection4.1.1;

  <!-- Subsection 2 : Representing Expressions -->
  &amp;subsection4.1.2;

  <!-- Subsection 3 : Evaluator Data Structures -->
  &amp;subsection4.1.3;

  <!-- Subsection 4 : Running the Evaluator as a Program -->
  &amp;subsection4.1.4;
  
  <!-- Subsection 5 : Data as Programs -->
  &amp;subsection4.1.5;

  <!-- Subsection 6 : Internal Definitions -->
  &amp;subsection4.1.6;

  <!-- Subsection 7 : Separating Syntactic Analysis from Execution -->
  &amp;subsection4.1.7;

</SECTION>
