<SECTION>
  <NAME>Hierarchical Data and the Closure Property</NAME>

  <SECTIONCONTENT/>

  <LABEL NAME="sec:hierarchical-data"/>
  <TEXT>
    As we have seen, pairs provide a primitive <QUOTE>glue</QUOTE> that we can
    use to construct compound data objects.
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:first-box-and-pointer"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:first-box-and-pointer_js"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows a standard way to visualize a 
    <INDEX>pair(s)<SUBINDEX>box-and-pointer notation for</SUBINDEX></INDEX>
    pair<EMDASH/>in this case, the pair formed by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(cons 1 2)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair(1, 2)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch2-Z-G-11.svg">
          <LABEL NAME="fig:first-box-and-pointer"/>
          <CAPTION>
	    Box-and-pointer representation of
	   <SCHEMEINLINE>(cons 1 2)</SCHEMEINLINE>.
          </CAPTION>
        </FIGURE>
	In this representation, which is called 
	<INDEX>box-and-pointer notation for data</INDEX>
	<INDEX>notation in this book<SUBINDEX>box-and-pointer notation for data</SUBINDEX></INDEX>
	<EM>box-and-pointer
        notation</EM>, each object is shown as a 
	<INDEX>pointer<SUBINDEX>in box-and-pointer notation</SUBINDEX></INDEX>
	<EM>pointer</EM> to a box.  The box
	for a primitive object contains a representation of the object.  For
	example, the box for a number contains a numeral.  The box for a pair
	is actually a double box, the left part containing (a pointer to) the
	<SCHEMEINLINE>car</SCHEMEINLINE> of the pair and the right part
	containing the <SCHEMEINLINE>cdr</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE src="img_javascript/ch2-Z-G-11.svg">
          <LABEL NAME="fig:first-box-and-pointer_js"/>
          <CAPTION>
	    Box-and-pointer representation of
	    <JAVASCRIPTINLINE>pair(1, 2)</JAVASCRIPTINLINE>.
          </CAPTION>
        </FIGURE>
	In this representation, which is called 
	<INDEX>box-and-pointer notation</INDEX>
	<EM>box-and-pointer
        notation</EM>, each compound object is shown as a 
	<INDEX>pointer<SUBINDEX>in box-and-pointer notation</SUBINDEX></INDEX>
	<EM>pointer</EM> to a box.  The box for a pair
	has two parts, the left part containing the head of the pair and the
	right part containing the tail.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    We have already seen that
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    can be used to combine not only numbers but pairs as well.  (You made use
    of this fact, or should have, in doing
    exercises<SPACE/><REF NAME="ex:segments1"/>
    and<SPACE/><REF NAME="ex:rectangles"/>.)  As a consequence, pairs provide
    a universal building block from which we can construct all sorts of data
    structures.
    <SPLITINLINE>
      <SCHEME>
	Figure<SPACE/><REF NAME="fig:box-and-pointer-two-ways"/>
      </SCHEME>
      <JAVASCRIPT>
	Figure<SPACE/><REF NAME="fig:box-and-pointer-two-ways_js"/>
      </JAVASCRIPT>
    </SPLITINLINE>
    shows two ways to use pairs to combine the numbers 1, 2, 3, and 4.
    <SPLIT>
      <SCHEME>
        <FIGURE src="img_original/ch2-Z-G-12.svg">
          <LABEL NAME="fig:box-and-pointer-two-ways"/>
          <CAPTION>Two ways to combine 1, 2, 3, and 4 using pairs.
          </CAPTION>
        </FIGURE>
      </SCHEME>
      <JAVASCRIPT>
        <FIGURE src="img_javascript/ch2-Z-G-12.svg">
          <LABEL NAME="fig:box-and-pointer-two-ways_js"/>
          <CAPTION>Two ways to combine 1, 2, 3, and 4 using pairs.
          </CAPTION>
        </FIGURE>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>
  <TEXT>
    The ability to create pairs whose elements are pairs is the essence of
    list structure<APOS/>s importance as a representational tool.  We refer to
    this ability as the 
    <INDEX>closure<SUBINDEX>closure property of <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    <INDEX><USE>pair</USE> (primitive function)<SUBINDEX>closure property of</SUBINDEX></INDEX>
    <EM>closure property</EM> of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    In general, an operation for combining data objects satisfies the closure
    property if the results of combining things with that operation can
    themselves be combined using the same  operation.<FOOTNOTE>The use of the
    word 
    <INDEX>closure<SUBINDEX><ORDER>abstract</ORDER>in abstract algebra</SUBINDEX></INDEX>
    <QUOTE>closure</QUOTE> here comes from abstract algebra, where a set of
    elements is said to be
    closed under an operation if applying the operation
    to elements in the set produces an element that is again an element of the
    set.  The
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>programming languages</JAVASCRIPT>
    </SPLITINLINE>
    community also (unfortunately) uses the word <QUOTE>closure</QUOTE> to
    describe a totally unrelated concept: A closure
    is an implementation technique for representing
    <SPLITINLINE>
      <SCHEME>procedures with free variables.
      </SCHEME>
      <JAVASCRIPT>functions with free names.
      </JAVASCRIPT>
    </SPLITINLINE>
    We do not use the word <QUOTE>closure</QUOTE> in this second sense in this
    book.</FOOTNOTE>
    Closure is the key to power in any means of combination because it permits
    us to create 
    <INDEX>hierarchical data structures</INDEX>
    <INDEX>data<SUBINDEX>hierarchical</SUBINDEX></INDEX>
    <EM>hierarchical</EM> structures<EMDASH/>structures made up of parts, which
      themselves are made up of parts, and so on.
  </TEXT>
  <TEXT>
    From the outset of chapter<SPACE/>1, we<APOS/>ve made essential use of
    closure in dealing with
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    because all but the very simplest programs rely on the fact that the
    elements of a combination can themselves be combinations.  In this section,
    we take up the consequences of closure for compound data.  We describe some
    conventional techniques for using pairs to represent sequences and trees,
    and we exhibit a graphics language that illustrates closure in a vivid 
    way.<SPLITINLINE><SCHEME><FOOTNOTE>The notion that a means of
    <INDEX>closure<SUBINDEX>lack of in many languages</SUBINDEX></INDEX>
    combination should satisfy closure is a straightforward idea. Unfortunately,
    the data combiners provided in many popular programming languages do not
    satisfy closure, or make closure cumbersome to exploit.  In 
    <INDEX>Fortran<SUBINDEX>restrictions on compound data</SUBINDEX></INDEX>
    Fortran or 
    <INDEX>Basic<SUBINDEX>restrictions on compound data</SUBINDEX></INDEX>
    Basic, one typically combines data elements by assembling them into
    arrays<EMDASH/>but one cannot form arrays whose elements are themselves
    arrays.  
    <INDEX>Pascal<SUBINDEX>restrictions on compound data</SUBINDEX></INDEX>
    Pascal and 
    <INDEX>C<SUBINDEX>restrictions on compound data</SUBINDEX></INDEX>
    C admit structures whose elements are structures.  However, this requires
    that the programmer manipulate pointers explicitly, and adhere to the
    restriction that each field of a structure can contain only elements of a
    prespecified form. Unlike Lisp with its pairs, these languages have no
    built-in general-purpose glue that makes it easy to manipulate compound
    data in a uniform way. This limitation lies behind Alan 
    <INDEX>Perlis, Alan J.</INDEX>
    Perlis<APOS/>s comment in his foreword to this book: <QUOTE>In Pascal the
    plethora of declarable data structures induces a specialization within
    functions that inhibits and penalizes casual cooperation.  It is better to
    have 100 functions operate on one data structure than to have 10 functions
    operate on 10 data structures.</QUOTE></FOOTNOTE></SCHEME></SPLITINLINE>
  </TEXT>

    <!-- Subsection 1 : Representing Sequences -->
    &amp;subsection2.2.1;

    <!-- Subsection 2 : Hierarchical Structures -->
    &amp;subsection2.2.2;

    <!-- Subsection 3 : Sequences as Conventional Interfaces -->
    &amp;subsection2.2.3;

    <!-- Subsection 4 : Example: A Picture Language -->
    &amp;subsection2.2.4;

  </SECTION>
