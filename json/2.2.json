[{"id":"/sicpjs/2.2","tag":"TITLE","body":"2.2  Hierarchical Data and the Closure Property"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    As we have seen, pairs provide a primitive \"","tag":"#text"},{"body":"glue","tag":"#text"},{"body":"\" that we can\n    use to construct compound data objects.\n    \n\tFigure ","tag":"#text"},{"tag":"REF","body":"2.2","href":"/sicpjs/2.2#fig-2.2"},{"body":"\n    shows a standard way to visualize a \n    \n    pair—in this case, the pair formed by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(1, 2)"},{"body":".\n\tIn this representation, which is called \n\t","tag":"#text"},{"tag":"EM","child":[{"body":"box-and-pointer\n        notation","tag":"#text"}]},{"body":", each compound object is shown as a \n\t","tag":"#text"},{"tag":"EM","child":[{"body":"pointer","tag":"#text"}]},{"body":" to a box.  The box for a pair\n\thas two parts, the left part containing the head of the pair and the\n\tright part containing the tail.\n      ","tag":"#text"}]},{"tag":"FIGURE","scale":"30%","src":"img_javascript/ch2-Z-G-11.svg","id":"#fig-2.2","captionHref":"/sicpjs/2.2#fig-2.2","captionName":"Figure 2.2 ","captionBody":[{"body":"\n\t    Box-and-pointer representation of\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair(1, 2)"},{"body":".\n          ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    We have already seen that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    can be used to combine not only numbers but pairs as well.  (You made use\n    of this fact, or should have, in doing\n    exercises ","tag":"#text"},{"tag":"REF","body":"2.2","href":"/sicpjs/2.1.2#ex-2.2"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"2.3","href":"/sicpjs/2.1.2#ex-2.3"},{"body":".)  As a consequence, pairs provide\n    a universal building block from which we can construct all sorts of data\n    structures.\n    \n\tFigure ","tag":"#text"},{"tag":"REF","body":"2.3","href":"/sicpjs/2.2#fig-2.3"},{"body":"\n    shows two ways to use pairs to combine the numbers 1, 2, 3, and 4.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-12.svg","id":"#fig-2.3","captionHref":"/sicpjs/2.2#fig-2.3","captionName":"Figure 2.3 ","captionBody":[{"body":"Two ways to combine 1, 2, 3, and 4 using pairs.\n          ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    The ability to create pairs whose elements are pairs is the essence of\n    list structure's importance as a representational tool.  We refer to\n    this ability as the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"closure property","tag":"#text"}]},{"body":" of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":".\n    In general, an operation for combining data objects satisfies the closure\n    property if the results of combining things with that operation can\n    themselves be combined using the same  operation.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.2#footnote-1"},{"body":"\n    Closure is the key to power in any means of combination because it permits\n    us to create \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"hierarchical","tag":"#text"}]},{"body":" structures—structures made up of parts, which\n      themselves are made up of parts, and so on.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    From the outset of chapter ","tag":"#text"},{"tag":"REF","body":"1","href":"/sicpjs/1"},{"body":", we've made essential use of\n    closure in dealing with\n    functions,\n    because all but the very simplest programs rely on the fact that the\n    elements of a combination can themselves be combinations.  In this section,\n    we take up the consequences of closure for compound data.  We describe some\n    conventional techniques for using pairs to represent sequences and trees,\n    and we exhibit a graphics language that illustrates closure in a vivid \n    way.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.2#footnote-link-1","child":[{"body":"The use of the\n    word \n    \"","tag":"#text"},{"body":"closure","tag":"#text"},{"body":"\" here comes from abstract algebra, where a set of\n    elements is said to be\n    closed under an operation if applying the operation\n    to elements in the set produces an element that is again an element of the\n    set.  The\n    programming languages\n    community also (unfortunately) uses the word \"","tag":"#text"},{"body":"closure","tag":"#text"},{"body":"\" to\n    describe a totally unrelated concept: A closure\n    is an implementation technique for representing\n    functions with free names.\n      \n    We do not use the word \"","tag":"#text"},{"body":"closure","tag":"#text"},{"body":"\" in this second sense in this\n    book.","tag":"#text"}]}]