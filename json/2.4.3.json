[{"id":"/sicpjs/2.4.3","tag":"TITLE","body":"2.4.3  \n    Data-Directed Programming and Additivity"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The general strategy of checking the type of a datum and calling an\n    appropriate\n    function\n    is called\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"dispatching on type","tag":"#text"}]},{"body":".  This is a powerful strategy for obtaining\n    modularity in system design.  On the other hand, implementing the dispatch\n    as in section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":" has two significant\n    weaknesses.  One weakness is that the generic interface\n    functions(","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"real_part"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"imag_part"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"magnitude"},{"body":", and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"angle"},{"body":") must know about all the different\n    representations.  For instance, suppose we wanted to incorporate a new\n    representation for complex numbers into our complex-number system.  We\n    would need to identify this new representation with a type, and then add a\n    clause to each of the generic interface\n    functions\n    to check for the new type and apply the appropriate selector for that\n    representation.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Another weakness of the technique is that even though the individual\n    representations can be designed separately, we must guarantee that no two\n    functions\n    in the entire system have the same name.  This is why Ben and Alyssa had\n    to change the names of their original\n    functions\n    from section ","tag":"#text"},{"tag":"REF","body":"2.4.1","href":"/sicpjs/2.4.1"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    The issue underlying both of these weaknesses is that the technique for\n    implementing generic interfaces is not ","tag":"#text"},{"tag":"EM","child":[{"body":"additive","tag":"#text"}]},{"body":".  The person\n    implementing the generic selector\n    functions\n    must modify those\n    functions\n    each time a new representation is installed, and the people\n    interfacing the individual representations must modify their\n    code to avoid name conflicts.  In each of these cases, the changes\n    that must be made to the code are straightforward, but they must be\n    made nonetheless, and this is a source of inconvenience and error.\n    This is not much of a problem for the complex-number system as it\n    stands, but suppose there were not two but hundreds of different\n    representations for complex numbers.  And suppose that there were many\n    generic selectors to be maintained in the abstract-data interface.\n    Suppose, in fact, that no one programmer knew all the interface\n    functions\n    or all the representations.  The problem is real and must\n    be addressed in such programs as\n    large-scale data-base-management systems.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    What we need is a means for modularizing the system design even\n    further.  This is provided by the programming technique known as ","tag":"#text"},{"tag":"EM","child":[{"body":"\n    data-directed programming","tag":"#text"}]},{"body":".  To understand how data-directed\n    programming works, begin with the observation that whenever we deal\n    with a set of generic operations that are common to a set of\n    different types we are, in effect, dealing with a two-dimensional\n    table that contains the possible operations on one axis and the\n    possible types on the other axis.  The entries in the table are the\n    functions\n    that implement each operation for each type of argument presented.\n    In the complex-number system developed in the previous section, the\n    correspondence between operation name, data type, and  actual\n    function\n    was spread out among the various conditional clauses in the generic\n    interface\n    functions.\n    But the same information could have been organized in a table, as shown in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"2.22","href":"/sicpjs/2.4.3#fig-2.22"},{"body":".\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Data-directed programming is the technique of designing programs to work\n    with such a\n    \n    table directly.  Previously, we implemented the mechanism that\n    interfaces the complex-arithmetic code with the two representation packages\n    as a set of\n    functions\n    that each perform an explicit dispatch on type.  Here we will implement the\n    interface as a single\n    function\n    that looks up the combination of the operation name and argument type in\n    the table to find the correct\n    function\n    to apply, and then applies it to the contents of the argument.  If we do\n    this, then to add a new representation package to the system we need not\n    change any existing\n    functions;\n    we need only add new entries to the table.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch2-Z-G-63.svg","id":"#fig-2.22","captionHref":"/sicpjs/2.4.3#fig-2.22","captionName":"Figure 2.22 ","captionBody":[{"body":"Table of operations for the complex-number system.","tag":"#text"}]},{"body":"\n    To implement this plan, assume that we have two\n    functions,","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"put"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get"},{"body":", for\n    manipulating the\n    \n    operation-and-type table:\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"put("},{"tag":"META","body":"op"},{"tag":"JAVASCRIPTINLINE","body":", "},{"tag":"META","body":"type"},{"tag":"JAVASCRIPTINLINE","body":", "},{"tag":"META","body":"item"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n\tinstalls the\n\t","tag":"#text"},{"tag":"META","body":"item"},{"body":"\n\tin the table, indexed by the\n\t","tag":"#text"},{"tag":"META","body":"op"},{"body":" and the\n\t    ","tag":"#text"},{"tag":"META","body":"type"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"get("},{"tag":"META","body":"op"},{"tag":"JAVASCRIPTINLINE","body":", "},{"tag":"META","body":"type"},{"tag":"JAVASCRIPTINLINE","body":")"},{"tag":"BR"},{"body":"\n\tlooks up the\n\t","tag":"#text"},{"tag":"META","body":"op"},{"body":",\n\t    ","tag":"#text"},{"tag":"META","body":"type"},{"body":"\n\tentry in the table and returns the item found there.\n\tIf no item is found,\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get"},{"body":" returns\n\t\n\t    a unique primitive value that is referred to by the name\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":" and recognized\n\t    by the primitive predicate\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_undefined"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/2.4.3#footnote-1"}]}]},{"body":"\n    For now, we can assume that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"put"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get"},{"body":" are included in our language.  In\n    chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":" (section ","tag":"#text"},{"tag":"REF","body":"3.3.3","href":"/sicpjs/3.3.3"},{"body":") we will see\n    how to implement these and other operations for manipulating tables.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Here is how data-directed programming can be used in the complex-number\n    system.  Ben, who developed the rectangular representation, implements his\n    code just as he did originally.  He defines a collection of\n    functions\n    or a\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"package","tag":"#text"}]},{"body":", and interfaces these to the rest of the system by adding\n    entries to the table that tell the system how to operate on rectangular\n    numbers. This is accomplished by calling the following\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":73,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuRQB7ABwFMAnAQwBcBLIgOwH0aqAjAGzIBpQSArjVBVGAE1ABzMjQJgAZhSIBbUAGMAFlRI1KobKAAUAZzJr6TfThwBKfPIGNzDRiOPGiawwGsyATz4KMyIKMWMbUABvXFBY0CCaAQpXOmNmRgFOTkMgtRCwuziiooB+UEcxMnk6RjIxGOLigC5QMgBHASps3wDQDTIqMUN+wZzg0PCbQsbSvoGh3PzwhpnYlqp3Tx9-PjY6bMWJqYBuXABfe0dnS2UqX1YObkMI6KK8xmNhTk8uh64yUAAXlAnFSNEMACIAFRsf5QiE2U5FBxOCyub5EbwCEjbPzMACMfB6zBQLxWxXen1AxgE7Fh3CBbg8XmJhNAe2y3zUv3pZBO5KKdHkRlSzAqVRqdRMtN5UyiApmCSSrnF1VqYiRMzOrU4pnlqzeTCphwkwI2zNxJN2VH20rpjz5iIVjSVyVAotVkoW4zE0wNqzKnvVzv9a3ZNoOPqdqwuRVjcRR1xSH0o4NZRP8VtAADcugI+fqZpThDT7f9Geatunw7auTyHfzVkKRWkg1LS7KyaHqTIHrWfpw-tweCHu-wbRRDKDPpa2SQJ5aUHxc5x81MR2OxxypwOh47o1qdXrXqHi-EfRXNizM0ua9kOw2D-7m4YPeIJeqxnlQnKT5vTDQfb3jKDobpu-rznQk6QZOxK3iua7WraD7-FMT4GtqZC6gCf5jgBQFfvky55nymr+vGjQUaAVGJmioBiKk840JohjKF2ioyMqoCqICvGgBCGJYiQEKjo0ZSCdionNNxQJ8RCNSmBQNAieBZQKamUlFC0lBKJOyh8BCjjeIwRAAO6uKQlC0C4oAALS2eG-wImR1Hkq6rgMcYTGaKcFy4GelnUGie6Mrc9y8s8pxntIwjAoF1lMHukIScJTpnoIsXEOQQUuEl8kpkpzmXKiNm0GwmgPJIhg0H45CVXw7y6IwNDhIWsTueOUHVbVZD1eoTBNS1ToXLRNk1XVbBVWItACGxbXnokbqijBhjTYkbFSWUIxDGts1+qs2kULpq0zfp-HsIM4aSNIEi7ao9nsj1lVFSNVx0Y1ZDNcYJ3rex7WcUtaQrXd+0zGU24g1Jh3HXdBkXRIk03fRp12Q5H1fS9xVJtSHRUEEhgAB5-QtXEE6AUKgATvlY3RClsFkzC5GwjCSJkePMPOajeFQ0jPPNhA1LoyRdKAo1GuSYuuEEvzzkphgAF4vCTbrbQriKucib02XQtySBzePgorUTK6426K8cGsJlrNx3L1igqIzAyDjrPOE3wfhKx1K0E+76s0dbri64wdCJJUavzUUHW3DQGjMMYbRy-HnT49Lg6y4bcoANQ48nZCvrr+ty4rjZxP7JWWKIkhPEbuGRwDge0LHtCiCg+c84XGeBE7Hdq+hZfY2FdtKMozAF5XOR8FQxN14trgrRQ5PcY3zB5N9U+BIv0ex8YNSGFPff4EUAvNZQ8hUGoAI0EQ7L9OeVJEMKMcAsYfifGQygSwHV2E579ciDQ5VY6TUhEzSubMKAQj4ETC2VEMogO7unSBIIwTwPMGAzgeMERdxlgbdCcD5IF0QXwac4IISgJZuArB7pCG4JcvgoOIcBCVCQSQ1BzNWYYIgTYPgDDQ6kXJPgyu3AWEoLIWYdhlDuEiBZtwPBQhISD2YPbEeqdmAu0kEgsRaCKGcMgSGN2oAPZAgAHzf0Ucox2vx1EGI9iXWI9DbZKOHqPduldNHkI4ZgsCjQJ4iAiICUxwDzHOLHizXx+90IdQhGIJgZAITU1wHTLog4PHgP1lzHmedERAA","body":"function install_rectangular_package() {\n    // internal functions\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) + square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan2(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(\"rectangular\", x); }\n    put(\"real_part\", list(\"rectangular\"), real_part);\n    put(\"imag_part\", list(\"rectangular\"), imag_part);\n    put(\"magnitude\", list(\"rectangular\"), magnitude);\n    put(\"angle\", list(\"rectangular\"), angle);\n    put(\"make_from_real_imag\", \"rectangular\",\n        (x, y) => tag(make_from_real_imag(x, y)));\n    put(\"make_from_mag_ang\", \"rectangular\",\n        (r, a) => tag(make_from_mag_ang(r, a)));\n    return \"done\";\n} "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Notice that the internal\n    functions\n    here are the same\n    functions\n    from section ","tag":"#text"},{"tag":"REF","body":"2.4.1","href":"/sicpjs/2.4.1"},{"body":" that\n    Ben wrote when he was working in isolation.  No changes are necessary in\n    order to interface them to the rest of the system.  Moreover, since these\n    function declarations\n    are internal to the installation\n    function,\n    Ben needn't worry about name conflicts with other\n    functions\n    outside the rectangular package.  To interface these to the rest of the\n    system, Ben installs his\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"real_part"},{"body":"function\n    under the operation name\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"real_part"},{"body":"\n    and the type\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"rectangular\")"},{"body":",\n      \n    and similarly for the other selectors.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/2.4.3#footnote-2"},{"body":"  The interface also defines the\n    constructors to be used by the external system.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/2.4.3#footnote-3"},{"body":" These are identical to Ben's internally defined\n    constructors, except that they attach the tag.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Alyssa's\n    \n    polar package is analogous:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":73,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuRQB7ABwFMAnAQwBcBLIgOwH0aqAjAGzIBpQSArjVBVGAE1ABzMjQJgAZhSIBbUAGMAFlRI1KobKAAUAZzJr6TfThwBKfPIGNzDRiOPGiawwGsyATz4KMyIKMWMbUABvXFBY0CCaAQpXOmNmRgFOTkMgtRCwuziiooB+UEcxMnk6RjIxGOLigC5QMgBHASps3wDQDTIqMUN+wZzg0PCbQsbSvoGh3PzwhpnYlqp3Tx9-PjY6bMWJqYBuXABfe0dnS2UqX1YObkMI6KK8xmNhTk8uh64yUAAXlAnFSNEMACIAFRsf5QiE2U5FBxOCyub5EbwCEjbPzMACMfB6zBQLxWxXen1AxgE7Fh3CBbg8XmJhNAe2y3zUv3pZBO5KKdHkRlSzAqVRqdRMtN5UyiApmCSSrnF1VqYiRMzOrU4pnlqzeTCphwkwI2zNxJN2VH20rpjz5iIVjSVyVAotVkoW4zE0wNqzKnvVzv9a3ZNoOPqdqwuRVjcRR1xSH0o4NZRP8VtAADcugI+fqZpThDT7f9Geatunw7auTyHfzVkKRWkg1LS7KyaHqTIHrWfpw-tweCHu-wbRRDKDPpa2SQJ5aUHxc5x81MR2OxxypwOh47o1qdXrXqHi-EfRXNizM0ua9kOw2D-7m4YPeIJeqxnlQnKT5vTDQfb3jKDobpu-rznQk6QZOxK3iua7WraD7-FMT4GtqZC6gCf5jgBQFfvky55nymr+vGjQUaAVGJmioBiKk840JohjKF2ioyMqoCqICvGgBCGJYiQEKjo0ZSCdionNNxQJ8RCNSmBQNAieBZQKamUlFC0lBKJOyh8BCjjeIwRAAO6uKQlC0C4oAALS2eG-wImR1Hkq6rgMcYTGaKcFy4GelnUGie6Mrc9y8s8pxntIwjAoF1lMHukIScJTpnoIsXEOQQUuEl8kpkpzmXKiNm0GwmgPJIhg0H45CVXw7y6IwNDhIWsTueOUHVbVZD1eoTBNS1ToXLRNk1XVbBVWItACGxbXnokbqijBhjTYkbFSWUIxDGts1+qs2kULpq0zfp-HsIM4aSNIEi7ao9nsj1lVFSNVx0Y1ZDNcYJ3rex7WcUtaQrXd+0zGU24g1Jh3HXdBkXRIk03fRp12Q5H1fS9xVJtSHRUEEhgAB5-QtXEE6AUKgATvlY3RClsFkzAkEQnB44zVBqN4VDSM882EDUujJF0oCjUa5Ii64tySIwdCJJUhgAF4vCTbrbQriKucib2lYwkhPIrUTK6426K8cGsJlrNx3L1igqMwkvMKIVUUHwVBKx1K3OyI6s0RbrhBL885KWr81FB1kvS7LZDBxTtw0BozB5N9jt642cQ+yVlh0PbgfgvruGhwDEtcxHAhy-rMe0PHxg1IYydR4r6Hp9jYXW0oyjMP7g5Z1zhN8H4xMF4trgrbHVdtEHxi4-jROgAA1DjnT4-3NhgeBcSjw7bCMCghi9ETjf4EUfPNZQ8jswCNBEOy-TnlSRDCnHALGH4nxkMoYu+1dhNu4XIg0OV8dJqQiZizCgEI+BE1NlRDKkJO5s0Knwac4IIQgLxgiQIAxBw53QjA+S2c8bKUQWCYBzM0Er3dPgpSOChCQnDjLUuZBwEgmISg0hYDyF0MjtQ5BdcmFIJIaA9BIgdbcG4bQq2zAbbtzgd3SQTDWGCL4CGXuoB+5AgAHxfxbpItuHdMHMFkSo5eYiITaKkXbLmDsdbyNQWA1exQcguwiICTRQCzG6Pto7RxXtU7-SHvxMQTBGHU1wHTLoWC2Fsw5lzKOiIgA","body":"function install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n        return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n        return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n        return pair(math_sqrt(square(x) + square(y)),\n                    math_atan2(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(\"polar\", x); }\n    put(\"real_part\", list(\"polar\"), real_part);\n    put(\"imag_part\", list(\"polar\"), imag_part);\n    put(\"magnitude\", list(\"polar\"), magnitude);\n    put(\"angle\", list(\"polar\"), angle);\n    put(\"make_from_real_imag\", \"polar\", \n        (x, y) => tag(make_from_real_imag(x, y)));\n    put(\"make_from_mag_ang\", \"polar\",\n        (r, a) => tag(make_from_mag_ang(r, a)));\n    return \"done\";\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    Even though Ben and Alyssa both still use their original\n    functions\n    defined with the same names as each other's (e.g.,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"real_part"},{"body":"),\n    these declarations are now internal to different\n    functions\n    (see section ","tag":"#text"},{"tag":"REF","body":"1.1.8","href":"/sicpjs/1.1.8"},{"body":"), so there is no name\n    conflict.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    The complex-arithmetic selectors access the table by means of a general\n    \"","tag":"#text"},{"body":"operation","tag":"#text"},{"body":"\"function\n    called\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":",\n      \n    which applies a generic operation to some arguments.\n    \n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":"\n    looks in the table under the name of the operation and the types of the\n    arguments and applies the resulting\n    function\n    if one is present:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/2.4.3#footnote-4"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"function apply_generic(op, args) {\n    const type_tags = map(type_tag, args);\n    const fun = get(op, type_tags);\n    return ! is_undefined(fun)\n           ? apply_in_underlying_javascript(fun, map(contents, args))\n           : error(list(op, type_tags),\n                   \"no method for these types -- apply_generic\");\n}"},{"body":"\n    Using\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":",\n      \n    we can define our generic selectors as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":174,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuRRIA7CAewFcAnAYwFMAaUAWzIGcAXUAMwuJo4BLMsTagAFgEMAbnVCSeggB50AJqGIVmAIzpVQZbvKoBzLXWIc2aAmAAUAFXFze-ISNAAbQZ1A-QHM4GxJ4AnqB0SvQADu7ETBxkAeL+bEncklRoAJS2oE4ufALCpJLR0WEA+oLElXyqemE1JpUAVjKSbDRUgrHynp5kAO5iFGKJeWUV4ZLE4SaCsqSuxR6uAUmSAxGedMwWVgZGgXKZZvuWoHnevmdsTJ1+x87hQ3pybHTRmZIcp6bmSxsXArOLycphOyuB6mNjZUAAb1woBRoCodA41FKENC1Vq9UaoWabQ6XR6sShfBhJjhAG5cABffCgkrg6aVEwWPSCGh2MjRalwxHI1E0ES+DihaJ0SocSQ00AAXhYZTskulsvlguy9NRoDFoi462VnI4fIFASlMrlNJ1IpR6MxVFIAEI-Gw6sQGtwampKcRcnqgyiAPxsqo1T0NKhNYgtdrSTrdXpm6Eq6J2A1-IHawPBvUALgiVCoZCodhuZv5CStmttDHt+aboAARMQkvtAmR1Nwy8k6J9LdKxABaEfh3Gc4jcmgtu1MvL8vS-Eqa7S7JjRChcWbqU15bil5j6qSxPSgbCgOyfVakbA4HC5EFFMGdNK8gDWdFCTHRYqoqhCkieqOli7qVJoAx2H+ZaAXmzZhgSPrTqojb5kWdAAI4UFsdhfj+Eh0JIqh2M4xHQXQ-5wdk8FNmGZEkTBAFwmhwZFm+ZCft+CSSIIngUVRcLzsyL6sswkhfmuux2PCwGiuKXCDDQWxSXIyqVnYLYAFRyuudBaXOuqoiyHiDGQH4UBm+GVAAjEw1koLJrEogavhsBQ2i6bsSryGw754d+tk8XxFacSpXl0DRRnBoIRh2D4UZ0MhfruZ5kh6TRwrNqioHOqASG+qo0VBgyOyDnJ2WuVwTHqMqHFcbiKDBfxqURVFzlBrlpAJQVKECbBtHZUGiFeklhUdUNRZyiFNV2k2TJ6gtxmiR4NSfFQZrWXZoAOUwiaeBQkVZfmVWgK16XeXVfmcQFuLbdN-FKeFF2RXN+axVePWjclJHnRlTlDWdGKaiFT2eKpDaA823yCOWGlbZuvHlrtoD7YdNGQ1DgMPaFyng217XzWVcgVc2p01T59W3ZUTUBLxLUeQTxVNh98Uer1fqzQDWNAxwIMM2lemYzzTYw+WYvU7TaORc116My9NFvdlpV0J45UTfmnx8zjNV7Vs6PM-mS3BsboCmyZpCqD43wcDQ4h2Mw3PBl1LBKoqyotmZFnRC2GvDV4ZDmZZfuFq77se2tegcL7PNhpHG0h6iGElmWDtMC2fAfu2QykEuVArh4Y503phmNqbLtW2wNt2-SC6nXnBe1BFPniZJEUyfSp2mj5DdxKpmle5ZpenVuXDKr3q7ty28fR3az5uKyvxynbdZqrWNpMFmBxAY2LsS+q1pavqIjZlYwkW0Oh8mHYqi-FoTtohiYEJRLt+Yo7fv0URJFv-ffvJ6Wcsv9mDp20MROmJhOTqGAaAIuB86ylyZBfLeQIb530dsdB0T88ovyRmg9+g1gxhhxsAwhQYAGp2AaA8BNooGgBgUXFBVhEEiQXh4Ng2FMh0DsEoB+LslCgC0qAJQtdWG3j8IaLY4M-xyjjBQTwmRKjfBoB+eU3CH6EBqH8Z0WweArVEI2C+6IVLfA2nYAAXrJR+TpSAMQsTqM2hj9F+HEi0UxZpLGImsWBHGljaSOL1BfVuMpDxkGYJUYx4NBCuJ4UwUIVi954KUHEhx5tnGuOIIITEDR7GYM6tg0g4lAiVA4WYjhOF0QURMZkDxmUADUZ1OGVOifKJRNT7GE1RGkthpQ4zSU8aTECBSVTFN+LMFA8VXFtLMZY38RFwbuI6cVbp4jgmVFCeEqZsxr5UAeA-IZNjQAS30EIop4hKhijYHYSQ2RfyCJGectgNRrmdJRAuPUmjLB6AyPQDY-ZH6+EMP8tgoROB7CcT0iBPCEnDKXpIFeNpNIyO2fIzILYmC8P8abUeSL5nTOjkwDSLZkVyIUVQOcczqkbSVkc7cmkWluJqeirwPgzTEsorIswZKKUuNae4mlOKWwZKyRQBozKiUkq5Wi25KoTCZOyZFYqgrtm7HFay3FAgUXcplSqxVjZBVrI2REvFDLmXss1aStFwsgyxNAPEpUAA+KFhqjzGpUgy218TXm0rZS6sJlQtlxjNZK1F5LrV6mgnsx1zqJIhNdYGnZezvUuxbKoEQdAWyiNwGtOUAxjUWqlVQNpKi1EdzEWCHNUilFkDJcW1RnIZJ5M+do4guiLbAkCek+U8rRXcIGd4vKdi-EBOWpC3VuSEQDtIL41JELVmxvWfG1p2zI3yBhYc45eysVzrBJE-FE6Oou2FQq3JpzfjnMudcvpfbvUrIrVMxZAzD3DOPb209DySnPPHZYmld6xILqNXuj1yS7X7JysMiWZySmYTKU07hvDQANPKVwuwXrw08yg2M4gEyCK8N-fgD5YAtHfPhXIRI-z0SAueB8UFfxmA7tZIihDk6XZwoRfKTS0Qa1WuEbOvUgq93uLVZwTj3HyUysEzUgVdLp4PqZYS9VLYuPaqYAy-F0nfXdpFWKhTImlNiZ5a+hoGnNK6uE2y5T0qHjXpM0KgDrqgOuLNZZsNVwmyevhIqJ1iK-XhMcxxkDXrbO+YDcuoN6cXPoo6qum50afP2f9QmmLitioprTdOTNjJy2L1UKoC5YSKiRAsdtcxjk8lHoS35k1MTJMzJsvCBptWPGOXQyLZsanH31cQ7yxlMzHLn2calfLzBCtKGK0wUrfCX2VbdVEmreLOvwnHE1ixLXE5tZ6-u8xXXxwdfaZNgbkLmDyOG6N8boBJvlem5JI1SWjN9q62euV2m+1rY20Nb9XWGnfv66Ii+VtpCnd2GN7bE2yukwqzdpdLQV33eK-CMAcPJutfe6iT7S35DXtW+1BcQSZv+evoFp2LtTSaRCwT4NHKtXSo839rtUPEthcTWuzBJOMRk5mwm5zBnsjJazUYhb+311gSmFUKcM5cVUoJSykTP7t3z3EXtmZwu8qi8nFyHovJZN8vkzL2ps6FdgiRyr7E7Jxea4589hV5mlmOMN4vLHni9QsdhTiDkGueSmevTbuXJV8CnWYLiMUI3gcQS0LofQypGzk+qxxmyaAAAMTAsAAFY57kwHPIsebm0e5aB0VwP+elBh50HoFHTZC-B9GyXiPc8ldmko1nnUQA","body":"function real_part(z) { return apply_generic(\"real_part\", list(z)); }\n\nfunction imag_part(z) { return apply_generic(\"imag_part\", list(z)); }\n\nfunction magnitude(z) { return apply_generic(\"magnitude\", list(z)); }\n\nfunction angle(z)     { return apply_generic(\"angle\", list(z));     } "},{"body":"\n    Observe that these do not change at all if a new representation is\n    added to the system.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    We can also extract from the table the constructors to be used by the\n    programs external to the packages in making complex numbers from real and\n    imaginary parts and from magnitudes and angles. As in\n    section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":", we construct rectangular\n    numbers whenever we have real and imaginary parts, and polar numbers\n    whenever we have magnitudes and angles:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":175,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuRRIA7CAewFcAnAYwFMAaUAWzIGcAXUAMwuJo4BLMsTagAFgEMAbnVCSeggB50AJqGIVmAIzpVQZbvKoBzLXWIc2aAmAAUAFXFze-ISNAAbQZ1A-QHM4GxJ4AnqB0SvQADu7ETBxkAeL+bEncklRoAJS2oE4ufALCpJLR0WEA+oLElXyqemE1JpUAVjKSbDRUgrHynp5kAO5iFGKJeWUV4ZLE4SaCsqSuxR6uAUmSAxGedMwWVgZGgXKZZvuWoHnevmdsTJ1+x87hQ3pybHTRmZIcp6bmSxsXArOLycphOyuB6mNjZUAAb1woBRoCodA41FKENC1Vq9UaoWabQ6XR6sShfBhJjhAG5cABffCgkrg6aVEwWPSCGh2MjRalwxHI1E0ES+DihaJ0SocSQ00AAXhYZTskulsvlguy9NRoDFoi462VnI4fIFASlMrlNJ1IpR6MxVFIAEI-Gw6sQGtwampKcRcnqgyiAPxsqo1T0NKhNYgtdrSTrdXpm6Eq6J2A1-IHawPBvUALgiVCoZCodhuZv5CStmttDHt+aboAARMQkvtAmR1Nwy8k6J9LdKxABaEfh3Gc4jcmgtu1MkFFMHoraVb5UM0AL3hCLRGKxE45XJ6vJbK88a8yHBbTErdm3OtAC5ZHkEzHll43953e6d2PZU4znYLZvh+67XrePhbtkj7PkurLviYxCCJiDTfoiv4HlMVSASewGIchqF0DeXhQd+sHMvBHizCYuzoXqu6OlhOJHtOeEtjRuwkXeD60kGC6EPyei-CUmraLsTDRBQXCzOopp5NwpbMPqUixHooDYKAdifKspDYDgOC5Iubisp0aS8gA1nQoRMOiYpUKoQpInqTHOu6lSaAMdh2WWjl5s2YYEj606qI2+ZFnQACOFBbHYVk2RIdCSKodjOMl3l0PZfkwWFwZhmlKU+Q5cK5UGRZmWQlnWQkkiCJ4GVZXC86USZHjvlZYl0TujYGr4gw0KucriXIyp3i2ABUQ27ONc66qiL6kIMZAWRQGbxZUACMTDrSg3VNr1XBsBQ2hTSN8hsOZcXWZtNV1RWlWDZIw0wXNwaCEYdg+FGdDBX6R0nU9uwwcKzaoq5pBBb6qivfxOyDs5oP6uKXBFeoyoVVVuIoLd9X-adL2lUG4PuZDIUNb5-mI0GgVej9UOE4jRZyndqN2k2TJ6hz81UaQNSfF+61baAO1MImngUHQe35gdoB44DZ0Y1duJC8z9X9Y9z1s-m71aV9pN-cd+NS6DnwcJqd3qxep0NlTzbfII5Z3oLkm1eWIugGLEswTbttU6r90DVb8swVrwYMnDcgI6DMuo0q52Xe7-ty5rMNNjrn0evrhWZRTxu26b5u44b8s+77duu3Y9tu9d2Me1sXs49pxea6Hzbh3Qnjwwz+YF-7qOi-Xkup-mXNh42o88DzoCqD43wcDQ4h2MwecufubnKYqm+tktK3RC23fU14ZDLatB+FiwSpbyBoh6NeZ+omGfO3-fKIRSWZZL0wLZ8BZ7ZDKQQkqAiQ8GOAI8tZrj0bMTGebA54L3pAuGWgDgG1FOnHdq1p5Z2DtDLU0cdkFxE6nQYCO9VoQJllJLgyoCGiVOsBJ+G4IHGV0vIDgcoF51jVLWG0TAswHCclAtepAq5cI1DwpGlh+HNQWkOTBJg7CqF+FoPOxMvoiMUZiZeB98pJRSho5RB836lnLPo5gX9tDJTASYTk6hTGgFAeqORECmQyL4UCBRSjl4gzBkI9y6jPGU3zGGf2pjAnBiMR-Ux5jLE2hsdPTx9jxxuKsM4lqLC2DRUyMQpQKjfFKFAONUASgEFpLBHzOUAxKh2TlHGCgnhMiXhoBZeUxC86EBqH8Z0WxJ6tVEI2GR55PzQQwsTAq34+ITxkaBFo4F0KMV8f7bcEz+lTwwZURSZBmBVKSheaZdglBMFCD+YmIiDmgCOcsvUMiCIoQoGhbc3jgzE3fIESoGSvwZJiuiDKq5ZkPlAAAallpk750yhnkVbpMqenFiEPKjkTXxLzxCVF+LMFAn1ELgu3LZHZWKCacxWb0lUHUNlbMxTRbyDwV4+L-KAER+hClIsqGKNgdhJDZFsgUlUry2A1DZfi1EC49TtMkVQDI9ANj9j3L4QwUq2ChE4HsQlLCbT7OOb4347DkWqrPJlGpZh6lUBIjky5qJKHAUGeBbiZFdUCBonUzIc4cW-KvK3c1IFMVWsgpwC1er7WGqdX4T1rqYbupuURa1PrbX6odUajlKokK3IaG66SwEYWRrNNG-1jr40wpTZmtZpLtmrmmSRLNtSA2lyDPsw58JFQAD4rFL0kCSpSxbdmIRreckOobU0tkLW28lcYy3VOzUaqtepKXyDrY21VA7NmVCHfIqgVKBUOl8S2VQIhiIlNwOUrYF5R0Voad8JpLTsH0mYWUw0B61xkENY05pnJsGPNACKzpxBukLWBFc1Z8pCJ3Nheq2lYyllPmVWCGFczMJuUWRRX9RL51ko-BSld06Rm+PpVS01KIBm4r+dS9dtLw2AfQoy34yKWVsrjHRXikCEMsLBQR19q9iP-qTUBrlTLeXEGo7RIDkKIMIRbTKItgy9lnKOSxmlB4RHccih8kF2T4RAs+VkuwRyOUv2DEy1FxB0UJRyYJxs769DirkIkKV6IZXPA+Aqv4zAhMeFVTkjDtLNWSA4Tq6I97HVMBNeBvU7rLVXgzcBHzAb40hY3Pm+hwbGHeszRFnNTAmMhsbGG9jEbEvhd83GpgJHk29szemnLLZkv5fkDRoeGW+1IfbdURCZaKskUJl2qTDam31fE52yTPbasFpE+swdKHh1fxaxO1EU72VKlnfKZtraF1Lum-11jB5N3bpbLumRyVVDMs2RUSI94habl2q+55Q2xO4r2dFrcG0VN7hdV+U7Wmy5vbS89+7gKg1gSvPeXa0ip7-X28wQ7ShjtMBe+dxFl2209fm7d478JxyI5e5Nt7zYPt3eRz9mZf2XuA8Q3UkHYOIegCh-Ci7i3kMtApYV2FX3yOJqIv917GPEZQc3F9oFnOAclJkTPaQJPdjg655Ds7lOYfU8XaN+R9OkdvoTQB+5u10fs71Jzr745ecEzgoh2HC74fyL6484mpp8IG62Ubkdfrj1xva4Tlh9XltoZm1HM3GILfS6Xc1vLc4Vu7plswXEYpQci48loXQ+hlSNm69dztG00AAAYmBYAAKx2lwDHAcdSqFXA16oPbofSfB+F5ECPOg9Bq6bKX4v4fNCV6oJnrHGUjqeA4DqIAA","body":"function make_from_real_imag(x, y) {\n   return get(\"make_from_real_imag\", \"rectangular\")(x, y);\n}\nfunction make_from_mag_ang(r, a) {\n   return get(\"make_from_mag_ang\", \"polar\")(r, a);\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.73","id":"#ex-2.73","child":[{"body":"\n    Section ","tag":"#text"},{"tag":"REF","body":"2.3.2","href":"/sicpjs/2.3.2"},{"body":" described a\n    program that performs\n    \n    symbolic differentiation:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":27,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0A3AQwCcr2AjAGwCmACgAeASlABvUJ0EUinek2aMK3EgHMx4gNygAvvmLlqdBi0bsAtoLZceAkawCMAGlCsUkqblD-ZeUVlFg5uPiFhV0kAMhiLe3CnKO9QOM8XUABeHM8UXVwjQlJKWhDVImsdaT8AuQUlBIAHdipOavSAC0F2ABNqnKzQACIAamGCopNS82t2AGs7RkrhdndQdlSZeuDQfiYKYTHhjzXT730pkrN6OcXmJs4aXqJKYWt16y3Ahvp9tSOACoTqAPh4vnpDMZrmUNr1eoISP1GD4frtun1hBRWvxhCjIVdTLD2ERNIjkaido0Mf1sVRcXTcfiCdCieYVI9nq9DhIagE0Y0Oa12ryuj1+rzBiNgZNWTNbkR+NQmvtBO0UdIBfQaVicXjxCzimyFUqqCqqGR2Ej9Zqqdrxbr6Y6mQbDdMbqAEdxWMJBKImh4wo4hD5av47QkSJVeGrff7xGH+fyAPygAAMiaT-gAXAkgxERH6mgms0nUyorLZEsHC-7Aw4C5JU5lcxnS-zcxWVkWS+3-Km7ksVl6qD6+gjrT360kQx5M332yOx6TyXHi9Oawb50nOyxOS83j3tynQQsh1VBw8ngfDtZFcrVe0p6Bjwu31ml+972b9pbJ-GN0bcQ3Ffd9T3ufduWET871Nc1Y2ffMnGAl8wLQ9tYIfC0rX6HstzfEBQRoORZEVQRGFAP9QBjOEEV6UBujkUDQFzNUnifOsRlIeYSBoAB3egizkRhGFhCgAE8mkEUAAFoZM9NVR2GPRCnwT9-kOYZgQ8DSgRBYZRH08TlJ0g4jnGDwDJBDADUswy9CAA","body":"function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n           ? is_same_variable(exp, variable) ? 1 : 0\n           : is_sum(exp)\n           ? make_sum(deriv(addend(exp), variable), \n                      deriv(augend(exp), variable))\n           : is_product(exp)\n           ? make_sum(make_product(multiplier(exp), \n                                   deriv(multiplicand(exp), variable)),\n                      make_product(deriv(multiplier(exp), variable), \n                                   multiplicand(exp)))\n           // more rules can be added here\n           : error(exp, \"unknown expression type -- deriv\");\n} "},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":44,"program":"chap=2&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0A3AQwCcr2AjAGwCmACgAeASlABvUJ0EUinek2aMK3EgHMx4gNygAvvmLlqdBi0bsAtoLZceAkawCMAGlCsUkqblD-ZeUVlFg5uPiFhV0kAMhiLe3CnKO9QOM8XUABeHM8UXVwjQlJKWhDVImsdaT8AuQUlBIAHdipOavSAC0F2ABNqnKzQACIAamGCopNS82t2AGs7RkrhdndQdlSZeuDQfiYKYTHhjzXT730pkrN6OcXmJs4aXqJKYWt16y3Ahvp9tSOACoTqAPh4vnpDMZrmUNr1eoISP1GD4frtun1hBRWvxhCjIVdTLD2ERNIjkaido0Mf1sVRcXTcfiCdCieYVI9nq9DhIagE0Y0Oa12ryuj1+rzBiNgZNWTNbkR+NQmvtBO0UdIBfQaVicXjxCzimyFUqqCqqGR2Ej9Zqqdrxbr6Y6mQbDdMbqAEdxWMJBKImh4wo4hD5av47QkSJVeGrff7xGH+fyAPygAAMiaT-gAXAkgxERH6mgms0nUyorLZEsHC-7Aw4C5JU5lcxnS-zcxWVkWS+3-Km7ksVl6qD6+gjrT360kQx5M332yOx6TyXHi9Oawb50nOyxOS83j3tynQQsh1VBw8ngfDtZFcrVe0p6Bjwu31ml+972b9pbJ-GN0bcQ3Ffd9T3ufduWET871Nc1Y2ffMnGAl8wLQ9tYIfC0rX6HstzfEBQRoORZEVQRGFAP9QBjOEEV6UBujkUDQFzNUnifOsRlIeYSBoAB3egizkRhGFhCgAE8mkEUAAFoZM9NVR2GPRCnwT9-kOYZgQ8DSgRBYZRH08TlJ0g4jnGDwDJBDADUswy9CAA","body":"deriv(list(\"*\", list(\"*\", \"x\", \"y\"), list(\"+\", \"x\", 4)), \"x\"); ","output":"list(\"+\", list(\"*\", list(\"*\", x, y), list(\"+\", 1, 0)),\n          list(\"*\", list(\"+\", list(\"*\", x, 0), list(\"*\", 1, y)),\n                    list(\"+\",  x, 4)))"},{"body":"\n    We can regard this program as performing a dispatch on the type of the\n    expression to be differentiated.  In this situation the\n    \"","tag":"#text"},{"body":"type tag","tag":"#text"},{"body":"\" of the datum is the algebraic operator symbol\n    (such as ","tag":"#text"},{"body":"\"+\"","tag":"LATEX"},{"body":")\n    and the operation being performed is\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":".  We can transform this program into\n    data-directed style by rewriting the basic derivative\n    function\n    as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":false,"body":"function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n           ? is_same_variable(exp, variable) ? 1 : 0\n           : get(\"deriv\", operator(exp))(operands(exp), variable);\n}\nfunction operator(exp) { return head(exp); }\n\nfunction operands(exp) { return tail(exp); }"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tExplain what was done above. Why can't we assimilate the\n\tpredicates\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_number"},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_variable"},{"body":"\n\tinto the data-directed dispatch?\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tWrite the\n\tfunctions\n\tfor derivatives of sums and products, and the auxiliary code required\n\tto install them in the table used by the program above.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tChoose any additional differentiation rule that you like, such as the\n\tone for exponents\n\t(exercise ","tag":"#text"},{"tag":"REF","body":"2.56","href":"/sicpjs/2.3.2#ex-2.56"},{"body":"), and install it\n\tin this data-directed system.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tIn this simple algebraic manipulator the type of an expression is the\n\talgebraic operator that binds it together.  Suppose, however, we\n\tindexed the\n\tfunctions\n\tin the opposite way, so that the dispatch line\n\tin ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" looked like\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"get(operator(exp), \"deriv\")(operands(exp), variable);"},{"body":"\n\tWhat corresponding changes to the derivative system are required?\n      ","tag":"#text"}]}]}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Explain what was done above.\n          Why can't we assimilate the predicates\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_number"},{"body":"\n\t  and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_same_variable"},{"body":" into the data-directed dispatch?","tag":"#text"}]},{"body":"\n\t  The operator symbols come very handy as \"","tag":"#text"},{"body":"type","tag":"#text"},{"body":"\" keys in\n\t  the operator table. For numbers and variables, there aren't such\n\t  obvious keys, although we could introduce names for those types of\n\t  expressions, as well, if we change the way expressions are\n\t  represented as lists.\n        ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Write the\n          functions\n          for derivatives of sums and products, and the auxiliary code required\n\t  to install them in the table used by the program above.","tag":"#text"}]},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":96,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0A3AQwCcr2AjAGwCmACgAeASlABvUJ0EUinek2aMK3EgHMx4gNygAvvmLlqdBi0bsAtoLZceAkawCMAGlCsUkqblD-ZeUVlFg5uPiFhV0kAMhiLe3CnKO9QOM8XUABeHM8UXVwjQlJKWnoAE0FuVmFBUQAHDzDHIR8-ALkFJQSSImteKtqG8XaAsf8AflAABlHxgIAuBOaIkTr6kfnxqZUrW0SWtYamh1XJKcyl2a2xpc15YQAiSurHjxp6qvYKGk4hjfEwg+XxI5UY-3EJySrQKRhMpXMwM431+EOkgS69AAFoJ2OUIfoivCzPQkexQeD1j4McFQBR2FR+ATDMYSiTQNZ2ABrOyMPrCdjuUDsVK+MadWn8JgUJ4AajewqFIr0hTmN2KpjKHO5dnqnBo5SIlGE1iF1lFcwl3SlaieACoFaaPOaVUYbmMNQj6HjKqCgZ9kRS2uKgt0cXj-SCwa61VtPez2ER7n6yUHpJbQ9jcfj6YzI4HozH3QF41rrER+NR6lLBqno+mQ5jQOH8XXGEXi6BS+Zy5WqNWqGRya2A8P2w2Opnm9nhLmmW3xDHcCBQGSScx6U4PPUiBRhaDQPcKMuwAR9dZQGQsex6hQqqBsKBhIxBF6HzgcCNu97GIwaGRhB5ABPDw5DIX56zFScmxUXp+CZMCIPbWNtlAUhKgIKgSEEcoUNuUBBAARyIdgmWAjwW2ESjEM4QtNmLKZqNfJD6PdJZ2F-f9AMEEC6QZBDmNo9sl2JMsdQ3VZhGDAJwJINRQH4f9SIkpxsgU6V7U3IQHRVMZRPMRSaC5Ih6m4oDmCFYDmAtG5ZPkvleC0wQ1I4v8AKsoU52ERSh34FTWl0rYqAIJ8VHQwRMOw-EHKcxcJ2LK16HCyKcIKG4DAI-gX3i907L3Gjyhczj3J46yPC8mKzkChKpzC0EIqwnDhAK1jO1Q5LGtwtqtiWLyWrSrY3QCIb-H05Q5KqGUPI8KyUBOfgiEEaT5jy0BKtUrJhWKsyLPK-jvKUvzYuq8ZgtClgOqi58iEcqqcpuF8KAkvMfOUpy3Dw7r6gZP4bSm0qhW+qg-lm+bFsXD7uu6rzXqOqqTrGDLBCy5yoOLVaCqKtydrmvi83WgKBuLM7hDqjDOuawTyjitHuse56mQJwRIah4sgb+dmcbBpa9vxm7joRwbMuy2m2vpvqqe5wX5hG8ZZdlsbQHKJhvooK8TWW8ZEo5bJckeQzjPqR5PvmKYDZMk3xiWC8ck2x4sJfTgKGN1mdgmp3Lfwqp9T+awPEeUguRIGgAHdSVHdkAFpI74pxHhO2XteVxhVavWF8FWtcyn85zNs5Hkc6kgpVqPNSs7oQv9ZoIyTPj4u6Hknc9028uSErh3Jrr1lNXMF4qFYVR+TbKFDh8ABIMeMybfPeX5Puah9QQU1HIMR7OFnWYCeeBSTJeRyjds16cRd08V+fmD1A0jRlYfPFOY+cu1mfB+sE1xMvw1jV7Ksaz+BcN83uMbe39+xSiHMvA+kJPaALvtCJaUCYH+Gfh-a+whgEVh-lQQY0DEHdX-jg3B4wVjHwAbgkBA5wH7wLMJGMisHb0ngswbemsm5PHngqR48oPDnz5NYE6rDnhVH7hwh03ChEDxQZQE62tnh0EEI8dO9DSJ+WYQUXA28-r2gVJox4ojQCPFEBwoC8cPA6K4fowxHhsAQwsV3FcABtfRXCTwBHsfY3RCo3EeI8O4yxoB3HGI8HBfgABdMJHgXHFi8eY+xQp7HTCCRWUJ4TQDBLCSEj6K5XHuNEZEsY0S3h5PGF4vRvjPEJNSUk9JESslbBKZ4uJjxAmVPgtUlpySMlFOKe4mJBjPHYESa0lJaTQAhNGZksAYxgmjLCUAA","body":"function deriv_sum(operands, variable) {\t\t\n    return make_sum(deriv(addend(operands), variable),\n                    deriv(augend(operands), variable));\n}\nfunction deriv_product(operands, variable) {\n    return make_sum(make_product(multiplier(operands),\n                        deriv(multiplicand(operands),\n                              variable)),\n                    make_product(deriv(multiplier(\n                                             operands),\n                                       variable),\n                        multiplicand(operands)));\n}\nfunction install_deriv() {\n    put(\"deriv\", \"+\", deriv_sum);\n    put(\"deriv\", \"*\", deriv_product);\n    return \"done\";\n}\ninstall_deriv(); "}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"\n            Choose any additional differentiation rule that you like, such as\n            the one for exponents\n\t    (exercise ","tag":"#text"},{"tag":"REF","body":"2.56","href":"/sicpjs/2.3.2#ex-2.56"},{"body":"), and\n\t    install it in this data-directed system.\n\t  ","tag":"#text"}]},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":106,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0KgZwH0A3AQwCcr2AjAGwCmACgAeASlABvUJ0EUinek2aMK3EgHMx4gNygAvvmLlqdBi0bsAtoLZceAkawCMAGlCsUkqblD-ZeUVlFg5uPiFhV0kAMhiLe3CnKO9QOM8XUABeHM8UXVwjQlJKWnoAE0FuVmFBUQAHDzDHIR8-ALkFJQSSImteKtqG8XaAsf8AflAABlHxgIAuBOaIkTr6kfnxqZUrW0SWtYamh1XJKcyl2a2xpc15YQAiSurHjxp6qvYKGk4hjfEwg+XxI5UY-3EJySrQKRhMpXMwM431+EOkgS69AAFoJ2OUIfoivCzPQkexQeD1j4McFQBR2FR+ATDMYSiTQNZ2ABrOyMPrCdjuUDsVK+MadWn8JgUJ4AajewqFIr0hTmN2KpjKHO5dnqnBo5SIlGE1iF1lFcwl3SlaieACoFaaPOaVUYbmMNQj6HjKqCgZ9kRS2uKgt0cXj-SCwa61VtPez2ER7n6yUHpJbQ9jcfj6YzI4HozH3QF41rrER+NR6lLBqno+mQ5jQOH8XXGEXi6BS+Zy5WqNWqGRya2A8P2w2Opnm9nhLmmW3xDHu-ROTzmOs6IISNRvmVhLx2IxBB4qRP-Fb6DaZY87Q6PAejyfhrDl6AHyIF2eaWGZwuX8StQ3EgtxlT8xUnJsW1nBl51HIMlxAUAyRJZh6ScDx6iIChhVBUB7goXBEIIfVrFAMgsXYeoKCqUBsFAYQjy9WicBwEZX0PRgaDIYQeQATw8OQyF+etwPPKcVF6fgmUE4T21jbZQFISoCCoYDynk25QEEABHIh2CZPiPCgqCZM4QtNmLKYTMEISzLkzslg4rieMEfi6Rg4RTMLF9X1XOw0MiYMAiEkg1FAfguP01DVmycLpXtALBAdFUxgA8wIpoLkiHqFzeOYIU+OYC0bhCsK+V4RLYqc7jCqFOdhAiod+GipxFwKG4qAIeiVCUwQVLUhiiAqs4guLC9FNBPrVMEcp2q2AwtP4I8vxKugwq8qrGE4mrXKKjx6vKxK2o0xtaR6yb+pmzybOEizO3mKZesu9T7q2JZ6q8lL5rmN0AjS5RQqqGVao8QqUBOfgiEEUbxlK7DDpirJhS25yQfcvNGqio6vvmTrupYJ7pvxBHWphm4jwoaKMci5rErcE77vqBk-ivXL8ow5m2fBzx9Khxd6de176sx2mRpx8YFsEJbBBWrY4cCWzyk27auf2jySdacWOq64RzuUonrsVxdZeLCmqaZDXjwZwXQCZqg-jtv4wYhvm1bzS3Fy1+bFuW0TXrNj6brMl3obm4tfvmCOWVStktXKJgmYociTTJiDaVInIkceDKsvqR5rbGKYc+ygvFg5bJckeVSj04Ch85tnZAdr0v-CWKp9T+awPEeUguRIGgAHdSVHdkAFpR-cpxHnFqPxvjxhE-Inz5eQsoWqEWK-PXkQVXl-DYtXuht6eYu893tbsMw7CkcPkhj6rpu65VV8XioVh1waTdtx4El8zHKFDg+AAJBALmPLB8sV3x-yDGHMiF8tINFikBEC0DoywPGlvPUBojQynWALQWmD9SGmNFvZB39dx0H3IeZ0OpVD8jwaAUeLh+a4CATbcYr8agPgAWLf8sdzDV3pFJD+9Qv47hQnUaioU9wwyvk8ThCobx3lAJwkRYif5lHFuNZ4m5HgvkEfpZqZDxFr0kVuRgMiCi4E4Q1eKSjFGiAVBgSEoBHiOL0EAA","body":"function deriv_exponentiation(operands, variable) {\t\t\n    const bas = base(operands);\n    const exp = exponent(operands);\n    return make_product(exp,\n               make_product(make_exponentiation(bas, make_sum(exp, -1)),\n\t                    deriv(bas, variable)));\n}\nfunction install_exponentiation_extension() {\n    put(\"deriv\", \"**\", deriv_exponentiation);\n    return \"done\";\n}\ninstall_exponentiation_extension(); "}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"\n            In this simple algebraic manipulator the type of an expression is\n            the algebraic operator that binds it together.  Suppose, however,\n\t    we indexed the\n            functions\n            in the opposite way, so that the dispatch line in\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" looked like\n            ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":false,"body":"get(operator(exp), \"deriv\")(operands(exp), variable);"},{"body":"\n            What corresponding changes to the derivative system are required?\n\t  ","tag":"#text"}]},{"body":"\n\t  We would need to change the order of arguments in the installation\n\t  procedure for the differentiation library:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":false,"body":"put(\"+\", \"deriv\", deriv_sum);\nput(\"*\", \"deriv\", deriv_product);\nput(\"**\", \"deriv\", deriv_exponentiation);"}]}]}]},{"tag":"EXERCISE","title":"Exercise 2.74","id":"#ex-2.74","child":[{"body":"\n    Insatiable\n    \n    Enterprises, Inc., is a highly decentralized conglomerate company\n    consisting of a large number of independent divisions located all over the\n    world.  The company's computer facilities have just been\n    interconnected by means of a clever network-interfacing scheme that makes\n    the entire network appear to any user to be a single computer.\n    Insatiable's president,  in her first attempt to exploit the ability\n    of the network to extract administrative information from division files,\n    is dismayed to discover that, although all the division files have been\n    implemented as data structures in\n    \n\tJavaScript,\n      \n    the particular data structure used varies from division to division.  A\n    meeting of division managers is hastily called to search for a strategy to\n    integrate the files that will satisfy headquarters' needs while\n    preserving the existing autonomy of the divisions.\n    \n    Show how such a strategy can be implemented with\n    \n    data-directed programming.\n    As an example, suppose that each division's personnel records consist\n    of a single file, which contains a set of records keyed on\n    employees' names.  The structure of the set varies from division to\n    division.  Furthermore, each employee's record is itself a set\n    (structured differently from division to division) that contains\n    information keyed under identifiers such as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"address"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"salary"},{"body":".  In particular:\n    ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n        Implement for headquarters a\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_record"},{"body":"function\n        that retrieves a specified employee's record from a specified\n\tpersonnel file.  The\n        function\n        should be applicable to any division's file. Explain how the\n\tindividual divisions' files should be structured.  In particular,\n\twhat type information must be supplied?\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Implement for headquarters a\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":"function\n        that returns the salary information from a given employee's\n\trecord from any division's personnel file.  How should the record\n\tbe structured in order to make this operation work?\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        Implement for headquarters a\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_employee_record"},{"body":"function.\n        This should search all the divisions' files for the record of a\n\tgiven employee and return the record.  Assume that this\n        function\n        takes as arguments an employee's name and a list of all the\n\tdivisions' files.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        When Insatiable takes over a new company, what changes must be made in\n\torder to incorporate the new personnel information into the central\n\tsystem?\n      ","tag":"#text"}]}]}],"solution":[{"tag":"OL","child":[{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Implement for headquarters a\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_record"},{"body":"function\n          that retrieves a specified employee's record from a specified\n\t  personnel file.  The\n          function\n          should be applicable to any division's file. Explain how the\n\t  individual divisions' files should be structured.  In\n          particular, what type information must be supplied?","tag":"#text"}]},{"body":"\n\t  We are tagging each division's file with a unique identifier for the\n\t  division, using the tagging functions in\n\t  section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":". We assume that each\n\t  division provides an implementation of the\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_record"},{"body":" function and installs\n\t  it in the company-wide operations table.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":false,"body":"function make_insatiable_file(division, file) {\n    return pair(division, file);\n}\nfunction insatiable_file_division(insatiable_file) {\n    return head(insatiable_file);\n}\nfunction insatiable_file_content(insatiable_file) {\n    return tail(insatiable_file);\n}\nfunction get_record(employee_name, insatiable_file) {\n    const the_division \n        = insatiable_file_division(insatiable_file);\n    const division_record = get(\"get_record\", the_division)\n                            (employee_name, \n                             insatiable_file_content(\n                                 insatiable_file);\n    return ! is_undefined(record)\n           ? attach_tag(the_division, division_record)\n           : undefined;\n}"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Implement for headquarters a\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":"function\n          that returns the salary information from a given employee's\n\t  record from any division's personnel file.  How should the\n\t  record be structured in order to make this operation work?","tag":"#text"}]},{"body":"\n\t  Every division needs to implement functions such as\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":" and install them\n\t  in Insatiable's operations table. Then, Insatiable's function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":" can look like this:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":false,"body":"function make_insatiable_record(division, record) {\n    return pair(division, record);\n}\nfunction insatiable_record_division(insatiable_record) {\n    return head(insatiable_record);\n}\nfunction insatiable_record_content(insatiable_record) {\n    return tail(insatiable_record);\n}\nfunction get_salary(insatiable_record) {\n    const the_division = \n        insatiable_record_division(insatiable_record);\n    return get(\"get_salary\", the_division)\n           (insatiable_record_content);\n}"},{"body":"\n\t  Note that we rely on the fact that any employee record that gets\n\t  returned by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_record"},{"body":" is tagged\n\t  with its division, which is used in the generic function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":" to retrieve the\n\t  correct implementation from the operation table.\n        ","tag":"#text"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"\n\t    Implement for headquarters a\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_employee_record"},{"body":"function.\n            This should search all the divisions' files for the record of\n\t    a given employee and return the record.  Assume that this\n            function\n            takes as arguments an employee's name and a list of all the\n\t    divisions' files.\n\t  ","tag":"#text"}]},{"tag":"SNIPPET","latex":false,"id":16,"eval":false,"body":"function find_employee_record(employee_name, \n                              personnel_files) {\n    if (is_null(personnel_files)) {\n        return undefined;\n    } else {\n        const insatiable_record \n            = get_record(employee_name,\n                         head(personnel_files));\n        return ! is_undefined(insatiable_record)\n               ? insatiable_record\n               : find_employee_record(employee_name, \n                                      tail(personnel_files));\n    }\n}"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"\n\t    When Insatiable takes over a new company, what changes must be made\n\t    in order to incorporate the new personnel information into the\n            central\n\t    system?\n\t  ","tag":"#text"}]},{"body":"\n\t  We would need to do the following, for each newly acquired company:\n\t  ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"\n\t      Decide a name to be used as tag for any data item related\n\t      to the new division.\n\t    ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t      Write all division-specific functions such as\n\t      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_salary"},{"body":"\n\t      and install them in the company-wide operations table using the\n\t      division tag.\n\t    ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\t      Add the employee files to the list of\n\t      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"personnel_files"},{"body":".\n\t      Note that this is a \"","tag":"#text"},{"body":"destructive","tag":"#text"},{"body":"\"\n\t      operation—similar to the extension of operations\n\t      tables—in that the data structure is permanently  and\n\t      irrevocably modified;\n\t      section ","tag":"#text"},{"tag":"REF","body":"3.3","href":"/sicpjs/3.3"},{"body":" explains this\n\t      concept in detail.\n\t    ","tag":"#text"}]}]}]}]}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Message passing","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    The key idea of data-directed programming is to handle generic operations\n    in programs by dealing explicitly with operation-and-type tables, such as\n    the table in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"2.22","href":"/sicpjs/2.4.3#fig-2.22"},{"body":".\n      \n    The style of programming we used in\n    section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":" organized the required\n    dispatching on type by having each operation take care of its own\n    dispatching.  In effect, this decomposes the operation-and-type table into\n    rows, with each generic operation\n    function\n    representing a row of the table.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n    An alternative implementation strategy is to decompose the table into\n    columns and, instead of using \"","tag":"#text"},{"body":"intelligent operations","tag":"#text"},{"body":"\" that\n    dispatch on data types, to work with \"","tag":"#text"},{"body":"intelligent data\n    objects","tag":"#text"},{"body":"\" that dispatch on operation names.  We can do this by\n    arranging things so that a data object, such as a rectangular number, is\n    represented as a\n    function\n    that takes as input the required operation name and performs the operation\n    indicated.  In such a discipline,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_from_real_imag"},{"body":"\n    could be written as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUAFtWAa04B9Auxp6TXVgBsTVAwHM+AGlABPQSPGgtlWnoAEyoGAAdWCjIAC24aMO9RX3FJaXp40ABebNAAIht7CPYKXKTk8rEAfiUyiuSALlAM7My8x1YnEyKS2rrxao9evtBG5pzc5xIqKSDOUuHk6oMKaJNmYu5mNi4+QQBqRhYOHi9+Ib7RsKzx1hInWznzuqXI1cjblG4PdwEnisbOOwLOw4mF3LlSIYSDQAO7pK4AWgR+iMpnMlmsnDsDmcuX4ql8Gl8qRkoBC4UiMVURPEhFIAV0BmMZgsVmcJluLnY7lYiV8-h0wVCESisXifIqJPh11a+SxhQ4PQWvmq7AUKJWJjINAY3F5f3KlxlbXZ3XmyqqEnVy1WDCoJD1ZwtYiNLTyk2mRFm5otqoNDSaVzduU5Dx9yuqrH9vgBQJoIPi4Mh0LhgdASJRzPRVgKOI6eIJ4hpYilZOFlOi1NqdO0gVArDCYVsHhMTk4JEBVDIoJ57CcEpLnCkpOiWKCer7-FB+PUNYZ9Fz3W4AC8B6WG02W22O+wu9w5dize5bKEKCv+DONAK6+1OkvV8IyuvG83W+3O93creuorcsfT+el5zoKKJOFMMw8A+PiDsO9Abq+24fvuHoQX+oAngwZ6rkB166KGkFrkOaT1i+W7vrun74WhGFYReVa4XBQRBFqlhNpwvArgAjO4y4oAOEhEaSTJoqymLYre3DRik8o-hsy6cfsAmHoqK58a4UliN+94KaABxaSpvF0bODGMEQABGLF6GxHHyTxfGPsSgn0MJLIYrmEkaUpCpyTpyKLgZamefpPmCMiwVYXxOH0iBehEPY2pWQ8NncaAhkOdJsGZiJGLspyknOqB4FepBOmKChxWqfw6kFfhXGKbVhlRbWughAAbpZ1lcXZ-Gli52YmLldz5c65WzHVoBgKNkGBTVdwPONyINZFVYgIGgKRIEJgUKwZkPO4YREBQ9YkEEoBthQuCrdmoAxA2FCAqA2CgJsnDzo9OA4GcJmsAwDA0N2xjfAJ2rsEEDA9U5oChCYJBxbY3BcCDYNOsM1SkLMBD2pwQT+gCRzw4D7ijqw47E+OiPxsjF7+tUZMI69lPg7j9a-f93CE6A21UPDFOg+DTVvS5227Tw-HaiQmHof92LCw8WToQBuTyLLnDyAWtQmbYNA0IYRBhOznAtilgMmPZ0HlOLksMOZKvyz9f0A4bJgpVz8Na2QMs7Q8Rl1FQBDPdD6OcJjHbjtbZkqxe6XDKWQch9jhblGooCcLYDCcNHfSW0dvOna09tsybKDuK7mw217nA+wspaBydwdY+TDOgyjBWWnHDeeTGnOsNz9NIzOdTFqAQ8mfa6cbCbxtO8XoCtXYRCV5nvjZ6ZEcV3brOO0bJc9270v2JHA8VH7AcMCY7eh2Xa8i1H5t9OnFBbbv3Du57IvVa3vgRFQII0Qb2+gG-iCIu7g562AXheD+n8Kil1fgfCuF4j5JxTmnDOd86gr1zhvB2-9TY717uHQ+ic+gn24LXDGDc+6U1vkMAAkHUB+T8CHl3frgeh0Cv49xBEA3BM8wEQKgRwuopdCEIKMuwsQydU7pyXgsRhpdc6gPnpXYhg8nhDxHtFOs5IRQxG4HofijlMp6GNLkLWOs9bhgWNUcxuswieUaCY4MY9ARKmdNUFxxQHF5AvtjNa7ANq6AzCrXIxCh6lh0RWKsK94jrUFE-EW8shYV24DOFe515axICfElW+5bGWLSXQSWB0jqtCyYEkgCT5pfglq49W30KDbRiE-FwFAPBhFMNtJw7hxb3RIBQcGmdSw8LaR0lpPS6B9IGQLECozOkdG4EESIRADFDMhtDHhSypAGJpqAOmWyVktzqLGYEizll6HBGZEm3cnBtlOgckxwT2nzKcOrK8WjdC9PbAMs52yIaZQ2Vw35hzdmlweUc-4Kc4wggeZc65XS7lknOemZEXz+kMDecBG8Ettq2HsIjbadw4ocB-GQQwHRRaZxMv5OS3gBKZTpquZQw8NYfPoOFc8wh6XEVLkyll-I2VZVcjmGSEleDuC8Fy4ZQLxWeHxPy8QJkpqcvQRlYiNo1hMA2FsY49NlK0v2J3cQOqdgcuwkghVYhvpzQIrImC6rXgckJZ8M1VUvKyVohazRzVnKomFQNDoHIhrcnrIYtVpIeFqjKo67UupeTuCjRqW09pHRetqKte0912AEFYGQDOFAaCc1HAJSWNB-YrAzgwDwmFOB6FZT6m5uw7XctJJEJpqwun7gJZyYl7A0ICDCbUEpXaZJHgVphEdlAe22A4HiBNo7FQWuHV+U0v5-wTrlFOolM6+1uvCkuw6yEOhFW9Ous8m7CVOF7XOwqnpZgHvPVRM9k7L3XrdfhB9R6syiXcricE3bt2zsEb4NwcqsgAD5G19R-aK5woHTifomH6-qg1Xn-teq+ndf4ngIx5IITIkHO3QZyoGvKIbeRV3taSXIQQ6BzCrLgMeuL8UYenSSiIZKKWpNUKPHFdhCg0B3aS8lbZUmZwzf0wEJA7B+DZQwetgtj13ttUIFt9BGXyu9W9BqdLSy8s0wpmKyHRKodw6GqVkNI14eZVpkCNLaJ2t6kpiCnLo2aljXqG1gFB0Coba6xzkNlUPjc8mh0Om02+cU9+tysGFmyslaqtTgCgUavWGeE1PABC6UONsE4kCjViA1e8EgnwgYCDTemsAmbAQ5rzZzQtFaS1HTLUWyt1b7p1si7MuLunIZttzR2hZuQwiCaA0oAzX9D0Hm8iUZ9w3Ru7vnfqigiHwrUUViNrDe7V3FEQ1NdbG7NuzrdVNRDT7x3nqO4t469wVFDqm8RkV4k-15Cu2hHD8X8OEYWY9sS9gxUSsQcQ5dv3UNoXm1h4D4gzO8gg1B4zJHOhkbw5RpLNG6OhNnIxvjeKugLeE1xmcuAV56BbAlayMMVlmQeq0Wov3f0LM4mgAADO4LAABWInmDODW1sKU0AtQSbMXJ0lfRZPWJJUp3oan3JO6k46pL2G0vARE45VwXnK3lBAA","body":"function make_from_real_imag(x, y) {\n    function dispatch(op) {\n        return op === \"real_part\"\n               ? x\n               : op === \"imag_part\"\n               ? y\n               : op === \"magnitude\"\n               ? math_sqrt(square(x) + square(y))\n               : op === \"angle\"\n               ? math_atan2(y, x)\n               : error(op, \"unknown op -- make_from_real_imag\");\n    }\n    return dispatch;\n} "},{"body":"\n    The corresponding\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":"function,\n    which applies a generic operation to an argument, now simply feeds the\n    operation's name to the data object and lets the object do the\n    work:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/2.4.3#footnote-5"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":195,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUAFtWAa04B9Auxp6TXVgBsTVAwHM+AGlABPQSPGgtlWnoAEyoGAAdWCjIAC24aMO9RX3FJaXp40ABebNAAIht7CPYKXKTk8rEAfiUyiuSALlAM7My8x1YnEyKS2rrxao9evtBG5pzc5xIqKSDOUuHk6oMKaJNmYu5mNi4+QQBqRhYOHi9+Ib7RsKzx1hInWznzuqXI1cjblG4PdwEnisbOOwLOw4mF3LlSIYSDQAO7pK4AWgR+iMpnMlmsnDsDmcuX4ql8Gl8qRkoBC4UiMVURPEhFIAV0BmMZgsVmcJluLnY7lYiV8-h0wVCESisXifIqJPh11a+SxhQ4PQWvmq7AUKJWJjINAY3F5f3KlxlbXZ3XmyqqEnVy1WDCoJD1ZwtYiNLTyk2mRFm5otqoNDSaVzduU5Dx9yuqrH9vgBQJoIPi4Mh0LhgdASJRzPRVgKOI6eIJ4hpYilZOFlOi1NqdO0gVArDCYVsHhMTk4JEBVDIoJ57CcEpLnCkpOiWKCer7-FB+PUNYZ9Fz3W4AC8B6WG02W22O+wu9w5dize5bKEKCv+DONAK6+1OkvV8IyuvG83W+3O93creuorcsfT+el5zoKKJOFMMw8A+PiDsO9Abq+24fvuHoQX+oAngwZ6rkB166KGkFrkOaT1i+W7vrun74WhGFYReVa4XBQRBFqlhNpwvArgAjO4y4oAOEhEaSTJoqymLYre3DRik8o-hsy6cfsAmHoqK58a4UliN+94KaABxaSpvF0bODGMEQABGLF6GxHHyTxfGPsSgn0MJLIYrmEkaUpCpyTpyKLgZamefpPmCMiwVYXxOH0iBehEPY2pWQ8NncaAhkOdJsGZiJGLspyknOqB4FepBOmKChxWqfw6kFfhXGKbVhlRbWughAAbpZ1lcXZ-Gli52YmLldz5c65WzHVoBgKNkGBTVdwPONyINZFVYgIGgKRIEJgUKwZkPO4YREBQ9YkEEoBthQuCrdmoAxA2FCAqA2CgJsnDzo9OA4GcJmsAwDA0N2xjfAJ2rsEEDA9U5oChCYJBxbY3BcCDYNOsM1SkLMBD2pwQT+gCRzw4D7ijqw47E+OiPxsjF7+tUZMI69lPg7j9a-f93CE6A21UPDFOg+DTVvS5227Tw-HaiQmHof92LCw8WToQBuTyLLnDyAWtQmbYNA0IYRBhOznAtilgMmPZ0HlOLksMOZKvyz9f0A4bJgpVz8Na2QMs7Q8Rl1FQBDPdD6OcJjHbjtbZkqxe6XDKWQch9jhblGooCcLYDCcNHfSW0dvOna09tsybKDuK7mw217nA+wspaBydwdY+TDOgyjBWWnHDeeTGnOsNz9NIzOdTFqAQ8mfa6cbCbxtO8XoCtXYRCV5nvjZ6ZEcV3brOO0bJc9270v2JHA8VH7AcMCY7eh2Xa8i1H5t9OnFBbbv3Du57IvVa3vgRFQII0Qb2+gG-iCIu7g562AXheD+n8Kil1fgfCuF4j5JxTmnDOd86gr1zhvB2-9TY717uHQ+ic+gn24LXDGDc+6U1vkMAAkHUB+T8CHl3frgeh0Cv49xBEA3BM8wEQKgRwuopdCEIKMuwsQydU7pyXgsRhpdc6gPnpXYhg8nhDxHtFOs5IRQxG4HofijlMp6GNLkLWOs9bhgWNUcxuswieUaCY4MY9ARKmdNUFxxQHF5AvtjNa7ANq6AzCrXIxCh6lh0RWKsK94jrUFE-EW8shYV24DOFe515axICfElW+5bGWLSXQSWB0jqtCyYEkgCT5pfglq49W30KDbRiE-FwFAPBhFMNtJw7hxb3RIBQcGmdSw8LaR0lpPS6B9IGQLECozOkdG4EESIRADFDMhtDHhSypAGJpqAOmWyVktzqLGYEizll6HBGZEm3cnBtlOgckxwT2nzKcOrK8WjdC9PbAMs52yIaZQ2Vw35hzdmlweUc-4Kc4wggeZc65XS7lknOemZEXz+kMDecBG8Ettq2HsIjbadw4ocB-GQQwHRRaZxMv5OS3gBKZTpquZQw8NYfPoOFc8wh6XEVLkyll-I2VZVcjmGSEleDuC8Fy4ZQLxWeHxPy8QJkpqcvQRlYiNo1hMA2FsY49NlK0v2J3cQOqdgcuwkghVYhvpzQIrImC6rXgckJZ8M1VUvKyVohazRzVnKomFQNDoHIhrcnrIYtVpIeFqjKo67UupeTuCjRqW09pHRetqKte0912AEFYGQDOFAaCc1HAJSWNB-YrAzgwDwmFOB6FZT6m5uw7XctJJEJpqwun7gJZyYl7A0ICDCbUEpXaZJHgVphEdlAe22A4HiBNo7FQWuHV+U0v5-wTrlFOolM6+1uvCkuw6yEOhFW9Ous8m7CVOF7XOwqnpZgHvPVRM9k7L3XrdfhB9R6syiXcricE3bt2zsEb4NwcqsgAD5G19R-aK5woHTifomH6-qg1Xn-teq+ndf4ngIx5IITIkHO3QZyoGvKIbeRV3taSXIQQ6BzCrLgMeuL8UYenSSiIZKKWpNUKPHFdhCg0B3aS8lbZUmZwzf0wEJA7B+DZQwetgtj13ttUIFt9BGXyu9W9BqdLSy8s0wpmKyHRKodw6GqVkNI14eZVpkCNLaJ2t6kpiCnLo2aljXqG1gFB0Coba6xzkNlUPjc8mh0Om02+cU9+tysGFmyslaqtTgCgUavWGeE1PABC6UONsE4kCjViA1e8EgnwgYCDTemsAmbAQ5rzZzQtFaS1HTLUWyt1b7p1si7MuLunIZttzR2hZuQwiCaA0oAzX9D0Hm8iUZ9w3Ru7vnfqigiHwrUUViNrDe7V3FEQ1NdbG7NuzrdVNRDT7x3nqO4t469wVFDqm8RkV4k-15Cu2hHD8X8OEYWY9sS9gxUSsQcQ5dv3UNoXm1h4D4gzO8gg1B4zJHOhkbw5RpLNG6OhNnIxvjeKugLeE1xmc+BcArz0C2BK1kYYrLMg9VotRfu-oWZxNAAAGdwWAACsRPMGcGtrYUpoBagk2YhTpK+jyesSSlTvQNPuSdzJx1KXsMZeAiJxyrgfOVvKCAA","body":"function apply_generic(op, arg) { return head(arg)(op); } "},{"body":"\n    Note that the value returned by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_from_real_imag"},{"body":"\n    is a\n    function—the internal","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"dispatch"},{"body":"function.\n    This is the\n    function\n    that is invoked when\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":"\n    requests an operation to be performed.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\n    This style of programming is called ","tag":"#text"},{"tag":"EM","child":[{"body":"message passing","tag":"#text"}]},{"body":".  The name\n    comes from the image that a data object is an entity that receives the\n    requested operation name as a \"","tag":"#text"},{"body":"message.","tag":"#text"},{"body":"\"  We have already seen\n    an example of message passing in section ","tag":"#text"},{"tag":"REF","body":"2.1.3","href":"/sicpjs/2.1.3"},{"body":",\n    where we saw how\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    could be defined with no data objects but only\n    functions.\n    Here we see that message passing is not a mathematical trick but a useful\n    technique for organizing systems with generic operations.  In the remainder\n    of this chapter we will continue to use data-directed programming, rather\n    than message passing, to discuss generic arithmetic operations.  In\n    chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":" we will return to message passing, and we will see that\n    it can be a powerful tool for structuring simulation programs.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 2.75","id":"#ex-2.75","child":[{"body":"\n    Implement the constructor\n     ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_from_mag_ang"},{"body":"\n    in message-passing style. This\n    function\n    should be analogous to the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_from_real_imag"},{"body":"function\n    given above.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":195,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAJgHQBY0GYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUAFtWAa04B9Auxp6TXVgBsTVAwHM+AGlABPQSPGgtlWnoAEyoGAAdWCjIAC24aMO9RX3FJaXp40ABebNAAIht7CPYKXKTk8rEAfiUyiuSALlAM7My8x1YnEyKS2rrxao9evtBG5pzc5xIqKSDOUuHk6oMKaJNmYu5mNi4+QQBqRhYOHi9+Ib7RsKzx1hInWznzuqXI1cjblG4PdwEnisbOOwLOw4mF3LlSIYSDQAO7pK4AWgR+iMpnMlmsnDsDmcuX4ql8Gl8qRkoBC4UiMVURPEhFIAV0BmMZgsVmcJluLnY7lYiV8-h0wVCESisXifIqJPh11a+SxhQ4PQWvmq7AUKJWJjINAY3F5f3KlxlbXZ3XmyqqEnVy1WDCoJD1ZwtYiNLTyk2mRFm5otqoNDSaVzduU5Dx9yuqrH9vgBQJoIPi4Mh0LhgdASJRzPRVgKOI6eIJ4hpYilZOFlOi1NqdO0gVArDCYVsHhMTk4JEBVDIoJ57CcEpLnCkpOiWKCer7-FB+PUNYZ9Fz3W4AC8B6WG02W22O+wu9w5dize5bKEKCv+DONAK6+1OkvV8IyuvG83W+3O93creuorcsfT+el5zoKKJOFMMw8A+PiDsO9Abq+24fvuHoQX+oAngwZ6rkB166KGkFrkOaT1i+W7vrun74WhGFYReVa4XBQRBFqlhNpwvArgAjO4y4oAOEhEaSTJoqymLYre3DRik8o-hsy6cfsAmHoqK58a4UliN+94KaABxaSpvF0bODGMEQABGLF6GxHHyTxfGPsSgn0MJLIYrmEkaUpCpyTpyKLgZamefpPmCMiwVYXxOH0iBehEPY2pWQ8NncaAhkOdJsGZiJGLspyknOqB4FepBOmKChxWqfw6kFfhXGKbVhlRbWughAAbpZ1lcXZ-Gli52YmLldz5c65WzHVoBgKNkGBTVdwPONyINZFVYgIGgKRIEJgUKwZkPO4YREBQ9YkEEoBthQuCrdmoAxA2FCAqA2CgJsnDzo9OA4GcJmsAwDA0N2xjfAJ2rsEEDA9U5oChCYJBxbY3BcCDYNOsM1SkLMBD2pwQT+gCRzw4D7ijqw47E+OiPxsjF7+tUZMI69lPg7j9a-f93CE6A21UPDFOg+DTVvS5227Tw-HaiQmHof92LCw8WToQBuTyLLnDyAWtQmbYNA0IYRBhOznAtilgMmPZ0HlOLksMOZKvyz9f0A4bJgpVz8Na2QMs7Q8Rl1FQBDPdD6OcJjHbjtbZkqxe6XDKWQch9jhblGooCcLYDCcNHfSW0dvOna09tsybKDuK7mw217nA+wspaBydwdY+TDOgyjBWWnHDeeTGnOsNz9NIzOdTFqAQ8mfa6cbCbxtO8XoCtXYRCV5nvjZ6ZEcV3brOO0bJc9270v2JHA8VH7AcMCY7eh2Xa8i1H5t9OnFBbbv3Du57IvVa3vgRFQII0Qb2+gG-iCIu7g562AXheD+n8Kil1fgfCuF4j5JxTmnDOd86gr1zhvB2-9TY717uHQ+ic+gn24LXDGDc+6U1vkMAAkHUB+T8CHl3frgeh0Cv49xBEA3BM8wEQKgRwuopdCEIKMuwsQydU7pyXgsRhpdc6gPnpXYhg8nhDxHtFOs5IRQxG4HofijlMp6GNLkLWOs9bhgWNUcxuswieUaCY4MY9ARKmdNUFxxQHF5AvtjNa7ANq6AzCrXIxCh6lh0RWKsK94jrUFE-EW8shYV24DOFe515axICfElW+5bGWLSXQSWB0jqtCyYEkgCT5pfglq49W30KDbRiE-FwFAPBhFMNtJw7hxb3RIBQcGmdSw8LaR0lpPS6B9IGQLECozOkdG4EESIRADFDMhtDHhSypAGJpqAOmWyVktzqLGYEizll6HBGZEm3cnBtlOgckxwT2nzKcOrK8WjdC9PbAMs52yIaZQ2Vw35hzdmlweUc-4Kc4wggeZc65XS7lknOemZEXz+kMDecBG8Ettq2HsIjbadw4ocB-GQQwHRRaZxMv5OS3gBKZTpquZQw8NYfPoOFc8wh6XEVLkyll-I2VZVcjmGSEleDuC8Fy4ZQLxWeHxPy8QJkpqcvQRlYiNo1hMA2FsY49NlK0v2J3cQOqdgcuwkghVYhvpzQIrImC6rXgckJZ8M1VUvKyVohazRzVnKomFQNDoHIhrcnrIYtVpIeFqjKo67UupeTuCjRqW09pHRetqKte0912AEFYGQDOFAaCc1HAJSWNB-YrAzgwDwmFOB6FZT6m5uw7XctJJEJpqwun7gJZyYl7A0ICDCbUEpXaZJHgVphEdlAe22A4HiBNo7FQWuHV+U0v5-wTrlFOolM6+1uvCkuw6yEOhFW9Ous8m7CVOF7XOwqnpZgHvPVRM9k7L3XrdfhB9R6syiXcricE3bt2zsEb4NwcqsgAD5G19R-aK5woHTifomH6-qg1Xn-teq+ndf4ngIx5IITIkHO3QZyoGvKIbeRV3taSXIQQ6BzCrLgMeuL8UYenSSiIZKKWpNUKPHFdhCg0B3aS8lbZUmZwzf0wEJA7B+DZQwetgtj13ttUIFt9BGXyu9W9BqdLSy8s0wpmKyHRKodw6GqVkNI14eZVpkCNLaJ2t6kpiCnLo2aljXqG1gFB0Coba6xzkNlUPjc8mh0Om02+cU9+tysGFmyslaqtTgCgUavWGeE1PABC6UONsE4kCjViA1e8EgnwgYCDTemsAmbAQ5rzZzQtFaS1HTLUWyt1b7p1si7MuLunIZttzR2hZuQwiCaA0oAzX9D0Hm8iUZ9w3Ru7vnfqigiHwrUUViNrDe7V3FEQ1NdbG7NuzrdVNRDT7x3nqO4t469wVFDqm8RkV4k-15Cu2hHD8X8OEYWY9sS9gxUSsQcQ5dv3UNoXm1h4D4gzO8gg1B4zJHOhkbw5RpLNG6OhNnIxvjeKugLeE1xmc+BcArz0C2BK1kYYrLMg9VotRQekaGtgNAAAGdwLO0AAHYieYM4NbWwpTQC1BJsxCnSV9Hk9YklKnegafck7mTjq0vYay8BET+z9N+creUEAA","body":"function make_from_mag_ang(r, a) {\n    function dispatch(op) {\n        return op === \"real_part\"\n            ? r * math_cos(a)\n            : op === \"imag_part\"\n            ? r * math_sin(a)\n            : op === \"magnitude\"\n            ? r\n            : op === \"angle\"\n            ? a\n            : error(op, \"unknown op -- make_from_real_imag\");\n    }\n    return dispatch;\n} "}]},{"tag":"EXERCISE","title":"Exercise 2.76","id":"#ex-2.76","child":[{"body":"\n    As a large system with generic operations evolves, new types of data\n    objects or new operations may be needed.  For each of the three\n    strategies—generic operations with explicit\n    \n    dispatch, data-directed\n    style, and message-passing-style—describe the changes that must be\n    made to a system in order to add new types or new operations.  Which\n    organization would be most appropriate for a system in which new types must\n    often be added?  Which would be most appropriate for a system in which new\n    operations must often be added?\n    ","tag":"#text"}],"solution":[{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Generic operations with explicit dispatch","tag":"#text"}]},{"body":": For every new\n\t  type, we need to touch every generic interface function, and add a\n\t  new case.\n\t","tag":"#text"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Data-directed style","tag":"#text"}]},{"body":": Here the implementation of the generic\n\t  interface functions can be neatly packaged in  \"","tag":"#text"},{"body":"install","tag":"#text"},{"body":"\"\n\t  libraries for each new type. We can also have \"","tag":"#text"},{"body":"install","tag":"#text"},{"body":"\"\n\t  libraries for new operations.\n\t","tag":"#text"}]},{"tag":"LI","child":[{"tag":"EM","child":[{"body":"Message-passing-style","tag":"#text"}]},{"body":": Like in the data-directed style, we\n\t  need to write a library for each new type. In this case, the library\n\t  consists of a dispatch function with a case for every generic\n\t  interface function.\n\t","tag":"#text"}]}]},{"body":"\n      Overall, it's probably best to use a data-directed style when we need to\n      frequently add new operations, and message-passing, when we frequently\n      add new types.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/2.4.3#footnote-link-1","child":[{"body":"\n\t    The name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"undefined"},{"body":"\n\t    is predeclared in any JavaScript implementation and should\n\t    not be used other than to refer to that primitive value.\n\t  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/2.4.3#footnote-link-2","child":[{"body":"We use the list\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"rectangular\")"},{"body":"\n    rather than the\n    string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"rectangular\""},{"body":"\n    to allow for the possibility of operations with multiple arguments, not\n    all of the same type.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/2.4.3#footnote-link-3","child":[{"body":"The type the\n    constructors are installed under needn't be a list because a\n    constructor is always used to make an object of one particular\n    type.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/2.4.3#footnote-link-4","child":[{"body":"\n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_generic"},{"body":"\n\tuses the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_in_underlying_javascript"},{"body":"\n\tgiven in section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":"\n\t  (footnote 2),\n\t\n\twhich takes two arguments, a function and a list, and \n\tapplies the function, using the elements in the list as arguments.\n      \n    For example,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":false,"body":"apply_in_underlying_javascript(sum_of_squares, list(1, 3))"},{"body":"\n    returns 10.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/2.4.3#footnote-link-5","child":[{"body":"One limitation of this organization is it permits only\n    generic\n    functions\n    of one argument.","tag":"#text"}]}]