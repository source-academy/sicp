[{"id":"/sicpjs/3.5.2","tag":"TITLE","body":"3.5.2  \n    Infinite Streams"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We have seen how to support the illusion of manipulating streams\n    as complete entities even though, in actuality, we compute only\n    as much of the stream as we need to access.  We can exploit this\n    technique to represent sequences efficiently as streams, even if the\n    sequences are very long.  What is more striking, we can use streams to\n    represent sequences that are infinitely long.  For instance, consider\n    the following definition of the stream of positive integers:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHNmAnAZwH0uKAhh2olWPAhxoBbABQkAlKADeuUGtAdmFIh3oAHAVQ5yANKBmKAvAD4GTNp178hIsROlzQAalABGefIA3LgAvvhkdPyg7lI82AAMoJZ2LOzcfILCjG6SsglBuMwAbgIANhmaArIxcfFmGPFBQA","body":"function integers_starting_from(n) {\n    return pair(n, () => integers_starting_from(n + 1));\n} "},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":5,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHNmAnAZwH0uKAhh2olWPAhxoBbABQkAlKADeuUGtAdmFIh3oAHAVQ5yANKBmKAvAD4GTNp178hIsROlzQAalABGefIA3LgAvvhkdPx2LOzcoJbRDtx8gsKMbpKy-sG4zABuAgA2KZoCsowxjmYYAAxBQA","body":"const integers = integers_starting_from(1); "},{"body":"\n    This makes sense because ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" will be a\n    pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is 1 and whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is a promise to produce the integers beginning with 2. This is an infinitely\n    long stream, but in any given time we can examine only a finite portion of\n    it.  Thus, our programs will never know that the entire infinite stream is\n    not there.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    Using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" we can define other infinite\n    streams, such as the stream of integers that are not divisible by 7:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0ATKgNyaoCMAbAKYAKAB4AaUAE8AlKADeoAE4CKRRfRGgApFNABeA6AAMAblABffEzadu-YQBZsEgOzSTQA","body":"function is_divisible(x, y) { return x % y === 0; } "},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":9,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHNmAnAZwH0uKAhh2olWPAhxoBbABQkAlKADeuUGtAdmFIh3oAHAVQ5yANKBmKAvAD4GTNp178hIsROlzQAalABGefIA3LgAvvhkdPx2LOzcoJbRDtx8gsKMbpKy-sGEpJS09FS8ACZUAG5FVABGADbMMgAeZgCeikoaWjr0DaAApKDN8ZYJAAyBoGG4ESRRJDR8zGXMM-Gg-JoCUuJUNSzGPTagAIQMJeWVtfVNoADs8iaq6k-PL68vjDGOQfiLAjUpG1kcwWSxmZmwKCCQA","body":"const no_sevens = stream_filter(x => ! is_divisible(x, 7),\n                                integers); "},{"body":"\n    Then we can find integers not divisible by 7 simply by accessing\n    elements of this stream:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHNmAnAZwH0uKAhh2olWPAhxoBbABQkAlKADeuUGtAdmFIh3oAHAVQ5yANKBmKAvAD4GTNp178hIsROlzQAalABGefIA3LgAvvhkdPx2LOzcoJbRDtx8gsKMbpKy-sGEpJS09FS8ACZUAG5FVABGADbMMgAeZgCeikoaWjr0DaAApKDN8ZYJAAyBoGG4ESRRJDR8zGXMM-Gg-JoCUuJUNSzGPTagAIQMJeWVtfVNoADs8iaq6k-PL68vjDGOQfjrzJs8mgIcnmXEWyy4Zl8IxGQSAA","body":"stream_ref(no_sevens, 100); ","output":"117"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    In analogy with ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":", we can define the\n    infinite stream of Fibonacci numbers:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AqgIwHMBTEgCgEMAaUJgEpQAb1ygJoAE5sKRKfQAO3KlJ79OwgLwA+Bs3Zcm-bqADUAwYIDcuAL74ydAM4V9TZ6C3vDnAAz8AIw2+GwAbtwANgD6rjLcALacjB78GH42QA","body":"function fibgen(a, b) {\n    return pair(a, () => fibgen(b, a + b));\n}\n\nconst fibs = fibgen(0, 1); "},{"body":"The constant ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibs"},{"body":"\n    is a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is 0 and whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is a promise to evaluate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibgen(1, 1)"},{"body":".\n    When we evaluate this delayed\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibgen(1, 1)"},{"body":",\n    it will produce a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is 1 and whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is a promise to evaluate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibgen(1, 2)"},{"body":",\n    and so on.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    For a look at a more exciting infinite stream, we can generalize the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"no_sevens"},{"body":"\n    example to construct the infinite stream of prime\n    numbers, using a method known as the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"sieve of\n    Eratosthenes","tag":"#text"}]},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.5.2#footnote-1"},{"body":"\n    We start with the integers beginning with 2, which is the first prime.\n    To get the rest of the primes, we start by filtering the multiples of\n    2 from the rest of the integers.  This leaves a stream beginning with\n    3, which is the next prime.  Now we filter the multiples of 3 from the\n    rest of this stream.  This leaves a stream beginning with 5, which is\n    the next prime, and so on.  In other words, we construct the primes by\n    a sieving process, described as follows: To sieve a stream\n    S,\n    form a stream whose first element is the first element of\n    S and\n    the rest of which is obtained by filtering all multiples of the\n    first element of S out of the rest\n    of S and sieving the result. This\n    process is readily described in terms of stream operations:\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":7,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0ATKgNyaoCMAbAKYAKAB4AaUAE8AlKADeoAE4CKRRfRGgApFNABeA6AAMAblABffMXLU6DEhQEBzAYpaMKAQ0XUST5gSKNAC2QiSycrig0UoqavQADp5UimESQrJ6AHz2ji5uzB7evv6BIWGgANSgAIzS0ia4loSklLT0jFQCHMIeyp7BEVExyqrqoEkpQgAWAp6sQn1zg2LDMesb0Rn6OZ3dvRT9wQFUfI6pa5tX19ea2aAAhAws7Fyd-MLioLPzi4fL9VWN2BIOiSwGzC8pz+R3q9UaljIdA8E0UVGCAkY+lAex6QioDmcrncXh8BNKQVC2Hh+G6nj4hX+AyECTRGMYEgwRgaQA","body":"function sieve(stream) {\n    return pair(head(stream),\n                () => sieve(stream_filter(\n                                x => ! is_divisible(x, head(stream)),\n                                stream_tail(stream))));\n}\nconst primes = sieve(integers_starting_from(2)); "},{"body":"\n    Now to find a particular prime we need only ask for it:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":15,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KgZwH0ATKgNyaoCMAbAKYAKAB4AaUAE8AlKADeoAE4CKRRfRGgApFNABeA6AAMAblABffMXLU6DEhQEBzAYpaMKAQ0XUST5gSKNAC2QiSycrig0UoqavQADp5UimESQrJ6AHz2ji5uzB7evv6BIWGgANSgAIzS0ia4loSklLT0jFQCHMIeyp7BEVExyqrqoEkpQgAWAp6sQn1zg2LDMesb0Rn6OZ3dvRT9wQFUfI6pa5tX19ea2aAAhAws7Fyd-MLioLPzi4fL9VWN2BIOiSwGzC8pz+R3q9UaljIdA8E0UVGCAkY+lAex6QioDmcrncXh8BNKQVC2Hh+HBx2UBCECTRGMYEgwRgaQA","body":"stream_ref(primes, 50); ","output":"233"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    It is interesting to contemplate the signal-processing system set up\n    by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sieve"},{"body":", shown in the\n    \"","tag":"#text"},{"body":"Henderson diagram","tag":"#text"},{"body":"\" in\n    figure ","tag":"#text"},{"tag":"REF","body":"3.31","href":"/sicpjs/3.5.2#fig-3.31"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/3.5.2#footnote-2"},{"body":" The input stream feeds into an\n    \"","tag":"#text"},{"body":"un","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"er","tag":"#text"},{"body":"\"\n    that separates the first element of the stream from the rest of the stream.\n    The first element is used to construct a divisibility filter, through\n    which the rest is passed, and the output of the filter is fed to\n    another sieve box.  Then the original first element is\n    \n\tadjoined to the output of the internal sieve\n\tto form the output stream.\n      \n    Thus, not only is the stream infinite, but the signal processor is also\n    infinite, because the sieve contains a sieve within it.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-35.svg","id":"#fig-3.31","captionHref":"/sicpjs/3.5.2#fig-3.31","captionName":"Figure 3.31 ","captionBody":[{"body":"The prime sieve viewed as a signal-processing system.\nEach solid line represents a\n    stream of values being transmitted.  The dashed line from the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    to the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"filter"},{"body":" indicates that this is a single\n    value rather than a stream.\n          ","tag":"#text"}]}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Defining streams implicitly","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibs"},{"body":" streams above were defined by specifying\n    \"","tag":"#text"},{"body":"generating","tag":"#text"},{"body":"\"functions\n    that explicitly compute the stream elements one by one. An alternative way\n    to specify streams is to take advantage of delayed evaluation to define\n    streams implicitly. For example, the following\n    statement\n    defines the\n    stream ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ones"},{"body":" to be an infinite stream of ones:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuBjAewDsBnAF1FIFMzQBeUABwEMBLAJwAoBGAGlDcAlIwB81EnWEBufDQBurADYB9SpxqsAtt1plBGAAyygA","body":"const ones = pair(1, () => ones); "},{"body":"\n    This works much like the declaration of a recursive\n    function:","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ones"},{"body":" is a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is 1 and whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    is a promise to evaluate ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ones"},{"body":".  Evaluating the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    gives us again a 1 and a promise to evaluate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ones"},{"body":", and so on.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    We can do more interesting things by manipulating streams with\n    operations such as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":",\n    which produces the elementwise sum of two given streams:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/3.5.2#footnote-3"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":25,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3VsDgAaUEMARgPDbB5eWu9G0CpDdRJbcTZjngAyN9v7x-Fns65JhEAPygH7iQHhABcXweTxeRx4AB9ETCwS9zhCxCCmPJ5DR5GwwQcAESkJgAD02TEo7lk8gA5kRmCRpABaVmHFYyNYbbbYYkAurQzYyKgEghsAAWpXhXAO0pU6K4csxRWYrDYAV0IWWiR5Wx2+05evUFFFfwRe1V-RtEV1q1N5qVyq4M3wnAWdFkymU6nt3MM8NO5z6QmuQ39+r5mvJJ1A5JDwXjR1AAGp49hTnH-m7cGQ6MtQHQmIZdKARWK2HGtUni4ZXXmC9IKAB3GilvQVgmZmKBEKt9sN-MkQsUSWKEtllS+yOBusHAf1sxMABucj9XIYbDHE8MBwwAAZXUA","body":"function add_streams(s1, s2) {\n    return stream_map_2((x1, x2) => x1 + x2, s1, s2);\n} "},{"body":"\n    Now we can define the integers as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":31,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3VsDgAaUEMARgPDbB5eWu9G0CpDdRJbcTZjngAyN9v7x-Fns65JhEAPygH7iQHhABcXweTxeRx4AB9ETCwS9zhCxCCmPJ5DR5GwwQcAESkJgAD02TEo7lk8gA5kRmCRpABaVmHFYyNYbbbYYkAurQzYyKgEghsAAWpXhXAO0pU6K4csxRWYrDYAV0IWWiR5Wx2+05evUFFFfwRe1V-RtEV1q1N5qVyq4M3wnAWdFkymU6nt3MM8NO5z6QmuQ39+r5mvJJ1A5JDwXjR1AAGp49hTnH-m7cGQ6MtQHQmIZdKARWK2HGtUni4ZXfh8yRC64KEx6TjS3oKwTq4EQipfZHA3WDq3253lWZcEwAG5yP1chhsccd+SGA4YAAMrqAA","body":"const integers = pair(1, () => add_streams(ones, integers)); "},{"body":"\n    This defines ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" to be a stream whose\n    first element is 1 and the rest of which is the sum of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ones"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":".\n    Thus, the second element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" is 1 plus\n    the first element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":", or 2; the third\n    element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" is 1 plus the second\n    element of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":", or 3; and so on.  This\n    definition works because, at any point, enough of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" stream has been generated so that we\n    can feed it back into the definition to produce the next integer.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    We can define the Fibonacci numbers in the same style:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":29,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3VsDgAaUEMARgPDbB5eWu9G0CpDdRJbcTZjngAyN9v7x-Fns65JhEAPygH7iQHhABcXweTxeRx4AB9ETCwS9zhCxCCmPJ5DR5GwwQcAESkJgAD02TEo7lk8gA5kRmCRpABaVmHFYyNYbbbYYkAurQzYyKgEghsAAWpXhXAO0pU6K4csxRWYrDYAV0IWWiR5Wx2+05evUFFFfwRe1V-RtEV1q1N5qVyq4M3wnAWdFkymU6nt3MM8NO5z6QmuQ39+r5mvJJ1A5JDwXjR1AAGp49hTnH-m7cGQ6Mt9FQAEaGXSgEVitgABittuEWqTlYJJ2t9YbgRCKl9kcDkcdVGeLlLKvbY7aw8MLrMuCYADc5H6uQwOCXDAdsNXXUA","body":"const fibs = pair(0,\n                  () => pair(1,\n                             () => add_streams(stream_tail(fibs),\n                                               fibs))); "},{"body":"\n    This definition says that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibs"},{"body":" is a stream\n    beginning with 0 and 1, such that the rest of the stream can be generated\n    by adding ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibs"},{"body":" to itself shifted by one place:\n    ","tag":"#text"},{"body":"\n\\[\n\\begin{array}{ccccccccccccl}\n  &   & 1 & 1 & 2 & 3 & 5 &  8 & 13 & 21 & \\ldots & = & \\texttt{stream}\\mathtt{\\_}\\texttt{tail(fibs)} \\\\\n  &   & 0 & 1 & 1 & 2 & 3 &  5 &  8 & 13 & \\ldots & = & \\texttt{fibs} \\\\ \\hline\n0 & 1 & 1 & 2 & 3 & 5 & 8 & 13 & 21 & 34 & \\ldots & = & \\texttt{fibs}\n\\end{array}\n\\]\n\t","tag":"LATEX"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_stream"},{"body":"\n\tis also useful\n      \n    in formulating such stream definitions. This multiplies each item in a\n    stream by a given constant:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AZzIEMAbAUwH0GKAnd5gFsAFD35CANKALNKNXgEpQAb1yh1ofhSK96YgYM6DmAB2EAPUAF4AfKEsAqabIryJajZ6-eN+oQoBuXABffDI6HlAKAHcaBmtQE2YqXmFsKWElWyjYhkDccJJIhipzdnirRhYObj4DYRi4qRR89gA3NlrxERKyhikMAAZAoA","body":"function scale_stream(stream, factor) {\n    return stream_map(x => x * factor,\n                      stream);\n} "},{"body":"\n    For example,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":6,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AZzIEMAbAUwH0GKAnd5gFsAFD35CANKALNKNXgEpQAb1yh1ofhSK96YgYM6DmAB2EAPUAF4AfKEsAqabIryJajZ6-eN+oQoBuXABffDI6HlAAExoiACMOa1ATZipeYQBGKWElW0YWDm4+A2EY+I4pbAVA-HYANzYi8REyhPYpDAAGQKA","body":"const double = pair(1, () => scale_stream(double, 2)); "},{"body":"\n    produces the stream of powers of 2:\n    ","tag":"#text"},{"body":"$1, 2, 4, 8, 16, 32,$","tag":"LATEX"},{"body":"….\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    An alternate definition of the stream of primes can be given by\n    starting with the integers and filtering them by testing for\n    primality.  We will need the first prime, 2, to get started:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":11,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSgAIz8-KqRWjG6+gbV7FSFPKXC5WJzOnGJDdUMZeIn7p70zGxc3AAWnKxG3IdToO0kW6efoAD8oBTsRE4Hy+JwAXHpDCZzAwrLZGqA7g8nkd+MCQWJfgRWNYGED0Z9wVR9twMlxWIUDJkqNZkVNVCcNCdKl4iaknis1kcZvgyHQMqBlqtOAxAgK6g1sPY0fiTs1Au1SfcKQRqcTFoK1o5pTKdfj4okUmkDBksvEBgViigptN8JxTNjjf8leyhQxHBgQtMgA","body":"const primes = pair(2,\n                    () => stream_filter(is_prime, \n                                        integers_starting_from(3))); "},{"body":"\n    This definition is not so straightforward as it appears, because we will\n    test whether a number ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is prime by checking\n    whether ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is divisible by a prime (not by just\n    any integer) less than or equal to ","tag":"#text"},{"body":"$\\sqrt{n}$","tag":"LATEX"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":11,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUFQYB9ACZUAbvqoAjADY9eAGlABPQUImcpMpaACkz0AC8QaAADMqgGoSklLT0VCQUnADmnOyGDBQc1CRJBgTsNAC23CSuouKS0vQADqxU7CWO3IIBAHx6Ccmp6Zns2bn5RSWgANSgAIz8-KqRWjG6+gbV7FSFPKXC5WJzOnGJDdUMZeIn7p70zGxc3AAWnKxG3IdToO0kW6efoAD8oBTsRE4Hy+JwAXHpDCZzAwrLZGqA7g8nkd+MCQWJfgRWNYGED0Z9wVR9twMlxWIUDJkqNZkVNVCcNCdKl4iaknis1kcZrgyHQMqBlqtOAxAgK6g1sPY0fiTs1Au1SfcKQRqcTpTKNYtBWtHOqNfj4okUmkDBksvEBgViigpnr8dN8FqOTxxiE3SEbcogA","body":"function is_prime(n) {\n    function iter(ps) {\n        return square(head(ps)) > n\n               ? true\n               : is_divisible(n, head(ps))\n               ? false\n               : iter(stream_tail(ps));\n    }\n    return iter(primes);\n} "},{"body":"\n    This is a recursive definition, since ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"primes"},{"body":"\n    is defined in terms of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_prime"},{"body":"\n    predicate, which itself uses the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"primes"},{"body":" stream.\n    The reason this\n    function\n    works is that, at any point, enough of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"primes"},{"body":" stream has been generated to test the\n    primality of the numbers we need to check next.  That is, for every\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" we test for primality, either\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is not prime (in which case there is a prime\n    already generated that divides it) or ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is\n    prime (in which case there is a prime already generated—i.e., a\n    prime less than ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"—that is greater than\n    ","tag":"#text"},{"body":"$\\sqrt{n}$","tag":"LATEX"},{"body":").","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/3.5.2#footnote-4"}]},{"tag":"EXERCISE","title":"Exercise 3.53","id":"#ex-3.53","child":[{"body":"\n    Without running the program, describe the elements of the\n    stream defined by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":29,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AWwFMGaAKYkgSlAG8BIUENC5hoADZMKoAIbiATkxkATAJ4B9eaVABeUATkBnJgG5RwydMWGi46XtLKmBKiSbKzYxRSLz6bHh0APj5zMXCxKgJQNgBCOUUVDS1uUIj0iOtbe31SAM8MwtkFJTVNbT0KLVMwosypX3osuwK6oQBfUCZxYzS2+p8-UGaKVrb22vT2swnCUkpaekMqpQZ1BhkAB3VsDgAaUEMARgPDbB5eWu9G0CpDdRJbcTZjngAyN9v7x-Fns65JhEAPygH7iQHhABcXweTxeRx4AB9ETCwS9zhCxCCmPJ5DR5GwwQcAESkJgAD02TEo7lk8gA5kRmCRpABaVmHFYyNYbbbYYkAurQzYyKgEghsAAWpXhXAO0pU6K4csxRWYrDYAV0IWWiR5Wx2+05evUFFFfwRe1V-RtEV1q1N5qVyq4M3wnAWdFkymU6nt3MM8NO5z6QmuQ39+r5mvJJ1A5JDwXjR1AAGp49hTnH-m7cGQ6MtDrpQCKxWw41qkypfZHA4ZTsqzLgmAA3OR+rkMF4HDAABldQA","body":"const s = pair(1, () => add_streams(s, s)); "}],"solution":[{"body":"\n      This program defines ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"s"},{"body":" to be a stream whose\n      first element is 1 and each next element is the double of the stream's previous\n      element. The elements of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"s"},{"body":" are therefore\n      1, 2, 4, 8, 16,... .\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.54","id":"#ex-3.54","child":[{"body":"\n    Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mul_streams"},{"body":",\n    analogous to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":",\n    that produces the elementwise product of its two input streams. Use this\n    together with the stream of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integers"},{"body":" to\n    complete the following definition of the stream whose\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th element (counting from 0) is\n    ","tag":"#text"},{"body":"$n+1$","tag":"LATEX"},{"body":" factorial:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nconst factorials = pair(1, () => mul_streams($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$));\n      "}],"solution":[{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"const factorials = pair(1, () => mul_streams(factorials, integers));"}]},{"tag":"EXERCISE","title":"Exercise 3.55","id":"#ex-3.55","child":[{"body":"\n    Define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"partial_sums"},{"body":"\n    that takes as argument a stream ","tag":"#text"},{"body":"$S$","tag":"LATEX"},{"body":" and returns\n    the stream whose elements are\n    ","tag":"#text"},{"body":"$S_0, S_0+S_1, S_0+S_1+S_2,$","tag":"LATEX"},{"body":"….\n    For example,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"partial_sums(integers)"},{"body":"\n    should be the stream ","tag":"#text"},{"body":"$1, 3, 6, 10, 15,\\ldots$","tag":"LATEX"},{"body":".\n\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":19,"eval":false,"body":"function partial_sums(s) {\n    return pair(head(s),\n                () => add_streams(stream_tail(s),\n                                  partial_sums(s)));\n}"}]},{"tag":"EXERCISE","title":"Exercise 3.56","id":"#ex-3.56","child":[{"body":"\n    A famous problem, first raised by\n    \n    R. Hamming, is to enumerate, in ascending order with no repetitions, all\n    positive integers with no prime factors other than 2, 3, or 5.  One obvious\n    way to do this is to simply test each integer in turn to see whether it has\n    any factors other than 2, 3, and 5.  But this is very inefficient, since, as\n    the integers get larger, fewer and fewer of them fit the requirement.  As\n    an alternative, let us call the required stream of numbers\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"S"},{"body":" and notice the following facts about it.\n    ","tag":"#text"},{"tag":"UL","child":[{"tag":"LI","child":[{"tag":"JAVASCRIPTINLINE","body":"S"},{"body":" begins with 1.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        The elements of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_stream(S, 2)"},{"body":"\n\tare also elements of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"S"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        The same is true for\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_stream(S, 3)"},{"body":"\n        and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scale_stream(S, 5)"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n        These are all the elements of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"S"},{"body":".\n      ","tag":"#text"}]}]},{"body":"\n    Now all we have to do is combine elements from these sources. For this we\n    define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"merge"},{"body":" that combines two ordered\n    streams into one ordered result stream, eliminating repetitions:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":10,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHNmAnAZwH0uKAhh2olWPAhxoBbABQkAlKADeuUGtAdmFIh3oAHAVQ5yANKBmKAvAD4GTNp178hIsROlzQAalABGefIA3LgAvvjE5NR0oFxkAgA2zHwUmgKy-KlSZgQClDQciirqGlo69BnMaTxSAnoyAB6gNqCNAFSgOXkcJqrFff39FWlBoeGklLT0UpzsMly+ZlzYhb1qVATmVLwkRPHxc-4rAyXaujHYwcUhoMzxXMwMGzJbPDt7c8tHA5qn5b6X6mut3uylWfTIdH4MV8AAtKgATJqgOECeEHEbHCEkKFLFGIyzIhEfDHfUpneZ40AAHnOeLBx3UAH5QAYjAc8WYLE1bNMOLMhlIeIIqPt5vJFp96QzQAAuaGU2y4hFShnM1nGJWozlWHkzZgHRYpSqC4Wiz7yFXHOXq9kI7Xc0C8-lGqqm9GGzJCwxmgIktRhMK4LFQvQ0LhUagANySjBY7G4SNjDm4yRcjDcklk-mCwYojt21D0iV4NAIQphmgeBNiCSSApkofDUZj9njXDMKCCAEgg5C81IC1Qi8wS2WCFRo0ia4lkpkG2GIxOW3HHGYMCNc6AKBXmCOeAISPDxEuuEinfqB-FC8WeKXy5WzJfr3u7+PoyNmJGErPjTJt5XeAPI83xHNcAAYgiAA","body":"function merge(s1, s2) {\n    if (is_null(s1)) {\n        return s2;\n    } else if (is_null(s2)) {\n        return s1;\n    } else {\n        const s1head = head(s1);\n        const s2head = head(s2);\n        return s1head < s2head\n               ? pair(s1head, () => merge(stream_tail(s1), s2))\n               : s1head > s2head\n               ? pair(s2head, () => merge(s1, stream_tail(s2)))\n               : pair(s1head, () => merge(stream_tail(s1), stream_tail(s2)));\n    }\n} "},{"body":"\n    Then the required stream may be constructed with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"merge"},{"body":", as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nconst S = pair(1, () => merge($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$));\n      "},{"body":"\n    Fill in the missing expressions in the places marked\n    〈??〉 above.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":26,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0AWwFMAnAcyYAoBnARgBpQ3bAEpQAb1yhpoKgVCcq3APokiAG3U9eIsZJkHQLJhSIt6wgNxSZAX1BN13JrPmKVazT1F6bhoyZmFrzWBvaOzhJ+hmR03BRCvAAWTACGACagALygKRnaIqH+oLEk8ULYeZk5Vd6F0QbGpuaJVaAAPBVVDcUyAPygAA6pVCzaVYKcYlkAfIysHDwUxqkMyhQjWnwigsK6Pb2gAFytaZlzwt2H-gPDo94TCtNzzOxcfLvLaWsbVFs+IgOvROdzGfEeU2yLwW7y+q3WmwKnxWP0Re10RWktlw2MIpEotHoVBIFCYHBYKniqRY1BIbGUBBYNAYnBIvkagRaoNZk2eshJZNYlI2NOJ9MZzNZoAA1KAdPVccRyNQ6EIyKl1ExlPEUUsUYICKlKDQWOyZE0gkI4WsGKlBpwAB5Q0BOgBUoENxpY-CB1wMOu+CvwpXKyBy3IET2dr0W3HVmu11s44EEoh9fozxRj73jWoDq2TghQO19mbLcY1eaTKdAGF0GPwTAAbhrE7qaxgAAyFIA","body":"const S = pair(1, () => merge(scale_stream(S, 2),\n                              merge(scale_stream(S, 3),\n                                    scale_stream(S, 5)))); "}]},{"tag":"EXERCISE","title":"Exercise 3.57","id":"#ex-3.57","child":[{"body":"\n\tHow many additions are performed when we compute the\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th Fibonacci number using the declaration of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fibs"},{"body":" based on the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":" function?\n\tShow that this number is exponentially greater than the number\n\tof additions performed if \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":" had used the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2_optimized"},{"body":"\n\tdescribed in exercise ","tag":"#text"},{"tag":"REF","body":"3.50","href":"/sicpjs/3.5.1#ex-3.50"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/3.5.2#footnote-5"}]},{"tag":"EXERCISE","title":"Exercise 3.58","id":"#ex-3.58","child":[{"body":"\n    Give an interpretation of the stream computed by the \n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":false,"body":"function expand(num, den, radix) {\n    return pair(math_trunc((num * radix) / den),\n                () => expand((num * radix) % den, den, radix));\n}"},{"body":"\n\twhere\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"math_trunc"},{"body":"\n\tdiscards the fractional part of its argument, here the remainder\n\tof the division.\n      \n    What are the successive elements produced by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"expand(1, 7, 10)"},{"body":"?\n      \n    What is produced by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"expand(3, 8, 10)"},{"body":"?\n      ","tag":"#text"}],"solution":[{"body":"\n    This function will produce a infinite stream of numbers which represent the digits of \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"num / den"},{"body":"\n    in base-","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"radix"},{"body":"\n    system.\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"expand(1, 7, 10)"},{"body":"\n    will produce a infinite stream of numbers: 1, 4, 2, 8, 5, 7, 1, 4, 2, 8, 5, 7... While \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"expand(3, 8, 10)"},{"body":"\n    will produce a stream of numbers: 3, 7, 5, 0, 0, 0, 0 ...\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 3.59","id":"#ex-3.59","child":[{"body":"\n  In section ","tag":"#text"},{"tag":"REF","body":"2.5.3","href":"/sicpjs/2.5.3"},{"body":" we saw how to implement a\n  polynomial arithmetic system representing polynomials as lists of\n  terms.  In a similar way, we can work with\n  ","tag":"#text"},{"tag":"EM","child":[{"body":"power series","tag":"#text"}]},{"body":", such as\n  ","tag":"#text"},{"body":"\n    \\[\n    \\begin{array}{rll}\n    e^{x} &=&\n    1+x+\\dfrac{x^{2}}{2}+\\dfrac{x^{3}}{3\\cdot2}\n                       +\\dfrac{x^{4}}{4\\cdot 3\\cdot 2}+\\cdots, \\\\[9pt]\n    \\cos x &=& 1-\\dfrac{x^{2}}{2}+\\dfrac{x^{4}}{4\\cdot 3\\cdot 2}-\\cdots, \\\\[9pt]\n    \\sin x &=& x-\\dfrac{x^{3}}{3\\cdot 2}\n                          +\\dfrac{x^{5}}{5\\cdot 4\\cdot 3\\cdot 2}- \\cdots,\n    \\end{array}\n    \\]\n  ","tag":"LATEX"},{"body":"\n  represented as infinite streams.\n  We will represent the series\n  ","tag":"#text"},{"body":"$a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \\cdots$","tag":"LATEX"},{"body":"\n  as the stream whose elements are the coefficients\n  ","tag":"#text"},{"body":"$a_0, a_1, a_2, a_3,$","tag":"LATEX"},{"body":"….\n  ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n      The\n      \n      integral of the series\n      ","tag":"#text"},{"body":"$a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \\cdots$","tag":"LATEX"},{"body":"\n      is the series\n      ","tag":"#text"},{"body":"\n\t\\[\n\t\\begin{array}{l}\n         c + a_0 x + \\frac{1}{2}a_1 x^2 + \\frac{1}{3}a_2 x^3 + \\frac{1}{4}a_3\n         x^4 + \\cdots\n\t \\end{array}\n\t \\]\n      ","tag":"LATEX"},{"body":"\n      where ","tag":"#text"},{"body":"$c$","tag":"LATEX"},{"body":" is any constant.\n      Define a\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integrate_series"},{"body":"\n      that takes as input a stream\n      ","tag":"#text"},{"body":"$a_0, a_1, a_2,\\ldots$","tag":"LATEX"},{"body":" representing\n      a power series and returns the stream\n      ","tag":"#text"},{"body":"$a_0, \\frac{1}{2}a_1, \\frac{1}{3}a_2,\\ldots$","tag":"LATEX"},{"body":"\n      of coefficients of the nonconstant terms of the integral of the series.\n      (Since the result has no constant term, it doesn't represent a power\n      series; when we use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integrate_series"},{"body":",\n\t\n      we will\n      \n\t  use\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":" to\n\t  adjoin the appropriate constant to the beginning\n\t  of the stream.)\n\t","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n      The function ","tag":"#text"},{"body":"$x\\mapsto e^x$","tag":"LATEX"},{"body":" is its own\n      derivative.  This implies that ","tag":"#text"},{"body":"$e^x$","tag":"LATEX"},{"body":" and the\n      integral of ","tag":"#text"},{"body":"$e^x$","tag":"LATEX"},{"body":" are the\n      same series, except for the constant term, which is\n      ","tag":"#text"},{"body":"$e^0 = 1$","tag":"LATEX"},{"body":". Accordingly, we can generate the\n      series for ","tag":"#text"},{"body":"$e^x$","tag":"LATEX"},{"body":" as\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":false,"body":"const exp_series = pair(1, () => integrate_series(exp_series));"},{"body":"\n      Show how to generate the series for sine and cosine, starting from the\n      facts that the derivative of sine is cosine and the derivative of cosine\n      is the negative of sine:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nconst cosine_series = pair(1, $\\langle{}$??$\\rangle$);\nconst sine_series = pair(0, $\\langle{}$??$\\rangle$);\n\t"}]}]}],"solution":[{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQFY0CYBQuAzAVwDsBjAFwEsB7E0KkigUwHMAnAQxYH0BnZuyrM+ACj4BKUAG9coeaGLlqdUAAtmAGwAOg8XwA0DFuymyFF0O2YUi7ets5V2ojZwAm+qWComjoqQBeAD51LV0XPgprTgBbHgonTS8jX0FQAGpQAEYJCQBuOQUAXyL5a1t7MJ09QxyC3FLcMjoo0Ba+fkFhPlBA0EdnUWz-INDGFg5uZi6hEVEyy0GXAAYjRcsFAL7QqJj42M5tBc3T09EADzHQUQBaK-Wzp4UJti5eATmxDtmevP-Cs9ns1WhRQHxGL8RH0Bk5VqMdgwmG9plCxBsFMthgYMZttiEkZN3jNPj0TkCLHtmHEeIdjhdEfcjBCSGiJLinnkOXl8kA","body":"function integrate_series(s) {\n    function helper(ss, iter) {\n        return pair(head(ss) / iter, () => helper(stream_tail(ss), iter + 1));\n    }\n    return helper(s, 1);\n}\n\nconst cos_series = pair(1, () => integrate_series(\n        pair(0, \n            () => stream_map(\n                    (x) => (-x), \n                    integrate_series(cos_series)))));\n                    \nconst sin_series = pair(0, () => integrate_series(\n        pair(1,\n            () => integrate_series(\n                stream_map(x => -x, sin_series)\n                ))\n        )); "}]},{"tag":"EXERCISE","title":"Exercise 3.60","id":"#ex-3.60","child":[{"body":"\n    With\n     \n    power series represented as streams of coefficients as in\n    exercise ","tag":"#text"},{"tag":"REF","body":"3.59","href":"/sicpjs/3.5.2#ex-3.59"},{"body":", adding series is implemented\n    by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_streams"},{"body":".\n      \n    Complete the declaration of\n    the following\n    function\n    for multiplying series:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction mul_series(s1, s2) {\n    pair($\\langle{}$??$\\rangle$, () => add_streams($\\langle{}$??$\\rangle$, $\\langle{}$??$\\rangle$));\n}\n      "},{"body":"\n\n    You can test your\n    function\n    by verifying that ","tag":"#text"},{"body":"$sin^2 x + cos^2 x = 1$","tag":"LATEX"},{"body":",\n    using the series from exercise ","tag":"#text"},{"tag":"REF","body":"3.59","href":"/sicpjs/3.5.2#ex-3.59"},{"body":".\n  ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":25,"eval":false,"body":"function mul_series(s1, s2) {\n    return pair(head(s1) * head(s2), \n        () => add_streams(\n                mul_series(stream_tail(s1), s2), \n                scale_stream(stream_tail(s2), head(s1))));\n}"}]},{"tag":"EXERCISE","title":"Exercise 3.61","id":"#ex-3.61","child":[{"body":"\n    Let ","tag":"#text"},{"body":"$S$","tag":"LATEX"},{"body":" be a power series\n    (exercise ","tag":"#text"},{"tag":"REF","body":"3.59","href":"/sicpjs/3.5.2#ex-3.59"},{"body":")\n    whose constant term is 1.  Suppose we want to find the power series\n    ","tag":"#text"},{"body":"$1/S$","tag":"LATEX"},{"body":", that is, the series\n    ","tag":"#text"},{"body":"$X$","tag":"LATEX"},{"body":" such that\n    ","tag":"#text"},{"body":"$S\\cdot X= 1$","tag":"LATEX"},{"body":".\n    Write ","tag":"#text"},{"body":"$S=1+S_R$","tag":"LATEX"},{"body":" where\n    ","tag":"#text"},{"body":"$S_R$","tag":"LATEX"},{"body":" is the part of\n    ","tag":"#text"},{"body":"$S$","tag":"LATEX"},{"body":" after the constant term. Then we can solve\n    for ","tag":"#text"},{"body":"$X$","tag":"LATEX"},{"body":" as follows:\n    \\[\n    \\begin{array}{rll}\n    S \\cdot X &=& 1 \\\\\n    (1+S_R)\\cdot X &=& 1 \\\\\n    X + S_R \\cdot X &=& 1 \\\\\n    X &=& 1 - S_R \\cdot X\n    \\end{array}\n    \\]\n    In other words, ","tag":"#text"},{"body":"$X$","tag":"LATEX"},{"body":" is the power series whose\n    constant term is 1 and whose higher-order terms are given by the negative of\n    ","tag":"#text"},{"body":"$S_R$","tag":"LATEX"},{"body":" times ","tag":"#text"},{"body":"$X$","tag":"LATEX"},{"body":".\n    Use this idea to write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"invert_unit_series"},{"body":"\n    that computes ","tag":"#text"},{"body":"$1/S$","tag":"LATEX"},{"body":" for a power series\n    ","tag":"#text"},{"body":"$S$","tag":"LATEX"},{"body":" with constant term 1. You will need to use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"mul_series"},{"body":"\n    from exercise ","tag":"#text"},{"tag":"REF","body":"3.60","href":"/sicpjs/3.5.2#ex-3.60"},{"body":".\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":26,"eval":false,"body":"function invert_unit_series(s) {\n    return pair(1, () => stream_map(x => -x, \n                  mul_series(stream_tail(s), invert_unit_series(s))));\n}"}]},{"tag":"EXERCISE","title":"Exercise 3.62","id":"#ex-3.62","child":[{"body":"\n    Use the results of exercises ","tag":"#text"},{"tag":"REF","body":"3.60","href":"/sicpjs/3.5.2#ex-3.60"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"3.61","href":"/sicpjs/3.5.2#ex-3.61"},{"body":"\n    to define a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"div_series"},{"body":"\n    that divides two power series.\n    The function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"div_series"},{"body":"\n    should work for any two series, provided that the denominator series begins\n    with a nonzero constant term.  (If the denominator has a zero constant term,\n    then\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"div_series"},{"body":"\n    should signal an error.) Show how to use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"div_series"},{"body":"\n    together with the result of exercise ","tag":"#text"},{"tag":"REF","body":"3.59","href":"/sicpjs/3.5.2#ex-3.59"},{"body":"\n    to generate the power series for\n    \n    tangent.\n  ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.5.2#footnote-link-1","child":[{"body":"Eratosthenes,\n    \n    a third-century BCE\n    Alexandrian Greek philosopher, is famous for giving the first accurate\n    estimate of the\n    \n    circumference of the Earth, which he computed by\n    observing shadows cast at noon on the day of the summer solstice.\n    Eratosthenes's sieve method, although ancient, has formed the basis\n    for special-purpose hardware \"","tag":"#text"},{"body":"sieves","tag":"#text"},{"body":"\" that, until the 1970s,\n    were the\n    most powerful tools in existence for locating large primes.  Since then,\n    however, these methods have been superseded by outgrowths of the\n    \n    probabilistic techniques discussed in\n    section ","tag":"#text"},{"tag":"REF","body":"1.2.6","href":"/sicpjs/1.2.6"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/3.5.2#footnote-link-2","child":[{"body":"We have named these\n    figures after\n    \n    Peter Henderson, who was the first person to show us diagrams of this sort\n    as a way of thinking about stream processing.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/3.5.2#footnote-link-3","child":[{"body":"\n\tThis uses the function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_map_2"},{"body":"\n\tfrom exercise ","tag":"#text"},{"tag":"REF","body":"3.50","href":"/sicpjs/3.5.1#ex-3.50"},{"body":".\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/3.5.2#footnote-link-4","child":[{"body":"This last point is very\n    subtle and relies on the fact that ","tag":"#text"},{"body":"$p_{n+1} \\leq p_{n}^2$","tag":"LATEX"},{"body":". (Here, ","tag":"#text"},{"body":"$p_{k}$","tag":"LATEX"},{"body":" denotes the\n    ","tag":"#text"},{"body":"$k$","tag":"LATEX"},{"body":"th prime.)  Estimates such as these are very\n    difficult to establish.  The ancient proof by\n    \n    Euclid that there are an infinite number of primes shows that\n    ","tag":"#text"},{"body":"$p_{n+1}\\leq p_{1} p_{2}\\,\\cdots\\,\\, p_{n} +1$","tag":"LATEX"},{"body":",\n    and no substantially better result was proved until 1851, when the Russian\n    mathematician\n    \n    P. L. Chebyshev established\n    that ","tag":"#text"},{"body":"$p_{n+1}\\leq 2p_{n}$","tag":"LATEX"},{"body":" for all\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  This result, originally conjectured in\n    1845, is known as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Bertrand's hypothesis","tag":"#text"}]},{"body":".  A proof can be\n    found in section 22.3 of\n    Hardy and Wright 1960.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/3.5.2#footnote-link-5","child":[{"body":"This\n\texercise shows how call-by-need is closely related to\n\t\n\tordinary memoization as described in\n\texercise ","tag":"#text"},{"tag":"REF","body":"3.27","href":"/sicpjs/3.3.3#ex-3.27"},{"body":". In that exercise, we used\n\tassignment to explicitly construct a local table.  Our call-by-need stream\n\toptimization effectively constructs such a table automatically, storing\n\tvalues in the previously forced parts of the stream.","tag":"#text"}]}]