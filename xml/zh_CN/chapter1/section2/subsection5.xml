<SUBSECTION>
   <NAME>最大公约数</NAME> 

  <LABEL NAME="sec:gcd"></LABEL>
   <INDEX>最大公约数<OPEN></OPEN></INDEX> 

   <TEXT>
    两个整数 <LATEXINLINE>$a$</LATEXINLINE> 和 <LATEXINLINE>$b$</LATEXINLINE> 的最大公约数（GCD）定义为同时整除 <LATEXINLINE>$a$</LATEXINLINE> 和 <LATEXINLINE>$b$</LATEXINLINE> 且没有余数的最大整数。例如，16 和 28 的最大公约数是 4。在第 <SPACE></SPACE><REF NAME="chap:data"></REF> 章中，当我们研究如何实现有理数运算时，我们将需要能够计算最大公约数，以便将有理数约分到最简形式。（要将有理数约分到最简形式，必须将分子和分母同时除以它们的最大公约数。例如，16/28 约分为 4/7。）找到两个整数的最大公约数的一种方法是对它们进行因数分解并寻找公因数，但有一种著名的算法效率更高。
  </TEXT> 

   <TEXT>
    <INDEX>欧几里得<APOS></APOS>算法<OPEN></OPEN></INDEX>
    该算法的思想基于以下观察：如果
    <LATEXINLINE>$r$</LATEXINLINE> 是
    <LATEXINLINE>$a$</LATEXINLINE> 除以
    <LATEXINLINE>$b$</LATEXINLINE> 的余数，
    则
    <LATEXINLINE>$a$</LATEXINLINE> 和 <LATEXINLINE>$b$</LATEXINLINE> 的公约数
    与 <LATEXINLINE>$b$</LATEXINLINE> 和 <LATEXINLINE>$r$</LATEXINLINE> 的公约数恰好相同。
    因此，我们可以利用等式
    <LATEX>
      \[\begin{array}{lll}
      \textrm{最大公约数} (a, b) &amp;=&amp; \textrm{最大公约数}(b, r)
      \end{array}\]
    </LATEX>
    逐步将计算最大公约数的问题简化为计算较小整数对最大公约数的问题。例如，
    <DO_BREAK_PAGE></DO_BREAK_PAGE>
    <LATEX>
      \[\begin{array}{lll}
      \textrm{最大公约数}(206,40) &amp; = &amp; \textrm{最大公约数}(40,6) \\
                           &amp; = &amp; \textrm{最大公约数}(6,4) \\
                           &amp; = &amp; \textrm{最大公约数}(4,2) \\
                           &amp; = &amp; \textrm{最大公约数}(2,0) \\
                           &amp; = &amp; 2
      \end{array}\]
    </LATEX>
    将 <LATEXINLINE>$\textrm{最大公约数}(206, 40)$</LATEXINLINE> 化简为
    <LATEXINLINE>$\textrm{最大公约数}(2, 0)$</LATEXINLINE>，
    结果为 2。可以证明，从任意两个正整数开始，
    反复进行这种化简最终总会得到第二个数为 0 的数对，
    此时的最大公约数就是该数对中的另一个数。
    这种计算最大公约数的方法被称为 <EM>欧几里得<APOS></APOS>算法</EM>。<FOOTNOTE>欧几里得<APOS></APOS>算法之所以得名，
    是因为它出现在欧几里得的
    <INDEX><ORDER>欧几里得<APOS></APOS>著作</ORDER>欧几里得<APOS></APOS>的 <EM>几何原本</EM></INDEX>
    （第7本，约公元前300年）中。根据
    <INDEX>唐纳德·E·克努斯</INDEX>
    克努斯（1997a）的说法，它可以被认为是已知最古老的非平凡算法。
    古埃及的乘法方法（练习<SPACE></SPACE><REF NAME="ex:it-pro-mult-int"></REF>）当然更早，
    但正如克努斯所解释的，欧几里得<APOS></APOS>算法是已知最早被作为通用算法提出的方法，
    而非仅作为一组示例。</FOOTNOTE>
  </TEXT> 

   <TEXT>
    用 <SPLITINLINE>
      <SCHEME>过程：</SCHEME>
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    表达欧几里得<APOS></APOS>算法很简单：
    <SNIPPET PAGE="49">
      <INDEX><DECLARATION>最大公约数</DECLARATION></INDEX>
      <NAME>最大公约数定义</NAME>
      <EXAMPLE>最大公约数示例</EXAMPLE>
      <SCHEME>
(define (最大公约数 a b)
  (if (= b 0)
      a
      (最大公约数 b (remainder a b))))
      </SCHEME>
      <JAVASCRIPT>
function 最大公约数(a, b) {
    return b === 0 ? a : 最大公约数(b, a % b);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="49" HIDE="yes">
      <NAME>最大公约数示例</NAME>
      <REQUIRES>最大公约数定义</REQUIRES>
      <EXPECTED>4</EXPECTED>
      <SCHEME>
(最大公约数 20 12)
      </SCHEME>
      <JAVASCRIPT>
最大公约数(20, 12);
      </JAVASCRIPT>
    </SNIPPET>
    该方法生成一个迭代过程，其步骤数随所涉及数字的对数增长。
  </TEXT> 

   <TEXT>
    欧几里得算法所需步骤数具有对数增长的事实，
    <INDEX>欧几里得算法<SUBINDEX>增长阶</SUBINDEX></INDEX>
    与
    <INDEX>斐波那契数<SUBINDEX>欧几里得最大公约数算法与</SUBINDEX></INDEX>
    斐波那契数之间有一个有趣的联系：
    <BLOCKQUOTE>
      <B>拉姆定理：</B>
      <INDEX><ORDER>拉姆</ORDER>拉姆定理</INDEX>
      如果欧几里得算法
      计算某对数的最大公约数需要<LATEXINLINE>$k$</LATEXINLINE>步，那么该对中的较小数字必须大于或等于第
      <LATEXINLINE>$k$</LATEXINLINE>个斐波那契数。<FOOTNOTE>该定理由
      <INDEX><ORDER>拉姆</ORDER>加布里埃尔·拉姆</INDEX>
      于1845年证明，他是
      一位法国数学家和工程师，主要以对数学物理学的贡献闻名。为证明该定理，我们考虑满足
      <LATEXINLINE>$a_k\geq b_k$</LATEXINLINE>，且欧几里得算法在
      <LATEXINLINE>$k$</LATEXINLINE>步后终止的数对<LATEXINLINE>$(a_k, b_k)$</LATEXINLINE>。证法基于下面的断言：
      若
      <LATEXINLINE>$(a_{k+1}, b_{k+1}) \rightarrow (a_k, b_k) \rightarrow (a_{k-1}, b_{k-1})$</LATEXINLINE>是约简过程中的连续三对，
      则必须有
      <LATEXINLINE>$b_{k+1} \geq b_k + b_{k-1}$</LATEXINLINE>。
      验证该断言时，考虑约简步骤定义为应用变换
      <LATEXINLINE>$a_{k-1} = b_k$</LATEXINLINE>以及
      <LATEXINLINE>$b_{k-1} = a_k\ \textrm{除以}\ b_k\ \textrm{的余数}$</LATEXINLINE>。
      第二个等式意味着
      <LATEXINLINE>$a_k = q b_k + b_{k-1}$</LATEXINLINE>，其中
      <LATEXINLINE>$q$</LATEXINLINE>为某个正整数。由于
      <LATEXINLINE>$q \geq 1$</LATEXINLINE>，则有
      <LATEXINLINE>$a_k = q b_k + b_{k-1} \geq b_k + b_{k-1}$</LATEXINLINE>。
      在前一步约简中，<LATEXINLINE>$b_{k+1} = a_k$</LATEXINLINE>，因此，
      <LATEXINLINE>$b_{k+1} = a_k \geq b_k + b_{k-1}$</LATEXINLINE>。
      这验证了该断言。现在我们可以对算法终止所用步数
      <LATEXINLINE>$k$</LATEXINLINE>做归纳证明该定理。对于
      <LATEXINLINE>$k=1$</LATEXINLINE>，结果显然成立，因为这仅要求
      <LATEXINLINE>$b$</LATEXINLINE>至少等于
      <LATEXINLINE>$\text{Fib}(1)=1$</LATEXINLINE>。假设该结果对所有小于或等于
      <LATEXINLINE>$k$</LATEXINLINE>的整数成立，现对
      <LATEXINLINE>$k+1$</LATEXINLINE>进行证明。设
      <LATEXINLINE>$(a_{k+1}, b_{k+1}) \rightarrow (a_k, b_k) \rightarrow (a_{k-1}, b_{k-1})$</LATEXINLINE>为约简过程中的连续数对。
      由归纳假设有
      <LATEXINLINE>$b_{k-1} \geq \textrm{Fib}(k-1)$</LATEXINLINE>且
      <LATEXINLINE>$b_k \geq \textrm{Fib}(k)$</LATEXINLINE>。因此，结合已证断言和斐波那契数的定义，
      有
      <LATEXINLINE>$b_{k+1} \geq b_k + b_{k-1} \geq \textrm{Fib}(k) + \textrm{Fib}(k-1) = \textrm{Fib}(k+1)$</LATEXINLINE>，
      证毕拉姆定理。</FOOTNOTE>
    </BLOCKQUOTE>
  </TEXT> 

  <LONG_PAGE LINES="2"></LONG_PAGE>
   <TEXT>
    我们可以利用该定理对欧几里得算法的增长阶做一个估计。设
    <LATEXINLINE>$n$</LATEXINLINE>为输入的两个数中较小的一个。
    如果该过程执行了
    <LATEXINLINE>$k$</LATEXINLINE>步，那么必须有
    <LATEXINLINE>$n \geq \textrm{Fib}(k) \approx \phi^k/\sqrt{5}$</LATEXINLINE>。
    因此，步骤数
    <LATEXINLINE>$k$</LATEXINLINE>随
    <LATEXINLINE>$n$</LATEXINLINE>的以
    <LATEXINLINE>$\phi$</LATEXINLINE>为底的对数增长。故其增长阶为
    <LATEXINLINE>$\Theta(\log n)$</LATEXINLINE>。
    <INDEX>最大公约数</INDEX>
    <INDEX>欧几里得算法</INDEX>
  </TEXT> 

   <EXERCISE>
    <LABEL NAME="ex:gcd-process"></LABEL> 
    由
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    生成的过程当然依赖于解释器所使用的规则。
    例如，考虑上面给出的迭代的
    <SCHEMEINLINE>gcd</SCHEMEINLINE> 
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>。
    假设我们用
    <INDEX>正常顺序求值<SUBINDEX>应用顺序对比</SUBINDEX></INDEX>
    <INDEX>应用顺序求值<SUBINDEX>正常顺序对比</SUBINDEX></INDEX>
    中讨论的正常顺序求值来解释该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>，
    如章节<SPACE></SPACE><REF NAME="sec:substitution-model"></REF>所述。（
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>if</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>条件表达式</JAVASCRIPT>
    </SPLITINLINE>
    的正常顺序求值规则见练习题<SPACE></SPACE><REF NAME="ex:normal-order-vs-appl-order-test"></REF>。）  
    利用替换法（针对正常顺序），说明计算
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(gcd 206 40)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    时生成的过程，并指出实际执行了哪些
    <SCHEMEINLINE>求余</SCHEMEINLINE>操作。
    在正常顺序求值
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(gcd 206 40)</SCHEMEINLINE>?</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>gcd(206, 40)</JAVASCRIPTINLINE>?</JAVASCRIPT>
    </SPLITINLINE>
    中实际执行了多少
    <SCHEMEINLINE>求余</SCHEMEINLINE>操作？
    在应用顺序求值中呢？
    <SOLUTION>
      <SPLIT>
	<JAVASCRIPT>
	  <OL>
	    <LI>
	      在正常顺序求值中，该过程经历了18次求余操作。
	      在判定条件时进行了14次，其余在最终归约阶段执行。
              <SNIPPET PAGE="49" EVAL="no">
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
206 % 40 === 0 ? 40 : gcd(206 % 40,
                          40 % (206 % 40))
// 求余操作 (1)
6 === 0 ? 40 : gcd(206 % 40,
                   40 % (206 % 40))
gcd(206 % 40, 40 % (206 % 40))
40 % (206 % 40) === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
// 求余操作 (2) 和 (3)
4 === 0 
    ? 206 % 40 
    : gcd(40 % (206 % 40),
          (206 % 40) % (40 % (206 % 40)))
gcd(40 % (206 % 40), (206 % 40) % (40 % (206 % 40)))
(206 % 40) % (40 % (206 % 40)) === 0 
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)))
// 求余操作 (4), (5), (6), (7)
2 === 0
    ? 40 % (206 % 40)
    : gcd((206 % 40) % (40 % (206 % 40)), 
          (40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
gcd((206 % 40) % (40 % (206 % 40)), 
    (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)))
(40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))) === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
// 求余操作 
                    (8), (9), (10), (11), (12), (13), (14)
0 === 0
    ? (206 % 40) % (40 % (206 % 40)) 
    : gcd((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40)),
          ((206 % 40) % (40 % (206 % 40))) %
          ((40 % (206 % 40)) % ((206 % 40) % (40 % 
                                             (206 % 40))))
(206 % 40) % (40 % (206 % 40))    
// 求余操作 (15), (16), (17), (18)
2
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	    <LI>
	      在应用顺序求值中，该过程执行了4次求余操作。
              <SNIPPET PAGE="49" EVAL="no">
		<JAVASCRIPT>
gcd(206, 40)
40 === 0 ? 206 : gcd(40, 206 % 40)
gcd(40, 206 % 40)
// 求余操作 (1)
gcd(40, 6)
6 === 0 ? 40 : gcd(6, 40 % 6)
gcd(6, 40 % 6)
// 求余操作 (2)
gcd(6, 4)
4 === 0 ? 6 : gcd(4, 6 % 4)
gcd(4, 6 % 4)
// 求余操作 (3)
gcd(4, 2)
2 === 0 ? 4 : gcd(2, 4 % 2)
gcd(2, 4 % 2)
// 求余操作 (4)
gcd(2, 0)
0 === 0 ? 2 : gcd(0, 2 % 0)
2
		</JAVASCRIPT>
	      </SNIPPET>
	    </LI>
	  </OL>
	</JAVASCRIPT>
      </SPLIT>
    </SOLUTION>
  </EXERCISE> 
</SUBSECTION>
