[{"id":"/sicpjs/1.1.2","tag":"TITLE","body":"1.1.2  Naming and the Environment"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    A critical aspect of a programming language is the means it provides\n    for using\n    \n    names to refer to computational\n    objects, and our first such means are ","tag":"#text"},{"tag":"EM","child":[{"body":"constants","tag":"#text"}]},{"body":".\n      \n    We say that the\n    \n    name identifies a\n    constant\n    whose\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"value","tag":"#text"}]},{"body":" is the object.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n\tIn JavaScript, we name constants with \n\t","tag":"#text"},{"tag":"EM","child":[{"body":"constant declarations","tag":"#text"}]},{"body":".\t\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUEgSwC8BTUAXlEwG4g","body":"const size = 2; "},{"body":"\n    causes the interpreter to associate the value 2 with the\n    name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"size"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.1.2#footnote-1"},{"body":"\n    Once the name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"size"},{"body":"\n    has been associated with the number 2, we can\n    refer to the value 2 by name:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":3,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUEgSwC8BTUAXlEwG5dr7Wg","body":"size; ","output":"2"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":3,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUEgSwC8BTUAXlEwG5cBWUAKktrtZA","body":"5 * size; ","output":"10"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n          The JavaScript interpreter needs to execute the constant\n          declaration for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"size"},{"body":"\n          before the name ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"size"},{"body":" can be used\n          in an expression. In this online book, the statements that need to be\n          evaluated before a new statement are omitted for brevity. However,\n\t  to see and play with the program, you can click on it. The\n\t  program then appears in a new\n\t  browser tab, with the option \"","tag":"#text"},{"body":"Show Dependencies","tag":"#text"},{"body":"\".\n\t  Thus, as a result of clicking on\n          ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":3,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUEgSwC8BTUAXlEwG5cBWUAKktrtZA","body":"5 * size; "},{"body":"\n          a new tab appears that contains the program, and after clicking\n\t   \"","tag":"#text"},{"body":"Show Dependencies","tag":"#text"},{"body":"\", you see:\n          ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUEgSwC8BTUAXlEwG5sBWUAKktrtZA","body":"const size = 2;\n5 * size; "}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Here are further examples of the use of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUABwEtQBeUAZgwBYUBWATgG4g","body":"const pi = 3.14159; "},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUAJwEMATASwFcTQBeVABgG4g","body":"const radius = 10; "},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUABwEtQBeUAZgwBYUBWATgG5dDSKAJwCGAE2oBXEvVQAGXthqgAVKBHipKtWMkluQA","body":"pi * radius * radius; ","output":"314.159"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUABwEtQBeUAZgwBYUBWATgG5dDSKAJwCGAE2oBXEvVQAGXvmLlQeaoLwSAtgDMApoN1E8umZlAAqKrUsjxU7kA","body":"const circumference = 2 * pi * radius; "},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHToEwChsGMB7AOwGcAXUABwEtQBeUAZgwBYUBWATgG5dDSKAJwCGAE2oBXEvVQAGXvmLlQeaoLwSAtgDMApoN1E8umZlAAqKrUsjxUhavVa9Bo7u5A","body":"circumference; ","output":"62.8318"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tConstant\n\t\n\tdeclaration\n      \n    is our language's\n    simplest means of abstraction, for it allows us to use simple names to\n    refer to the results of compound operations, such as the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"circumference"},{"body":" computed above.\n    In general, computational objects may have very complex\n    structures, and it would be extremely inconvenient to have to remember\n    and repeat their details each time we want to use them.  Indeed,\n    complex programs are constructed by building, step by step,\n    computational objects of increasing complexity. The\n    interpreter makes this step-by-step program construction particularly\n    convenient because name-object associations can be created\n    incrementally in successive interactions.  This feature encourages the\n    \n    incremental development and testing of programs and is largely\n    responsible for the fact that a\n    \n        JavaScript\n      \n    program usually consists of a large\n    number of relatively simple\n    \n        functions.\n      ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    It should be clear that the possibility of associating values with\n    names and later retrieving them means that the interpreter must\n    maintain some sort of memory that keeps track of the name-object\n    pairs.  This memory is called the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"environment","tag":"#text"}]},{"body":"\n    (more precisely the\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"program environment","tag":"#text"}]},{"body":",\n      \n    since we will see later that a\n    computation may involve a number of different\n    environments).","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.1.2#footnote-2"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.1.2#footnote-link-1","child":[{"body":"\n        In this book, we do not show the interpreter's response to\n        evaluating programs that end with declarations, since this might depend\n        on previous statements. See exercise ","tag":"#text"},{"tag":"REF","body":"4.8","href":"/sicpjs/4.1.2#ex-4.8"},{"body":"\n\tfor details.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.1.2#footnote-link-2","child":[{"body":"Chapter ","tag":"#text"},{"tag":"REF","body":"3","href":"/sicpjs/3"},{"body":" will show that this notion of\n    environment is crucial for understanding how the interpreter works.\n    Chapter ","tag":"#text"},{"tag":"REF","body":"4","href":"/sicpjs/4"},{"body":" will use environments for implementing\n    interpreters.","tag":"#text"}]}]