<SUBSECTION>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Quotation</SCHEME>
      <PYTHON>Strings</PYTHON>
    </SPLITINLINE>
  </NAME>

  <SPLITINLINE>
    <SCHEME>
      <LABEL NAME="sec:quotation"/>
    </SCHEME>
    <PYTHON>
      <LABEL NAME="sec:strings"/>
    </PYTHON>
  </SPLITINLINE>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>quotation<OPEN/></INDEX>
    </SCHEME>
    <PYTHON>
      <INDEX>string(s)<OPEN/></INDEX>
    </PYTHON>
  </SPLITINLINE>

  <SPLIT>
    <SCHEME>
      <TEXT>
        If we can form compound data using symbols, we can have lists such as
        <INDEX>Sussman, Julie Esther Mazel, nieces of</INDEX>
        <SNIPPET EVAL="no">
          <SCHEME>
(a b c d)
(23 45 17)
((Norah 12) (Molly 9) (Anna 7) (Lauren 6) (Charlotte 4))
          </SCHEME>
        </SNIPPET>
        Lists containing symbols can look just like the expressions of our
        language:
        <SNIPPET EVAL="no">
          <SCHEME>
(* (+ 23 45) (+ x 9))

(define (fact n) (if (= n 1) 1 (* n (fact (- n 1)))))
          </SCHEME>
        </SNIPPET>
      </TEXT>
      <TEXT>
        In order to manipulate symbols we need a new element in our language:
        the ability to <EM>quote</EM> a data object.  Suppose we want to
        construct the list <SCHEMEINLINE>(a b)</SCHEMEINLINE>.  We can<APOS/>t 
        accomplish this with <SCHEMEINLINE>(list a b)</SCHEMEINLINE>, because 
        this expression constructs
        a list of the <EM>values</EM> of <SCHEMEINLINE>a</SCHEMEINLINE> and
	<SCHEMEINLINE>b</SCHEMEINLINE> rather than the symbols themselves.
	This issue is well known in the context of
        <INDEX>quotation<SUBINDEX><ORDER>natural</ORDER>in natural language</SUBINDEX></INDEX>
        <INDEX>natural language<SUBINDEX>quotation in</SUBINDEX></INDEX>
        natural languages, where words and sentences may be regarded either as
        semantic entities or as character strings (syntactic entities).  The
        common practice in natural languages is to use quotation marks to
        indicate that a word or a sentence is to be treated literally as a
        string of characters.  For instance, the first letter of
	<QUOTE>John</QUOTE> is clearly <QUOTE>J.</QUOTE>  If we tell somebody
	<QUOTE>say your name aloud,</QUOTE> we expect to hear that
	person<APOS/>s name.  However, if we tell somebody
	<QUOTE>say <QUOTE>your name</QUOTE> aloud,</QUOTE> we expect to hear
	the words <QUOTE>your name.</QUOTE>  Note that we are forced to nest
	quotation marks to describe what somebody else might
	say.<FOOTNOTE>Allowing quotation in a language wreaks havoc
        with the ability to reason about the language in simple terms, because
        it destroys the notion that equals can be substituted for equals.  For
        example, three is one plus two, but the word <QUOTE>three</QUOTE> is
	not the phrase <QUOTE>one plus two.</QUOTE>  Quotation is powerful
	because it gives us a way to build expressions that manipulate other
	expressions (as we will see when we write an interpreter in
	chapter<SPACE/><REF NAME="chap:meta"></REF>). But allowing statements in a language that talk
	about other statements in that language makes it very difficult to
	maintain any coherent principle of what <QUOTE>equals can be
	substituted for equals</QUOTE> should mean.  For example, if we know
	that
        <INDEX>Venus</INDEX>
        the evening star is the morning star, then from the statement <QUOTE>the
        evening star is Venus</QUOTE> we can deduce <QUOTE>the morning star is
	Venus.</QUOTE> However, given that <QUOTE>John knows that the evening
	star is Venus</QUOTE> we cannot infer that <QUOTE>John knows that the
	morning star is Venus.</QUOTE></FOOTNOTE>
      </TEXT>
      <TEXT>
        <INDEX>quotation<SUBINDEX><ORDER>Lisp</ORDER>of Lisp data objects</SUBINDEX></INDEX>
        We can follow this same practice to identify lists and symbols that are
        to be treated as data objects rather than as expressions to be
        evaluated.  However, our format for quoting differs from that of
        natural languages in that we place a quotation mark (traditionally,
        the single 
        <INDEX><USE>'</USE> (single quote)</INDEX>
        quote symbol<SPACE/><SCHEMEINLINE>'</SCHEMEINLINE>) only at the
	beginning of the object to be quoted.  We can get away with this in
	Scheme syntax because we rely on blanks and parentheses to delimit
	objects.  Thus, the meaning of the single quote character is to quote
	the next object.<FOOTNOTE>The single quote is different 
        <INDEX>quotation mark, single vs.<SPACE/>double</INDEX>
        <INDEX>quotation<SUBINDEX><ORDER>character</ORDER>of character strings</SUBINDEX></INDEX>
        <INDEX>character strings<SUBINDEX>quotation of</SUBINDEX></INDEX>
        <INDEX><USE>""</USE> (double quote)</INDEX>
        from the double quote we have been using to enclose character strings
	to be printed.  Whereas the single quote can be used to denote lists
	or symbols, the double quote is used only with character strings.
	In this book, the only use for character strings is as items to be
	printed.</FOOTNOTE>
      </TEXT>
      <TEXT>
        <INDEX>string(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
        Now we can distinguish between symbols and their values:
        <SNIPPET>
          <NAME>ab</NAME>
          <SCHEME>
(define a 1)

(define b 2)
          </SCHEME>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>ab</REQUIRES>
          <SCHEME>
(list a b)
          </SCHEME>
          <SCHEMEOUTPUT>
(1 2)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(list 'a 'b)
          </SCHEME>
          <SCHEMEOUTPUT>
(a b)
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>ab</REQUIRES>
          <SCHEME>
(list 'a b)
          </SCHEME>
          <SCHEMEOUTPUT>
(a 2)
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
      <TEXT>
        <INDEX>list(s)<SUBINDEX>quotation of</SUBINDEX></INDEX>
        Quotation also allows us to type in compound objects, using the
        conventional printed representation for lists:<FOOTNOTE>Strictly, our
        use of the quotation mark violates the general rule that all compound
        expressions in our language should be delimited by parentheses
        and look like lists.  We
        <INDEX><DECLARATION>quote</DECLARATION></INDEX> 
        <INDEX><DECLARATION>special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</DECLARATION><SUBINDEX><ORDER>quote</ORDER><SCHEMEINLINE>quote</SCHEMEINLINE></SUBINDEX></INDEX>
        can recover this consistency by introducing a special form
	<SCHEMEINLINE>quote</SCHEMEINLINE>, which serves the same purpose as
	the quotation mark.  Thus, we would type
	<SCHEMEINLINE>(quote a)</SCHEMEINLINE> instead of
	<SCHEMEINLINE>'a</SCHEMEINLINE>, and we would type
	<SCHEMEINLINE>(quote (a b c))</SCHEMEINLINE> instead of
	<SCHEMEINLINE>'(a b c)</SCHEMEINLINE>.  This is precisely how the
        interpreter works.  The quotation mark is just a single-character
        abbreviation for wrapping the next complete expression with 
        <SCHEMEINLINE>quote</SCHEMEINLINE> to form
	<SCHEMEINLINE>(quote expression)</SCHEMEINLINE>.  This is important
        because it maintains the principle that any expression seen by the
        interpreter can be manipulated as a data object.  For instance, we
        could construct the expression
        <SCHEMEINLINE>(car '(a b c))</SCHEMEINLINE>, which is the same as
	<SCHEMEINLINE>(car (quote (a b c)))</SCHEMEINLINE>, by evaluating
	<SCHEMEINLINE>(list 'car (list 'quote '(a b c)))</SCHEMEINLINE>.</FOOTNOTE>
	<SNIPPET>
          <SCHEME>
(car '(a b c))
          </SCHEME>
          <SCHEMEOUTPUT>
a
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(cdr '(a b c))
          </SCHEME>
          <SCHEMEOUTPUT>
(b c)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <INDEX>empty list<SUBINDEX>denoted as <SCHEMEINLINE>'()</SCHEMEINLINE></SUBINDEX></INDEX>
        <INDEX><USE>nil</USE><SUBINDEX>dispensing with</SUBINDEX></INDEX>
        In keeping with this, we can obtain the empty list by evaluating <SCHEMEINLINE>'()</SCHEMEINLINE>, 
        and thus dispense with the variable <SCHEMEINLINE>nil</SCHEMEINLINE>.
      </TEXT>
      <TEXT>
        One additional primitive used in manipulating symbols is 
        <INDEX>equality<SUBINDEX><ORDER>symbols</ORDER>of symbols</SUBINDEX></INDEX>
        <INDEX>symbol(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <INDEX><USE>*eq?</USE> (primitive function)</INDEX>
        <INDEX>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)<SUBINDEX><DECLARATION>eq?</DECLARATION></SUBINDEX></INDEX>
        <SCHEMEINLINE>eq?</SCHEMEINLINE>,
        which takes two symbols as arguments and tests whether they are the
        same.<FOOTNOTE>We can consider two symbols to be
	<QUOTE>the same</QUOTE> if they consist of the same characters in the
	same order.  Such a definition skirts a deep issue that we are not yet
	ready to address: the meaning of <QUOTE>sameness</QUOTE> in a
	programming language.  We will return to this in
        chapter<SPACE/><REF NAME="chap:state"></REF>
	(section<SPACE/><REF NAME="sec:costs-of-assignment"/>).</FOOTNOTE>
	Using <SCHEMEINLINE>eq?</SCHEMEINLINE>, we can implement a useful
	procedure called <SCHEMEINLINE>memq</SCHEMEINLINE>.  This takes two
        arguments, a symbol and a list.  If the symbol is not contained in the
        list (i.e., is not <SCHEMEINLINE>eq?</SCHEMEINLINE> to any item in the
	list), then <SCHEMEINLINE>memq</SCHEMEINLINE> returns false.
	Otherwise, it returns the sublist of the list beginning with the
	first occurrence of the symbol:
        <INDEX><DECLARATION>memq</DECLARATION></INDEX> 
        <SNIPPET>
          <NAME>memq</NAME>
          <EXAMPLE>memq_example</EXAMPLE>
          <SCHEME>
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
          </SCHEME>
        </SNIPPET>
        For example, the value of
        <SNIPPET>
          <NAME>memq_example</NAME>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq 'apple '(pear banana prune))
          </SCHEME>
        </SNIPPET>
        is false, whereas the value of
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq 'apple '(x (apple sauce) y apple pear))
          </SCHEME>
        </SNIPPET>
        is <SCHEMEINLINE>(apple pear)</SCHEMEINLINE>.
      </TEXT>

      <EXERCISE>
        What would the interpreter print in response to evaluating each of the
        following expressions?
        <SNIPPET>
          <SCHEME>
(list 'a 'b 'c)
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(list (list 'george))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(cdr '((x1 x2) (y1 y2)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(cadr '((x1 x2) (y1 y2)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(pair? (car '(a short list)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq 'red '((red shoes) (blue socks)))
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <SCHEME>
(memq 'red '(red shoes blue socks))
          </SCHEME>
        </SNIPPET>
      </EXERCISE>

      <EXERCISE> 
        Two lists are said to be 
        <INDEX><USE>equal?</USE></INDEX> 
        <INDEX>equality<SUBINDEX><ORDER>lists</ORDER>of lists</SUBINDEX></INDEX>
        <INDEX>list(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <SCHEMEINLINE>equal?</SCHEMEINLINE> if they contain equal elements
        arranged in the same order.  For example,
        <SNIPPET HIDE="yes">
          <NAME>equal_definition</NAME>
          <SCHEME>
;; procedure equal? to be written by student
          </SCHEME>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
          <SCHEME>
(equal? '(this is a list) '(this is a list))
          </SCHEME>
        </SNIPPET>
        is true, but
        <SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
          <SCHEME>
(equal? '(this is a list) '(this (is a) list))
          </SCHEME>
        </SNIPPET>
        is false.  To be more precise, we can define
	<SCHEMEINLINE>equal?</SCHEMEINLINE> recursively in terms of the basic
	<SCHEMEINLINE>eq?</SCHEMEINLINE> equality of symbols by saying that
	<SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
	<SCHEMEINLINE>equal?</SCHEMEINLINE> if they are both symbols and the
	symbols are <SCHEMEINLINE>eq?</SCHEMEINLINE>, or if they are both
	lists such that <SCHEMEINLINE>(car a)</SCHEMEINLINE> is
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to
	<SCHEMEINLINE>(car b)</SCHEMEINLINE> and 
        <SCHEMEINLINE>(cdr a)</SCHEMEINLINE> is
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to
	<SCHEMEINLINE>(cdr b)</SCHEMEINLINE>.  
        Using this idea, implement <SCHEMEINLINE>equal?</SCHEMEINLINE> as a
        procedure.<FOOTNOTE>In practice, programmers use
	<SCHEMEINLINE>equal?</SCHEMEINLINE> to compare lists that contain
	numbers as well as symbols.  Numbers are not considered to be symbols.
	The question
        <INDEX>number(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
        <INDEX>equality<SUBINDEX><ORDER>numbers</ORDER>of numbers</SUBINDEX></INDEX>
        of whether two numerically equal numbers (as tested by
	<SCHEMEINLINE>=</SCHEMEINLINE>) are also
	<SCHEMEINLINE>eq?</SCHEMEINLINE> is highly implementation-dependent.
	A better definition of <SCHEMEINLINE>equal?</SCHEMEINLINE> (such as
	the one that comes as a primitive in Scheme) would also stipulate that
	if <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are
        both numbers, then <SCHEMEINLINE>a</SCHEMEINLINE> and
	<SCHEMEINLINE>b</SCHEMEINLINE> are <SCHEMEINLINE>equal?</SCHEMEINLINE>
	if they are numerically equal.</FOOTNOTE>
      </EXERCISE>

      <EXERCISE>
        Eva Lu Ator types to the interpreter the expression
        <SNIPPET>
          <SCHEME>
(car ''abracadabra)
          </SCHEME>
        </SNIPPET>
        To her surprise, the interpreter prints back
	<SCHEMEINLINE>quote</SCHEMEINLINE>.  Explain.
        <LABEL NAME="ex:double-quote"/>
      </EXERCISE>
    </SCHEME>
    
    <PYTHON>
      <TEXT>
	So far, we have used strings in order to display messages,
	using the functions <PYTHONINLINE>display</PYTHONINLINE> and
	<PYTHONINLINE>error</PYTHONINLINE> (as for example in 
	exercise<SPACE/><REF NAME="ex:search-for-primes"/>). 
        We can form compound data using strings and have lists such as
	<INDEX>Wrigstad, Tobias, daughter of</INDEX>
	<INDEX>Henz, Martin, children of</INDEX>
        <SNIPPET EVAL="no" LATEX="yes">
          <PYTHON>
list("a", "b", "c", "d")
list(23, 45, 17)
list(list("Jakob", 27), list("Lova", 9), list("Luisa", 24))
          </PYTHON>
        </SNIPPET>
        In order to distinguish strings from names, we surround them
	<INDEX>quotation marks<SUBINDEX>double</SUBINDEX></INDEX>
        <INDEX><USE>""</USE> (double quote)</INDEX>
	with double quotation marks. For example, the JavaScript expression
	<PYTHONINLINE>z</PYTHONINLINE> denotes the value of the
	name<SPACE/><PYTHONINLINE>z</PYTHONINLINE>, whereas the JavaScript
	expression <PYTHONINLINE>"z"</PYTHONINLINE> denotes a string
	that consists of a single character, namely the last letter in the
	English alphabet in lower case. 
      </TEXT>
      <TEXT>
        Via quotation marks, we can distinguish between strings and names:
        <SNIPPET>
          <NAME>ab</NAME>
          <PYTHON>
const a = 1;
const b = 2;
          </PYTHON>
        </SNIPPET>
        <SNIPPET>
	  <NAME>list_ab</NAME>
          <REQUIRES>ab</REQUIRES>
	  <EXPECTED>[ 1, [ 2, null ] ]</EXPECTED>
          <PYTHON>
list(a, b);
          </PYTHON>
	  <PYTHON_OUTPUT>
[1, [2, null]]
          </PYTHON_OUTPUT>
	</SNIPPET>
        <SNIPPET>
	  <NAME>list_quote_a_quote_b</NAME>
	  <EXPECTED>[ 'a', [ 'b', null ] ]</EXPECTED>
          <PYTHON>
list("a", "b");
	  </PYTHON>
          <PYTHON_OUTPUT>
["a", ["b", null]]
          </PYTHON_OUTPUT>
	</SNIPPET>
        <SNIPPET>
	  <NAME>list_quote_a_b</NAME>
          <REQUIRES>ab</REQUIRES>
	  <EXPECTED>[ 'a', [ 2, null ] ]</EXPECTED>
          <PYTHON>
list("a", b);
          </PYTHON>
          <PYTHON_OUTPUT>
["a", [2, null]]
          </PYTHON_OUTPUT>
	</SNIPPET>
      </TEXT>
      <TEXT>
	In section<SPACE/><REF NAME="sec:conditionals"/>, we introduced
	<PYTHONINLINE>===</PYTHONINLINE> and
	<PYTHONINLINE>!==</PYTHONINLINE>
	as  primitive predicates on numbers.
        <INDEX>equality<SUBINDEX><ORDER>strings</ORDER>of strings</SUBINDEX></INDEX>
	<INDEX><USE>===</USE><SUBINDEX><ORDER>string</ORDER>as string comparison operator</SUBINDEX><FRAGILE/></INDEX>
	<INDEX><OPERATOR/><SUBINDEX><USE>===</USE> (for string comparison)</SUBINDEX><FRAGILE/></INDEX>
	<INDEX><USE>"!==</USE><ORDER>;4</ORDER><SUBINDEX>as string comparison operator<ORDER>numeric</ORDER></SUBINDEX><FRAGILE/></INDEX>
	<INDEX><OPERATOR/><SUBINDEX><USE>"!==</USE> (for string comparison)<ORDER>;4</ORDER></SUBINDEX><FRAGILE/></INDEX>
	From now
	on, we shall allow two
	strings as operands of
	<PYTHONINLINE>===</PYTHONINLINE> and
	<PYTHONINLINE>!==</PYTHONINLINE>. The predicate
	<PYTHONINLINE>===</PYTHONINLINE> 	
	returns true if and only
	if the two strings are the same, and 
	<PYTHONINLINE>!==</PYTHONINLINE>
	returns true if and only
	if the two strings are not the same.<FOOTNOTE>
        We can consider two strings to be <QUOTE>the same</QUOTE> if they
	consist of the same characters in the same order. Such a definition
        skirts a deep issue that we are not yet ready to address: the meaning
        of <QUOTE>sameness</QUOTE> in a programming language.  We will return
	to this in chapter<SPACE/><REF NAME="chap:state"></REF>
	(section<SPACE/><REF NAME="sec:costs-of-assignment"/>).</FOOTNOTE>
	Using<SPACE/><PYTHONINLINE>===</PYTHONINLINE>, we can implement
	a useful function called <PYTHONINLINE>member</PYTHONINLINE>.
	This takes two arguments: a string and a list of strings or
	a number and a list of numbers.
	If the first argument is
	not contained in the list (i.e., is not
	<PYTHONINLINE>===</PYTHONINLINE> to any item in the list), 
        then <PYTHONINLINE>member</PYTHONINLINE> returns
	<PYTHONINLINE>null</PYTHONINLINE>.  Otherwise, it returns the
	sublist of the list beginning with the first occurrence of the
	string or number:
        <SNIPPET>
          <INDEX><DECLARATION>member</DECLARATION></INDEX> 
          <NAME>memq</NAME>
          <EXAMPLE>memq_example</EXAMPLE>
	  <EXPECTED>null</EXPECTED>
          <PYTHON>
function member(item, x) {
    return is_null(x)
           ? null
           : item === head(x)
           ? x
           : member(item, tail(x));
}
          </PYTHON>
        </SNIPPET>
        For example, the value of
        <SNIPPET>
          <NAME>memq_example</NAME>
          <REQUIRES>memq</REQUIRES>
          <PYTHON>
member("apple", list("pear", "banana", "prune"))
          </PYTHON>
          <PYTHON_TEST>
member("apple", list("pear", "banana", "prune"));
	  </PYTHON_TEST>
        </SNIPPET>
        is <PYTHONINLINE>null</PYTHONINLINE>, whereas the value of
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
	  <EXPECTED>[ 'apple', [ 'pear', null ] ]</EXPECTED>
          <PYTHON>
member("apple", list("x", "y", "apple", "pear"))
	  </PYTHON>
          <PYTHON_TEST>
member("apple", list("x", "y", "apple", "pear"));
	  </PYTHON_TEST>
        </SNIPPET>
        is <PYTHONINLINE>list("apple", "pear")</PYTHONINLINE>.
      </TEXT>

      <EXERCISE>
        What is the result of evaluating each of the
        following expressions, in box notation and list notation?
        <SNIPPET>
          <PYTHON>
list("a", "b", "c")
          </PYTHON>
        </SNIPPET>
        <SNIPPET>
          <PYTHON>
list(list("george"))
          </PYTHON>
        </SNIPPET>
        <SNIPPET>
          <PYTHON>
tail(list(list("x1", "x2"), list("y1", "y2")))
          </PYTHON>
        </SNIPPET>
        <SNIPPET>
          <PYTHON>
tail(head(list(list("x1", "x2"), list("y1", "y2"))))
          </PYTHON>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>memq</REQUIRES>
          <PYTHON>
member("red", list("blue", "shoes", "yellow", "socks"))
          </PYTHON>
        </SNIPPET>
        <SNIPPET POSTPADDING="no">
          <REQUIRES>memq</REQUIRES>
          <PYTHON>
member("red", list("red", "shoes", "blue", "socks"))
          </PYTHON>
        </SNIPPET>
	<SOLUTION>
          <SNIPPET>
	    <NAME>list_abc</NAME>
	    <EXPECTED>[ 'a', [ 'b', [ 'c', null ] ] ]</EXPECTED>
            <PYTHON_RUN>
list("a", "b", "c");
// ["a", ["b", ["c", null]]]
            </PYTHON_RUN>
            <PYTHON>
["a", ["b", ["c", null]]]
            </PYTHON>
          </SNIPPET>
          <SNIPPET>
	    <NAME>list_list_george</NAME>
	    <EXPECTED>[ [ 'george', null ], null ]</EXPECTED>
            <PYTHON_RUN>
list(list("george"));
// [["george", null], null]
	    </PYTHON_RUN>
            <PYTHON>
[["george", null], null]
            </PYTHON>
          </SNIPPET>
          <SNIPPET>
	    <NAME>tail_list_list_x1</NAME>
	    <EXPECTED>[ [ 'y1', [ 'y2', null ] ], null ]</EXPECTED>
            <PYTHON_RUN>
tail(list(list("x1", "x2"), list("y1", "y2")));
// [["y1", ["y2", null]], null]
	    </PYTHON_RUN>
            <PYTHON>
[["y1", ["y2", null]], null]
            </PYTHON>
          </SNIPPET>
          <SNIPPET>
	    <NAME>tail_head_list_list</NAME>
	    <EXPECTED>[ 'x2', null ]</EXPECTED>
            <PYTHON_RUN>
tail(head(list(list("x1", "x2"), list("y1", "y2"))));
// ["x2", null]
	    </PYTHON_RUN>
            <PYTHON>
["x2", null]
            </PYTHON>
          </SNIPPET>
          <SNIPPET>
	    <NAME>member_red_list_list</NAME>
	    <EXPECTED>null</EXPECTED>
            <REQUIRES>memq</REQUIRES>
            <PYTHON_RUN>
member("red", list(list("red", "shoes"), list("blue", "socks")));
// null
	    </PYTHON_RUN>
            <PYTHON>
null
            </PYTHON>
          </SNIPPET>
          <SNIPPET>
	    <NAME>member_red_list_red</NAME>
	    <EXPECTED>[ 'shoes', [ 'blue', [ 'socks', null ] ] ]</EXPECTED>
            <REQUIRES>memq</REQUIRES>
            <PYTHON_RUN>
member("shoes", list("red", "shoes", "blue", "socks"));
// ["shoes", ["blue", ["socks", null]]]
	    </PYTHON_RUN>
            <PYTHON>
["red", ["shoes", ["blue", ["socks", null]]]]
            </PYTHON>
          </SNIPPET>
	</SOLUTION>
	<LABEL NAME="ex:2_53"/>
      </EXERCISE>

      <EXERCISE>
	<LABEL NAME="ex:equal?"/>
	Two lists are said to be
	 <INDEX><USE>equal</USE></INDEX> 
	<INDEX>equality<SUBINDEX><ORDER>lists</ORDER>of lists</SUBINDEX></INDEX>
	<INDEX>equality<SUBINDEX><ORDER>numbers</ORDER>of numbers</SUBINDEX></INDEX>
	<INDEX>equality<SUBINDEX><ORDER>strings</ORDER>of strings</SUBINDEX></INDEX>
	<INDEX>list(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
	<PYTHONINLINE>equal</PYTHONINLINE>
	if they contain equal elements arranged in the same order.  For example,
	<SNIPPET HIDE="yes">
          <NAME>equal_definition</NAME>
          <PYTHON>
// function equal to be written by student
          </PYTHON>
	</SNIPPET>
	<SNIPPET>
	  <NAME>equal_example_1</NAME>
          <REQUIRES>equal_definition</REQUIRES>
	  <EXPECTED>true</EXPECTED>
          <PYTHON>
equal(list("this", "is", "a", "list"), list("this", "is", "a", "list"))
          </PYTHON>
          <PYTHON_TEST>
equal(list("this", "is", "a", "list"), list("this", "is", "a", "list"));
	  </PYTHON_TEST>
	</SNIPPET>
	is true, but
	<SNIPPET>
          <REQUIRES>equal_definition</REQUIRES>
	  <EXPECTED>false</EXPECTED>
          <PYTHON>
equal(list("this", "is", "a", "list"), list("this", list("is", "a"), "list"))
          </PYTHON>
          <PYTHON_TEST>
equal(list("this", "is", "a", "list"), list("this", list("is", "a"), "list"));
	  </PYTHON_TEST>
	</SNIPPET>
	<INDEX>number(s)<SUBINDEX>equality of</SUBINDEX><FRAGILE/></INDEX>
	<INDEX>string(s)<SUBINDEX>equality of</SUBINDEX></INDEX>
	is false.  To be more precise, we can define
	<PYTHONINLINE>equal</PYTHONINLINE> recursively in terms of the
	basic <PYTHONINLINE>===</PYTHONINLINE> equality of numbers and
	strings by
	saying that <PYTHONINLINE>a</PYTHONINLINE> and
	<PYTHONINLINE>b</PYTHONINLINE> are
	<PYTHONINLINE>equal</PYTHONINLINE> if they are both strings or
	both numbers and they are
	<PYTHONINLINE>===</PYTHONINLINE>, or if they are both pairs such
	that <PYTHONINLINE>head(a)</PYTHONINLINE> is
	<PYTHONINLINE>equal</PYTHONINLINE> to
	<PYTHONINLINE>head(b)</PYTHONINLINE> and 
	<PYTHONINLINE>tail(a)</PYTHONINLINE> is
	<PYTHONINLINE>equal</PYTHONINLINE> to
	<PYTHONINLINE>tail(b)</PYTHONINLINE>.  Using this idea,
	implement <PYTHONINLINE>equal</PYTHONINLINE> as a
	function.
	<SOLUTION>
	  The following function implements general structural equality
	  for chapters 1 and 2, assuming that
	  <PYTHONINLINE>===</PYTHONINLINE> can only be applied
	  to two numbers or two strings, and otherwise report an error.
	  The <PYTHONINLINE>equal</PYTHONINLINE> function below
	  will only encounter an error when both
	  arguments are functions, because it is not clear in chapters 1
	  and 2 what equality on functions would mean.
          <SNIPPET>
            <NAME>equal</NAME>
	    <EXPECTED>true</EXPECTED>
	    <EXAMPLE>equal_example_1</EXAMPLE>
            <PYTHON>
function equal(xs, ys) {
    return is_pair(xs)
           ? (is_pair(ys) &amp;&amp;
              equal(head(xs), head(ys)) &amp;&amp; 
              equal(tail(xs), tail(ys)))
           : is_null(xs)
           ? is_null(ys)
           : is_number(xs)
           ? (is_number(ys) &amp;&amp; xs === ys)
           : is_boolean(xs)
           ? (is_boolean(ys) &amp;&amp; ((xs &amp;&amp; ys) || (!xs &amp;&amp; !ys)))
           : is_string(xs)
           ? (is_string(ys) &amp;&amp; xs === ys)
           : is_undefined(xs)
           ? is_undefined(ys)
           : // we know now that xs is a function
             (is_function(ys) &amp;&amp; xs === ys);
}
            </PYTHON>
            <SCHEME>
            </SCHEME>
	  </SNIPPET>
	  In chapter 3, we
	  extend <PYTHONINLINE>===</PYTHONINLINE> such that it
	  can be applied to any value and give meaningful results (pointer
	  equality). The
	  <PYTHONINLINE>equal</PYTHONINLINE> function above will
	  still be valid with this extended meaning of
	  <PYTHONINLINE>===</PYTHONINLINE>, but can be simplified
	  as follows:
          <SNIPPET>
            <NAME>equal_2</NAME>
	    <EXPECTED>true</EXPECTED>
	    <EXAMPLE>equal_example_1</EXAMPLE>
            <PYTHON>
function equal(xs, ys) {
    return is_pair(xs)
           ? (is_pair(ys) &amp;&amp;
              equal(head(xs), head(ys)) &amp;&amp; 
              equal(tail(xs), tail(ys)))
           : xs === ys;
}
            </PYTHON>
            <SCHEME>
            </SCHEME>
	  </SNIPPET>
	</SOLUTION>
      </EXERCISE>

      <EXERCISE>
	The JavaScript interpreter reads the characters after a double
        <INDEX><USE>""</USE> (double quote)</INDEX>
	quotation mark <PYTHONINLINE>"</PYTHONINLINE> until it finds
	another double quotation mark. All characters between the two are part
	of the string, excluding the double quotation marks themselves. But what
	if we want a string to contain double quotation marks? For this
	purpose, JavaScript also allows
	<INDEX>quotation marks<SUBINDEX>single</SUBINDEX></INDEX>
        <INDEX><USE>'</USE> (single quote)</INDEX>
	<EM>single</EM> quotation marks
	to delimit strings, as for example in
	<PYTHONINLINE>'say your name aloud'</PYTHONINLINE>.
	Within singly-quoted strings, we can use double quotation marks, and
	vice versa, so
	<PYTHONINLINE>'say "your name" aloud'</PYTHONINLINE> and
	<PYTHONINLINE>"say 'your name' aloud"</PYTHONINLINE> are valid
	strings that have different characters at positions 4 and 14, if we
	start counting at 0. Depending on the font in use, two single
	quotation marks might not be easily distinguishable from a double
	quotation mark. Can you spot which is which and work out the value of
	the following expression?
        <SNIPPET POSTPADDING="no">
	  <NAME>which_is_which</NAME>
	  <EXPECTED>false</EXPECTED>
          <PYTHON>
'"' === ""
	  </PYTHON>
          <PYTHON_RUN>
'"' === "";
	  </PYTHON_RUN>
        </SNIPPET>

	<SOLUTION>
	  The given expression checks if a string containing only on double-quote
	  character is equal to the empty string. The resulting value is false.
	</SOLUTION>
        <LABEL NAME="ex:double-quotation"/>
      </EXERCISE>
    </PYTHON>
  </SPLIT>

  <SPLITINLINE>
    <SCHEME>
      <INDEX>quotation<CLOSE/></INDEX>
    </SCHEME>
    <PYTHON>
      <INDEX>string(s)<CLOSE/></INDEX>
    </PYTHON>
  </SPLITINLINE>
</SUBSECTION>
