[{"id":"/sicpjs/1.3.4","tag":"TITLE","body":"1.3.4  \n    \n      \n      Functions\n    \n    as Returned Values"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The above examples demonstrate how the ability to pass\n    functions\n    as arguments significantly enhances the expressive power of our programming\n    language.  We can achieve even more expressive power by creating\n    functions\n    whose returned values are themselves\n    functions.","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    We can illustrate this idea by looking again at the fixed-point example\n    described at the end of\n    section ","tag":"#text"},{"tag":"REF","body":"1.3.3","href":"/sicpjs/1.3.3"},{"body":".  We formulated a new\n    version of the square-root\n    function\n    as a fixed-point search, starting with the observation that\n    ","tag":"#text"},{"body":"$\\sqrt{x}$","tag":"LATEX"},{"body":" is a fixed-point of the function\n    ","tag":"#text"},{"body":"$y\\mapsto x/y$","tag":"LATEX"},{"body":".  Then we used average damping to\n    make the approximations converge.  Average damping is a useful general\n    technique in itself.  Namely, given a\n    function ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":", we consider the function\n    whose value at ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is equal to the average of\n    ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$f(x)$","tag":"LATEX"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    We can express the idea of average damping by means of the following\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":9,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwDcBTAJwYHMWAKADwA0oAJ4BKUAG9coGaDYsKRNvX6gA1CPFgATAG5cAX3zFy1OqADOARyIN5-cVNlyFS+n1AAqUH31HCpJS09MzsXCwA+gAmDAC2AA48BI7SsvKKyj6gALwAfIysHNz8QgQOon74oUWRMQk81rbyojwoAAwVQA","body":"function average_damp(f) {\n    return x => average(x, f(x));\n} "},{"body":"\n        The function\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"average_damp"},{"body":"\n    takes as its argument a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":" and returns as its value a\n    function(produced by the lambda expression)\n    that, when applied to a number ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":", produces the\n    average of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" and \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f(x)"},{"body":".\n    For example, applying \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"average_damp"},{"body":"\n    to the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":"function\n    produces a\n    function\n    whose value at some number ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is the average of \n    ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$x^2$","tag":"LATEX"},{"body":".  \n    Applying this resulting\n    function\n    to 10 returns the average of 10 and 100, or 55:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/1.3.4#footnote-1"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":13,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwDcBTAJwYHMWAKADwA0oAJ4BKUAG9coGaDYsKRNvX6gA1CPFgATAG5cAX3zFy1Oo1YduAfQAmDALYAHHgXFTZchUvp9QAXgA+C3YuXkFQAn5RUX0jQlJKWnoAZwBHIgZ5aMlpWXlFZVA-ACpiuPxmUJt7Zx50zPlRHhQABligA","body":"average_damp(square)(10); ","output":"55"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    Using \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"average_damp"},{"body":",\n    we can reformulate the\n    \n    square-root\n    function\n    as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":27,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwDcBTAJwYHMWAKADwA0oAJ4BKUAG9coGaDYsKRNvX6gA1CPFgATAG5cAX3zFy1Oo1YduAfQAmDALYAHHgXFTZchUvp9QAXgA+C3YuXkFQAn5RUX0jQlJKWnoGACMAZ2jJaVl5RWVQP0D-UAAGUAB+QtAALlAAWkK4-DI6dIpQChoAG1DyFgCytFKR0pR9EyTzAio+FltrJxoqEgpXIRm2dutOIhZ09PccmUmzejJumnSWaxYSGiJOAAt+ITFsz088n0YM1Ub3gAeTo9PpkFj6TxGTynZKdNjCawAdyoFBeu32hw+nxkrRI7VAJBYfA6JSiGIOsWOn2+BQuVxudwezx4FPSQiJJNE1JxnyqnIoPN5sjqFARyNRLwFVKh1Np9DFiJRaNcVC2FB2e0pzQSpjh6QAjmw1nwjl9vAUZnMFksVmtmKEbPZnDxhAFgn4wGIhCgqfFDcaeAA2WJAA","body":"function sqrt(x) {\n    return fixed_point(average_damp(y => x / y), 1);\n} "},{"body":"\n    Notice how this formulation makes explicit the three ideas in the method:\n    fixed-point search, average damping, and the function\n    ","tag":"#text"},{"body":"$y\\mapsto x/y$","tag":"LATEX"},{"body":".  It is instructive to compare\n    this formulation of the square-root method with the original version given\n    in section ","tag":"#text"},{"tag":"REF","body":"1.1.7","href":"/sicpjs/1.1.7"},{"body":".  Bear in mind that these\n    functions\n    express the same process, and notice how much clearer the idea becomes when\n    we express the process in terms of these abstractions.  In general, there\n    are many ways to formulate a process as a\n    function.\n    Experienced programmers know how to choose\n    process\n    formulations that are particularly perspicuous, and where useful elements of\n    the process are exposed as separate entities that can be reused in other\n    applications. As a simple example of reuse, notice that the cube root of\n    ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is a fixed point of the function\n    ","tag":"#text"},{"body":"$y\\mapsto x/y^2$","tag":"LATEX"},{"body":", so we can immediately\n    generalize our square-root\n    function\n    to one that extracts \n    \n    cube roots:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/1.3.4#footnote-2"},{"tag":"SNIPPET","latex":false,"id":4,"eval":true,"prependLength":31,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwDcBTAJwYHMWAKADwA0oAJ4BKUAG9coGaDYsKRNvX6gA1CPFgATAG5cAX3zFy1Oo1YduAfQAmDALYAHHgXFTZchUvp9QAXgA+C3YuXkFQAn5RUX0jQlJKWnoGACMAZ2jJaVl5RWVQP0D-UAAGUAB+QtAALlAAWkK4-DI6dIpQChoAG1DyFgCytFKR0pR9EyTzAio+FltrJxoqEgpXIRm2dutOIhZ09PccmUmzejJumnSWaxYSGiJOAAt+ITFsz088n0YM1Ub3gAeTo9PpkFj6TxGTynZKdNjCawAdyoFBeu32hw+nxkrRI7VAJBYfA6JSiGIOsWOn2+BQuVxudwezx4FPSQiJJNE1JxnyqnIoPN5sjqFARyNRLwFVKh1Np9DFiJRaNcVC2FB2e0pzQSpjh6QAjkQGPIsh5ct4Cn4AFRNQzGRJnUBkIipG5sGg0NZ8I5fS30GZzBZLFZrZihGz2Zw8YQBYJ+MCG42msSiIQoKnxF1u6wer08bQAdliQA","body":"function cube_root(x) {\n    return fixed_point(average_damp(y => x / square(y)), 1);\n} "}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Newton's method","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    When we first introduced the square-root\n    function,\n    in section ","tag":"#text"},{"tag":"REF","body":"1.1.7","href":"/sicpjs/1.1.7"},{"body":", we mentioned that this was a\n    special case of\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"Newton's method","tag":"#text"}]},{"body":". If\n    ","tag":"#text"},{"body":"$x\\mapsto g(x)$","tag":"LATEX"},{"body":" is a differentiable function,\n    then a solution of the equation ","tag":"#text"},{"body":"$g(x)=0$","tag":"LATEX"},{"body":" is a\n    fixed point of the function ","tag":"#text"},{"body":"$x\\mapsto f(x)$","tag":"LATEX"},{"body":" where\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      f(x) & = & x - \\dfrac{g(x)}{Dg(x)}\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    and ","tag":"#text"},{"body":"$Dg(x)$","tag":"LATEX"},{"body":" is the derivative of\n    ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" evaluated at ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":".  \n    \n    Newton's method is the use of the fixed-point method we saw above to\n    approximate a solution of the equation by finding a fixed point of the\n    function ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/1.3.4#footnote-3"},{"body":"\n    For many functions ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" and for sufficiently good\n    initial guesses for ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":", Newton's method\n    converges very rapidly to a solution of\n    ","tag":"#text"},{"body":"$g(x)=0$","tag":"LATEX"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/1.3.4#footnote-4"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    In order to implement Newton's method as a\n    function,\n    we must first express the idea of\n    \n    derivative.  Note that\n    \"","tag":"#text"},{"body":"derivative,","tag":"#text"},{"body":"\" like average damping, is something that\n    transforms a function into another function.  For instance, the derivative\n    of the function ","tag":"#text"},{"body":"$x\\mapsto x^3$","tag":"LATEX"},{"body":" is the function\n    ","tag":"#text"},{"body":"$x \\mapsto 3x^2$","tag":"LATEX"},{"body":".  In general, if\n    ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" is a function and\n    ","tag":"#text"},{"body":"$dx$","tag":"LATEX"},{"body":" is a small number, then the derivative\n    ","tag":"#text"},{"body":"$Dg$","tag":"LATEX"},{"body":" of ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" is the\n    function whose value at any number ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is given\n    (in the limit of small ","tag":"#text"},{"body":"$dx$","tag":"LATEX"},{"body":") by\n    ","tag":"#text"},{"body":"\n      \\[\n      \\begin{array}{lll}\n      Dg(x) & = & \\dfrac {g(x+dx) - g(x)}{dx}\n      \\end{array}\n      \\]\n    ","tag":"LATEX"},{"body":"\n    Thus, we can express the idea of derivative (taking\n    ","tag":"#text"},{"body":"$dx$","tag":"LATEX"},{"body":" to be, say, 0.00001) as the\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":3,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuBjAewDsBnAF1ABMAPUAXlAAY1n3mUBufAMwFcSBCgEtSNAKYAnEQDcAFAHMAlKADeuUFtBSJFflJKh6DAHygl8+gGoatVQFpQiq8tVg6PAL59BwsUYE-ABGEq7qOnoGRvQAVMag8bRcoD641NJy8kGhyvIArMpcQA","body":"function deriv(g) {\n    return x => (g(x + dx) - g(x)) / dx;\n} "},{"body":"\n    along with the\n    declaration","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":0,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuBjAewDsBnAF1ABMAPUAXlAAY1n3mUBuIA","body":"const dx = 0.00001; "}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Like \n","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"average_damp"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":" is a\n    function\n    that takes a\n    function\n    as argument and returns a\n    function\n    as value.  For example, to approximate the derivative of\n    ","tag":"#text"},{"body":"$x \\mapsto x^3$","tag":"LATEX"},{"body":" at 5 (whose exact value is 75)\n    we can evaluate\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuBjAewDsBnAF1ABMAPUAXlAAY1n3mUBufAMwFcSBCgEtSNAKYAnEQDcAFAHMAlKADeuUFtBSJFflJKh6DAHygl8+gGoatVQFpQiq8tVg6PAL59BwsUYE-ABGEq7qOnoGRvQAVMag8bRcoD641NJy8kGhyvIArMpcQA","body":"function cube(x) { return x * x * x; }\n\nderiv(cube)(5); ","output":"75.00014999664018"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    With the aid of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"deriv"},{"body":", we can express\n    Newton's method as a fixed-point process:\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":33,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEy4U7nUIyVzuTzefBLfz0UL2KgAN3uHUKPXeGhcslA90GAGpQFSeHoMpwuDwwFTSQzikzQCwAI5EBhiaWHbmY6SgABUBmMir8pRVquE8W4OoxvXolw21jO4QAtuJGjRQmxWvyLRqtSM9BxkihUWTGebHc7wqtHCwCDRhK7ObbBDy+tSBTJJdq5ayORkuNKFZGAtHzG6PV77skHgcCnbeUEQhForF4hWSLGHGdE8nOXXieH8GqrWwAGxPIA","body":"function newton_transform(g) {\n    return x => x - g(x) / deriv(g)(x);\n}\nfunction newtons_method(g, guess) {\n    return fixed_point(newton_transform(g), guess);\n} "},{"body":"\n    The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"newton_transform"},{"body":"function\n    expresses the formula at the beginning of this section, and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"newtons_method"},{"body":"\n    is readily defined in terms of this.  It takes as arguments a\n    function\n    that computes the function for which we want to find a zero, together with\n    an initial guess.  For instance, to find the \n    square root of ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":", we can use\n    \n    Newton's\n    method to find a zero of the function\n    ","tag":"#text"},{"body":"$y\\mapsto y^2-x$","tag":"LATEX"},{"body":" starting with an initial guess\n    of 1.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/1.3.4#footnote-5"},{"body":"\n    This provides yet another form of the square-root\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":36,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEy4U7nUIyVzuTzefBLfz0UL2KgAN3uHUKPXeGhcslA90GAGpQFSeHoMpwuDwwFTSQzikyLqINtYSOFVo4WAQaMIALacw7czHSfl8yXS0By1kcjJcaUKxmlFVq8zhfXiRo0UL3ZIPA4FDG9ehBEIRaKxeKXN0arVnXUGzn+4mosnOgIsACORAYYitQcEPL6MgAVAZjIq-C7s8J4txjcHeTH1SwPV6fWxWubs7n8yM9Bxkig0-ha-EAGxPIA","body":"function sqrt(x) {\n    return newtons_method(y => square(y) - x, 1);\n} "}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"\n      Abstractions and first-class\n      functions","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    We've seen two ways to express the square-root computation as an\n    instance of a more general method, once as a fixed-point search and once\n    using Newton's method.  Since Newton's method was itself\n    expressed as a fixed-point process, we actually saw two ways to compute\n    square roots as fixed points. Each method begins with a function and finds a \n    \n    fixed point of some transformation of the function.  We can express this\n    general idea itself as a\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":34,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEyEYr+egMABuUwyohaww6hR671AgwA1EzQGAAEyk-BLSmMWkOenhUIMAC2kQSzIxvWkLlkIrpDI4yTu3FRZKFpVALAAjsJ4txDizMfQgiEItFYoSaARwqtHCwCDRhFK2NCYcNlRoecNEj6YTS1RLpZFg76uigdYKKfrrWEojE4uFHc6HGd3Z77skXTmPVLkg8DgUFWzk7a0-FC27i-cuKXifHcEaTWwAGxPIA","body":"function fixed_point_of_transform(g, transform, guess) {\n    return fixed_point(transform(g), guess);\n} "},{"body":"\n    This very general\n    function\n    takes as its arguments a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"g"},{"body":"\n    that computes some function, a\n    function\n    that transforms ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"g"},{"body":", and an initial guess.\n    The returned result is a fixed point of the transformed function.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    Using this abstraction, we can recast the first square-root computation\n    \n    from this section (where we look for a fixed point of the average-damped\n    version of ","tag":"#text"},{"body":"$y \\mapsto x/y$","tag":"LATEX"},{"body":") as an instance of\n    this general method:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":31,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEyEYr+ehBEIRaKxQk0AjhVaOFgEGjCAC292SLLO7K5yQeBwKGN6VOCYSiMTibD5bI53IyXCFxNRZKWlMYADcphlRC1hh1Cj13qBBgBqI2gMAAJlJ+E1pR1euqoQYnMiCWNYrNMnkshdDn1hru3HVjopzpYAEdhPFuIcTZiJTTpfTwozmQ5+Yq2NCYcMXIGZGBWokCzCGLrg26PZEK4WuigI7hY-G2AA2J5AA","body":"function sqrt(x) {\n    return fixed_point_of_transform(\n               y => x / y,\n               average_damp,\n               1);\n} "},{"body":"\n    Similarly, we can express the second square-root computation from this\n    section (an instance of\n    \n    Newton's method that finds a fixed point of\n    the Newton transform of ","tag":"#text"},{"body":"$y\\mapsto y^2-x$","tag":"LATEX"},{"body":") as\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":40,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEyEYr+ehBEIRaKxQk0AjhVaOFgEGjCAC292SLLO7K5yQeBwKGN6VOCYSiMTibD5bI53IyXCFxNRZKWlNALAAjkQGGJOB1Cj13hpQAAqAzGUzmSyhGSudyebz4TWlUChexUABu92NYrNjtkoHugwA1J7uEMMkaeGAHaS3RSPZcNtYSMyHPzFf7DibMdIXCGZHpY9GE96-cqjUn3QE0xmWOFOeJGjRQjzQMKA4JTX1qVK6bLG3Qs6yBUqVd21UnyX4PbrhPFo6K+4WUjTpfTwozxzmuWxoTDhsXtXqDaI2CM9BxEseYaPM-LJ-eT10UOr8Ev4gA2J5AA","body":"function sqrt(x) {\n    return fixed_point_of_transform(\n               y => square(y) - x,\n               newton_transform,\n               1);\n} "}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    We began section ","tag":"#text"},{"tag":"REF","body":"1.3","href":"/sicpjs/1.3"},{"body":" with the\n    observation that compound\n    functions\n    are a crucial abstraction mechanism, because they permit us to express\n    general methods of computing as explicit elements in our programming\n    language.  Now we've seen how higher-order\n    functions\n    permit us to manipulate these general methods to create further abstractions.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    As programmers, we should be alert to opportunities to identify the\n    underlying abstractions in our programs and to build upon them and\n    generalize them to create more powerful abstractions.  This is not to say\n    that one should always write programs in the most abstract way possible;\n    expert programmers know how to choose the level of abstraction appropriate\n    to their task.  But it is important to be able to think in terms of these\n    abstractions, so that we can be ready to apply them in new contexts.  The\n    significance of higher-order\n    functions\n    is that they enable us to represent these abstractions explicitly as\n    elements in our programming language, so that they can be handled just\n    like other computational elements.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    In general, programming languages impose restrictions on the ways in which\n    computational elements can be manipulated.  Elements with the fewest\n    restrictions are said to have \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"first-class","tag":"#text"}]},{"body":" status.  Some of the \"","tag":"#text"},{"body":"rights and\n    privileges","tag":"#text"},{"body":"\" of first-class elements are:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-6","body":"6","href":"/sicpjs/1.3.4#footnote-6"},{"tag":"UL","child":[{"tag":"LI","child":[{"body":"They may be referred to using names.","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tThey may be passed as arguments to\n\tfunctions.","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tThey may be returned as the results of\n\tfunctions.","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tThey may be included in data structures.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-7","body":"7","href":"/sicpjs/1.3.4#footnote-7"}]}]},{"body":"JavaScript,\n\tlike other high-level\n      \n    programming languages, awards\n    functions\n    full first-class status.  This poses challenges for efficient\n    implementation, but the resulting gain in expressive power is\n    enormous.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-8","body":"8","href":"/sicpjs/1.3.4#footnote-8"}]},{"tag":"EXERCISE","title":"Exercise 1.40","id":"#ex-1.40","child":[{"body":"Declare a function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"cubic"},{"body":" that can be used together with the \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"newtons_method"},{"body":"function\n    in expressions of the form\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":false,"body":"newtons_method(cubic(a, b, c), 1)"},{"body":"\n    to approximate zeros of the cubic\n    ","tag":"#text"},{"body":"$x^3 +ax^2 +bx +c$","tag":"LATEX"},{"body":".\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":42,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEy4U7nUIyVzuTzefBLfz0UL2KgAN3uHUKPXeGhcslA90GAGpQFSeHoMpwuDwwFTSQzikyLqINtYSOFVo4WAQaMIALacw7czHSfl8yXS0By1kcjJcaUKxmlFVq8zhfXiRo0UL3ZIPA4FDG9ehBEIRaKxeKXN0arVnXUGzn+4mosnOgJkIhMURWoOCHl9GQAKj5pY4CsISpdLAAjkQGGI86DC2by5WQCds1QyBNQDnQBthNsKLV+61QBYiCy4vpJ6JnABRAAai4AStBIOBF6gcEpFX4XVmmD22AxkkxkmQucHedSBcfc9xQKKGKBS3WG03n6KmO++aKZCVjG6osB6Xo+mwx6nigyQ6NgyRKFwyQoE8QA","body":"function cubic(a, b, c) {\n    return x => cube(x) + a * square(x) + b * x + c;\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.41","id":"#ex-1.41","child":[{"body":"Declare a function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"double"},{"body":" that takes a\n    function\n    of one argument as argument and returns a\n    function\n    that applies the original\n    function\n    twice.  For example, if ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"inc"},{"body":" is a\n    function\n    that adds 1 to its argument, then\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"double(inc)"},{"body":"\n    should be a\n    function\n    that adds 2.  What value is returned by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuRQATAewFcAjAGwFNQAXE0CugdwCcBLe+mgO2YBPUAGd6ZIv3oBuUTToBRABoKAStEjgFqHCnwAzMnwDG9TiQGcTACj4BKUAG9coV6HY1x7AQIDUqaVwAX3xSSlprMOoaSPJouztrK2NEgFY7aSA","body":"double(double(double))(inc)(5); "}],"solution":[{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":5,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0K8gChIEpQBvXUH0AJwCmFIn3r0A1KgDcuAL75i5anVAATGkQBGAGwFMC7Lr35CR9AB6gAvAD5QBfU3OtWM+bnVbdTTzr2-dFyZGMlYmAFZXUBATYVEAZ1AAJhQgA","body":"function double(f) {\n    return x => f(f(x));\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.42","id":"#ex-1.42","child":[{"body":"\n    Let ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" and ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" be\n    two one-argument functions.  The\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"composition","tag":"#text"}]},{"body":"$f$","tag":"LATEX"},{"body":" after ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" is\n    defined to be the function ","tag":"#text"},{"body":"$x\\mapsto f(g(x))$","tag":"LATEX"},{"body":".\n    Declare a function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compose"},{"body":" that implements composition.  For\n    example, if ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"inc"},{"body":" is a\n    function\n    that adds 1 to its argument,\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":11,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuRQBjAewFsAHEgZwFNQAXE0AI3oHcAnASwYdoB2rAJ6hqDAK4ATQQwDcY2vQCiADWUAlaJHDLUOAEz4AZhIFEG3EkOoBHCQENOtABQAPAJSgA3rlD-QZ0lOITdQACpQNzlcAF8TMwsrIW5zFwEvXwDA2mChIQBqVBj43FJKGlc7R2cAGlBUog8XADYPOSA","body":"compose(square, inc)(6); ","output":"49"},{"body":"returns 49.","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":9,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0K8gChIEpQBvXUH0AJwCmFIn3r0A1KgDcuAL75i5anVABnAI5EAhoKYAPdl178hI+ntAAqUHpnzCpSrXpkaAWwAONVQKYEANKAA5obcvILCojagALwAfKAETEH6rKx2+K6e3r4a2oKBjGSsTABs6aAgJpEkqqDYAJxAA","body":"function compose(f, g) {\n    return x => f(g(x));\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.43","id":"#ex-1.43","child":[{"body":" \n    If ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is a numerical function and\n","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" is a positive integer, then we can form the\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th\n    \n    repeated application of\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":", which is defined to be the function whose\n    value at ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is\n    ","tag":"#text"},{"body":"$f(f(\\ldots(f(x))\\ldots))$","tag":"LATEX"},{"body":".  For example, if\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the function\n    ","tag":"#text"},{"body":"$x \\mapsto x+1$","tag":"LATEX"},{"body":", then the\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th repeated application of\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the function\n    ","tag":"#text"},{"body":"$x \\mapsto x+n$","tag":"LATEX"},{"body":". If\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the operation of squaring a number, then\n    the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th repeated application of\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the function that raises its argument to\n    the ","tag":"#text"},{"body":"$2^n$","tag":"LATEX"},{"body":"th power.  Write a\n    function\n    that takes as inputs a\n    function\n    that computes ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" and a positive integer\n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" and returns the\n    function\n    that computes the ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th repeated application of\n    ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":".  Your\n    function\n    should be able to be used as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":7,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvhATOAB06sKnACagKNUACNOoAO7sqFQ-QsBPRlKOcSFZY07WAUQANAIAlaEhwANQcDHwuPQNjbmY2LgAaUAAmfm4AVn5lIA","body":"repeated(square, 2)(5); ","output":"625"},{"body":"\n    Hint: You may find it convenient to use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"compose"},{"body":" from\n    exercise ","tag":"#text"},{"tag":"REF","body":"1.42","href":"/sicpjs/1.3.4#ex-1.42"},{"body":".\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":9,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0MmgWwAcaBnAUwAoCAaUAHMAlKADeuUFNAAnThSIz6AD1ABeAHygC3Qd2XDhAblwBffMXLU6odgEciAQzn7RE6bPmKVoAFShlE3NCUkpaejkWTkcKTgATXgESN0lpOQUlUHo1HNAABlSPIoB+APUtZUKi6QAuBmY2LkTPKJj45voAWlRDIPxI6NiE+yc5AQAmYW4AVmNQEFAANnHpoA","body":"function repeated(f, n) {\n    return n === 0\n           ? x => x\n           : compose(f, repeated(f, n - 1));\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.44","id":"#ex-1.44","child":[{"body":" \n  The idea of\n  ","tag":"#text"},{"tag":"EM","child":[{"body":"smoothing","tag":"#text"}]},{"body":" a function is an important concept in\n  \n  signal processing.  If ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is a function and\n  ","tag":"#text"},{"body":"$dx$","tag":"LATEX"},{"body":" is some small number, then the smoothed\n  version of ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the function whose value at a\n  point ","tag":"#text"},{"body":"$x$","tag":"LATEX"},{"body":" is the average of\n  ","tag":"#text"},{"body":"$f(x-dx)$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$f(x)$","tag":"LATEX"},{"body":", and\n  ","tag":"#text"},{"body":"$f(x+dx)$","tag":"LATEX"},{"body":".  Write a\n  function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"smooth"},{"body":" that takes as input a\n  function\n  that computes ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" and returns a\n  function\n  that computes the smoothed ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":".  It is sometimes\n  valuable to repeatedly smooth a function (that is, smooth the smoothed\n  function, and so on) to obtained the ","tag":"#text"},{"tag":"EM","child":[{"body":"$n$","tag":"LATEX"},{"body":"-fold\n  smoothed function","tag":"#text"}]},{"body":".  Show how to generate the\n  ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"-fold smoothed function of any given function\n  using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"smooth"},{"body":" and\n  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"repeated"},{"body":" from\n  exercise ","tag":"#text"},{"tag":"REF","body":"1.43","href":"/sicpjs/1.3.4#ex-1.43"},{"body":".\n  ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":15,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0MogIwFMAKADwEpQBvXUINAAnFhSLD6HUACpQ0uRwDcuAL75i5anQY0AtgAcaAZ3YEANKADmPfkJFiJU0AF4AfKAJsrnLlxXqhKSUtPSiBiwAhhQsACZsFqAktgJCouKSSa4uLqAADKn2RQD88q4eHIVFQgBcuoYmZpbhUTHxifQAtKh+AfhkdMYUoLHSuXloeVN5KCqaITrGejQ0FAAWCSn26U5l7qAJnKDdozwA1J6+oBde0henPGAYffPa9CQA+gQ0ADaxH0sVusEpZknwqjtMi1onE2IDVmtQVxNn1cJ9vn8AcsEWxGKxLABWZHYfxAA","body":"const dx = 0.00001;\nfunction smooth(f) {\n    return x => (f(x - dx) + f(x) + f(x + dx)) / 3;\n}\nfunction n_fold_smooth(f, n) {\n    return repeated(smooth, n)(f);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.45","id":"#ex-1.45","child":[{"body":"\n    We saw in section ","tag":"#text"},{"tag":"REF","body":"1.3.3","href":"/sicpjs/1.3.3"},{"body":" that\n    attempting to compute square roots by naively finding a fixed point of\n    ","tag":"#text"},{"body":"$y\\mapsto x/y$","tag":"LATEX"},{"body":" does not converge, and that this\n    can be fixed by average damping.  The same method works for finding cube\n    roots as fixed points of the average-damped\n    ","tag":"#text"},{"body":"$y\\mapsto x/y^2$","tag":"LATEX"},{"body":". Unfortunately, the process\n    does not work for\n    \n    fourth roots—a single average damp is not enough to make a\n    fixed-point search for ","tag":"#text"},{"body":"$y\\mapsto x/y^3$","tag":"LATEX"},{"body":"\n    converge.  On the other hand, if we average-damp twice (i.e., use the\n    average damp of the average damp of\n    ","tag":"#text"},{"body":"$y\\mapsto x/y^3$","tag":"LATEX"},{"body":") the fixed-point search does\n    converge.  Do some experiments to determine how many average damps are\n    required to compute \n    ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th roots as a fixed-point search based upon\n    repeated average damping of ","tag":"#text"},{"body":"$y\\mapsto x/y^{n-1}$","tag":"LATEX"},{"body":".\n    Use this to implement a simple\n    function\n    for computing ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"th roots using \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fixed_point"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"average_damp"},{"body":",\n    and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"repeated"},{"body":"function\n    of exercise ","tag":"#text"},{"tag":"REF","body":"1.43","href":"/sicpjs/1.3.4#ex-1.43"},{"body":". Assume that any arithmetic\n    operations you need are available as primitives.\n    ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":53,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AQwCMBnACgA8BKUAb11CDQAJwCmFIsPodQAPgC8oAAygA-KBkAuUAFoNAblwBffGTosKoCjQA2o4Q3KjQipWiUelKQ8XLU6oARUHKIAJgD6AA40VCQUbAQANIFUwhbhAOZEoiwsPPxCgaSUtPRkNjQsouGiJDREGQAWnMkAnvkChUJiElKMrJy6oO2gADxWtvaOZKKGhSaFviUBFMKt4QDuVBTNWTl5fJ1doGYkFqAkohyWigRse7lcc8ci4pJlFVU1dQ272bnJS7XLhHF5ddRAiigsFCbSrdZbHZsSFPUELbpvPrwzbbZpBNIUTL-PKGEyEYr+egMABuUwyohaww6hR671AgwA1EzQGAAEyk-BLSmMWkOenhUIMAC2kQSzIxvWkLlkIrpDI4yTu3FRZKFpRONBllQZSVAGXlglZfRk8hVdwynC4OsFFP1YkiogYFDCCUBFteiouLnkrmhx3UNpVHDDXW0ZiNVV9rw9Xp9pvoehQToF5L8+pYAEciAwxI7DizMUqAFQGYwuvMBKgsGq0kjI-1W+j0ACkoF5wdcOb1AQIDHSV0i8SYfvLCrZ9BDoZhgnUKBjhW0TZbtXb66E6kLxdLo-HHEnbGnQb5Tr3gm0TFANZPhInU8BQyzQ9dATijXCwhoGh4hIZJuFnS1KxSEIImiWJ4ndT1vVCNgaTVCVpUiZJb2XHDQClL0-wICoaGENh8J2cIKgyXl2xvXCcLYVplQ0HlAjHF8z3iVp30zJ1Emw3DPzrXBf3-QD4gAVmSDBeSeIA","body":"function nth_root(n, x) {\n    return fixed_point(repeated(average_damp, \n                                math_floor(math_log2(n)))\n                       (y => x / fast_expt(y, n - 1)),\n                       1);\n} "}]},{"tag":"EXERCISE","title":"Exercise 1.46","id":"#ex-1.46","child":[{"body":"\n    Several of the numerical methods described in this chapter are instances\n    of an extremely general computational strategy known as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"iterative improvement","tag":"#text"}]},{"body":".  Iterative improvement says that, to compute something,\n    we start with an initial guess for the answer, test if the guess is good\n    enough, and otherwise improve the guess and continue the process using the\n    improved guess as the new guess.  Write a\n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"iterative_improve"},{"body":"\n    that takes two\n    functions\n    as arguments: a method for telling whether a guess is good enough and a\n    method for improving a guess.\n    The function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"iterative_improve"},{"body":"\n    should return as its value a\n    function\n    that takes a guess as argument and keeps improving the guess until it is\n    good enough.  Rewrite the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sqrt"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"1.1.7","href":"/sicpjs/1.1.7"},{"body":" and the \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fixed_point"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"1.3.3","href":"/sicpjs/1.3.3"},{"body":" in terms of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"iterative_improve"},{"body":".\n      ","tag":"#text"}],"solution":[{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":21,"program":"chap=1&prgrm=PTAEGUEkGEAVQFLlARgHQGY0BYBQuAzAVwDsBjAFwEsB7E0AZwEciBDAJwFMAKADwEpQAb1ygxoLhSLt6vUACpQvANy4AvvmLlqdUKwBundqwDmPXgBpQAT0EjxEzlJmg+oANQ3BYAEyqNhKSUtPRUALYADuw0htwmRJwMDFYCwqLiktL0BkamPPGJyUqgYAVJ-P6aQTrZAEYMfHbpYpkucgB8ALygAAygAPzFAFygALRKlYHaIaBUDAD6JjQ0ACbznCQ0RCYAFnEJSSlNDq11DcxsXPuFguOpADy9aD09KJNawbpUFLnUhvPhKIxHhzRbLNYbLa7KyA6KGY7iD41WY-Yw-a7lNIOE5OLKzBZLVbrTbbPZlBj8ZrY6kDUDkqk0hwjb6-EGROH5A4UipUjQ45yhVGsH7vaozZjsCiNLEZXEuFloqj-WHA7jWUCddr4sFEyGktVHKwMxkmmnqzWzdmq6xHfjcFA8gISqXYACcFSAA","body":"function iterative_improve(is_good_enough, improve) {\n    function iterate(guess) {\n        return is_good_enough(guess)\n               ? guess\n               : iterate(improve(guess));\n    }\n    return iterate;\n} "}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/1.3.4#footnote-link-1","child":[{"body":"\n\tObserve that this\n\tis an application whose function expression is itself\n\t\n\tan application. Exercise ","tag":"#text"},{"tag":"REF","body":"1.4","href":"/sicpjs/1.1.6#ex-1.4"},{"body":" already\n\tdemonstrated the ability to form such applications, but that was only a toy\n\texample.  Here we begin to see the real need for such\n\tapplications—when applying a function\n\tthat is obtained as the value returned by a higher-order function.\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/1.3.4#footnote-link-2","child":[{"body":"See exercise ","tag":"#text"},{"tag":"REF","body":"1.45","href":"/sicpjs/1.3.4#ex-1.45"},{"body":" \n    for a further generalization.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/1.3.4#footnote-link-3","child":[{"body":"Elementary calculus books\n    usually describe Newton's method in terms of the sequence of\n    approximations ","tag":"#text"},{"body":"$x_{n+1}=x_n-g(x_n)/Dg(x_n)$","tag":"LATEX"},{"body":".\n    Having language for talking about processes and using the idea of fixed\n    points simplifies the description of the method.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/1.3.4#footnote-link-4","child":[{"body":"Newton's method does not\n    always converge to an answer, but it can be shown that in favorable cases\n    each iteration doubles the number-of-digits accuracy of the approximation\n    to the solution. In such cases, \n    \n    Newton's method will converge much more rapidly than the half-interval\n    method.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/1.3.4#footnote-link-5","child":[{"body":"For finding square roots, Newton's method converges\n    rapidly to the correct solution from any starting point.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-6","count":6,"href":"/sicpjs/1.3.4#footnote-link-6","child":[{"body":"The notion of\n    first-class status of programming-language\n    elements is due to the British computer scientist\n    \n    Christopher Strachey (1916–1975).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-7","count":7,"href":"/sicpjs/1.3.4#footnote-link-7","child":[{"body":"We'll see\n\texamples of this after we introduce data structures in\n\tchapter ","tag":"#text"},{"tag":"REF","body":"2","href":"/sicpjs/2"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-8","count":8,"href":"/sicpjs/1.3.4#footnote-link-8","child":[{"body":"The major implementation cost of first-class\n    functions\n    is that allowing\n    functions\n    to be returned as values requires reserving storage for a\n    function's free names\n    even while the\n    function\n    is not executing.  \n    \n\tIn the JavaScript implementation we will study in\n\tsection ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":", these names are stored in the\n\tfunction's\n       environment.","tag":"#text"}]}]