<SUBSECTION> 
   <NAME>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为返回值
  </NAME> 

  <LABEL NAME="sec:proc-returned-values"></LABEL>

   <INDEX>高阶 <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> 作为返回值<OPEN></OPEN></SUBINDEX></INDEX> 
   <INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>返回</ORDER>作为返回值<OPEN></OPEN></SUBINDEX></INDEX> 
  
   <TEXT>
    上述示例演示了将
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数传递的能力如何显著增强了我们编程语言的表达能力。我们可以通过创建返回值本身就是
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的
    <SPLITINLINE>
      过程。
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    实现更强的表达能力。
  </TEXT> 
   <TEXT>
    我们可以通过再次查看在
    section<SPACE></SPACE><REF NAME="sec:proc-general-methods"></REF>结束处描述的不动点示例来说明这个想法。我们将平方根的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    版本公式化为不动点搜索，首先观察到
    $\sqrt{x}$ 是函数
    $y\mapsto x/y$ 的不动点。然后我们使用平均阻尼来使近似收敛。平均阻尼本身就是一种有用的通用技术。也就是说，给定一个
    function<SPACE></SPACE>$f$，我们考虑在 $x$ 处的值等于
    $x$ 和 $f(x)$ 的平均值的函数。
  </TEXT> 
  <TEXT> 
    我们可以通过以下
    <SPLITINLINE>
      过程:
      <JAVASCRIPT>函数:</JAVASCRIPT>
    </SPLITINLINE>
    来表达平均阻尼的思想
     <SNIPPET PAGE="72">
      <INDEX><DECLARATION>average_damp</DECLARATION></INDEX>
      <NAME>average_damp_definition</NAME>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>average_damp_example</EXAMPLE>
      <EXPECTED>55</EXPECTED>
      <SCHEME>
(define (average-damp f)
  (lambda (x) (average x (f x))))
      </SCHEME>
      <JAVASCRIPT>
function average_damp(f) {
    return x =&gt; average(x, f(x));
}
      </JAVASCRIPT>
    </SNIPPET>
     <SPLITINLINE>
      
        平均阻尼
	是一个过程
      
      <JAVASCRIPT>
        函数
        <JAVASCRIPTINLINE>average_damp</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的参数为一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>f</SCHEMEINLINE>  并返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      (由 lambda 生成)
      <JAVASCRIPT>(由 lambda 表达式生成)</JAVASCRIPT>
    </SPLITINLINE>
    当应用于一个数字时<SPACE></SPACE> <SCHEMEINLINE>x</SCHEMEINLINE> ，生成
    平均值  <SCHEMEINLINE>x</SCHEMEINLINE>  和
    <SPLITINLINE>
      (f x).
      <JAVASCRIPT><JAVASCRIPTINLINE>f(x)</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    例如，应用
    <SPLITINLINE>
      
        平均阻尼
      
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>average_damp</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    到  <SCHEMEINLINE>square</SCHEMEINLINE>
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    生成一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    在某个数字处的值  <LATEXINLINE>$x$</LATEXINLINE> 是
    平均值  <LATEXINLINE>$x$</LATEXINLINE> 和  <LATEXINLINE>$x^2$</LATEXINLINE> 。 
    应用这个结果的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    到 10 返回 10 和 100 的平均值，即 55:<FOOTNOTE>
    <SPLIT>
      
	注意这是一个运算符本身是
	<INDEX>组合<SUBINDEX>组合作为运算符的</SUBINDEX></INDEX>
	<INDEX>组合<SUBINDEX><ORDER>运算符</ORDER>作为组合的运算符</SUBINDEX></INDEX>
	<INDEX>组合的运算符<SUBINDEX>作为的组合</SUBINDEX></INDEX>
	一个组合。练习<SPACE></SPACE><REF NAME="ex:a-plus-abs-b"></REF>已经展示了形成这种组合的能力，但那只是一个玩具示例。这里我们开始看到这种组合的实际需求<EMDASH></EMDASH>当应用一个过程时，该过程是由高阶过程返回的值获得的。
      
      <JAVASCRIPT>
	注意这是一个函数表达式本身是
	<INDEX>函数应用<SUBINDEX><ORDER>函数</ORDER>作为应用的函数表达式</SUBINDEX></INDEX>
	<INDEX>函数表达式<SUBINDEX>应用作为</SUBINDEX></INDEX>
	一个应用。练习<SPACE></SPACE><REF NAME="ex:a-plus-abs-b"></REF>已经展示了形成这种应用的能力，但那只是一个玩具示例。这里我们开始看到这种应用的实际需要<EMDASH></EMDASH>当应用一个函数时，该函数是由高阶函数返回的值获得的。
      </JAVASCRIPT>
    </SPLIT>
  </FOOTNOTE>
     <SNIPPET PAGE="73">
      <NAME>average_damp_example</NAME>
      <REQUIRES>average_damp_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
((average-damp square) 10)
      </SCHEME>
      <SCHEMEOUTPUT>
55
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
average_damp(square)(10);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
55
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT> 
    使用 
    <SPLITINLINE>
      平均阻尼,
      <JAVASCRIPT><JAVASCRIPTINLINE>average_damp</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    我们可以重新表述
    <INDEX>不动点<SUBINDEX>平方根作为</SUBINDEX></INDEX>
    平方根
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    如下:
     <SNIPPET PAGE="73">
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>    
      <NAME>sqrt_definition4</NAME>
      <REQUIRES>average_damp_definition</REQUIRES>
      <REQUIRES>fixed_definition</REQUIRES>
      <EXAMPLE>sqrt_example3</EXAMPLE>
      <SCHEME>
(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return fixed_point(average_damp(y =&gt; x / y), 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_example3</NAME>
      <REQUIRES>sqrt_definition4</REQUIRES>
      <EXPECTED>2.4494897427875517</EXPECTED>
      <JAVASCRIPT>
sqrt(6);
      </JAVASCRIPT>
    </SNIPPET> 
    注意这种表述如何明确了方法中的三个概念：
    不动点搜索、平均阻尼和函数
     <LATEXINLINE>$y\mapsto x/y$</LATEXINLINE> 。 比较平方根方法的这种表述与在 section<SPACE></SPACE><REF NAME="sec:sqrt"></REF>中给出的原始版本是很有启发的。请记住，这些
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    表达相同的过程，并注意当我们用这些抽象表达过程时，概念变得多么清晰。一般来说，有许多方法可以将一个过程表述为一个
    <SPLITINLINE>
      过程。
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    经验丰富的程序员知道如何选择特别清晰的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>过程</JAVASCRIPT>
    </SPLITINLINE>
    表述方式，并在此过程中有用的元素被作为独立实体暴露出来，能够在其他应用中重复使用。作为实现重用的一种简单示例，请注意立方根
     <LATEXINLINE>$x$</LATEXINLINE> 是函数的一个不动点
     <LATEXINLINE>$y\mapsto x/y^2$</LATEXINLINE> ，因此我们可以立即
    将平方根的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    推广到一个提取 
    <INDEX>立方根<SUBINDEX><ORDER>固定</ORDER>作为不动点</SUBINDEX></INDEX>
    <INDEX>不动点<SUBINDEX>立方根作为</SUBINDEX></INDEX>
    立方根的过程:<FOOTNOTE>参见练习<SPACE></SPACE><REF NAME="ex:nth-roots"></REF> 
    以获得进一步的推广。</FOOTNOTE>
    <INDEX><DECLARATION>cube_root</DECLARATION></INDEX>
     <SNIPPET PAGE="73">
      <INDEX><DECLARATION>cube_root</DECLARATION></INDEX>
      <NAME>cube_root_definition</NAME>
      <REQUIRES>average_damp_definition</REQUIRES>
      <REQUIRES>fixed_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>cube_root_example</EXAMPLE>
      <SCHEME>
(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0))
      </SCHEME>
      <JAVASCRIPT>
function cube_root(x) {
    return fixed_point(average_damp(y =&gt; x / square(y)), 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="24" HIDE="yes">
      <NAME>cube_root_example</NAME>
      <REQUIRES>cube_root_definition</REQUIRES>
      <EXPECTED>2.9999972321057697</EXPECTED>
      <SCHEME>
(cube-root 27)
      </SCHEME>
      <JAVASCRIPT>
cube_root(27);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

   <SUBHEADING>
    <NAME>牛顿法</NAME>
  </SUBHEADING> 

  <TEXT> 
    当我们第一次在 section<SPACE></SPACE><REF NAME="sec:sqrt"></REF>中介绍平方根
    <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    我们提到这是
    <INDEX>牛顿法<SUBINDEX><ORDER>可微</ORDER>用于可微函数<OPEN></OPEN></SUBINDEX></INDEX>
    <EM>牛顿法</EM>的一个特例。如果
     <LATEXINLINE>$x\mapsto g(x)$</LATEXINLINE> 是可微函数，
    那么方程的一个解  <LATEXINLINE>$g(x)=0$</LATEXINLINE> 是函数的
    不动点  <LATEXINLINE>$x\mapsto f(x)$</LATEXINLINE>  在
     <LATEX>
      \[
      \begin{array}{lll}
      f(x) &amp; = &amp; x - \dfrac{g(x)}{Dg(x)}
      \end{array}
      \]
    </LATEX> 
    和  <LATEXINLINE>$Dg(x)$</LATEXINLINE> 是
    的导数
     <LATEXINLINE>$g$</LATEXINLINE>  在 处求值  <LATEXINLINE>$x$</LATEXINLINE>.  
     <INDEX>不动点<SUBINDEX><ORDER>牛顿</ORDER>在牛顿法中</SUBINDEX></INDEX>
    牛顿法是在上面看到的不动点方法中使用不动点来通过寻找函数的不动点来逼近方程的解
     <LATEXINLINE>$f$</LATEXINLINE>. <FOOTNOTE>初等微积分书籍通常用逼近序列 $x_{n+1}=x_n-g(x_n)/Dg(x_n)$ 来描述牛顿法。拥有描述过程的语言并使用不动点的概念可以简化方法的描述。</FOOTNOTE>
    对于许多函数  <LATEXINLINE>$g$</LATEXINLINE>  并且对于足够好的初始猜测  <LATEXINLINE>$x$</LATEXINLINE> ，牛顿法
    非常快速地收敛到
     <LATEXINLINE>$g(x)=0$</LATEXINLINE>. <FOOTNOTE>牛顿法并不总是收敛到一个解，但可以证明，在有利情况下，每次迭代都会使逼近解的数字位数加倍。在这种情况下， 
    <INDEX>牛顿法<SUBINDEX>与半区间法比较</SUBINDEX></INDEX>
    <INDEX>半区间法<SUBINDEX>与牛顿法比较</SUBINDEX></INDEX>
    牛顿法将比半区间法收敛得快得多。</FOOTNOTE>
   </TEXT>

   <SHORT_PAGE LINES="3"></SHORT_PAGE> 
  <TEXT> 
    为了将牛顿法实现为一个
    <SPLITINLINE>
      过程,
      <JAVASCRIPT>函数,</JAVASCRIPT>
    </SPLITINLINE>
    我们首先必须表达
    <INDEX>函数的导数</INDEX>
    <INDEX>函数 (数学)<SUBINDEX>导数</SUBINDEX></INDEX>
    <INDEX>微分<SUBINDEX>数值</SUBINDEX></INDEX>
    导数的概念。请注意，“导数”就像平均阻尼，是将一个函数变换为另一个函数的东西。例如，函数的导数
     <LATEXINLINE>$x\mapsto x^3$</LATEXINLINE>  是函数
     <LATEXINLINE>$x \mapsto 3x^2$</LATEXINLINE> 。一般来说，如果
     <LATEXINLINE>$g$</LATEXINLINE>  是一个函数并且
     <LATEXINLINE>$dx$</LATEXINLINE>  是一个小数，那么导数
     <LATEXINLINE>$Dg$</LATEXINLINE>  的  <LATEXINLINE>$g$</LATEXINLINE>  是在任何数字处的值为
    的函数
     <LATEXINLINE>$x$</LATEXINLINE>  给出
    （在小  <LATEXINLINE>$dx$</LATEXINLINE> )由
     <LATEX>
      \[
      \begin{array}{lll}
      Dg(x) &amp; = &amp; \dfrac {g(x+dx) - g(x)}{dx}
      \end{array}
      \]
    </LATEX> 
    因此，我们可以表达导数的概念（取
     <LATEXINLINE>$dx$</LATEXINLINE>  设置为0.00001)为
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET PAGE="74">
      <NAME>deriv_definition</NAME>
      <REQUIRES>dx</REQUIRES>
      <EXAMPLE>deriv_example</EXAMPLE>
      <SCHEME>
(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
      </SCHEME>
      <JAVASCRIPT>
function deriv(g) {
    return x =&gt; (g(x + dx) - g(x)) / dx;
}
      </JAVASCRIPT>
    </SNIPPET> 
    以及
    <SPLITINLINE>
      定义
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <NAME>dx</NAME>
      <SCHEME>
(define dx 0.00001)
      </SCHEME>
      <JAVASCRIPT>
const dx = 0.00001;
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   <TEXT>
    像
<INDEX><DECLARATION>deriv</DECLARATION> (数值)</INDEX>
    <SPLITINLINE>
      平均阻尼,
      <JAVASCRIPT><JAVASCRIPTINLINE>average_damp</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><DECLARATION>deriv</DECLARATION> (数值)</INDEX>
    deriv 是一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    接受一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数并返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为值。例如，要近似
    $x \mapsto x^3$ 在 5 处的导数（其确切值是 75）
    我们可以计算
    
      <INDEX><DECLARATION>立方</DECLARATION></INDEX>
      <NAME>deriv_example</NAME>
      <REQUIRES>deriv_definition</REQUIRES>
      <EXPECTED>75.00014999664018</EXPECTED>
      
(define (cube x) (* x x x))

((deriv cube) 5)
      
      <SCHEMEOUTPUT>
75.00014999664018
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
function cube(x) { return x * x * x; }

deriv(cube)(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
75.00014999664018
      </JAVASCRIPT_OUTPUT>
    
  </TEXT> 

  <TEXT> 
    借助
     <SCHEMEINLINE>deriv</SCHEMEINLINE> ，我们可以将牛顿法表示为一个不动点过程:

     <SNIPPET PAGE="74-75">
      <INDEX><DECLARATION>newton_transform</DECLARATION></INDEX>
      <INDEX><DECLARATION>newtons_method</DECLARATION></INDEX>
      <NAME>newtons_method_definition</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <REQUIRES>deriv_definition</REQUIRES>
      <EXAMPLE>sqrt_example4</EXAMPLE>
      <EXPECTED>2.4494897427970397</EXPECTED>
      <SCHEME>
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point 
    (newton-transform g) guess))
      </SCHEME>
      <JAVASCRIPT>
function newton_transform(g) {
    return x =&gt; x - g(x) / deriv(g)(x);
}
function newtons_method(g, guess) {
    return fixed_point(newton_transform(g), guess);
}
      </JAVASCRIPT>
    </SNIPPET> 
    这个
    <SPLITINLINE>
      newton_transform
      <JAVASCRIPT><JAVASCRIPTINLINE>newton_transform</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    表达了本节开头的公式，而
    <SPLITINLINE>
      
      newtons_method
      <JAVASCRIPT><JAVASCRIPTINLINE>newtons_method</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    可以由此定义。它接受一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数，该过程计算出我们想要找零的函数，以及一个初始猜测。例如，要找  的平方根【180:0†cn.txt】
    <LATEXINLINE>$x$</LATEXINLINE> ，我们可以使用
    <INDEX>牛顿法<SUBINDEX><ORDER>平方</ORDER>用于平方根</SUBINDEX></INDEX>
    牛顿法
    来找到函数的零点
     <LATEXINLINE>$y\mapsto y^2-x$</LATEXINLINE> ，我们可以使用
    <INDEX>牛顿法<SUBINDEX><ORDER>平方</ORDER>用于平方根</SUBINDEX></INDEX>
    牛顿法找到该函数的零点，初始猜测为1。<FOOTNOTE>对于寻找平方根，牛顿法从任何起始点快速收敛到正确的解决方案。</FOOTNOTE>
    这提供了平方根的又一种形式
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET PAGE="75" POSTPADDING="no">
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>Newton</ORDER>with Newton<APOS></APOS>s method</SUBINDEX></INDEX>
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>    
      <NAME>sqrt_definition5</NAME>
      <REQUIRES>newtons_method_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>sqrt_example4</EXAMPLE>
      <SCHEME>
(define (sqrt x)
  (newtons-method (lambda (y) (- (square y) x))
                  1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return newtons_method(y =&gt; square(y) - x, 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_example4</NAME>
      <REQUIRES>sqrt_definition5</REQUIRES>
      <JAVASCRIPT>
sqrt(6);
      </JAVASCRIPT>
    </SNIPPET>
     <INDEX>牛顿法<SUBINDEX><ORDER>可微</ORDER>用于可微函数</SUBINDEX></INDEX>
   </TEXT>

   <SUBHEADING>
    <NAME>
      抽象与一等
      <SPLITINLINE>
	过程
	<JAVASCRIPT>函数</JAVASCRIPT>
      </SPLITINLINE>
    </NAME>
  </SUBHEADING> 

   <TEXT>
    我们已经看到两种将平方根计算表示为更一般方法实例的方式，一种是作为不动点搜索，另一种是使用牛顿法。由于牛顿法本身被表达为一个不动点过程，我们实际上看到了两种以不动点计算平方根的方法。每种方法都从一个函数开始，并找到该函数某种变换的不动点。我们可以将这个一般的思想本身表达为一个
    <SPLITINLINE>
      过程：
      <JAVASCRIPT>函数：</JAVASCRIPT>
    </SPLITINLINE>
    
      <INDEX><DECLARATION>fixed_point_of_transform</DECLARATION></INDEX>
      <NAME>fixed_point_of_transform_definition</NAME>
      <REQUIRES>fixed_definition</REQUIRES>
      <EXAMPLE>sqrt_example5</EXAMPLE>
      <EXPECTED>2.4494897427875517</EXPECTED>
      
(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
      
      <JAVASCRIPT>
function fixed_point_of_transform(g, transform, guess) {
    return fixed_point(transform(g), guess);
}
      </JAVASCRIPT>
    
    这个非常通用的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    接受一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    g 作为参数，它计算某个函数，一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    转换g，以及一个初始猜测。返回的结果是不动点的变换函数。
  </TEXT> 

  <TEXT> 
    使用这个抽象，我们可以重铸本节中第一个平方根的计算
    <INDEX>不动点<SUBINDEX>平方根作为</SUBINDEX></INDEX>
    (我们在平均阻尼版本的  <LATEXINLINE>$y \mapsto x/y$</LATEXINLINE> ) 作为这个一般方法的一个实例：
     <SNIPPET PAGE="75">
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>    
      <NAME>sqrt_definition6</NAME>
      <REQUIRES>fixed_point_of_transform_definition</REQUIRES>
      <REQUIRES>average_damp_definition</REQUIRES>
      <EXAMPLE>sqrt_example5</EXAMPLE>
      <EXPECTED>2.4494897427875517</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (fixed-point-of-transform (lambda (y) (/ x y))
                            average-damp
                            1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return fixed_point_of_transform(
               y =&gt; x / y,
               average_damp,
               1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_example5</NAME>
      <REQUIRES>sqrt_definition6</REQUIRES>
      <JAVASCRIPT>
sqrt(6);
      </JAVASCRIPT>
    </SNIPPET> 
    类似地，我们可以将本节中的第二个平方根计算（一个
    <INDEX>牛顿法<SUBINDEX><ORDER>平方</ORDER>用于平方根</SUBINDEX></INDEX>
    牛顿法的实例，用于找到牛顿变换的
     <LATEXINLINE>$y\mapsto y^2-x$</LATEXINLINE> ) 表示为
     <SNIPPET PAGE="76">
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>fixed</ORDER>as fixed point</SUBINDEX></INDEX>
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX><ORDER>Newton</ORDER>with Newton<APOS></APOS>s method</SUBINDEX></INDEX>
      <NAME>sqrt_definition7</NAME>
      <REQUIRES>fixed_point_of_transform_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>newtons_method_definition</REQUIRES>
      <EXAMPLE>sqrt_example6</EXAMPLE>
      <SCHEME>
(define (sqrt x)
  (fixed-point-of-transform (lambda (y) (- (square y) x))
                            newton-transform
                            1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    return fixed_point_of_transform(
               y =&gt; square(y) - x,
               newton_transform,
               1);
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_example6</NAME>
      <REQUIRES>sqrt_definition7</REQUIRES>
      <JAVASCRIPT>
sqrt(6);
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   <TEXT>
    我们开始在 section<SPACE></SPACE><REF NAME="sec:higher-order-procedures"></REF>观察到复合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是一个关键的抽象机制，因为它们允许我们将计算的一般方法表示为在我们的编程语言中明确的元素。现在我们已经看到，高阶
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    允许我们操作这些一般方法来创建进一步的抽象。
  </TEXT> 
   <TEXT>
    我们在 section<SPACE></SPACE><REF NAME="sec:higher-order-procedures"></REF> 开始时观察到复合
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    是一个关键的抽象机制，因为它们允许我们将计算的一般方法表示为在我们的编程语言中明确的元素。现在我们已经看到，高阶
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    允许我们操作这些一般方法来创建进一步的抽象。
  </TEXT> 
  <TEXT> 
    通常，编程语言对计算元素的操作方式施加限制。 限制最少的元素则被称为
    <INDEX>语言中的一等公民</INDEX>
    <EM>一等公民</EM>。 一等公民的一些<QUOTE>权利和特权</QUOTE>包括:<FOOTNOTE>编程语言元素的一等公民概念由英国计算机科学家
    <INDEX>Strachey, Christopher</INDEX>
    Christopher Strachey (1916<ENDASH></ENDASH>1975) 提出。</FOOTNOTE>
    <UL>
      <LI>
	<SPLITINLINE>
	  它们可以通过变量命名。
	  <JAVASCRIPT>它们可以通过名称引用。</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	它们可以作为参数传递给
	<SPLITINLINE>
	  过程。
	  <JAVASCRIPT>函数。</JAVASCRIPT>
	</SPLITINLINE>
      </LI>
      <LI>
	它们可以作为返回结果从
	<SPLITINLINE>
	  过程。
	  <JAVASCRIPT>函数。</JAVASCRIPT>
	</SPLITINLINE>
	返回
      </LI>
      <LI>
	它们可以被包含在数据结构中。<FOOTNOTE>我们将在引入数据结构后，在第<SPACE></SPACE><REF NAME="chap:data"></REF>章中看到这一点的例子。</FOOTNOTE>
      </LI>
    </UL>
    <SPLITINLINE>
      Lisp,
      <JAVASCRIPT>JavaScript,</JAVASCRIPT>
    </SPLITINLINE>
    <INDEX><SPLITINLINE>Lisp<JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE><SUBINDEX>中的一等<SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
    <INDEX><FUNCTION></FUNCTION><SUBINDEX>一等公民</SUBINDEX></INDEX>
    <SPLITINLINE>
      
      与其他编程语言不同,
      
      <JAVASCRIPT>
      作为其他高级编程语言中的一部分
      </JAVASCRIPT>
    </SPLITINLINE>
    的编程语言
      <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    完全的一等地位。这对高效实现提出了挑战，但由此带来的表达能力的提升是巨大的。<FOOTNOTE>一等
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    主要的实现代价在于允许
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为值返回，需要为
    <SPLITINLINE>
      过程<APOS></APOS>的自由变量
      <JAVASCRIPT>函数<APOS></APOS>的自由名称</JAVASCRIPT>
    </SPLITINLINE>
    保留存储空间，即使
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    没有执行。
    <SPLITINLINE>
      
        在我们将在
        section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF>中研究的 Scheme 实现中，这些变量存储在过程的
      
      <JAVASCRIPT>
        在我们将在
        section<SPACE></SPACE><REF NAME="sec:mc-eval"></REF>中研究的 JavaScript 实现中，这些名称存储在函数的
      </JAVASCRIPT>
    </SPLITINLINE> 环境中。</FOOTNOTE>
   </TEXT>

  <EXERCISE>             
     <SPLITINLINE>
      定义一个过程
      <JAVASCRIPT>声明一个函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>cubic</SCHEMEINLINE> ，它可以与 
    <SPLITINLINE>
      newtons_method
      <JAVASCRIPT><JAVASCRIPTINLINE>newtons_method</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    一起在以下形式的表达式中使用
     <SNIPPET PAGE="77" HIDE="yes">
      <NAME>cubic_definition</NAME>
      <SCHEME>
;; cubic to be written by student; see EXERCISE 1.40
      </SCHEME>
      <JAVASCRIPT>
// cubic to be written by student; see EXERCISE 1.40
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="77" EVAL="no">
      <NAME>cubic_example</NAME>
      <REQUIRES>newtons_method_definition</REQUIRES>
      <REQUIRES>cubic_definition</REQUIRES>
      <SCHEME>
(newtons-method (cubic a b c) 1)
      </SCHEME>
      <JAVASCRIPT>
newtons_method(cubic(a, b, c), 1)
      </JAVASCRIPT>
    </SNIPPET> 
    来近似多项式的零点
     <LATEXINLINE>$x^3 +ax^2 +bx +c$</LATEXINLINE>.
     <SOLUTION>
      
	<NAME>cubic_definition_2</NAME>
	<REQUIRES>newtons_method_definition</REQUIRES>
	<REQUIRES>cube_definition</REQUIRES>
	<REQUIRES>square_definition</REQUIRES>
	<EXAMPLE>cubic_example_2</EXAMPLE>
	<EXPECTED>1.5615528128102987</EXPECTED>
	<JAVASCRIPT>
function cubic(a, b, c) {
    return x =&gt; cube(x) + a * square(x) + b * x + c;
}
	</JAVASCRIPT>
	
	
      
      
        <NAME>cubic_example_2</NAME>
        <REQUIRES>newtons_method_definition</REQUIRES>
        <REQUIRES>cubic_definition</REQUIRES>
        
(newtons-method (cubic a b c) 1)
        
        <JAVASCRIPT>
newtons_method(cubic(1, -4, 0), 1);
        </JAVASCRIPT>
      
    </SOLUTION>
     <LABEL NAME="ex:1_40"></LABEL>
  </EXERCISE>

  <EXERCISE>
     <SPLITINLINE>
      定义一个过程
      <JAVASCRIPT>声明一个函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>double</SCHEMEINLINE>  接受一个
    <SPLITINLINE>
      单参数过程
      <JAVASCRIPT>单参数函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数并返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    该过程应用原始的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    两次。例如，若【250:0†source】
<SCHEMEINLINE>inc</SCHEMEINLINE>  接受一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数并返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    该过程将原始的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应用两次。例如，若【250:4†cn.txt】<SNIPPET PAGE="77" HIDE="yes">
      <NAME>double_definition</NAME>
      <SCHEME>
;; double to be written by student; see EXERCISE 1.41
      </SCHEME>
      <JAVASCRIPT>
// double to be written by student; see EXERCISE 1.41
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="77" POSTPADDING="no">
      <NAME>double_example</NAME>
      <REQUIRES>double_definition</REQUIRES>
      <REQUIRES>inc_definition</REQUIRES>
      <SCHEME>
(((double (double double)) inc) 5)
      </SCHEME>
      <JAVASCRIPT>
double(double(double))(inc)(5);
      </JAVASCRIPT>
    </SNIPPET>
     <SOLUTION>       
      
	<REQUIRES>inc_definition</REQUIRES>
	<EXPECTED>21</EXPECTED>
	<EXAMPLE>double_example_solution</EXAMPLE>
	<JAVASCRIPT>
function double(f) {
    return x =&gt; f(f(x));
}
	</JAVASCRIPT>
	
	
      
      
	<NAME>double_example_solution</NAME>
	<REQUIRES>inc_definition</REQUIRES>
	<JAVASCRIPT>
double(double(double))(inc)(5); // returns 21
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
     <LABEL NAME="ex:1_41"></LABEL>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:compose"></LABEL> 
    让 
     <LATEXINLINE>$f$</LATEXINLINE>  和  <LATEXINLINE>$g$</LATEXINLINE> 是两个单参数
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。
    <INDEX>函数复合</INDEX>
    <INDEX>函数 (数学)<SUBINDEX>复合</SUBINDEX></INDEX>
    <EM>复合</EM>
     <LATEXINLINE>$f$</LATEXINLINE>  在 之后  <LATEXINLINE>$g$</LATEXINLINE>  被定义为函数 
     <LATEXINLINE>$x\mapsto f(g(x))$</LATEXINLINE>.
     <SPLITINLINE>
      定义一个过程
      <JAVASCRIPT>声明一个函数</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>compose</SCHEMEINLINE>  实现复合的
    <SPLITINLINE>
      过程。对于
      <JAVASCRIPT>函数。例如，若</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>inc</SCHEMEINLINE>  是一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    可以对其参数加1 
     <SNIPPET PAGE="77" HIDE="yes">
      <NAME>compose_definition</NAME>
      <SCHEME>
;; compose to be written by student; see EXERCISE 1.42
      </SCHEME>
      <JAVASCRIPT>
// compose to be written by student; see EXERCISE 1.42
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="77" POSTPADDING="no">
      <NAME>compose_example</NAME>
      <REQUIRES>compose_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>inc_definition</REQUIRES>
      <SCHEME>
((compose square inc) 6)
      </SCHEME>
      <SCHEMEOUTPUT>
49
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
compose(square, inc)(6);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
49
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
     <WEB_ONLY>返回 49。</WEB_ONLY>
    <SOLUTION>
      
	<NAME>compose_definition_solution</NAME>
	<EXAMPLE>compose_example_solution</EXAMPLE>
	<EXPECTED>49</EXPECTED>
	<JAVASCRIPT>
function compose(f, g) {
    return x =&gt; f(g(x));
}
	</JAVASCRIPT>
	
	
      
      
	<NAME>compose_example_solution</NAME>
	<REQUIRES>inc_definition</REQUIRES>
	<REQUIRES>square_definition</REQUIRES>
	<JAVASCRIPT>
compose(square, inc)(6); // 返回 49
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
   </EXERCISE>

  <EXERCISE>  
    如果  
     <LATEXINLINE>$f$</LATEXINLINE> 在
     
<INDEX>函数（数学）<SUBINDEX>重复应用</SUBINDEX></INDEX>
     <LATEXINLINE>$n$</LATEXINLINE> 是正整数，然后我们可以形成
     <LATEXINLINE>$n$</LATEXINLINE> 是一个正整数，那么我们可以构造
    <INDEX>函数 (数学)<SUBINDEX>重复应用</SUBINDEX></INDEX> 
    函数的重复应用
     <LATEXINLINE>$f$</LATEXINLINE> ，其定义为值在某个数处的函数
     <LATEXINLINE>$x$</LATEXINLINE>  是
     <LATEXINLINE>$f(f(\ldots(f(x))\ldots))$</LATEXINLINE> 。例如，如果
     <LATEXINLINE>$f$</LATEXINLINE> 是函数
     <LATEXINLINE>$x \mapsto x+1$</LATEXINLINE> ，那么
     <LATEXINLINE>$n$</LATEXINLINE> ，定义为函数的值在 
     <LATEXINLINE>$f$</LATEXINLINE> 是函数
     <LATEXINLINE>$x \mapsto x+n$</LATEXINLINE> 。如果
     <LATEXINLINE>$f$</LATEXINLINE> 是将数平方的运算，那么
    【320:7†source】
     <LATEXINLINE>$n$</LATEXINLINE> ，n 次重复应用【324:0†cn.txt】
     <LATEXINLINE>$f$</LATEXINLINE> 是将其参数提升到
    【328:7†cn.txt】<LATEXINLINE>$2^n$</LATEXINLINE> n 次幂。编写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，该过程将接受一个计算
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    【8:0†source】<LATEXINLINE>$f$</LATEXINLINE> 和一个正整数
     <LATEXINLINE>$n$</LATEXINLINE> 和返回一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    ，该过程计算
     <LATEXINLINE>$n$</LATEXINLINE> n 次重复应用【8:2†source】
     <LATEXINLINE>$f$</LATEXINLINE> 你的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    应该可以按如下方式使用
     <SNIPPET PAGE="77" HIDE="yes">
      <NAME>repeated_definition</NAME>
      <SCHEME>
;; repeated to be written by student; see EXERCISE 1.43
      </SCHEME>
      <JAVASCRIPT>
// repeated to be written by student; see EXERCISE 1.43
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="77">
      <NAME>repeated_example</NAME>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>repeated_definition</REQUIRES>
      <SCHEME>
((repeated square 2) 5)
      </SCHEME>
      <SCHEMEOUTPUT>
625
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
repeated(square, 2)(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
625
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    提示：您可能会发现使用
     <SCHEMEINLINE>compose</SCHEMEINLINE>  从
    练习<SPACE></SPACE><REF NAME="ex:compose"></REF>。
     <LABEL NAME="ex:repeated"></LABEL>
     <SOLUTION>
      
	<NAME>repeated_definition_solution</NAME>
	<REQUIRES>compose_definition_solution</REQUIRES>
        <EXAMPLE>repeated_example_solution</EXAMPLE>
	<EXPECTED>625</EXPECTED>
        <JAVASCRIPT>
function repeated(f, n) {
    return n === 0
           ? x =&gt; x
           : compose(f, repeated(f, n - 1));
}
	</JAVASCRIPT>
        
        
      
      
        <NAME>repeated_example_solution</NAME>
	<REQUIRES>square_definition</REQUIRES>
        
((repeated square 2) 5)
        
        <JAVASCRIPT>
repeated(square, 2)(5); // 625
        </JAVASCRIPT>
      
    </SOLUTION>
   </EXERCISE>

  <EXERCISE><LABEL NAME="ex:smooth"></LABEL>  
  平滑一个函数的概念在信号处理中是一个重要的概念。
  <INDEX>函数 (数学)<SUBINDEX>平滑</SUBINDEX></INDEX>
  <INDEX>平滑一个函数</INDEX>
  <EM>平滑</EM>
  <INDEX>信号处理<SUBINDEX>平滑一个函数</SUBINDEX></INDEX>
  如果【360:2†source】 
<LATEXINLINE>$f$</LATEXINLINE> 是一个函数并且
   <LATEXINLINE>$dx$</LATEXINLINE>  是某个小数，那么
  的平滑版本【8:0†cn.txt】
     <LATEXINLINE>$f$</LATEXINLINE> 是在某点处的值为该点的函数【370:0†cn.txt】
     <LATEXINLINE>$x$</LATEXINLINE>  
  的平均值【374:5†cn.txt】 
 <LATEXINLINE>$f(x-dx)$</LATEXINLINE>, <LATEXINLINE>$f(x)$</LATEXINLINE> ，和
   <LATEXINLINE>$f(x+dx)$</LATEXINLINE> 。编写一个
  <SPLITINLINE>
    过程
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
   <SCHEMEINLINE>smooth</SCHEMEINLINE>  ，它将作为输入的一个计算
  <SPLITINLINE>
    过程
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>【8:0†source】 
<LATEXINLINE>$f$</LATEXINLINE> ，其作为输入接受一个计算
  <SPLITINLINE>
    过程
    <JAVASCRIPT>函数</JAVASCRIPT>
  </SPLITINLINE>
  的过程，并返回一个计算平滑【388:1†cn.txt】
<LATEXINLINE>$f$</LATEXINLINE> 。有时
  重复平滑一个函数（即，平滑已平滑的函数，依此类推）以获取 <EM>$n$ 次
  平滑的函数</EM> 是有价值的。展示如何生成
     <LATEXINLINE>$n$</LATEXINLINE> -次平滑函数。使用
  <SCHEMEINLINE>smooth</SCHEMEINLINE>  和
   <SCHEMEINLINE>repeated</SCHEMEINLINE>  从
  练习<SPACE></SPACE><REF NAME="ex:repeated"></REF>。
  <SOLUTION>
    
      <NAME>n_fold_smooth_solution</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>repeated_definition_solution</REQUIRES>
      <EXAMPLE>example_1.44</EXAMPLE>
      <EXPECTED>64.00000000399997</EXPECTED>
      <JAVASCRIPT>
const dx = 0.00001;
function smooth(f) {
    return x =&gt; (f(x - dx) + f(x) + f(x + dx)) / 3;
}
function n_fold_smooth(f, n) {
    return repeated(smooth, n)(f);
}
      </JAVASCRIPT>
      
      
    
  </SOLUTION>
   <SNIPPET HIDE="yes">
    <NAME>example_1.44</NAME>
    <JAVASCRIPT>
n_fold_smooth(cube, 5)(4);
    </JAVASCRIPT>
    <SCHEME>
    </SCHEME>
  </SNIPPET>
    <LABEL NAME="ex:1_44"></LABEL>
  </EXERCISE>

  <EXERCISE> 
    我们在 section<SPACE></SPACE><REF NAME="sec:proc-general-methods"></REF> 中看到，
    通过简单地寻找不动点来尝试计算平方根
     <LATEXINLINE>$y\mapsto x/y$</LATEXINLINE> 从
  练习<SPACE></SPACE><REF NAME="ex:repeated"></REF>。
  <SOLUTION>
    
      <NAME>n_fold_smooth_solution</NAME>
      <REQUIRES>cube_definition</REQUIRES>
      <REQUIRES>repeated_definition_solution</REQUIRES>
      <EXAMPLE>example_1.44</EXAMPLE>
      <EXPECTED>64.00000000399997</EXPECTED>
      <JAVASCRIPT>
const dx = 0.00001;
function smooth(f) {
    return x =&gt; (f(x - dx) + f(x) + f(x + dx)) / 3;
}
function n_fold_smooth(f, n) {
    return repeated(smooth, n)(f);
}
      </JAVASCRIPT>
      
      
    
  </SOLUTION>
   <LATEXINLINE>$y\mapsto x/y^2$</LATEXINLINE> 。但是，不幸的是，该过程不适用于
    <INDEX>四次方根，作为不动点</INDEX>
    <INDEX>不动点<SUBINDEX>四次方根作为</SUBINDEX></INDEX>
    四次方根<EMDASH></EMDASH>单一的平均阻尼不足以进行
 <LATEXINLINE>$y\mapsto x/y^3$</LATEXINLINE> 
    收敛。 另一方面，如果我们平均阻尼两次 (即，使用两次平均阻尼的
  <LATEXINLINE>$y\mapsto x/y^3$</LATEXINLINE> ，搜索会
    收敛。做一些实验来确定计算需要多少平均阻尼
    <INDEX><ORDER>n</ORDER>次方根，作为不动点</INDEX>
    <INDEX>不动点<SUBINDEX><ORDER>n</ORDER>次方根作为</SUBINDEX></INDEX>
     <LATEXINLINE>$n$</LATEXINLINE>  次方根作为基于重复平均阻尼的不动点搜索【424:17†source】。
     <LATEXINLINE>$y\mapsto x/y^{n-1}$</LATEXINLINE> 。
    使用这个来实现一个简单的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    来计算
   <LATEXINLINE>$n$</LATEXINLINE> 次方根。
    使用
    <SPLITINLINE>
      fixed_point,
      <JAVASCRIPT><JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      average_damp,
      <JAVASCRIPT><JAVASCRIPTINLINE>average_damp</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    和
   <SCHEMEINLINE>repeated</SCHEMEINLINE>
    
  <SPLITINLINE>
    练习<SPACE></SPACE><REF NAME="ex:repeated"></REF>中的过程
    <JAVASCRIPT>练习<SPACE></SPACE><REF NAME="ex:repeated"></REF>中的函数</JAVASCRIPT>
  </SPLITINLINE>
  。假设您需要的任何算术运算都作为原语可用。
  <LABEL NAME="ex:nth-roots"></LABEL>
     <SOLUTION>
      
	<NAME>nth_root_solution</NAME>
	<REQUIRES>fixed_definition</REQUIRES>
	<REQUIRES>average_damp_definition</REQUIRES>
	<REQUIRES>repeated_definition_solution</REQUIRES>
        <REQUIRES>expt_log_definition</REQUIRES>
	<EXAMPLE>example_1.45</EXAMPLE>
	<EXPECTED>2.000001512995761</EXPECTED>
	<JAVASCRIPT>
function nth_root(n, x) {
    return fixed_point(repeated(average_damp, 
                                math_floor(math_log2(n)))
                       (y =&gt; x / fast_expt(y, n - 1)),
                       1);
}
	</JAVASCRIPT>
      
      
	<NAME>example_1.45</NAME>
	<JAVASCRIPT>
nth_root(5, 32);
	</JAVASCRIPT>
	
	
      
    </SOLUTION>
   </EXERCISE>

  <EXERCISE> 
    本章中描述的几种数值方法是一个非常通用的计算策略的实例，称为<INDEX>迭代改进</INDEX>
    <INDEX><USE>平方根</USE><SUBINDEX><ORDER>迭代</ORDER>作为迭代改进</SUBINDEX></INDEX>
    <INDEX><USE>不动点</USE><SUBINDEX><ORDER>迭代</ORDER>作为迭代改进</SUBINDEX></INDEX>
    <INDEX>不动点<SUBINDEX><ORDER>迭代</ORDER>作为迭代改进</SUBINDEX></INDEX>
    <EM>迭代改进</EM>。迭代改进表示，要计算某个东西，我们从初始猜测开始，测试猜测是否足够好，否则改进猜测并使用改进的方法继续该过程，以此作为新的猜测。编写一个
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      iterative-improve
      <JAVASCRIPT><JAVASCRIPTINLINE>iterative_improve</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    接受两个 
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    作为参数：一个判断猜测是否足够好的方法和一个改进猜测的方法。
    <SPLITINLINE>
      Iterative-improve
      <JAVASCRIPT>函数
      <JAVASCRIPTINLINE>iterative_improve</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    应返回一个其值为接受一个猜测作为参数并不断改进猜测直到它足够好的
    <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    。重写   <SCHEMEINLINE>sqrt</SCHEMEINLINE>
     <SPLITINLINE>
      过程
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    section<SPACE></SPACE><REF NAME="sec:sqrt"></REF>和 
    <SPLITINLINE>
      fixed_point
      <JAVASCRIPT><JAVASCRIPTINLINE>fixed_point</JAVASCRIPTINLINE> </JAVASCRIPT>
    </SPLITINLINE> 
    section<SPACE></SPACE><REF NAME="sec:proc-general-methods"></REF>中的
    <SPLITINLINE>
      iterative-improve
      <JAVASCRIPT><JAVASCRIPTINLINE>iterative_improve</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    中的
    <SOLUTION>
      
	<NAME>iterative_improve</NAME>
	<EXAMPLE>example_1.46_1</EXAMPLE>
	<EXPECTED>7.000000141269659</EXPECTED>
	<JAVASCRIPT>
function iterative_improve(is_good_enough, improve) {
    function iterate(guess) {
        return is_good_enough(guess)
               ? guess
               : iterate(improve(guess));
    }
    return iterate;
}		    
	</JAVASCRIPT>
      
      
	<NAME>example_1.46_1</NAME>
	<REQUIRES>square_definition</REQUIRES>
        <REQUIRES>improve</REQUIRES>
        <REQUIRES>is_good_enough</REQUIRES>
	<REQUIRES>iterative_improve</REQUIRES>
	<JAVASCRIPT>
function sqrt(x) {
    return iterative_improve(y =&gt; is_good_enough(y, x), 
                             y =&gt; improve(y, x))(1);
}

sqrt(49);
	</JAVASCRIPT>
	
	
      
    </SOLUTION>【4:0†cn.txt】<LABEL NAME="ex:1_46"></LABEL>
  </EXERCISE>

   <INDEX>高阶 <SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE><SUBINDEX><SPLITINLINE>过程<JAVASCRIPT>函数</JAVASCRIPT></SPLITINLINE> 作为返回值<CLOSE></CLOSE></SUBINDEX></INDEX> 
   <INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>返回</ORDER> 作为返回值<CLOSE></CLOSE></SUBINDEX></INDEX> 

</SUBSECTION>
