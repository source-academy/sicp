<SUBSECTION>
  <LABEL NAME="sec:black-box"></LABEL>
   <NAME>
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    作为黑盒抽象
  </NAME> 

   <SHORT_PAGE LINES="2"></SHORT_PAGE> 
   <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>平方根</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	函数 <JAVASCRIPTINLINE>sqrt</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    是我们第一个由一组相互
    <SPLITINLINE>
      <SCHEME>定义的过程。</SCHEME>
      <JAVASCRIPT>定义的函数。</JAVASCRIPT>
    </SPLITINLINE>
    注意
    <SPLITINLINE>
      <SCHEME>对 <SCHEMEINLINE>sqrt-iter</SCHEMEINLINE> 的定义</SCHEME>
      <JAVASCRIPT>对 <JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE> 的声明</JAVASCRIPT>
    </SPLITINLINE>
    是
    <SPLITINLINE>
      <SCHEME>
	<INDEX>递归过程<SUBINDEX>递归过程定义</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>递归函数<SUBINDEX>递归函数声明</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>递归的</EM>；也就是说，
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    是用它自身来定义的。能够用自身来定义一个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的想法可能让人不安；看起来好像这样的<QUOTE>循环</QUOTE>定义根本无法成立，更不用说指定一个由计算机执行的明确定义的过程了。这将在章节<SPACE></SPACE><REF NAME="sec:procedures-and-processes"></REF>中更仔细地讨论。但首先，让我们考虑一下由
    <SCHEMEINLINE>平方根</SCHEMEINLINE> 示例说明的一些其他重要点。
  </TEXT> 
   <TEXT>
    注意，计算平方根的问题自然地分解成若干个子问题：
    <INDEX>程序<SUBINDEX>结构</SUBINDEX></INDEX>
    如何判断一个猜测是否足够好，如何改进猜测，等等。每个任务都是通过一个单独的
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    整个 <SCHEMEINLINE>平方根</SCHEMEINLINE> 程序可以看作是一组
    <SPLITINLINE>
      <SCHEME>
        过程
	（如图<SPACE></SPACE><REF NAME="fig:sqrt-decomposition"></REF>所示）
      </SCHEME>
      <JAVASCRIPT>
        函数
	（如图<SPACE></SPACE><REF NAME="fig:sqrt-decomposition_new"></REF>所示）
      </JAVASCRIPT>
    </SPLITINLINE>
    ，其结构反映了问题向子问题的分解。
  </TEXT> 
   <SPLIT>
    <SCHEME>
      <FIGURE WEB_SCALE="0.6" SRC="img_original/ch1-Z-G-6.svg">
        <LABEL NAME="fig:sqrt-decomposition"></LABEL>
        <CAPTION>
	<SCHEMEINLINE>平方根</SCHEMEINLINE> 程序的过程式分解。
        </CAPTION>
      </FIGURE>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE>
        <FIGURE WEB_SCALE="0.6" SRC="img_javascript/ch1-Z-G-6.svg"></FIGURE>
        <LABEL NAME="fig:sqrt-decomposition_new"></LABEL>
        <CAPTION>
	<JAVASCRIPTINLINE>平方根</JAVASCRIPTINLINE> 程序的函数式分解。
        </CAPTION>
      </FIGURE>
    </JAVASCRIPT>
  </SPLIT> 
   <TEXT>
    这种
    <INDEX>将程序分解为部分</INDEX>
    的分解策略的重要性不仅仅在于将程序划分为若干部分。毕竟，我们可以对任何大型程序进行划分<EMDASH></EMDASH>前十行、接下来的十行、再接下来的十行，依此类推。更关键的是，每个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    完成一个可识别的任务，该任务可以作为模块用于定义其他
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX><ORDER>黑</ORDER>作为黑盒子<OPEN></OPEN></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>&lt;函数&gt;&lt;/函数&gt;<ORDER>黑</ORDER>作为黑盒子<OPEN></OPEN>&lt;/SUBINDEX&gt;</INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    例如，当我们用 <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好？</SCHEMEINLINE> 过程
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE> 函数
      </JAVASCRIPT>
    </SPLITINLINE>
    来定义时，能够将
    <SCHEMEINLINE>平方</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    看作一个
    <INDEX>黑盒子</INDEX>
    <QUOTE>黑盒子。</QUOTE> 我们在那时并不关心这个
    <EM>如何</EM>计算结果，
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，只关注它<EM>确实</EM>计算平方这一事实。平方是如何计算的细节可以被抑制，留待以后考虑。实际上，就
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>够好？</SCHEMEINLINE> 过程
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE> 函数
      </JAVASCRIPT>
    </SPLITINLINE>
    而言，<SCHEMEINLINE>平方</SCHEMEINLINE>并不完全是一个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，而是一个
    <SPLITINLINE>
      <SCHEME>过程的抽象，</SCHEME>
      <JAVASCRIPT>函数的抽象，</JAVASCRIPT>
    </SPLITINLINE>
    也就是所谓的
    <SPLITINLINE>
      <SCHEME>
        <INDEX>过程抽象</INDEX>
        <INDEX>抽象<SUBINDEX>过程</SUBINDEX></INDEX>
        <EM>过程抽象</EM>。
      </SCHEME>
      <JAVASCRIPT>
        <INDEX>函数抽象</INDEX>
        <INDEX>抽象<SUBINDEX>函数</SUBINDEX></INDEX>
        <EM>函数抽象</EM>。
      </JAVASCRIPT>
    </SPLITINLINE>
    在这个抽象层次，任何计算平方的
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    都是同样好的。
  </TEXT> 
   <TEXT>
    因此，仅考虑它们返回的值，下述两个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    计算一个数字的平方应当是无法区分的。每个都接受一个数字参数并产生该数字的平方作为返回值。<FOOTNOTE>甚至不清楚这两个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    中哪个实现更高效。这取决于所用的硬件。有些机器中，“显然”的实现反而效率更低。设想一台拥有以极高效方式存储大量对数和反对数表的机器。</FOOTNOTE>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x) (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x)
  (exp (double (log x))))

(define (double x) (+ x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return math_exp(double(math_log(x)));
}
function double(x) {
    return x + x;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT> 
   <TEXT>
    因此，<SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    应当能够屏蔽细节。该
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的用户可能并非自己编写该
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    ，而是从另一程序员那里作为
    <SPLITINLINE>
      <SCHEME>
	<INDEX>过程<SUBINDEX><ORDER>作为黑盒</ORDER>作为黑盒<CLOSE></CLOSE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX><ORDER>作为黑盒</ORDER>作为黑盒<CLOSE></CLOSE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    获得。用户使用该
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    时不必了解其实现细节。
  </TEXT> 

   <SUBHEADING>
    <NAME>本地名称</NAME>
  </SUBHEADING> 

   <INDEX>本地名称<OPEN></OPEN></INDEX> 

  <TEXT> 
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    实现的一个细节对于
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    的使用者来说不应有影响，就是实现者为
    <SPLITINLINE>
      <SCHEME>过程的形式参数</SCHEME>
      <JAVASCRIPT>函数的参数</JAVASCRIPT>
    </SPLITINLINE>
    选择的名称。因此，以下
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    不应被区分：
<SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square x) (* x x))
      </SCHEME>
      <JAVASCRIPT>
function square(x) {
    return x * x;
}
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET>
      <EXAMPLE>square_example</EXAMPLE>
      <SCHEME>
(define (square y) (* y y))
      </SCHEME>
      <JAVASCRIPT>
function square(y) {
    return y * y;
}
      </JAVASCRIPT>
    </SNIPPET> 
    这个原则<EMDASH></EMDASH>即一个
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的含义应当独立于其作者所使用的参数名称<EMDASH></EMDASH>表面上看似显而易见，但其影响深远。最简单的后果是
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的参数名称必须在
    <SPLITINLINE>
      <SCHEME>
        过程体内局部。
      </SCHEME>
      <JAVASCRIPT>
        函数体内局部。
      </JAVASCRIPT>
    </SPLITINLINE>
    例如，我们使用了 <SCHEMEINLINE>square</SCHEMEINLINE> 
     <SPLITINLINE>
      <SCHEME>
	在定义	      
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	在声明	      
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    在我们的平方根
    <SPLITINLINE>
      <SCHEME>
        过程中：
      </SCHEME>
      <JAVASCRIPT>
        函数中：
      </JAVASCRIPT>
    </SPLITINLINE>
     <SNIPPET>
      <EXAMPLE>is_good_enough_example</EXAMPLE>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <SCHEME>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <JAVASCRIPT>
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </JAVASCRIPT>
    </SNIPPET> 
    <SCHEME>
      作者的意图是
      <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
    </SCHEME>
    <JAVASCRIPT>
      作者的意图是
      <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
    </JAVASCRIPT>
    确定第一个参数的平方是否在给定容差范围内与第二个参数相符。我们看到
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的作者使用了名称
  <SCHEMEINLINE>guess</SCHEMEINLINE> 指代第一个参数和 <SCHEMEINLINE>x</SCHEMEINLINE> 指代第二个参数。 <SCHEMEINLINE>square</SCHEMEINLINE> 是 <SCHEMEINLINE>guess</SCHEMEINLINE> 。如果作者 <SCHEMEINLINE>square</SCHEMEINLINE> 使用 <SCHEMEINLINE>x</SCHEMEINLINE> 
    （如上所述）指的是该参数，我们看到
     <SCHEMEINLINE>x</SCHEMEINLINE> 在
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    必须是不同的 <SCHEMEINLINE>x</SCHEMEINLINE> 比位于 <SCHEMEINLINE>square</SCHEMEINLINE> . 运行
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>square</SCHEMEINLINE>  不得影响 的值
    <SCHEMEINLINE>x</SCHEMEINLINE>  被
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    使用的，因为那个值
    <SCHEMEINLINE>x</SCHEMEINLINE>  可能被
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    后需要
    <SCHEMEINLINE>square</SCHEMEINLINE>  计算完成。
   </TEXT>
   <TEXT>
    如果这些参数不是各自
    <SPLITINLINE>
      <SCHEME>过程体</SCHEME>
      <JAVASCRIPT>函数体</JAVASCRIPT>
    </SPLITINLINE>
    的局部变量，那么
    <SCHEMEINLINE>square</SCHEMEINLINE> 中的参数 <SCHEMEINLINE>x</SCHEMEINLINE> 可能会与
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE> 中的参数 <SCHEMEINLINE>x</SCHEMEINLINE> 混淆，
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_@good_@enough</JAVASCRIPTINLINE> 中的参数 <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> 混淆，
      </JAVASCRIPT>
    </SPLITINLINE>
    并且
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的行为将依赖于所使用的哪个版本的 <SCHEMEINLINE>square</SCHEMEINLINE>。因此，<SCHEMEINLINE>square</SCHEMEINLINE> 就不会是我们想要的黑盒。
  </TEXT> 
   <TEXT>
    一个     
    <INDEX>参数<SUBINDEX>名称</SUBINDEX></INDEX>
    <INDEX>名称<SUBINDEX><ORDER>参数</ORDER>的名称</SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	过程的形式参数
      </SCHEME>
      <JAVASCRIPT>
	函数的参数
      </JAVASCRIPT>
    </SPLITINLINE>
    在
    <SPLITINLINE>
      <SCHEME>
        过程定义中，
      </SCHEME>
      <JAVASCRIPT>
        函数声明中，
      </JAVASCRIPT>
    </SPLITINLINE>
    扮演着一个非常特殊的角色，即其
    <SPLITINLINE>
      <SCHEME>
	形式
      </SCHEME>
      <JAVASCRIPT>
      </JAVASCRIPT>
    </SPLITINLINE>
    参数的名称无论是什么都无关紧要。这样的名称称为
    <SPLITINLINE>
      <SCHEME>
	<INDEX>绑定变量</INDEX>
	<INDEX>变量<SUBINDEX>绑定</SUBINDEX></INDEX>
	一个<EM>绑定变量</EM>，我们说过程定义
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>绑定名称</INDEX>
	<INDEX>名称<SUBINDEX>绑定</SUBINDEX></INDEX>
	<EM>绑定</EM>，我们说函数声明
      </JAVASCRIPT>
    </SPLITINLINE>
    <INDEX>绑定</INDEX>
    <EM>绑定</EM>其
    <SPLITINLINE>
      <SCHEME>
	形式参数。
      </SCHEME>
      <JAVASCRIPT>
	参数。
      </JAVASCRIPT>
    </SPLITINLINE>
    如果一
    <SPLITINLINE>
      <SCHEME>
	过程定义在整个定义内一致地重新命名绑定变量时，其含义不变；
      </SCHEME>
      <JAVASCRIPT>
	函数声明在整个声明内一致地重新命名绑定名称时，其含义不变；
      </JAVASCRIPT>
    </SPLITINLINE>
    <FOOTNOTE>一致重命名的概念实际上微妙且难以形式定义，著名的逻辑学家们在这里曾犯过尴尬的错误。</FOOTNOTE>
    如果一个
    <SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE>
    没有被绑定，我们说它是
    <SPLITINLINE>
      <SCHEME>
	<INDEX>自由变量</INDEX>
	<INDEX>变量<SUBINDEX>自由</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>自由名称</INDEX>
	<INDEX>名称<SUBINDEX>自由</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>自由的</EM>。绑定某名称的
    <SPLITINLINE>
      <SCHEME>表达式</SCHEME>
      <JAVASCRIPT>语句</JAVASCRIPT>
    </SPLITINLINE>
    集合称为该名称的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>变量作用域</INDEX>
	<INDEX>变量<SUBINDEX>作用域</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>名称作用域</INDEX>
	<INDEX>名称<SUBINDEX>作用域</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <EM>作用域</EM>。在
    <SPLITINLINE>
      <SCHEME>
        过程定义中，作为
      </SCHEME>
      <JAVASCRIPT>
        函数声明中，作为
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>形式参数作用域</INDEX>
	<INDEX>过程<SUBINDEX>形式参数作用域</SUBINDEX></INDEX>
	<INDEX>变量作用域<SUBINDEX>过程形式参数</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>参数作用域</INDEX>
	<INDEX><FUNCTION></FUNCTION><SUBINDEX>参数作用域</SUBINDEX></INDEX>
	<INDEX>名称作用域<SUBINDEX>函数参数</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
        过程的形式参数
      </SCHEME>
      <JAVASCRIPT>
        函数的参数
      </JAVASCRIPT>
    </SPLITINLINE>
    将
    <SPLITINLINE>
      <SCHEME>
        过程体
      </SCHEME>
      <JAVASCRIPT>
        函数体
      </JAVASCRIPT>
    </SPLITINLINE>
    作为它们的作用域。
  </TEXT> 
   <TEXT>
    在上面
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>的定义中，
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>的声明中，
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>guess</SCHEMEINLINE>和
    <SCHEMEINLINE>x</SCHEMEINLINE>是
    绑定的
    <SPLITINLINE>
      <SCHEME>
	变量
      </SCHEME>
      <JAVASCRIPT>
	名称
      </JAVASCRIPT>
    </SPLITINLINE>
    但是
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>&lt;</SCHEMEINLINE>，
        <SCHEMEINLINE>-</SCHEMEINLINE>，
      </SCHEME>
    </SPLITINLINE>
    <SCHEMEINLINE>abs</SCHEMEINLINE>和<SCHEMEINLINE>square</SCHEMEINLINE>是自由的。
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的含义应该独立于我们选择的
    <SCHEMEINLINE>guess</SCHEMEINLINE>和
    <SCHEMEINLINE>x</SCHEMEINLINE>的名称，只要它们不同且不同于
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>&lt;</SCHEMEINLINE>，
        <SCHEMEINLINE>-</SCHEMEINLINE>，
      </SCHEME>
    </SPLITINLINE>
    <SCHEMEINLINE>abs</SCHEMEINLINE>和<SCHEMEINLINE>square</SCHEMEINLINE>。（如果我们将
    <SCHEMEINLINE>guess</SCHEMEINLINE>重命名为<SCHEMEINLINE>abs</SCHEMEINLINE>，
    就会引入一个通过<EM>捕获</EM>自由变量的<INDEX>错误</INDEX>，
    使得
    <SCHEMEINLINE>abs</SCHEMEINLINE>变量由自由变成绑定。） 
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    的意义却依赖于其自由变量的
    <SPLITINLINE>
      <SCHEME>
	名称，
      </SCHEME>
      <JAVASCRIPT>
	自由名称的选择，
      </JAVASCRIPT>
    </SPLITINLINE>
    这是因为（定义外部的）事实，
    <SPLITINLINE>
      <SCHEME>
	符号<SCHEMEINLINE>abs</SCHEMEINLINE>命名了一个过程，
      </SCHEME>
      <JAVASCRIPT>
	名称<SCHEMEINLINE>abs</SCHEMEINLINE>指向一个函数，
      </JAVASCRIPT>
    </SPLITINLINE>
    用于计算数字的绝对值。
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    如果我们在其定义中将
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>abs</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>math_cos</JAVASCRIPTINLINE>(原始余弦函数)
      </JAVASCRIPT>
    </SPLITINLINE>
    替换为
    <SCHEMEINLINE>abs</SCHEMEINLINE>，它将计算不同的函数。
  </TEXT> 

   <SUBHEADING>
    <NAME>内部
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    与块结构</NAME>
  </SUBHEADING> 
  <LABEL NAME="sec:block-structure"></LABEL>

   <SHORT_PAGE LINES="3"></SHORT_PAGE> 
   <TEXT>
    到目前为止，我们只有一种名称隔离可用：
    <SPLITINLINE>
      <SCHEME>
	过程的形式参数
      </SCHEME>
      <JAVASCRIPT>
	函数的参数
      </JAVASCRIPT>
    </SPLITINLINE>
    在过程体内是局部的
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    平方根程序展示了我们希望控制名称使用的另一种方式。
    <INDEX>程序<SUBINDEX>结构<OPEN></OPEN></SUBINDEX></INDEX>
    现有程序由独立的
    <SPLITINLINE>
      <SCHEME>
        过程组成：
      </SCHEME>
      <JAVASCRIPT>
        函数组成：
      </JAVASCRIPT>
      </SPLITINLINE>
      <SNIPPET>
        <LABEL NAME="sec:sqrt2"></LABEL>
        <EXAMPLE>sqrt_example_2</EXAMPLE>
        <REQUIRES>abs_definition</REQUIRES>
        <REQUIRES>square_definition</REQUIRES>
        <REQUIRES>average_definition</REQUIRES>
        <SCHEME>
(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))
        </SCHEME>
        <JAVASCRIPT>
function sqrt(x) {
    return sqrt_iter(1, x);
}
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : sqrt_iter(improve(guess, x), x);
}
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
function improve(guess, x) {
    return average(guess, x / guess);
}
        </JAVASCRIPT>
      </SNIPPET>
  </TEXT> 
   <TEXT>
    这个程序的问题在于，唯一对 <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> 用户重要的是
    <SCHEMEINLINE>sqrt</SCHEMEINLINE>。其他
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	(<SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>,
	<SCHEMEINLINE>good-enough?</SCHEMEINLINE>，
      </SCHEME>
      <JAVASCRIPT>
	(<JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>，
      </JAVASCRIPT>
    </SPLITINLINE>
    和 <SCHEMEINLINE>improve</SCHEMEINLINE>） 只是让他们的思维混乱。
    他们可能不会
    <SPLITINLINE>
      <SCHEME>
	定义任何其他过程
      </SCHEME>
      <JAVASCRIPT>
	声明任何其他函数
      </JAVASCRIPT>
    </SPLITINLINE>
    名为
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    作为另一个程序的一部分与平方根程序一起工作，因为 <SCHEMEINLINE>sqrt</SCHEMEINLINE>
    需要它。这个问题在由很多独立程序员构建大型系统时尤为严重。例如，在构建大型数值
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    库时，许多数值函数是作为连续逼近计算的，因此可能有
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    命名为
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
        <JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    和 <SCHEMEINLINE>improve</SCHEMEINLINE> 作为辅助
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    我们希望将这些
    <SPLITINLINE>
      <SCHEME>子过程</SCHEME>
      <JAVASCRIPT>子函数</JAVASCRIPT>
    </SPLITINLINE>
    局部化，隐藏在 <SCHEMEINLINE>sqrt</SCHEMEINLINE> 内，这样
    <SCHEMEINLINE>sqrt</SCHEMEINLINE> 就可以和其他连续逼近共存，每一个都有自己私有的
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE> 过程。
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE> 函数。
      </JAVASCRIPT>
    </SPLITINLINE>
    为实现这一点，我们允许
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    拥有
    <INDEX>块结构</INDEX>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义</INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明</INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    作为对该
    <SPLITINLINE>
      <SCHEME>过程</SCHEME>
      <JAVASCRIPT>函数</JAVASCRIPT>
    </SPLITINLINE>
    局部的内部声明。例如，在平方根问题中我们可以这样写
    <SNIPPET PROTECT="yes">
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess x)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess, x) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess, x) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess, x) {
        return is_good_enough(guess, x) 
               ? guess
               : sqrt_iter(improve(guess, x), x);
    }
    return sqrt_iter(1, x);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT> 
  <TEXT>
     <SPLITINLINE>
      <SCHEME></SCHEME>
      <JAVASCRIPT>
	任何配对的花括号表示一个 <EM>块</EM>，块内的声明对于该块是局部的。
	<INDEX>块</INDEX>
	<INDEX>语法形式<SUBINDEX>块</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    这种
    <SPLITINLINE>
      <SCHEME>定义的嵌套，</SCHEME>
      <JAVASCRIPT>声明的嵌套，</JAVASCRIPT>
    </SPLITINLINE>
    称为 <EM>块结构</EM>，基本上是解决最简单名称封装问题的正确方法。但这里还有一个更好的想法。在将
    <SPLITINLINE>
      <SCHEME>辅助过程的定义内置化之外，</SCHEME>
      <JAVASCRIPT>辅助函数的声明内置化之外，</JAVASCRIPT>
    </SPLITINLINE>
    我们可以简化它们。既然 <SCHEMEINLINE>x</SCHEMEINLINE> 被绑定在
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    中 <SCHEMEINLINE>sqrt</SCHEMEINLINE>， 
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>是否足够好？</SCHEMEINLINE>，</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>is_good_enough</JAVASCRIPTINLINE>，</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>improve</SCHEMEINLINE>，和
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sqrt-iter</SCHEMEINLINE>，
      它们在……内部定义</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>sqrt_iter</JAVASCRIPTINLINE>，
      它们在……内部声明</JAVASCRIPT>
    </SPLITINLINE>
     <SCHEMEINLINE>sqrt</SCHEMEINLINE>，位于……的作用域内
     <SCHEMEINLINE>x</SCHEMEINLINE>。因此，没有必要传递
     <SCHEMEINLINE>x</SCHEMEINLINE>  明确地传递给每个
    <SPLITINLINE>
      <SCHEME>过程。</SCHEME>
      <JAVASCRIPT>函数。</JAVASCRIPT>
    </SPLITINLINE>
    相反，我们允许  <SCHEMEINLINE>x</SCHEMEINLINE> 成为一个自由的
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义中的自由变量</INDEX>
	<INDEX>自由变量<ORDER>内部</ORDER>在内部定义中</INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明中的自由名称</INDEX>
	<INDEX>自由名称<ORDER>内部</ORDER>在内部声明中</INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
      <SPLITINLINE>
      <SCHEME>变量</SCHEME>
      <JAVASCRIPT>名称</JAVASCRIPT>
    </SPLITINLINE>
    在内部
    <SPLITINLINE>
      <SCHEME>定义中，</SCHEME>
      <JAVASCRIPT>声明中，</JAVASCRIPT>
    </SPLITINLINE>
    如下所示。然后 <SCHEMEINLINE>x</SCHEMEINLINE> 从其包含的
    <SPLITINLINE>
      <SCHEME>
        过程
      </SCHEME>
      <JAVASCRIPT>
        函数
      </JAVASCRIPT>
    </SPLITINLINE>
    的参数中获取其值
<SCHEMEINLINE>sqrt</SCHEMEINLINE> 被调用。该规则称为
    <INDEX>词法作用域</INDEX>
    <EM>词法作用域</EM>。<FOOTNOTE>词法作用域规定自由的
    <SPLITINLINE>
      <SCHEME>
        过程中的变量
      </SCHEME>
      <JAVASCRIPT>
        函数中的名称
      </JAVASCRIPT>
    </SPLITINLINE>
    被认为引用由外层的
    <SPLITINLINE>
      <SCHEME>
        过程定义所绑定的变量；
      </SCHEME>
      <JAVASCRIPT>
        函数声明所绑定的变量；
      </JAVASCRIPT>
    </SPLITINLINE>
    也就是说，它们是在
    <INDEX>环境<SUBINDEX>词法作用域和</SUBINDEX></INDEX>
    定义
    <SPLITINLINE>
      <SCHEME>
        过程的环境中查找的。  
      </SCHEME>
      <JAVASCRIPT>
        函数声明的环境中查找的。
      </JAVASCRIPT>
    </SPLITINLINE>
    我们将在第<SPACE></SPACE><REF NAME="chap:state"></REF>章详细讨论环境和解释器的具体行为时看到它是如何工作的。</FOOTNOTE>
<SNIPPET>
      <INDEX><DECLARATION>sqrt</DECLARATION><SUBINDEX>block structured</SUBINDEX></INDEX>
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <REQUIRES>average_definition</REQUIRES>
      <SCHEME>
(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
      </SCHEME>
      <JAVASCRIPT>
function sqrt(x) {
    function is_good_enough(guess) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess) {
        return is_good_enough(guess)
               ? guess
               : sqrt_iter(improve(guess));
    }
    return sqrt_iter(1);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>
   <TEXT>
    我们将广泛使用块结构来帮助我们将大型程序划分为易处理的部分。<FOOTNOTE>嵌入式 
    <SPLITINLINE>
      <SCHEME>
        定义必须出现在过程主体的最前面
      </SCHEME>
      <JAVASCRIPT>
        声明必须出现在函数主体的最前面
      </JAVASCRIPT>
    </SPLITINLINE>
    。
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义&lt;索引下标&gt;的位置&lt;/索引下标&gt;
      </INDEX></SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明&lt;索引下标&gt;的位置&lt;/索引下标&gt;
      </INDEX></JAVASCRIPT>
    </SPLITINLINE>
    管理层不对运行交织了
    <SPLITINLINE>
      <SCHEME>定义</SCHEME>
      <JAVASCRIPT>声明</JAVASCRIPT>
    </SPLITINLINE>
    和使用的程序所产生的后果负责；另请参见第<SPACE></SPACE><REF NAME="foot:function-decl-vs-lambda"></REF>脚注和第<SPACE></SPACE><REF NAME="foot:tdz"></REF>脚注，以及第<SPACE></SPACE><REF NAME="sec:lambda"></REF>节。
    <LABEL NAME="foot:management"></LABEL></FOOTNOTE>
    块结构的概念起源于编程语言
    <INDEX>Algol&lt;索引下标&gt;块结构&lt;/索引下标&gt;
    Algol 60。它出现在大多数先进的编程语言中，是帮助组织大型程序构建的重要工具。
    <INDEX>程序&lt;索引下标&gt;结构&lt;/索引下标&gt;
    <INDEX>块结构</INDEX>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>内部定义</INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>内部声明</INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
  </INDEX></INDEX></TEXT> 
</SUBSECTION>
