<SUBSECTION>
  <NAME>Example: Square Roots by Newton<APOS/>s Method</NAME>
  <LABEL NAME="sec:sqrt"/>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>procedure<SUBINDEX>mathematical function vs.<OPEN/></SUBINDEX></INDEX>
	<INDEX>function (mathematical)<SUBINDEX>procedure vs.<OPEN/></SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
	<INDEX><FUNCTION/><SUBINDEX>mathematical function vs.<OPEN/></SUBINDEX></INDEX>
	<INDEX>function (mathematical)<SUBINDEX>JavaScript function vs.<OPEN/></SUBINDEX></INDEX>
      </PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>Procedures,</SCHEME>
      <PYTHON>Functions,</PYTHON>
    </SPLITINLINE>
    as introduced above, are much like ordinary mathematical functions.  They
    specify a value that is determined by one or more parameters.  But there
    is an important difference between mathematical functions and computer
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <PYTHON>functions.</PYTHON>
      </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
        Procedures
      </SCHEME>
      <PYTHON>
        Computer functions
      </PYTHON>
    </SPLITINLINE>
    must be effective.
  </TEXT>
  <TEXT>
    As a case in point, consider the problem of computing square
    roots.  We can define the square-root function as
    <LATEX>
      \[
      \sqrt{x}\ =\text{ the }y\text{ such that }y \geq 0\text{ and }
      y^2\ =\ x
      \]
    </LATEX>
    This describes a perfectly legitimate mathematical function.  We could
    use it to recognize whether one number is the square root of another, or
    to derive facts about square roots in general.  On the other hand, the
    definition does not describe a
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>computer function.</PYTHON>
    </SPLITINLINE>
    Indeed, it tells us almost nothing about how to actually find the square
    root of a given number.  It will not help matters to rephrase this
    definition in
    <SPLITINLINE>
      <SCHEME>pseudo-Lisp:</SCHEME>
      <PYTHON>pseudo-JavaScript:</PYTHON>
    </SPLITINLINE>
    <SNIPPET LATEX="yes">
      <SCHEME>
(define (sqrt x)
  (the y (and (>= y 0)
              (= (square y) x))))
      </SCHEME>
      <PYTHON>
function sqrt(x) {
    return the y $\texttt{with}$ y &gt;= 0 &amp;&amp; square(y) === x;
}
      </PYTHON>
    </SNIPPET>
    This only begs the question.
  </TEXT>
  <SHORT_PAGE lines="2"/>
  <TEXT>
    The contrast between
    <SPLITINLINE>
      <SCHEME>
        function and procedure
      </SCHEME>
      <PYTHON>
        mathematical function and computer function
      </PYTHON>
    </SPLITINLINE>
    is a reflection of the general distinction between describing properties of
    things and describing how to do things, or, as it is sometimes referred to,
    the distinction between
    <INDEX>declarative vs.<SPACE/>imperative knowledge</INDEX>
    <INDEX>imperative vs.<SPACE/>declarative knowledge</INDEX>
    declarative knowledge and imperative knowledge. In
    <INDEX>mathematics<SUBINDEX>computer science vs.</SUBINDEX></INDEX>
    <INDEX>computer science<SUBINDEX>mathematics vs.</SUBINDEX></INDEX>
    mathematics we are usually concerned with declarative (what is)
    descriptions, whereas in computer science we are usually concerned
    with imperative (how to) descriptions.<FOOTNOTE>Declarative and
    imperative descriptions are intimately related, as indeed are
    mathematics and computer science.  For instance, to say that the
    answer produced by a program is
    <INDEX>correctness of a program</INDEX>
    <QUOTE>correct</QUOTE> is to make a declarative statement about the program.
    There is a large amount of research aimed at establishing techniques for
    <INDEX>proving programs correct</INDEX>
    proving that programs are correct, and much of the technical difficulty of
    this subject has to do with negotiating the transition between imperative
    statements (from which programs are constructed) and declarative statements
    (which can be used to deduce things).
    <SPLITINLINE>
      <SCHEME>
	In a related vein, an important
	current area in programming-language design is the exploration of so-called
	<INDEX>programming language<SUBINDEX>very high-level</SUBINDEX></INDEX>
	<INDEX>very high-level language</INDEX>
	very high-level languages, in which one actually programs in terms of
	declarative statements.
      </SCHEME>
      <PYTHON>
	In a related vein, programming language designers have explored
	so-called
	<INDEX>programming language<SUBINDEX>very high-level</SUBINDEX></INDEX>
	<INDEX>very high-level language</INDEX>
	very high-level languages, in which one actually programs in terms of
	declarative statements.
      </PYTHON>
    </SPLITINLINE>
    The idea is to make interpreters sophisticated
    enough so that, given <QUOTE>what is</QUOTE> knowledge specified by the
    programmer, they can generate <QUOTE>how to</QUOTE> knowledge automatically.
    This cannot be done in general, but there are important areas where progress
    has been made.  We shall revisit this idea in chapter<SPACE/><REF NAME="chap:meta"></REF>.</FOOTNOTE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>procedure<SUBINDEX>mathematical function vs.<CLOSE/></SUBINDEX></INDEX>
	<INDEX>function (mathematical)<SUBINDEX>procedure vs.<CLOSE/></SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
	<INDEX><FUNCTION/><SUBINDEX>mathematical function vs.<CLOSE/></SUBINDEX></INDEX>
	<INDEX>function (mathematical)<SUBINDEX>JavaScript function vs.<CLOSE/></SUBINDEX></INDEX>
      </PYTHON>
    </SPLITINLINE>
  </TEXT>
  <TEXT>
    How does one compute
    <INDEX>square root<OPEN/></INDEX>
    <INDEX>Newton<APOS/>s method<SUBINDEX><ORDER>square</ORDER>for square roots<OPEN/></SUBINDEX></INDEX>
    square roots?  The most common way is to use
    Newton<APOS/>s method of successive approximations, which says that whenever
    we have a guess <LATEXINLINE>$y$</LATEXINLINE> for the value of the square
    root of a number <LATEXINLINE>$x$</LATEXINLINE>, we can perform a simple
    manipulation to get a better guess (one closer to the actual square root)
    by averaging <LATEXINLINE>$y$</LATEXINLINE> with
    <LATEXINLINE>$x/y$</LATEXINLINE>.<FOOTNOTE>This square-root algorithm is
    actually a special case of Newton<APOS/>s method, which is a general
    technique for finding roots of equations.  The square-root algorithm itself
    was developed by Heron of
    <INDEX>Heron of Alexandria</INDEX>
    Alexandria in the first century CE.  We will see how to express
    the general Newton<APOS/>s method as a
    <SPLITINLINE>
      <SCHEME>
        Lisp procedure
      </SCHEME>
      <PYTHON>
        JavaScript function
      </PYTHON>
    </SPLITINLINE>
    in section<SPACE/><REF NAME="sec:proc-returned-values"/>.</FOOTNOTE>
    For example, we can compute the square root of 2 as follows.  Suppose our
    initial guess is<SPACE/>1:
    <LATEX>
      \[
      \begin{array}{lll}
      \textrm{Guess} &amp; \textrm{Quotient} &amp; \textrm{Average}\\[1em]
      1      &amp; {\displaystyle \frac{2}{1} = 2}           &amp; {\displaystyle \frac{(2+1)}{2} = 1.5} \\[1em]
      1.5    &amp; {\displaystyle \frac{2}{1.5} = 1.3333}    &amp; {\displaystyle \frac{(1.3333+1.5)}{2} = 1.4167} \\[1em]
      1.4167 &amp; {\displaystyle \frac{2}{1.4167} = 1.4118} &amp; {\displaystyle \frac{(1.4167+1.4118)}{2} = 1.4142} \\[1em]
      1.4142 &amp; \ldots &amp; \ldots
      \end{array}
      \]
    </LATEX>
    Continuing this process, we obtain better and better approximations to the
    square root.
  </TEXT>
  <TEXT>
    Now let<APOS/>s formalize the process in terms of functions.  We start with
    a value for the
    <INDEX>radicand</INDEX>
    radicand (the number whose square root we are trying to compute) and a value
    for the guess.  If the guess is good enough for our purposes, we are done;
    if not, we must repeat the process with an improved guess.  We write this
    basic strategy as a
    <SPLITINLINE>
      <SCHEME>
        procedure:
      </SCHEME>
      <PYTHON>
        function:
      </PYTHON>
    </SPLITINLINE>

    <SNIPPET>
      <NAME>sqrt_iter</NAME>
      <REQUIRES>is_good_enough</REQUIRES>
      <REQUIRES>improve</REQUIRES>
      <EXAMPLE>sqrt_iter_example</EXAMPLE>
      <SCHEME>
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
      </SCHEME>
      <PYTHON>
function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : sqrt_iter(improve(guess, x), x);
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>sqrt_iter_example</NAME>
      <SCHEME>
(sqrt-iter 3 25)
      </SCHEME>
      <PYTHON>
sqrt_iter(3, 25);
      </PYTHON>
    </SNIPPET>
    A guess is improved by averaging it with the quotient of the radicand and
    the old guess:
    <SNIPPET>
      <NAME>improve</NAME>
      <REQUIRES>average_definition</REQUIRES>
      <EXAMPLE>improve_example</EXAMPLE>
      <SCHEME>
(define (improve guess x)
  (average guess (/ x guess)))
      </SCHEME>
      <PYTHON>
function improve(guess, x) {
    return average(guess, x / guess);
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>improve_example</NAME>
      <SCHEME>
(improve 3 25)
      </SCHEME>
      <PYTHON>
improve(3, 25);
      </PYTHON>
    </SNIPPET>
    where
    <SNIPPET>
      <INDEX><DECLARATION>average</DECLARATION></INDEX>
      <NAME>average_definition</NAME>
      <EXAMPLE>average_example</EXAMPLE>
      <SCHEME>
(define (average x y)
  (/ (+ x y) 2))
      </SCHEME>
      <PYTHON>
function average(x, y) {
    return (x + y) / 2;
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>average_example</NAME>
      <SCHEME>
(average 3 6)
      </SCHEME>
      <PYTHON>
average(3, 6);
      </PYTHON>
    </SNIPPET>
    We also have to say what we mean by <QUOTE>good enough.</QUOTE>  The
    following will do for illustration, but it is not really a very good
    test.  (See exercise<SPACE/><REF NAME="ex:ex-sqrt-end-test"/>.)
    The idea is to improve the answer until it is close enough so that its
    square differs from the radicand by less than a predetermined
    tolerance (here 0.001):<SPLIT><SCHEME><FOOTNOTE>We will usually give
    <INDEX>predicate<SUBINDEX>naming convention for</SUBINDEX></INDEX>
    <INDEX>naming conventions<SUBINDEX><ORDER>?</ORDER><SCHEMEINLINE>?</SCHEMEINLINE> for predicates</SUBINDEX></INDEX>
    <INDEX>question mark, in predicate names</INDEX>
    <INDEX><USE>?</USE>, in predicate names</INDEX> 
    predicates names ending with question marks, to help us remember that they
    are predicates.  This is just a stylistic convention.  As far as the
    interpreter is concerned, the question mark is just an ordinary
    character.</FOOTNOTE></SCHEME><PYTHON><FOOTNOTE>We will usually give
    <INDEX>predicate<SUBINDEX>naming convention for</SUBINDEX></INDEX>
    <INDEX>naming conventions<SUBINDEX><ORDER>is</ORDER><PYTHONINLINE>is_</PYTHONINLINE> for predicates</SUBINDEX></INDEX>
    <INDEX><PYTHONINLINE>is_</PYTHONINLINE>, in predicate names<ORDER>is</ORDER></INDEX>
    predicates names starting with <PYTHONINLINE>is_</PYTHONINLINE>, to help us remember that they
    are predicates.</FOOTNOTE></PYTHON></SPLIT>
    <SNIPPET>
      <NAME>is_good_enough</NAME>
      <REQUIRES>abs_definition</REQUIRES>
      <REQUIRES>square_definition</REQUIRES>
      <EXAMPLE>is_good_enough_example</EXAMPLE>
      <SCHEME>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
      </SCHEME>
      <PYTHON>
function is_good_enough(guess, x) {
    return abs(square(guess) - x) &lt; 0.001;
}
      </PYTHON>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>is_good_enough_example</NAME>
      <SCHEME>
(good-enough? 1.41 2)
      </SCHEME>
      <PYTHON>
is_good_enough(1.41, 2);
      </PYTHON>
    </SNIPPET>
    Finally, we need a way to get started.  For instance, we can always guess
    that the square root of any number
    is<SPACE/>1:<SPLITINLINE><SCHEME><FOOTNOTE>Observe that we express
    our initial guess as 1.0 rather than 1.  This would not make any difference
    in many Lisp implementations.
    <INDEX>rational number(s)<SUBINDEX><ORDER>MIT</ORDER>in MIT Scheme</SUBINDEX></INDEX>
    <INDEX>exact integer</INDEX>
    <INDEX>integer(s)<SUBINDEX>exact</SUBINDEX></INDEX>
    <INDEX>division of integers</INDEX>
    <INDEX>integer(s)<SUBINDEX>dividing</SUBINDEX></INDEX>
    <INDEX>number(s)<SUBINDEX>rational number</SUBINDEX></INDEX>
    <INDEX>number(s)<SUBINDEX>integer, exact</SUBINDEX></INDEX>
    <INDEX>number(s)<SUBINDEX>decimal point in</SUBINDEX></INDEX>
    <INDEX>decimal point in numbers</INDEX>
    <INDEX>MIT Scheme<SUBINDEX>numbers</SUBINDEX></INDEX>
    <INDEX>implementation dependencies<SUBINDEX>numbers</SUBINDEX></INDEX>
    <INDEX>number(s)<SUBINDEX>implementation dependencies</SUBINDEX></INDEX>
    MIT Scheme, however, distinguishes between exact integers and decimal values,
    and dividing two integers produces a rational number rather than a decimal.
    For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields
    1.6666666666666667.  (We will learn how to implement arithmetic on rational
    numbers in section<SPACE/><REF NAME="sec:rationals"/>.)  If we start with an
    initial guess of 1 in our square-root program, and
    <LATEXINLINE>$x$</LATEXINLINE> is an exact integer, all subsequent values
    produced in the square-root computation will be rational numbers rather than
    decimals.  Mixed operations on rational numbers and decimals always yield
    decimals, so starting with an initial guess of 1.0 forces all subsequent
    values to be decimals.</FOOTNOTE></SCHEME></SPLITINLINE>
    <COMMENT>Footnote removed: it was specific to Scheme (or even more specific:
    to MIT Scheme)</COMMENT>
    <SNIPPET>
      <INDEX><DECLARATION>sqrt</DECLARATION></INDEX>
      <NAME>sqrt</NAME>
      <REQUIRES>sqrt_iter</REQUIRES>
      <EXAMPLE>sqrt_example_2</EXAMPLE>
      <EXPECTED>2.2360688956433634</EXPECTED>
      <SCHEME>
(define (sqrt x)
  (sqrt-iter 1.0 x))
                </SCHEME>
                <PYTHON>
function sqrt(x) {
    return sqrt_iter(1, x);
}
                </PYTHON>
    </SNIPPET>
    If we type these
    <SPLITINLINE>
      <SCHEME>
	definitions
      </SCHEME>
      <PYTHON>
	declarations
      </PYTHON>
    </SPLITINLINE>
    to the interpreter, we can use <SCHEMEINLINE>sqrt</SCHEMEINLINE>
    just as we can use any
    <SPLITINLINE>
      <SCHEME>
        procedure:
      </SCHEME>
      <PYTHON>
        function:
      </PYTHON>
    </SPLITINLINE>
    <SNIPPET PAGE="24">
      <NAME>sqrt_example</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt 9)
      </SCHEME>
      <SCHEMEOUTPUT>
3.00009155413138
      </SCHEMEOUTPUT>
      <PYTHON>
sqrt(9);
      </PYTHON>
      <PYTHON_OUTPUT>
3.00009155413138
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET PAGE="24" HIDE="yes">
      <NAME>sqrt_example_2</NAME>
      <SCHEME>
(sqrt 5)
      </SCHEME>
      <PYTHON>
sqrt(5);
      </PYTHON>
    </SNIPPET>

    <SNIPPET>
      <NAME>sqrt_example_3</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ 100 37))
      </SCHEME>
      <SCHEMEOUTPUT>
11.704699917758145
      </SCHEMEOUTPUT>
      <PYTHON>
sqrt(100 + 37);
      </PYTHON>
      <PYTHON_OUTPUT>
11.704699917758145
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_4</NAME>
      <EXPECTED>1.7739279023207892</EXPECTED>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(sqrt (+ (sqrt 2) (sqrt 3)))
      </SCHEME>
      <SCHEMEOUTPUT>
1.7739279023207892
      </SCHEMEOUTPUT>
      <PYTHON>
sqrt(sqrt(2) + sqrt(3));
      </PYTHON>
      <PYTHON_OUTPUT>
1.7739279023207892		
      </PYTHON_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <NAME>sqrt_example_5</NAME>
      <REQUIRES>sqrt</REQUIRES>
      <SCHEME>
(square (sqrt 1000))
      </SCHEME>
      <SCHEMEOUTPUT>
1000.000369924366
      </SCHEMEOUTPUT>
      <PYTHON>
square(sqrt(1000));
      </PYTHON>
      <PYTHON_OUTPUT>
1000.000369924366
      </PYTHON_OUTPUT>
      <INDEX>square root<CLOSE/></INDEX>
      <INDEX>Newton<APOS/>s method<SUBINDEX><ORDER>square</ORDER>for square roots<CLOSE/></SUBINDEX></INDEX>
    </SNIPPET>
  </TEXT>
  <TEXT>
    The <SCHEMEINLINE>sqrt</SCHEMEINLINE> program also illustrates that the
    simple
    <SPLITINLINE>
      <SCHEME>
	<INDEX>iterative process<SUBINDEX>implemented by procedure call<OPEN/></SUBINDEX></INDEX>
	procedural
      </SCHEME>
      <PYTHON>
	<INDEX>iterative process<SUBINDEX>implemented by function call<OPEN/></SUBINDEX></INDEX>
	functional
      </PYTHON>
    </SPLITINLINE>
    language we have introduced so far is sufficient for writing any purely
    numerical program that one could write in, say, C or Pascal.  This might
    seem surprising, since we have not included in our language any iterative
    <INDEX>looping constructs</INDEX>
    (looping) constructs that direct the computer to do something over and over
    again.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Sqrt-iter</SCHEMEINLINE>,
      </SCHEME>
      <PYTHON>
	The function <PYTHONINLINE>sqrt_iter</PYTHONINLINE>,
      </PYTHON>
    </SPLITINLINE>
    on the other hand, demonstrates how iteration can be accomplished using no
    special construct other than the ordinary ability to call a
    <SPLITINLINE><SCHEME>procedure.</SCHEME><PYTHON>function.</PYTHON></SPLITINLINE><FOOTNOTE>Readers who are worried about the efficiency issues involved in using
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    calls to implement iteration should note the remarks on <QUOTE>tail
    recursion</QUOTE> in
    section<SPACE/><REF NAME="sec:recursion-and-iteration"/>.</FOOTNOTE>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>iterative process<SUBINDEX>implemented by procedure call<CLOSE/></SUBINDEX></INDEX>
      </SCHEME>
      <PYTHON>
	<INDEX>iterative process<SUBINDEX>implemented by function call<CLOSE/></SUBINDEX></INDEX>
      </PYTHON>
    </SPLITINLINE>
  </TEXT>

  <EXERCISE>
    <SPLIT>
      <SCHEME>
        Alyssa P. Hacker doesn<APOS/>t see why <SCHEMEINLINE>if</SCHEMEINLINE>
	needs to be provided as a
        <INDEX><DECLARATION>if</DECLARATION><SUBINDEX>why a special form</SUBINDEX></INDEX>
        <INDEX>special form<SUBINDEX>need for</SUBINDEX></INDEX>
	special form.  <QUOTE>Why can<APOS/>t I just
	define it as an ordinary procedure in terms of
        <SCHEMEINLINE>cond</SCHEMEINLINE>?</QUOTE> she asks.
        Alyssa<APOS/>s friend Eva Lu Ator claims this can indeed be done, and
        she defines a new version of <SCHEMEINLINE>if</SCHEMEINLINE>:
        <SNIPPET>
          <NAME>new_if</NAME>
          <SCHEME>
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
          </SCHEME>
        </SNIPPET>
        Eva demonstrates the program for Alyssa:
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 2 3) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
5
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <SCHEME>
(new-if (= 1 1) 0 5)
          </SCHEME>
          <SCHEMEOUTPUT>
0
          </SCHEMEOUTPUT>
        </SNIPPET>
        Delighted, Alyssa uses <SCHEMEINLINE>new-if</SCHEMEINLINE> to rewrite
	the square-root program:
        <SNIPPET>
          <REQUIRES>new_if</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <SCHEME>
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
          </SCHEME>
        </SNIPPET>
        What happens when Alyssa attempts to use this to compute square roots?
        Explain.
        <LABEL NAME="ex:new-if"/>
      </SCHEME>
      <PYTHON>
        Alyssa P. Hacker doesn<APOS/>t like the syntax of
        <INDEX>syntactic form<SUBINDEX>need for</SUBINDEX></INDEX>
        <INDEX>conditional expression<SUBINDEX>why a syntactic form</SUBINDEX></INDEX>
	conditional
	expressions, involving the characters <SCHEMEINLINE>?</SCHEMEINLINE>
	and <SCHEMEINLINE>:</SCHEMEINLINE>.
	<QUOTE>Why can<APOS/>t I just
	declare an ordinary conditional function whose application 
	works just like conditional expressions?</QUOTE>
	she asks.<FOOTNOTE>
	As a Lisp hacker from the original <EM>Structure and Interpretation
	of Computer Programs</EM>, Alyssa prefers a simpler, more uniform
	syntax.</FOOTNOTE>
	Alyssa<APOS/>s friend Eva Lu Ator claims this can indeed be
	done, and she declares a <PYTHONINLINE>conditional</PYTHONINLINE>
	function as follows:
        <SNIPPET>
          <NAME>conditional</NAME>
          <PYTHON>
function conditional(predicate, then_clause, else_clause) {		    
    return predicate ? then_clause : else_clause;
}
	  </PYTHON>
        </SNIPPET>
        Eva demonstrates the program for Alyssa:
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <PYTHON>
conditional(2 === 3, 0, 5);
	  </PYTHON>
	  <PYTHON_OUTPUT>
5
	  </PYTHON_OUTPUT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>conditional</REQUIRES>
          <PYTHON>
conditional(1 === 1, 0, 5);
	  </PYTHON>
	  <PYTHON_OUTPUT>
0
	  </PYTHON_OUTPUT>
        </SNIPPET>
	Delighted, Alyssa uses
	<SCHEMEINLINE>conditional</SCHEMEINLINE> to rewrite the square-root
        program:
        <SNIPPET>
	  <NAME>delighted</NAME>
          <REQUIRES>conditional</REQUIRES>
          <REQUIRES>is_good_enough</REQUIRES>
          <REQUIRES>improve</REQUIRES>
          <EXAMPLE>sqrt_iter_example</EXAMPLE>
          <PYTHON>
function sqrt_iter(guess, x) {
    return conditional(is_good_enough(guess, x),
                       guess,
                       sqrt_iter(improve(guess, x),
                                 x));
}
	  </PYTHON>
        </SNIPPET>
        What happens when Alyssa attempts to use this to compute square roots?
        Explain.
        <LABEL NAME="ex:new-if"/>
	<SOLUTION>
	  Any call of <PYTHONINLINE>sqrt_iter</PYTHONINLINE>
	  leads immediately to an infinite loop. The reason for this is our
	  applicative-order evaluation. The evaluation of the return expression
	  of <PYTHONINLINE>sqrt_iter</PYTHONINLINE> needs to evaluate
	  its arguments first, including the recursive call of
	  <PYTHONINLINE>sqrt_iter</PYTHONINLINE>, regardless whether the
	  predicate evaluates to <EM>true</EM> or <EM>false</EM>. The same of
	  course happens with the recursive call, and thus the function
	  <PYTHONINLINE>conditional</PYTHONINLINE> never actually gets
	  applied.
	</SOLUTION>
      </PYTHON>
    </SPLIT>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:ex-sqrt-end-test"/>
    The
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
        <PYTHONINLINE>is_good_enough</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    test used in computing square roots will not be very effective for finding
    the square roots of very small numbers. Also, in real computers, arithmetic
    operations are almost always performed with limited precision.  This makes
    our test inadequate for very large numbers.  Explain these statements, with
    examples showing how the test fails for small and large numbers.  An
    alternative strategy for implementing
    <SPLITINLINE>
      <SCHEME>
        <SCHEMEINLINE>good-enough?</SCHEMEINLINE>
      </SCHEME>
      <PYTHON>
        <PYTHONINLINE>is_good_enough</PYTHONINLINE>
      </PYTHON>
    </SPLITINLINE>
    is to watch how <SCHEMEINLINE>guess</SCHEMEINLINE> changes from one
    iteration to the next and to stop when the change is a very small fraction
    of the guess.  Design a square-root
    <SPLITINLINE>
      <SCHEME>
        procedure
      </SCHEME>
      <PYTHON>
        function
      </PYTHON>
    </SPLITINLINE>
    that uses this kind of end test.  Does this work better for small and
    large numbers?
    <SOLUTION>
      The absolute tolerance of 0.001 is too large when computing the square
      root of a small value. For example,
      <PYTHONINLINE>sqrt(0.0001)</PYTHONINLINE>
      results in 0.03230844833048122 instead of the expected value 0.01,
      an error of over 200%.
      <P/>
      On the other hand, for very large values, rounding errors might make
      the algorithm fail to ever get close enough to the square root, in which
      case it will not terminate.
      <P/>
      The following program alleviates the problem by replacing an absolute
      tolerance with a relative tolerance.
      <SNIPPET>
        <REQUIRES>abs_definition</REQUIRES>
        <REQUIRES>average_definition</REQUIRES>
        <REQUIRES>sqrt</REQUIRES>
        <REQUIRES>improve</REQUIRES>
        <REQUIRES>sqrt_iter</REQUIRES>	
	<EXAMPLE>example_1.8</EXAMPLE>
	<PYTHON>
const error_threshold = 0.01;
function is_good_enough(guess, x) {
    return relative_error(guess, improve(guess, x))
           &lt; error_threshold;
}
function relative_error(estimate, reference) {
    return abs(estimate - reference) / reference;
}
	</PYTHON>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.8</NAME>
      <PYTHON>
sqrt(3);
      </PYTHON>
      <SCHEME>
      </SCHEME>
    </SNIPPET>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:cube-root-newton"/>
    Newton<APOS/>s method for
    <INDEX>cube root<SUBINDEX><ORDER>Newton</ORDER>by Newton<APOS/>s method</SUBINDEX></INDEX>
    <INDEX>Newton<APOS/>s method<SUBINDEX><ORDER>cube</ORDER>for cube roots</SUBINDEX></INDEX>
    cube roots is based on the fact that if
    <LATEXINLINE>$y$</LATEXINLINE> is an
    approximation to the cube root of <LATEXINLINE>$x$</LATEXINLINE>, then a better approximation is
    given by the value
    <LATEX>
      \[
      \begin{array}{lll}
      \dfrac{x/y^{2}+2y} {3}
      \end{array}
      \]
    </LATEX>
    Use this formula to implement a cube-root
    <SPLITINLINE>
      <SCHEME>
	procedure
      </SCHEME>
      <PYTHON>
	function
      </PYTHON>
    </SPLITINLINE>
    analogous to the square-root
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <PYTHON>function.</PYTHON>
    </SPLITINLINE>
    (In section<SPACE/><REF NAME="sec:proc-returned-values"/> we will see how to
    implement Newton<APOS/>s method in general as an abstraction of these
    square-root and cube-root
    <SPLITINLINE>
      <SCHEME>procedures.)</SCHEME>
      <PYTHON>functions.)</PYTHON>
    </SPLITINLINE>
    <SOLUTION>
      <SNIPPET>
	<EXAMPLE>example_1.9</EXAMPLE>
	<REQUIRES>abs_definition</REQUIRES>
	<REQUIRES>cube_definition</REQUIRES>
	<PYTHON>
function is_good_enough(guess, x) {
    return abs(cube(guess) - x) &lt; 0.001;
}
function div3(x, y) {
     return (x + y) / 3;
}
function improve(guess, x) {
    return div3(x / (guess * guess), 2 * guess);
}
function cube_root(guess, x) {
    return is_good_enough(guess, x)
           ? guess
           : cube_root(improve(guess, x), x);
}
	</PYTHON>
	<SCHEME>
	</SCHEME>
      </SNIPPET>
    </SOLUTION>
    <SNIPPET HIDE="yes">
      <NAME>example_1.9</NAME>
      <PYTHON>
	cube_root(3, 27);
      </PYTHON>
    </SNIPPET>
  </EXERCISE>
</SUBSECTION>
