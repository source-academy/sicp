<SECTION>
  <NAME>Streams</NAME><!-- Error occurred while translating this section -->

  <SECTIONCONTENT></SECTIONCONTENT><!-- Error occurred while translating this section -->

  <LABEL NAME="sec:streams"></LABEL>

  <INDEX>stream(s)<OPEN></OPEN></INDEX><!-- Error occurred while translating this section -->

  <TEXT>
    We<APOS></APOS>ve gained a good understanding of assignment as a tool in modeling,
    as well as an appreciation of the complex problems that assignment
    raises. It is time to ask whether we could have gone about things in a
    different way, so as to avoid some of these problems.  In this
    section, we explore an alternative approach to modeling state, based
    on data structures called <EM>streams</EM>.  As we shall see, streams can
    mitigate some of the complexity of modeling state.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    Let<APOS></APOS>s step back and review where this complexity comes from.  In an
    attempt to model real-world phenomena, we made some apparently
    reasonable decisions: We modeled real-world objects with local state
    by computational objects with local variables.  We identified time
    variation in the real world with time variation in the computer.  We
    implemented the time variation of the states of the model objects in
    the computer with assignments to the local variables of the model
    objects.
  </TEXT><!-- Error occurred while translating this section -->

  <SHORT_PAGE LINES="4"></SHORT_PAGE><!-- Error occurred while translating this section -->
  <TEXT>
    Is there another approach?  Can we avoid identifying time in the
    computer with time in the modeled world?  Must we make the model
    change with time in order to model phenomena in a changing world?
    Think about the issue in terms of mathematical functions.  We can
    describe the time-varying behavior of a quantity
    <LATEXINLINE>$x$</LATEXINLINE> as a function of time
    <LATEXINLINE>$x(t)$</LATEXINLINE>.  
    If we concentrate on <LATEXINLINE>$x$</LATEXINLINE> instant by instant,
    we think of it as a changing quantity.  Yet if we concentrate on the entire
    time history of values, we do not emphasize change<EMDASH></EMDASH>the function
    itself does not change.<FOOTNOTE>Physicists sometimes adopt this view by
    introducing the
    <INDEX>world line of a particle</INDEX>
    <QUOTE>world lines</QUOTE> of particles as a device for reasoning about
    motion. We<APOS></APOS>ve also already mentioned
    (section<SPACE></SPACE><REF NAME="sec:sequences-conventional-interfaces"></REF>) that
    this is the natural way to think about signal-processing systems.  We will
    explore applications of streams to signal processing in
    section<SPACE></SPACE><REF NAME="sec:exploiting-streams"></REF>.</FOOTNOTE>
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    If time is measured in discrete steps, then we can model a time function as
    a (possibly infinite) sequence.  In this section, we will see how to
    model change in terms of sequences that represent the time histories
    of the systems being modeled.  To accomplish this, we introduce new
    data structures called <EM>streams</EM>.  From an abstract point of view,
    a stream is simply a sequence.  However, we will find that the
    straightforward implementation of streams as lists (as in
    section<SPACE></SPACE><REF NAME="sec:sequences"></REF>) doesn<APOS></APOS>t fully reveal
    the power of stream processing.  As an alternative, we introduce the
    technique of 
    <INDEX>delayed evaluation</INDEX>
    <EM>delayed evaluation</EM>, which enables us to represent
    very large (even infinite) sequences as streams.
  </TEXT><!-- Error occurred while translating this section -->

  <TEXT>
    Stream processing lets us model systems that have state without ever
    using assignment or mutable data.  This has important implications,
    both theoretical and practical, because we can build models that avoid
    the drawbacks inherent in introducing assignment.  On<SPACE></SPACE>the other hand,
    the stream framework raises difficulties of its own, and the question
    of which modeling technique leads to more modular and more easily
    maintained systems remains open.
  </TEXT><!-- Error occurred while translating this section -->

  <!--  Subsection 1 : Streams Are Delayed Lists  -->
  &amp;subsection3.5.1;

  <!--  Subsection 2 : Infinite Streams  -->
  &amp;subsection3.5.2;

  <!--  Subsection 3 : Exploiting the Stream Paradigm  -->
  &amp;subsection3.5.3;

  <!--  Subsection 4 : Streams and Delayed Evaluation  -->
  &amp;subsection3.5.4;

  <!--  Subsection 5 : Modularity of Functional Programs and Modularity of 
                                                                  Objects  -->
  &amp;subsection3.5.5;

</SECTION>
