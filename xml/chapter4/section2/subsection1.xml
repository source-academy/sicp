<SUBSECTION>
  <NAME>
    Normal Order and Applicative Order
  </NAME>

  <LABEL NAME="sec:evaluation-order"/>

  <INDEX>normal-order evaluation<SUBINDEX>applicative order vs.<OPEN/></SUBINDEX></INDEX>
  <INDEX>applicative-order evaluation<SUBINDEX>normal order vs.<OPEN/></SUBINDEX></INDEX>
  
  <TEXT>
    In section<SPACE/><REF NAME="sec:elements-of-programming"/>, where we began
    our discussion of models of evaluation, we noted that
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    is an <EM>applicative-order</EM> language, namely, that all the arguments to
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <PYTHON>JavaScript</PYTHON>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are evaluated when the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is applied.  In contrast, <EM>normal-order</EM> languages delay evaluation of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    arguments until the actual argument values are needed. Delaying evaluation of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    arguments until the last possible moment (e.g., until they are required by a
    primitive operation) is called 
    <INDEX>lazy evaluation</INDEX>
    <EM>lazy evaluation</EM>.<FOOTNOTE>The difference between the
    <QUOTE>lazy</QUOTE> terminology and the <QUOTE>normal-order</QUOTE>
    terminology is somewhat fuzzy.  Generally, <QUOTE>lazy</QUOTE> refers to the
    mechanisms of particular evaluators, while <QUOTE>normal-order</QUOTE>
    refers to the semantics of languages, independent of any particular
    evaluation strategy.  But this is not a hard-and-fast distinction, and the
    two terminologies are often used interchangeably.</FOOTNOTE> Consider the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    <SNIPPET HIDE="yes">
      <NAME>try_me_example</NAME>
      <PYTHON>
try_me(0, head(null));
      </PYTHON>
    </SNIPPET>
    <SNIPPET CHAP="2" VARIANT="lazy">
      <NAME>try_me</NAME>
      <EXAMPLE>try_me_example</EXAMPLE>
      <EXPECTED>1</EXPECTED>
      <SCHEME>
(define (try a b)
  (if (= a 0) 1 b))
      </SCHEME>
      <PYTHON>
function try_me(a, b) {
    return a === 0 ? 1 : b;	
}
      </PYTHON>
      <PYTHON_RUN>
// Source Academy opens this program
// in lazy mode. Choose "Source ยง2" to
// to compare with strict mode
function try_me(a, b) {
    return a === 0 ? 1 : b;	
}
      </PYTHON_RUN>
    </SNIPPET>
    Evaluating
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(try 0 (/ 1 0))</SCHEMEINLINE>
	generates
      </SCHEME>
      <PYTHON>
	<PYTHONINLINE>try_me(0, head(null));</PYTHONINLINE>
	signals
      </PYTHON>
    </SPLITINLINE>
    an error in
    <SPLITINLINE>
      <SCHEME>Scheme.</SCHEME>
      <PYTHON>JavaScript.</PYTHON>
    </SPLITINLINE>
    With lazy evaluation, there would be no error.  Evaluating the
    <SPLITINLINE>
      <SCHEME>expression</SCHEME>
      <PYTHON>statement</PYTHON>
    </SPLITINLINE>
    would return<SPACE/>1, because the argument
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(/ 1 0)</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>head(null)</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    would never be evaluated.
  </TEXT>

  <TEXT>
    An example that exploits lazy evaluation is the
    <SPLITINLINE>
      <SCHEME>definition</SCHEME>
      <PYTHON>declaration</PYTHON>
    </SPLITINLINE>
    of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>unless</SCHEMEINLINE>
    <SNIPPET CHAP="2" VARIANT="lazy">
      <NAME>unless</NAME>
      <EXAMPLE>unless_example</EXAMPLE>
      <SCHEME>
(define (unless condition usual-value exceptional-value)
  (if condition exceptional-value usual-value))
      </SCHEME>
      <PYTHON>
function unless(condition, usual_value, exceptional_value) {      
    return condition ? exceptional_value : usual_value;
}
      </PYTHON>
      <PYTHON_RUN>
// Source Academy opens this program
// in lazy mode. Choose "Source ยง2" to
// to compare with strict mode
function unless(condition, usual_value, exceptional_value) {      
    return condition ? exceptional_value : usual_value;
}
      </PYTHON_RUN>
    </SNIPPET>
    that can be used in
    <SPLITINLINE>
      <SCHEME>expressions</SCHEME>
      <PYTHON>statements</PYTHON>
    </SPLITINLINE>
    such as
    <SNIPPET HIDE="yes">
      <NAME>xs_is_null</NAME>
      <PYTHON>
const xs = null;
      </PYTHON>
    </SNIPPET>
    <SNIPPET CHAP="2" VARIANT="lazy">
      <NAME>unless_example</NAME>
      <REQUIRES>unless</REQUIRES>
      <REQUIRES>xs_is_null</REQUIRES>
      <SCHEME>
(unless (= b 0)
        (/ a b)
        (begin (display "exception: returning 0")
               0))
      </SCHEME>
      <PYTHON>
unless(is_null(xs), head(xs), display("error: xs should not be null"));
      </PYTHON>
    </SNIPPET>
    This won<APOS/>t work in an applicative-order language because both the
    usual value and the exceptional value will be evaluated before
    <SCHEMEINLINE>unless</SCHEMEINLINE> is called (compare
    exercise<SPACE/><REF NAME="ex:new-if"/>). An advantage of lazy evaluation is
    that some
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <PYTHON>functions,</PYTHON>
    </SPLITINLINE>
    such as <SCHEMEINLINE>unless</SCHEMEINLINE>, can do useful computation
    even if evaluation of some of their arguments would produce errors or
    would not terminate.
  </TEXT>

  <DO_BREAK_PAGE/>
  <TEXT>
    If the body of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is entered before an argument has been evaluated we say that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is 
    <INDEX>non-strict</INDEX>
    <EM>non-strict</EM> in that argument.  If the argument is evaluated before
    the body of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is entered we say that the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    is 
    <INDEX>strict</INDEX>
    <EM>strict</EM> in that
    argument.<FOOTNOTE>The <QUOTE>strict</QUOTE> versus <QUOTE>non-strict</QUOTE>
    terminology means essentially the same as
    <QUOTE>applicative-order</QUOTE> versus <QUOTE>normal-order,</QUOTE> except
    that it refers to individual
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    and arguments rather than to the language as a whole.  At a conference on
    programming languages you might hear someone say, <QUOTE>The normal-order
    language 
    <INDEX>Hassle</INDEX>
    Hassle has certain strict primitives.  Other
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    take their arguments by lazy evaluation.</QUOTE></FOOTNOTE>
    In a purely applicative-order language, all
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are strict in each argument.  In a purely normal-order language, all compound
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    are non-strict in each argument, and primitive
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    may be either strict or non-strict.  There are also languages (see
    exercise<SPACE/><REF NAME="ex:user-controlled-strictness"/>) that give
    programmers detailed control over the strictness of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    they define.
  </TEXT>

  <TEXT>
    A striking example of a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    that can usefully be made non-strict is
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME>
      <PYTHON><PYTHONINLINE>pair</PYTHONINLINE></PYTHON>
    </SPLITINLINE>
    (or, in general, almost any constructor for data structures).
    One can do useful computation, combining elements to form
    data structures and operating on the resulting data structures,
    even if the values of the elements are not known.  It makes perfect
    sense, for instance, to compute the length of a list without knowing
    the values of the individual elements in the list.  We will exploit
    this idea in section<SPACE/><REF NAME="sec:lazy-cons"/> to implement the
    streams of chapter<SPACE/><REF NAME="chap:state"></REF> as lists formed of non-strict
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE> pairs.</SCHEME>
      <PYTHON>pairs.</PYTHON>
    </SPLITINLINE>    
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:ordinary"/>
    <SPLITINLINE>
      <SCHEME>
	Suppose that (in ordinary applicative-order Scheme) we define
      </SCHEME>
      <PYTHON>
	Suppose that (in ordinary applicative-order JavaScript) we define
      </PYTHON>
    </SPLITINLINE>
    <SCHEMEINLINE>unless</SCHEMEINLINE> as shown above and then define
    <SCHEMEINLINE>factorial</SCHEMEINLINE> in terms
    of <SCHEMEINLINE>unless</SCHEMEINLINE> as

    <SNIPPET CHAP="2" VARIANT="lazy">
      <NAME>factorial_lazy</NAME>
      <REQUIRES>unless</REQUIRES>
      <EXAMPLE>factorial_unless_example</EXAMPLE>
      <SCHEME>
(define (factorial n)
  (unless (= n 1)
          (* n (factorial (- n 1)))
          1))
      </SCHEME>
      <PYTHON>
function factorial(n) {
    return unless(n === 1,
                  n * factorial(n - 1),
                  1);
}
      </PYTHON>
      <PYTHON_RUN>
// Source Academy opens this program
// in lazy mode. Choose "Source ยง2" to
// to compare with strict mode

function factorial(n) {
    return unless(n === 1,
                  n * factorial(n - 1),
                  1);
}
      </PYTHON_RUN>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>factorial_unless_example</NAME>
      <SCHEME>
      </SCHEME>
      <PYTHON>
factorial(5);
      </PYTHON>
    </SNIPPET>
    What happens if we attempt to evaluate
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(factorial 5)</SCHEMEINLINE>?</SCHEME>
      <PYTHON><PYTHONINLINE>factorial(5)</PYTHONINLINE>?
      </PYTHON>
    </SPLITINLINE>
    Will our
    <SPLITINLINE>
      <SCHEME>definitions</SCHEME>
      <PYTHON>functions</PYTHON>
    </SPLITINLINE>
    work in a normal-order language?
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:unless-syntactic-form"/>
    Ben Bitdiddle and Alyssa P. Hacker
    <INDEX>syntactic form<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><PYTHON>function</PYTHON></SPLITINLINE> vs.</SUBINDEX></INDEX>
    <INDEX><FUNCTION/><SUBINDEX>syntactic form vs.</SUBINDEX></INDEX>
    disagree over the importance of lazy
    evaluation for implementing things such as
    <SCHEMEINLINE>unless</SCHEMEINLINE>. Ben points out that it<APOS/>s possible
    to implement <SCHEMEINLINE>unless</SCHEMEINLINE> in applicative order as a
    <SPLITINLINE>
      <SCHEME>special</SCHEME>
      <PYTHON>syntactic</PYTHON>
    </SPLITINLINE>
    form. Alyssa counters that, if one did that,
    <SCHEMEINLINE>unless</SCHEMEINLINE> would be merely syntax, not a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <PYTHON>function</PYTHON>
    </SPLITINLINE>
    that could be used in conjunction with higher-order
    <SPLITINLINE><SCHEME>procedures.</SCHEME>
    <PYTHON>functions.</PYTHON>
    </SPLITINLINE>
    Fill in the details on both sides of the argument.
    <SPLITINLINE>
      <SCHEME>
	Show how to implement <SCHEMEINLINE>unless</SCHEMEINLINE> as a derived
	expression (like <SCHEMEINLINE>cond</SCHEMEINLINE> or
	<SCHEMEINLINE>let</SCHEMEINLINE>), and give an example of a situation
	where it might be useful to have <SCHEMEINLINE>unless</SCHEMEINLINE>
	available as a procedure, rather than as a special form.
      </SCHEME>
      <PYTHON>
	Show how to implement <SCHEMEINLINE>unless</SCHEMEINLINE> as a derived
	component (like operator combination),
	by catching in <SCHEMEINLINE>evaluate</SCHEMEINLINE>
	applications whose function expression is the name
	<SCHEMEINLINE>unless</SCHEMEINLINE>.
	Give an example of a situation where it might be useful to have
	<SCHEMEINLINE>unless</SCHEMEINLINE> available as a function,
	rather than as a syntactic form.
      </PYTHON>
    </SPLITINLINE>
  </EXERCISE>

  <INDEX>normal-order evaluation<SUBINDEX>applicative order vs.<CLOSE/></SUBINDEX></INDEX>
  <INDEX>applicative-order evaluation<SUBINDEX>normal order vs.<CLOSE/></SUBINDEX></INDEX>
</SUBSECTION>
