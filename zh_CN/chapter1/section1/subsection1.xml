<SUBSECTION>
   <NAME>表达式</NAME> 
  <LABEL NAME="sec:expressions"></LABEL>

   <TEXT>
    开始编程的一种简单方法是检查与解释器的
    <SPLITINLINE>
      Scheme 方言的 Lisp.
      <JAVASCRIPT>JavaScript 语言.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      
	想象你正坐在一个
	计算机终端上。
      
    </SPLITINLINE>
    你输入 
    <SPLITINLINE>
      一个<EM>表达式</EM>,
      <JAVASCRIPT>一个<EM>语句</EM>,</JAVASCRIPT>
    </SPLITINLINE>
    然后解释器通过显示
    其<EM>求值</EM>该
    <SPLITINLINE>
      表达式的结果.
      <JAVASCRIPT>
	<INDEX>语句</INDEX>
	语句.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT> 
   <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	<WEB_ONLY DIFFERENT_TEXT="yes">
	  在本版本中，鼠标点击具有深色背景的 
	  JavaScript 语句的方式编程为显示 
	  JavaScript 解释器，该解释器可以<EM>求值</EM>该
	  语句并显示结果值。
	  顺便说一下，使鼠标点击
	  JavaScript 语句显示解释器的程序本身
	  是用 JavaScript 编写的；它称为鼠标点击的<EM>脚本</EM>。这样的脚本在
	  JavaScript 的最初设计中是一个核心目标。
	</WEB_ONLY>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT> 
  <TEXT>
     <SPLIT>
      
        <INDEX>数字<SUBINDEX>在 Lisp 中<ORDER>Lisp</ORDER></SUBINDEX></INDEX>
        <INDEX>原语表达式<SUBINDEX>数字</SUBINDEX></INDEX>
        你可能输入的一种原语表达式是一个数字。  
      
      <JAVASCRIPT>
        你可能输入的一种语句是一个 
        表达式语句，它由一个
        <EM>表达式</EM>后接一个分号组成。
        <INDEX>数字<SUBINDEX>在 JavaScript 中<ORDER>JavaScript</ORDER></SUBINDEX></INDEX>
        <INDEX>原语表达式<SUBINDEX>数字</SUBINDEX></INDEX>
	<INDEX>表达式语句</INDEX>
	<INDEX>表达式</INDEX>
	<INDEX>分号 (<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>结束语句</SUBINDEX></INDEX>
	一种原语表达式是一个数字。
      </JAVASCRIPT>
    </SPLIT>
    （更准确地说，你输入的表达式由表示数字的十进制数构成。）
    <PDF_ONLY>
      如果你提供
      <SPLITINLINE>
	Lisp 与一个数字
	<JAVASCRIPT>
	  JavaScript 与程序
	</JAVASCRIPT>
      </SPLITINLINE>
      
	
486
	
	<JAVASCRIPT>
486;
	</JAVASCRIPT>  
      
      解释器将通过打印来响应<FOOTNOTE>在本书中，
      我们区分
      <INDEX>本书中的表示法<SUBINDEX>斜体字符表示解释器响应</SUBINDEX></INDEX>
      用户输入的文本和解释器打印的任何文本，后者用斜体字符显示。</FOOTNOTE>
      
	<JAVASCRIPT_OUTPUT>
486
	</JAVASCRIPT_OUTPUT>
      
    </PDF_ONLY>
      <WEB_ONLY DIFFERENT_TEXT="yes">
      如果你要求我们的脚本求值表达式语句
      
	<JAVASCRIPT>
486;
	</JAVASCRIPT>  
      
      通过点击它，它将通过显示一个 JavaScript 解释器来响应，
      并提供一个选项，
      通过按下 <QUOTE>运行</QUOTE> 按钮来求值该语句。
      点击原语表达式语句，看看会发生什么！
    </WEB_ONLY>
   </TEXT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        Expressions representing numbers may be combined with an
        <INDEX>compound expression</INDEX>
        <INDEX>combination</INDEX>
        <INDEX>primitive expression<SUBINDEX>name of primitive procedure</SUBINDEX></INDEX>
        expression representing a
        <INDEX>arithmetic<SUBINDEX>primitive procedures for</SUBINDEX></INDEX>
        <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>+</ORDER>{\tt +}</SUBINDEX></INDEX>
        <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>*</ORDER>{\tt *}</SUBINDEX></INDEX>
        primitive procedure (such as 
        <SCHEMEINLINE>+</SCHEMEINLINE> or <SCHEMEINLINE>*</SCHEMEINLINE>) to
	form a compound expression that represents the application of the
	procedure to those numbers.  For example,
        <SNIPPET>
          <SCHEME>
(+ 137 349)
          </SCHEME>
          <SCHEMEOUTPUT>
486
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>-</ORDER>{\tt -}</SUBINDEX></INDEX>
          <SCHEME>
(- 1000 334)
          </SCHEME>
          <SCHEMEOUTPUT>
666
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(* 5 99)
          </SCHEME>
          <SCHEMEOUTPUT>
495
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <INDEX><USE>primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)</USE><SUBINDEX><ORDER>/</ORDER>{\tt /}</SUBINDEX></INDEX>
          <SCHEME>
(/ 10 5)
          </SCHEME>
          <SCHEMEOUTPUT>
2
          </SCHEMEOUTPUT>
        </SNIPPET>
        <SNIPPET>
          <SCHEME>
(+ 2.7 10)
          </SCHEME>
          <SCHEMEOUTPUT>
12.7
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
        表示数字的表达式可以与运算符组合，
	(例如 
        <INDEX><USE>+</USE><SUBINDEX>作为数值加法运算符</SUBINDEX></INDEX>
        <INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>+</USE> (用于数值加法)</SUBINDEX></INDEX>
        如 <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>
        <INDEX>算术<SUBINDEX>运算符</SUBINDEX></INDEX>
        <INDEX><ORDER>-1</ORDER><USE>*</USE> (乘法运算符)</INDEX>
        <INDEX><OPERATOR></OPERATOR><SUBINDEX><ORDER>-1</ORDER><USE>*</USE> (乘法)</SUBINDEX></INDEX>
        或<SPACE></SPACE><JAVASCRIPTINLINE>*</JAVASCRIPTINLINE>) 形成一个
        <INDEX>复合表达式</INDEX>
        <INDEX>运算符组合</INDEX>
        的复合表达式，该表达式表示对应的原语
        函数对这些数字的应用。例如，
	<WEB_ONLY DIFFERENT_TEXT="yes">
	  通过点击以下任一表达式语句进行求值：
	</WEB_ONLY>
      
        <JAVASCRIPT>
137 + 349;
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
486	  
	</JAVASCRIPT_OUTPUT>
      
      
        <JAVASCRIPT>
1000 - 334;
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
666	    
	</JAVASCRIPT_OUTPUT>
      
      
        <JAVASCRIPT>
5 * 99;
        </JAVASCRIPT>
	<JAVASCRIPT_OUTPUT>
495	  
	</JAVASCRIPT_OUTPUT>
      
      
	<INDEX><USE>/</USE> (除法运算符)</INDEX>
	<INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>/</USE> (除法)</SUBINDEX></INDEX>
        <JAVASCRIPT>
10 / 4;
        </JAVASCRIPT>  
	<JAVASCRIPT_OUTPUT>
2.5	  
	</JAVASCRIPT_OUTPUT>
      
      
        <JAVASCRIPT>
2.7 + 10;
        </JAVASCRIPT>  
	<JAVASCRIPT_OUTPUT>
12.7	  
	</JAVASCRIPT_OUTPUT>
      
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>
   <SPLIT>
    
      <TEXT>
        这些表达式通过 
        <INDEX>括号<SUBINDEX>限定组合</SUBINDEX></INDEX>
        限定表达式列表
        在括号内，以表示
        <INDEX>过程应用<SUBINDEX>表示组合</SUBINDEX></INDEX>
        过程应用，
        被称为 <EM>组合</EM>。列表中的最左侧
        元素被称为 
        <INDEX>组合的运算符</INDEX>
        <EM>运算符</EM>，而其他
        元素被称为 
        <INDEX>组合的操作数</INDEX>
        <EM>操作数</EM>。组合的
        <INDEX>值<SUBINDEX><ORDER>组合</ORDER>的值</SUBINDEX></INDEX>
        通过将运算符指定的过程应用于
        <INDEX>参数</INDEX>
        <EM>参数</EM> （其值为操作数）得到。
      </TEXT>
    
    <JAVASCRIPT>
      <TEXT>
        诸如此类的表达式，其中包含其他表达式
        作为组成部分，被称为 <EM>组合</EM>。
        <INDEX>组合</INDEX>
        由一个 
        <INDEX>组合的运算符</INDEX>
        <INDEX>运算符组合</INDEX>
        <EM>运算符</EM> 符号在中间构成，并且
        <INDEX>组合的操作数</INDEX>
        <EM>操作数</EM> 表达式位于其左侧和右侧的，
        被称为 
        <EM>运算符组合</EM>。
	<INDEX>值<SUBINDEX><ORDER>表达式</ORDER>的值</SUBINDEX></INDEX>
        运算符组合的值是
        通过将运算符指定的函数应用于
        参数（其值为操作数）得到的。
      </TEXT>
    </JAVASCRIPT>
  </SPLIT> 
  <SPLIT>
    <SCHEME>
      <TEXT>
        The convention of placing the operator to the left of the operands is
        known as 
        <INDEX>prefix notation</INDEX>
        <EM>prefix notation</EM>, and it may be somewhat confusing at
        first because it departs significantly from the customary mathematical
        convention.  Prefix notation has several advantages, however.  One of
        them is that it can accommodate 
        <INDEX>procedure<SUBINDEX>arbitrary number of arguments</SUBINDEX></INDEX>
        <INDEX>argument(s)<SUBINDEX>arbitrary number of</SUBINDEX></INDEX>
        procedures that may take an arbitrary
        number of arguments, as in the following examples:
        <SNIPPET>
          <SCHEME>
(+ 21 35 12 7)
          </SCHEME>
          <SCHEMEOUTPUT>
75
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET>
          <SCHEME>
(* 25 4 12)
          </SCHEME>
          <SCHEMEOUTPUT>
1200
          </SCHEMEOUTPUT>
        </SNIPPET>
        No ambiguity can arise, because the operator is always the leftmost 
        element and the entire combination is delimited by the
        parentheses.
      </TEXT>
      <TEXT>
        A second advantage of prefix notation is that it extends in a
        straightforward way to allow combinations to be
        <INDEX>nested combinations</INDEX>
	<EM>nested</EM>, that is, to have combinations whose elements are
	themselves combinations:
        <SNIPPET>
          <SCHEME>
(+ (* 3 5) (- 10 6))
          </SCHEME>
          <SCHEMEOUTPUT>
19
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT> 
将运算符放置在操作数之间的惯例称为 
<INDEX>中缀运算符</INDEX>
<INDEX>中缀表示法</INDEX>
<EM>中缀表示法</EM>。它遵循您在学校和日常生活中最有可能熟悉的数学表示法。
与数学一样，运算符组合可以是<EM>嵌套</EM>的，也就是说，它们可以有
<INDEX>嵌套运算符组合</INDEX>
本身是运算符组合的操作数：
<SNIPPET>
          <JAVASCRIPT>
(3 * 5) + (10 - 6);
          </JAVASCRIPT>
	  <JAVASCRIPT_OUTPUT>
19
	  </JAVASCRIPT_OUTPUT>
        </SNIPPET> 
如常， 
<INDEX>括号<SUBINDEX><ORDER>用于组合运算符</ORDER></SUBINDEX></INDEX>
括号用于组合运算符，以避免歧义。当省略括号时，JavaScript 也遵循通常的约定：乘法和除法的优先级高于加法和减法。例如，
<SNIPPET>
          <JAVASCRIPT>
3 * 5 + 10 / 2;
          </JAVASCRIPT>
        </SNIPPET> 
代表 
<SNIPPET>
          <JAVASCRIPT>
(3 * 5) + (10 / 2);
          </JAVASCRIPT>
        </SNIPPET> 
我们说 <JAVASCRIPTINLINE>*</JAVASCRIPTINLINE> 和
<JAVASCRIPTINLINE>/</JAVASCRIPTINLINE> 的
<INDEX>优先级<SUBINDEX><ORDER>运算符</ORDER>的运算符</SUBINDEX></INDEX>
<EM>优先级较高</EM>
于 <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> 和
<JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>。加法和
减法的顺序从左到右阅读，乘法和除法的顺序也是如此。因此，
<SNIPPET>
          <INDEX><USE>-</USE><SUBINDEX>as numeric subtraction operator</SUBINDEX></INDEX>
          <INDEX><OPERATOR></OPERATOR><SUBINDEX><USE>-</USE> (numeric subtraction operator)</SUBINDEX></INDEX>
	  <EXPECTED>-6</EXPECTED>
          <JAVASCRIPT>
1 - 5 / 2 * 4 + 3;
          </JAVASCRIPT>
        </SNIPPET> 
我们说 <JAVASCRIPTINLINE>*</JAVASCRIPTINLINE> 和
<JAVASCRIPTINLINE>/</JAVASCRIPTINLINE> 的
<INDEX>优先级<SUBINDEX><ORDER>运算符</ORDER>的运算符</SUBINDEX></INDEX>
<EM>优先级较高</EM>
于 <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> 和
<JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>。加法和
减法的顺序从左到右阅读，乘法和除法的顺序也是如此。因此，
<SNIPPET>
          <JAVASCRIPT>
(1 - ((5 / 2) * 4)) + 3;
          </JAVASCRIPT>
        </SNIPPET> 
我们说运算符
<JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>、 
<JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>、 
<JAVASCRIPTINLINE>*</JAVASCRIPTINLINE> 和 
<JAVASCRIPTINLINE>/</JAVASCRIPTINLINE> 是 
<INDEX>结合性<SUBINDEX><ORDER>运算符</ORDER>的运算符</SUBINDEX></INDEX>
<INDEX>左结合</INDEX>
<EM>左结合</EM>。
</TEXT>
    </JAVASCRIPT>
  </SPLIT>
  <SPLIT>
    <SCHEME>
      <TEXT>
        There is no limit (in principle) to the depth of such nesting and to the
	overall complexity of the expressions that the Lisp interpreter can
	evaluate. It is we humans who get confused by still relatively simple
	expressions such as
        <SNIPPET>
          <SCHEME>
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
          </SCHEME>
        </SNIPPET>
        which the interpreter would readily evaluate to be 57.  We can help
        ourselves by writing such an expression in the form
        <SNIPPET>
          <SCHEME>
(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6))
          </SCHEME>
        </SNIPPET>
        following a formatting convention known as  
        <INDEX>pretty-printing</INDEX>
        <EM>pretty-printing</EM>, in which each long combination is written so
	that the operands are aligned vertically.  The resulting
	<INDEX>indentation</INDEX>
        <INDEX>nested combinations</INDEX>
        <INDEX>combination</INDEX>
	indentations
	display clearly the structure of the expression.<FOOTNOTE>Lisp systems
	typically provide
        <INDEX>formatting input expressions</INDEX>
        <INDEX>typing input expressions</INDEX>
        features to aid the user in formatting expressions.  Two especially
        useful features are one that automatically indents to the proper
        pretty-print position whenever a new line is started and one that
        highlights the matching left parenthesis whenever a right parenthesis
        is typed.</FOOTNOTE>
      </TEXT>
    </SCHEME>
     <JAVASCRIPT>
      <TEXT>
        这种嵌套的深度和 JavaScript 解释器可以求值的整体复杂度原则上没有限制。困惑的往往是我们人类，对于仍然相对简单的表达式，如
        
	  <EXPECTED>57</EXPECTED>
          <JAVASCRIPT>
3 * 2 * (3 - 5 + 4) + 27 / 6 * 10;
          </JAVASCRIPT>
        
        解释器会迅速求值得到 57。我们可以通过将表达式写成如下形式来帮助自己
        
          <JAVASCRIPT>
3 * 2 * (3 - 5 + 4) 
+ 
27 / 6 * 10;
          </JAVASCRIPT>
        
        从视觉上分离表达式的主要组成部分。
      </TEXT>
    </JAVASCRIPT>
   </SPLIT>
  <TEXT> 
即使对于复杂的表达式，解释器始终在相同的基本循环中运行：它从终端读取
<SPLITINLINE>
  一个表达式，
  <JAVASCRIPT>用户输入的一个语句，</JAVASCRIPT>
</SPLITINLINE>
求值
<SPLITINLINE>
  表达式，
  <JAVASCRIPT>语句，</JAVASCRIPT>
</SPLITINLINE>
并打印结果。这种操作模式通常用来表示解释器在
<SPLITINLINE>
  
	<INDEX>读取-求值-打印循环</INDEX>
	<INDEX>解释器<SUBINDEX>读取-求值-打印循环</SUBINDEX></INDEX>
	<EM>读取-求值-打印循环</EM>。
  
  <JAVASCRIPT>
	<INDEX>读取-求值-打印循环</INDEX>
	<INDEX>解释器<SUBINDEX>读取-求值-打印循环</SUBINDEX></INDEX>
	<EM>读取-求值-打印循环</EM>。
  </JAVASCRIPT>
</SPLITINLINE>
特别要注意的是，不必明确指示解释器打印
 <SPLITINLINE>
      
	表达式。<FOOTNOTE>Lisp 遵循每个
	<INDEX>Perlis, Alan J.<SUBINDEX>双关语</SUBINDEX></INDEX>
	<INDEX>Wilde, Oscar (Perlis<APOS></APOS> 的化用)</INDEX>
	<INDEX>值<SUBINDEX><ORDER>表达式</ORDER>的值</SUBINDEX></INDEX>
	<INDEX>Lisp<SUBINDEX>效率</SUBINDEX></INDEX>
	表达式都有值的惯例。这一惯例，加上 Lisp 一直以来作为低效语言的声誉，成为了 Alan Perlis（化用 Oscar Wilde）所说的
	<QUOTE> Lisp 程序员知道一切的价值，但不知道任何的成本。</QUOTE></FOOTNOTE>
      
      <JAVASCRIPT>
	语句。<FOOTNOTE>JavaScript 遵循每个
	<INDEX>Perlis, Alan J.<SUBINDEX>双关语</SUBINDEX></INDEX>
	<INDEX>Wilde, Oscar (Perlis<APOS></APOS> 的化用)</INDEX>
	<INDEX>值<SUBINDEX><ORDER>表达式</ORDER>的值</SUBINDEX></INDEX>
	<INDEX>Lisp<SUBINDEX>效率</SUBINDEX></INDEX>
	语句都有值的惯例（见练习<SPACE></SPACE><REF NAME="ex:value_producing"></REF>）。这一惯例，加上 JavaScript 程序员不太关心效率的声誉，促使我们化用 Alan Perlis 对 Lisp 程序员的双关语（他自己也是在化用 Oscar Wilde）：<EM>JavaScript 程序员知道一切的价值，但不知道任何的成本。</EM></FOOTNOTE>
      </JAVASCRIPT>
    </SPLITINLINE>
   </TEXT>
</SUBSECTION>
