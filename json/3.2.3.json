[{"id":"/sicpjs/3.2.3","tag":"TITLE","body":"3.2.3  \n    Frames as the Repository of Local State"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    We can turn to the environment model to see how\n    functions\n    and assignment can be used to represent objects with local state.  As an\n    example, consider the\n    \"","tag":"#text"},{"body":"withdrawal processor","tag":"#text"},{"body":"\" from\n    section ","tag":"#text"},{"tag":"REF","body":"3.1.1","href":"/sicpjs/3.1.1"},{"body":" created by calling the\n    function","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABQAjRgBtGZVgEpQAbxyg1oQa3KFBdRvWolyoALwA+ZavXWbayvlATps0q1BmTofYeLlFK20DbSRk5U1AQlzcAWi8DIwBuKyCUzW1dCOc5JJTbAF9QVikAZzcA3KC0nToAIkpiYsJ8fEpSSlZfUCJifmKanIr1POSgvKS8oA","body":"function make_withdraw(balance) {\n    return amount => {\n               if (balance >= amount) {\n                   balance = balance - amount;\n                   return balance;\n               } else {\n                   return \"insufficient funds\";\n               }\n           };\n} "},{"body":"\n    Let us describe the evaluation of\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABQAjRgBtGZVgEpQAbxyg1oQa3KFBdRvWolyoALwA+ZavXWbayvlATps0q1BmTofYeLlFK20DbSRk5U1AQlzcAWi8DIwBuKyCUzW1dCOc5JJTbAF9QVikAZzcA3KC0nToAIkpiYsJ8fEpSSlZfUCJifmKanIr1POSgvKThnFJaYuMAdQBGcKY2Lh4BYTF5gAYt+QSgA","body":"const W1 = make_withdraw(100); "},{"body":"\n    followed by\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":14,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABQAjRgBtGZVgEpQAbxyg1oQa3KFBdRvWolyoALwA+ZavXWbayvlATps0q1BmTofYeLlFK20DbSRk5U1AQlzcAWi8DIwBuKyCUzW1dCOc5JJTbAF9QVikAZzcA3KC0nToAIkpiYsJ8fEpSSlZfUCJifmKanIr1POSgvKThnFJaYuMAdQBGcKY2Lh4BYTF5gAYt+SScBdEAVl2EoA","body":"W1(50); ","output":"50"},{"body":"\n\tFigure ","tag":"#text"},{"tag":"REF","body":"3.6","href":"/sicpjs/3.2.3#fig-3.6"},{"body":"\n    shows the result of\n    declaring the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":"function\n    in the\n    program\n    environment.  This produces a\n    function\n    object that contains a pointer to the\n    program\n    environment. So far, this is no different from the examples we have already\n    seen, except that\n    \n\tthe return expression in the body of the function is itself\n\ta lambda expression.\n      ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-7.svg","id":"#fig-3.6","captionHref":"/sicpjs/3.2.3#fig-3.6","captionName":"Figure 3.6 ","captionBody":[{"body":"\n\t    Result of defining\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":" in\n\t    the program environment.\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The interesting part of the computation happens when we apply the \n    function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":"\n    to an argument:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"const W1 = make_withdraw(100);"},{"body":" \n    We begin, as usual, by setting up an environment E1 in which the\n     parameter\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" is bound to the argument 100.  Within\n    this environment, we evaluate the body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":",\n      \n    namely the\n    return statement whose return expression is\n      a lambda expression. The evaluation of this lambda expression\n    constructs a new\n    function\n    object, whose code is as specified by the\n    lambda expression\n    and whose environment is E1, the environment in which the\n    lambda expression\n    was evaluated to produce the\n    function.\n    The resulting\n    function\n    object is the value returned by the call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":".\n    This is bound to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" in the\n    program\n    environment, since the\n    constant declaration\n    itself is being evaluated in the\n    program\n    environment.\n    \n\tFigure ","tag":"#text"},{"tag":"REF","body":"3.7","href":"/sicpjs/3.2.3#fig-3.7"},{"body":"\n    shows the resulting environment structure.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-8.svg","id":"#fig-3.7","captionHref":"/sicpjs/3.2.3#fig-3.7","captionName":"Figure 3.7 ","captionBody":[{"body":"\n\t    Result of evaluating\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const W1 = make_withdraw(100);"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    Now we can analyze what happens when ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":"\n    is applied to an argument:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":false,"body":"W1(50);","output":"50"},{"body":"\n    We begin by constructing a frame in which\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":", the\n     parameter of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":", is bound to the argument 50.  The crucial\n    point to observe is that this frame has as its enclosing environment not the\n    program\n    environment, but rather the environment E1, because this is the\n    environment that is specified by the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":"function\n    object. Within this new environment, we evaluate the body of the\n    function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":false,"body":"if (balance >= amount) {\n    balance = balance - amount;\n    return balance;\n} else {\n    return \"insufficient funds\";\n}"},{"body":"\n    The resulting environment structure is shown in\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.8","href":"/sicpjs/3.2.3#fig-3.8"},{"body":".\n      \n    The expression being evaluated references\n    both ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":".\n    The variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":"\n    will be found in the first frame in the environment, and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" will be found by following the\n    enclosing-environment pointer to E1.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-9.svg","id":"#fig-3.8","captionHref":"/sicpjs/3.2.3#fig-3.8","captionName":"Figure 3.8 ","captionBody":[{"body":"\n\t    Environments created by applying the function object\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    When the\n    assignment\n    is executed, the binding of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" in E1 is\n    changed.  At the completion of the call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" is 50,\n    and the frame that contains ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" is still\n    pointed to by the\n    function\n    object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":".  The frame that binds\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":" (in which we executed the code that\n    changed ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":") is no longer relevant, since\n    the\n    function\n    call that constructed it has terminated, and there are no pointers to that\n    frame from other parts of the environment.  The next time\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" is called, this will build a new frame that\n    binds ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"amount"},{"body":" and whose enclosing environment is\n    E1. We see that E1 serves as the \"","tag":"#text"},{"body":"place","tag":"#text"},{"body":"\" that holds the local\n    state variable for the\n    function\n    object ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":".\n    \n\tFigure ","tag":"#text"},{"tag":"REF","body":"3.9","href":"/sicpjs/3.2.3#fig-3.9"},{"body":"\n    shows the situation after the call to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":".\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-10.svg","id":"#fig-3.9","captionHref":"/sicpjs/3.2.3#fig-3.9","captionName":"Figure 3.9 ","captionBody":[{"body":"\n\t    Environments after the call to\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":".\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Observe what happens when we create a second \"","tag":"#text"},{"body":"withdraw","tag":"#text"},{"body":"\" object\n    by making another call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":12,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABQAjRgBtGZVgEpQAbxyg1oQa3KFBdRvWolyoALwA+ZavXWbayvlATps0q1BmTofYeLlFK20DbSRk5U1AQlzcAWi8DIwBuKyCUzW1dCOc5JJTbAF9QVikAZzcA3KC0nToAIkpiYsJ8fEpSSlZfUCJifmKanIr1POSgvKThnFJaYuMAdQBGcKY2Lh4BYTF5gAYt+SSF0QBWXaSphrmMJZYObj4hEVFtk5xZjFEADhOgA","body":"const W2 = make_withdraw(100); "},{"body":"\n    This produces the environment structure of\n    \n\tfigure ","tag":"#text"},{"tag":"REF","body":"3.10","href":"/sicpjs/3.2.3#fig-3.10"},{"body":",\n      \n    which shows\n    that ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" is a\n    function\n    object, that is, a pair with some code and an environment.  The environment\n    E2 for ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" was created by the call to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":".\n      \n    It contains a frame with its own local binding for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":".  On the other hand,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" have the\n    same code: the code specified by the\n    lambda\n    expression in the body of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/3.2.3#footnote-1"},{"body":" We see\n    here why ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":"\n    behave as independent objects.  Calls to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" reference the state variable\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" stored in E1, whereas calls to \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" reference the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" stored in E2. Thus, changes to the\n    local state of one object do not affect the other object.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ch3-Z-G-11.svg","id":"#fig-3.10","captionHref":"/sicpjs/3.2.3#fig-3.10","captionName":"Figure 3.10 ","captionBody":[{"body":"\n\t    Using\n\t    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"const W2 = make_withdraw(100);"},{"body":"\n\t    to create a second object.\n\t  ","tag":"#text"}]}]},{"tag":"EXERCISE","title":"Exercise 3.10","id":"#ex-3.10","child":[{"body":"\n    In the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":"function\n    the local variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" is created as a\n    parameter of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":".\n      \n    We could also create the local state variable\n    \n\tseparately,\n      \n    using \n    \n\twhat we might call an\n\t","tag":"#text"},{"tag":"EM","child":[{"body":"immediately invoked lambda\n\texpression","tag":"#text"}]},{"body":"\n    as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":0,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABSViPSowA27RvWolyASlABvHKG2hBrcoUF1RAI1mMyrUAF4AfKC06nz0AqXFyN+5pe-nlfFBTc0tQW2tXRWU1Hz84pzMZC1IrCMTkqwBaSPdyAG5HePi9AyNQdMsCor8AX1BWGQBnK1jqvxLDOgAiCUbCfHxKUkpWD1AiYn5Grqq25xrCopqVcUkqWXkojxUChZxSWkbPAHUARhsGFg5uPiERUVOABkednDPRAA4XvKA","body":"function make_withdraw(initial_amount) {\n    return (balance => \n              amount => {\n                  if (balance >= amount) {\n                      balance = balance - amount;\n                      return balance;\n                   } else {\n                      return \"insufficient funds\";\n                   }\n              })(initial_amount);\n} "},{"body":"\n\tThe outer lambda expression is invoked immediately after it\n\tis evaluated. Its only purpose is to create a local variable\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"balance"},{"body":" and\n\tinitialize it to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"initial_amount"},{"body":".\n      \n    Use the environment model to analyze this alternate version of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":", drawing figures like the ones\n    above to illustrate the interactions\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":true,"prependLength":13,"program":"chap=3&prgrm=PTAEGUEkGEAVQFLlAZgHQCY0oFA4GYCuAdgMYAuAlgPbGgC2AhgNYCmA+gO6XkAWAJgCdGnABSViPSowA27RvWolyASlABvHKG2hBrcoUF1RAI1mMyrUAF4AfKC06nz0AqXFyN+5pe-nlfFBTc0tQW2tXRWU1Hz84pzMZC1IrCMTkqwBaSPdyAG5HePi9AyNQdMsCor8AX1BWGQBnK1jqvxLDOgAiCUbCfHxKUkpWD1AiYn5Grqq25xrCopqVcUkqWXkojxUChZxSWkbPAHUARhsGFg5uPiERUVOABkedvDPRAFYXgoBIfcOThgLkw2FweAJhGInt8gA","body":"const W1 = make_withdraw(100);\n\nW1(50);\n\t\nconst W2 = make_withdraw(100); "},{"body":"\n    Show that the two versions of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":"\n    create objects with the same behavior.  How do the environment structures\n    differ for the two versions?\n    ","tag":"#text"}],"solution":[{"tag":"UL","child":[{"tag":"LI","child":[{"body":"Black shows the environment structure of function in exercise 3.10","tag":"#text"}]},{"tag":"LI","child":[{"body":"Green shows differences in environment structure of original\n\t(where ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_withdraw"},{"body":" is replaced with the figure 3.9 version)","tag":"#text"}]}]},{"tag":"FIGURE","scale":"70%","src":"img_javascript/ex3-10-solution.png","id":"#fig-"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/3.2.3#footnote-link-1","child":[{"body":"Whether\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W1"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"W2"},{"body":" share\n    the same physical code stored in the computer, or whether they each keep a\n    copy of the code, is a detail of the implementation.  For the interpreter we\n    implement in chapter ","tag":"#text"},{"tag":"REF","body":"4","href":"/sicpjs/4"},{"body":", the code is in fact shared.","tag":"#text"}]}]