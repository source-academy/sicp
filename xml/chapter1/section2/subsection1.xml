<SUBSECTION>
  <NAME>Linear Recursion and Iteration</NAME>

  <LABEL NAME="sec:recursion-and-iteration"/>
  <INDEX>iterative process<SUBINDEX>recursive process vs.<OPEN/></SUBINDEX></INDEX>
  <INDEX>recursive process<SUBINDEX>iterative process vs.<OPEN/></SUBINDEX></INDEX>

  <TEXT>
    We begin by considering the
    <INDEX>factorial</INDEX>
    factorial function, defined by
    <LATEX>
      \[
      \begin{array}{lll}
      n! &amp;=&amp; n\cdot(n-1)\cdot(n-2)\cdots3\cdot2\cdot1
      \end{array}
      \]
    </LATEX>
    There are many ways to compute factorials.  One way is to make use of
    the observation that <LATEXINLINE>$n!$</LATEXINLINE> is equal to 
    <LATEXINLINE>$n$</LATEXINLINE> times <LATEXINLINE>$(n-1)!$</LATEXINLINE> for
    any positive integer<SPACE/><LATEXINLINE>$n$</LATEXINLINE>:
    <LATEX>
      \[
      \begin{array}{lll}
      n! &amp;=&amp; n\cdot\left[(n-1)\cdot(n-2)\cdots3\cdot2\cdot1\right] \quad = \quad n \cdot(n-1)!
      \end{array}
      \]
    </LATEX>
    Thus, we can compute <LATEXINLINE>$n!$</LATEXINLINE> by computing 
    <LATEXINLINE>$(n-1)!$</LATEXINLINE> and multiplying the
    result by <LATEXINLINE>$n$</LATEXINLINE>.  If we add the stipulation that 1! 
    is equal to 1,
    this observation translates directly into a 
    <SPLITINLINE>
      <SCHEME>procedure:</SCHEME>
      <JAVASCRIPT>computer function:</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET>
      <INDEX><DECLARATION>factorial</DECLARATION><SUBINDEX>linear recursive version</SUBINDEX></INDEX>
      <NAME>factorial_definition</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="32" HIDE="yes">
      <NAME>factorial_example</NAME>
      <SCHEME>
(factorial 5)
      </SCHEME>
      <JAVASCRIPT>
factorial(5);
      </JAVASCRIPT>
    </SNIPPET>

    <SPLIT>
      <SCHEME>
	<FIGURE src="img_original/ch1-Z-G-7.svg">
	  <LABEL NAME="fig:recursive-factorial-scheme"/>
	  <CAPTION>A linear recursive process for computing 6!.
	  </CAPTION>
	</FIGURE>
          <INDEX>substitution model of procedure application<SUBINDEX>shape of process<OPEN/></SUBINDEX></INDEX>
          We can use the substitution model of
          section<SPACE/><REF NAME="sec:substitution-model"/> to watch this 
	  procedure in action computing 6!, as shown in
	  figure<SPACE/><REF NAME="fig:recursive-factorial-scheme"/>.
      </SCHEME>
      <JAVASCRIPT>
	<FIGURE>
	  <FIGURE web_scale="0.7" src="img_javascript/ch1-Z-G-7.svg"></FIGURE>
	  <LABEL NAME="fig:recursive-factorial-javascript"/>
	  <CAPTION>A linear recursive process for computing 6!.
	  </CAPTION>
	</FIGURE>
        <INDEX>substitution model of function application<SUBINDEX>shape of process<OPEN/></SUBINDEX></INDEX>
	We can use the substitution model of
        section<SPACE/><REF NAME="sec:substitution-model"/> to watch this
        function in action computing 6!, as shown in
	figure<SPACE/><REF NAME="fig:recursive-factorial-javascript"/>.
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <TEXT>
    Now let<APOS/>s take a different perspective on computing factorials.  We
    could describe a rule for computing <LATEXINLINE>$n!$</LATEXINLINE> by 
    specifying that we first multiply 1 by 2, then multiply the result by 3,
    then by 4, and so on until we reach <LATEXINLINE>$n$</LATEXINLINE>.
    More formally, we maintain a running product, together with a counter
    that counts from 1 up to <LATEXINLINE>$n$</LATEXINLINE>.  We can describe
    the computation by saying that the counter and the product simultaneously
    change from one step to the next according to the rule
    <LATEX>
      \[
      \begin{array}{lll}
      \textrm{product} &amp; \leftarrow &amp; \textrm{counter} \cdot \textrm{product}\\
      \textrm{counter} &amp; \leftarrow &amp; \textrm{counter} + 1
      \end{array}
      \]
    </LATEX>
and stipulating that <LATEXINLINE>$n!$</LATEXINLINE> is the value of the
    product when the counter exceeds <LATEXINLINE>$n$</LATEXINLINE>.
  </TEXT>

  <TEXT>
    Once again, we can recast our description as a 
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE> 
    for computing
    factorials:<FOOTNOTE>In a real program we would probably use the
    block structure introduced in the last section to hide the 
    <SPLITINLINE>
      <SCHEME>
	definition of <SCHEMEINLINE>fact-iter</SCHEMEINLINE>:
      </SCHEME>
      <JAVASCRIPT>
	declaration of <JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE>:
      </JAVASCRIPT>
    </SPLITINLINE>

    <SNIPPET PAGE="33">
      <EXAMPLE>factorial_example</EXAMPLE>
      <EXPECTED>120</EXPECTED>
      <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        return counter &gt; n 
               ? product
               : iter(counter * product,
                      counter + 1);
    }
    return iter(1, 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    We avoided doing this here so as to minimize the number of things to
    think about at
    once.<LABEL NAME="foot:block-structured-factorial"/></FOOTNOTE>
    <SNIPPET PAGE="34">
      <INDEX><DECLARATION>factorial</DECLARATION><SUBINDEX>linear iterative version</SUBINDEX></INDEX>
      <NAME>factorial_iterative_definition</NAME>
      <EXAMPLE>factorial_example</EXAMPLE>
      <SCHEME>
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return fact_iter(1, 1, n);
}
function fact_iter(product, counter, max_count) {
    return counter &gt; max_count
           ? product
           : fact_iter(counter * product,
                       counter + 1,
                       max_count);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <FIGURE src="img_original/ch1-Z-G-10.svg">
	<LABEL NAME="fig:iterative-factorial-scheme"/>
	<CAPTION>A linear iterative process for computing
	<LATEXINLINE>$6!$</LATEXINLINE>.
	</CAPTION>
      </FIGURE>
      <TEXT>
        As before, we can use the substitution model to visualize the process
        of computing <LATEXINLINE>$6!$</LATEXINLINE>, as shown in
	figure<SPACE/><REF NAME="fig:iterative-factorial-scheme"/>.
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE >
	<FIGURE  web_scale="0.4" src="img_javascript/ch1-Z-G-10.svg"></FIGURE>
	<LABEL NAME="fig:iterative-factorial-javascript"/>
	<CAPTION>A linear iterative process for computing
	<LATEXINLINE>$6!$</LATEXINLINE>.
	</CAPTION>
      </FIGURE>
      <TEXT>
        As before, we can use the substitution model to visualize the process
        of computing <LATEXINLINE>$6!$</LATEXINLINE>, as shown in
	figure<SPACE/><REF NAME="fig:iterative-factorial-javascript"/>.
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <TEXT>
    Compare the two processes.  From one point of view, they seem hardly
    different at all.  Both compute the same mathematical function on the
    same domain, and each requires a number of steps proportional to
    <LATEXINLINE>$n$</LATEXINLINE>
    to compute <LATEXINLINE>$n!$</LATEXINLINE>.  Indeed, both processes even
    carry out the same sequence of multiplications, obtaining the same sequence
    of partial products.  On the other hand, when we consider the
    <INDEX>shape of a process</INDEX>
    <INDEX>process<SUBINDEX>shape of</SUBINDEX></INDEX>
    <QUOTE>shapes</QUOTE> of the two processes, we find that they evolve quite
    differently.
  </TEXT>

  <TEXT>
    Consider the first process.  The substitution model reveals a shape of
    expansion followed by contraction, indicated by the arrow in
    figure<SPACE/><REF NAME="fig:recursive-factorial-javascript"/>.
    The expansion occurs as the process builds up a chain of 
    <INDEX>deferred operations</INDEX>
    <EM>deferred operations</EM> (in this case, a chain of multiplications).
    The contraction occurs as the operations are actually performed.  This
    type of process, characterized by a chain of deferred operations, is called a
    <INDEX>recursive process</INDEX>
    <INDEX>process<SUBINDEX>recursive</SUBINDEX></INDEX>
    <EM>recursive process</EM>.  Carrying out this process requires that the
    interpreter keep track of the operations to be performed later on.  In the
    computation of <LATEXINLINE>$n!$</LATEXINLINE>, the length of the chain of
    deferred multiplications, and hence the amount of information needed to
    keep track of it, 
    <INDEX>linear growth</INDEX>
    grows linearly with <LATEXINLINE>$n$</LATEXINLINE> (is proportional to
    <LATEXINLINE>$n$</LATEXINLINE>), just like the number of steps.
    Such a process is called a
    <INDEX>recursive process<SUBINDEX>linear</SUBINDEX></INDEX>
    <INDEX>linear recursive process</INDEX>
    <INDEX>process<SUBINDEX>linear recursive</SUBINDEX></INDEX>
    <EM>linear recursive process</EM>.
  </TEXT>

  <TEXT>
    By contrast, the second process does not grow and shrink.  At each
    step, all we need to keep track of, for any <LATEXINLINE>$n$</LATEXINLINE>,
    are the current values of the
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>names</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>product</SCHEMEINLINE>, <SCHEMEINLINE>counter</SCHEMEINLINE>,
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>max-count</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>max_count</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    We call this an 
    <INDEX>iterative process</INDEX>
    <INDEX>process<SUBINDEX>iterative</SUBINDEX></INDEX>
    <EM>iterative process</EM>.  In general, an iterative process is one whose
    state can be summarized by a fixed number of
    <INDEX>state variable</INDEX>
    <EM>state variables</EM>, together with a fixed rule that describes how
    the state variables should be updated as the process moves from state to
    state and an (optional) end test that specifies conditions under which the
    process should terminate.  In computing <LATEXINLINE>$n!$</LATEXINLINE>, the
    number of steps required grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.
    Such a process is called a 
    <INDEX>iterative process<SUBINDEX>linear</SUBINDEX></INDEX>
    <INDEX>linear iterative process</INDEX>
    <INDEX>process<SUBINDEX>linear iterative</SUBINDEX></INDEX>
    <EM>linear iterative process</EM>.
  </TEXT>

  <TEXT>
    The contrast between the two processes can be seen in another way.
    In the iterative case, the state variables provide a complete description of
    the state of the process at any point. If we stopped the computation between
    steps, all we would need to do to resume the computation is to supply the
    interpreter with the values of the three state variables. Not so with the
    recursive process.  In this case there is some additional
    <QUOTE>hidden</QUOTE> information, maintained by the interpreter and not
    contained in the state variables, which indicates <QUOTE>where the process
    is</QUOTE> in negotiating the chain of deferred operations.  The longer the
    chain, the more information must be maintained.<FOOTNOTE>When we discuss the
    implementation of
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE> 
    on register machines in chapter<SPACE/>5, we will see that any iterative
    process can be realized <QUOTE>in hardware</QUOTE> as a machine that has a
    fixed set of registers and no auxiliary memory.  In contrast, realizing a
    recursive process requires a machine that uses an
    auxiliary data structure known as a
    <INDEX>stack</INDEX>
    <EM>stack</EM>.</FOOTNOTE>
    <INDEX>substitution model of <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> application<SUBINDEX>shape of process<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <TEXT>
    In contrasting iteration and recursion, we must be careful not to
    confuse the notion of a 
    <INDEX>recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>recursive process vs.</SUBINDEX></INDEX>
    <INDEX>recursive process<SUBINDEX>recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> vs.</SUBINDEX></INDEX>
    recursive <EM>process</EM> with the notion of a recursive 
    <SPLITINLINE>
      <SCHEME>
	<EM>procedure</EM>.
      </SCHEME>
      <JAVASCRIPT>
	<EM>function</EM>.
      </JAVASCRIPT>
    </SPLITINLINE>
    When we describe a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    as recursive, we are referring to the syntactic fact that the
    <SPLITINLINE>
      <SCHEME>procedure definition</SCHEME>
      <JAVASCRIPT>function declaration</JAVASCRIPT>
    </SPLITINLINE> 
    refers (either directly or indirectly) to the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    itself.  But when we describe a process as following a pattern that is, say,
    linearly recursive, we are speaking about how the process evolves, not
    about the syntax of how a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    is written.  It may seem disturbing that we refer to a recursive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    such as 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    as generating an iterative process.  However, the process really is
    iterative: Its state is captured completely by its three state variables,
    and an interpreter need keep track of only three
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>names</JAVASCRIPT>
    </SPLITINLINE>
    in order to execute the process.
  </TEXT>

  <TEXT>
    One reason that the distinction between process and
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    may be confusing is that most implementations of common languages
    <SPLITINLINE>
      <SCHEME>
	(including
	<INDEX>Ada<SUBINDEX>recursive procedures</SUBINDEX></INDEX>
	<INDEX>Pascal<SUBINDEX>recursive procedures</SUBINDEX></INDEX>
	<INDEX>C<SUBINDEX>recursive procedures</SUBINDEX></INDEX>
	Ada, Pascal, and C)
      </SCHEME>
      <JAVASCRIPT>
	(including
	<INDEX>C<SUBINDEX>recursive functions in</SUBINDEX></INDEX>
	C,
	<INDEX>Java, recursive functions in</INDEX>
	Java, and
	<INDEX>Python, recursive functions in</INDEX>
	Python)
      </JAVASCRIPT>
    </SPLITINLINE>
    are designed in such a way that the interpretation of
    any recursive
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    consumes an amount of memory that grows with the number of
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    calls, even when the process described is, in principle, iterative.
    As a consequence, these languages can describe iterative processes only
    by resorting to special-purpose 
    <INDEX>looping constructs</INDEX>
    <QUOTE>looping constructs</QUOTE> such as
    <LATEXINLINE>$\texttt{do}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{repeat}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{until}$</LATEXINLINE>,
    <LATEXINLINE>$\texttt{for}$</LATEXINLINE>, and
    <LATEXINLINE>$\texttt{while}$</LATEXINLINE>.
    The implementation of
    <SPLITINLINE>
      <SCHEME>Scheme</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    we shall consider in chapter<SPACE/>5 does not share this defect.  It will
    execute an iterative process in constant space, even if the iterative
    process is described by a recursive
    <SPLITINLINE>
      <SCHEME>procedure.</SCHEME>
      <JAVASCRIPT>function.</JAVASCRIPT>
    </SPLITINLINE>
    <SPLIT>
      <SCHEME>
	An implementation with this property is called 
	<INDEX>tail recursion</INDEX>
	<EM>tail-recursive</EM>.  With a tail-recursive implementation, 
	iteration can be expressed using the ordinary procedure
	<INDEX>iterative process<SUBINDEX>implemented by procedure call</SUBINDEX></INDEX>
	call mechanism, so that special iteration constructs are useful only as 
	<INDEX>syntactic sugar<SUBINDEX>looping constructs as</SUBINDEX></INDEX>
	syntactic sugar.<FOOTNOTE>Tail recursion has long been
	known as a compiler optimization trick.  A coherent semantic basis for
	tail recursion was provided by
	<INDEX>Hewitt, Carl Eddie</INDEX>
	Carl <CITATION>Hewitt (1977)</CITATION>, who explained it in
	<INDEX>message passing<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
	terms of the <QUOTE>message-passing</QUOTE> model of computation that we
	shall discuss in chapter<SPACE/>3. Inspired by this, Gerald Jay Sussman
	and
	<INDEX>Steele, Guy Lewis Jr.</INDEX>
	Guy Lewis Steele Jr.<SPACE/>(see <CITATION>Steele 1975</CITATION>) 
	constructed a tail-recursive interpreter for Scheme.  Steele later showed
	how tail recursion is a consequence of the natural way to compile
	procedure
	<INDEX>Sussman, Gerald Jay</INDEX>
	calls (<CITATION>Steele 1977</CITATION>).
	The IEEE standard for Scheme requires that Scheme implementations
	<INDEX>tail recursion<SUBINDEX><ORDER>Scheme</ORDER>in Scheme</SUBINDEX></INDEX>
	be tail-recursive.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
	An implementation with this property is called 
	<INDEX>tail recursion</INDEX>
	<EM>tail-recursive</EM>.<FOOTNOTE>Tail recursion has long been
	known as a compiler optimization trick.  A coherent semantic basis for
	tail recursion was provided by
	<INDEX>Hewitt, Carl Eddie</INDEX>
	Carl Hewitt (1977), who explained it in
	<INDEX>message passing<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
	terms of the <QUOTE>message-passing</QUOTE> model of computation that we
	shall discuss in chapter<SPACE/>3. Inspired by this, Gerald Jay Sussman
	and
	<INDEX>Steele, Guy Lewis Jr.</INDEX>
	Guy Lewis Steele Jr.<SPACE/>(see <CITATION>Steele 1975</CITATION>) 
	constructed a tail-recursive interpreter for Scheme.  Steele later showed
	how tail recursion is a consequence of the natural way to compile 
	function calls
	<INDEX>Sussman, Gerald Jay</INDEX>
	(<CITATION>Steele 1977</CITATION>).
	The IEEE standard for Scheme requires that Scheme implementations
	<INDEX>tail recursion<SUBINDEX><ORDER>Scheme</ORDER>in Scheme</SUBINDEX></INDEX>
	<INDEX>tail recursion<SUBINDEX><ORDER>JavaScript</ORDER>in JavaScript</SUBINDEX></INDEX>
	<INDEX>Scheme<SUBINDEX>tail recursion in</SUBINDEX></INDEX>
	<INDEX>JavaScript<SUBINDEX>tail recursion in</SUBINDEX></INDEX>
	be tail-recursive. The ECMA standard for JavaScript eventually followed
	suit with ECMAScript 2015 (<CITATION>ECMA 2015</CITATION>). Note, however,
	that as of this writing (2021), most implementations of JavaScript do
	not comply with this standard with respect to tail recursion.</FOOTNOTE>
	With a tail-recursive implementation, 
	<INDEX>iterative process<SUBINDEX>implemented by function call</SUBINDEX></INDEX>
	iteration can be expressed using the ordinary function
	call mechanism, so that special iteration constructs are useful only as 
	<INDEX>syntactic sugar<SUBINDEX>looping constructs as</SUBINDEX></INDEX>
	syntactic sugar.<FOOTNOTE>Exercises<SPACE/><REF NAME="ex:while_loop"/> and
	<REF NAME="ex:for_loops"/> 
	explore JavaScript's while and for loops as syntactic
	sugar for functions that give rise to iterative processes.
	The full language JavaScript, like other conventional languages,
	features a plethora of syntactic
	forms, all of which can be expressed more uniformly in the
	language Lisp.
	This, together with the fact that these constructs typically involve
	semicolons whose placement rules are sometimes not obvious,
	led Alan Perlis to quip: <QUOTE>Syntactic sugar causes
	cancer of the semicolon.</QUOTE>
	<INDEX>Perlis, Alan J., quips by</INDEX>
	<INDEX>semicolon (<JAVASCRIPTINLINE>;</JAVASCRIPTINLINE>)<SUBINDEX>cancer-causing</SUBINDEX></INDEX>
      </FOOTNOTE>
      </JAVASCRIPT>
    </SPLIT>
    <INDEX>iterative process<SUBINDEX>recursive process vs.<CLOSE/></SUBINDEX></INDEX>
    <INDEX>recursive process<SUBINDEX>iterative process vs.<CLOSE/></SUBINDEX></INDEX>
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:addition-procedures"/>
    Each of the following two
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    defines a method for adding two positive integers in terms of the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>inc</SCHEMEINLINE>, which increments its argument by 1,
    and <SCHEMEINLINE>dec</SCHEMEINLINE>, which decrements its argument by 1.

    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>inc_dec_definition</NAME>
      <SCHEME>
(define (inc x)
  (- x -1))
(define (dec x)
  (- x 1))
      </SCHEME>
      <JAVASCRIPT>
function inc(x) {
    return x + 1;
}
function dec(x) {
    return x - 1;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>plus_example</NAME>
      <SCHEME>
(+ 4 5)
      </SCHEME>
      <JAVASCRIPT>
plus(4, 5);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <REQUIRES>inc_dec_definition</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <EXAMPLE>plus_example</EXAMPLE>
      <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))
      </SCHEME>
      <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : inc(plus(dec(a), b)); 
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET>
      <REQUIRES>inc_dec_definition</REQUIRES>
      <EXPECTED>9</EXPECTED>
      <EXAMPLE>plus_example</EXAMPLE>
      <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
      </SCHEME>
      <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : plus(dec(a), inc(b));
}
      </JAVASCRIPT>
    </SNIPPET>

    Using the substitution model, illustrate the process generated by each
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    in evaluating
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(+ 4 5)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>plus(4, 5);</JAVASCRIPTINLINE>.</JAVASCRIPT>
    </SPLITINLINE>
    Are these processes iterative or recursive?

    <SOLUTION>
      <SPLIT>
	<JAVASCRIPT>
	  The process generated by the first function is recursive.
          <SNIPPET PAGE="36" EVAL="no">
	    <JAVASCRIPT>
plus(4, 5)
4 === 0 ? 5 : inc(plus(dec(4), 5))
inc(plus(dec(4), 5))
...
inc(plus(3, 5))
...
inc(inc(plus(2, 5)))
...
inc(inc(inc(plus(1, 5))))
...
inc(inc(inc(inc(plus(0, 5)))))
inc(inc(inc(inc( 0 === 0 ? 5 : inc(plus(dec(0), 5))))))
inc(inc(inc(inc( 5 ))))
inc(inc(inc( 6 )))
inc(inc( 7 ))
inc( 8 )
9
	    </JAVASCRIPT>
	  </SNIPPET>
	  The process generated by the second function is iterative.
          <SNIPPET PAGE="36" EVAL="no">
	    <JAVASCRIPT>
plus(4, 5)
4 === 0 ? 5 : plus(dec(4), inc(5))
plus(dec(4), inc(5))
...
plus(3, 6)
...
plus(2, 7)
...
plus(1, 8)
...
plus(0, 9)
0 === 0 ? 9 : plus(dec(0), inc(9))
9
	    </JAVASCRIPT>
	  </SNIPPET>
	</JAVASCRIPT>
      </SPLIT>
    </SOLUTION>
  </EXERCISE>

  <EXERCISE>
    The following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    computes a mathematical function called
    <INDEX>Ackermann<APOS/>s function</INDEX>
    <INDEX>function (mathematical)<SUBINDEX>Ackermann<APOS/>s</SUBINDEX></INDEX>
    Ackermann<APOS/>s function.

    <SNIPPET PAGE="36">
      <NAME>ackermann_definition</NAME>
      <EXAMPLE>ackermann_example</EXAMPLE>
      <SCHEME>
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
      </SCHEME>
      <JAVASCRIPT>
function A(x, y) {
    return y === 0
           ? 0
           : x === 0
           ? 2 * y
           : y === 1
           ? 2
           : A(x - 1, A(x, y - 1));
}
      </JAVASCRIPT>
    </SNIPPET>

    What are the values of the following expressions?

    <SNIPPET PAGE="36">
      <NAME>ackermann_example</NAME>
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>1024</EXPECTED>
      <SCHEME>
(A 1 10)
      </SCHEME>
      <JAVASCRIPT>
A(1, 10);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36">
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>65536</EXPECTED>
      <SCHEME>
(A 2 4)
      </SCHEME>
      <JAVASCRIPT>
A(2, 4);
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36">
      <REQUIRES>ackermann_definition</REQUIRES>
      <EXPECTED>65536</EXPECTED>
      <SCHEME>
(A 3 3)
      </SCHEME>
      <JAVASCRIPT>
A(3, 3);
      </JAVASCRIPT>
    </SNIPPET>

    Consider the following
    <SPLITINLINE>
      <SCHEME>procedures,</SCHEME>
      <JAVASCRIPT>functions,</JAVASCRIPT>
    </SPLITINLINE>
    where <SCHEMEINLINE>A</SCHEMEINLINE> is the
    <SPLITINLINE>
      <SCHEME>procedure defined</SCHEME>
      <JAVASCRIPT>function declared</JAVASCRIPT>
    </SPLITINLINE>  
    above:
    <SNIPPET PAGE="36">
      <NAME>fghk_definition</NAME>
      <EXAMPLE>fghk_example</EXAMPLE>
      <REQUIRES>ackermann_definition</REQUIRES>
      <SCHEME>
(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))
      </SCHEME>
      <JAVASCRIPT>
function f(n) {
    return A(0, n);
}
function g(n) {
    return A(1, n);
}
function h(n) {
    return A(2, n);
}
function k(n) {
   return 5 * n * n;
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="36" HIDE="yes">
      <NAME>fghk_example</NAME>
      <EXPECTED>80</EXPECTED>
      <REQUIRES>fghk_definition</REQUIRES>
      <SCHEME>
(k 4)
      </SCHEME>
      <JAVASCRIPT>
k(4);
      </JAVASCRIPT>
    </SNIPPET>
    Give concise mathematical definitions for the functions computed by
    the
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    <SCHEMEINLINE>f</SCHEMEINLINE>, <SCHEMEINLINE>g</SCHEMEINLINE>, and
    <SCHEMEINLINE>h</SCHEMEINLINE> for positive integer values of
    <LATEXINLINE>$n$</LATEXINLINE>.  For example,
    <LATEXINLINE>$k(n)$</LATEXINLINE> computes
    <LATEXINLINE>$5n^2$</LATEXINLINE>.

    <SOLUTION>
      The function <LATEXINLINE>$f(n)$</LATEXINLINE> computes
      <LATEXINLINE>$2 n$</LATEXINLINE>,
      the function <LATEXINLINE>$g(n)$</LATEXINLINE> computes
      <LATEXINLINE>$2^n$</LATEXINLINE>, and
      the function <LATEXINLINE>$h(n)$</LATEXINLINE> computes
      <LATEXINLINE>$2^{2^{\cdot^{\cdot^{\cdot^2}}}}$</LATEXINLINE>
      where the number of 2s in the chain of exponentiation is
      <LATEXINLINE>$n$</LATEXINLINE>.
    </SOLUTION>
  </EXERCISE>

</SUBSECTION>
